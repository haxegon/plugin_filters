// Generated by Haxe 3.4.4
#ifndef INCLUDED_lime_media_codecs_vorbis_VorbisInfo
#define INCLUDED_lime_media_codecs_vorbis_VorbisInfo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_0b8697b35796d9c3_16_new)
HX_DECLARE_CLASS4(lime,media,codecs,vorbis,VorbisInfo)

namespace lime{
namespace media{
namespace codecs{
namespace vorbis{


class HXCPP_CLASS_ATTRIBUTES VorbisInfo_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef VorbisInfo_obj OBJ_;
		VorbisInfo_obj();

	public:
		enum { _hx_ClassId = 0x72db4f60 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.media.codecs.vorbis.VorbisInfo")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.media.codecs.vorbis.VorbisInfo"); }

		hx::ObjectPtr< VorbisInfo_obj > __new() {
			hx::ObjectPtr< VorbisInfo_obj > __this = new VorbisInfo_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< VorbisInfo_obj > __alloc(hx::Ctx *_hx_ctx) {
			VorbisInfo_obj *__this = (VorbisInfo_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VorbisInfo_obj), false, "lime.media.codecs.vorbis.VorbisInfo"));
			*(void **)__this = VorbisInfo_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_0b8697b35796d9c3_16_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~VorbisInfo_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("VorbisInfo","\x81","\x11","\x81","\xd6"); }

		int bitrateLower;
		int bitrateNominal;
		int bitrateUpper;
		int channels;
		int rate;
		int version;
};

} // end namespace lime
} // end namespace media
} // end namespace codecs
} // end namespace vorbis

#endif /* INCLUDED_lime_media_codecs_vorbis_VorbisInfo */ 
