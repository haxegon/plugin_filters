// Generated by Haxe 3.4.4
#ifndef INCLUDED_lime_graphics_FlashRenderContext
#define INCLUDED_lime_graphics_FlashRenderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_0b824a2f87583a36_62_new)
HX_DECLARE_CLASS2(lime,graphics,FlashRenderContext)

namespace lime{
namespace graphics{


class HXCPP_CLASS_ATTRIBUTES FlashRenderContext_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FlashRenderContext_obj OBJ_;
		FlashRenderContext_obj();

	public:
		enum { _hx_ClassId = 0x569d9b29 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.graphics.FlashRenderContext")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.graphics.FlashRenderContext"); }

		hx::ObjectPtr< FlashRenderContext_obj > __new() {
			hx::ObjectPtr< FlashRenderContext_obj > __this = new FlashRenderContext_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< FlashRenderContext_obj > __alloc(hx::Ctx *_hx_ctx) {
			FlashRenderContext_obj *__this = (FlashRenderContext_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlashRenderContext_obj), true, "lime.graphics.FlashRenderContext"));
			*(void **)__this = FlashRenderContext_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_0b824a2f87583a36_62_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlashRenderContext_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlashRenderContext","\x89","\x79","\x37","\x20"); }

		 ::Dynamic accessibilityImplementation;
		 ::Dynamic accessibilityProperties;
		Float alpha;
		 ::Dynamic blendMode;
		 ::Dynamic blendShader;
		bool buttonMode;
		bool cacheAsBitmap;
		 ::Dynamic contextMenu;
		bool doubleClickEnabled;
		 ::Dynamic dropTarget;
		::cpp::VirtualArray filters;
		 ::Dynamic focusRect;
		 ::Dynamic graphics;
		Float height;
		 ::Dynamic hitArea;
		 ::Dynamic loaderInfo;
		 ::Dynamic mask;
		bool mouseChildren;
		bool mouseEnabled;
		Float mouseX;
		Float mouseY;
		::String name;
		bool needsSoftKeyboard;
		int numChildren;
		 ::Dynamic opaqueBackground;
		 ::Dynamic parent;
		 ::Dynamic root;
		Float rotation;
		Float rotationX;
		Float rotationY;
		Float rotationZ;
		 ::Dynamic scale9Grid;
		Float scaleX;
		Float scaleY;
		Float scaleZ;
		 ::Dynamic scrollRect;
		 ::Dynamic softKeyboardInputAreaOfInterest;
		 ::Dynamic soundTransform;
		 ::Dynamic stage;
		bool tabChildren;
		bool tabEnabled;
		int tabIndex;
		 ::Dynamic textSnapshot;
		 ::Dynamic transform;
		bool useHandCursor;
		bool visible;
		Float width;
		Float x;
		Float y;
		Float z;
		 ::Dynamic addChild( ::Dynamic child);
		::Dynamic addChild_dyn();

		 ::Dynamic addChildAt( ::Dynamic child,int index);
		::Dynamic addChildAt_dyn();

		void addEventListener(::String type, ::Dynamic listener,hx::Null< bool >  useCapture,hx::Null< int >  priority,hx::Null< bool >  useWeakReference);
		::Dynamic addEventListener_dyn();

		bool areInaccessibleObjectsUnderPoint( ::Dynamic point);
		::Dynamic areInaccessibleObjectsUnderPoint_dyn();

		bool contains( ::Dynamic child);
		::Dynamic contains_dyn();

		bool dispatchEvent( ::Dynamic event);
		::Dynamic dispatchEvent_dyn();

		 ::Dynamic getBounds( ::Dynamic targetCoordinateSpace);
		::Dynamic getBounds_dyn();

		 ::Dynamic getChildAt(int index);
		::Dynamic getChildAt_dyn();

		 ::Dynamic getChildByName(::String name);
		::Dynamic getChildByName_dyn();

		int getChildIndex( ::Dynamic child);
		::Dynamic getChildIndex_dyn();

		::cpp::VirtualArray getObjectsUnderPoint( ::Dynamic point);
		::Dynamic getObjectsUnderPoint_dyn();

		 ::Dynamic getRect( ::Dynamic targetCoordinateSpace);
		::Dynamic getRect_dyn();

		 ::Dynamic globalToLocal( ::Dynamic point);
		::Dynamic globalToLocal_dyn();

		 ::Dynamic globalToLocal3D( ::Dynamic point);
		::Dynamic globalToLocal3D_dyn();

		bool hasEventListener(::String type);
		::Dynamic hasEventListener_dyn();

		bool hitTestObject( ::Dynamic obj);
		::Dynamic hitTestObject_dyn();

		bool hitTestPoint(Float x,Float y,hx::Null< bool >  shapeFlag);
		::Dynamic hitTestPoint_dyn();

		 ::Dynamic local3DToGlobal( ::Dynamic point3d);
		::Dynamic local3DToGlobal_dyn();

		 ::Dynamic localToGlobal( ::Dynamic point);
		::Dynamic localToGlobal_dyn();

		 ::Dynamic removeChild( ::Dynamic child);
		::Dynamic removeChild_dyn();

		 ::Dynamic removeChildAt(int index);
		::Dynamic removeChildAt_dyn();

		void removeChildren(hx::Null< int >  beginIndex,hx::Null< int >  endIndex);
		::Dynamic removeChildren_dyn();

		void removeEventListener(::String type, ::Dynamic listener,hx::Null< bool >  useCapture);
		::Dynamic removeEventListener_dyn();

		bool requestSoftKeyboard();
		::Dynamic requestSoftKeyboard_dyn();

		void setChildIndex( ::Dynamic child,int index);
		::Dynamic setChildIndex_dyn();

		void startDrag(hx::Null< bool >  lockCenter, ::Dynamic bounds);
		::Dynamic startDrag_dyn();

		void startTouchDrag(int touchPointID,hx::Null< bool >  lockCenter, ::Dynamic bounds);
		::Dynamic startTouchDrag_dyn();

		void stopAllMovieClips();
		::Dynamic stopAllMovieClips_dyn();

		void stopDrag();
		::Dynamic stopDrag_dyn();

		void stopTouchDrag(int touchPointID);
		::Dynamic stopTouchDrag_dyn();

		void swapChildren( ::Dynamic child1, ::Dynamic child2);
		::Dynamic swapChildren_dyn();

		void swapChildrenAt(int index1,int index2);
		::Dynamic swapChildrenAt_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		bool willTrigger(::String type);
		::Dynamic willTrigger_dyn();

};

} // end namespace lime
} // end namespace graphics

#endif /* INCLUDED_lime_graphics_FlashRenderContext */ 
