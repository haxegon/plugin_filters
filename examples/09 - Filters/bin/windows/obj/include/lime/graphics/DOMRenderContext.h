// Generated by Haxe 3.4.4
#ifndef INCLUDED_lime_graphics_DOMRenderContext
#define INCLUDED_lime_graphics_DOMRenderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_0fd30e8fecc80d4c_117_new)
HX_DECLARE_CLASS2(lime,graphics,DOMRenderContext)

namespace lime{
namespace graphics{


class HXCPP_CLASS_ATTRIBUTES DOMRenderContext_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DOMRenderContext_obj OBJ_;
		DOMRenderContext_obj();

	public:
		enum { _hx_ClassId = 0x72112f7b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.graphics.DOMRenderContext")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.graphics.DOMRenderContext"); }

		hx::ObjectPtr< DOMRenderContext_obj > __new() {
			hx::ObjectPtr< DOMRenderContext_obj > __this = new DOMRenderContext_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< DOMRenderContext_obj > __alloc(hx::Ctx *_hx_ctx) {
			DOMRenderContext_obj *__this = (DOMRenderContext_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DOMRenderContext_obj), true, "lime.graphics.DOMRenderContext"));
			*(void **)__this = DOMRenderContext_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_0fd30e8fecc80d4c_117_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DOMRenderContext_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("DOMRenderContext","\x77","\xa5","\xe8","\xcd"); }

		::String accessKey;
		::String align;
		 ::Dynamic attributes;
		::String baseURI;
		int childElementCount;
		 ::Dynamic childNodes;
		 ::Dynamic children;
		 ::Dynamic classList;
		::String className;
		int clientHeight;
		int clientLeft;
		int clientTop;
		int clientWidth;
		::String contentEditable;
		 ::Dynamic dataset;
		::String dir;
		bool draggable;
		::String dropzone;
		 ::Dynamic firstChild;
		 ::Dynamic firstElementChild;
		bool hidden;
		::String id;
		::String innerHTML;
		::String innerText;
		bool isContentEditable;
		::String lang;
		 ::Dynamic lastChild;
		 ::Dynamic lastElementChild;
		::String localName;
		::String namespaceURI;
		 ::Dynamic nextElementSibling;
		 ::Dynamic nextSibling;
		::String nodeName;
		int nodeType;
		::String nodeValue;
		int offsetHeight;
		int offsetLeft;
		 ::Dynamic offsetParent;
		int offsetTop;
		int offsetWidth;
		 ::Dynamic onabort;
		 ::Dynamic onbeforecopy;
		 ::Dynamic onbeforecut;
		 ::Dynamic onbeforepaste;
		 ::Dynamic onblur;
		 ::Dynamic onchange;
		 ::Dynamic onclick;
		 ::Dynamic oncontextmenu;
		 ::Dynamic oncopy;
		 ::Dynamic oncut;
		 ::Dynamic ondblclick;
		 ::Dynamic ondrag;
		 ::Dynamic ondragend;
		 ::Dynamic ondragenter;
		 ::Dynamic ondragleave;
		 ::Dynamic ondragover;
		 ::Dynamic ondragstart;
		 ::Dynamic ondrop;
		 ::Dynamic onerror;
		 ::Dynamic onfocus;
		 ::Dynamic onfullscreenchange;
		 ::Dynamic onfullscreenerror;
		 ::Dynamic oninput;
		 ::Dynamic oninvalid;
		 ::Dynamic onkeydown;
		 ::Dynamic onkeypress;
		 ::Dynamic onkeyup;
		 ::Dynamic onload;
		 ::Dynamic onmousedown;
		 ::Dynamic onmousemove;
		 ::Dynamic onmouseout;
		 ::Dynamic onmouseover;
		 ::Dynamic onmouseup;
		 ::Dynamic onmousewheel;
		 ::Dynamic onpaste;
		 ::Dynamic onreset;
		 ::Dynamic onscroll;
		 ::Dynamic onsearch;
		 ::Dynamic onselect;
		 ::Dynamic onselectstart;
		 ::Dynamic onsubmit;
		 ::Dynamic ontouchcancel;
		 ::Dynamic ontouchend;
		 ::Dynamic ontouchmove;
		 ::Dynamic ontouchstart;
		::String outerHTML;
		::String outerText;
		 ::Dynamic ownerDocument;
		 ::Dynamic parentElement;
		 ::Dynamic parentNode;
		::String prefix;
		 ::Dynamic previousElementSibling;
		 ::Dynamic previousSibling;
		::String pseudo;
		int scrollHeight;
		int scrollLeft;
		int scrollTop;
		int scrollWidth;
		bool spellcheck;
		 ::Dynamic style;
		int tabIndex;
		::String tagName;
		::String textContent;
		::String title;
		bool translate;
		void addEventListener(::String type, ::Dynamic listener, ::Dynamic useCapture);
		::Dynamic addEventListener_dyn();

		 ::Dynamic appendChild( ::Dynamic newChild);
		::Dynamic appendChild_dyn();

		void blur();
		::Dynamic blur_dyn();

		void click();
		::Dynamic click_dyn();

		 ::Dynamic cloneNode(bool deep);
		::Dynamic cloneNode_dyn();

		int compareDocumentPosition( ::Dynamic other);
		::Dynamic compareDocumentPosition_dyn();

		bool contains( ::Dynamic other);
		::Dynamic contains_dyn();

		bool dispatchEvent( ::Dynamic event);
		::Dynamic dispatchEvent_dyn();

		void focus();
		::Dynamic focus_dyn();

		::String getAttribute(::String name);
		::Dynamic getAttribute_dyn();

		::String getAttributeNS(::String namespaceURI,::String localName);
		::Dynamic getAttributeNS_dyn();

		 ::Dynamic getAttributeNode(::String name);
		::Dynamic getAttributeNode_dyn();

		 ::Dynamic getAttributeNodeNS(::String namespaceURI,::String localName);
		::Dynamic getAttributeNodeNS_dyn();

		 ::Dynamic getBoundingClientRect();
		::Dynamic getBoundingClientRect_dyn();

		 ::Dynamic getClientRects();
		::Dynamic getClientRects_dyn();

		 ::Dynamic getElementsByClassName(::String name);
		::Dynamic getElementsByClassName_dyn();

		 ::Dynamic getElementsByTagName(::String name);
		::Dynamic getElementsByTagName_dyn();

		 ::Dynamic getElementsByTagNameNS(::String namespaceURI,::String localName);
		::Dynamic getElementsByTagNameNS_dyn();

		bool hasAttribute(::String name);
		::Dynamic hasAttribute_dyn();

		bool hasAttributeNS(::String namespaceURI,::String localName);
		::Dynamic hasAttributeNS_dyn();

		bool hasAttributes();
		::Dynamic hasAttributes_dyn();

		bool hasChildNodes();
		::Dynamic hasChildNodes_dyn();

		 ::Dynamic insertAdjacentElement(::String where, ::Dynamic element);
		::Dynamic insertAdjacentElement_dyn();

		void insertAdjacentHTML(::String where,::String html);
		::Dynamic insertAdjacentHTML_dyn();

		void insertAdjacentText(::String where,::String text);
		::Dynamic insertAdjacentText_dyn();

		 ::Dynamic insertBefore( ::Dynamic newChild, ::Dynamic refChild);
		::Dynamic insertBefore_dyn();

		bool isDefaultNamespace(::String namespaceURI);
		::Dynamic isDefaultNamespace_dyn();

		bool isEqualNode( ::Dynamic other);
		::Dynamic isEqualNode_dyn();

		bool isSameNode( ::Dynamic other);
		::Dynamic isSameNode_dyn();

		bool isSupported(::String feature,::String version);
		::Dynamic isSupported_dyn();

		::String lookupNamespaceURI(::String prefix);
		::Dynamic lookupNamespaceURI_dyn();

		::String lookupPrefix(::String namespaceURI);
		::Dynamic lookupPrefix_dyn();

		bool matchesSelector(::String selectors);
		::Dynamic matchesSelector_dyn();

		void normalize();
		::Dynamic normalize_dyn();

		 ::Dynamic querySelector(::String selectors);
		::Dynamic querySelector_dyn();

		 ::Dynamic querySelectorAll(::String selectors);
		::Dynamic querySelectorAll_dyn();

		void remove();
		::Dynamic remove_dyn();

		void removeAttribute(::String name);
		::Dynamic removeAttribute_dyn();

		void removeAttributeNS(::String namespaceURI,::String localName);
		::Dynamic removeAttributeNS_dyn();

		 ::Dynamic removeAttributeNode( ::Dynamic oldAttr);
		::Dynamic removeAttributeNode_dyn();

		 ::Dynamic removeChild( ::Dynamic oldChild);
		::Dynamic removeChild_dyn();

		void removeEventListener(::String type, ::Dynamic listener, ::Dynamic useCapture);
		::Dynamic removeEventListener_dyn();

		 ::Dynamic replaceChild( ::Dynamic newChild, ::Dynamic oldChild);
		::Dynamic replaceChild_dyn();

		void requestFullScreen(int flags);
		::Dynamic requestFullScreen_dyn();

		void requestFullscreen();
		::Dynamic requestFullscreen_dyn();

		void requestPointerLock();
		::Dynamic requestPointerLock_dyn();

		void scrollByLines(int lines);
		::Dynamic scrollByLines_dyn();

		void scrollByPages(int pages);
		::Dynamic scrollByPages_dyn();

		void scrollIntoView( ::Dynamic alignWithTop);
		::Dynamic scrollIntoView_dyn();

		void scrollIntoViewIfNeeded( ::Dynamic centerIfNeeded);
		::Dynamic scrollIntoViewIfNeeded_dyn();

		void setAttribute(::String name,::String value);
		::Dynamic setAttribute_dyn();

		void setAttributeNS(::String namespaceURI,::String qualifiedName,::String value);
		::Dynamic setAttributeNS_dyn();

		 ::Dynamic setAttributeNode( ::Dynamic newAttr);
		::Dynamic setAttributeNode_dyn();

		 ::Dynamic setAttributeNodeNS( ::Dynamic newAttr);
		::Dynamic setAttributeNodeNS_dyn();

};

} // end namespace lime
} // end namespace graphics

#endif /* INCLUDED_lime_graphics_DOMRenderContext */ 
