// Generated by Haxe 3.4.4
#ifndef INCLUDED_lime_graphics_ConsoleRenderContext
#define INCLUDED_lime_graphics_ConsoleRenderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lime,graphics,ConsoleRenderContext)
HX_DECLARE_CLASS3(lime,graphics,console,IndexBuffer)
HX_DECLARE_CLASS3(lime,graphics,console,Shader)
HX_DECLARE_CLASS3(lime,graphics,console,VertexBuffer)

namespace lime{
namespace graphics{


class HXCPP_CLASS_ATTRIBUTES ConsoleRenderContext_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ConsoleRenderContext_obj OBJ_;
		ConsoleRenderContext_obj();

	public:
		enum { _hx_ClassId = 0x50a51922 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.graphics.ConsoleRenderContext")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.graphics.ConsoleRenderContext"); }
		static hx::ObjectPtr< ConsoleRenderContext_obj > __new();
		static hx::ObjectPtr< ConsoleRenderContext_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ConsoleRenderContext_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ConsoleRenderContext","\x82","\x4f","\x3b","\x1b"); }

		 ::lime::graphics::console::IndexBuffer createIndexBuffer( ::Dynamic indices,int count);
		::Dynamic createIndexBuffer_dyn();

		 ::lime::graphics::console::VertexBuffer createVertexBuffer( ::Dynamic decl,int count);
		::Dynamic createVertexBuffer_dyn();

		 ::lime::graphics::console::Shader lookupShader(::String name);
		::Dynamic lookupShader_dyn();

		void clear(int r,int g,int b,int a,hx::Null< Float >  depth,hx::Null< int >  stencil);
		::Dynamic clear_dyn();

		void bindShader( ::lime::graphics::console::Shader shader);
		::Dynamic bindShader_dyn();

		void setViewport( ::Dynamic x, ::Dynamic y, ::Dynamic width, ::Dynamic height,hx::Null< Float >  nearPlane,hx::Null< Float >  farPlane);
		::Dynamic setViewport_dyn();

		void setVertexShaderConstantF( ::Dynamic startRegister, ::Dynamic vec4, ::Dynamic vec4count);
		::Dynamic setVertexShaderConstantF_dyn();

		void setVertexSource( ::lime::graphics::console::VertexBuffer vb);
		::Dynamic setVertexSource_dyn();

		void setIndexSource( ::lime::graphics::console::IndexBuffer ib);
		::Dynamic setIndexSource_dyn();

		void draw( ::Dynamic primitive, ::Dynamic startVertex, ::Dynamic primitiveCount);
		::Dynamic draw_dyn();

		void drawIndexed( ::Dynamic primitive, ::Dynamic vertexCount, ::Dynamic startIndex, ::Dynamic primitiveCount);
		::Dynamic drawIndexed_dyn();

		int get_width();
		::Dynamic get_width_dyn();

		int get_height();
		::Dynamic get_height_dyn();

};

} // end namespace lime
} // end namespace graphics

#endif /* INCLUDED_lime_graphics_ConsoleRenderContext */ 
