// Generated by Haxe 3.4.4
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#define INCLUDED_lime_graphics_CanvasRenderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_02024416ebab12d6_32_new)
HX_DECLARE_CLASS2(lime,graphics,CanvasRenderContext)

namespace lime{
namespace graphics{


class HXCPP_CLASS_ATTRIBUTES CanvasRenderContext_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CanvasRenderContext_obj OBJ_;
		CanvasRenderContext_obj();

	public:
		enum { _hx_ClassId = 0x06c19f81 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.graphics.CanvasRenderContext")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.graphics.CanvasRenderContext"); }

		hx::ObjectPtr< CanvasRenderContext_obj > __new() {
			hx::ObjectPtr< CanvasRenderContext_obj > __this = new CanvasRenderContext_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< CanvasRenderContext_obj > __alloc(hx::Ctx *_hx_ctx) {
			CanvasRenderContext_obj *__this = (CanvasRenderContext_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CanvasRenderContext_obj), true, "lime.graphics.CanvasRenderContext"));
			*(void **)__this = CanvasRenderContext_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_02024416ebab12d6_32_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CanvasRenderContext_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("CanvasRenderContext","\x21","\x55","\xca","\xa3"); }

		Float backingStorePixelRatio;
		 ::Dynamic canvas;
		 ::Dynamic fillStyle;
		::String font;
		Float globalAlpha;
		::String globalCompositeOperation;
		bool imageSmoothingEnabled;
		::String lineCap;
		::cpp::VirtualArray lineDash;
		Float lineDashOffset;
		::String lineJoin;
		Float lineWidth;
		Float miterLimit;
		Float shadowBlur;
		::String shadowColor;
		Float shadowOffsetX;
		Float shadowOffsetY;
		 ::Dynamic strokeStyle;
		::String textAlign;
		::String textBaseline;
		void arc(Float x,Float y,Float radius,Float startAngle,Float endAngle,bool anticlockwise);
		::Dynamic arc_dyn();

		void arcTo(Float x1,Float y1,Float x2,Float y2,Float radius);
		::Dynamic arcTo_dyn();

		void beginPath();
		::Dynamic beginPath_dyn();

		void bezierCurveTo(Float cp1x,Float cp1y,Float cp2x,Float cp2y,Float x,Float y);
		::Dynamic bezierCurveTo_dyn();

		void clearRect(Float x,Float y,Float width,Float height);
		::Dynamic clearRect_dyn();

		void clearShadow();
		::Dynamic clearShadow_dyn();

		void clip();
		::Dynamic clip_dyn();

		void closePath();
		::Dynamic closePath_dyn();

		 ::Dynamic createDynamicImageData(Float sw,Float sh);
		::Dynamic createDynamicImageData_dyn();

		 ::Dynamic createLinearGradient(Float x0,Float y0,Float x1,Float y1);
		::Dynamic createLinearGradient_dyn();

		 ::Dynamic createPattern( ::Dynamic image,::String repetitionType);
		::Dynamic createPattern_dyn();

		 ::Dynamic createRadialGradient(Float x0,Float y0,Float r0,Float x1,Float y1,Float r1);
		::Dynamic createRadialGradient_dyn();

		void drawImage( ::Dynamic element,Float sx,Float sy, ::Dynamic sw, ::Dynamic sh, ::Dynamic dx, ::Dynamic dy, ::Dynamic dw, ::Dynamic dh);
		::Dynamic drawImage_dyn();

		void drawImageFromRect( ::Dynamic image, ::Dynamic sx, ::Dynamic sy, ::Dynamic sw, ::Dynamic sh, ::Dynamic dx, ::Dynamic dy, ::Dynamic dw, ::Dynamic dh,::String compositeOperation);
		::Dynamic drawImageFromRect_dyn();

		void fill();
		::Dynamic fill_dyn();

		void fillRect(Float x,Float y,Float width,Float height);
		::Dynamic fillRect_dyn();

		void fillText(::String text,Float x,Float y, ::Dynamic maxWidth);
		::Dynamic fillText_dyn();

		 ::Dynamic getDynamicImageData(Float sx,Float sy,Float sw,Float sh);
		::Dynamic getDynamicImageData_dyn();

		 ::Dynamic getDynamicImageDataHD(Float sx,Float sy,Float sw,Float sh);
		::Dynamic getDynamicImageDataHD_dyn();

		::Array< Float > getLineDash();
		::Dynamic getLineDash_dyn();

		bool isPointInPath(Float x,Float y);
		::Dynamic isPointInPath_dyn();

		void lineTo(Float x,Float y);
		::Dynamic lineTo_dyn();

		 ::Dynamic measureText(::String text);
		::Dynamic measureText_dyn();

		void moveTo(Float x,Float y);
		::Dynamic moveTo_dyn();

		void putDynamicImageData( ::Dynamic dynamicImageData,Float dx,Float dy,Float dirtyX,Float dirtyY,Float dirtyWidth,Float dirtyHeight);
		::Dynamic putDynamicImageData_dyn();

		void putDynamicImageDataHD( ::Dynamic dynamicImageData,Float dx,Float dy,Float dirtyX,Float dirtyY,Float dirtyWidth,Float dirtyHeight);
		::Dynamic putDynamicImageDataHD_dyn();

		void quadraticCurveTo(Float cpx,Float cpy,Float x,Float y);
		::Dynamic quadraticCurveTo_dyn();

		void rect(Float x,Float y,Float width,Float height);
		::Dynamic rect_dyn();

		void restore();
		::Dynamic restore_dyn();

		void rotate(Float angle);
		::Dynamic rotate_dyn();

		void save();
		::Dynamic save_dyn();

		void scale(Float sx,Float sy);
		::Dynamic scale_dyn();

		void setAlpha(Float alpha);
		::Dynamic setAlpha_dyn();

		void setCompositeOperation(::String compositeOperation);
		::Dynamic setCompositeOperation_dyn();

		void setFillColor(Float c,Float m,Float y,Float k,Float a);
		::Dynamic setFillColor_dyn();

		void setLineCap(::String cap);
		::Dynamic setLineCap_dyn();

		void setLineDash(::Array< Float > dash);
		::Dynamic setLineDash_dyn();

		void setLineJoin(::String join);
		::Dynamic setLineJoin_dyn();

		void setLineWidth(Float width);
		::Dynamic setLineWidth_dyn();

		void setMiterLimit(Float limit);
		::Dynamic setMiterLimit_dyn();

		void setShadow(Float width,Float height,Float blur,Float c,Float m,Float y,Float k,Float a);
		::Dynamic setShadow_dyn();

		void setStrokeColor(Float c,Float m,Float y,Float k,Float a);
		::Dynamic setStrokeColor_dyn();

		void setTransform(Float m11,Float m12,Float m21,Float m22,Float dx,Float dy);
		::Dynamic setTransform_dyn();

		void stroke();
		::Dynamic stroke_dyn();

		void strokeRect(Float x,Float y,Float width,Float height, ::Dynamic lineWidth);
		::Dynamic strokeRect_dyn();

		void strokeText(::String text,Float x,Float y, ::Dynamic maxWidth);
		::Dynamic strokeText_dyn();

		void transform(Float m11,Float m12,Float m21,Float m22,Float dx,Float dy);
		::Dynamic transform_dyn();

		void translate(Float tx,Float ty);
		::Dynamic translate_dyn();

};

} // end namespace lime
} // end namespace graphics

#endif /* INCLUDED_lime_graphics_CanvasRenderContext */ 
