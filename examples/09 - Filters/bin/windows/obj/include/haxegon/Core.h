// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Core
#define INCLUDED_haxegon_Core

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(haxegon,Core)
HX_DECLARE_CLASS2(lime,ui,Window)
HX_DECLARE_CLASS2(starling,core,StatsDisplay)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Sprite)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Core_obj : public  ::starling::display::Sprite_obj
{
	public:
		typedef  ::starling::display::Sprite_obj super;
		typedef Core_obj OBJ_;
		Core_obj();

	public:
		enum { _hx_ClassId = 0x00f9998f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxegon.Core")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxegon.Core"); }
		static hx::ObjectPtr< Core_obj > __new();
		static hx::ObjectPtr< Core_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Core_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Core","\x7f","\xe9","\x9d","\x2c"); }

		static void __boot();
		static ::String WINDOW_WIDTH;
		static ::String WINDOW_HEIGHT;
		static void delaycall( ::Dynamic f,Float time);
		static ::Dynamic delaycall_dyn();

		static int currentupdateindex;
		static int currentupdatecount;
		static int _fps;
		static int get_fps();
		static ::Dynamic get_fps_dyn();

		static int set_fps(int _newfps);
		static ::Dynamic set_fps_dyn();

		static void extend_startframe( ::Dynamic f);
		static ::Dynamic extend_startframe_dyn();

		static void execute_extendedstartframe();
		static ::Dynamic execute_extendedstartframe_dyn();

		static ::cpp::VirtualArray extended_startframe;
		static bool hasextended_startframe;
		static void extend_afterupdatebeforerender( ::Dynamic f);
		static ::Dynamic extend_afterupdatebeforerender_dyn();

		static void execute_extendedafterupdatebeforerender();
		static ::Dynamic execute_extendedafterupdatebeforerender_dyn();

		static ::cpp::VirtualArray extended_afterupdatebeforerender;
		static bool hasextended_afterupdatebeforerender;
		static void extend_endframe( ::Dynamic f);
		static ::Dynamic extend_endframe_dyn();

		static void execute_extendedendframe();
		static ::Dynamic execute_extendedendframe_dyn();

		static ::cpp::VirtualArray extended_endframe;
		static bool hasextended_endframe;
		static int TARGETFRAMERATE;
		static int MAXFRAMESKIP;
		static bool frameskip;
		static int _rate3;
		static int _target3;
		static int starttime;
		static Float get_time();
		static ::Dynamic get_time_dyn();

		static Float set_time(Float t);
		static ::Dynamic set_time_dyn();

		static bool _showstats;
		static  ::starling::core::StatsDisplay statsdisplay;
		static bool get_showstats();
		static ::Dynamic get_showstats_dyn();

		static bool set_showstats(bool _b);
		static ::Dynamic set_showstats_dyn();

		static  ::lime::ui::Window get_window();
		static ::Dynamic get_window_dyn();

		static void quit( ::Dynamic code);
		static ::Dynamic quit_dyn();

		void addedtostage( ::starling::events::Event e);
		::Dynamic addedtostage_dyn();

		void loaded();
		::Dynamic loaded_dyn();

		void continueloading();
		::Dynamic continueloading_dyn();

		void onEnterFrame( ::starling::events::Event e);
		::Dynamic onEnterFrame_dyn();

		void doupdate(int updateindex,int updatecount);
		::Dynamic doupdate_dyn();

		void dorender();
		::Dynamic dorender_dyn();

};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Core */ 
