// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Input
#define INCLUDED_haxegon_Input

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(haxegon,Input)
HX_DECLARE_CLASS1(haxegon,Key)
HX_DECLARE_CLASS1(haxegon,Keystate)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,events,KeyboardEvent)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Input_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Input_obj OBJ_;
		Input_obj();

	public:
		enum { _hx_ClassId = 0x1adf2a76 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Input")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Input"); }

		hx::ObjectPtr< Input_obj > __new() {
			hx::ObjectPtr< Input_obj > __this = new Input_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Input_obj > __alloc(hx::Ctx *_hx_ctx) {
			Input_obj *__this = (Input_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Input_obj), false, "haxegon.Input"));
			*(void **)__this = Input_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Input_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Input","\xea","\x33","\x4b","\x51"); }

		static void __boot();
		static bool pressed( ::haxegon::Key k);
		static ::Dynamic pressed_dyn();

		static bool justpressed( ::haxegon::Key k);
		static ::Dynamic justpressed_dyn();

		static bool justreleased( ::haxegon::Key k);
		static ::Dynamic justreleased_dyn();

		static void forcerelease( ::haxegon::Key k);
		static ::Dynamic forcerelease_dyn();

		static int pressheldtime( ::haxegon::Key k);
		static ::Dynamic pressheldtime_dyn();

		static bool delaypressed( ::haxegon::Key k,int delay);
		static ::Dynamic delaypressed_dyn();

		static void init( ::starling::display::Stage _starlingstage, ::openfl::display::Stage _flashstage);
		static ::Dynamic init_dyn();

		static void unload();
		static ::Dynamic unload_dyn();

		static void update();
		static ::Dynamic update_dyn();

		static void reset();
		static ::Dynamic reset_dyn();

		static bool iskeycodeheld( ::haxegon::Keystate k);
		static ::Dynamic iskeycodeheld_dyn();

		static ::Array< ::String > clipboardbuffer;
		static bool selectall;
		static bool cut;
		static bool paste;
		static bool undo;
		static bool redo;
		static void handlecut( ::starling::events::Event event);
		static ::Dynamic handlecut_dyn();

		static void handlecopy( ::starling::events::Event event);
		static ::Dynamic handlecopy_dyn();

		static void handlepaste( ::starling::events::Event event);
		static ::Dynamic handlepaste_dyn();

		static void handleselectall( ::starling::events::Event event);
		static ::Dynamic handleselectall_dyn();

		static void handlekeydown( ::starling::events::KeyboardEvent event);
		static ::Dynamic handlekeydown_dyn();

		static void handledeactivate( ::openfl::events::Event e);
		static ::Dynamic handledeactivate_dyn();

		static ::String getchar();
		static ::Dynamic getchar_dyn();

		static void handlekeyup( ::starling::events::KeyboardEvent event);
		static ::Dynamic handlekeyup_dyn();

		static void addkey( ::haxegon::Key KeyName,int KeyCode);
		static ::Dynamic addkey_dyn();

		static void resetKeys();
		static ::Dynamic resetKeys_dyn();

		static ::String keyname( ::haxegon::Key k);
		static ::Dynamic keyname_dyn();

		static  ::haxegon::Key getkeyfromcharacter(::String _hx_char);
		static ::Dynamic getkeyfromcharacter_dyn();

		static  ::haxe::ds::EnumValueMap keymap;
		static  ::haxe::ds::IntMap lookup;
		static ::Array< ::Dynamic> current;
		static ::Array< ::Dynamic> last;
		static ::Array< int > keyheld;
		static  ::haxe::ds::StringMap _nativeCorrection;
		static int numletters;
		static int keycode;
		static int charcode;
		static int lastcharcode;
		static ::String keybuffer;
		static  ::starling::display::Stage starstage;
		static  ::openfl::display::Stage flashstage;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Input */ 
