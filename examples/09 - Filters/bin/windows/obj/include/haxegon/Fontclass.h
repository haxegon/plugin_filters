// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Fontclass
#define INCLUDED_haxegon_Fontclass

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxegon,Fontclass)
HX_DECLARE_CLASS1(haxegon,Fontfile)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,text,TextField)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Fontclass_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Fontclass_obj OBJ_;
		Fontclass_obj();

	public:
		enum { _hx_ClassId = 0x7bd0d65d };

		void __construct(::String _name,Float _size);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxegon.Fontclass")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxegon.Fontclass"); }
		static hx::ObjectPtr< Fontclass_obj > __new(::String _name,Float _size);
		static hx::ObjectPtr< Fontclass_obj > __alloc(hx::Ctx *_hx_ctx,::String _name,Float _size);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Fontclass_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Fontclass","\xe9","\x8b","\xd9","\x02"); }

		void loadfont(::String _name,Float _size);
		::Dynamic loadfont_dyn();

		 ::starling::text::TextField inittextfield();
		::Dynamic inittextfield_dyn();

		void reset();
		::Dynamic reset_dyn();

		void nexttextfield();
		::Dynamic nexttextfield_dyn();

		void updatebounds();
		::Dynamic updatebounds_dyn();

		Float get_width();
		::Dynamic get_width_dyn();

		Float get_height();
		::Dynamic get_height_dyn();

		 ::starling::text::TextField tf;
		::Array< ::Dynamic> tflist;
		int currenttextfield;
		 ::haxegon::Fontfile fontfile;
		::String name;
		::String type;
		Float size;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Fontclass */ 
