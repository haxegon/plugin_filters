// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Mouse
#define INCLUDED_haxegon_Mouse

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxegon,Mouse)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,events,TouchEvent)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Mouse_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Mouse_obj OBJ_;
		Mouse_obj();

	public:
		enum { _hx_ClassId = 0x0491adc9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Mouse")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Mouse"); }

		hx::ObjectPtr< Mouse_obj > __new() {
			hx::ObjectPtr< Mouse_obj > __this = new Mouse_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Mouse_obj > __alloc(hx::Ctx *_hx_ctx) {
			Mouse_obj *__this = (Mouse_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mouse_obj), false, "haxegon.Mouse"));
			*(void **)__this = Mouse_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Mouse_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Mouse","\x05","\x86","\x92","\x9f"); }

		static void __boot();
		static int _x;
		static int _y;
		static int previousx;
		static int previousy;
		static int deltax;
		static int deltay;
		static int get_x();
		static ::Dynamic get_x_dyn();

		static int set_x(Float _newx);
		static ::Dynamic set_x_dyn();

		static int get_y();
		static ::Dynamic get_y_dyn();

		static int set_y(Float _newy);
		static ::Dynamic set_y_dyn();

		static  ::starling::display::Stage starstage;
		static  ::openfl::display::Stage flashstage;
		static int _current;
		static int _held;
		static int _last;
		static int _middlecurrent;
		static int _middlelast;
		static int _middleheld;
		static int _rightcurrent;
		static int _rightlast;
		static int _rightheld;
		static int mousewheel;
		static bool offscreen();
		static ::Dynamic offscreen_dyn();

		static bool _mouseoffstage;
		static bool cursormoved();
		static ::Dynamic cursormoved_dyn();

		static bool _cursormoved;
		static bool leftheld();
		static ::Dynamic leftheld_dyn();

		static bool leftclick();
		static ::Dynamic leftclick_dyn();

		static bool leftreleased();
		static ::Dynamic leftreleased_dyn();

		static void leftforcerelease();
		static ::Dynamic leftforcerelease_dyn();

		static int leftheldpresstime();
		static ::Dynamic leftheldpresstime_dyn();

		static bool rightheld();
		static ::Dynamic rightheld_dyn();

		static bool rightclick();
		static ::Dynamic rightclick_dyn();

		static bool rightreleased();
		static ::Dynamic rightreleased_dyn();

		static void rightforcerelease();
		static ::Dynamic rightforcerelease_dyn();

		static int rightheldpresstime();
		static ::Dynamic rightheldpresstime_dyn();

		static bool middleheld();
		static ::Dynamic middleheld_dyn();

		static bool middleclick();
		static ::Dynamic middleclick_dyn();

		static bool middlereleased();
		static ::Dynamic middlereleased_dyn();

		static void middleforcerelease();
		static ::Dynamic middleforcerelease_dyn();

		static int middleheldpresstime();
		static ::Dynamic middleheldpresstime_dyn();

		static bool leftdelaypressed(int delay);
		static ::Dynamic leftdelaypressed_dyn();

		static bool rightdelaypressed(int delay);
		static ::Dynamic rightdelaypressed_dyn();

		static bool middledelaypressed(int delay);
		static ::Dynamic middledelaypressed_dyn();

		static void init( ::starling::display::Stage _starlingstage, ::openfl::display::Stage _flashstage);
		static ::Dynamic init_dyn();

		static void unload( ::starling::display::Stage _starlingstage, ::openfl::display::Stage _flashstage);
		static ::Dynamic unload_dyn();

		static void show();
		static ::Dynamic show_dyn();

		static void hide();
		static ::Dynamic hide_dyn();

		static void ontouch( ::starling::events::TouchEvent e);
		static ::Dynamic ontouch_dyn();

		static void handleRightMouseDown( ::openfl::events::MouseEvent event);
		static ::Dynamic handleRightMouseDown_dyn();

		static void handleRightMouseUp( ::openfl::events::MouseEvent event);
		static ::Dynamic handleRightMouseUp_dyn();

		static void handleMiddleMouseDown( ::openfl::events::MouseEvent event);
		static ::Dynamic handleMiddleMouseDown_dyn();

		static void handleMiddleMouseUp( ::openfl::events::MouseEvent event);
		static ::Dynamic handleMiddleMouseUp_dyn();

		static void handleMouseWheel( ::openfl::events::MouseEvent event);
		static ::Dynamic handleMouseWheel_dyn();

		static void mouseOver( ::openfl::events::MouseEvent event);
		static ::Dynamic mouseOver_dyn();

		static void mouseLeave( ::openfl::events::Event event);
		static ::Dynamic mouseLeave_dyn();

		static void update(int mx,int my,bool firstframe);
		static ::Dynamic update_dyn();

		static void reset();
		static ::Dynamic reset_dyn();

};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Mouse */ 
