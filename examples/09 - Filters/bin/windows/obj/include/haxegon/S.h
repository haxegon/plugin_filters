// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_S
#define INCLUDED_haxegon_S

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxegon,S)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES S_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef S_obj OBJ_;
		S_obj();

	public:
		enum { _hx_ClassId = 0x5238db7b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.S")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.S"); }

		hx::ObjectPtr< S_obj > __new() {
			hx::ObjectPtr< S_obj > __this = new S_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< S_obj > __alloc(hx::Ctx *_hx_ctx) {
			S_obj *__this = (S_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(S_obj), false, "haxegon.S"));
			*(void **)__this = S_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~S_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("S","\x53","\x00","\x00","\x00"); }

		static int asciicode(::String character);
		static ::Dynamic asciicode_dyn();

		static ::String fromascii(int asciicode);
		static ::Dynamic fromascii_dyn();

		static ::String join(::cpp::VirtualArray array,::String seperator);
		static ::Dynamic join_dyn();

		static ::Array< ::String > seperate(::String currentstring,::String delimiter);
		static ::Dynamic seperate_dyn();

		static ::String uppercase(::String currentstring);
		static ::Dynamic uppercase_dyn();

		static ::String lowercase(::String currentstring);
		static ::Dynamic lowercase_dyn();

		static ::Array< ::String > split(::String currentstring,::String delimiter);
		static ::Dynamic split_dyn();

		static ::String removefromstring(::String fullstring,::String substring);
		static ::Dynamic removefromstring_dyn();

		static bool isinstring(::String fullstring,::String stringtocheck);
		static ::Dynamic isinstring_dyn();

		static int positioninstring(::String fullstring,::String substring,hx::Null< int >  start);
		static ::Dynamic positioninstring_dyn();

		static ::String letterat(::String currentstring,hx::Null< int >  position);
		static ::Dynamic letterat_dyn();

		static ::String mid(::String currentstring,hx::Null< int >  start,hx::Null< int >  length);
		static ::Dynamic mid_dyn();

		static ::String left(::String currentstring,hx::Null< int >  length);
		static ::Dynamic left_dyn();

		static ::String right(::String currentstring,hx::Null< int >  length);
		static ::Dynamic right_dyn();

		static ::String removefromleft(::String currentstring,hx::Null< int >  length);
		static ::Dynamic removefromleft_dyn();

		static ::String removefromright(::String currentstring,hx::Null< int >  length);
		static ::Dynamic removefromright_dyn();

		static ::String reversetext(::String currentstring);
		static ::Dynamic reversetext_dyn();

		static ::String replacechar(::String currentstring,::String ch,::String ch2);
		static ::Dynamic replacechar_dyn();

		static ::String getlastbranch(::String currentstring,::String ch);
		static ::Dynamic getlastbranch_dyn();

		static ::String getroot(::String currentstring,::String ch);
		static ::Dynamic getroot_dyn();

		static ::String getbranch(::String currentstring,::String ch);
		static ::Dynamic getbranch_dyn();

		static ::String getbetweenbrackets(::String currentstring);
		static ::Dynamic getbetweenbrackets_dyn();

		static ::String trimspaces(::String currentstring);
		static ::Dynamic trimspaces_dyn();

		static bool isnumber(::String currentstring);
		static ::Dynamic isnumber_dyn();

};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_S */ 
