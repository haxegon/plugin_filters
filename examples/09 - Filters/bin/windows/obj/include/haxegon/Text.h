// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Text
#define INCLUDED_haxegon_Text

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(haxegon,Fontclass)
HX_DECLARE_CLASS1(haxegon,Fontfile)
HX_DECLARE_CLASS1(haxegon,Text)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Text_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Text_obj OBJ_;
		Text_obj();

	public:
		enum { _hx_ClassId = 0x007a17c1 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Text")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Text"); }

		hx::ObjectPtr< Text_obj > __new() {
			hx::ObjectPtr< Text_obj > __this = new Text_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Text_obj > __alloc(hx::Ctx *_hx_ctx) {
			Text_obj *__this = (Text_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Text_obj), false, "haxegon.Text"));
			*(void **)__this = Text_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Text_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Text","\xcd","\xf8","\xd2","\x37"); }

		static void __boot();
		static void setstage( ::starling::display::Stage stage);
		static ::Dynamic setstage_dyn();

		static void init();
		static ::Dynamic init_dyn();

		static void align(int a);
		static ::Dynamic align_dyn();

		static void rotation(Float a,hx::Null< int >  xpivot,hx::Null< int >  ypivot);
		static ::Dynamic rotation_dyn();

		static int get_wordwrap();
		static ::Dynamic get_wordwrap_dyn();

		static int set_wordwrap(int textwidth);
		static ::Dynamic set_wordwrap_dyn();

		static Float currentwidth();
		static ::Dynamic currentwidth_dyn();

		static Float currentheight();
		static ::Dynamic currentheight_dyn();

		static Float width(::String text);
		static ::Dynamic width_dyn();

		static Float height(::String text);
		static ::Dynamic height_dyn();

		static Float t1;
		static Float t2;
		static Float t3;
		static Float alignx(Float x);
		static ::Dynamic alignx_dyn();

		static Float aligny(Float y);
		static ::Dynamic aligny_dyn();

		static Float aligntextx(::String t,Float x);
		static ::Dynamic aligntextx_dyn();

		static Float aligntexty(::String t,Float y);
		static ::Dynamic aligntexty_dyn();

		static void display(Float x,Float y,::String text,hx::Null< int >  color,hx::Null< Float >  alpha);
		static ::Dynamic display_dyn();

		static void defaultfont();
		static ::Dynamic defaultfont_dyn();

		static void setfont(::String fontname,hx::Null< Float >  size);
		static ::Dynamic setfont_dyn();

		static void changesize(Float t);
		static ::Dynamic changesize_dyn();

		static void resettextfields();
		static ::Dynamic resettextfields_dyn();

		static void addfont(::String fontname,hx::Null< Float >  defaultsize);
		static ::Dynamic addfont_dyn();

		static void addtypeface(::String _name,Float _size);
		static ::Dynamic addtypeface_dyn();

		static ::String get_font();
		static ::Dynamic get_font_dyn();

		static ::String set_font(::String fontname);
		static ::Dynamic set_font_dyn();

		static Float get_size();
		static ::Dynamic get_size_dyn();

		static Float set_size(Float fontsize);
		static ::Dynamic set_size_dyn();

		static bool input(Float x,Float y,hx::Null< int >  col,hx::Null< Float >  alpha);
		static ::Dynamic input_dyn();

		static ::String inputresult;
		static ::String get_inputresult();
		static ::Dynamic get_inputresult_dyn();

		static ::Array< ::Dynamic> fontfile;
		static  ::haxe::ds::StringMap fontfileindex;
		static  ::haxe::ds::StringMap fontlastsize;
		static ::Array< ::Dynamic> typeface;
		static  ::haxe::ds::StringMap typefaceindex;
		static  ::openfl::geom::Matrix fontmatrix;
		static int currentindex;
		static ::String currentfont;
		static Float currentsize;
		static  ::starling::display::Stage gfxstage;
		static int LEFT;
		static int RIGHT;
		static int TOP;
		static int BOTTOM;
		static int CENTER;
		static int textalign;
		static Float textrotate;
		static Float textrotatexpivot;
		static Float textrotateypivot;
		static Float tempxpivot;
		static Float tempypivot;
		static int wordwrapwidth;
		static bool inputfocus;
		static int inputmaxlength;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Text */ 
