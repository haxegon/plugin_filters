// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Col
#define INCLUDED_haxegon_Col

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxegon,Col)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Col_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Col_obj OBJ_;
		Col_obj();

	public:
		enum { _hx_ClassId = 0x78552080 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Col")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Col"); }

		hx::ObjectPtr< Col_obj > __new() {
			hx::ObjectPtr< Col_obj > __this = new Col_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Col_obj > __alloc(hx::Ctx *_hx_ctx) {
			Col_obj *__this = (Col_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Col_obj), false, "haxegon.Col"));
			*(void **)__this = Col_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Col_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Col","\x20","\x38","\x33","\x00"); }

		static void __boot();
		static int BLACK;
		static int GREY;
		static int GRAY;
		static int WHITE;
		static int RED;
		static int PINK;
		static int DARKBROWN;
		static int BROWN;
		static int ORANGE;
		static int YELLOW;
		static int DARKGREEN;
		static int GREEN;
		static int LIGHTGREEN;
		static int NIGHTBLUE;
		static int DARKBLUE;
		static int BLUE;
		static int LIGHTBLUE;
		static int MAGENTA;
		static int TRANSPARENT;
		static int getred(int c);
		static ::Dynamic getred_dyn();

		static int getgreen(int c);
		static ::Dynamic getgreen_dyn();

		static int getblue(int c);
		static ::Dynamic getblue_dyn();

		static int shiftred(int c,Float shift);
		static ::Dynamic shiftred_dyn();

		static int shiftgreen(int c,Float shift);
		static ::Dynamic shiftgreen_dyn();

		static int shiftblue(int c,Float shift);
		static ::Dynamic shiftblue_dyn();

		static int shifthue(int c,Float shift);
		static ::Dynamic shifthue_dyn();

		static int multiplysaturation(int c,Float shift);
		static ::Dynamic multiplysaturation_dyn();

		static int multiplylightness(int c,Float shift);
		static ::Dynamic multiplylightness_dyn();

		static int gethue(int c);
		static ::Dynamic gethue_dyn();

		static Float getsaturation(int c);
		static ::Dynamic getsaturation_dyn();

		static Float getlightness(int c);
		static ::Dynamic getlightness_dyn();

		static int rgb(int red,int green,int blue);
		static ::Dynamic rgb_dyn();

		static int hsl(Float hue,Float saturation,Float lightness);
		static ::Dynamic hsl_dyn();

		static ::Array< Float > hslval;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Col */ 
