// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_HaxegonChannel
#define INCLUDED_haxegon_HaxegonChannel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxegon,HaxegonChannel)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,SoundChannel)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES HaxegonChannel_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef HaxegonChannel_obj OBJ_;
		HaxegonChannel_obj();

	public:
		enum { _hx_ClassId = 0x36ccf3bb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxegon.HaxegonChannel")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxegon.HaxegonChannel"); }
		static hx::ObjectPtr< HaxegonChannel_obj > __new();
		static hx::ObjectPtr< HaxegonChannel_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~HaxegonChannel_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("HaxegonChannel","\xe3","\xa7","\x9d","\xda"); }

		void setto(::String _soundname,hx::Null< Float >  _offsettime,hx::Null< Float >  _fadeintime,hx::Null< bool >  _loop,hx::Null< Float >  _volume,hx::Null< Float >  _panning);
		::Dynamic setto_dyn();

		void play(::String _soundname,hx::Null< Float >  _offsettime,hx::Null< Float >  _fadeintime,hx::Null< Float >  _volume,hx::Null< Float >  _panning);
		::Dynamic play_dyn();

		void oncomplete( ::openfl::events::Event e);
		::Dynamic oncomplete_dyn();

		void changevolume(Float newvol);
		::Dynamic changevolume_dyn();

		void changepan(Float newpan);
		::Dynamic changepan_dyn();

		Float _position;
		Float get_position();
		::Dynamic get_position_dyn();

		Float set_position(Float newposition);
		::Dynamic set_position_dyn();

		Float length;
		Float _length;
		Float get_length();
		::Dynamic get_length_dyn();

		void stop(hx::Null< Float >  fadeout);
		::Dynamic stop_dyn();

		void updatefade();
		::Dynamic updatefade_dyn();

		::String soundname;
		Float offsettime;
		Float fadeintime;
		Float panning;
		Float volume;
		bool looping;
		 ::openfl::media::SoundChannel channel;
		Float fadestarttime;
		Float fadeendtime;
		Float fadevolume;
		int fading;
		bool free;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_HaxegonChannel */ 
