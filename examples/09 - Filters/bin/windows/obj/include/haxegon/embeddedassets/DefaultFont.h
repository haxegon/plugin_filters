// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_embeddedassets_DefaultFont
#define INCLUDED_haxegon_embeddedassets_DefaultFont

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxegon,embeddedassets,DefaultFont)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace haxegon{
namespace embeddedassets{


class HXCPP_CLASS_ATTRIBUTES DefaultFont_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DefaultFont_obj OBJ_;
		DefaultFont_obj();

	public:
		enum { _hx_ClassId = 0x2970e303 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.embeddedassets.DefaultFont")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.embeddedassets.DefaultFont"); }

		hx::ObjectPtr< DefaultFont_obj > __new() {
			hx::ObjectPtr< DefaultFont_obj > __this = new DefaultFont_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< DefaultFont_obj > __alloc(hx::Ctx *_hx_ctx) {
			DefaultFont_obj *__this = (DefaultFont_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DefaultFont_obj), false, "haxegon.embeddedassets.DefaultFont"));
			*(void **)__this = DefaultFont_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DefaultFont_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("DefaultFont","\x10","\xef","\xb1","\xf9"); }

		static void __boot();
		static ::Array< int > fontbytearray;
		static ::String XML_DATA;
		static  ::openfl::display::BitmapData _actualbitmapdata;
		static  ::openfl::display::BitmapData get_bitmapdata();
		static ::Dynamic get_bitmapdata_dyn();

		static ::String get_xmlstring();
		static ::Dynamic get_xmlstring_dyn();

};

} // end namespace haxegon
} // end namespace embeddedassets

#endif /* INCLUDED_haxegon_embeddedassets_DefaultFont */ 
