// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_filters_Bloomfilter
#define INCLUDED_haxegon_filters_Bloomfilter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_filters_FragmentFilter
#include <starling/filters/FragmentFilter.h>
#endif
HX_DECLARE_CLASS2(haxegon,filters,Bloomfilter)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,filters,FragmentFilter)
HX_DECLARE_CLASS2(starling,rendering,Effect)
HX_DECLARE_CLASS2(starling,rendering,FilterEffect)

namespace haxegon{
namespace filters{


class HXCPP_CLASS_ATTRIBUTES Bloomfilter_obj : public  ::starling::filters::FragmentFilter_obj
{
	public:
		typedef  ::starling::filters::FragmentFilter_obj super;
		typedef Bloomfilter_obj OBJ_;
		Bloomfilter_obj();

	public:
		enum { _hx_ClassId = 0x0bce1d34 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxegon.filters.Bloomfilter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxegon.filters.Bloomfilter"); }
		static hx::ObjectPtr< Bloomfilter_obj > __new();
		static hx::ObjectPtr< Bloomfilter_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Bloomfilter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Bloomfilter","\x9b","\xeb","\x26","\xd6"); }

		Float _red;
		Float get_red();
		::Dynamic get_red_dyn();

		Float set_red(Float _r);
		::Dynamic set_red_dyn();

		Float _green;
		Float get_green();
		::Dynamic get_green_dyn();

		Float set_green(Float _g);
		::Dynamic set_green_dyn();

		Float _blue;
		Float get_blue();
		::Dynamic get_blue_dyn();

		Float set_blue(Float _b);
		::Dynamic set_blue_dyn();

		Float _blur;
		Float get_blur();
		::Dynamic get_blur_dyn();

		Float set_blur(Float _b);
		::Dynamic set_blur_dyn();

		 ::starling::rendering::FilterEffect createEffect();

		 ::starling::rendering::FilterEffect actualeffect;
};

} // end namespace haxegon
} // end namespace filters

#endif /* INCLUDED_haxegon_filters_Bloomfilter */ 
