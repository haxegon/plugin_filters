// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_filters_BloomEffect
#define INCLUDED_haxegon_filters_BloomEffect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_rendering_FilterEffect
#include <starling/rendering/FilterEffect.h>
#endif
HX_DECLARE_CLASS2(haxegon,filters,BloomEffect)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(starling,rendering,Effect)
HX_DECLARE_CLASS2(starling,rendering,FilterEffect)
HX_DECLARE_CLASS2(starling,rendering,Program)

namespace haxegon{
namespace filters{


class HXCPP_CLASS_ATTRIBUTES BloomEffect_obj : public  ::starling::rendering::FilterEffect_obj
{
	public:
		typedef  ::starling::rendering::FilterEffect_obj super;
		typedef BloomEffect_obj OBJ_;
		BloomEffect_obj();

	public:
		enum { _hx_ClassId = 0x1bd0cc2d };

		void __construct(hx::Null< Float >  __o__blur,hx::Null< Float >  __o__red,hx::Null< Float >  __o__green,hx::Null< Float >  __o__blue,hx::Null< int >  __o_numPasses);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxegon.filters.BloomEffect")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxegon.filters.BloomEffect"); }
		static hx::ObjectPtr< BloomEffect_obj > __new(hx::Null< Float >  __o__blur,hx::Null< Float >  __o__red,hx::Null< Float >  __o__green,hx::Null< Float >  __o__blue,hx::Null< int >  __o_numPasses);
		static hx::ObjectPtr< BloomEffect_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o__blur,hx::Null< Float >  __o__red,hx::Null< Float >  __o__green,hx::Null< Float >  __o__blue,hx::Null< int >  __o_numPasses);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BloomEffect_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BloomEffect","\x94","\x9a","\x29","\xe6"); }

		 ::openfl::_Vector::AbstractVector fc0;
		 ::openfl::_Vector::AbstractVector fc1;
		 ::openfl::_Vector::AbstractVector _color;
		Float red;
		Float green;
		Float blue;
		Float blur;
		 ::starling::rendering::Program createProgram();

		void beforeDraw( ::openfl::display3D::Context3D context);

};

} // end namespace haxegon
} // end namespace filters

#endif /* INCLUDED_haxegon_filters_BloomEffect */ 
