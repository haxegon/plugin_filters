// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Data
#define INCLUDED_haxegon_Data

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxegon,Data)
HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)
HX_DECLARE_CLASS2(openfl,text,Font)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Data_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Data_obj OBJ_;
		Data_obj();

	public:
		enum { _hx_ClassId = 0x0198325a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Data")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Data"); }

		hx::ObjectPtr< Data_obj > __new() {
			hx::ObjectPtr< Data_obj > __this = new Data_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Data_obj > __alloc(hx::Ctx *_hx_ctx) {
			Data_obj *__this = (Data_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Data_obj), false, "haxegon.Data"));
			*(void **)__this = Data_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Data_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Data","\x4a","\x82","\x3c","\x2d"); }

		static void __boot();
		static int width;
		static int height;
		static ::Array< ::String > loadtext(::String textfile);
		static ::Dynamic loadtext_dyn();

		static ::Array< ::String > embeddedassets_original;
		static ::Array< ::String > embeddedassets;
		static void initassets();
		static ::Dynamic initassets_dyn();

		static bool assetexists(::String filename);
		static ::Dynamic assetexists_dyn();

		static bool assetexists_infolder(::String folder,::String filename);
		static ::Dynamic assetexists_infolder_dyn();

		static  ::openfl::media::Sound getsoundasset(::String filename);
		static ::Dynamic getsoundasset_dyn();

		static  ::openfl::display::BitmapData getgraphicsasset(::String filename);
		static ::Dynamic getgraphicsasset_dyn();

		static  ::openfl::text::Font getfontasset(::String filename);
		static ::Dynamic getfontasset_dyn();

		static ::String gettextasset(::String filename);
		static ::Dynamic gettextasset_dyn();

};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Data */ 
