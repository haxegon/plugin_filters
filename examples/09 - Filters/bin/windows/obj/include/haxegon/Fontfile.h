// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Fontfile
#define INCLUDED_haxegon_Fontfile

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxegon,Fontfile)
HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(openfl,text,Font)
HX_DECLARE_CLASS2(starling,text,BitmapFont)
HX_DECLARE_CLASS2(starling,text,ITextCompositor)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Fontfile_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Fontfile_obj OBJ_;
		Fontfile_obj();

	public:
		enum { _hx_ClassId = 0x534a378b };

		void __construct(::String _file);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxegon.Fontfile")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"haxegon.Fontfile"); }
		static hx::ObjectPtr< Fontfile_obj > __new(::String _file);
		static hx::ObjectPtr< Fontfile_obj > __alloc(hx::Ctx *_hx_ctx,::String _file);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Fontfile_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Fontfile","\xeb","\x7b","\x12","\xb5"); }

		::String _hx_typename;
		 ::starling::text::BitmapFont bitmapfont;
		 ::Xml fontxml;
		 ::starling::textures::Texture fonttex;
		::String pngname;
		int sizescale;
		 ::openfl::text::Font font;
		::String filename;
		::String type;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Fontfile */ 
