// Generated by Haxe 3.4.4
#ifndef INCLUDED_haxegon_Gfx
#define INCLUDED_haxegon_Gfx

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(haxegon,Gfx)
HX_DECLARE_CLASS1(haxegon,HaxegonImage)
HX_DECLARE_CLASS1(haxegon,HaxegonTileset)
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Image)
HX_DECLARE_CLASS2(starling,display,Line)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,MeshBatch)
HX_DECLARE_CLASS2(starling,display,Poly4)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,events,ResizeEvent)
HX_DECLARE_CLASS2(starling,textures,RenderTexture)
HX_DECLARE_CLASS2(starling,textures,SubTexture)
HX_DECLARE_CLASS2(starling,textures,Texture)
HX_DECLARE_CLASS2(starling,utils,AssetManager)

namespace haxegon{


class HXCPP_CLASS_ATTRIBUTES Gfx_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Gfx_obj OBJ_;
		Gfx_obj();

	public:
		enum { _hx_ClassId = 0x785821b9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxegon.Gfx")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxegon.Gfx"); }

		hx::ObjectPtr< Gfx_obj > __new() {
			hx::ObjectPtr< Gfx_obj > __this = new Gfx_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Gfx_obj > __alloc(hx::Ctx *_hx_ctx) {
			Gfx_obj *__this = (Gfx_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Gfx_obj), false, "haxegon.Gfx"));
			*(void **)__this = Gfx_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Gfx_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Gfx","\x59","\x39","\x36","\x00"); }

		static void __boot();
		static int MAX_NUM_MESH;
		static int LEFT;
		static int RIGHT;
		static int TOP;
		static int BOTTOM;
		static int CENTER;
		static int screenwidth;
		static int screenheight;
		static int screenwidthmid;
		static int screenheightmid;
		static int devicexres;
		static int deviceyres;
		static ::String currenttilesetname;
		static void reset();
		static ::Dynamic reset_dyn();

		static void reset_ifclear();
		static ::Dynamic reset_ifclear_dyn();

		static void rotation(Float angle,hx::Null< Float >  xpivot,hx::Null< Float >  ypivot);
		static ::Dynamic rotation_dyn();

		static void scale( ::Dynamic xscale, ::Dynamic yscale, ::Dynamic xpivot, ::Dynamic ypivot);
		static ::Dynamic scale_dyn();

		static void resetalpha();
		static ::Dynamic resetalpha_dyn();

		static Float set_imagealpha(Float _alpha);
		static ::Dynamic set_imagealpha_dyn();

		static Float get_imagealpha();
		static ::Dynamic get_imagealpha_dyn();

		static void resetcolor();
		static ::Dynamic resetcolor_dyn();

		static int set_imagecolor(int _color);
		static ::Dynamic set_imagecolor_dyn();

		static int get_imagecolor();
		static ::Dynamic get_imagecolor_dyn();

		static int numberoftiles(::String tileset);
		static ::Dynamic numberoftiles_dyn();

		static void changetileset(::String tilesetname);
		static ::Dynamic changetileset_dyn();

		static void loadtiles(::String imagename,int width,int height);
		static ::Dynamic loadtiles_dyn();

		static void addblanktiles(::String tilesetname,int num);
		static ::Dynamic addblanktiles_dyn();

		static void createtiles(::String tilesetname,Float width,Float height,int amount);
		static ::Dynamic createtiles_dyn();

		static int tilewidth(::String tilesetname);
		static ::Dynamic tilewidth_dyn();

		static int tileheight(::String tilesetname);
		static ::Dynamic tileheight_dyn();

		static  ::starling::textures::Texture getassetpackedtexture(::String imagename);
		static ::Dynamic getassetpackedtexture_dyn();

		static void loadimagefrompackedtexture(::String imagename, ::starling::textures::Texture tex);
		static ::Dynamic loadimagefrompackedtexture_dyn();

		static void loadimage(::String imagename);
		static ::Dynamic loadimage_dyn();

		static void createimage(::String imagename,Float width,Float height);
		static ::Dynamic createimage_dyn();

		static int imagewidth(::String imagename);
		static ::Dynamic imagewidth_dyn();

		static int imageheight(::String imagename);
		static ::Dynamic imageheight_dyn();

		static void promotetorendertarget( ::starling::display::Image image);
		static ::Dynamic promotetorendertarget_dyn();

		static void drawtoscreen();
		static ::Dynamic drawtoscreen_dyn();

		static void drawtoimage(::String imagename);
		static ::Dynamic drawtoimage_dyn();

		static void drawtotile(::String tilesetname,int tilenum);
		static ::Dynamic drawtotile_dyn();

		static Float t1;
		static Float t2;
		static Float t3;
		static Float imagealignx(int imagewidth,Float x);
		static ::Dynamic imagealignx_dyn();

		static Float imagealigny(int imageheight,Float y);
		static ::Dynamic imagealigny_dyn();

		static Float imagealignonimagex(int imagewidth,Float x);
		static ::Dynamic imagealignonimagex_dyn();

		static Float imagealignonimagey(int imageheight,Float y);
		static ::Dynamic imagealignonimagey_dyn();

		static void internaldrawimage(Float x,Float y, ::starling::display::Image image,int imagewidth,int imageheight);
		static ::Dynamic internaldrawimage_dyn();

		static void drawimage(Float x,Float y,::String imagename);
		static ::Dynamic drawimage_dyn();

		static void drawsubimage(Float x,Float y,Float x1,Float y1,Float w1,Float h1,::String imagename);
		static ::Dynamic drawsubimage_dyn();

		static void grabtilefromscreen(::String tilesetname,int tilenumber,Float screenx,Float screeny);
		static ::Dynamic grabtilefromscreen_dyn();

		static void grabtilefromimage(::String tilesetname,int tilenumber,::String imagename,Float imagex,Float imagey);
		static ::Dynamic grabtilefromimage_dyn();

		static void grabimagefromscreen(::String imagename,Float screenx,Float screeny);
		static ::Dynamic grabimagefromscreen_dyn();

		static void grabimagefromimage(::String destinationimage,::String sourceimage,Float sourceimagex,Float sourceimagey);
		static ::Dynamic grabimagefromimage_dyn();

		static void copytile(::String totileset,int totilenumber,::String fromtileset,int fromtilenumber);
		static ::Dynamic copytile_dyn();

		static void drawsubtile(Float x,Float y,::String tilesetname,int tilenum,Float x1,Float y1,Float w,Float h);
		static ::Dynamic drawsubtile_dyn();

		static void drawtile(Float x,Float y,::String tilesetname,int tilenum);
		static ::Dynamic drawtile_dyn();

		static Float tilealignx(Float x);
		static ::Dynamic tilealignx_dyn();

		static Float tilealigny(Float y);
		static ::Dynamic tilealigny_dyn();

		static Float tilealignontilex(Float x);
		static ::Dynamic tilealignontilex_dyn();

		static Float tilealignontiley(Float y);
		static ::Dynamic tilealignontiley_dyn();

		static void drawline(Float x1,Float y1,Float x2,Float y2,int color,hx::Null< Float >  alpha);
		static ::Dynamic drawline_dyn();

		static void drawhexagon(Float x,Float y,Float radius,Float angle,int color,hx::Null< Float >  alpha);
		static ::Dynamic drawhexagon_dyn();

		static void fillhexagon(Float x,Float y,Float radius,Float angle,int color,hx::Null< Float >  alpha);
		static ::Dynamic fillhexagon_dyn();

		static void drawcircle(Float x,Float y,Float radius,int color,hx::Null< Float >  alpha);
		static ::Dynamic drawcircle_dyn();

		static void fillcircle(Float x,Float y,Float radius,int col,hx::Null< Float >  alpha);
		static ::Dynamic fillcircle_dyn();

		static void drawtri(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3,int color,hx::Null< Float >  alpha);
		static ::Dynamic drawtri_dyn();

		static void filltri(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3,int color,hx::Null< Float >  alpha);
		static ::Dynamic filltri_dyn();

		static void drawbox(Float x,Float y,Float width,Float height,int color,hx::Null< Float >  alpha);
		static ::Dynamic drawbox_dyn();

		static void fillbox(Float x,Float y,Float width,Float height,int col,hx::Null< Float >  alpha);
		static ::Dynamic fillbox_dyn();

		static void updatemeshbatch();
		static ::Dynamic updatemeshbatch_dyn();

		static void endmeshbatch();
		static ::Dynamic endmeshbatch_dyn();

		static void endmeshbatchonsurface( ::starling::textures::RenderTexture d);
		static ::Dynamic endmeshbatchonsurface_dyn();

		static Float _linethickness;
		static Float get_linethickness();
		static ::Dynamic get_linethickness_dyn();

		static Float set_linethickness(Float size);
		static ::Dynamic set_linethickness_dyn();

		static int clearcolor;
		static void clearscreen(hx::Null< int >  color);
		static ::Dynamic clearscreen_dyn();

		static void setpixel(Float x,Float y,int color,hx::Null< Float >  alpha);
		static ::Dynamic setpixel_dyn();

		static  ::openfl::display::BitmapData screenshot;
		static bool screenshotdirty;
		static int getpixel(Float x,Float y);
		static ::Dynamic getpixel_dyn();

		static void updategraphicsmode(int windowwidth,int windowheight);
		static ::Dynamic updategraphicsmode_dyn();

		static int getscreenx(Float _x);
		static ::Dynamic getscreenx_dyn();

		static int getscreeny(Float _y);
		static ::Dynamic getscreeny_dyn();

		static void resizescreen(Float width,Float height);
		static ::Dynamic resizescreen_dyn();

		static bool _fullscreen;
		static bool get_fullscreen();
		static ::Dynamic get_fullscreen_dyn();

		static bool set_fullscreen(bool fs);
		static ::Dynamic set_fullscreen_dyn();

		static void init( ::starling::display::Stage _starlingstage, ::openfl::display::Stage _flashstage);
		static ::Dynamic init_dyn();

		static void onresize( ::starling::events::ResizeEvent e);
		static ::Dynamic onresize_dyn();

		static void loadpackedtextures();
		static ::Dynamic loadpackedtextures_dyn();

		static void initgfx(int width,int height);
		static ::Dynamic initgfx_dyn();

		static void settrect(Float x,Float y,Float w,Float h);
		static ::Dynamic settrect_dyn();

		static void startframe();
		static ::Dynamic startframe_dyn();

		static void endframe();
		static ::Dynamic endframe_dyn();

		static int meshbatchcount;
		static  ::starling::display::MeshBatch meshbatch;
		static  ::starling::textures::RenderTexture backbuffer;
		static  ::starling::textures::RenderTexture drawto;
		static  ::starling::display::Image screen;
		static  ::starling::display::Quad tempquad;
		static  ::starling::display::Poly4 temppoly4;
		static  ::starling::display::Line templine;
		static int drawstate;
		static int DRAWSTATE_NONE;
		static int DRAWSTATE_MESH;
		static int DRAWSTATE_POLY4;
		static int DRAWSTATE_IMAGE;
		static int DRAWSTATE_TILES;
		static int DRAWSTATE_TEXT;
		static  ::starling::utils::AssetManager starlingassets;
		static  ::openfl::geom::Rectangle trect;
		static  ::openfl::geom::Matrix shapematrix;
		static  ::starling::display::Stage starstage;
		static  ::openfl::display::Stage flashstage;
		static bool transform;
		static bool coltransform;
		static Float imagerotate;
		static Float imagerotatexpivot;
		static Float imagerotateypivot;
		static Float imagexscale;
		static Float imageyscale;
		static Float imagescalexpivot;
		static Float imagescaleypivot;
		static Float imagealphamult;
		static int imagecolormult;
		static Float tempxalign;
		static Float tempyalign;
		static Float temprotate;
		static Float tx;
		static Float ty;
		static Float tx2;
		static Float ty2;
		static  ::haxegon::HaxegonImage haxegonimage;
		static  ::haxe::ds::StringMap imageindex;
		static ::Array< ::Dynamic> images;
		static ::Array< ::Dynamic> tiles;
		static  ::haxe::ds::StringMap tilesetindex;
		static int currenttileset;
		static bool gfxinit;
		static int perfectfit;
		static int dynamicwidth;
		static int dynamicheight;
		static bool keeppixelratio;
};

} // end namespace haxegon

#endif /* INCLUDED_haxegon_Gfx */ 
