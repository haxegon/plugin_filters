// Generated by Haxe 3.4.4
#ifndef INCLUDED_openfl__Vector_Vector_Impl_
#define INCLUDED_openfl__Vector_Vector_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,_Vector,Vector_Impl_)

namespace openfl{
namespace _Vector{


class HXCPP_CLASS_ATTRIBUTES Vector_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Vector_Impl__obj OBJ_;
		Vector_Impl__obj();

	public:
		enum { _hx_ClassId = 0x0620c351 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="openfl._Vector.Vector_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"openfl._Vector.Vector_Impl_"); }

		hx::ObjectPtr< Vector_Impl__obj > __new() {
			hx::ObjectPtr< Vector_Impl__obj > __this = new Vector_Impl__obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Vector_Impl__obj > __alloc(hx::Ctx *_hx_ctx) {
			Vector_Impl__obj *__this = (Vector_Impl__obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vector_Impl__obj), false, "openfl._Vector.Vector_Impl_"));
			*(void **)__this = Vector_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Vector_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Vector_Impl_","\xc3","\xad","\x36","\x7e"); }

		static  ::openfl::_Vector::AbstractVector concat( ::openfl::_Vector::AbstractVector this1, ::openfl::_Vector::AbstractVector a);
		static ::Dynamic concat_dyn();

		static  ::openfl::_Vector::AbstractVector copy( ::openfl::_Vector::AbstractVector this1);
		static ::Dynamic copy_dyn();

		static  ::Dynamic get( ::openfl::_Vector::AbstractVector this1,int index);
		static ::Dynamic get_dyn();

		static int indexOf( ::openfl::_Vector::AbstractVector this1, ::Dynamic x, ::Dynamic from);
		static ::Dynamic indexOf_dyn();

		static void insertAt( ::openfl::_Vector::AbstractVector this1,int index, ::Dynamic element);
		static ::Dynamic insertAt_dyn();

		static  ::Dynamic iterator( ::openfl::_Vector::AbstractVector this1);
		static ::Dynamic iterator_dyn();

		static ::String join( ::openfl::_Vector::AbstractVector this1,::String sep);
		static ::Dynamic join_dyn();

		static int lastIndexOf( ::openfl::_Vector::AbstractVector this1, ::Dynamic x, ::Dynamic from);
		static ::Dynamic lastIndexOf_dyn();

		static  ::Dynamic pop( ::openfl::_Vector::AbstractVector this1);
		static ::Dynamic pop_dyn();

		static int push( ::openfl::_Vector::AbstractVector this1, ::Dynamic x);
		static ::Dynamic push_dyn();

		static  ::Dynamic removeAt( ::openfl::_Vector::AbstractVector this1,int index);
		static ::Dynamic removeAt_dyn();

		static  ::openfl::_Vector::AbstractVector reverse( ::openfl::_Vector::AbstractVector this1);
		static ::Dynamic reverse_dyn();

		static  ::Dynamic set( ::openfl::_Vector::AbstractVector this1,int index, ::Dynamic value);
		static ::Dynamic set_dyn();

		static  ::Dynamic shift( ::openfl::_Vector::AbstractVector this1);
		static ::Dynamic shift_dyn();

		static  ::openfl::_Vector::AbstractVector slice( ::openfl::_Vector::AbstractVector this1, ::Dynamic pos, ::Dynamic end);
		static ::Dynamic slice_dyn();

		static void sort( ::openfl::_Vector::AbstractVector this1, ::Dynamic f);
		static ::Dynamic sort_dyn();

		static  ::openfl::_Vector::AbstractVector splice( ::openfl::_Vector::AbstractVector this1,int pos,int len);
		static ::Dynamic splice_dyn();

		static ::String toString( ::openfl::_Vector::AbstractVector this1);
		static ::Dynamic toString_dyn();

		static void unshift( ::openfl::_Vector::AbstractVector this1, ::Dynamic x);
		static ::Dynamic unshift_dyn();

		static  ::openfl::_Vector::AbstractVector ofArray(::cpp::VirtualArray a);
		static ::Dynamic ofArray_dyn();

		static  ::openfl::_Vector::AbstractVector convert( ::openfl::_Vector::AbstractVector v);
		static ::Dynamic convert_dyn();

		static  ::openfl::_Vector::AbstractVector toBoolVector( ::openfl::_Vector::AbstractVector t,int length,bool fixed,::cpp::VirtualArray array);
		static ::Dynamic toBoolVector_dyn();

		static  ::openfl::_Vector::AbstractVector toIntVector( ::openfl::_Vector::AbstractVector t,int length,bool fixed,::cpp::VirtualArray array);
		static ::Dynamic toIntVector_dyn();

		static  ::openfl::_Vector::AbstractVector toFloatVector( ::openfl::_Vector::AbstractVector t,int length,bool fixed,::cpp::VirtualArray array);
		static ::Dynamic toFloatVector_dyn();

		static  ::openfl::_Vector::AbstractVector toFunctionVector( ::openfl::_Vector::AbstractVector t,int length,bool fixed,::cpp::VirtualArray array);
		static ::Dynamic toFunctionVector_dyn();

		static  ::openfl::_Vector::AbstractVector toObjectVector( ::openfl::_Vector::AbstractVector t,int length,bool fixed,::cpp::VirtualArray array);
		static ::Dynamic toObjectVector_dyn();

		static bool get_fixed( ::openfl::_Vector::AbstractVector this1);
		static ::Dynamic get_fixed_dyn();

		static bool set_fixed( ::openfl::_Vector::AbstractVector this1,bool value);
		static ::Dynamic set_fixed_dyn();

		static int get_length( ::openfl::_Vector::AbstractVector this1);
		static ::Dynamic get_length_dyn();

		static int set_length( ::openfl::_Vector::AbstractVector this1,int value);
		static ::Dynamic set_length_dyn();

};

} // end namespace openfl
} // end namespace _Vector

#endif /* INCLUDED_openfl__Vector_Vector_Impl_ */ 
