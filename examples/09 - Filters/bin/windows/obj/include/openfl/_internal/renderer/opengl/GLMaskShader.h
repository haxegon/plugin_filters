// Generated by Haxe 3.4.4
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskShader
#define INCLUDED_openfl__internal_renderer_opengl_GLMaskShader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS4(openfl,_internal,renderer,opengl,GLMaskShader)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{


class HXCPP_CLASS_ATTRIBUTES GLMaskShader_obj : public  ::openfl::display::Shader_obj
{
	public:
		typedef  ::openfl::display::Shader_obj super;
		typedef GLMaskShader_obj OBJ_;
		GLMaskShader_obj();

	public:
		enum { _hx_ClassId = 0x5e833990 };

		void __construct( ::openfl::utils::ByteArrayData code);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.renderer.opengl.GLMaskShader")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.renderer.opengl.GLMaskShader"); }
		static hx::ObjectPtr< GLMaskShader_obj > __new( ::openfl::utils::ByteArrayData code);
		static hx::ObjectPtr< GLMaskShader_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::utils::ByteArrayData code);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GLMaskShader_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GLMaskShader","\xb6","\x2f","\xd5","\xa6"); }

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl

#endif /* INCLUDED_openfl__internal_renderer_opengl_GLMaskShader */ 
