// Generated by Haxe 3.4.4
#ifndef INCLUDED_openfl__internal_stage3D_GLCompressedTextureFormats
#define INCLUDED_openfl__internal_stage3D_GLCompressedTextureFormats

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS3(lime,_backend,native,NativeGLRenderContext)
HX_DECLARE_CLASS3(openfl,_internal,stage3D,GLCompressedTextureFormats)

namespace openfl{
namespace _internal{
namespace stage3D{


class HXCPP_CLASS_ATTRIBUTES GLCompressedTextureFormats_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GLCompressedTextureFormats_obj OBJ_;
		GLCompressedTextureFormats_obj();

	public:
		enum { _hx_ClassId = 0x276d7fd2 };

		void __construct( ::lime::_backend::native::NativeGLRenderContext gl);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.stage3D.GLCompressedTextureFormats")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.stage3D.GLCompressedTextureFormats"); }
		static hx::ObjectPtr< GLCompressedTextureFormats_obj > __new( ::lime::_backend::native::NativeGLRenderContext gl);
		static hx::ObjectPtr< GLCompressedTextureFormats_obj > __alloc(hx::Ctx *_hx_ctx, ::lime::_backend::native::NativeGLRenderContext gl);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GLCompressedTextureFormats_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("GLCompressedTextureFormats","\x67","\xe3","\x91","\xa9"); }

		 ::haxe::ds::IntMap _hx___formatMap;
		 ::haxe::ds::IntMap _hx___formatMapAlpha;
		void checkDXT( ::lime::_backend::native::NativeGLRenderContext gl);
		::Dynamic checkDXT_dyn();

		void checkETC1( ::lime::_backend::native::NativeGLRenderContext gl);
		::Dynamic checkETC1_dyn();

		void checkPVRTC( ::lime::_backend::native::NativeGLRenderContext gl);
		::Dynamic checkPVRTC_dyn();

		int toTextureFormat(bool alpha,int gpuFormat);
		::Dynamic toTextureFormat_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D

#endif /* INCLUDED_openfl__internal_stage3D_GLCompressedTextureFormats */ 
