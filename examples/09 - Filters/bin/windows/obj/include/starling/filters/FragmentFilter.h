// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_filters_FragmentFilter
#define INCLUDED_starling_filters_FragmentFilter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,filters,FilterHelper)
HX_DECLARE_CLASS2(starling,filters,FilterQuad)
HX_DECLARE_CLASS2(starling,filters,FragmentFilter)
HX_DECLARE_CLASS2(starling,filters,IFilterHelper)
HX_DECLARE_CLASS2(starling,rendering,Effect)
HX_DECLARE_CLASS2(starling,rendering,FilterEffect)
HX_DECLARE_CLASS2(starling,rendering,IndexData)
HX_DECLARE_CLASS2(starling,rendering,Painter)
HX_DECLARE_CLASS2(starling,rendering,VertexData)
HX_DECLARE_CLASS2(starling,textures,Texture)
HX_DECLARE_CLASS2(starling,utils,Padding)

namespace starling{
namespace filters{


class HXCPP_CLASS_ATTRIBUTES FragmentFilter_obj : public  ::starling::events::EventDispatcher_obj
{
	public:
		typedef  ::starling::events::EventDispatcher_obj super;
		typedef FragmentFilter_obj OBJ_;
		FragmentFilter_obj();

	public:
		enum { _hx_ClassId = 0x685ebdbb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.filters.FragmentFilter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.filters.FragmentFilter"); }
		static hx::ObjectPtr< FragmentFilter_obj > __new();
		static hx::ObjectPtr< FragmentFilter_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FragmentFilter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FragmentFilter","\xc8","\x43","\x46","\x4c"); }

		static void __boot();
		static  ::openfl::geom::Matrix3D sMatrix3D;
		 ::starling::filters::FilterQuad _quad;
		 ::starling::display::DisplayObject _target;
		 ::starling::rendering::FilterEffect _effect;
		 ::starling::rendering::VertexData _vertexData;
		 ::starling::rendering::IndexData _indexData;
		 ::starling::utils::Padding _padding;
		 ::starling::filters::FilterHelper _helper;
		Float _resolution;
		int _antiAliasing;
		::String _textureFormat;
		::String _textureSmoothing;
		bool _alwaysDrawToBackBuffer;
		bool _cacheRequested;
		bool _cached;
		void dispose();
		::Dynamic dispose_dyn();

		void onContextCreated( ::Dynamic event);
		::Dynamic onContextCreated_dyn();

		void render( ::starling::rendering::Painter painter);
		::Dynamic render_dyn();

		void renderPasses( ::starling::rendering::Painter painter,bool forCache);
		::Dynamic renderPasses_dyn();

		 ::starling::textures::Texture process( ::starling::rendering::Painter painter,::Dynamic helper, ::starling::textures::Texture input0, ::starling::textures::Texture input1, ::starling::textures::Texture input2, ::starling::textures::Texture input3);
		::Dynamic process_dyn();

		virtual  ::starling::rendering::FilterEffect createEffect();
		::Dynamic createEffect_dyn();

		void cache();
		::Dynamic cache_dyn();

		void clearCache();
		::Dynamic clearCache_dyn();

		void addEventListener(::String type, ::Dynamic listener);

		void removeEventListener(::String type, ::Dynamic listener);

		void onEnterFrame( ::starling::events::Event event);
		::Dynamic onEnterFrame_dyn();

		 ::starling::rendering::FilterEffect get_effect();
		::Dynamic get_effect_dyn();

		 ::starling::rendering::VertexData get_vertexData();
		::Dynamic get_vertexData_dyn();

		 ::starling::rendering::IndexData get_indexData();
		::Dynamic get_indexData_dyn();

		void setRequiresRedraw();
		::Dynamic setRequiresRedraw_dyn();

		int get_numPasses();
		::Dynamic get_numPasses_dyn();

		void onTargetAssigned( ::starling::display::DisplayObject target);
		::Dynamic onTargetAssigned_dyn();

		 ::starling::utils::Padding get_padding();
		::Dynamic get_padding_dyn();

		 ::starling::utils::Padding set_padding( ::starling::utils::Padding value);
		::Dynamic set_padding_dyn();

		bool get_isCached();
		::Dynamic get_isCached_dyn();

		Float get_resolution();
		::Dynamic get_resolution_dyn();

		Float set_resolution(Float value);
		::Dynamic set_resolution_dyn();

		int get_antiAliasing();
		::Dynamic get_antiAliasing_dyn();

		int set_antiAliasing(int value);
		::Dynamic set_antiAliasing_dyn();

		::String get_textureSmoothing();
		::Dynamic get_textureSmoothing_dyn();

		::String set_textureSmoothing(::String value);
		::Dynamic set_textureSmoothing_dyn();

		::String get_textureFormat();
		::Dynamic get_textureFormat_dyn();

		::String set_textureFormat(::String value);
		::Dynamic set_textureFormat_dyn();

		bool get_alwaysDrawToBackBuffer();
		::Dynamic get_alwaysDrawToBackBuffer_dyn();

		bool set_alwaysDrawToBackBuffer(bool value);
		::Dynamic set_alwaysDrawToBackBuffer_dyn();

		void setTarget( ::starling::display::DisplayObject target);
		::Dynamic setTarget_dyn();

};

} // end namespace starling
} // end namespace filters

#endif /* INCLUDED_starling_filters_FragmentFilter */ 
