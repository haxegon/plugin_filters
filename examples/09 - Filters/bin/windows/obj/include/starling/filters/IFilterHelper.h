// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_filters_IFilterHelper
#define INCLUDED_starling_filters_IFilterHelper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,filters,IFilterHelper)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace filters{


class HXCPP_CLASS_ATTRIBUTES IFilterHelper_obj {
	public:
		typedef hx::Object super;
		HX_DO_INTERFACE_RTTI;

		 ::openfl::geom::Rectangle (hx::Object :: *_hx_get_targetBounds)(); 
		static inline  ::openfl::geom::Rectangle get_targetBounds( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::starling::filters::IFilterHelper_obj *>(_hx_.mPtr->_hx_getInterface(0xd041069c)))->_hx_get_targetBounds)();
		}
		 ::starling::display::DisplayObject (hx::Object :: *_hx_get_target)(); 
		static inline  ::starling::display::DisplayObject get_target( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( static_cast< ::starling::filters::IFilterHelper_obj *>(_hx_.mPtr->_hx_getInterface(0xd041069c)))->_hx_get_target)();
		}
		 ::starling::textures::Texture (hx::Object :: *_hx_getTexture)(hx::Null< Float >  resolution); 
		static inline  ::starling::textures::Texture getTexture( ::Dynamic _hx_,hx::Null< Float >  resolution) {
			return (_hx_.mPtr->*( static_cast< ::starling::filters::IFilterHelper_obj *>(_hx_.mPtr->_hx_getInterface(0xd041069c)))->_hx_getTexture)(resolution);
		}
		void (hx::Object :: *_hx_putTexture)( ::starling::textures::Texture texture); 
		static inline void putTexture( ::Dynamic _hx_, ::starling::textures::Texture texture) {
			(_hx_.mPtr->*( static_cast< ::starling::filters::IFilterHelper_obj *>(_hx_.mPtr->_hx_getInterface(0xd041069c)))->_hx_putTexture)(texture);
		}
};

} // end namespace starling
} // end namespace filters

#endif /* INCLUDED_starling_filters_IFilterHelper */ 
