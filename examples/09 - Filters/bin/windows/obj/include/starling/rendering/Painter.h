// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_rendering_Painter
#define INCLUDED_starling_rendering_Painter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,display,Stage3D)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS3(openfl,display3D,textures,TextureBase)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS3(openfl,utils,_Dictionary,UtilsObjectMap)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,MeshBatch)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,rendering,BatchProcessor)
HX_DECLARE_CLASS2(starling,rendering,BatchToken)
HX_DECLARE_CLASS2(starling,rendering,Painter)
HX_DECLARE_CLASS2(starling,rendering,Program)
HX_DECLARE_CLASS2(starling,rendering,RenderState)
HX_DECLARE_CLASS2(starling,utils,MeshSubset)

namespace starling{
namespace rendering{


class HXCPP_CLASS_ATTRIBUTES Painter_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Painter_obj OBJ_;
		Painter_obj();

	public:
		enum { _hx_ClassId = 0x7ee41f67 };

		void __construct( ::openfl::display::Stage3D stage3D);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.rendering.Painter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.rendering.Painter"); }
		static hx::ObjectPtr< Painter_obj > __new( ::openfl::display::Stage3D stage3D);
		static hx::ObjectPtr< Painter_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display::Stage3D stage3D);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Painter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Painter","\x6b","\xdb","\x73","\x85"); }

		static void __boot();
		static ::String PROGRAM_DATA_NAME;
		static int DEFAULT_STENCIL_VALUE;
		static  ::haxe::ds::ObjectMap sSharedData;
		static  ::openfl::geom::Matrix sMatrix;
		static  ::openfl::geom::Vector3D sPoint3D;
		static  ::openfl::geom::Matrix3D sMatrix3D;
		static  ::openfl::geom::Rectangle sClipRect;
		static  ::openfl::geom::Rectangle sBufferRect;
		static  ::openfl::geom::Rectangle sScissorRect;
		static  ::starling::utils::MeshSubset sMeshSubset;
		 ::openfl::display::Stage3D _stage3D;
		 ::openfl::display3D::Context3D _context;
		bool _shareContext;
		int _drawCount;
		int _frameID;
		Float _pixelSize;
		bool _enableErrorChecking;
		 ::openfl::utils::_Dictionary::UtilsObjectMap _stencilReferenceValues;
		 ::openfl::_Vector::AbstractVector _clipRectStack;
		 ::openfl::_Vector::AbstractVector _batchCacheExclusions;
		 ::starling::rendering::BatchProcessor _batchProcessor;
		 ::starling::rendering::BatchProcessor _batchProcessorCurr;
		 ::starling::rendering::BatchProcessor _batchProcessorPrev;
		 ::starling::rendering::BatchProcessor _batchProcessorSpec;
		 ::openfl::display3D::textures::TextureBase _actualRenderTarget;
		int _actualRenderTargetOptions;
		::String _actualCulling;
		::String _actualBlendMode;
		bool _actualDepthMask;
		::String _actualDepthTest;
		int _backBufferWidth;
		int _backBufferHeight;
		Float _backBufferScaleFactor;
		 ::starling::rendering::RenderState _state;
		 ::openfl::_Vector::AbstractVector _stateStack;
		int _stateStackPos;
		int _stateStackLength;
		void dispose();
		::Dynamic dispose_dyn();

		void requestContext3D(::String renderMode, ::Dynamic profile);
		::Dynamic requestContext3D_dyn();

		void onContextCreated( ::Dynamic event);
		::Dynamic onContextCreated_dyn();

		void configureBackBuffer( ::openfl::geom::Rectangle viewPort,Float contentScaleFactor,int antiAlias,bool enableDepthAndStencil);
		::Dynamic configureBackBuffer_dyn();

		void registerProgram(::String name, ::starling::rendering::Program program);
		::Dynamic registerProgram_dyn();

		void deleteProgram(::String name);
		::Dynamic deleteProgram_dyn();

		 ::starling::rendering::Program getProgram(::String name);
		::Dynamic getProgram_dyn();

		bool hasProgram(::String name);
		::Dynamic hasProgram_dyn();

		void pushState( ::starling::rendering::BatchToken token);
		::Dynamic pushState_dyn();

		void setStateTo( ::openfl::geom::Matrix transformationMatrix,hx::Null< Float >  alphaFactor,::String blendMode);
		::Dynamic setStateTo_dyn();

		void popState( ::starling::rendering::BatchToken token);
		::Dynamic popState_dyn();

		void restoreState();
		::Dynamic restoreState_dyn();

		void fillToken( ::starling::rendering::BatchToken token);
		::Dynamic fillToken_dyn();

		void drawMask( ::starling::display::DisplayObject mask, ::starling::display::DisplayObject maskee);
		::Dynamic drawMask_dyn();

		void eraseMask( ::starling::display::DisplayObject mask, ::starling::display::DisplayObject maskee);
		::Dynamic eraseMask_dyn();

		void renderMask( ::starling::display::DisplayObject mask);
		::Dynamic renderMask_dyn();

		void pushClipRect( ::openfl::geom::Rectangle clipRect);
		::Dynamic pushClipRect_dyn();

		void popClipRect();
		::Dynamic popClipRect_dyn();

		bool isRectangularMask( ::starling::display::DisplayObject mask, ::starling::display::DisplayObject maskee, ::openfl::geom::Matrix out);
		::Dynamic isRectangularMask_dyn();

		void batchMesh( ::starling::display::Mesh mesh, ::starling::utils::MeshSubset subset);
		::Dynamic batchMesh_dyn();

		void finishMeshBatch();
		::Dynamic finishMeshBatch_dyn();

		void finishFrame();
		::Dynamic finishFrame_dyn();

		void processCacheExclusions();
		::Dynamic processCacheExclusions_dyn();

		void setupContextDefaults();
		::Dynamic setupContextDefaults_dyn();

		void nextFrame();
		::Dynamic nextFrame_dyn();

		 ::starling::rendering::BatchProcessor swapBatchProcessors();
		::Dynamic swapBatchProcessors_dyn();

		void drawFromCache( ::starling::rendering::BatchToken startToken, ::starling::rendering::BatchToken endToken);
		::Dynamic drawFromCache_dyn();

		void excludeFromCache( ::starling::display::DisplayObject object);
		::Dynamic excludeFromCache_dyn();

		void drawBatch( ::starling::display::MeshBatch meshBatch);
		::Dynamic drawBatch_dyn();

		void prepareToDraw();
		::Dynamic prepareToDraw_dyn();

		void clear(hx::Null< int >  rgb,hx::Null< Float >  alpha);
		::Dynamic clear_dyn();

		void present();
		::Dynamic present_dyn();

		void applyBlendMode();
		::Dynamic applyBlendMode_dyn();

		void applyCulling();
		::Dynamic applyCulling_dyn();

		void applyDepthTest();
		::Dynamic applyDepthTest_dyn();

		void applyRenderTarget();
		::Dynamic applyRenderTarget_dyn();

		void applyClipRect();
		::Dynamic applyClipRect_dyn();

		int get_drawCount();
		::Dynamic get_drawCount_dyn();

		int set_drawCount(int value);
		::Dynamic set_drawCount_dyn();

		int get_stencilReferenceValue();
		::Dynamic get_stencilReferenceValue_dyn();

		int set_stencilReferenceValue(int value);
		::Dynamic set_stencilReferenceValue_dyn();

		bool get_cacheEnabled();
		::Dynamic get_cacheEnabled_dyn();

		bool set_cacheEnabled(bool value);
		::Dynamic set_cacheEnabled_dyn();

		 ::starling::rendering::RenderState get_state();
		::Dynamic get_state_dyn();

		 ::openfl::display::Stage3D get_stage3D();
		::Dynamic get_stage3D_dyn();

		 ::openfl::display3D::Context3D get_context();
		::Dynamic get_context_dyn();

		int set_frameID(int value);
		::Dynamic set_frameID_dyn();

		int get_frameID();
		::Dynamic get_frameID_dyn();

		Float get_pixelSize();
		::Dynamic get_pixelSize_dyn();

		Float set_pixelSize(Float value);
		::Dynamic set_pixelSize_dyn();

		bool get_shareContext();
		::Dynamic get_shareContext_dyn();

		bool set_shareContext(bool value);
		::Dynamic set_shareContext_dyn();

		bool get_enableErrorChecking();
		::Dynamic get_enableErrorChecking_dyn();

		bool set_enableErrorChecking(bool value);
		::Dynamic set_enableErrorChecking_dyn();

		int get_backBufferWidth();
		::Dynamic get_backBufferWidth_dyn();

		int get_backBufferHeight();
		::Dynamic get_backBufferHeight_dyn();

		Float get_backBufferScaleFactor();
		::Dynamic get_backBufferScaleFactor_dyn();

		bool get_contextValid();
		::Dynamic get_contextValid_dyn();

		::String get_profile();
		::Dynamic get_profile_dyn();

		 ::haxe::ds::StringMap get_sharedData();
		::Dynamic get_sharedData_dyn();

		 ::haxe::ds::StringMap get_programs();
		::Dynamic get_programs_dyn();

};

} // end namespace starling
} // end namespace rendering

#endif /* INCLUDED_starling_rendering_Painter */ 
