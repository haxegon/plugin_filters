// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_rendering_BatchToken
#define INCLUDED_starling_rendering_BatchToken

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(starling,rendering,BatchToken)

namespace starling{
namespace rendering{


class HXCPP_CLASS_ATTRIBUTES BatchToken_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BatchToken_obj OBJ_;
		BatchToken_obj();

	public:
		enum { _hx_ClassId = 0x39382e83 };

		void __construct(hx::Null< int >  __o_batchID,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_indexID);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.rendering.BatchToken")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.rendering.BatchToken"); }
		static hx::ObjectPtr< BatchToken_obj > __new(hx::Null< int >  __o_batchID,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_indexID);
		static hx::ObjectPtr< BatchToken_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_batchID,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_indexID);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BatchToken_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BatchToken","\xff","\xcc","\xca","\xbc"); }

		int batchID;
		int vertexID;
		int indexID;
		void copyFrom( ::starling::rendering::BatchToken token);
		::Dynamic copyFrom_dyn();

		void setTo(hx::Null< int >  batchID,hx::Null< int >  vertexID,hx::Null< int >  indexID);
		::Dynamic setTo_dyn();

		void reset();
		::Dynamic reset_dyn();

		bool equals( ::starling::rendering::BatchToken other);
		::Dynamic equals_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace starling
} // end namespace rendering

#endif /* INCLUDED_starling_rendering_BatchToken */ 
