// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_rendering_FilterEffect
#define INCLUDED_starling_rendering_FilterEffect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_rendering_Effect
#include <starling/rendering/Effect.h>
#endif
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(starling,rendering,Effect)
HX_DECLARE_CLASS2(starling,rendering,FilterEffect)
HX_DECLARE_CLASS2(starling,rendering,Program)
HX_DECLARE_CLASS2(starling,rendering,VertexDataFormat)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace rendering{


class HXCPP_CLASS_ATTRIBUTES FilterEffect_obj : public  ::starling::rendering::Effect_obj
{
	public:
		typedef  ::starling::rendering::Effect_obj super;
		typedef FilterEffect_obj OBJ_;
		FilterEffect_obj();

	public:
		enum { _hx_ClassId = 0x15407461 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.rendering.FilterEffect")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.rendering.FilterEffect"); }
		static hx::ObjectPtr< FilterEffect_obj > __new();
		static hx::ObjectPtr< FilterEffect_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FilterEffect_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FilterEffect","\x89","\xd4","\x0d","\x35"); }

		static void __boot();
		static  ::starling::rendering::VertexDataFormat VERTEX_FORMAT;
		static ::String STD_VERTEX_SHADER;
		static ::String tex(::String resultReg,::String uvReg,int sampler, ::starling::textures::Texture texture,hx::Null< bool >  convertToPmaIfRequired);
		static ::Dynamic tex_dyn();

		 ::starling::textures::Texture _texture;
		::String _textureSmoothing;
		bool _textureRepeat;
		virtual int get_programVariantName();

		virtual  ::starling::rendering::Program createProgram();

		virtual void beforeDraw( ::openfl::display3D::Context3D context);

		virtual void afterDraw( ::openfl::display3D::Context3D context);

		virtual  ::starling::rendering::VertexDataFormat get_vertexFormat();

		 ::starling::textures::Texture get_texture();
		::Dynamic get_texture_dyn();

		 ::starling::textures::Texture set_texture( ::starling::textures::Texture value);
		::Dynamic set_texture_dyn();

		::String get_textureSmoothing();
		::Dynamic get_textureSmoothing_dyn();

		::String set_textureSmoothing(::String value);
		::Dynamic set_textureSmoothing_dyn();

		bool get_textureRepeat();
		::Dynamic get_textureRepeat_dyn();

		bool set_textureRepeat(bool value);
		::Dynamic set_textureRepeat_dyn();

};

} // end namespace starling
} // end namespace rendering

#endif /* INCLUDED_starling_rendering_FilterEffect */ 
