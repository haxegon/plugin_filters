// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_rendering_BatchProcessor
#define INCLUDED_starling_rendering_BatchProcessor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,MeshBatch)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,rendering,BatchPool)
HX_DECLARE_CLASS2(starling,rendering,BatchProcessor)
HX_DECLARE_CLASS2(starling,rendering,BatchToken)
HX_DECLARE_CLASS2(starling,rendering,RenderState)
HX_DECLARE_CLASS2(starling,utils,MeshSubset)

namespace starling{
namespace rendering{


class HXCPP_CLASS_ATTRIBUTES BatchProcessor_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BatchProcessor_obj OBJ_;
		BatchProcessor_obj();

	public:
		enum { _hx_ClassId = 0x6895f5dc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.rendering.BatchProcessor")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.rendering.BatchProcessor"); }
		static hx::ObjectPtr< BatchProcessor_obj > __new();
		static hx::ObjectPtr< BatchProcessor_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BatchProcessor_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("BatchProcessor","\x58","\x82","\x7f","\xd2"); }

		static void __boot();
		static  ::starling::utils::MeshSubset sMeshSubset;
		 ::openfl::_Vector::AbstractVector _batches;
		 ::starling::rendering::BatchPool _batchPool;
		 ::starling::display::MeshBatch _currentBatch;
		hx::Class _currentStyleType;
		 ::Dynamic _onBatchComplete;
		Dynamic _onBatchComplete_dyn() { return _onBatchComplete;}
		 ::starling::rendering::BatchToken _cacheToken;
		void dispose();
		::Dynamic dispose_dyn();

		void addMesh( ::starling::display::Mesh mesh, ::starling::rendering::RenderState state, ::starling::utils::MeshSubset subset,hx::Null< bool >  ignoreTransformations);
		::Dynamic addMesh_dyn();

		void finishBatch();
		::Dynamic finishBatch_dyn();

		void clear();
		::Dynamic clear_dyn();

		 ::starling::display::MeshBatch getBatchAt(int batchID);
		::Dynamic getBatchAt_dyn();

		void trim();
		::Dynamic trim_dyn();

		 ::starling::rendering::BatchToken fillToken( ::starling::rendering::BatchToken token);
		::Dynamic fillToken_dyn();

		int get_numBatches();
		::Dynamic get_numBatches_dyn();

		 ::Dynamic get_onBatchComplete();
		::Dynamic get_onBatchComplete_dyn();

		 ::Dynamic set_onBatchComplete( ::Dynamic value);
		::Dynamic set_onBatchComplete_dyn();

};

} // end namespace starling
} // end namespace rendering

#endif /* INCLUDED_starling_rendering_BatchProcessor */ 
