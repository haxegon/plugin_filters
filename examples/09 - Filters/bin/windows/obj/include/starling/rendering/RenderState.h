// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_rendering_RenderState
#define INCLUDED_starling_rendering_RenderState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS3(openfl,display3D,textures,TextureBase)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,rendering,RenderState)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace rendering{


class HXCPP_CLASS_ATTRIBUTES RenderState_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef RenderState_obj OBJ_;
		RenderState_obj();

	public:
		enum { _hx_ClassId = 0x60433d1b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.rendering.RenderState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.rendering.RenderState"); }
		static hx::ObjectPtr< RenderState_obj > __new();
		static hx::ObjectPtr< RenderState_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RenderState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("RenderState","\xbb","\x3a","\xef","\x33"); }

		static void __boot();
		static  ::openfl::_Vector::AbstractVector CULLING_VALUES;
		static  ::openfl::_Vector::AbstractVector COMPARE_VALUES;
		static  ::openfl::geom::Matrix3D sMatrix3D;
		static int sProjectionMatrix3DRev;
		Float _alpha;
		::String _blendMode;
		 ::openfl::geom::Matrix _modelviewMatrix;
		int _miscOptions;
		 ::openfl::geom::Rectangle _clipRect;
		 ::starling::textures::Texture _renderTarget;
		 ::Dynamic _onDrawRequired;
		Dynamic _onDrawRequired_dyn() { return _onDrawRequired;}
		 ::openfl::geom::Matrix3D _modelviewMatrix3D;
		 ::openfl::geom::Matrix3D _projectionMatrix3D;
		int _projectionMatrix3DRev;
		 ::openfl::geom::Matrix3D _mvpMatrix3D;
		void copyFrom( ::starling::rendering::RenderState renderState);
		::Dynamic copyFrom_dyn();

		void reset();
		::Dynamic reset_dyn();

		void transformModelviewMatrix( ::openfl::geom::Matrix matrix);
		::Dynamic transformModelviewMatrix_dyn();

		void transformModelviewMatrix3D( ::openfl::geom::Matrix3D matrix);
		::Dynamic transformModelviewMatrix3D_dyn();

		void setProjectionMatrix(Float x,Float y,Float width,Float height,hx::Null< Float >  stageWidth,hx::Null< Float >  stageHeight, ::openfl::geom::Vector3D cameraPos);
		::Dynamic setProjectionMatrix_dyn();

		void setProjectionMatrixChanged();
		::Dynamic setProjectionMatrixChanged_dyn();

		void setModelviewMatricesToIdentity();
		::Dynamic setModelviewMatricesToIdentity_dyn();

		 ::openfl::geom::Matrix get_modelviewMatrix();
		::Dynamic get_modelviewMatrix_dyn();

		 ::openfl::geom::Matrix set_modelviewMatrix( ::openfl::geom::Matrix value);
		::Dynamic set_modelviewMatrix_dyn();

		 ::openfl::geom::Matrix3D get_modelviewMatrix3D();
		::Dynamic get_modelviewMatrix3D_dyn();

		 ::openfl::geom::Matrix3D set_modelviewMatrix3D( ::openfl::geom::Matrix3D value);
		::Dynamic set_modelviewMatrix3D_dyn();

		 ::openfl::geom::Matrix3D get_projectionMatrix3D();
		::Dynamic get_projectionMatrix3D_dyn();

		 ::openfl::geom::Matrix3D set_projectionMatrix3D( ::openfl::geom::Matrix3D value);
		::Dynamic set_projectionMatrix3D_dyn();

		 ::openfl::geom::Matrix3D get_mvpMatrix3D();
		::Dynamic get_mvpMatrix3D_dyn();

		void setRenderTarget( ::starling::textures::Texture target,hx::Null< bool >  enableDepthAndStencil,hx::Null< int >  antiAlias);
		::Dynamic setRenderTarget_dyn();

		Float get_alpha();
		::Dynamic get_alpha_dyn();

		Float set_alpha(Float value);
		::Dynamic set_alpha_dyn();

		::String get_blendMode();
		::Dynamic get_blendMode_dyn();

		::String set_blendMode(::String value);
		::Dynamic set_blendMode_dyn();

		 ::starling::textures::Texture get_renderTarget();
		::Dynamic get_renderTarget_dyn();

		 ::starling::textures::Texture set_renderTarget( ::starling::textures::Texture value);
		::Dynamic set_renderTarget_dyn();

		 ::openfl::display3D::textures::TextureBase get_renderTargetBase();
		::Dynamic get_renderTargetBase_dyn();

		int renderTargetOptions;
		int get_renderTargetOptions();
		::Dynamic get_renderTargetOptions_dyn();

		::String get_culling();
		::Dynamic get_culling_dyn();

		::String set_culling(::String value);
		::Dynamic set_culling_dyn();

		bool get_depthMask();
		::Dynamic get_depthMask_dyn();

		bool set_depthMask(bool value);
		::Dynamic set_depthMask_dyn();

		::String get_depthTest();
		::Dynamic get_depthTest_dyn();

		::String set_depthTest(::String value);
		::Dynamic set_depthTest_dyn();

		 ::openfl::geom::Rectangle get_clipRect();
		::Dynamic get_clipRect_dyn();

		 ::openfl::geom::Rectangle set_clipRect( ::openfl::geom::Rectangle value);
		::Dynamic set_clipRect_dyn();

		int get_renderTargetAntiAlias();
		::Dynamic get_renderTargetAntiAlias_dyn();

		bool get_renderTargetSupportsDepthAndStencil();
		::Dynamic get_renderTargetSupportsDepthAndStencil_dyn();

		bool get_is3D();
		::Dynamic get_is3D_dyn();

		 ::Dynamic get_onDrawRequired();
		::Dynamic get_onDrawRequired_dyn();

		 ::Dynamic set_onDrawRequired( ::Dynamic value);
		::Dynamic set_onDrawRequired_dyn();

};

} // end namespace starling
} // end namespace rendering

#endif /* INCLUDED_starling_rendering_RenderState */ 
