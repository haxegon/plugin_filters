// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_rendering_VertexDataFormat
#define INCLUDED_starling_rendering_VertexDataFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,display3D,VertexBuffer3D)
HX_DECLARE_CLASS2(starling,rendering,VertexDataAttribute)
HX_DECLARE_CLASS2(starling,rendering,VertexDataFormat)

namespace starling{
namespace rendering{


class HXCPP_CLASS_ATTRIBUTES VertexDataFormat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef VertexDataFormat_obj OBJ_;
		VertexDataFormat_obj();

	public:
		enum { _hx_ClassId = 0x55c31229 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.rendering.VertexDataFormat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.rendering.VertexDataFormat"); }
		static hx::ObjectPtr< VertexDataFormat_obj > __new();
		static hx::ObjectPtr< VertexDataFormat_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~VertexDataFormat_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("VertexDataFormat","\xa5","\xb5","\x85","\x36"); }

		static void __boot();
		static  ::haxe::ds::StringMap sFormats;
		static  ::starling::rendering::VertexDataFormat fromString(::String format);
		static ::Dynamic fromString_dyn();

		::String _format;
		int _vertexSize;
		 ::openfl::_Vector::AbstractVector _attributes;
		 ::starling::rendering::VertexDataFormat extend(::String format);
		::Dynamic extend_dyn();

		int getSize(::String attrName);
		::Dynamic getSize_dyn();

		int getSizeIn32Bits(::String attrName);
		::Dynamic getSizeIn32Bits_dyn();

		int getOffset(::String attrName);
		::Dynamic getOffset_dyn();

		int getOffsetIn32Bits(::String attrName);
		::Dynamic getOffsetIn32Bits_dyn();

		::String getFormat(::String attrName);
		::Dynamic getFormat_dyn();

		::String getName(int attrIndex);
		::Dynamic getName_dyn();

		bool hasAttribute(::String attrName);
		::Dynamic hasAttribute_dyn();

		void setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,::String attrName);
		::Dynamic setVertexBufferAt_dyn();

		void parseFormat(::String format);
		::Dynamic parseFormat_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::starling::rendering::VertexDataAttribute getAttribute(::String attrName);
		::Dynamic getAttribute_dyn();

		 ::openfl::_Vector::AbstractVector attributes;
		 ::openfl::_Vector::AbstractVector get_attributes();
		::Dynamic get_attributes_dyn();

		::String formatString;
		::String get_formatString();
		::Dynamic get_formatString_dyn();

		int vertexSize;
		int get_vertexSize();
		::Dynamic get_vertexSize_dyn();

		int vertexSizeIn32Bits;
		int get_vertexSizeIn32Bits();
		::Dynamic get_vertexSizeIn32Bits_dyn();

		int numAttributes;
		int get_numAttributes();
		::Dynamic get_numAttributes_dyn();

};

} // end namespace starling
} // end namespace rendering

#endif /* INCLUDED_starling_rendering_VertexDataFormat */ 
