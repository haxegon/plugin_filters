// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_animation_Juggler
#define INCLUDED_starling_animation_Juggler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(starling,animation,IAnimatable)
HX_DECLARE_CLASS2(starling,animation,Juggler)
HX_DECLARE_CLASS2(starling,events,Event)

namespace starling{
namespace animation{


class HXCPP_CLASS_ATTRIBUTES Juggler_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Juggler_obj OBJ_;
		Juggler_obj();

	public:
		enum { _hx_ClassId = 0x579d8a32 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.animation.Juggler")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.animation.Juggler"); }
		static hx::ObjectPtr< Juggler_obj > __new();
		static hx::ObjectPtr< Juggler_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Juggler_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Juggler","\xee","\x90","\xa2","\x5f"); }

		static void __boot();
		static int sCurrentObjectID;
		static ::Array< ::String > sTweenInstanceFields;
		static int getNextID();
		static ::Dynamic getNextID_dyn();

		 ::openfl::_Vector::AbstractVector _hx___objects;
		 ::haxe::ds::ObjectMap _hx___objectIDs;
		Float _hx___elapsedTime;
		Float _hx___timeScale;
		int add(::Dynamic object);
		::Dynamic add_dyn();

		int addWithID(::Dynamic object,int objectID);
		::Dynamic addWithID_dyn();

		bool contains(::Dynamic object);
		::Dynamic contains_dyn();

		int remove(::Dynamic object);
		::Dynamic remove_dyn();

		int removeByID(int objectID);
		::Dynamic removeByID_dyn();

		void removeTweens( ::Dynamic target);
		::Dynamic removeTweens_dyn();

		void removeDelayedCalls( ::Dynamic callback);
		::Dynamic removeDelayedCalls_dyn();

		bool containsTweens( ::Dynamic target);
		::Dynamic containsTweens_dyn();

		bool containsDelayedCalls( ::Dynamic callback);
		::Dynamic containsDelayedCalls_dyn();

		void purge();
		::Dynamic purge_dyn();

		int delayCall( ::Dynamic call,Float delay,::cpp::VirtualArray args);
		::Dynamic delayCall_dyn();

		int repeatCall( ::Dynamic call,Float interval,hx::Null< int >  repeatCount,::cpp::VirtualArray args);
		::Dynamic repeatCall_dyn();

		void onPooledDelayedCallComplete( ::starling::events::Event event);
		::Dynamic onPooledDelayedCallComplete_dyn();

		int tween( ::Dynamic target,Float time, ::Dynamic properties);
		::Dynamic tween_dyn();

		void onPooledTweenComplete( ::starling::events::Event event);
		::Dynamic onPooledTweenComplete_dyn();

		void advanceTime(Float time);
		::Dynamic advanceTime_dyn();

		void onRemove( ::starling::events::Event event);
		::Dynamic onRemove_dyn();

		Float get_elapsedTime();
		::Dynamic get_elapsedTime_dyn();

		Float get_timeScale();
		::Dynamic get_timeScale_dyn();

		Float set_timeScale(Float value);
		::Dynamic set_timeScale_dyn();

		 ::openfl::_Vector::AbstractVector get_objects();
		::Dynamic get_objects_dyn();

};

} // end namespace starling
} // end namespace animation

#endif /* INCLUDED_starling_animation_Juggler */ 
