// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_animation_DelayedCall
#define INCLUDED_starling_animation_DelayedCall

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(starling,animation,DelayedCall)
HX_DECLARE_CLASS2(starling,animation,IAnimatable)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)

namespace starling{
namespace animation{


class HXCPP_CLASS_ATTRIBUTES DelayedCall_obj : public  ::starling::events::EventDispatcher_obj
{
	public:
		typedef  ::starling::events::EventDispatcher_obj super;
		typedef DelayedCall_obj OBJ_;
		DelayedCall_obj();

	public:
		enum { _hx_ClassId = 0x529048b0 };

		void __construct( ::Dynamic callback,Float delay,::cpp::VirtualArray args);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.animation.DelayedCall")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.animation.DelayedCall"); }
		static hx::ObjectPtr< DelayedCall_obj > __new( ::Dynamic callback,Float delay,::cpp::VirtualArray args);
		static hx::ObjectPtr< DelayedCall_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic callback,Float delay,::cpp::VirtualArray args);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DelayedCall_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("DelayedCall","\x40","\x2c","\xc1","\x8c"); }

		static void __boot();
		static  ::openfl::_Vector::AbstractVector sPool;
		static  ::starling::animation::DelayedCall fromPool( ::Dynamic call,Float delay,::cpp::VirtualArray args);
		static ::Dynamic fromPool_dyn();

		static void toPool( ::starling::animation::DelayedCall delayedCall);
		static ::Dynamic toPool_dyn();

		Float _hx___currentTime;
		Float _hx___totalTime;
		 ::Dynamic _hx___callback;
		::cpp::VirtualArray _hx___args;
		int _hx___repeatCount;
		 ::starling::animation::DelayedCall reset( ::Dynamic callback,Float delay,::cpp::VirtualArray args);
		::Dynamic reset_dyn();

		void advanceTime(Float time);
		::Dynamic advanceTime_dyn();

		void complete();
		::Dynamic complete_dyn();

		bool get_isComplete();
		::Dynamic get_isComplete_dyn();

		Float get_totalTime();
		::Dynamic get_totalTime_dyn();

		Float get_currentTime();
		::Dynamic get_currentTime_dyn();

		int get_repeatCount();
		::Dynamic get_repeatCount_dyn();

		int set_repeatCount(int value);
		::Dynamic set_repeatCount_dyn();

		 ::Dynamic get_callback();
		::Dynamic get_callback_dyn();

		::cpp::VirtualArray get_arguments();
		::Dynamic get_arguments_dyn();

};

} // end namespace starling
} // end namespace animation

#endif /* INCLUDED_starling_animation_DelayedCall */ 
