// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_animation_Tween
#define INCLUDED_starling_animation_Tween

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(starling,animation,IAnimatable)
HX_DECLARE_CLASS2(starling,animation,Tween)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)

namespace starling{
namespace animation{


class HXCPP_CLASS_ATTRIBUTES Tween_obj : public  ::starling::events::EventDispatcher_obj
{
	public:
		typedef  ::starling::events::EventDispatcher_obj super;
		typedef Tween_obj OBJ_;
		Tween_obj();

	public:
		enum { _hx_ClassId = 0x71cd7a8f };

		void __construct( ::Dynamic target,Float time, ::Dynamic __o_transition);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.animation.Tween")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.animation.Tween"); }
		static hx::ObjectPtr< Tween_obj > __new( ::Dynamic target,Float time, ::Dynamic __o_transition);
		static hx::ObjectPtr< Tween_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic target,Float time, ::Dynamic __o_transition);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Tween_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Tween","\x4b","\x1a","\x9e","\xac"); }

		static void __boot();
		static ::String HINT_MARKER;
		static ::String getPropertyHint(::String property);
		static ::Dynamic getPropertyHint_dyn();

		static ::String getPropertyName(::String property);
		static ::Dynamic getPropertyName_dyn();

		static  ::openfl::_Vector::AbstractVector sTweenPool;
		static  ::starling::animation::Tween fromPool( ::Dynamic target,Float time, ::Dynamic transition);
		static ::Dynamic fromPool_dyn();

		static void toPool( ::starling::animation::Tween tween);
		static ::Dynamic toPool_dyn();

		 ::Dynamic _hx___target;
		 ::Dynamic _hx___transitionFunc;
		Dynamic _hx___transitionFunc_dyn() { return _hx___transitionFunc;}
		::String _hx___transitionName;
		 ::openfl::_Vector::AbstractVector _hx___properties;
		 ::openfl::_Vector::AbstractVector _hx___startValues;
		 ::openfl::_Vector::AbstractVector _hx___endValues;
		 ::openfl::_Vector::AbstractVector _hx___updateFuncs;
		 ::Dynamic _hx___onStart;
		 ::Dynamic _hx___onUpdate;
		 ::Dynamic _hx___onRepeat;
		 ::Dynamic _hx___onComplete;
		::cpp::VirtualArray _hx___onStartArgs;
		::cpp::VirtualArray _hx___onUpdateArgs;
		::cpp::VirtualArray _hx___onRepeatArgs;
		::cpp::VirtualArray _hx___onCompleteArgs;
		Float _hx___totalTime;
		Float _hx___currentTime;
		Float _hx___progress;
		Float _hx___delay;
		bool _hx___roundToInt;
		 ::starling::animation::Tween _hx___nextTween;
		int _hx___repeatCount;
		Float _hx___repeatDelay;
		bool __reverse;
		int _hx___currentCycle;
		 ::starling::animation::Tween reset( ::Dynamic target,Float time, ::Dynamic transition);
		::Dynamic reset_dyn();

		void animate(::String property,Float endValue);
		::Dynamic animate_dyn();

		void scaleTo(Float factor);
		::Dynamic scaleTo_dyn();

		void moveTo(Float x,Float y);
		::Dynamic moveTo_dyn();

		void fadeTo(Float alpha);
		::Dynamic fadeTo_dyn();

		void rotateTo(Float angle,::String type);
		::Dynamic rotateTo_dyn();

		void advanceTime(Float time);
		::Dynamic advanceTime_dyn();

		 ::Dynamic getUpdateFuncFromProperty(::String property);
		::Dynamic getUpdateFuncFromProperty_dyn();

		void updateStandard(::String property,Float startValue,Float endValue);
		::Dynamic updateStandard_dyn();

		void updateRgb(::String property,Float startValue,Float endValue);
		::Dynamic updateRgb_dyn();

		void updateRad(::String property,Float startValue,Float endValue);
		::Dynamic updateRad_dyn();

		void updateDeg(::String property,Float startValue,Float endValue);
		::Dynamic updateDeg_dyn();

		void updateAngle(Float pi,::String property,Float startValue,Float endValue);
		::Dynamic updateAngle_dyn();

		Float getEndValue(::String property);
		::Dynamic getEndValue_dyn();

		bool animatesProperty(::String property);
		::Dynamic animatesProperty_dyn();

		bool get_isComplete();
		::Dynamic get_isComplete_dyn();

		 ::Dynamic get_target();
		::Dynamic get_target_dyn();

		::String get_transition();
		::Dynamic get_transition_dyn();

		::String set_transition(::String value);
		::Dynamic set_transition_dyn();

		 ::Dynamic get_transitionFunc();
		::Dynamic get_transitionFunc_dyn();

		 ::Dynamic set_transitionFunc( ::Dynamic value);
		::Dynamic set_transitionFunc_dyn();

		Float get_totalTime();
		::Dynamic get_totalTime_dyn();

		Float get_currentTime();
		::Dynamic get_currentTime_dyn();

		Float get_progress();
		::Dynamic get_progress_dyn();

		Float get_delay();
		::Dynamic get_delay_dyn();

		Float set_delay(Float value);
		::Dynamic set_delay_dyn();

		int get_repeatCount();
		::Dynamic get_repeatCount_dyn();

		int set_repeatCount(int value);
		::Dynamic set_repeatCount_dyn();

		Float get_repeatDelay();
		::Dynamic get_repeatDelay_dyn();

		Float set_repeatDelay(Float value);
		::Dynamic set_repeatDelay_dyn();

		bool get_reverse();
		::Dynamic get_reverse_dyn();

		bool set_reverse(bool value);
		::Dynamic set_reverse_dyn();

		bool get_roundToInt();
		::Dynamic get_roundToInt_dyn();

		bool set_roundToInt(bool value);
		::Dynamic set_roundToInt_dyn();

		 ::Dynamic get_onStart();
		::Dynamic get_onStart_dyn();

		 ::Dynamic set_onStart( ::Dynamic value);
		::Dynamic set_onStart_dyn();

		 ::Dynamic get_onUpdate();
		::Dynamic get_onUpdate_dyn();

		 ::Dynamic set_onUpdate( ::Dynamic value);
		::Dynamic set_onUpdate_dyn();

		 ::Dynamic get_onRepeat();
		::Dynamic get_onRepeat_dyn();

		 ::Dynamic set_onRepeat( ::Dynamic value);
		::Dynamic set_onRepeat_dyn();

		 ::Dynamic get_onComplete();
		::Dynamic get_onComplete_dyn();

		 ::Dynamic set_onComplete( ::Dynamic value);
		::Dynamic set_onComplete_dyn();

		::cpp::VirtualArray get_onStartArgs();
		::Dynamic get_onStartArgs_dyn();

		::cpp::VirtualArray set_onStartArgs(::cpp::VirtualArray value);
		::Dynamic set_onStartArgs_dyn();

		::cpp::VirtualArray get_onUpdateArgs();
		::Dynamic get_onUpdateArgs_dyn();

		::cpp::VirtualArray set_onUpdateArgs(::cpp::VirtualArray value);
		::Dynamic set_onUpdateArgs_dyn();

		::cpp::VirtualArray get_onRepeatArgs();
		::Dynamic get_onRepeatArgs_dyn();

		::cpp::VirtualArray set_onRepeatArgs(::cpp::VirtualArray value);
		::Dynamic set_onRepeatArgs_dyn();

		::cpp::VirtualArray get_onCompleteArgs();
		::Dynamic get_onCompleteArgs_dyn();

		::cpp::VirtualArray set_onCompleteArgs(::cpp::VirtualArray value);
		::Dynamic set_onCompleteArgs_dyn();

		 ::starling::animation::Tween get_nextTween();
		::Dynamic get_nextTween_dyn();

		 ::starling::animation::Tween set_nextTween( ::starling::animation::Tween value);
		::Dynamic set_nextTween_dyn();

};

} // end namespace starling
} // end namespace animation

#endif /* INCLUDED_starling_animation_Tween */ 
