// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_text_BitmapFont
#define INCLUDED_starling_text_BitmapFont

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_text_ITextCompositor
#include <starling/text/ITextCompositor.h>
#endif
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Image)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,MeshBatch)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,display,Sprite)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,text,BitmapChar)
HX_DECLARE_CLASS2(starling,text,BitmapFont)
HX_DECLARE_CLASS2(starling,text,ITextCompositor)
HX_DECLARE_CLASS2(starling,text,TextFormat)
HX_DECLARE_CLASS2(starling,text,TextOptions)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace text{


class HXCPP_CLASS_ATTRIBUTES BitmapFont_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef BitmapFont_obj OBJ_;
		BitmapFont_obj();

	public:
		enum { _hx_ClassId = 0x112151f3 };

		void __construct( ::starling::textures::Texture texture, ::Xml fontXml);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.text.BitmapFont")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.text.BitmapFont"); }
		static hx::ObjectPtr< BitmapFont_obj > __new( ::starling::textures::Texture texture, ::Xml fontXml);
		static hx::ObjectPtr< BitmapFont_obj > __alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture texture, ::Xml fontXml);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~BitmapFont_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("BitmapFont","\x7e","\xc1","\xce","\x2b"); }

		static void __boot();
		static int NATIVE_SIZE;
		static ::String MINI;
		static int CHAR_SPACE;
		static int CHAR_TAB;
		static int CHAR_NEWLINE;
		static int CHAR_CARRIAGE_RETURN;
		static ::Array< ::Dynamic> sLines;
		static  ::starling::text::TextOptions sDefaultOptions;
		 ::starling::textures::Texture _hx___texture;
		 ::haxe::ds::IntMap _hx___chars;
		::String _hx___name;
		Float _hx___size;
		Float _hx___lineHeight;
		Float _hx___baseline;
		Float _hx___offsetX;
		Float _hx___offsetY;
		Float _hx___padding;
		 ::starling::display::Image _hx___helperImage;
		void dispose();
		::Dynamic dispose_dyn();

		void parseFontXml( ::Xml fontXml);
		::Dynamic parseFontXml_dyn();

		 ::starling::text::BitmapChar getChar(int charID);
		::Dynamic getChar_dyn();

		void addChar(int charID, ::starling::text::BitmapChar bitmapChar);
		::Dynamic addChar_dyn();

		 ::openfl::_Vector::AbstractVector getCharIDs( ::openfl::_Vector::AbstractVector result);
		::Dynamic getCharIDs_dyn();

		bool hasChars(::String text);
		::Dynamic hasChars_dyn();

		 ::starling::display::Sprite createSprite(Float width,Float height,::String text, ::starling::text::TextFormat format, ::starling::text::TextOptions options);
		::Dynamic createSprite_dyn();

		void fillMeshBatch( ::starling::display::MeshBatch meshBatch,Float width,Float height,::String text, ::starling::text::TextFormat format, ::starling::text::TextOptions options);
		::Dynamic fillMeshBatch_dyn();

		void clearMeshBatch( ::starling::display::MeshBatch meshBatch);
		::Dynamic clearMeshBatch_dyn();

		 ::openfl::_Vector::AbstractVector arrangeChars(Float width,Float height,::String text, ::starling::text::TextFormat format, ::starling::text::TextOptions options);
		::Dynamic arrangeChars_dyn();

		::String get_name();
		::Dynamic get_name_dyn();

		Float get_size();
		::Dynamic get_size_dyn();

		Float get_lineHeight();
		::Dynamic get_lineHeight_dyn();

		void set_lineHeight(Float value);
		::Dynamic set_lineHeight_dyn();

		::String get_smoothing();
		::Dynamic get_smoothing_dyn();

		::String set_smoothing(::String value);
		::Dynamic set_smoothing_dyn();

		Float get_baseline();
		::Dynamic get_baseline_dyn();

		Float set_baseline(Float value);
		::Dynamic set_baseline_dyn();

		Float get_offsetX();
		::Dynamic get_offsetX_dyn();

		Float set_offsetX(Float value);
		::Dynamic set_offsetX_dyn();

		Float get_offsetY();
		::Dynamic get_offsetY_dyn();

		Float set_offsetY(Float value);
		::Dynamic set_offsetY_dyn();

		Float get_padding();
		::Dynamic get_padding_dyn();

		Float set_padding(Float value);
		::Dynamic set_padding_dyn();

		 ::starling::textures::Texture get_texture();
		::Dynamic get_texture_dyn();

};

} // end namespace starling
} // end namespace text

#endif /* INCLUDED_starling_text_BitmapFont */ 
