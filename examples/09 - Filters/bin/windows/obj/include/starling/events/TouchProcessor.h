// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_events_TouchProcessor
#define INCLUDED_starling_events_TouchProcessor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Sprite)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,events,KeyboardEvent)
HX_DECLARE_CLASS2(starling,events,Touch)
HX_DECLARE_CLASS2(starling,events,TouchEvent)
HX_DECLARE_CLASS2(starling,events,TouchMarker)
HX_DECLARE_CLASS2(starling,events,TouchProcessor)

namespace starling{
namespace events{


class HXCPP_CLASS_ATTRIBUTES TouchProcessor_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TouchProcessor_obj OBJ_;
		TouchProcessor_obj();

	public:
		enum { _hx_ClassId = 0x20c1a514 };

		void __construct( ::starling::display::Stage stage);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.events.TouchProcessor")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.events.TouchProcessor"); }
		static hx::ObjectPtr< TouchProcessor_obj > __new( ::starling::display::Stage stage);
		static hx::ObjectPtr< TouchProcessor_obj > __alloc(hx::Ctx *_hx_ctx, ::starling::display::Stage stage);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TouchProcessor_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TouchProcessor","\xb3","\xa9","\xf5","\x94"); }

		static void __boot();
		static  ::openfl::_Vector::AbstractVector sUpdatedTouches;
		static  ::openfl::_Vector::AbstractVector sHoveringTouchData;
		static  ::openfl::geom::Point sHelperPoint;
		 ::starling::display::Stage _hx___stage;
		 ::starling::display::DisplayObject __root;
		Float _hx___elapsedTime;
		 ::openfl::_Vector::AbstractVector _hx___lastTaps;
		bool _hx___shiftDown;
		bool _hx___ctrlDown;
		Float _hx___multitapTime;
		Float _hx___multitapDistance;
		 ::starling::events::TouchEvent _hx___touchEvent;
		 ::starling::events::TouchMarker _hx___touchMarker;
		bool _hx___simulateMultitouch;
		 ::openfl::_Vector::AbstractVector _hx___queue;
		 ::openfl::_Vector::AbstractVector _hx___currentTouches;
		void dispose();
		::Dynamic dispose_dyn();

		void advanceTime(Float passedTime);
		::Dynamic advanceTime_dyn();

		void processTouches( ::openfl::_Vector::AbstractVector touches,bool shiftDown,bool ctrlDown);
		::Dynamic processTouches_dyn();

		void enqueue(int touchID,::String phase,Float globalX,Float globalY,hx::Null< Float >  pressure,hx::Null< Float >  width,hx::Null< Float >  height);
		::Dynamic enqueue_dyn();

		void enqueueMouseLeftStage();
		::Dynamic enqueueMouseLeftStage_dyn();

		void cancelTouches();
		::Dynamic cancelTouches_dyn();

		 ::starling::events::Touch createOrUpdateTouch(int touchID,::String phase,Float globalX,Float globalY,hx::Null< Float >  pressure,hx::Null< Float >  width,hx::Null< Float >  height);
		::Dynamic createOrUpdateTouch_dyn();

		void updateTapCount( ::starling::events::Touch touch);
		::Dynamic updateTapCount_dyn();

		void addCurrentTouch( ::starling::events::Touch touch);
		::Dynamic addCurrentTouch_dyn();

		 ::starling::events::Touch getCurrentTouch(int touchID);
		::Dynamic getCurrentTouch_dyn();

		bool containsTouchWithID( ::openfl::_Vector::AbstractVector touches,int touchID);
		::Dynamic containsTouchWithID_dyn();

		bool get_simulateMultitouch();
		::Dynamic get_simulateMultitouch_dyn();

		bool set_simulateMultitouch(bool value);
		::Dynamic set_simulateMultitouch_dyn();

		Float get_multitapTime();
		::Dynamic get_multitapTime_dyn();

		Float set_multitapTime(Float value);
		::Dynamic set_multitapTime_dyn();

		Float get_multitapDistance();
		::Dynamic get_multitapDistance_dyn();

		Float set_multitapDistance(Float value);
		::Dynamic set_multitapDistance_dyn();

		 ::starling::display::DisplayObject get_root();
		::Dynamic get_root_dyn();

		 ::starling::display::DisplayObject set_root( ::starling::display::DisplayObject value);
		::Dynamic set_root_dyn();

		 ::starling::display::Stage get_stage();
		::Dynamic get_stage_dyn();

		int get_numCurrentTouches();
		::Dynamic get_numCurrentTouches_dyn();

		void onKey( ::starling::events::KeyboardEvent event);
		::Dynamic onKey_dyn();

		void monitorInterruptions(bool enable);
		::Dynamic monitorInterruptions_dyn();

		void onInterruption( ::Dynamic event);
		::Dynamic onInterruption_dyn();

};

} // end namespace starling
} // end namespace events

#endif /* INCLUDED_starling_events_TouchProcessor */ 
