// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_events_EventDispatcher
#define INCLUDED_starling_events_EventDispatcher

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)

namespace starling{
namespace events{


class HXCPP_CLASS_ATTRIBUTES EventDispatcher_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef EventDispatcher_obj OBJ_;
		EventDispatcher_obj();

	public:
		enum { _hx_ClassId = 0x25137bc0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.events.EventDispatcher")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.events.EventDispatcher"); }
		static hx::ObjectPtr< EventDispatcher_obj > __new();
		static hx::ObjectPtr< EventDispatcher_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~EventDispatcher_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("EventDispatcher","\x41","\x82","\x63","\x5e"); }

		static void __boot();
		static ::Array< ::Dynamic> sBubbleChains;
		 ::haxe::ds::StringMap _hx___eventListeners;
		 ::openfl::_Vector::AbstractVector _hx___eventStack;
		virtual void addEventListener(::String type, ::Dynamic listener);
		::Dynamic addEventListener_dyn();

		virtual void removeEventListener(::String type, ::Dynamic listener);
		::Dynamic removeEventListener_dyn();

		virtual void removeEventListeners(::String type);
		::Dynamic removeEventListeners_dyn();

		virtual void dispatchEvent( ::starling::events::Event event);
		::Dynamic dispatchEvent_dyn();

		bool _hx___invokeEvent( ::starling::events::Event event);
		::Dynamic _hx___invokeEvent_dyn();

		void _hx___bubbleEvent( ::starling::events::Event event);
		::Dynamic _hx___bubbleEvent_dyn();

		void dispatchEventWith(::String type,hx::Null< bool >  bubbles, ::Dynamic data);
		::Dynamic dispatchEventWith_dyn();

		bool hasEventListener(::String type, ::Dynamic listener);
		::Dynamic hasEventListener_dyn();

};

} // end namespace starling
} // end namespace events

#endif /* INCLUDED_starling_events_EventDispatcher */ 
