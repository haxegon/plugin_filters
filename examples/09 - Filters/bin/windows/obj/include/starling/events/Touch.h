// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_events_Touch
#define INCLUDED_starling_events_Touch

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,events,Touch)
HX_DECLARE_CLASS2(starling,events,TouchEvent)

namespace starling{
namespace events{


class HXCPP_CLASS_ATTRIBUTES Touch_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Touch_obj OBJ_;
		Touch_obj();

	public:
		enum { _hx_ClassId = 0x04ad087a };

		void __construct(int id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.events.Touch")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.events.Touch"); }
		static hx::ObjectPtr< Touch_obj > __new(int id);
		static hx::ObjectPtr< Touch_obj > __alloc(hx::Ctx *_hx_ctx,int id);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Touch_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Touch","\x9f","\x87","\x60","\xa7"); }

		static void __boot();
		static  ::openfl::geom::Point sHelperPoint;
		int _hx___id;
		Float _hx___globalX;
		Float _hx___globalY;
		Float _hx___previousGlobalX;
		Float _hx___previousGlobalY;
		int _hx___tapCount;
		::String _hx___phase;
		 ::starling::display::DisplayObject _hx___target;
		Float _hx___timestamp;
		Float _hx___pressure;
		Float _hx___width;
		Float _hx___height;
		bool _hx___cancelled;
		 ::openfl::_Vector::AbstractVector _hx___bubbleChain;
		 ::openfl::geom::Point getLocation( ::starling::display::DisplayObject space, ::openfl::geom::Point out);
		::Dynamic getLocation_dyn();

		 ::openfl::geom::Point getPreviousLocation( ::starling::display::DisplayObject space, ::openfl::geom::Point out);
		::Dynamic getPreviousLocation_dyn();

		 ::openfl::geom::Point getMovement( ::starling::display::DisplayObject space, ::openfl::geom::Point out);
		::Dynamic getMovement_dyn();

		bool isTouching( ::starling::display::DisplayObject target);
		::Dynamic isTouching_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::starling::events::Touch clone();
		::Dynamic clone_dyn();

		void updateBubbleChain();
		::Dynamic updateBubbleChain_dyn();

		int get_id();
		::Dynamic get_id_dyn();

		Float get_previousGlobalX();
		::Dynamic get_previousGlobalX_dyn();

		Float get_previousGlobalY();
		::Dynamic get_previousGlobalY_dyn();

		Float get_globalX();
		::Dynamic get_globalX_dyn();

		Float set_globalX(Float value);
		::Dynamic set_globalX_dyn();

		Float get_globalY();
		::Dynamic get_globalY_dyn();

		Float set_globalY(Float value);
		::Dynamic set_globalY_dyn();

		int get_tapCount();
		::Dynamic get_tapCount_dyn();

		int set_tapCount(int value);
		::Dynamic set_tapCount_dyn();

		::String get_phase();
		::Dynamic get_phase_dyn();

		::String set_phase(::String value);
		::Dynamic set_phase_dyn();

		 ::starling::display::DisplayObject get_target();
		::Dynamic get_target_dyn();

		 ::starling::display::DisplayObject set_target( ::starling::display::DisplayObject value);
		::Dynamic set_target_dyn();

		Float get_timestamp();
		::Dynamic get_timestamp_dyn();

		Float set_timestamp(Float value);
		::Dynamic set_timestamp_dyn();

		Float get_pressure();
		::Dynamic get_pressure_dyn();

		Float set_pressure(Float value);
		::Dynamic set_pressure_dyn();

		Float get_width();
		::Dynamic get_width_dyn();

		Float set_width(Float value);
		::Dynamic set_width_dyn();

		Float get_height();
		::Dynamic get_height_dyn();

		Float set_height(Float value);
		::Dynamic set_height_dyn();

		bool get_cancelled();
		::Dynamic get_cancelled_dyn();

		bool set_cancelled(bool value);
		::Dynamic set_cancelled_dyn();

		void dispatchEvent( ::starling::events::TouchEvent event);
		::Dynamic dispatchEvent_dyn();

		 ::openfl::_Vector::AbstractVector get_bubbleChain();
		::Dynamic get_bubbleChain_dyn();

};

} // end namespace starling
} // end namespace events

#endif /* INCLUDED_starling_events_Touch */ 
