// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_MatrixUtil
#define INCLUDED_starling_utils_MatrixUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,utils,MatrixUtil)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES MatrixUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MatrixUtil_obj OBJ_;
		MatrixUtil_obj();

	public:
		enum { _hx_ClassId = 0x5b28caec };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.MatrixUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.MatrixUtil"); }

		hx::ObjectPtr< MatrixUtil_obj > __new() {
			hx::ObjectPtr< MatrixUtil_obj > __this = new MatrixUtil_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< MatrixUtil_obj > __alloc(hx::Ctx *_hx_ctx) {
			MatrixUtil_obj *__this = (MatrixUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MatrixUtil_obj), false, "starling.utils.MatrixUtil"));
			*(void **)__this = MatrixUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MatrixUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MatrixUtil","\x03","\x73","\x5f","\x7f"); }

		static void __boot();
		static  ::openfl::_Vector::AbstractVector sRawData;
		static  ::openfl::_Vector::AbstractVector sRawData2;
		static  ::openfl::geom::Vector3D sPoint3D;
		static  ::openfl::_Vector::AbstractVector sMatrixData;
		static  ::openfl::geom::Matrix3D convertTo3D( ::openfl::geom::Matrix matrix, ::openfl::geom::Matrix3D out);
		static ::Dynamic convertTo3D_dyn();

		static  ::openfl::geom::Matrix convertTo2D( ::openfl::geom::Matrix3D matrix3D, ::openfl::geom::Matrix out);
		static ::Dynamic convertTo2D_dyn();

		static bool isIdentity( ::openfl::geom::Matrix matrix);
		static ::Dynamic isIdentity_dyn();

		static bool isIdentity3D( ::openfl::geom::Matrix3D matrix);
		static ::Dynamic isIdentity3D_dyn();

		static  ::openfl::geom::Point transformPoint( ::openfl::geom::Matrix matrix, ::openfl::geom::Point point, ::openfl::geom::Point out);
		static ::Dynamic transformPoint_dyn();

		static  ::openfl::geom::Vector3D transformPoint3D( ::openfl::geom::Matrix3D matrix, ::openfl::geom::Vector3D point, ::openfl::geom::Vector3D out);
		static ::Dynamic transformPoint3D_dyn();

		static  ::openfl::geom::Point transformCoords( ::openfl::geom::Matrix matrix,Float x,Float y, ::openfl::geom::Point out);
		static ::Dynamic transformCoords_dyn();

		static  ::openfl::geom::Vector3D transformCoords3D( ::openfl::geom::Matrix3D matrix,Float x,Float y,Float z, ::openfl::geom::Vector3D out);
		static ::Dynamic transformCoords3D_dyn();

		static void skew( ::openfl::geom::Matrix matrix,Float skewX,Float skewY);
		static ::Dynamic skew_dyn();

		static void prependMatrix( ::openfl::geom::Matrix base, ::openfl::geom::Matrix prep);
		static ::Dynamic prependMatrix_dyn();

		static void prependTranslation( ::openfl::geom::Matrix matrix,Float tx,Float ty);
		static ::Dynamic prependTranslation_dyn();

		static void prependScale( ::openfl::geom::Matrix matrix,Float sx,Float sy);
		static ::Dynamic prependScale_dyn();

		static void prependRotation( ::openfl::geom::Matrix matrix,Float angle);
		static ::Dynamic prependRotation_dyn();

		static void prependSkew( ::openfl::geom::Matrix matrix,Float skewX,Float skewY);
		static ::Dynamic prependSkew_dyn();

		static ::String toString3D( ::openfl::geom::Matrix3D matrix,hx::Null< bool >  transpose,hx::Null< int >  precision);
		static ::Dynamic toString3D_dyn();

		static ::String toString( ::openfl::geom::Matrix matrix,hx::Null< int >  precision);
		static ::Dynamic toString_dyn();

		static ::String formatRawData( ::openfl::_Vector::AbstractVector data,int numCols,int numRows,int precision,::String indent);
		static ::Dynamic formatRawData_dyn();

		static void snapToPixels( ::openfl::geom::Matrix matrix,Float pixelSize);
		static ::Dynamic snapToPixels_dyn();

		static  ::openfl::geom::Matrix3D createPerspectiveProjectionMatrix(Float x,Float y,Float width,Float height,hx::Null< Float >  stageWidth,hx::Null< Float >  stageHeight, ::openfl::geom::Vector3D cameraPos, ::openfl::geom::Matrix3D out);
		static ::Dynamic createPerspectiveProjectionMatrix_dyn();

		static  ::openfl::geom::Matrix createOrthographicProjectionMatrix(Float x,Float y,Float width,Float height, ::openfl::geom::Matrix out);
		static ::Dynamic createOrthographicProjectionMatrix_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_MatrixUtil */ 
