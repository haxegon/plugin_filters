// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_Execute
#define INCLUDED_starling_utils_Execute

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(starling,utils,Execute)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Execute_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Execute_obj OBJ_;
		Execute_obj();

	public:
		enum { _hx_ClassId = 0x5fafcaf0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.Execute")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.Execute"); }

		hx::ObjectPtr< Execute_obj > __new() {
			hx::ObjectPtr< Execute_obj > __this = new Execute_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Execute_obj > __alloc(hx::Ctx *_hx_ctx) {
			Execute_obj *__this = (Execute_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Execute_obj), false, "starling.utils.Execute"));
			*(void **)__this = Execute_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Execute_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Execute","\x15","\x32","\x5e","\x99"); }

		static void execute( ::Dynamic func,::cpp::VirtualArray args);
		static ::Dynamic execute_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_Execute */ 
