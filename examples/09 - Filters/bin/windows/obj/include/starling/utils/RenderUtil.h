// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_RenderUtil
#define INCLUDED_starling_utils_RenderUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_38_new)
HX_DECLARE_CLASS2(openfl,display,Stage3D)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(starling,textures,Texture)
HX_DECLARE_CLASS2(starling,utils,RenderUtil)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES RenderUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef RenderUtil_obj OBJ_;
		RenderUtil_obj();

	public:
		enum { _hx_ClassId = 0x2ce8789d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.RenderUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.RenderUtil"); }

		hx::ObjectPtr< RenderUtil_obj > __new() {
			hx::ObjectPtr< RenderUtil_obj > __this = new RenderUtil_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< RenderUtil_obj > __alloc(hx::Ctx *_hx_ctx) {
			RenderUtil_obj *__this = (RenderUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderUtil_obj), false, "starling.utils.RenderUtil"));
			*(void **)__this = RenderUtil_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_38_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RenderUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("RenderUtil","\x98","\x56","\x69","\xe1"); }

		static void clear(hx::Null< int >  rgb,hx::Null< Float >  alpha,hx::Null< Float >  depth,hx::Null< int >  stencil);
		static ::Dynamic clear_dyn();

		static ::String getTextureLookupFlags(::String format,bool mipMapping,hx::Null< bool >  repeat,::String smoothing);
		static ::Dynamic getTextureLookupFlags_dyn();

		static int getTextureVariantBits( ::starling::textures::Texture texture);
		static ::Dynamic getTextureVariantBits_dyn();

		static void setSamplerStateAt(int sampler,bool mipMapping,::String smoothing,hx::Null< bool >  repeat);
		static ::Dynamic setSamplerStateAt_dyn();

		static ::String createAGALTexOperation(::String resultReg,::String uvReg,int sampler, ::starling::textures::Texture texture,hx::Null< bool >  convertToPmaIfRequired,::String tempReg);
		static ::Dynamic createAGALTexOperation_dyn();

		static void requestContext3D( ::openfl::display::Stage3D stage3D,::String renderMode, ::Dynamic profile);
		static ::Dynamic requestContext3D_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_RenderUtil */ 
