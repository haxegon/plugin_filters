// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_RectangleUtil
#define INCLUDED_starling_utils_RectangleUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,utils,RectangleUtil)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES RectangleUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef RectangleUtil_obj OBJ_;
		RectangleUtil_obj();

	public:
		enum { _hx_ClassId = 0x0e2dab68 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.RectangleUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.RectangleUtil"); }

		hx::ObjectPtr< RectangleUtil_obj > __new() {
			hx::ObjectPtr< RectangleUtil_obj > __this = new RectangleUtil_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< RectangleUtil_obj > __alloc(hx::Ctx *_hx_ctx) {
			RectangleUtil_obj *__this = (RectangleUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RectangleUtil_obj), false, "starling.utils.RectangleUtil"));
			*(void **)__this = RectangleUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RectangleUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("RectangleUtil","\xb1","\xeb","\xc3","\x0a"); }

		static void __boot();
		static  ::openfl::geom::Point sPoint;
		static  ::openfl::geom::Vector3D sPoint3D;
		static  ::openfl::_Vector::AbstractVector sPositions;
		static  ::openfl::geom::Rectangle intersect( ::openfl::geom::Rectangle rect1, ::openfl::geom::Rectangle rect2, ::openfl::geom::Rectangle out);
		static ::Dynamic intersect_dyn();

		static  ::openfl::geom::Rectangle fit( ::openfl::geom::Rectangle rectangle, ::openfl::geom::Rectangle into,::String scaleMode,hx::Null< bool >  pixelPerfect, ::openfl::geom::Rectangle out);
		static ::Dynamic fit_dyn();

		static Float nextSuitableScaleFactor(Float factor,bool up);
		static ::Dynamic nextSuitableScaleFactor_dyn();

		static void normalize( ::openfl::geom::Rectangle rect);
		static ::Dynamic normalize_dyn();

		static void extend( ::openfl::geom::Rectangle rect,hx::Null< Float >  left,hx::Null< Float >  right,hx::Null< Float >  top,hx::Null< Float >  bottom);
		static ::Dynamic extend_dyn();

		static void extendToWholePixels( ::openfl::geom::Rectangle rect,hx::Null< Float >  scaleFactor);
		static ::Dynamic extendToWholePixels_dyn();

		static  ::openfl::geom::Rectangle getBounds( ::openfl::geom::Rectangle rectangle, ::openfl::geom::Matrix matrix, ::openfl::geom::Rectangle out);
		static ::Dynamic getBounds_dyn();

		static  ::openfl::geom::Rectangle getBoundsProjected( ::openfl::geom::Rectangle rectangle, ::openfl::geom::Matrix3D matrix, ::openfl::geom::Vector3D camPos, ::openfl::geom::Rectangle out);
		static ::Dynamic getBoundsProjected_dyn();

		static  ::openfl::_Vector::AbstractVector getPositions( ::openfl::geom::Rectangle rectangle, ::openfl::_Vector::AbstractVector out);
		static ::Dynamic getPositions_dyn();

		static bool compare( ::openfl::geom::Rectangle r1, ::openfl::geom::Rectangle r2,hx::Null< Float >  e);
		static ::Dynamic compare_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_RectangleUtil */ 
