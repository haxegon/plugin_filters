// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_Padding
#define INCLUDED_starling_utils_Padding

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,utils,Padding)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Padding_obj : public  ::starling::events::EventDispatcher_obj
{
	public:
		typedef  ::starling::events::EventDispatcher_obj super;
		typedef Padding_obj OBJ_;
		Padding_obj();

	public:
		enum { _hx_ClassId = 0x64201a8c };

		void __construct(hx::Null< Float >  __o_left,hx::Null< Float >  __o_right,hx::Null< Float >  __o_top,hx::Null< Float >  __o_bottom);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.utils.Padding")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.utils.Padding"); }
		static hx::ObjectPtr< Padding_obj > __new(hx::Null< Float >  __o_left,hx::Null< Float >  __o_right,hx::Null< Float >  __o_top,hx::Null< Float >  __o_bottom);
		static hx::ObjectPtr< Padding_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_left,hx::Null< Float >  __o_right,hx::Null< Float >  __o_top,hx::Null< Float >  __o_bottom);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Padding_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Padding","\xb1","\x81","\xce","\x9d"); }

		Float _left;
		Float _right;
		Float _top;
		Float _bottom;
		void setTo(hx::Null< Float >  left,hx::Null< Float >  right,hx::Null< Float >  top,hx::Null< Float >  bottom);
		::Dynamic setTo_dyn();

		void setToUniform(Float value);
		::Dynamic setToUniform_dyn();

		void setToSymmetric(Float horizontal,Float vertical);
		::Dynamic setToSymmetric_dyn();

		void copyFrom( ::starling::utils::Padding padding);
		::Dynamic copyFrom_dyn();

		 ::starling::utils::Padding clone();
		::Dynamic clone_dyn();

		Float get_left();
		::Dynamic get_left_dyn();

		Float set_left(Float value);
		::Dynamic set_left_dyn();

		Float get_right();
		::Dynamic get_right_dyn();

		Float set_right(Float value);
		::Dynamic set_right_dyn();

		Float get_top();
		::Dynamic get_top_dyn();

		Float set_top(Float value);
		::Dynamic set_top_dyn();

		Float get_bottom();
		::Dynamic get_bottom_dyn();

		Float set_bottom(Float value);
		::Dynamic set_bottom_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_Padding */ 
