// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_SystemUtil
#define INCLUDED_starling_utils_SystemUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(openfl,text,Font)
HX_DECLARE_CLASS2(starling,utils,SystemUtil)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES SystemUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SystemUtil_obj OBJ_;
		SystemUtil_obj();

	public:
		enum { _hx_ClassId = 0x3e61e4b6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.SystemUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.SystemUtil"); }

		hx::ObjectPtr< SystemUtil_obj > __new() {
			hx::ObjectPtr< SystemUtil_obj > __this = new SystemUtil_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< SystemUtil_obj > __alloc(hx::Ctx *_hx_ctx) {
			SystemUtil_obj *__this = (SystemUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SystemUtil_obj), false, "starling.utils.SystemUtil"));
			*(void **)__this = SystemUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SystemUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("SystemUtil","\xb1","\xc2","\xe2","\xf2"); }

		static void __boot();
		static bool sInitialized;
		static bool sApplicationActive;
		static ::Array< ::Dynamic> sWaitingCalls;
		static ::String sPlatform;
		static ::String sVersion;
		static bool sAIR;
		static ::Array< ::Dynamic> sEmbeddedFonts;
		static bool sSupportsDepthAndStencil;
		static void initialize();
		static ::Dynamic initialize_dyn();

		static void onActivate( ::Dynamic event);
		static ::Dynamic onActivate_dyn();

		static void onDeactivate( ::Dynamic event);
		static ::Dynamic onDeactivate_dyn();

		static void executeWhenApplicationIsActive( ::Dynamic call,::cpp::VirtualArray args);
		static ::Dynamic executeWhenApplicationIsActive_dyn();

		static bool get_isApplicationActive();
		static ::Dynamic get_isApplicationActive_dyn();

		static bool get_isAIR();
		static ::Dynamic get_isAIR_dyn();

		static ::String get_version();
		static ::Dynamic get_version_dyn();

		static ::String get_platform();
		static ::Dynamic get_platform_dyn();

		static ::String set_platform(::String value);
		static ::Dynamic set_platform_dyn();

		static bool get_supportsDepthAndStencil();
		static ::Dynamic get_supportsDepthAndStencil_dyn();

		static bool get_supportsVideoTexture();
		static ::Dynamic get_supportsVideoTexture_dyn();

		static void updateEmbeddedFonts();
		static ::Dynamic updateEmbeddedFonts_dyn();

		static bool isEmbeddedFont(::String fontName,hx::Null< bool >  bold,hx::Null< bool >  italic,::String fontType);
		static ::Dynamic isEmbeddedFont_dyn();

		static bool get_isIOS();
		static ::Dynamic get_isIOS_dyn();

		static bool get_isAndroid();
		static ::Dynamic get_isAndroid_dyn();

		static bool get_isMac();
		static ::Dynamic get_isMac_dyn();

		static bool get_isWindows();
		static ::Dynamic get_isWindows_dyn();

		static bool get_isDesktop();
		static ::Dynamic get_isDesktop_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_SystemUtil */ 
