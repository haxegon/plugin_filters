// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_AssetManager
#define INCLUDED_starling_utils_AssetManager

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)
HX_DECLARE_CLASS2(openfl,media,SoundChannel)
HX_DECLARE_CLASS2(openfl,media,SoundTransform)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)
HX_DECLARE_CLASS2(starling,core,Starling)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,textures,Texture)
HX_DECLARE_CLASS2(starling,textures,TextureAtlas)
HX_DECLARE_CLASS2(starling,textures,TextureOptions)
HX_DECLARE_CLASS2(starling,utils,AssetManager)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES AssetManager_obj : public  ::starling::events::EventDispatcher_obj
{
	public:
		typedef  ::starling::events::EventDispatcher_obj super;
		typedef AssetManager_obj OBJ_;
		AssetManager_obj();

	public:
		enum { _hx_ClassId = 0x5ee39ea6 };

		void __construct(hx::Null< Float >  __o_scaleFactor,hx::Null< bool >  __o_useMipmaps);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.utils.AssetManager")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.utils.AssetManager"); }
		static hx::ObjectPtr< AssetManager_obj > __new(hx::Null< Float >  __o_scaleFactor,hx::Null< bool >  __o_useMipmaps);
		static hx::ObjectPtr< AssetManager_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_scaleFactor,hx::Null< bool >  __o_useMipmaps);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AssetManager_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AssetManager","\x7d","\xba","\x25","\xfc"); }

		static void __boot();
		static ::String HTTP_RESPONSE_STATUS;
		static  ::openfl::_Vector::AbstractVector sNames;
		static  ::EReg NAME_REGEX;
		 ::starling::core::Starling _hx___starling;
		int _hx___numLostTextures;
		int _hx___numRestoredTextures;
		int _hx___numLoadingQueues;
		 ::starling::textures::TextureOptions _hx___defaultTextureOptions;
		bool _hx___checkPolicyFile;
		bool _hx___keepAtlasXmls;
		bool _hx___keepFontXmls;
		int _hx___numConnections;
		bool _hx___verbose;
		::Array< ::Dynamic> _hx___queue;
		 ::haxe::ds::StringMap _hx___textures;
		 ::haxe::ds::StringMap _hx___atlases;
		 ::haxe::ds::StringMap _hx___sounds;
		 ::haxe::ds::StringMap _hx___xmls;
		 ::haxe::ds::StringMap _hx___objects;
		 ::haxe::ds::StringMap _hx___byteArrays;
		void dispose();
		::Dynamic dispose_dyn();

		 ::starling::textures::Texture getTexture(::String name);
		::Dynamic getTexture_dyn();

		 ::openfl::_Vector::AbstractVector getTextures(::String prefix, ::openfl::_Vector::AbstractVector out);
		::Dynamic getTextures_dyn();

		 ::openfl::_Vector::AbstractVector getTextureNames(::String prefix, ::openfl::_Vector::AbstractVector out);
		::Dynamic getTextureNames_dyn();

		 ::starling::textures::TextureAtlas getTextureAtlas(::String name);
		::Dynamic getTextureAtlas_dyn();

		 ::openfl::_Vector::AbstractVector getTextureAtlasNames(::String prefix, ::openfl::_Vector::AbstractVector out);
		::Dynamic getTextureAtlasNames_dyn();

		 ::openfl::media::Sound getSound(::String name);
		::Dynamic getSound_dyn();

		 ::openfl::_Vector::AbstractVector getSoundNames(::String prefix, ::openfl::_Vector::AbstractVector out);
		::Dynamic getSoundNames_dyn();

		 ::openfl::media::SoundChannel playSound(::String name,hx::Null< Float >  startTime,hx::Null< int >  loops, ::openfl::media::SoundTransform transform);
		::Dynamic playSound_dyn();

		 ::Xml getXml(::String name);
		::Dynamic getXml_dyn();

		 ::openfl::_Vector::AbstractVector getXmlNames(::String prefix, ::openfl::_Vector::AbstractVector out);
		::Dynamic getXmlNames_dyn();

		 ::Dynamic getObject(::String name);
		::Dynamic getObject_dyn();

		 ::openfl::_Vector::AbstractVector getObjectNames(::String prefix, ::openfl::_Vector::AbstractVector out);
		::Dynamic getObjectNames_dyn();

		 ::openfl::utils::ByteArrayData getByteArray(::String name);
		::Dynamic getByteArray_dyn();

		 ::openfl::_Vector::AbstractVector getByteArrayNames(::String prefix, ::openfl::_Vector::AbstractVector out);
		::Dynamic getByteArrayNames_dyn();

		void addTexture(::String name, ::starling::textures::Texture texture);
		::Dynamic addTexture_dyn();

		void addTextureAtlas(::String name, ::starling::textures::TextureAtlas atlas);
		::Dynamic addTextureAtlas_dyn();

		void addSound(::String name, ::openfl::media::Sound sound);
		::Dynamic addSound_dyn();

		void addXml(::String name, ::Xml xml);
		::Dynamic addXml_dyn();

		void addObject(::String name, ::Dynamic object);
		::Dynamic addObject_dyn();

		void addByteArray(::String name, ::openfl::utils::ByteArrayData byteArray);
		::Dynamic addByteArray_dyn();

		void removeTexture(::String name,hx::Null< bool >  dispose);
		::Dynamic removeTexture_dyn();

		void removeTextureAtlas(::String name,hx::Null< bool >  dispose);
		::Dynamic removeTextureAtlas_dyn();

		void removeSound(::String name);
		::Dynamic removeSound_dyn();

		void removeXml(::String name,hx::Null< bool >  dispose);
		::Dynamic removeXml_dyn();

		void removeObject(::String name);
		::Dynamic removeObject_dyn();

		void removeByteArray(::String name,hx::Null< bool >  dispose);
		::Dynamic removeByteArray_dyn();

		void purgeQueue();
		::Dynamic purgeQueue_dyn();

		void purge();
		::Dynamic purge_dyn();

		void enqueue(::cpp::VirtualArray rawAssets);
		::Dynamic enqueue_dyn();

		::String enqueueWithName( ::Dynamic asset,::String name, ::starling::textures::TextureOptions options);
		::Dynamic enqueueWithName_dyn();

		void loadQueue( ::Dynamic onProgress);
		::Dynamic loadQueue_dyn();

		void processRawAsset(::String name, ::Dynamic rawAsset, ::starling::textures::TextureOptions options, ::openfl::_Vector::AbstractVector xmls, ::Dynamic onProgress, ::Dynamic onComplete);
		::Dynamic processRawAsset_dyn();

		void loadRawAsset( ::Dynamic rawAsset, ::Dynamic onProgress, ::Dynamic onComplete);
		::Dynamic loadRawAsset_dyn();

		::String getName( ::Dynamic rawAsset);
		::Dynamic getName_dyn();

		 ::openfl::utils::ByteArrayData transformData( ::openfl::utils::ByteArrayData data,::String url);
		::Dynamic transformData_dyn();

		void log(::String message);
		::Dynamic log_dyn();

		bool byteArrayStartsWith( ::openfl::utils::ByteArrayData bytes,::String _hx_char);
		::Dynamic byteArrayStartsWith_dyn();

		 ::openfl::_Vector::AbstractVector getDictionaryKeys( ::haxe::ds::StringMap dictionary,::String prefix, ::openfl::_Vector::AbstractVector out);
		::Dynamic getDictionaryKeys_dyn();

		::String getHttpHeader(::cpp::VirtualArray headers,::String headerName);
		::Dynamic getHttpHeader_dyn();

		::String getBasenameFromUrl(::String url);
		::Dynamic getBasenameFromUrl_dyn();

		::String getExtensionFromUrl(::String url);
		::Dynamic getExtensionFromUrl_dyn();

		 ::Dynamic prependCallback( ::Dynamic oldCallback, ::Dynamic newCallback);
		::Dynamic prependCallback_dyn();

		int compare(::String a,::String b);
		::Dynamic compare_dyn();

		::cpp::VirtualArray get_queue();
		::Dynamic get_queue_dyn();

		int get_nu__queuedAssets();
		::Dynamic get_nu__queuedAssets_dyn();

		bool get_verbose();
		::Dynamic get_verbose_dyn();

		bool set_verbose(bool value);
		::Dynamic set_verbose_dyn();

		bool get_isLoading();
		::Dynamic get_isLoading_dyn();

		bool get_useMipMaps();
		::Dynamic get_useMipMaps_dyn();

		bool set_useMipMaps(bool value);
		::Dynamic set_useMipMaps_dyn();

		Float get_scaleFactor();
		::Dynamic get_scaleFactor_dyn();

		Float set_scaleFactor(Float value);
		::Dynamic set_scaleFactor_dyn();

		 ::Dynamic get_textureFormat();
		::Dynamic get_textureFormat_dyn();

		 ::Dynamic set_textureFormat( ::Dynamic value);
		::Dynamic set_textureFormat_dyn();

		bool get_forcePotTextures();
		::Dynamic get_forcePotTextures_dyn();

		bool set_forcePotTextures(bool value);
		::Dynamic set_forcePotTextures_dyn();

		bool get_checkPolicyFile();
		::Dynamic get_checkPolicyFile_dyn();

		bool set_checkPolicyFile(bool value);
		::Dynamic set_checkPolicyFile_dyn();

		bool get_keepAtlasXmls();
		::Dynamic get_keepAtlasXmls_dyn();

		bool set_keepAtlasXmls(bool value);
		::Dynamic set_keepAtlasXmls_dyn();

		bool get_keepFontXmls();
		::Dynamic get_keepFontXmls_dyn();

		bool set_keepFontXmls(bool value);
		::Dynamic set_keepFontXmls_dyn();

		int get_numConnections();
		::Dynamic get_numConnections_dyn();

		int set_numConnections(int value);
		::Dynamic set_numConnections_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_AssetManager */ 
