// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_MathUtil
#define INCLUDED_starling_utils_MathUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,utils,MathUtil)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES MathUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MathUtil_obj OBJ_;
		MathUtil_obj();

	public:
		enum { _hx_ClassId = 0x327c2ccf };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.MathUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.MathUtil"); }

		hx::ObjectPtr< MathUtil_obj > __new() {
			hx::ObjectPtr< MathUtil_obj > __this = new MathUtil_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< MathUtil_obj > __alloc(hx::Ctx *_hx_ctx) {
			MathUtil_obj *__this = (MathUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MathUtil_obj), false, "starling.utils.MathUtil"));
			*(void **)__this = MathUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MathUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MathUtil","\x0a","\x06","\x68","\x71"); }

		static void __boot();
		static Float TWO_PI;
		static  ::openfl::geom::Point intersectLineWithXYPlane( ::openfl::geom::Vector3D pointA, ::openfl::geom::Vector3D pointB, ::openfl::geom::Point out);
		static ::Dynamic intersectLineWithXYPlane_dyn();

		static bool isPointInTriangle( ::openfl::geom::Point p, ::openfl::geom::Point a, ::openfl::geom::Point b, ::openfl::geom::Point c);
		static ::Dynamic isPointInTriangle_dyn();

		static Float normalizeAngle(Float angle);
		static ::Dynamic normalizeAngle_dyn();

		static int getNextPowerOfTwo(Float number);
		static ::Dynamic getNextPowerOfTwo_dyn();

		static bool isEquivalent(Float a,Float b,hx::Null< Float >  epsilon);
		static ::Dynamic isEquivalent_dyn();

		static Float max(Float a,Float b);
		static ::Dynamic max_dyn();

		static Float min(Float a,Float b);
		static ::Dynamic min_dyn();

		static Float clamp(Float value,Float min,Float max);
		static ::Dynamic clamp_dyn();

		static Float minValues(::Array< Float > values);
		static ::Dynamic minValues_dyn();

		static Float deg2rad(Float deg);
		static ::Dynamic deg2rad_dyn();

		static Float rad2deg(Float rad);
		static ::Dynamic rad2deg_dyn();

		static ::String toFixed(Float value,int precision);
		static ::Dynamic toFixed_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_MathUtil */ 
