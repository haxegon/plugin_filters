// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_MeshUtil
#define INCLUDED_starling_utils_MeshUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,rendering,IndexData)
HX_DECLARE_CLASS2(starling,rendering,VertexData)
HX_DECLARE_CLASS2(starling,utils,MeshUtil)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES MeshUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MeshUtil_obj OBJ_;
		MeshUtil_obj();

	public:
		enum { _hx_ClassId = 0x009ee058 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.MeshUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.MeshUtil"); }

		hx::ObjectPtr< MeshUtil_obj > __new() {
			hx::ObjectPtr< MeshUtil_obj > __this = new MeshUtil_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< MeshUtil_obj > __alloc(hx::Ctx *_hx_ctx) {
			MeshUtil_obj *__this = (MeshUtil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MeshUtil_obj), false, "starling.utils.MeshUtil"));
			*(void **)__this = MeshUtil_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MeshUtil_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MeshUtil","\xaf","\x84","\x62","\xb1"); }

		static void __boot();
		static  ::openfl::geom::Vector3D sPoint3D;
		static  ::openfl::geom::Matrix sMatrix;
		static  ::openfl::geom::Matrix3D sMatrix3D;
		static bool containsPoint( ::starling::rendering::VertexData vertexData, ::starling::rendering::IndexData indexData, ::openfl::geom::Point point);
		static ::Dynamic containsPoint_dyn();

		static  ::openfl::geom::Rectangle calculateBounds( ::starling::rendering::VertexData vertexData, ::starling::display::DisplayObject sourceSpace, ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out);
		static ::Dynamic calculateBounds_dyn();

		void MeshUtil();
		::Dynamic MeshUtil_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_MeshUtil */ 
