// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_MeshSubset
#define INCLUDED_starling_utils_MeshSubset

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_d369835e4234f1a7_32_new)
HX_DECLARE_CLASS2(starling,utils,MeshSubset)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES MeshSubset_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef MeshSubset_obj OBJ_;
		MeshSubset_obj();

	public:
		enum { _hx_ClassId = 0x506eabf8 };

		void __construct(hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.MeshSubset")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.MeshSubset"); }

		hx::ObjectPtr< MeshSubset_obj > __new(hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices) {
			hx::ObjectPtr< MeshSubset_obj > __this = new MeshSubset_obj();
			__this->__construct(__o_vertexID,__o_numVertices,__o_indexID,__o_numIndices);
			return __this;
		}

		static hx::ObjectPtr< MeshSubset_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices) {
			MeshSubset_obj *__this = (MeshSubset_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MeshSubset_obj), false, "starling.utils.MeshSubset"));
			*(void **)__this = MeshSubset_obj::_hx_vtable;
{
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
int indexID = __o_indexID.Default(0);
int numIndices = __o_numIndices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d369835e4234f1a7_32_new)
HXDLIN(  32)		( ( ::starling::utils::MeshSubset)(__this) )->setTo(vertexID,numVertices,indexID,numIndices);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MeshSubset_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MeshSubset","\x0f","\x54","\xa5","\x74"); }

		int vertexID;
		int numVertices;
		int indexID;
		int numIndices;
		void setTo(hx::Null< int >  vertexID,hx::Null< int >  numVertices,hx::Null< int >  indexID,hx::Null< int >  numIndices);
		::Dynamic setTo_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_MeshSubset */ 
