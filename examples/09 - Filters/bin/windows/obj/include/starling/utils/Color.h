// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_utils_Color
#define INCLUDED_starling_utils_Color

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(starling,utils,Color)

namespace starling{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Color_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Color_obj OBJ_;
		Color_obj();

	public:
		enum { _hx_ClassId = 0x0261aaee };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="starling.utils.Color")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"starling.utils.Color"); }

		hx::ObjectPtr< Color_obj > __new() {
			hx::ObjectPtr< Color_obj > __this = new Color_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Color_obj > __alloc(hx::Ctx *_hx_ctx) {
			Color_obj *__this = (Color_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Color_obj), false, "starling.utils.Color"));
			*(void **)__this = Color_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Color_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Color","\x43","\xe1","\x89","\xdd"); }

		static void __boot();
		static int WHITE;
		static int SILVER;
		static int GRAY;
		static int BLACK;
		static int RED;
		static int MAROON;
		static int YELLOW;
		static int OLIVE;
		static int LIME;
		static int GREEN;
		static int AQUA;
		static int TEAL;
		static int BLUE;
		static int NAVY;
		static int FUCHSIA;
		static int PURPLE;
		static int getAlpha(int color);
		static ::Dynamic getAlpha_dyn();

		static int getRed(int color);
		static ::Dynamic getRed_dyn();

		static int getGreen(int color);
		static ::Dynamic getGreen_dyn();

		static int getBlue(int color);
		static ::Dynamic getBlue_dyn();

		static int setAlpha(int color,int alpha);
		static ::Dynamic setAlpha_dyn();

		static int setRed(int color,int red);
		static ::Dynamic setRed_dyn();

		static int setGreen(int color,int green);
		static ::Dynamic setGreen_dyn();

		static int setBlue(int color,int blue);
		static ::Dynamic setBlue_dyn();

		static int rgb(int red,int green,int blue);
		static ::Dynamic rgb_dyn();

		static int argb(int alpha,int red,int green,int blue);
		static ::Dynamic argb_dyn();

		static  ::openfl::_Vector::AbstractVector toVector(int color, ::openfl::_Vector::AbstractVector out);
		static ::Dynamic toVector_dyn();

		static int multiply(int color,Float factor);
		static ::Dynamic multiply_dyn();

		static int interpolate(int startColor,int endColor,Float ratio);
		static ::Dynamic interpolate_dyn();

};

} // end namespace starling
} // end namespace utils

#endif /* INCLUDED_starling_utils_Color */ 
