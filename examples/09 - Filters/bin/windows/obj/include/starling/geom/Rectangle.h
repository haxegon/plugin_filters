// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_geom_Rectangle
#define INCLUDED_starling_geom_Rectangle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_geom_ImmutablePolygon
#include <starling/geom/ImmutablePolygon.h>
#endif
HX_DECLARE_CLASS2(starling,geom,ImmutablePolygon)
HX_DECLARE_CLASS2(starling,geom,Polygon)
HX_DECLARE_CLASS2(starling,geom,Rectangle)
HX_DECLARE_CLASS2(starling,rendering,IndexData)

namespace starling{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES Rectangle_obj : public  ::starling::geom::ImmutablePolygon_obj
{
	public:
		typedef  ::starling::geom::ImmutablePolygon_obj super;
		typedef Rectangle_obj OBJ_;
		Rectangle_obj();

	public:
		enum { _hx_ClassId = 0x5683eea7 };

		void __construct(Float x,Float y,Float width,Float height);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.geom.Rectangle")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.geom.Rectangle"); }
		static hx::ObjectPtr< Rectangle_obj > __new(Float x,Float y,Float width,Float height);
		static hx::ObjectPtr< Rectangle_obj > __alloc(hx::Ctx *_hx_ctx,Float x,Float y,Float width,Float height);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Rectangle_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Rectangle","\x0f","\xb4","\x4f","\xbb"); }

		Float _hx___x;
		Float _hx___y;
		Float _hx___width;
		Float _hx___height;
		 ::starling::rendering::IndexData triangulate( ::starling::rendering::IndexData indexData,hx::Null< int >  offset);

		bool contains(Float x,Float y);

		Float get_area();

		bool get_isSimple();

		bool get_isConvex();

};

} // end namespace starling
} // end namespace geom

#endif /* INCLUDED_starling_geom_Rectangle */ 
