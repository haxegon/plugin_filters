// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_geom_Polygon
#define INCLUDED_starling_geom_Polygon

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(starling,geom,Polygon)
HX_DECLARE_CLASS2(starling,rendering,IndexData)
HX_DECLARE_CLASS2(starling,rendering,VertexData)

namespace starling{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES Polygon_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Polygon_obj OBJ_;
		Polygon_obj();

	public:
		enum { _hx_ClassId = 0x481a82d6 };

		void __construct(::cpp::VirtualArray vertices);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.geom.Polygon")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.geom.Polygon"); }
		static hx::ObjectPtr< Polygon_obj > __new(::cpp::VirtualArray vertices);
		static hx::ObjectPtr< Polygon_obj > __alloc(hx::Ctx *_hx_ctx,::cpp::VirtualArray vertices);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Polygon_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Polygon","\x5a","\x2a","\xe2","\xdf"); }

		static void __boot();
		static  ::openfl::_Vector::AbstractVector sRestIndices;
		static  ::starling::geom::Polygon createEllipse(Float x,Float y,Float radiusX,Float radiusY,hx::Null< int >  numSides);
		static ::Dynamic createEllipse_dyn();

		static  ::starling::geom::Polygon createCircle(Float x,Float y,Float radius,hx::Null< int >  numSides);
		static ::Dynamic createCircle_dyn();

		static  ::starling::geom::Polygon createRectangle(Float x,Float y,Float width,Float height);
		static ::Dynamic createRectangle_dyn();

		static bool isConvexTriangle(Float ax,Float ay,Float bx,Float by,Float cx,Float cy);
		static ::Dynamic isConvexTriangle_dyn();

		static bool areVectorsIntersecting(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy);
		static ::Dynamic areVectorsIntersecting_dyn();

		 ::openfl::_Vector::AbstractVector _hx___coords;
		 ::starling::geom::Polygon clone();
		::Dynamic clone_dyn();

		virtual void reverse();
		::Dynamic reverse_dyn();

		virtual void addVertices(::cpp::VirtualArray args);
		::Dynamic addVertices_dyn();

		virtual void setVertex(int index,Float x,Float y);
		::Dynamic setVertex_dyn();

		 ::openfl::geom::Point getVertex(int index, ::openfl::geom::Point out);
		::Dynamic getVertex_dyn();

		virtual bool contains(Float x,Float y);
		::Dynamic contains_dyn();

		bool containsPoint( ::openfl::geom::Point point);
		::Dynamic containsPoint_dyn();

		virtual  ::starling::rendering::IndexData triangulate( ::starling::rendering::IndexData indexData,hx::Null< int >  offset);
		::Dynamic triangulate_dyn();

		void copyToVertexData( ::starling::rendering::VertexData target,hx::Null< int >  targetVertexID,::String attrName);
		::Dynamic copyToVertexData_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		virtual bool get_isSimple();
		::Dynamic get_isSimple_dyn();

		virtual bool get_isConvex();
		::Dynamic get_isConvex_dyn();

		virtual Float get_area();
		::Dynamic get_area_dyn();

		int get_numVertices();
		::Dynamic get_numVertices_dyn();

		virtual int set_numVertices(int value);
		::Dynamic set_numVertices_dyn();

		int get_numTriangles();
		::Dynamic get_numTriangles_dyn();

};

} // end namespace starling
} // end namespace geom

#endif /* INCLUDED_starling_geom_Polygon */ 
