// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_display_DisplayObject
#define INCLUDED_starling_display_DisplayObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,events,TouchEvent)
HX_DECLARE_CLASS2(starling,filters,FragmentFilter)
HX_DECLARE_CLASS2(starling,rendering,BatchToken)
HX_DECLARE_CLASS2(starling,rendering,Painter)

namespace starling{
namespace display{


class HXCPP_CLASS_ATTRIBUTES DisplayObject_obj : public  ::starling::events::EventDispatcher_obj
{
	public:
		typedef  ::starling::events::EventDispatcher_obj super;
		typedef DisplayObject_obj OBJ_;
		DisplayObject_obj();

	public:
		enum { _hx_ClassId = 0x6dea180f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display.DisplayObject")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display.DisplayObject"); }
		static hx::ObjectPtr< DisplayObject_obj > __new();
		static hx::ObjectPtr< DisplayObject_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DisplayObject_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("DisplayObject","\x81","\x8a","\x92","\x1e"); }

		static void __boot();
		static  ::openfl::_Vector::AbstractVector sAncestors;
		static  ::openfl::geom::Point sHelperPoint;
		static  ::openfl::geom::Vector3D sHelperPoint3D;
		static  ::openfl::geom::Vector3D sHelperPointAlt3D;
		static  ::openfl::geom::Rectangle sHelperRect;
		static  ::openfl::geom::Matrix sHelperMatrix;
		static  ::openfl::geom::Matrix sHelperMatrixAlt;
		static  ::openfl::geom::Matrix3D sHelperMatrix3D;
		static  ::openfl::geom::Matrix3D sHelperMatrixAlt3D;
		static bool sMaskWarningShown;
		static  ::starling::display::DisplayObject _hx___findCommonParent( ::starling::display::DisplayObject object1, ::starling::display::DisplayObject object2);
		static ::Dynamic _hx___findCommonParent_dyn();

		Float _hx___x;
		Float _hx___y;
		Float _hx___pivotX;
		Float _hx___pivotY;
		Float _hx___scaleX;
		Float _hx___scaleY;
		Float _hx___skewX;
		Float _hx___skewY;
		Float _hx___rotation;
		Float _hx___alpha;
		bool _hx___visible;
		bool _hx___touchable;
		::String _hx___blendMode;
		::String _hx___name;
		bool _hx___useHandCursor;
		 ::openfl::geom::Matrix _hx___transformationMatrix;
		 ::openfl::geom::Matrix3D _hx___transformationMatrix3D;
		bool _hx___transformationChanged;
		bool _hx___is3D;
		 ::starling::display::DisplayObject _hx___maskee;
		bool _hx___maskInverted;
		 ::starling::display::DisplayObjectContainer _hx___parent;
		int _hx___lastParentOrSelfChangeFrameID;
		int _hx___lastChildChangeFrameID;
		int _hx___tokenFrameID;
		 ::starling::rendering::BatchToken _hx___pushToken;
		 ::starling::rendering::BatchToken _hx___popToken;
		bool _hx___hasVisibleArea;
		 ::starling::filters::FragmentFilter __filter;
		 ::starling::display::DisplayObject _hx___mask;
		virtual void dispose();
		::Dynamic dispose_dyn();

		void removeFromParent(hx::Null< bool >  dispose);
		::Dynamic removeFromParent_dyn();

		 ::openfl::geom::Matrix getTransformationMatrix( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Matrix out);
		::Dynamic getTransformationMatrix_dyn();

		virtual  ::openfl::geom::Rectangle getBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out);
		::Dynamic getBounds_dyn();

		virtual  ::starling::display::DisplayObject hitTest( ::openfl::geom::Point localPoint);
		::Dynamic hitTest_dyn();

		bool hitTestMask( ::openfl::geom::Point localPoint);
		::Dynamic hitTestMask_dyn();

		 ::openfl::geom::Point localToGlobal( ::openfl::geom::Point localPoint, ::openfl::geom::Point out);
		::Dynamic localToGlobal_dyn();

		 ::openfl::geom::Point globalToLocal( ::openfl::geom::Point globalPoint, ::openfl::geom::Point out);
		::Dynamic globalToLocal_dyn();

		virtual void render( ::starling::rendering::Painter painter);
		::Dynamic render_dyn();

		void alignPivot(::String horizontalAlign,::String verticalAlign);
		::Dynamic alignPivot_dyn();

		 ::openfl::display::BitmapData drawToBitmapData( ::openfl::display::BitmapData out,hx::Null< int >  color,hx::Null< Float >  alpha);
		::Dynamic drawToBitmapData_dyn();

		 ::openfl::geom::Matrix3D getTransformationMatrix3D( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Matrix3D out);
		::Dynamic getTransformationMatrix3D_dyn();

		 ::openfl::geom::Point local3DToGlobal( ::openfl::geom::Vector3D localPoint, ::openfl::geom::Point out);
		::Dynamic local3DToGlobal_dyn();

		 ::openfl::geom::Vector3D globalToLocal3D( ::openfl::geom::Point globalPoint, ::openfl::geom::Vector3D out);
		::Dynamic globalToLocal3D_dyn();

		void _hx___setParent( ::starling::display::DisplayObjectContainer value);
		::Dynamic _hx___setParent_dyn();

		void _hx___setIs3D(bool value);
		::Dynamic _hx___setIs3D_dyn();

		bool get_isMask();
		::Dynamic get_isMask_dyn();

		void setRequiresRedraw();
		::Dynamic setRequiresRedraw_dyn();

		bool get_requiresRedraw();
		::Dynamic get_requiresRedraw_dyn();

		void excludeFromCache();
		::Dynamic excludeFromCache_dyn();

		void _hx___setTransformationChanged();
		::Dynamic _hx___setTransformationChanged_dyn();

		void _hx___updateTransformationMatrices(Float x,Float y,Float pivotX,Float pivotY,Float scaleX,Float scaleY,Float skewX,Float skewY,Float rotation, ::openfl::geom::Matrix out, ::openfl::geom::Matrix3D out3D);
		::Dynamic _hx___updateTransformationMatrices_dyn();

		void dispatchEvent( ::starling::events::Event event);

		void addEventListener(::String type, ::Dynamic listener);

		void removeEventListener(::String type, ::Dynamic listener);

		void removeEventListeners(::String type);

		void _hx___addEnterFrameListenerToStage( ::starling::events::Event e);
		::Dynamic _hx___addEnterFrameListenerToStage_dyn();

		void _hx___removeEnterFrameListenerFromStage( ::starling::events::Event e);
		::Dynamic _hx___removeEnterFrameListenerFromStage_dyn();

		 ::openfl::geom::Matrix get_transformationMatrix();
		::Dynamic get_transformationMatrix_dyn();

		 ::openfl::geom::Matrix set_transformationMatrix( ::openfl::geom::Matrix matrix);
		::Dynamic set_transformationMatrix_dyn();

		 ::openfl::geom::Matrix3D get_transformationMatrix3D();
		::Dynamic get_transformationMatrix3D_dyn();

		bool get_is3D();
		::Dynamic get_is3D_dyn();

		bool get_useHandCursor();
		::Dynamic get_useHandCursor_dyn();

		bool set_useHandCursor(bool value);
		::Dynamic set_useHandCursor_dyn();

		void _hx___onTouch( ::starling::events::TouchEvent event);
		::Dynamic _hx___onTouch_dyn();

		 ::openfl::geom::Rectangle get_bounds();
		::Dynamic get_bounds_dyn();

		Float get_width();
		::Dynamic get_width_dyn();

		virtual Float set_width(Float value);
		::Dynamic set_width_dyn();

		Float get_height();
		::Dynamic get_height_dyn();

		virtual Float set_height(Float value);
		::Dynamic set_height_dyn();

		Float get_x();
		::Dynamic get_x_dyn();

		virtual Float set_x(Float value);
		::Dynamic set_x_dyn();

		Float get_y();
		::Dynamic get_y_dyn();

		virtual Float set_y(Float value);
		::Dynamic set_y_dyn();

		Float get_pivotX();
		::Dynamic get_pivotX_dyn();

		Float set_pivotX(Float value);
		::Dynamic set_pivotX_dyn();

		Float get_pivotY();
		::Dynamic get_pivotY_dyn();

		Float set_pivotY(Float value);
		::Dynamic set_pivotY_dyn();

		Float get_scaleX();
		::Dynamic get_scaleX_dyn();

		virtual Float set_scaleX(Float value);
		::Dynamic set_scaleX_dyn();

		Float get_scaleY();
		::Dynamic get_scaleY_dyn();

		virtual Float set_scaleY(Float value);
		::Dynamic set_scaleY_dyn();

		Float get_scale();
		::Dynamic get_scale_dyn();

		Float set_scale(Float value);
		::Dynamic set_scale_dyn();

		Float get_skewX();
		::Dynamic get_skewX_dyn();

		virtual Float set_skewX(Float value);
		::Dynamic set_skewX_dyn();

		Float get_skewY();
		::Dynamic get_skewY_dyn();

		virtual Float set_skewY(Float value);
		::Dynamic set_skewY_dyn();

		Float get_rotation();
		::Dynamic get_rotation_dyn();

		virtual Float set_rotation(Float value);
		::Dynamic set_rotation_dyn();

		bool get_isRotated();
		::Dynamic get_isRotated_dyn();

		Float get_alpha();
		::Dynamic get_alpha_dyn();

		Float set_alpha(Float value);
		::Dynamic set_alpha_dyn();

		bool get_visible();
		::Dynamic get_visible_dyn();

		bool set_visible(bool value);
		::Dynamic set_visible_dyn();

		bool get_touchable();
		::Dynamic get_touchable_dyn();

		bool set_touchable(bool value);
		::Dynamic set_touchable_dyn();

		::String get_blendMode();
		::Dynamic get_blendMode_dyn();

		::String set_blendMode(::String value);
		::Dynamic set_blendMode_dyn();

		::String get_name();
		::Dynamic get_name_dyn();

		::String set_name(::String value);
		::Dynamic set_name_dyn();

		 ::starling::filters::FragmentFilter get_filter();
		::Dynamic get_filter_dyn();

		virtual  ::starling::filters::FragmentFilter set_filter( ::starling::filters::FragmentFilter value);
		::Dynamic set_filter_dyn();

		 ::starling::display::DisplayObject get_mask();
		::Dynamic get_mask_dyn();

		 ::starling::display::DisplayObject set_mask( ::starling::display::DisplayObject value);
		::Dynamic set_mask_dyn();

		bool get_maskInverted();
		::Dynamic get_maskInverted_dyn();

		bool set_maskInverted(bool value);
		::Dynamic set_maskInverted_dyn();

		 ::starling::display::DisplayObjectContainer get_parent();
		::Dynamic get_parent_dyn();

		 ::starling::display::DisplayObject get_base();
		::Dynamic get_base_dyn();

		 ::starling::display::DisplayObject get_root();
		::Dynamic get_root_dyn();

		 ::starling::display::Stage get_stage();
		::Dynamic get_stage_dyn();

};

} // end namespace starling
} // end namespace display

#endif /* INCLUDED_starling_display_DisplayObject */ 
