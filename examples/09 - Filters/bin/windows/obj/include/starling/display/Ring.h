// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_display_Ring
#define INCLUDED_starling_display_Ring

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,Poly4)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,display,Ring)
HX_DECLARE_CLASS2(starling,display,Sprite)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)

namespace starling{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Ring_obj : public  ::starling::display::Sprite_obj
{
	public:
		typedef  ::starling::display::Sprite_obj super;
		typedef Ring_obj OBJ_;
		Ring_obj();

	public:
		enum { _hx_ClassId = 0x403ccfca };

		void __construct(Float xoff,Float yoff,Float innerRadius,Float outerRadius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display.Ring")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display.Ring"); }
		static hx::ObjectPtr< Ring_obj > __new(Float xoff,Float yoff,Float innerRadius,Float outerRadius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle);
		static hx::ObjectPtr< Ring_obj > __alloc(hx::Ctx *_hx_ctx,Float xoff,Float yoff,Float innerRadius,Float outerRadius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Ring_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Ring","\xd0","\x8b","\x83","\x36"); }

		Float _innerRadius;
		Float _outerRadius;
		Float _outerRadius2;
		::Array< ::Dynamic> _polygons;
		void setpolycolor(int value);
		::Dynamic setpolycolor_dyn();

};

} // end namespace starling
} // end namespace display

#endif /* INCLUDED_starling_display_Ring */ 
