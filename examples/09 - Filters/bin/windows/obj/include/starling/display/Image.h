// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_display_Image
#define INCLUDED_starling_display_Image

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Image)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,textures,Texture)
HX_DECLARE_CLASS2(starling,utils,Padding)

namespace starling{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Image_obj : public  ::starling::display::Quad_obj
{
	public:
		typedef  ::starling::display::Quad_obj super;
		typedef Image_obj OBJ_;
		Image_obj();

	public:
		enum { _hx_ClassId = 0x4fcbd265 };

		void __construct( ::starling::textures::Texture texture);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display.Image")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display.Image"); }
		static hx::ObjectPtr< Image_obj > __new( ::starling::textures::Texture texture);
		static hx::ObjectPtr< Image_obj > __alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture texture);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Image_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Image","\x3b","\x8f","\x96","\x50"); }

		static void __boot();
		static  ::haxe::ds::ObjectMap sSetupFunctions;
		static  ::starling::utils::Padding sPadding;
		static  ::openfl::geom::Rectangle sBounds;
		static  ::openfl::_Vector::AbstractVector sBasCols;
		static  ::openfl::_Vector::AbstractVector sBasRows;
		static  ::openfl::_Vector::AbstractVector sPosCols;
		static  ::openfl::_Vector::AbstractVector sPosRows;
		static  ::openfl::_Vector::AbstractVector sTexCols;
		static  ::openfl::_Vector::AbstractVector sTexRows;
		static void automateSetupForTexture( ::starling::textures::Texture texture, ::Dynamic onAssign, ::Dynamic onRelease);
		static ::Dynamic automateSetupForTexture_dyn();

		static void resetSetupForTexture( ::starling::textures::Texture texture);
		static ::Dynamic resetSetupForTexture_dyn();

		static void bindScale9GridToTexture( ::starling::textures::Texture texture, ::openfl::geom::Rectangle scale9Grid);
		static ::Dynamic bindScale9GridToTexture_dyn();

		static void bindPivotPointToTexture( ::starling::textures::Texture texture,Float pivotX,Float pivotY);
		static ::Dynamic bindPivotPointToTexture_dyn();

		 ::openfl::geom::Rectangle _hx___scale9Grid;
		 ::openfl::geom::Rectangle _hx___tileGrid;
		 ::openfl::geom::Rectangle get_scale9Grid();
		::Dynamic get_scale9Grid_dyn();

		 ::openfl::geom::Rectangle set_scale9Grid( ::openfl::geom::Rectangle value);
		::Dynamic set_scale9Grid_dyn();

		 ::openfl::geom::Rectangle get_tileGrid();
		::Dynamic get_tileGrid_dyn();

		 ::openfl::geom::Rectangle set_tileGrid( ::openfl::geom::Rectangle value);
		::Dynamic set_tileGrid_dyn();

		void _hx___setupVertices();

		Float set_scaleX(Float value);

		Float set_scaleY(Float value);

		 ::starling::textures::Texture set_texture( ::starling::textures::Texture value);

		void _hx___setupScale9Grid();
		::Dynamic _hx___setupScale9Grid_dyn();

		int _hx___setupScale9GridAttributes(Float startX,Float startY, ::openfl::_Vector::AbstractVector posCols, ::openfl::_Vector::AbstractVector posRows, ::openfl::_Vector::AbstractVector texCols, ::openfl::_Vector::AbstractVector texRows);
		::Dynamic _hx___setupScale9GridAttributes_dyn();

		void _hx___setupTileGrid();
		::Dynamic _hx___setupTileGrid_dyn();

};

} // end namespace starling
} // end namespace display

#endif /* INCLUDED_starling_display_Image */ 
