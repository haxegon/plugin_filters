// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_display_Poly4
#define INCLUDED_starling_display_Poly4

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,Poly4)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)

namespace starling{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Poly4_obj : public  ::starling::display::Quad_obj
{
	public:
		typedef  ::starling::display::Quad_obj super;
		typedef Poly4_obj OBJ_;
		Poly4_obj();

	public:
		enum { _hx_ClassId = 0x58f4b772 };

		void __construct(hx::Null< Float >  __o_x1,hx::Null< Float >  __o_y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2,hx::Null< Float >  __o_x3,hx::Null< Float >  __o_y3,hx::Null< Float >  __o_x4,hx::Null< Float >  __o_y4,hx::Null< int >  __o_color);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display.Poly4")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display.Poly4"); }
		static hx::ObjectPtr< Poly4_obj > __new(hx::Null< Float >  __o_x1,hx::Null< Float >  __o_y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2,hx::Null< Float >  __o_x3,hx::Null< Float >  __o_y3,hx::Null< Float >  __o_x4,hx::Null< Float >  __o_y4,hx::Null< int >  __o_color);
		static hx::ObjectPtr< Poly4_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x1,hx::Null< Float >  __o_y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2,hx::Null< Float >  __o_x3,hx::Null< Float >  __o_y3,hx::Null< Float >  __o_x4,hx::Null< Float >  __o_y4,hx::Null< int >  __o_color);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Poly4_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Poly4","\x48","\x74","\xbf","\x59"); }

		 ::openfl::geom::Point p1;
		 ::openfl::geom::Point p2;
		 ::openfl::geom::Point p3;
		 ::openfl::geom::Point p4;
		Float xmin;
		Float xmax;
		Float ymin;
		Float ymax;
		void setVertexPositions(hx::Null< Float >  x1,hx::Null< Float >  y1,hx::Null< Float >  x2,hx::Null< Float >  y2,hx::Null< Float >  x3,hx::Null< Float >  y3,hx::Null< Float >  x4,hx::Null< Float >  y4);
		::Dynamic setVertexPositions_dyn();

		 ::openfl::geom::Point _lowerRight;
		Float min4(Float a,Float b,Float c,Float d);
		::Dynamic min4_dyn();

		Float max4(Float a,Float b,Float c,Float d);
		::Dynamic max4_dyn();

		 ::openfl::geom::Rectangle getBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle resultRect);

};

} // end namespace starling
} // end namespace display

#endif /* INCLUDED_starling_display_Poly4 */ 
