// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_display_Mesh
#define INCLUDED_starling_display_Mesh

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,geom,Polygon)
HX_DECLARE_CLASS2(starling,rendering,IndexData)
HX_DECLARE_CLASS2(starling,rendering,Painter)
HX_DECLARE_CLASS2(starling,rendering,VertexData)
HX_DECLARE_CLASS2(starling,rendering,VertexDataFormat)
HX_DECLARE_CLASS2(starling,styles,MeshStyle)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Mesh_obj : public  ::starling::display::DisplayObject_obj
{
	public:
		typedef  ::starling::display::DisplayObject_obj super;
		typedef Mesh_obj OBJ_;
		Mesh_obj();

	public:
		enum { _hx_ClassId = 0x3cebba07 };

		void __construct( ::starling::rendering::VertexData vertexData, ::starling::rendering::IndexData indexData, ::starling::styles::MeshStyle style);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display.Mesh")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display.Mesh"); }
		static hx::ObjectPtr< Mesh_obj > __new( ::starling::rendering::VertexData vertexData, ::starling::rendering::IndexData indexData, ::starling::styles::MeshStyle style);
		static hx::ObjectPtr< Mesh_obj > __alloc(hx::Ctx *_hx_ctx, ::starling::rendering::VertexData vertexData, ::starling::rendering::IndexData indexData, ::starling::styles::MeshStyle style);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Mesh_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Mesh","\x0d","\x76","\x32","\x33"); }

		static void __boot();
		static hx::Class sDefaultStyle;
		static  ::Dynamic sDefaultStyleFactory;
		static Dynamic sDefaultStyleFactory_dyn() { return sDefaultStyleFactory;}
		static hx::Class get_defaultStyle();
		static ::Dynamic get_defaultStyle_dyn();

		static hx::Class set_defaultStyle(hx::Class value);
		static ::Dynamic set_defaultStyle_dyn();

		static  ::Dynamic get_defaultStyleFactory();
		static ::Dynamic get_defaultStyleFactory_dyn();

		static  ::Dynamic set_defaultStyleFactory( ::Dynamic value);
		static ::Dynamic set_defaultStyleFactory_dyn();

		static  ::starling::display::Mesh fromPolygon( ::starling::geom::Polygon polygon, ::starling::styles::MeshStyle style);
		static ::Dynamic fromPolygon_dyn();

		 ::starling::styles::MeshStyle _hx___style;
		 ::starling::rendering::VertexData _hx___vertexData;
		 ::starling::rendering::IndexData _hx___indexData;
		bool _hx___pixelSnapping;
		virtual void dispose();

		virtual  ::starling::display::DisplayObject hitTest( ::openfl::geom::Point localPoint);

		virtual  ::openfl::geom::Rectangle getBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out);

		virtual void render( ::starling::rendering::Painter painter);

		virtual void setStyle( ::starling::styles::MeshStyle meshStyle,hx::Null< bool >  mergeWithPredecessor);
		::Dynamic setStyle_dyn();

		 ::starling::styles::MeshStyle _hx___createDefaultMeshStyle();
		::Dynamic _hx___createDefaultMeshStyle_dyn();

		virtual void setVertexDataChanged();
		::Dynamic setVertexDataChanged_dyn();

		virtual void setIndexDataChanged();
		::Dynamic setIndexDataChanged_dyn();

		 ::openfl::geom::Point getVertexPosition(int vertexID, ::openfl::geom::Point out);
		::Dynamic getVertexPosition_dyn();

		void setVertexPosition(int vertexID,Float x,Float y);
		::Dynamic setVertexPosition_dyn();

		Float getVertexAlpha(int vertexID);
		::Dynamic getVertexAlpha_dyn();

		void setVertexAlpha(int vertexID,Float alpha);
		::Dynamic setVertexAlpha_dyn();

		int getVertexColor(int vertexID);
		::Dynamic getVertexColor_dyn();

		void setVertexColor(int vertexID,int color);
		::Dynamic setVertexColor_dyn();

		 ::openfl::geom::Point getTexCoords(int vertexID, ::openfl::geom::Point out);
		::Dynamic getTexCoords_dyn();

		void setTexCoords(int vertexID,Float u,Float v);
		::Dynamic setTexCoords_dyn();

		 ::starling::rendering::VertexData get_vertexData();
		::Dynamic get_vertexData_dyn();

		 ::starling::rendering::IndexData get_indexData();
		::Dynamic get_indexData_dyn();

		 ::starling::styles::MeshStyle get_style();
		::Dynamic get_style_dyn();

		 ::starling::styles::MeshStyle set_style( ::starling::styles::MeshStyle value);
		::Dynamic set_style_dyn();

		 ::starling::textures::Texture get_texture();
		::Dynamic get_texture_dyn();

		virtual  ::starling::textures::Texture set_texture( ::starling::textures::Texture value);
		::Dynamic set_texture_dyn();

		int get_color();
		::Dynamic get_color_dyn();

		int set_color(int value);
		::Dynamic set_color_dyn();

		::String get_textureSmoothing();
		::Dynamic get_textureSmoothing_dyn();

		::String set_textureSmoothing(::String value);
		::Dynamic set_textureSmoothing_dyn();

		bool get_textureRepeat();
		::Dynamic get_textureRepeat_dyn();

		bool set_textureRepeat(bool value);
		::Dynamic set_textureRepeat_dyn();

		bool get_pixelSnapping();
		::Dynamic get_pixelSnapping_dyn();

		bool set_pixelSnapping(bool value);
		::Dynamic set_pixelSnapping_dyn();

		int get_numVertices();
		::Dynamic get_numVertices_dyn();

		int get_numIndices();
		::Dynamic get_numIndices_dyn();

		int get_numTriangles();
		::Dynamic get_numTriangles_dyn();

		 ::starling::rendering::VertexDataFormat get_vertexFormat();
		::Dynamic get_vertexFormat_dyn();

};

} // end namespace starling
} // end namespace display

#endif /* INCLUDED_starling_display_Mesh */ 
