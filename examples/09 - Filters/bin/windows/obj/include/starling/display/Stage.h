// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_display_Stage
#define INCLUDED_starling_display_Stage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,core,Starling)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,EnterFrameEvent)
HX_DECLARE_CLASS2(starling,events,Event)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,filters,FragmentFilter)

namespace starling{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Stage_obj : public  ::starling::display::DisplayObjectContainer_obj
{
	public:
		typedef  ::starling::display::DisplayObjectContainer_obj super;
		typedef Stage_obj OBJ_;
		Stage_obj();

	public:
		enum { _hx_ClassId = 0x166e1dc8 };

		void __construct(int width,int height,hx::Null< int >  __o_color);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display.Stage")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display.Stage"); }
		static hx::ObjectPtr< Stage_obj > __new(int width,int height,hx::Null< int >  __o_color);
		static hx::ObjectPtr< Stage_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< int >  __o_color);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Stage_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Stage","\x9e","\xda","\x38","\x17"); }

		static void __boot();
		static  ::openfl::geom::Matrix sMatrix;
		static  ::openfl::geom::Matrix3D sMatrix3D;
		int _hx___width;
		int _hx___height;
		int _hx___color;
		Float _hx___fieldOfView;
		 ::openfl::geom::Point _hx___projectionOffset;
		 ::openfl::geom::Vector3D _hx___cameraPosition;
		 ::starling::events::EnterFrameEvent _hx___enterFrameEvent;
		 ::openfl::_Vector::AbstractVector _hx___enterFrameListeners;
		void advanceTime(Float passedTime);
		::Dynamic advanceTime_dyn();

		 ::starling::display::DisplayObject hitTest( ::openfl::geom::Point localPoint);

		 ::openfl::geom::Rectangle getStageBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out);
		::Dynamic getStageBounds_dyn();

		 ::openfl::geom::Vector3D getCameraPosition( ::starling::display::DisplayObject space, ::openfl::geom::Vector3D out);
		::Dynamic getCameraPosition_dyn();

		void addEnterFrameListener( ::starling::display::DisplayObject listener);
		::Dynamic addEnterFrameListener_dyn();

		void removeEnterFrameListener( ::starling::display::DisplayObject listener);
		::Dynamic removeEnterFrameListener_dyn();

		void _hx___getChildEventListeners( ::starling::display::DisplayObject object,::String eventType, ::openfl::_Vector::AbstractVector listeners);

		Float set_width(Float value);

		Float set_height(Float value);

		Float set_x(Float value);

		Float set_y(Float value);

		Float set_scaleX(Float value);

		Float set_scaleY(Float value);

		Float set_rotation(Float value);

		Float set_skewX(Float value);

		Float set_skewY(Float value);

		 ::starling::filters::FragmentFilter set_filter( ::starling::filters::FragmentFilter value);

		int get_color();
		::Dynamic get_color_dyn();

		int set_color(int value);
		::Dynamic set_color_dyn();

		int get_stageWidth();
		::Dynamic get_stageWidth_dyn();

		int set_stageWidth(int value);
		::Dynamic set_stageWidth_dyn();

		int get_stageHeight();
		::Dynamic get_stageHeight_dyn();

		int set_stageHeight(int value);
		::Dynamic set_stageHeight_dyn();

		 ::starling::core::Starling get_starling();
		::Dynamic get_starling_dyn();

		Float get_focalLength();
		::Dynamic get_focalLength_dyn();

		Float set_focalLength(Float value);
		::Dynamic set_focalLength_dyn();

		Float get_fieldOfView();
		::Dynamic get_fieldOfView_dyn();

		Float set_fieldOfView(Float value);
		::Dynamic set_fieldOfView_dyn();

		 ::openfl::geom::Point get_projectionOffset();
		::Dynamic get_projectionOffset_dyn();

		 ::openfl::geom::Point set_projectionOffset( ::openfl::geom::Point value);
		::Dynamic set_projectionOffset_dyn();

		 ::openfl::geom::Vector3D get_cameraPosition();
		::Dynamic get_cameraPosition_dyn();

};

} // end namespace starling
} // end namespace display

#endif /* INCLUDED_starling_display_Stage */ 
