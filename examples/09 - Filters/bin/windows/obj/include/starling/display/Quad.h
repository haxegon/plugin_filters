// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_display_Quad
#define INCLUDED_starling_display_Quad

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Matrix3D)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,geom,Vector3D)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Quad_obj : public  ::starling::display::Mesh_obj
{
	public:
		typedef  ::starling::display::Mesh_obj super;
		typedef Quad_obj OBJ_;
		Quad_obj();

	public:
		enum { _hx_ClassId = 0x3f9ca8e1 };

		void __construct(Float width,Float height,hx::Null< int >  __o_color);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.display.Quad")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.display.Quad"); }
		static hx::ObjectPtr< Quad_obj > __new(Float width,Float height,hx::Null< int >  __o_color);
		static hx::ObjectPtr< Quad_obj > __alloc(hx::Ctx *_hx_ctx,Float width,Float height,hx::Null< int >  __o_color);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Quad_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Quad","\xe7","\x64","\xe3","\x35"); }

		static void __boot();
		static  ::openfl::geom::Vector3D sPoint3D;
		static  ::openfl::geom::Matrix sMatrix;
		static  ::openfl::geom::Matrix3D sMatrix3D;
		static  ::starling::display::Quad fromTexture( ::starling::textures::Texture texture);
		static ::Dynamic fromTexture_dyn();

		 ::openfl::geom::Rectangle _hx___bounds;
		virtual void _hx___setupVertices();
		::Dynamic _hx___setupVertices_dyn();

		virtual  ::openfl::geom::Rectangle getBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out);

		 ::starling::display::DisplayObject hitTest( ::openfl::geom::Point localPoint);

		void readjustSize(hx::Null< Float >  width,hx::Null< Float >  height);
		::Dynamic readjustSize_dyn();

		virtual  ::starling::textures::Texture set_texture( ::starling::textures::Texture value);

};

} // end namespace starling
} // end namespace display

#endif /* INCLUDED_starling_display_Quad */ 
