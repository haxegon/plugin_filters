// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_textures_TextureAtlas
#define INCLUDED_starling_textures_TextureAtlas

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,textures,Texture)
HX_DECLARE_CLASS2(starling,textures,TextureAtlas)

namespace starling{
namespace textures{


class HXCPP_CLASS_ATTRIBUTES TextureAtlas_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TextureAtlas_obj OBJ_;
		TextureAtlas_obj();

	public:
		enum { _hx_ClassId = 0x53e99b3c };

		void __construct( ::starling::textures::Texture texture, ::Xml atlasXml);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.textures.TextureAtlas")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.textures.TextureAtlas"); }
		static hx::ObjectPtr< TextureAtlas_obj > __new( ::starling::textures::Texture texture, ::Xml atlasXml);
		static hx::ObjectPtr< TextureAtlas_obj > __alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture texture, ::Xml atlasXml);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TextureAtlas_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TextureAtlas","\x90","\x46","\x8f","\xe7"); }

		static void __boot();
		static  ::openfl::_Vector::AbstractVector sNames;
		static bool parseBool(::String value);
		static ::Dynamic parseBool_dyn();

		 ::starling::textures::Texture _hx___atlasTexture;
		 ::haxe::ds::StringMap _hx___subTextures;
		 ::openfl::_Vector::AbstractVector _hx___subTextureNames;
		void dispose();
		::Dynamic dispose_dyn();

		Float getXmlFloat( ::Xml xml,::String attributeName);
		::Dynamic getXmlFloat_dyn();

		void parseAtlasXml( ::Xml atlasXml);
		::Dynamic parseAtlasXml_dyn();

		 ::starling::textures::Texture getTexture(::String name);
		::Dynamic getTexture_dyn();

		 ::openfl::_Vector::AbstractVector getTextures(::String prefix, ::openfl::_Vector::AbstractVector result);
		::Dynamic getTextures_dyn();

		 ::openfl::_Vector::AbstractVector getNames(::String prefix, ::openfl::_Vector::AbstractVector result);
		::Dynamic getNames_dyn();

		 ::openfl::geom::Rectangle getRegion(::String name);
		::Dynamic getRegion_dyn();

		 ::openfl::geom::Rectangle getFrame(::String name);
		::Dynamic getFrame_dyn();

		bool getRotation(::String name);
		::Dynamic getRotation_dyn();

		void addRegion(::String name, ::openfl::geom::Rectangle region, ::openfl::geom::Rectangle frame,hx::Null< bool >  rotated);
		::Dynamic addRegion_dyn();

		void removeRegion(::String name);
		::Dynamic removeRegion_dyn();

		 ::starling::textures::Texture get_texture();
		::Dynamic get_texture_dyn();

		int compare(::String a,::String b);
		::Dynamic compare_dyn();

};

} // end namespace starling
} // end namespace textures

#endif /* INCLUDED_starling_textures_TextureAtlas */ 
