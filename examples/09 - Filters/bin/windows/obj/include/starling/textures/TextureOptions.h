// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_textures_TextureOptions
#define INCLUDED_starling_textures_TextureOptions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(starling,textures,Texture)
HX_DECLARE_CLASS2(starling,textures,TextureOptions)

namespace starling{
namespace textures{


class HXCPP_CLASS_ATTRIBUTES TextureOptions_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TextureOptions_obj OBJ_;
		TextureOptions_obj();

	public:
		enum { _hx_ClassId = 0x11bacb63 };

		void __construct(hx::Null< Float >  __o_scale,hx::Null< bool >  __o_mipMapping,::String __o_format,hx::Null< bool >  __o_premultipliedAlpha,hx::Null< bool >  __o_forcePotTexture);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.textures.TextureOptions")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.textures.TextureOptions"); }
		static hx::ObjectPtr< TextureOptions_obj > __new(hx::Null< Float >  __o_scale,hx::Null< bool >  __o_mipMapping,::String __o_format,hx::Null< bool >  __o_premultipliedAlpha,hx::Null< bool >  __o_forcePotTexture);
		static hx::ObjectPtr< TextureOptions_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_scale,hx::Null< bool >  __o_mipMapping,::String __o_format,hx::Null< bool >  __o_premultipliedAlpha,hx::Null< bool >  __o_forcePotTexture);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TextureOptions_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("TextureOptions","\xe3","\xc7","\x14","\xac"); }

		Float _scale;
		::String _format;
		bool _mipMapping;
		bool _optimizeForRenderToTexture;
		bool _premultipliedAlpha;
		bool _forcePotTexture;
		 ::Dynamic _onReady;
		Dynamic _onReady_dyn() { return _onReady;}
		 ::starling::textures::TextureOptions clone();
		::Dynamic clone_dyn();

		Float get_scale();
		::Dynamic get_scale_dyn();

		Float set_scale(Float value);
		::Dynamic set_scale_dyn();

		::String get_format();
		::Dynamic get_format_dyn();

		::String set_format(::String value);
		::Dynamic set_format_dyn();

		bool get_mipMapping();
		::Dynamic get_mipMapping_dyn();

		bool set_mipMapping(bool value);
		::Dynamic set_mipMapping_dyn();

		bool get_optimizeForRenderToTexture();
		::Dynamic get_optimizeForRenderToTexture_dyn();

		bool set_optimizeForRenderToTexture(bool value);
		::Dynamic set_optimizeForRenderToTexture_dyn();

		bool get_forcePotTexture();
		::Dynamic get_forcePotTexture_dyn();

		bool set_forcePotTexture(bool value);
		::Dynamic set_forcePotTexture_dyn();

		 ::Dynamic get_onReady();
		::Dynamic get_onReady_dyn();

		 ::Dynamic set_onReady( ::Dynamic value);
		::Dynamic set_onReady_dyn();

		bool get_premultipliedAlpha();
		::Dynamic get_premultipliedAlpha_dyn();

		bool set_premultipliedAlpha(bool value);
		::Dynamic set_premultipliedAlpha_dyn();

};

} // end namespace starling
} // end namespace textures

#endif /* INCLUDED_starling_textures_TextureOptions */ 
