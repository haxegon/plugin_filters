// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_textures_ConcretePotTexture
#define INCLUDED_starling_textures_ConcretePotTexture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,display3D,textures,Texture)
HX_DECLARE_CLASS3(openfl,display3D,textures,TextureBase)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)
HX_DECLARE_CLASS2(starling,textures,ConcretePotTexture)
HX_DECLARE_CLASS2(starling,textures,ConcreteTexture)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace textures{


class HXCPP_CLASS_ATTRIBUTES ConcretePotTexture_obj : public  ::starling::textures::ConcreteTexture_obj
{
	public:
		typedef  ::starling::textures::ConcreteTexture_obj super;
		typedef ConcretePotTexture_obj OBJ_;
		ConcretePotTexture_obj();

	public:
		enum { _hx_ClassId = 0x5106816f };

		void __construct( ::openfl::display3D::textures::Texture base,::String format,int width,int height,bool mipMapping,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.textures.ConcretePotTexture")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.textures.ConcretePotTexture"); }
		static hx::ObjectPtr< ConcretePotTexture_obj > __new( ::openfl::display3D::textures::Texture base,::String format,int width,int height,bool mipMapping,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale);
		static hx::ObjectPtr< ConcretePotTexture_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::textures::Texture base,::String format,int width,int height,bool mipMapping,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ConcretePotTexture_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ConcretePotTexture","\x8b","\x4a","\x7e","\x89"); }

		static void __boot();
		static  ::openfl::geom::Matrix sMatrix;
		static  ::openfl::geom::Rectangle sRectangle;
		static  ::openfl::geom::Point sOrigin;
		static bool sAsyncUploadEnabled;
		static bool get_asyncUploadEnabled();
		static ::Dynamic get_asyncUploadEnabled_dyn();

		static bool set_asyncUploadEnabled(bool value);
		static ::Dynamic set_asyncUploadEnabled_dyn();

		 ::Dynamic _textureReadyCallback;
		Dynamic _textureReadyCallback_dyn() { return _textureReadyCallback;}
		void dispose();

		 ::openfl::display3D::textures::TextureBase createBase();

		void uploadBitmapData( ::openfl::display::BitmapData data, ::Dynamic async);

		bool get_isPotTexture();

		void uploadAtfData( ::openfl::utils::ByteArrayData data,hx::Null< int >  offset, ::Dynamic async);

		void upload( ::openfl::display::BitmapData source,int mipLevel,bool isAsync);
		::Dynamic upload_dyn();

		void uploadAsync( ::openfl::display::BitmapData source,int mipLevel);
		::Dynamic uploadAsync_dyn();

		void onTextureReady( ::openfl::events::Event event);
		::Dynamic onTextureReady_dyn();

		 ::openfl::display3D::textures::Texture get_potBase();
		::Dynamic get_potBase_dyn();

};

} // end namespace starling
} // end namespace textures

#endif /* INCLUDED_starling_textures_ConcretePotTexture */ 
