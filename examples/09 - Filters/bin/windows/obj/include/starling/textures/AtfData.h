// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_textures_AtfData
#define INCLUDED_starling_textures_AtfData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)
HX_DECLARE_CLASS2(starling,textures,AtfData)

namespace starling{
namespace textures{


class HXCPP_CLASS_ATTRIBUTES AtfData_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AtfData_obj OBJ_;
		AtfData_obj();

	public:
		enum { _hx_ClassId = 0x09f13c3d };

		void __construct( ::openfl::utils::ByteArrayData data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.textures.AtfData")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.textures.AtfData"); }
		static hx::ObjectPtr< AtfData_obj > __new( ::openfl::utils::ByteArrayData data);
		static hx::ObjectPtr< AtfData_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::utils::ByteArrayData data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AtfData_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AtfData","\xbd","\xaf","\x74","\xd8"); }

		static bool isAtfData( ::openfl::utils::ByteArrayData data);
		static ::Dynamic isAtfData_dyn();

		::String _format;
		int _width;
		int _height;
		int _numTextures;
		bool _isCubeMap;
		 ::openfl::utils::ByteArrayData _data;
		::String get_format();
		::Dynamic get_format_dyn();

		int get_width();
		::Dynamic get_width_dyn();

		int get_height();
		::Dynamic get_height_dyn();

		int get_numTextures();
		::Dynamic get_numTextures_dyn();

		bool get_isCubeMap();
		::Dynamic get_isCubeMap_dyn();

		 ::openfl::utils::ByteArrayData get_data();
		::Dynamic get_data_dyn();

};

} // end namespace starling
} // end namespace textures

#endif /* INCLUDED_starling_textures_AtfData */ 
