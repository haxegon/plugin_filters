// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_textures_ConcreteVideoTexture
#define INCLUDED_starling_textures_ConcreteVideoTexture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
HX_DECLARE_CLASS3(openfl,display3D,textures,TextureBase)
HX_DECLARE_CLASS3(openfl,display3D,textures,VideoTexture)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(starling,textures,ConcreteTexture)
HX_DECLARE_CLASS2(starling,textures,ConcreteVideoTexture)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace textures{


class HXCPP_CLASS_ATTRIBUTES ConcreteVideoTexture_obj : public  ::starling::textures::ConcreteTexture_obj
{
	public:
		typedef  ::starling::textures::ConcreteTexture_obj super;
		typedef ConcreteVideoTexture_obj OBJ_;
		ConcreteVideoTexture_obj();

	public:
		enum { _hx_ClassId = 0x228f8f89 };

		void __construct( ::openfl::display3D::textures::VideoTexture base,hx::Null< Float >  __o_scale);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.textures.ConcreteVideoTexture")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.textures.ConcreteVideoTexture"); }
		static hx::ObjectPtr< ConcreteVideoTexture_obj > __new( ::openfl::display3D::textures::VideoTexture base,hx::Null< Float >  __o_scale);
		static hx::ObjectPtr< ConcreteVideoTexture_obj > __alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::textures::VideoTexture base,hx::Null< Float >  __o_scale);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ConcreteVideoTexture_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ConcreteVideoTexture","\xa5","\xd7","\x60","\x3f"); }

		 ::Dynamic _textureReadyCallback;
		Dynamic _textureReadyCallback_dyn() { return _textureReadyCallback;}
		bool _disposed;
		void dispose();

		 ::openfl::display3D::textures::TextureBase createBase();

		void attachVideo(::String type, ::Dynamic attachment, ::Dynamic onComplete);

		void onTextureReady( ::openfl::events::Event event);
		::Dynamic onTextureReady_dyn();

		Float get_nativeWidth();

		Float get_nativeHeight();

		Float get_width();

		Float get_height();

		 ::openfl::display3D::textures::VideoTexture get_videoBase();
		::Dynamic get_videoBase_dyn();

};

} // end namespace starling
} // end namespace textures

#endif /* INCLUDED_starling_textures_ConcreteVideoTexture */ 
