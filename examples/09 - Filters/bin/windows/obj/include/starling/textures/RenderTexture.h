// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_textures_RenderTexture
#define INCLUDED_starling_textures_RenderTexture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_textures_SubTexture
#include <starling/textures/SubTexture.h>
#endif
HX_DECLARE_CLASS3(openfl,display3D,textures,TextureBase)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,Image)
HX_DECLARE_CLASS2(starling,display,Mesh)
HX_DECLARE_CLASS2(starling,display,Quad)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,textures,ConcreteTexture)
HX_DECLARE_CLASS2(starling,textures,RenderTexture)
HX_DECLARE_CLASS2(starling,textures,SubTexture)
HX_DECLARE_CLASS2(starling,textures,Texture)

namespace starling{
namespace textures{


class HXCPP_CLASS_ATTRIBUTES RenderTexture_obj : public  ::starling::textures::SubTexture_obj
{
	public:
		typedef  ::starling::textures::SubTexture_obj super;
		typedef RenderTexture_obj OBJ_;
		RenderTexture_obj();

	public:
		enum { _hx_ClassId = 0x0269bfa1 };

		void __construct(int width,int height,hx::Null< bool >  __o_persistent,hx::Null< Float >  __o_scale,::String __o_format);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.textures.RenderTexture")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.textures.RenderTexture"); }
		static hx::ObjectPtr< RenderTexture_obj > __new(int width,int height,hx::Null< bool >  __o_persistent,hx::Null< Float >  __o_scale,::String __o_format);
		static hx::ObjectPtr< RenderTexture_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_persistent,hx::Null< Float >  __o_scale,::String __o_format);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~RenderTexture_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("RenderTexture","\x05","\x8c","\xbe","\xe2"); }

		static void __boot();
		static ::String USE_DOUBLE_BUFFERING_DATA_NAME;
		static  ::openfl::geom::Rectangle sClipRect;
		static bool get_useDoubleBuffering();
		static ::Dynamic get_useDoubleBuffering_dyn();

		static bool set_useDoubleBuffering(bool value);
		static ::Dynamic set_useDoubleBuffering_dyn();

		 ::starling::textures::Texture _activeTexture;
		 ::starling::textures::Texture _bufferTexture;
		 ::starling::display::Image _helperImage;
		bool _drawing;
		bool _bufferReady;
		bool _isPersistent;
		void dispose();

		void draw( ::starling::display::DisplayObject object, ::openfl::geom::Matrix matrix,hx::Null< Float >  alpha,hx::Null< int >  antiAliasing);
		::Dynamic draw_dyn();

		void drawBundled( ::Dynamic drawingBlock,hx::Null< int >  antiAliasing);
		::Dynamic drawBundled_dyn();

		 ::starling::textures::Texture haxegonpreviousRenderTarget;
		void bundlelock(hx::Null< int >  antiAliasing);
		::Dynamic bundlelock_dyn();

		void bundleunlock();
		::Dynamic bundleunlock_dyn();

		void _hx___render( ::starling::display::DisplayObject object, ::openfl::geom::Matrix matrix,hx::Null< Float >  alpha);
		::Dynamic _hx___render_dyn();

		void _hx___renderBundled( ::Dynamic renderBlock, ::starling::display::DisplayObject object, ::openfl::geom::Matrix matrix,hx::Null< Float >  alpha,hx::Null< int >  antiAliasing);
		::Dynamic _hx___renderBundled_dyn();

		void clear(hx::Null< int >  color,hx::Null< Float >  alpha);
		::Dynamic clear_dyn();

		bool get_isDoubleBuffered();
		::Dynamic get_isDoubleBuffered_dyn();

		bool get_isPersistent();
		::Dynamic get_isPersistent_dyn();

		 ::openfl::display3D::textures::TextureBase get_base();

		 ::starling::textures::ConcreteTexture get_root();

};

} // end namespace starling
} // end namespace textures

#endif /* INCLUDED_starling_textures_RenderTexture */ 
