// Generated by Haxe 3.4.4
#ifndef INCLUDED_starling_core_Starling
#define INCLUDED_starling_core_Starling

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(openfl,_Vector,AbstractVector)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,display,Stage3D)
HX_DECLARE_CLASS2(openfl,display3D,Context3D)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)
HX_DECLARE_CLASS2(starling,animation,IAnimatable)
HX_DECLARE_CLASS2(starling,animation,Juggler)
HX_DECLARE_CLASS2(starling,core,Starling)
HX_DECLARE_CLASS2(starling,core,StatsDisplay)
HX_DECLARE_CLASS2(starling,display,DisplayObject)
HX_DECLARE_CLASS2(starling,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(starling,display,Sprite)
HX_DECLARE_CLASS2(starling,display,Stage)
HX_DECLARE_CLASS2(starling,events,EventDispatcher)
HX_DECLARE_CLASS2(starling,events,TouchProcessor)
HX_DECLARE_CLASS2(starling,rendering,Painter)

namespace starling{
namespace core{


class HXCPP_CLASS_ATTRIBUTES Starling_obj : public  ::starling::events::EventDispatcher_obj
{
	public:
		typedef  ::starling::events::EventDispatcher_obj super;
		typedef Starling_obj OBJ_;
		Starling_obj();

	public:
		enum { _hx_ClassId = 0x4d43a54f };

		void __construct(hx::Class rootClass, ::openfl::display::Stage stage, ::openfl::geom::Rectangle viewPort, ::openfl::display::Stage3D stage3D, ::Dynamic __o_renderMode, ::Dynamic __o_profile);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="starling.core.Starling")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"starling.core.Starling"); }
		static hx::ObjectPtr< Starling_obj > __new(hx::Class rootClass, ::openfl::display::Stage stage, ::openfl::geom::Rectangle viewPort, ::openfl::display::Stage3D stage3D, ::Dynamic __o_renderMode, ::Dynamic __o_profile);
		static hx::ObjectPtr< Starling_obj > __alloc(hx::Ctx *_hx_ctx,hx::Class rootClass, ::openfl::display::Stage stage, ::openfl::geom::Rectangle viewPort, ::openfl::display::Stage3D stage3D, ::Dynamic __o_renderMode, ::Dynamic __o_profile);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Starling_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Starling","\xe8","\x08","\x14","\x17"); }

		static void __boot();
		static ::String VERSION;
		static  ::starling::core::Starling sCurrent;
		static  ::openfl::_Vector::AbstractVector sAll;
		static  ::starling::core::Starling get_current();
		static ::Dynamic get_current_dyn();

		static  ::openfl::_Vector::AbstractVector get_all();
		static ::Dynamic get_all_dyn();

		static bool get_multitouchEnabled();
		static ::Dynamic get_multitouchEnabled_dyn();

		static bool set_multitouchEnabled(bool value);
		static ::Dynamic set_multitouchEnabled_dyn();

		 ::starling::display::Stage _hx___stage;
		hx::Class _hx___rootClass;
		 ::starling::display::DisplayObject __root;
		 ::starling::animation::Juggler _hx___juggler;
		 ::starling::rendering::Painter _hx___painter;
		 ::starling::events::TouchProcessor _hx___touchProcessor;
		int _hx___antiAliasing;
		Float _hx___frameTimestamp;
		int _hx___frameID;
		bool _hx___leftMouseDown;
		 ::starling::core::StatsDisplay _hx___statsDisplay;
		bool _hx___started;
		bool _hx___rendering;
		bool _hx___supportHighResolutions;
		bool _hx___skipUnchangedFrames;
		bool _hx___showStats;
		 ::openfl::geom::Rectangle _hx___viewPort;
		 ::openfl::geom::Rectangle _hx___previousViewPort;
		 ::openfl::geom::Rectangle _hx___clippedViewPort;
		 ::openfl::display::Stage _hx___nativeStage;
		bool _hx___nativeStageEmpty;
		 ::openfl::display::Sprite _hx___nativeOverlay;
		void dispose();
		::Dynamic dispose_dyn();

		void initialize();
		::Dynamic initialize_dyn();

		void initializeRoot();
		::Dynamic initializeRoot_dyn();

		void nextFrame();
		::Dynamic nextFrame_dyn();

		void advanceTime(Float passedTime);
		::Dynamic advanceTime_dyn();

		void render();
		::Dynamic render_dyn();

		void updateViewPort(hx::Null< bool >  forceUpdate);
		::Dynamic updateViewPort_dyn();

		void updateNativeOverlay();
		::Dynamic updateNativeOverlay_dyn();

		void stopWithFatalError(::String message);
		::Dynamic stopWithFatalError_dyn();

		void makeCurrent();
		::Dynamic makeCurrent_dyn();

		void start();
		::Dynamic start_dyn();

		void stop(hx::Null< bool >  suspendRendering);
		::Dynamic stop_dyn();

		void setRequiresRedraw();
		::Dynamic setRequiresRedraw_dyn();

		void onStage3DError( ::openfl::events::ErrorEvent event);
		::Dynamic onStage3DError_dyn();

		void onContextCreated( ::openfl::events::Event event);
		::Dynamic onContextCreated_dyn();

		void onContextRestored( ::openfl::events::Event event);
		::Dynamic onContextRestored_dyn();

		void onEnterFrame( ::openfl::events::Event event);
		::Dynamic onEnterFrame_dyn();

		void onKey( ::openfl::events::KeyboardEvent event);
		::Dynamic onKey_dyn();

		void onResize( ::openfl::events::Event event);
		::Dynamic onResize_dyn();

		void onMouseLeave( ::openfl::events::Event event);
		::Dynamic onMouseLeave_dyn();

		void onTouch( ::openfl::events::Event event);
		::Dynamic onTouch_dyn();

		::Array< ::String > get_touchEventTypes();
		::Dynamic get_touchEventTypes_dyn();

		bool get_mustAlwaysRender();
		::Dynamic get_mustAlwaysRender_dyn();

		bool get_isStarted();
		::Dynamic get_isStarted_dyn();

		 ::starling::animation::Juggler get_juggler();
		::Dynamic get_juggler_dyn();

		 ::starling::rendering::Painter get_painter();
		::Dynamic get_painter_dyn();

		 ::openfl::display3D::Context3D get_context();
		::Dynamic get_context_dyn();

		bool get_simulateMultitouch();
		::Dynamic get_simulateMultitouch_dyn();

		bool set_simulateMultitouch(bool value);
		::Dynamic set_simulateMultitouch_dyn();

		bool get_enableErrorChecking();
		::Dynamic get_enableErrorChecking_dyn();

		bool set_enableErrorChecking(bool value);
		::Dynamic set_enableErrorChecking_dyn();

		int get_antiAliasing();
		::Dynamic get_antiAliasing_dyn();

		int set_antiAliasing(int value);
		::Dynamic set_antiAliasing_dyn();

		 ::openfl::geom::Rectangle get_viewPort();
		::Dynamic get_viewPort_dyn();

		 ::openfl::geom::Rectangle set_viewPort( ::openfl::geom::Rectangle value);
		::Dynamic set_viewPort_dyn();

		Float get_contentScaleFactor();
		::Dynamic get_contentScaleFactor_dyn();

		 ::openfl::display::Sprite get_nativeOverlay();
		::Dynamic get_nativeOverlay_dyn();

		bool get_showStats();
		::Dynamic get_showStats_dyn();

		bool set_showStats(bool value);
		::Dynamic set_showStats_dyn();

		void showStatsAt(::String horizontalAlign,::String verticalAlign,hx::Null< Float >  scale);
		::Dynamic showStatsAt_dyn();

		 ::starling::display::Stage get_stage();
		::Dynamic get_stage_dyn();

		 ::openfl::display::Stage3D get_stage3D();
		::Dynamic get_stage3D_dyn();

		 ::openfl::display::Stage get_nativeStage();
		::Dynamic get_nativeStage_dyn();

		 ::starling::display::DisplayObject get_root();
		::Dynamic get_root_dyn();

		hx::Class get_rootClass();
		::Dynamic get_rootClass_dyn();

		hx::Class set_rootClass(hx::Class value);
		::Dynamic set_rootClass_dyn();

		bool get_shareContext();
		::Dynamic get_shareContext_dyn();

		bool set_shareContext(bool value);
		::Dynamic set_shareContext_dyn();

		 ::Dynamic get_profile();
		::Dynamic get_profile_dyn();

		bool get_supportHighResolutions();
		::Dynamic get_supportHighResolutions_dyn();

		bool set_supportHighResolutions(bool value);
		::Dynamic set_supportHighResolutions_dyn();

		bool get_skipUnchangedFrames();
		::Dynamic get_skipUnchangedFrames_dyn();

		bool set_skipUnchangedFrames(bool value);
		::Dynamic set_skipUnchangedFrames_dyn();

		 ::starling::events::TouchProcessor get_touchProcessor();
		::Dynamic get_touchProcessor_dyn();

		 ::starling::events::TouchProcessor set_touchProcessor( ::starling::events::TouchProcessor value);
		::Dynamic set_touchProcessor_dyn();

		int get_frameID();
		::Dynamic get_frameID_dyn();

		bool get_contextValid();
		::Dynamic get_contextValid_dyn();

		bool isNativeDisplayObjectEmpty( ::openfl::display::DisplayObject object);
		::Dynamic isNativeDisplayObjectEmpty_dyn();

};

} // end namespace starling
} // end namespace core

#endif /* INCLUDED_starling_core_Starling */ 
