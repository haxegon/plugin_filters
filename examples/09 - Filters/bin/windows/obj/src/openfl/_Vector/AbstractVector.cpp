// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_470375216fba049e_269_new,"openfl._Vector.AbstractVector","new",0x8d56d561,"openfl._Vector.AbstractVector.new","openfl/Vector.hx",269,0x4a01873c)
HX_LOCAL_STACK_FRAME(_hx_pos_470375216fba049e_293_toJSON,"openfl._Vector.AbstractVector","toJSON",0x01a09ac2,"openfl._Vector.AbstractVector.toJSON","openfl/Vector.hx",293,0x4a01873c)
namespace openfl{
namespace _Vector{

void AbstractVector_obj::__construct(::Dynamic data,::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_470375216fba049e_269_new)
HXLINE( 271)		this->data = data;
HXLINE( 273)		if (hx::IsNotNull( array )) {
HXLINE( 275)			bool cacheFixed = ( (bool)(data->__Field(HX_("fixed",74,f9,a1,00),hx::paccDynamic)) );
HXLINE( 276)			data->__SetField(HX_("fixed",74,f9,a1,00),false,hx::paccDynamic);
HXLINE( 278)			{
HXLINE( 278)				int _g1 = (int)0;
HXDLIN( 278)				int _g = array->get_length();
HXDLIN( 278)				while((_g1 < _g)){
HXLINE( 278)					_g1 = (_g1 + (int)1);
HXDLIN( 278)					int i = (_g1 - (int)1);
HXLINE( 280)					::openfl::_Vector::IVector_obj::set(data,i,array->__get(i));
            				}
            			}
HXLINE( 284)			data->__SetField(HX_("fixed",74,f9,a1,00),cacheFixed,hx::paccDynamic);
            		}
            	}

Dynamic AbstractVector_obj::__CreateEmpty() { return new AbstractVector_obj; }

void *AbstractVector_obj::_hx_vtable = 0;

Dynamic AbstractVector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AbstractVector_obj > _hx_result = new AbstractVector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AbstractVector_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x48735c57;
}

 ::Dynamic AbstractVector_obj::toJSON(){
            	HX_STACKFRAME(&_hx_pos_470375216fba049e_293_toJSON)
HXDLIN( 293)		return ::openfl::_Vector::IVector_obj::toJSON(this->data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractVector_obj,toJSON,return )


hx::ObjectPtr< AbstractVector_obj > AbstractVector_obj::__new(::Dynamic data,::cpp::VirtualArray array) {
	hx::ObjectPtr< AbstractVector_obj > __this = new AbstractVector_obj();
	__this->__construct(data,array);
	return __this;
}

hx::ObjectPtr< AbstractVector_obj > AbstractVector_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic data,::cpp::VirtualArray array) {
	AbstractVector_obj *__this = (AbstractVector_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AbstractVector_obj), true, "openfl._Vector.AbstractVector"));
	*(void **)__this = AbstractVector_obj::_hx_vtable;
	__this->__construct(data,array);
	return __this;
}

AbstractVector_obj::AbstractVector_obj()
{
}

void AbstractVector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AbstractVector);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_END_CLASS();
}

void AbstractVector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
}

hx::Val AbstractVector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toJSON") ) { return hx::Val( toJSON_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AbstractVector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AbstractVector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AbstractVector_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::IVector*/ ,(int)offsetof(AbstractVector_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AbstractVector_obj_sStaticStorageInfo = 0;
#endif

static ::String AbstractVector_obj_sMemberFields[] = {
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("toJSON","\x23","\x49","\x09","\x7c"),
	::String(null()) };

static void AbstractVector_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AbstractVector_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AbstractVector_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AbstractVector_obj::__mClass,"__mClass");
};

#endif

hx::Class AbstractVector_obj::__mClass;

void AbstractVector_obj::__register()
{
	hx::Object *dummy = new AbstractVector_obj;
	AbstractVector_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._Vector.AbstractVector","\xef","\x90","\x4e","\x5f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AbstractVector_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AbstractVector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AbstractVector_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AbstractVector_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AbstractVector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AbstractVector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _Vector
