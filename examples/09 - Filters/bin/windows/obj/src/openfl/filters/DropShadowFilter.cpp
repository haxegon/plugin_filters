// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_786269b8d678908e_67_new,"openfl.filters.DropShadowFilter","new",0xf784b84a,"openfl.filters.DropShadowFilter.new","openfl/filters/DropShadowFilter.hx",67,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_97_clone,"openfl.filters.DropShadowFilter","clone",0x1b8d49c7,"openfl.filters.DropShadowFilter.clone","openfl/filters/DropShadowFilter.hx",97,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_102___applyFilter,"openfl.filters.DropShadowFilter","__applyFilter",0x5aedd110,"openfl.filters.DropShadowFilter.__applyFilter","openfl/filters/DropShadowFilter.hx",102,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_123___updateSize,"openfl.filters.DropShadowFilter","__updateSize",0xd6a7d160,"openfl.filters.DropShadowFilter.__updateSize","openfl/filters/DropShadowFilter.hx",123,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_144_get_alpha,"openfl.filters.DropShadowFilter","get_alpha",0xc136b71f,"openfl.filters.DropShadowFilter.get_alpha","openfl/filters/DropShadowFilter.hx",144,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_149_set_alpha,"openfl.filters.DropShadowFilter","set_alpha",0xa487a32b,"openfl.filters.DropShadowFilter.set_alpha","openfl/filters/DropShadowFilter.hx",149,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_159_get_angle,"openfl.filters.DropShadowFilter","get_angle",0xc2825394,"openfl.filters.DropShadowFilter.get_angle","openfl/filters/DropShadowFilter.hx",159,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_164_set_angle,"openfl.filters.DropShadowFilter","set_angle",0xa5d33fa0,"openfl.filters.DropShadowFilter.set_angle","openfl/filters/DropShadowFilter.hx",164,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_178_get_blurX,"openfl.filters.DropShadowFilter","get_blurX",0x54a11f92,"openfl.filters.DropShadowFilter.get_blurX","openfl/filters/DropShadowFilter.hx",178,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_183_set_blurX,"openfl.filters.DropShadowFilter","set_blurX",0x37f20b9e,"openfl.filters.DropShadowFilter.set_blurX","openfl/filters/DropShadowFilter.hx",183,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_197_get_blurY,"openfl.filters.DropShadowFilter","get_blurY",0x54a11f93,"openfl.filters.DropShadowFilter.get_blurY","openfl/filters/DropShadowFilter.hx",197,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_202_set_blurY,"openfl.filters.DropShadowFilter","set_blurY",0x37f20b9f,"openfl.filters.DropShadowFilter.set_blurY","openfl/filters/DropShadowFilter.hx",202,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_216_get_color,"openfl.filters.DropShadowFilter","get_color",0xe9fc8124,"openfl.filters.DropShadowFilter.get_color","openfl/filters/DropShadowFilter.hx",216,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_221_set_color,"openfl.filters.DropShadowFilter","set_color",0xcd4d6d30,"openfl.filters.DropShadowFilter.set_color","openfl/filters/DropShadowFilter.hx",221,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_231_get_distance,"openfl.filters.DropShadowFilter","get_distance",0xba1f1214,"openfl.filters.DropShadowFilter.get_distance","openfl/filters/DropShadowFilter.hx",231,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_236_set_distance,"openfl.filters.DropShadowFilter","set_distance",0xcf183588,"openfl.filters.DropShadowFilter.set_distance","openfl/filters/DropShadowFilter.hx",236,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_250_get_hideObject,"openfl.filters.DropShadowFilter","get_hideObject",0xee6f59c0,"openfl.filters.DropShadowFilter.get_hideObject","openfl/filters/DropShadowFilter.hx",250,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_255_set_hideObject,"openfl.filters.DropShadowFilter","set_hideObject",0x0e8f4234,"openfl.filters.DropShadowFilter.set_hideObject","openfl/filters/DropShadowFilter.hx",255,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_268_get_inner,"openfl.filters.DropShadowFilter","get_inner",0x5dbc4157,"openfl.filters.DropShadowFilter.get_inner","openfl/filters/DropShadowFilter.hx",268,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_273_set_inner,"openfl.filters.DropShadowFilter","set_inner",0x410d2d63,"openfl.filters.DropShadowFilter.set_inner","openfl/filters/DropShadowFilter.hx",273,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_283_get_knockout,"openfl.filters.DropShadowFilter","get_knockout",0xbdcb28d9,"openfl.filters.DropShadowFilter.get_knockout","openfl/filters/DropShadowFilter.hx",283,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_288_set_knockout,"openfl.filters.DropShadowFilter","set_knockout",0xd2c44c4d,"openfl.filters.DropShadowFilter.set_knockout","openfl/filters/DropShadowFilter.hx",288,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_298_get_quality,"openfl.filters.DropShadowFilter","get_quality",0x17e046c0,"openfl.filters.DropShadowFilter.get_quality","openfl/filters/DropShadowFilter.hx",298,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_303_set_quality,"openfl.filters.DropShadowFilter","set_quality",0x224d4dcc,"openfl.filters.DropShadowFilter.set_quality","openfl/filters/DropShadowFilter.hx",303,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_313_get_strength,"openfl.filters.DropShadowFilter","get_strength",0xdcb45160,"openfl.filters.DropShadowFilter.get_strength","openfl/filters/DropShadowFilter.hx",313,0x048fdea4)
HX_LOCAL_STACK_FRAME(_hx_pos_786269b8d678908e_318_set_strength,"openfl.filters.DropShadowFilter","set_strength",0xf1ad74d4,"openfl.filters.DropShadowFilter.set_strength","openfl/filters/DropShadowFilter.hx",318,0x048fdea4)
namespace openfl{
namespace filters{

void DropShadowFilter_obj::__construct(hx::Null< Float >  __o_distance,hx::Null< Float >  __o_angle,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout,hx::Null< bool >  __o_hideObject){
Float distance = __o_distance.Default(4);
Float angle = __o_angle.Default(45);
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(1);
Float blurX = __o_blurX.Default(4);
Float blurY = __o_blurY.Default(4);
Float strength = __o_strength.Default(1);
int quality = __o_quality.Default(1);
bool inner = __o_inner.Default(false);
bool knockout = __o_knockout.Default(false);
bool hideObject = __o_hideObject.Default(false);
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_67_new)
HXLINE(  69)		super::__construct();
HXLINE(  71)		this->_hx___offsetX = (int)0;
HXLINE(  72)		this->_hx___offsetY = (int)0;
HXLINE(  74)		this->_hx___distance = distance;
HXLINE(  75)		this->_hx___angle = angle;
HXLINE(  76)		this->_hx___color = color;
HXLINE(  77)		this->_hx___alpha = alpha;
HXLINE(  78)		this->_hx___blurX = blurX;
HXLINE(  79)		this->_hx___blurY = blurY;
HXLINE(  80)		this->_hx___strength = strength;
HXLINE(  81)		this->_hx___quality = quality;
HXLINE(  82)		this->_hx___inner = inner;
HXLINE(  83)		this->_hx___knockout = knockout;
HXLINE(  84)		this->_hx___hideObject = hideObject;
HXLINE(  86)		this->_hx___updateSize();
HXLINE(  88)		this->_hx___needSecondBitmapData = true;
HXLINE(  89)		this->_hx___preserveObject = !(this->_hx___hideObject);
HXLINE(  90)		this->_hx___renderDirty = true;
            	}

Dynamic DropShadowFilter_obj::__CreateEmpty() { return new DropShadowFilter_obj; }

void *DropShadowFilter_obj::_hx_vtable = 0;

Dynamic DropShadowFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DropShadowFilter_obj > _hx_result = new DropShadowFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool DropShadowFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x29444992) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x29444992;
	} else {
		return inClassId==(int)0x4f68d692;
	}
}

 ::openfl::filters::BitmapFilter DropShadowFilter_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_786269b8d678908e_97_clone)
HXDLIN(  97)		return  ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,this->_hx___distance,this->_hx___angle,this->_hx___color,this->_hx___alpha,this->_hx___blurX,this->_hx___blurY,this->_hx___strength,this->_hx___quality,this->_hx___inner,this->_hx___knockout,this->_hx___hideObject);
            	}


 ::openfl::display::BitmapData DropShadowFilter_obj::_hx___applyFilter( ::openfl::display::BitmapData bitmapData, ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint){
            	HX_GC_STACKFRAME(&_hx_pos_786269b8d678908e_102___applyFilter)
HXLINE( 106)		int a = ((int)((int)this->_hx___color >> (int)(int)24) & (int)(int)255);
HXLINE( 107)		int r = ((int)((int)this->_hx___color >> (int)(int)16) & (int)(int)255);
HXLINE( 108)		int g = ((int)((int)this->_hx___color >> (int)(int)8) & (int)(int)255);
HXLINE( 109)		int b = ((int)this->_hx___color & (int)(int)255);
HXLINE( 110)		 ::openfl::geom::Rectangle sourceBitmapData1 = sourceBitmapData->rect;
HXDLIN( 110)		sourceBitmapData->colorTransform(sourceBitmapData1, ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)1,r,g,b,a));
HXLINE( 112)		 ::openfl::geom::Point destPoint1 = destPoint;
HXDLIN( 112)		destPoint1->x = (destPoint1->x + this->_hx___offsetX);
HXLINE( 113)		 ::openfl::geom::Point destPoint2 = destPoint;
HXDLIN( 113)		destPoint2->y = (destPoint2->y + this->_hx___offsetY);
HXLINE( 115)		 ::lime::graphics::Image bitmapData1 = bitmapData->image;
HXDLIN( 115)		 ::lime::graphics::Image sourceBitmapData2 = sourceBitmapData->image;
HXDLIN( 115)		 ::lime::math::Rectangle finalImage = sourceRect->_hx___toLimeRectangle();
HXDLIN( 115)		 ::lime::math::Vector2 finalImage1 = destPoint->_hx___toLimeVector2();
HXDLIN( 115)		 ::lime::graphics::Image finalImage2 = ::lime::graphics::utils::ImageDataUtil_obj::gaussianBlur(bitmapData1,sourceBitmapData2,finalImage,finalImage1,this->_hx___blurX,this->_hx___blurY,this->_hx___quality,this->_hx___strength);
HXLINE( 117)		if (hx::IsEq( finalImage2,bitmapData->image )) {
HXLINE( 117)			return bitmapData;
            		}
HXLINE( 118)		return sourceBitmapData;
            	}


void DropShadowFilter_obj::_hx___updateSize(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_123___updateSize)
HXLINE( 125)		Float _hx_tmp = this->_hx___distance;
HXDLIN( 125)		this->_hx___offsetX = ::Std_obj::_hx_int((_hx_tmp * ::Math_obj::cos(((Float)(this->_hx___angle * ::Math_obj::PI) / (Float)(int)180))));
HXLINE( 126)		Float _hx_tmp1 = this->_hx___distance;
HXDLIN( 126)		this->_hx___offsetY = ::Std_obj::_hx_int((_hx_tmp1 * ::Math_obj::sin(((Float)(this->_hx___angle * ::Math_obj::PI) / (Float)(int)180))));
HXLINE( 127)		Float _hx_tmp2;
HXDLIN( 127)		if ((this->_hx___offsetY < (int)0)) {
HXLINE( 127)			_hx_tmp2 = -(this->_hx___offsetY);
            		}
            		else {
HXLINE( 127)			_hx_tmp2 = (int)0;
            		}
HXDLIN( 127)		this->_hx___topExtension = ::Math_obj::ceil((_hx_tmp2 + this->_hx___blurY));
HXLINE( 128)		Float _hx_tmp3;
HXDLIN( 128)		if ((this->_hx___offsetY > (int)0)) {
HXLINE( 128)			_hx_tmp3 = this->_hx___offsetY;
            		}
            		else {
HXLINE( 128)			_hx_tmp3 = (int)0;
            		}
HXDLIN( 128)		this->_hx___bottomExtension = ::Math_obj::ceil((_hx_tmp3 + this->_hx___blurY));
HXLINE( 129)		Float _hx_tmp4;
HXDLIN( 129)		if ((this->_hx___offsetX < (int)0)) {
HXLINE( 129)			_hx_tmp4 = -(this->_hx___offsetX);
            		}
            		else {
HXLINE( 129)			_hx_tmp4 = (int)0;
            		}
HXDLIN( 129)		this->_hx___leftExtension = ::Math_obj::ceil((_hx_tmp4 + this->_hx___blurX));
HXLINE( 130)		Float _hx_tmp5;
HXDLIN( 130)		if ((this->_hx___offsetX > (int)0)) {
HXLINE( 130)			_hx_tmp5 = this->_hx___offsetX;
            		}
            		else {
HXLINE( 130)			_hx_tmp5 = (int)0;
            		}
HXDLIN( 130)		this->_hx___rightExtension = ::Math_obj::ceil((_hx_tmp5 + this->_hx___blurX));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,_hx___updateSize,(void))

Float DropShadowFilter_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_144_get_alpha)
HXDLIN( 144)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_alpha,return )

Float DropShadowFilter_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_149_set_alpha)
HXLINE( 151)		if ((value != this->_hx___alpha)) {
HXLINE( 151)			this->_hx___renderDirty = true;
            		}
HXLINE( 152)		return (this->_hx___alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_alpha,return )

Float DropShadowFilter_obj::get_angle(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_159_get_angle)
HXDLIN( 159)		return this->_hx___angle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_angle,return )

Float DropShadowFilter_obj::set_angle(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_164_set_angle)
HXLINE( 166)		if ((value != this->_hx___angle)) {
HXLINE( 167)			this->_hx___angle = value;
HXLINE( 168)			this->_hx___renderDirty = true;
HXLINE( 169)			this->_hx___updateSize();
            		}
HXLINE( 171)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_angle,return )

Float DropShadowFilter_obj::get_blurX(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_178_get_blurX)
HXDLIN( 178)		return this->_hx___blurX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_blurX,return )

Float DropShadowFilter_obj::set_blurX(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_183_set_blurX)
HXLINE( 185)		if ((value != this->_hx___blurX)) {
HXLINE( 186)			this->_hx___blurX = value;
HXLINE( 187)			this->_hx___renderDirty = true;
HXLINE( 188)			this->_hx___updateSize();
            		}
HXLINE( 190)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_blurX,return )

Float DropShadowFilter_obj::get_blurY(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_197_get_blurY)
HXDLIN( 197)		return this->_hx___blurY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_blurY,return )

Float DropShadowFilter_obj::set_blurY(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_202_set_blurY)
HXLINE( 204)		if ((value != this->_hx___blurY)) {
HXLINE( 205)			this->_hx___blurY = value;
HXLINE( 206)			this->_hx___renderDirty = true;
HXLINE( 207)			this->_hx___updateSize();
            		}
HXLINE( 209)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_blurY,return )

int DropShadowFilter_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_216_get_color)
HXDLIN( 216)		return this->_hx___color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_color,return )

int DropShadowFilter_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_221_set_color)
HXLINE( 223)		if ((value != this->_hx___color)) {
HXLINE( 223)			this->_hx___renderDirty = true;
            		}
HXLINE( 224)		return (this->_hx___color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_color,return )

Float DropShadowFilter_obj::get_distance(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_231_get_distance)
HXDLIN( 231)		return this->_hx___distance;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_distance,return )

Float DropShadowFilter_obj::set_distance(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_236_set_distance)
HXLINE( 238)		if ((value != this->_hx___distance)) {
HXLINE( 239)			this->_hx___distance = value;
HXLINE( 240)			this->_hx___renderDirty = true;
HXLINE( 241)			this->_hx___updateSize();
            		}
HXLINE( 243)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_distance,return )

bool DropShadowFilter_obj::get_hideObject(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_250_get_hideObject)
HXDLIN( 250)		return this->_hx___hideObject;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_hideObject,return )

bool DropShadowFilter_obj::set_hideObject(bool value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_255_set_hideObject)
HXLINE( 257)		if ((value != this->_hx___hideObject)) {
HXLINE( 258)			this->_hx___renderDirty = true;
HXLINE( 259)			this->_hx___preserveObject = !(value);
            		}
HXLINE( 261)		return (this->_hx___hideObject = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_hideObject,return )

bool DropShadowFilter_obj::get_inner(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_268_get_inner)
HXDLIN( 268)		return this->_hx___inner;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_inner,return )

bool DropShadowFilter_obj::set_inner(bool value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_273_set_inner)
HXLINE( 275)		if ((value != this->_hx___inner)) {
HXLINE( 275)			this->_hx___renderDirty = true;
            		}
HXLINE( 276)		return (this->_hx___inner = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_inner,return )

bool DropShadowFilter_obj::get_knockout(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_283_get_knockout)
HXDLIN( 283)		return this->_hx___knockout;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_knockout,return )

bool DropShadowFilter_obj::set_knockout(bool value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_288_set_knockout)
HXLINE( 290)		if ((value != this->_hx___knockout)) {
HXLINE( 290)			this->_hx___renderDirty = true;
            		}
HXLINE( 291)		return (this->_hx___knockout = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_knockout,return )

int DropShadowFilter_obj::get_quality(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_298_get_quality)
HXDLIN( 298)		return this->_hx___quality;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_quality,return )

int DropShadowFilter_obj::set_quality(int value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_303_set_quality)
HXLINE( 305)		if ((value != this->_hx___quality)) {
HXLINE( 305)			this->_hx___renderDirty = true;
            		}
HXLINE( 306)		return (this->_hx___quality = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_quality,return )

Float DropShadowFilter_obj::get_strength(){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_313_get_strength)
HXDLIN( 313)		return this->_hx___strength;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DropShadowFilter_obj,get_strength,return )

Float DropShadowFilter_obj::set_strength(Float value){
            	HX_STACKFRAME(&_hx_pos_786269b8d678908e_318_set_strength)
HXLINE( 320)		if ((value != this->_hx___strength)) {
HXLINE( 320)			this->_hx___renderDirty = true;
            		}
HXLINE( 321)		return (this->_hx___strength = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DropShadowFilter_obj,set_strength,return )


hx::ObjectPtr< DropShadowFilter_obj > DropShadowFilter_obj::__new(hx::Null< Float >  __o_distance,hx::Null< Float >  __o_angle,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout,hx::Null< bool >  __o_hideObject) {
	hx::ObjectPtr< DropShadowFilter_obj > __this = new DropShadowFilter_obj();
	__this->__construct(__o_distance,__o_angle,__o_color,__o_alpha,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_inner,__o_knockout,__o_hideObject);
	return __this;
}

hx::ObjectPtr< DropShadowFilter_obj > DropShadowFilter_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_distance,hx::Null< Float >  __o_angle,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< int >  __o_quality,hx::Null< bool >  __o_inner,hx::Null< bool >  __o_knockout,hx::Null< bool >  __o_hideObject) {
	DropShadowFilter_obj *__this = (DropShadowFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DropShadowFilter_obj), false, "openfl.filters.DropShadowFilter"));
	*(void **)__this = DropShadowFilter_obj::_hx_vtable;
	__this->__construct(__o_distance,__o_angle,__o_color,__o_alpha,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_inner,__o_knockout,__o_hideObject);
	return __this;
}

DropShadowFilter_obj::DropShadowFilter_obj()
{
}

hx::Val DropShadowFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_angle() ); }
		if (HX_FIELD_EQ(inName,"blurX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blurX() ); }
		if (HX_FIELD_EQ(inName,"blurY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blurY() ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		if (HX_FIELD_EQ(inName,"inner") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_inner() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_quality() ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha ); }
		if (HX_FIELD_EQ(inName,"__angle") ) { return hx::Val( _hx___angle ); }
		if (HX_FIELD_EQ(inName,"__blurX") ) { return hx::Val( _hx___blurX ); }
		if (HX_FIELD_EQ(inName,"__blurY") ) { return hx::Val( _hx___blurY ); }
		if (HX_FIELD_EQ(inName,"__color") ) { return hx::Val( _hx___color ); }
		if (HX_FIELD_EQ(inName,"__inner") ) { return hx::Val( _hx___inner ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_distance() ); }
		if (HX_FIELD_EQ(inName,"knockout") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_knockout() ); }
		if (HX_FIELD_EQ(inName,"strength") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_strength() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__quality") ) { return hx::Val( _hx___quality ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_angle") ) { return hx::Val( get_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blurX") ) { return hx::Val( get_blurX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blurX") ) { return hx::Val( set_blurX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blurY") ) { return hx::Val( get_blurY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blurY") ) { return hx::Val( set_blurY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_inner") ) { return hx::Val( get_inner_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_inner") ) { return hx::Val( set_inner_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideObject") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_hideObject() ); }
		if (HX_FIELD_EQ(inName,"__distance") ) { return hx::Val( _hx___distance ); }
		if (HX_FIELD_EQ(inName,"__knockout") ) { return hx::Val( _hx___knockout ); }
		if (HX_FIELD_EQ(inName,"__strength") ) { return hx::Val( _hx___strength ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_quality") ) { return hx::Val( get_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_quality") ) { return hx::Val( set_quality_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__hideObject") ) { return hx::Val( _hx___hideObject ); }
		if (HX_FIELD_EQ(inName,"__updateSize") ) { return hx::Val( _hx___updateSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_distance") ) { return hx::Val( get_distance_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_distance") ) { return hx::Val( set_distance_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_knockout") ) { return hx::Val( get_knockout_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_knockout") ) { return hx::Val( set_knockout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_strength") ) { return hx::Val( get_strength_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_strength") ) { return hx::Val( set_strength_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__applyFilter") ) { return hx::Val( _hx___applyFilter_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_hideObject") ) { return hx::Val( get_hideObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_hideObject") ) { return hx::Val( set_hideObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DropShadowFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_angle(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"blurX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blurX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"blurY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blurY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"inner") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_inner(inValue.Cast< bool >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_quality(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__angle") ) { _hx___angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blurX") ) { _hx___blurX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blurY") ) { _hx___blurY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__color") ) { _hx___color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__inner") ) { _hx___inner=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_distance(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"knockout") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_knockout(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"strength") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_strength(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__quality") ) { _hx___quality=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hideObject") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_hideObject(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__distance") ) { _hx___distance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__knockout") ) { _hx___knockout=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__strength") ) { _hx___strength=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__hideObject") ) { _hx___hideObject=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DropShadowFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"));
	outFields->push(HX_HCSTRING("hideObject","\x21","\x25","\xc5","\xac"));
	outFields->push(HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"));
	outFields->push(HX_HCSTRING("knockout","\xfa","\xa9","\xa5","\x6f"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	outFields->push(HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__angle","\xb3","\x9c","\x40","\x8d"));
	outFields->push(HX_HCSTRING("__blurX","\xb1","\x68","\x5f","\x1f"));
	outFields->push(HX_HCSTRING("__blurY","\xb2","\x68","\x5f","\x1f"));
	outFields->push(HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"));
	outFields->push(HX_HCSTRING("__distance","\x55","\x06","\x32","\x0f"));
	outFields->push(HX_HCSTRING("__hideObject","\x41","\xa0","\x58","\xe5"));
	outFields->push(HX_HCSTRING("__inner","\x76","\x8a","\x7a","\x28"));
	outFields->push(HX_HCSTRING("__knockout","\x1a","\x1d","\xde","\x12"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__quality","\x9f","\x55","\x9a","\xc5"));
	outFields->push(HX_HCSTRING("__strength","\xa1","\x45","\xc7","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DropShadowFilter_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___angle),HX_HCSTRING("__angle","\xb3","\x9c","\x40","\x8d")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___blurX),HX_HCSTRING("__blurX","\xb1","\x68","\x5f","\x1f")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___blurY),HX_HCSTRING("__blurY","\xb2","\x68","\x5f","\x1f")},
	{hx::fsInt,(int)offsetof(DropShadowFilter_obj,_hx___color),HX_HCSTRING("__color","\x43","\xca","\xba","\xb4")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___distance),HX_HCSTRING("__distance","\x55","\x06","\x32","\x0f")},
	{hx::fsBool,(int)offsetof(DropShadowFilter_obj,_hx___hideObject),HX_HCSTRING("__hideObject","\x41","\xa0","\x58","\xe5")},
	{hx::fsBool,(int)offsetof(DropShadowFilter_obj,_hx___inner),HX_HCSTRING("__inner","\x76","\x8a","\x7a","\x28")},
	{hx::fsBool,(int)offsetof(DropShadowFilter_obj,_hx___knockout),HX_HCSTRING("__knockout","\x1a","\x1d","\xde","\x12")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsInt,(int)offsetof(DropShadowFilter_obj,_hx___quality),HX_HCSTRING("__quality","\x9f","\x55","\x9a","\xc5")},
	{hx::fsFloat,(int)offsetof(DropShadowFilter_obj,_hx___strength),HX_HCSTRING("__strength","\xa1","\x45","\xc7","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DropShadowFilter_obj_sStaticStorageInfo = 0;
#endif

static ::String DropShadowFilter_obj_sMemberFields[] = {
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__angle","\xb3","\x9c","\x40","\x8d"),
	HX_HCSTRING("__blurX","\xb1","\x68","\x5f","\x1f"),
	HX_HCSTRING("__blurY","\xb2","\x68","\x5f","\x1f"),
	HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"),
	HX_HCSTRING("__distance","\x55","\x06","\x32","\x0f"),
	HX_HCSTRING("__hideObject","\x41","\xa0","\x58","\xe5"),
	HX_HCSTRING("__inner","\x76","\x8a","\x7a","\x28"),
	HX_HCSTRING("__knockout","\x1a","\x1d","\xde","\x12"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__quality","\x9f","\x55","\x9a","\xc5"),
	HX_HCSTRING("__strength","\xa1","\x45","\xc7","\x31"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("__applyFilter","\xa6","\x20","\xa8","\x09"),
	HX_HCSTRING("__updateSize","\x8a","\x06","\x9c","\x3d"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_angle","\x2a","\xa0","\x8b","\x66"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("get_blurX","\x28","\x6c","\xaa","\xf8"),
	HX_HCSTRING("set_blurX","\x34","\x58","\xfb","\xdb"),
	HX_HCSTRING("get_blurY","\x29","\x6c","\xaa","\xf8"),
	HX_HCSTRING("set_blurY","\x35","\x58","\xfb","\xdb"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_distance","\x3e","\x47","\x13","\x21"),
	HX_HCSTRING("set_distance","\xb2","\x6a","\x0c","\x36"),
	HX_HCSTRING("get_hideObject","\x6a","\xad","\xba","\x22"),
	HX_HCSTRING("set_hideObject","\xde","\x95","\xda","\x42"),
	HX_HCSTRING("get_inner","\xed","\x8d","\xc5","\x01"),
	HX_HCSTRING("set_inner","\xf9","\x79","\x16","\xe5"),
	HX_HCSTRING("get_knockout","\x03","\x5e","\xbf","\x24"),
	HX_HCSTRING("set_knockout","\x77","\x81","\xb8","\x39"),
	HX_HCSTRING("get_quality","\xd6","\x64","\x46","\xca"),
	HX_HCSTRING("set_quality","\xe2","\x6b","\xb3","\xd4"),
	HX_HCSTRING("get_strength","\x8a","\x86","\xa8","\x43"),
	HX_HCSTRING("set_strength","\xfe","\xa9","\xa1","\x58"),
	::String(null()) };

static void DropShadowFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DropShadowFilter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DropShadowFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DropShadowFilter_obj::__mClass,"__mClass");
};

#endif

hx::Class DropShadowFilter_obj::__mClass;

void DropShadowFilter_obj::__register()
{
	hx::Object *dummy = new DropShadowFilter_obj;
	DropShadowFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters.DropShadowFilter","\x58","\x8b","\xe4","\x38");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DropShadowFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DropShadowFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DropShadowFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DropShadowFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DropShadowFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DropShadowFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace filters
