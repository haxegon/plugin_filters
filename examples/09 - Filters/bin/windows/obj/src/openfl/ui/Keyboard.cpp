// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl_ui_Keyboard
#include <openfl/ui/Keyboard.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_124_isAccessible,"openfl.ui.Keyboard","isAccessible",0xa9f8adcb,"openfl.ui.Keyboard.isAccessible","openfl/ui/Keyboard.hx",124,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_131___convertKeyCode,"openfl.ui.Keyboard","__convertKeyCode",0x9705d864,"openfl.ui.Keyboard.__convertKeyCode","openfl/ui/Keyboard.hx",131,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_375___getCharCode,"openfl.ui.Keyboard","__getCharCode",0x5c5ae14e,"openfl.ui.Keyboard.__getCharCode","openfl/ui/Keyboard.hx",375,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_474___getKeyLocation,"openfl.ui.Keyboard","__getKeyLocation",0xfd1dd5a9,"openfl.ui.Keyboard.__getKeyLocation","openfl/ui/Keyboard.hx",474,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_15_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",15,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_16_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",16,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_17_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",17,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_18_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",18,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_19_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",19,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_20_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",20,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_21_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",21,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_22_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",22,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_23_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",23,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_24_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",24,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_25_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",25,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_26_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",26,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_27_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",27,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_28_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",28,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_29_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",29,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_30_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",30,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_31_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",31,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_32_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",32,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_33_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",33,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_34_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",34,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_35_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",35,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_36_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",36,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_37_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",37,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_38_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",38,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_39_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",39,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_40_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",40,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_41_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",41,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_42_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",42,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_43_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",43,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_44_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",44,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_45_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",45,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_46_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",46,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_47_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",47,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_48_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",48,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_49_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",49,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_50_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",50,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_51_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",51,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_52_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",52,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_53_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",53,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_54_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",54,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_55_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",55,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_56_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",56,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_57_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",57,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_58_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",58,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_59_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",59,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_60_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",60,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_61_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",61,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_62_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",62,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_63_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",63,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_64_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",64,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_65_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",65,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_66_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",66,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_67_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",67,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_68_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",68,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_69_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",69,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_70_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",70,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_71_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",71,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_72_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",72,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_73_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",73,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_74_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",74,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_75_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",75,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_76_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",76,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_77_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",77,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_78_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",78,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_79_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",79,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_80_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",80,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_81_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",81,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_82_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",82,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_83_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",83,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_84_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",84,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_85_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",85,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_86_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",86,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_87_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",87,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_88_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",88,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_89_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",89,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_90_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",90,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_91_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",91,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_92_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",92,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_93_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",93,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_94_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",94,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_95_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",95,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_96_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",96,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_97_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",97,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_98_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",98,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_99_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",99,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_100_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",100,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_101_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",101,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_102_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",102,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_103_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",103,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_104_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",104,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_105_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",105,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_106_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",106,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_107_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",107,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_108_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",108,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_109_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",109,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_110_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",110,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_111_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",111,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_112_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",112,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_113_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",113,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_114_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",114,0x5fb867bb)
HX_LOCAL_STACK_FRAME(_hx_pos_410ccb691917537a_115_boot,"openfl.ui.Keyboard","boot",0xc2cf2c3d,"openfl.ui.Keyboard.boot","openfl/ui/Keyboard.hx",115,0x5fb867bb)
namespace openfl{
namespace ui{

void Keyboard_obj::__construct() { }

Dynamic Keyboard_obj::__CreateEmpty() { return new Keyboard_obj; }

void *Keyboard_obj::_hx_vtable = 0;

Dynamic Keyboard_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Keyboard_obj > _hx_result = new Keyboard_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Keyboard_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2dde5f8f;
}

int Keyboard_obj::NUMBER_0;

int Keyboard_obj::NUMBER_1;

int Keyboard_obj::NUMBER_2;

int Keyboard_obj::NUMBER_3;

int Keyboard_obj::NUMBER_4;

int Keyboard_obj::NUMBER_5;

int Keyboard_obj::NUMBER_6;

int Keyboard_obj::NUMBER_7;

int Keyboard_obj::NUMBER_8;

int Keyboard_obj::NUMBER_9;

int Keyboard_obj::A;

int Keyboard_obj::B;

int Keyboard_obj::C;

int Keyboard_obj::D;

int Keyboard_obj::E;

int Keyboard_obj::F;

int Keyboard_obj::G;

int Keyboard_obj::H;

int Keyboard_obj::I;

int Keyboard_obj::J;

int Keyboard_obj::K;

int Keyboard_obj::L;

int Keyboard_obj::M;

int Keyboard_obj::N;

int Keyboard_obj::O;

int Keyboard_obj::P;

int Keyboard_obj::Q;

int Keyboard_obj::R;

int Keyboard_obj::S;

int Keyboard_obj::T;

int Keyboard_obj::U;

int Keyboard_obj::V;

int Keyboard_obj::W;

int Keyboard_obj::X;

int Keyboard_obj::Y;

int Keyboard_obj::Z;

int Keyboard_obj::NUMPAD_0;

int Keyboard_obj::NUMPAD_1;

int Keyboard_obj::NUMPAD_2;

int Keyboard_obj::NUMPAD_3;

int Keyboard_obj::NUMPAD_4;

int Keyboard_obj::NUMPAD_5;

int Keyboard_obj::NUMPAD_6;

int Keyboard_obj::NUMPAD_7;

int Keyboard_obj::NUMPAD_8;

int Keyboard_obj::NUMPAD_9;

int Keyboard_obj::NUMPAD_MULTIPLY;

int Keyboard_obj::NUMPAD_ADD;

int Keyboard_obj::NUMPAD_ENTER;

int Keyboard_obj::NUMPAD_SUBTRACT;

int Keyboard_obj::NUMPAD_DECIMAL;

int Keyboard_obj::NUMPAD_DIVIDE;

int Keyboard_obj::F1;

int Keyboard_obj::F2;

int Keyboard_obj::F3;

int Keyboard_obj::F4;

int Keyboard_obj::F5;

int Keyboard_obj::F6;

int Keyboard_obj::F7;

int Keyboard_obj::F8;

int Keyboard_obj::F9;

int Keyboard_obj::F10;

int Keyboard_obj::F11;

int Keyboard_obj::F12;

int Keyboard_obj::F13;

int Keyboard_obj::F14;

int Keyboard_obj::F15;

int Keyboard_obj::BACKSPACE;

int Keyboard_obj::TAB;

int Keyboard_obj::ALTERNATE;

int Keyboard_obj::ENTER;

int Keyboard_obj::COMMAND;

int Keyboard_obj::SHIFT;

int Keyboard_obj::CONTROL;

int Keyboard_obj::BREAK;

int Keyboard_obj::CAPS_LOCK;

int Keyboard_obj::NUMPAD;

int Keyboard_obj::ESCAPE;

int Keyboard_obj::SPACE;

int Keyboard_obj::PAGE_UP;

int Keyboard_obj::PAGE_DOWN;

int Keyboard_obj::END;

int Keyboard_obj::HOME;

int Keyboard_obj::LEFT;

int Keyboard_obj::RIGHT;

int Keyboard_obj::UP;

int Keyboard_obj::DOWN;

int Keyboard_obj::INSERT;

int Keyboard_obj::DELETE;

int Keyboard_obj::NUMLOCK;

int Keyboard_obj::SEMICOLON;

int Keyboard_obj::EQUAL;

int Keyboard_obj::COMMA;

int Keyboard_obj::MINUS;

int Keyboard_obj::PERIOD;

int Keyboard_obj::SLASH;

int Keyboard_obj::BACKQUOTE;

int Keyboard_obj::LEFTBRACKET;

int Keyboard_obj::BACKSLASH;

int Keyboard_obj::RIGHTBRACKET;

int Keyboard_obj::QUOTE;

bool Keyboard_obj::capsLock;

bool Keyboard_obj::numLock;

bool Keyboard_obj::isAccessible(){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_124_isAccessible)
HXDLIN( 124)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Keyboard_obj,isAccessible,return )

int Keyboard_obj::_hx___convertKeyCode(int key){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_131___convertKeyCode)
HXDLIN( 131)		switch((int)(key)){
            			case (int)8: {
HXLINE( 133)				return (int)8;
            			}
            			break;
            			case (int)9: {
HXLINE( 134)				return (int)9;
            			}
            			break;
            			case (int)13: {
HXLINE( 135)				return (int)13;
            			}
            			break;
            			case (int)27: {
HXLINE( 136)				return (int)27;
            			}
            			break;
            			case (int)32: {
HXLINE( 137)				return (int)32;
            			}
            			break;
            			case (int)33: {
HXLINE( 138)				return (int)49;
            			}
            			break;
            			case (int)34: {
HXLINE( 139)				return (int)222;
            			}
            			break;
            			case (int)35: {
HXLINE( 140)				return (int)51;
            			}
            			break;
            			case (int)36: {
HXLINE( 141)				return (int)52;
            			}
            			break;
            			case (int)37: {
HXLINE( 142)				return (int)53;
            			}
            			break;
            			case (int)38: {
HXLINE( 143)				return (int)55;
            			}
            			break;
            			case (int)39: {
HXLINE( 144)				return (int)222;
            			}
            			break;
            			case (int)40: {
HXLINE( 145)				return (int)57;
            			}
            			break;
            			case (int)41: {
HXLINE( 146)				return (int)48;
            			}
            			break;
            			case (int)42: {
HXLINE( 147)				return (int)56;
            			}
            			break;
            			case (int)44: {
HXLINE( 149)				return (int)188;
            			}
            			break;
            			case (int)45: {
HXLINE( 150)				return (int)189;
            			}
            			break;
            			case (int)46: {
HXLINE( 151)				return (int)190;
            			}
            			break;
            			case (int)47: {
HXLINE( 152)				return (int)191;
            			}
            			break;
            			case (int)48: {
HXLINE( 153)				return (int)48;
            			}
            			break;
            			case (int)49: {
HXLINE( 154)				return (int)49;
            			}
            			break;
            			case (int)50: {
HXLINE( 155)				return (int)50;
            			}
            			break;
            			case (int)51: {
HXLINE( 156)				return (int)51;
            			}
            			break;
            			case (int)52: {
HXLINE( 157)				return (int)52;
            			}
            			break;
            			case (int)53: {
HXLINE( 158)				return (int)53;
            			}
            			break;
            			case (int)54: {
HXLINE( 159)				return (int)54;
            			}
            			break;
            			case (int)55: {
HXLINE( 160)				return (int)55;
            			}
            			break;
            			case (int)56: {
HXLINE( 161)				return (int)56;
            			}
            			break;
            			case (int)57: {
HXLINE( 162)				return (int)57;
            			}
            			break;
            			case (int)58: {
HXLINE( 163)				return (int)186;
            			}
            			break;
            			case (int)59: {
HXLINE( 164)				return (int)186;
            			}
            			break;
            			case (int)60: {
HXLINE( 165)				return (int)60;
            			}
            			break;
            			case (int)61: {
HXLINE( 166)				return (int)187;
            			}
            			break;
            			case (int)62: {
HXLINE( 167)				return (int)190;
            			}
            			break;
            			case (int)63: {
HXLINE( 168)				return (int)191;
            			}
            			break;
            			case (int)64: {
HXLINE( 169)				return (int)50;
            			}
            			break;
            			case (int)91: {
HXLINE( 170)				return (int)219;
            			}
            			break;
            			case (int)92: {
HXLINE( 171)				return (int)220;
            			}
            			break;
            			case (int)93: {
HXLINE( 172)				return (int)221;
            			}
            			break;
            			case (int)94: {
HXLINE( 173)				return (int)54;
            			}
            			break;
            			case (int)95: {
HXLINE( 174)				return (int)189;
            			}
            			break;
            			case (int)96: {
HXLINE( 175)				return (int)192;
            			}
            			break;
            			case (int)97: {
HXLINE( 176)				return (int)65;
            			}
            			break;
            			case (int)98: {
HXLINE( 177)				return (int)66;
            			}
            			break;
            			case (int)99: {
HXLINE( 178)				return (int)67;
            			}
            			break;
            			case (int)100: {
HXLINE( 179)				return (int)68;
            			}
            			break;
            			case (int)101: {
HXLINE( 180)				return (int)69;
            			}
            			break;
            			case (int)102: {
HXLINE( 181)				return (int)70;
            			}
            			break;
            			case (int)103: {
HXLINE( 182)				return (int)71;
            			}
            			break;
            			case (int)104: {
HXLINE( 183)				return (int)72;
            			}
            			break;
            			case (int)105: {
HXLINE( 184)				return (int)73;
            			}
            			break;
            			case (int)106: {
HXLINE( 185)				return (int)74;
            			}
            			break;
            			case (int)107: {
HXLINE( 186)				return (int)75;
            			}
            			break;
            			case (int)108: {
HXLINE( 187)				return (int)76;
            			}
            			break;
            			case (int)109: {
HXLINE( 188)				return (int)77;
            			}
            			break;
            			case (int)110: {
HXLINE( 189)				return (int)78;
            			}
            			break;
            			case (int)111: {
HXLINE( 190)				return (int)79;
            			}
            			break;
            			case (int)112: {
HXLINE( 191)				return (int)80;
            			}
            			break;
            			case (int)113: {
HXLINE( 192)				return (int)81;
            			}
            			break;
            			case (int)114: {
HXLINE( 193)				return (int)82;
            			}
            			break;
            			case (int)115: {
HXLINE( 194)				return (int)83;
            			}
            			break;
            			case (int)116: {
HXLINE( 195)				return (int)84;
            			}
            			break;
            			case (int)117: {
HXLINE( 196)				return (int)85;
            			}
            			break;
            			case (int)118: {
HXLINE( 197)				return (int)86;
            			}
            			break;
            			case (int)119: {
HXLINE( 198)				return (int)87;
            			}
            			break;
            			case (int)120: {
HXLINE( 199)				return (int)88;
            			}
            			break;
            			case (int)121: {
HXLINE( 200)				return (int)89;
            			}
            			break;
            			case (int)122: {
HXLINE( 201)				return (int)90;
            			}
            			break;
            			case (int)127: {
HXLINE( 202)				return (int)46;
            			}
            			break;
            			case (int)1073741881: {
HXLINE( 203)				return (int)20;
            			}
            			break;
            			case (int)1073741882: {
HXLINE( 204)				return (int)112;
            			}
            			break;
            			case (int)1073741883: {
HXLINE( 205)				return (int)113;
            			}
            			break;
            			case (int)1073741884: {
HXLINE( 206)				return (int)114;
            			}
            			break;
            			case (int)1073741885: {
HXLINE( 207)				return (int)115;
            			}
            			break;
            			case (int)1073741886: {
HXLINE( 208)				return (int)116;
            			}
            			break;
            			case (int)1073741887: {
HXLINE( 209)				return (int)117;
            			}
            			break;
            			case (int)1073741888: {
HXLINE( 210)				return (int)118;
            			}
            			break;
            			case (int)1073741889: {
HXLINE( 211)				return (int)119;
            			}
            			break;
            			case (int)1073741890: {
HXLINE( 212)				return (int)120;
            			}
            			break;
            			case (int)1073741891: {
HXLINE( 213)				return (int)121;
            			}
            			break;
            			case (int)1073741892: {
HXLINE( 214)				return (int)122;
            			}
            			break;
            			case (int)1073741893: {
HXLINE( 215)				return (int)123;
            			}
            			break;
            			case (int)1073741894: {
HXLINE( 216)				return (int)301;
            			}
            			break;
            			case (int)1073741895: {
HXLINE( 217)				return (int)145;
            			}
            			break;
            			case (int)1073741896: {
HXLINE( 218)				return (int)19;
            			}
            			break;
            			case (int)1073741897: {
HXLINE( 219)				return (int)45;
            			}
            			break;
            			case (int)1073741898: {
HXLINE( 220)				return (int)36;
            			}
            			break;
            			case (int)1073741899: {
HXLINE( 221)				return (int)33;
            			}
            			break;
            			case (int)1073741901: {
HXLINE( 222)				return (int)35;
            			}
            			break;
            			case (int)1073741902: {
HXLINE( 223)				return (int)34;
            			}
            			break;
            			case (int)1073741903: {
HXLINE( 224)				return (int)39;
            			}
            			break;
            			case (int)1073741904: {
HXLINE( 225)				return (int)37;
            			}
            			break;
            			case (int)1073741905: {
HXLINE( 226)				return (int)40;
            			}
            			break;
            			case (int)1073741906: {
HXLINE( 227)				return (int)38;
            			}
            			break;
            			case (int)1073741907: {
HXLINE( 228)				return (int)144;
            			}
            			break;
            			case (int)1073741908: {
HXLINE( 229)				return (int)111;
            			}
            			break;
            			case (int)1073741909: {
HXLINE( 230)				return (int)106;
            			}
            			break;
            			case (int)1073741910: {
HXLINE( 231)				return (int)109;
            			}
            			break;
            			case (int)1073741911: {
HXLINE( 232)				return (int)107;
            			}
            			break;
            			case (int)1073741912: {
HXLINE( 233)				return (int)108;
            			}
            			break;
            			case (int)1073741913: {
HXLINE( 234)				return (int)97;
            			}
            			break;
            			case (int)1073741914: {
HXLINE( 235)				return (int)98;
            			}
            			break;
            			case (int)1073741915: {
HXLINE( 236)				return (int)99;
            			}
            			break;
            			case (int)1073741916: {
HXLINE( 237)				return (int)100;
            			}
            			break;
            			case (int)1073741917: {
HXLINE( 238)				return (int)101;
            			}
            			break;
            			case (int)1073741918: {
HXLINE( 239)				return (int)102;
            			}
            			break;
            			case (int)1073741919: {
HXLINE( 240)				return (int)103;
            			}
            			break;
            			case (int)1073741920: {
HXLINE( 241)				return (int)104;
            			}
            			break;
            			case (int)1073741921: {
HXLINE( 242)				return (int)105;
            			}
            			break;
            			case (int)1073741922: {
HXLINE( 243)				return (int)96;
            			}
            			break;
            			case (int)1073741923: {
HXLINE( 244)				return (int)110;
            			}
            			break;
            			case (int)1073741925: {
HXLINE( 245)				return (int)302;
            			}
            			break;
            			case (int)1073741928: {
HXLINE( 248)				return (int)124;
            			}
            			break;
            			case (int)1073741929: {
HXLINE( 249)				return (int)125;
            			}
            			break;
            			case (int)1073741930: {
HXLINE( 250)				return (int)126;
            			}
            			break;
            			case (int)1073741982: {
HXLINE( 281)				return (int)13;
            			}
            			break;
            			case (int)1073742044: {
HXLINE( 332)				return (int)110;
            			}
            			break;
            			case (int)1073742048: {
HXLINE( 334)				return (int)17;
            			}
            			break;
            			case (int)1073742049: {
HXLINE( 335)				return (int)16;
            			}
            			break;
            			case (int)1073742050: {
HXLINE( 336)				return (int)18;
            			}
            			break;
            			case (int)1073742051: {
HXLINE( 337)				return (int)15;
            			}
            			break;
            			case (int)1073742052: {
HXLINE( 338)				return (int)17;
            			}
            			break;
            			case (int)1073742053: {
HXLINE( 339)				return (int)16;
            			}
            			break;
            			case (int)1073742054: {
HXLINE( 340)				return (int)18;
            			}
            			break;
            			case (int)1073742055: {
HXLINE( 341)				return (int)15;
            			}
            			break;
            			default:{
HXLINE( 368)				return key;
            			}
            		}
HXLINE( 131)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,_hx___convertKeyCode,return )

int Keyboard_obj::_hx___getCharCode(int key,hx::Null< bool >  __o_shift){
bool shift = __o_shift.Default(false);
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_375___getCharCode)
HXLINE( 377)		if (!(shift)) {
HXLINE( 379)			switch((int)(key)){
            				case (int)8: {
HXLINE( 381)					return (int)8;
            				}
            				break;
            				case (int)9: {
HXLINE( 382)					return (int)9;
            				}
            				break;
            				case (int)13: {
HXLINE( 383)					return (int)13;
            				}
            				break;
            				case (int)27: {
HXLINE( 384)					return (int)27;
            				}
            				break;
            				case (int)32: {
HXLINE( 385)					return (int)32;
            				}
            				break;
            				case (int)186: {
HXLINE( 386)					return (int)59;
            				}
            				break;
            				case (int)187: {
HXLINE( 387)					return (int)61;
            				}
            				break;
            				case (int)188: {
HXLINE( 388)					return (int)44;
            				}
            				break;
            				case (int)189: {
HXLINE( 389)					return (int)45;
            				}
            				break;
            				case (int)190: {
HXLINE( 390)					return (int)46;
            				}
            				break;
            				case (int)191: {
HXLINE( 391)					return (int)47;
            				}
            				break;
            				case (int)192: {
HXLINE( 392)					return (int)96;
            				}
            				break;
            				case (int)219: {
HXLINE( 393)					return (int)91;
            				}
            				break;
            				case (int)220: {
HXLINE( 394)					return (int)92;
            				}
            				break;
            				case (int)221: {
HXLINE( 395)					return (int)93;
            				}
            				break;
            				case (int)222: {
HXLINE( 396)					return (int)39;
            				}
            				break;
            			}
HXLINE( 400)			bool _hx_tmp;
HXDLIN( 400)			if ((key >= (int)48)) {
HXLINE( 400)				_hx_tmp = (key <= (int)57);
            			}
            			else {
HXLINE( 400)				_hx_tmp = false;
            			}
HXDLIN( 400)			if (_hx_tmp) {
HXLINE( 402)				return ((key - (int)48) + (int)48);
            			}
HXLINE( 406)			bool _hx_tmp1;
HXDLIN( 406)			if ((key >= (int)65)) {
HXLINE( 406)				_hx_tmp1 = (key <= (int)90);
            			}
            			else {
HXLINE( 406)				_hx_tmp1 = false;
            			}
HXDLIN( 406)			if (_hx_tmp1) {
HXLINE( 408)				return ((key - (int)65) + (int)97);
            			}
            		}
            		else {
HXLINE( 414)			switch((int)(key)){
            				case (int)48: {
HXLINE( 416)					return (int)41;
            				}
            				break;
            				case (int)49: {
HXLINE( 417)					return (int)33;
            				}
            				break;
            				case (int)50: {
HXLINE( 418)					return (int)64;
            				}
            				break;
            				case (int)51: {
HXLINE( 419)					return (int)35;
            				}
            				break;
            				case (int)52: {
HXLINE( 420)					return (int)36;
            				}
            				break;
            				case (int)53: {
HXLINE( 421)					return (int)37;
            				}
            				break;
            				case (int)54: {
HXLINE( 422)					return (int)94;
            				}
            				break;
            				case (int)55: {
HXLINE( 423)					return (int)38;
            				}
            				break;
            				case (int)56: {
HXLINE( 424)					return (int)42;
            				}
            				break;
            				case (int)57: {
HXLINE( 425)					return (int)40;
            				}
            				break;
            				case (int)186: {
HXLINE( 426)					return (int)58;
            				}
            				break;
            				case (int)187: {
HXLINE( 427)					return (int)43;
            				}
            				break;
            				case (int)188: {
HXLINE( 428)					return (int)60;
            				}
            				break;
            				case (int)189: {
HXLINE( 429)					return (int)95;
            				}
            				break;
            				case (int)190: {
HXLINE( 430)					return (int)62;
            				}
            				break;
            				case (int)191: {
HXLINE( 431)					return (int)63;
            				}
            				break;
            				case (int)192: {
HXLINE( 432)					return (int)126;
            				}
            				break;
            				case (int)219: {
HXLINE( 433)					return (int)123;
            				}
            				break;
            				case (int)220: {
HXLINE( 434)					return (int)124;
            				}
            				break;
            				case (int)221: {
HXLINE( 435)					return (int)125;
            				}
            				break;
            				case (int)222: {
HXLINE( 436)					return (int)34;
            				}
            				break;
            			}
HXLINE( 440)			bool _hx_tmp2;
HXDLIN( 440)			if ((key >= (int)65)) {
HXLINE( 440)				_hx_tmp2 = (key <= (int)90);
            			}
            			else {
HXLINE( 440)				_hx_tmp2 = false;
            			}
HXDLIN( 440)			if (_hx_tmp2) {
HXLINE( 442)				return ((key - (int)65) + (int)65);
            			}
            		}
HXLINE( 448)		bool _hx_tmp3;
HXDLIN( 448)		if ((key >= (int)96)) {
HXLINE( 448)			_hx_tmp3 = (key <= (int)105);
            		}
            		else {
HXLINE( 448)			_hx_tmp3 = false;
            		}
HXDLIN( 448)		if (_hx_tmp3) {
HXLINE( 450)			return ((key - (int)96) + (int)48);
            		}
HXLINE( 454)		switch((int)(key)){
            			case (int)8: {
HXLINE( 463)				return (int)8;
            			}
            			break;
            			case (int)13: {
HXLINE( 462)				return (int)13;
            			}
            			break;
            			case (int)46: {
HXLINE( 461)				return (int)127;
            			}
            			break;
            			case (int)106: {
HXLINE( 456)				return (int)42;
            			}
            			break;
            			case (int)107: {
HXLINE( 457)				return (int)43;
            			}
            			break;
            			case (int)108: {
HXLINE( 458)				return (int)44;
            			}
            			break;
            			case (int)110: {
HXLINE( 459)				return (int)45;
            			}
            			break;
            			case (int)111: {
HXLINE( 460)				return (int)46;
            			}
            			break;
            		}
HXLINE( 467)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Keyboard_obj,_hx___getCharCode,return )

int Keyboard_obj::_hx___getKeyLocation(int key){
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_474___getKeyLocation)
HXDLIN( 474)		switch((int)(key)){
            			case (int)1073741908: case (int)1073741909: case (int)1073741910: case (int)1073741911: case (int)1073741912: case (int)1073741913: case (int)1073741914: case (int)1073741915: case (int)1073741916: case (int)1073741917: case (int)1073741918: case (int)1073741919: case (int)1073741920: case (int)1073741921: case (int)1073741922: case (int)1073741923: case (int)1073742044: {
HXLINE( 481)				return (int)3;
            			}
            			break;
            			case (int)1073742048: case (int)1073742049: case (int)1073742050: case (int)1073742051: {
HXLINE( 476)				return (int)1;
            			}
            			break;
            			case (int)1073742052: case (int)1073742053: case (int)1073742054: case (int)1073742055: {
HXLINE( 477)				return (int)2;
            			}
            			break;
            			default:{
HXLINE( 482)				return (int)0;
            			}
            		}
HXLINE( 474)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Keyboard_obj,_hx___getKeyLocation,return )


Keyboard_obj::Keyboard_obj()
{
}

bool Keyboard_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"numLock") ) { outValue = ( numLock ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capsLock") ) { outValue = ( capsLock ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isAccessible") ) { outValue = isAccessible_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__getCharCode") ) { outValue = _hx___getCharCode_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__convertKeyCode") ) { outValue = _hx___convertKeyCode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getKeyLocation") ) { outValue = _hx___getKeyLocation_dyn(); return true; }
	}
	return false;
}

bool Keyboard_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"numLock") ) { numLock=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"capsLock") ) { capsLock=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Keyboard_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Keyboard_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_0,HX_HCSTRING("NUMBER_0","\xfa","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_1,HX_HCSTRING("NUMBER_1","\xfb","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_2,HX_HCSTRING("NUMBER_2","\xfc","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_3,HX_HCSTRING("NUMBER_3","\xfd","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_4,HX_HCSTRING("NUMBER_4","\xfe","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_5,HX_HCSTRING("NUMBER_5","\xff","\x89","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_6,HX_HCSTRING("NUMBER_6","\x00","\x8a","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_7,HX_HCSTRING("NUMBER_7","\x01","\x8a","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_8,HX_HCSTRING("NUMBER_8","\x02","\x8a","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMBER_9,HX_HCSTRING("NUMBER_9","\x03","\x8a","\xc6","\x33")},
	{hx::fsInt,(void *) &Keyboard_obj::A,HX_HCSTRING("A","\x41","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::B,HX_HCSTRING("B","\x42","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::C,HX_HCSTRING("C","\x43","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::D,HX_HCSTRING("D","\x44","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::E,HX_HCSTRING("E","\x45","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F,HX_HCSTRING("F","\x46","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::G,HX_HCSTRING("G","\x47","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::H,HX_HCSTRING("H","\x48","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::I,HX_HCSTRING("I","\x49","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::J,HX_HCSTRING("J","\x4a","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::K,HX_HCSTRING("K","\x4b","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::L,HX_HCSTRING("L","\x4c","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::M,HX_HCSTRING("M","\x4d","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::N,HX_HCSTRING("N","\x4e","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::O,HX_HCSTRING("O","\x4f","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::P,HX_HCSTRING("P","\x50","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::Q,HX_HCSTRING("Q","\x51","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::R,HX_HCSTRING("R","\x52","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::S,HX_HCSTRING("S","\x53","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::T,HX_HCSTRING("T","\x54","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::U,HX_HCSTRING("U","\x55","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::V,HX_HCSTRING("V","\x56","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::W,HX_HCSTRING("W","\x57","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::X,HX_HCSTRING("X","\x58","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::Y,HX_HCSTRING("Y","\x59","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::Z,HX_HCSTRING("Z","\x5a","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_0,HX_HCSTRING("NUMPAD_0","\xfe","\x2e","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_1,HX_HCSTRING("NUMPAD_1","\xff","\x2e","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_2,HX_HCSTRING("NUMPAD_2","\x00","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_3,HX_HCSTRING("NUMPAD_3","\x01","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_4,HX_HCSTRING("NUMPAD_4","\x02","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_5,HX_HCSTRING("NUMPAD_5","\x03","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_6,HX_HCSTRING("NUMPAD_6","\x04","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_7,HX_HCSTRING("NUMPAD_7","\x05","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_8,HX_HCSTRING("NUMPAD_8","\x06","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_9,HX_HCSTRING("NUMPAD_9","\x07","\x2f","\xb3","\x40")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_MULTIPLY,HX_HCSTRING("NUMPAD_MULTIPLY","\x16","\xd9","\xd8","\x96")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_ADD,HX_HCSTRING("NUMPAD_ADD","\x4f","\x8c","\x28","\x37")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_ENTER,HX_HCSTRING("NUMPAD_ENTER","\xc6","\x52","\xe2","\x0f")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_SUBTRACT,HX_HCSTRING("NUMPAD_SUBTRACT","\x06","\x6c","\x5d","\xf4")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_DECIMAL,HX_HCSTRING("NUMPAD_DECIMAL","\xbf","\xc5","\x36","\x01")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD_DIVIDE,HX_HCSTRING("NUMPAD_DIVIDE","\xeb","\x41","\x1f","\x90")},
	{hx::fsInt,(void *) &Keyboard_obj::F1,HX_HCSTRING("F1","\x2b","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F2,HX_HCSTRING("F2","\x2c","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F3,HX_HCSTRING("F3","\x2d","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F4,HX_HCSTRING("F4","\x2e","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F5,HX_HCSTRING("F5","\x2f","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F6,HX_HCSTRING("F6","\x30","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F7,HX_HCSTRING("F7","\x31","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F8,HX_HCSTRING("F8","\x32","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F9,HX_HCSTRING("F9","\x33","\x3d","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F10,HX_HCSTRING("F10","\xa5","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F11,HX_HCSTRING("F11","\xa6","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F12,HX_HCSTRING("F12","\xa7","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F13,HX_HCSTRING("F13","\xa8","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F14,HX_HCSTRING("F14","\xa9","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::F15,HX_HCSTRING("F15","\xaa","\x48","\x35","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::BACKSPACE,HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6")},
	{hx::fsInt,(void *) &Keyboard_obj::TAB,HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::ALTERNATE,HX_HCSTRING("ALTERNATE","\x1a","\x39","\x8c","\x30")},
	{hx::fsInt,(void *) &Keyboard_obj::ENTER,HX_HCSTRING("ENTER","\xf8","\xa4","\x74","\xee")},
	{hx::fsInt,(void *) &Keyboard_obj::COMMAND,HX_HCSTRING("COMMAND","\x2b","\x45","\x41","\x01")},
	{hx::fsInt,(void *) &Keyboard_obj::SHIFT,HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa")},
	{hx::fsInt,(void *) &Keyboard_obj::CONTROL,HX_HCSTRING("CONTROL","\x3d","\x3f","\x55","\x99")},
	{hx::fsInt,(void *) &Keyboard_obj::BREAK,HX_HCSTRING("BREAK","\x9f","\x5c","\xda","\x36")},
	{hx::fsInt,(void *) &Keyboard_obj::CAPS_LOCK,HX_HCSTRING("CAPS_LOCK","\x09","\x04","\xdb","\xce")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMPAD,HX_HCSTRING("NUMPAD","\xcd","\xce","\x07","\x54")},
	{hx::fsInt,(void *) &Keyboard_obj::ESCAPE,HX_HCSTRING("ESCAPE","\x81","\xef","\x5c","\x8d")},
	{hx::fsInt,(void *) &Keyboard_obj::SPACE,HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff")},
	{hx::fsInt,(void *) &Keyboard_obj::PAGE_UP,HX_HCSTRING("PAGE_UP","\x8b","\xd9","\x3e","\x0b")},
	{hx::fsInt,(void *) &Keyboard_obj::PAGE_DOWN,HX_HCSTRING("PAGE_DOWN","\x92","\x7b","\x93","\x70")},
	{hx::fsInt,(void *) &Keyboard_obj::END,HX_HCSTRING("END","\xbb","\x9f","\x34","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::HOME,HX_HCSTRING("HOME","\x1f","\x92","\xd3","\x2f")},
	{hx::fsInt,(void *) &Keyboard_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsInt,(void *) &Keyboard_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsInt,(void *) &Keyboard_obj::UP,HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00")},
	{hx::fsInt,(void *) &Keyboard_obj::DOWN,HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d")},
	{hx::fsInt,(void *) &Keyboard_obj::INSERT,HX_HCSTRING("INSERT","\x39","\xef","\x5f","\x50")},
	{hx::fsInt,(void *) &Keyboard_obj::DELETE,HX_HCSTRING("DELETE","\x2b","\x6c","\x5b","\x1d")},
	{hx::fsInt,(void *) &Keyboard_obj::NUMLOCK,HX_HCSTRING("NUMLOCK","\x11","\xe9","\x32","\x30")},
	{hx::fsInt,(void *) &Keyboard_obj::SEMICOLON,HX_HCSTRING("SEMICOLON","\x11","\x86","\x2a","\x49")},
	{hx::fsInt,(void *) &Keyboard_obj::EQUAL,HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0")},
	{hx::fsInt,(void *) &Keyboard_obj::COMMA,HX_HCSTRING("COMMA","\xb5","\x69","\x4b","\xc8")},
	{hx::fsInt,(void *) &Keyboard_obj::MINUS,HX_HCSTRING("MINUS","\x50","\xb8","\x56","\x86")},
	{hx::fsInt,(void *) &Keyboard_obj::PERIOD,HX_HCSTRING("PERIOD","\x01","\x0d","\x9e","\xed")},
	{hx::fsInt,(void *) &Keyboard_obj::SLASH,HX_HCSTRING("SLASH","\x1d","\xf8","\xaf","\xfc")},
	{hx::fsInt,(void *) &Keyboard_obj::BACKQUOTE,HX_HCSTRING("BACKQUOTE","\x95","\x8b","\xce","\xa2")},
	{hx::fsInt,(void *) &Keyboard_obj::LEFTBRACKET,HX_HCSTRING("LEFTBRACKET","\xe1","\xa8","\x04","\xa4")},
	{hx::fsInt,(void *) &Keyboard_obj::BACKSLASH,HX_HCSTRING("BACKSLASH","\x96","\x28","\x9e","\xc3")},
	{hx::fsInt,(void *) &Keyboard_obj::RIGHTBRACKET,HX_HCSTRING("RIGHTBRACKET","\xcc","\x45","\x32","\x57")},
	{hx::fsInt,(void *) &Keyboard_obj::QUOTE,HX_HCSTRING("QUOTE","\x1c","\x5b","\xe0","\xdb")},
	{hx::fsBool,(void *) &Keyboard_obj::capsLock,HX_HCSTRING("capsLock","\xac","\x08","\xc2","\x11")},
	{hx::fsBool,(void *) &Keyboard_obj::numLock,HX_HCSTRING("numLock","\x51","\x41","\x38","\x9b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Keyboard_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Keyboard_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_0,"NUMBER_0");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_1,"NUMBER_1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_2,"NUMBER_2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_3,"NUMBER_3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_4,"NUMBER_4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_5,"NUMBER_5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_6,"NUMBER_6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_7,"NUMBER_7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_8,"NUMBER_8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMBER_9,"NUMBER_9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::A,"A");
	HX_MARK_MEMBER_NAME(Keyboard_obj::B,"B");
	HX_MARK_MEMBER_NAME(Keyboard_obj::C,"C");
	HX_MARK_MEMBER_NAME(Keyboard_obj::D,"D");
	HX_MARK_MEMBER_NAME(Keyboard_obj::E,"E");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F,"F");
	HX_MARK_MEMBER_NAME(Keyboard_obj::G,"G");
	HX_MARK_MEMBER_NAME(Keyboard_obj::H,"H");
	HX_MARK_MEMBER_NAME(Keyboard_obj::I,"I");
	HX_MARK_MEMBER_NAME(Keyboard_obj::J,"J");
	HX_MARK_MEMBER_NAME(Keyboard_obj::K,"K");
	HX_MARK_MEMBER_NAME(Keyboard_obj::L,"L");
	HX_MARK_MEMBER_NAME(Keyboard_obj::M,"M");
	HX_MARK_MEMBER_NAME(Keyboard_obj::N,"N");
	HX_MARK_MEMBER_NAME(Keyboard_obj::O,"O");
	HX_MARK_MEMBER_NAME(Keyboard_obj::P,"P");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Q,"Q");
	HX_MARK_MEMBER_NAME(Keyboard_obj::R,"R");
	HX_MARK_MEMBER_NAME(Keyboard_obj::S,"S");
	HX_MARK_MEMBER_NAME(Keyboard_obj::T,"T");
	HX_MARK_MEMBER_NAME(Keyboard_obj::U,"U");
	HX_MARK_MEMBER_NAME(Keyboard_obj::V,"V");
	HX_MARK_MEMBER_NAME(Keyboard_obj::W,"W");
	HX_MARK_MEMBER_NAME(Keyboard_obj::X,"X");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Y,"Y");
	HX_MARK_MEMBER_NAME(Keyboard_obj::Z,"Z");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_0,"NUMPAD_0");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_1,"NUMPAD_1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_2,"NUMPAD_2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_3,"NUMPAD_3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_4,"NUMPAD_4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_5,"NUMPAD_5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_6,"NUMPAD_6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_7,"NUMPAD_7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_8,"NUMPAD_8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_9,"NUMPAD_9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_MULTIPLY,"NUMPAD_MULTIPLY");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_ADD,"NUMPAD_ADD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_ENTER,"NUMPAD_ENTER");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_SUBTRACT,"NUMPAD_SUBTRACT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_DECIMAL,"NUMPAD_DECIMAL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD_DIVIDE,"NUMPAD_DIVIDE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F1,"F1");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F2,"F2");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F3,"F3");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F4,"F4");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F5,"F5");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F6,"F6");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F7,"F7");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F8,"F8");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F9,"F9");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F10,"F10");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F11,"F11");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F12,"F12");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F13,"F13");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F14,"F14");
	HX_MARK_MEMBER_NAME(Keyboard_obj::F15,"F15");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKSPACE,"BACKSPACE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::TAB,"TAB");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ALTERNATE,"ALTERNATE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ENTER,"ENTER");
	HX_MARK_MEMBER_NAME(Keyboard_obj::COMMAND,"COMMAND");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SHIFT,"SHIFT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::CONTROL,"CONTROL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BREAK,"BREAK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::CAPS_LOCK,"CAPS_LOCK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMPAD,"NUMPAD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::ESCAPE,"ESCAPE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SPACE,"SPACE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PAGE_UP,"PAGE_UP");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PAGE_DOWN,"PAGE_DOWN");
	HX_MARK_MEMBER_NAME(Keyboard_obj::END,"END");
	HX_MARK_MEMBER_NAME(Keyboard_obj::HOME,"HOME");
	HX_MARK_MEMBER_NAME(Keyboard_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::UP,"UP");
	HX_MARK_MEMBER_NAME(Keyboard_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(Keyboard_obj::INSERT,"INSERT");
	HX_MARK_MEMBER_NAME(Keyboard_obj::DELETE,"DELETE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::NUMLOCK,"NUMLOCK");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SEMICOLON,"SEMICOLON");
	HX_MARK_MEMBER_NAME(Keyboard_obj::EQUAL,"EQUAL");
	HX_MARK_MEMBER_NAME(Keyboard_obj::COMMA,"COMMA");
	HX_MARK_MEMBER_NAME(Keyboard_obj::MINUS,"MINUS");
	HX_MARK_MEMBER_NAME(Keyboard_obj::PERIOD,"PERIOD");
	HX_MARK_MEMBER_NAME(Keyboard_obj::SLASH,"SLASH");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKQUOTE,"BACKQUOTE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::LEFTBRACKET,"LEFTBRACKET");
	HX_MARK_MEMBER_NAME(Keyboard_obj::BACKSLASH,"BACKSLASH");
	HX_MARK_MEMBER_NAME(Keyboard_obj::RIGHTBRACKET,"RIGHTBRACKET");
	HX_MARK_MEMBER_NAME(Keyboard_obj::QUOTE,"QUOTE");
	HX_MARK_MEMBER_NAME(Keyboard_obj::capsLock,"capsLock");
	HX_MARK_MEMBER_NAME(Keyboard_obj::numLock,"numLock");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Keyboard_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Keyboard_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_0,"NUMBER_0");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_1,"NUMBER_1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_2,"NUMBER_2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_3,"NUMBER_3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_4,"NUMBER_4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_5,"NUMBER_5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_6,"NUMBER_6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_7,"NUMBER_7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_8,"NUMBER_8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMBER_9,"NUMBER_9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::A,"A");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::B,"B");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::C,"C");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::D,"D");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::E,"E");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F,"F");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::G,"G");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::H,"H");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::I,"I");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::J,"J");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::K,"K");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::L,"L");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::M,"M");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::N,"N");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::O,"O");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::P,"P");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Q,"Q");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::R,"R");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::S,"S");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::T,"T");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::U,"U");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::V,"V");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::W,"W");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::X,"X");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Y,"Y");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::Z,"Z");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_0,"NUMPAD_0");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_1,"NUMPAD_1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_2,"NUMPAD_2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_3,"NUMPAD_3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_4,"NUMPAD_4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_5,"NUMPAD_5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_6,"NUMPAD_6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_7,"NUMPAD_7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_8,"NUMPAD_8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_9,"NUMPAD_9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_MULTIPLY,"NUMPAD_MULTIPLY");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_ADD,"NUMPAD_ADD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_ENTER,"NUMPAD_ENTER");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_SUBTRACT,"NUMPAD_SUBTRACT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_DECIMAL,"NUMPAD_DECIMAL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD_DIVIDE,"NUMPAD_DIVIDE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F1,"F1");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F2,"F2");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F3,"F3");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F4,"F4");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F5,"F5");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F6,"F6");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F7,"F7");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F8,"F8");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F9,"F9");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F10,"F10");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F11,"F11");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F12,"F12");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F13,"F13");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F14,"F14");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::F15,"F15");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKSPACE,"BACKSPACE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::TAB,"TAB");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ALTERNATE,"ALTERNATE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ENTER,"ENTER");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::COMMAND,"COMMAND");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SHIFT,"SHIFT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::CONTROL,"CONTROL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BREAK,"BREAK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::CAPS_LOCK,"CAPS_LOCK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMPAD,"NUMPAD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::ESCAPE,"ESCAPE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SPACE,"SPACE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PAGE_UP,"PAGE_UP");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PAGE_DOWN,"PAGE_DOWN");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::END,"END");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::HOME,"HOME");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::INSERT,"INSERT");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::DELETE,"DELETE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::NUMLOCK,"NUMLOCK");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SEMICOLON,"SEMICOLON");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::EQUAL,"EQUAL");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::COMMA,"COMMA");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::MINUS,"MINUS");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::PERIOD,"PERIOD");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::SLASH,"SLASH");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKQUOTE,"BACKQUOTE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::LEFTBRACKET,"LEFTBRACKET");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::BACKSLASH,"BACKSLASH");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::RIGHTBRACKET,"RIGHTBRACKET");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::QUOTE,"QUOTE");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::capsLock,"capsLock");
	HX_VISIT_MEMBER_NAME(Keyboard_obj::numLock,"numLock");
};

#endif

hx::Class Keyboard_obj::__mClass;

static ::String Keyboard_obj_sStaticFields[] = {
	HX_HCSTRING("NUMBER_0","\xfa","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_1","\xfb","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_2","\xfc","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_3","\xfd","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_4","\xfe","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_5","\xff","\x89","\xc6","\x33"),
	HX_HCSTRING("NUMBER_6","\x00","\x8a","\xc6","\x33"),
	HX_HCSTRING("NUMBER_7","\x01","\x8a","\xc6","\x33"),
	HX_HCSTRING("NUMBER_8","\x02","\x8a","\xc6","\x33"),
	HX_HCSTRING("NUMBER_9","\x03","\x8a","\xc6","\x33"),
	HX_HCSTRING("A","\x41","\x00","\x00","\x00"),
	HX_HCSTRING("B","\x42","\x00","\x00","\x00"),
	HX_HCSTRING("C","\x43","\x00","\x00","\x00"),
	HX_HCSTRING("D","\x44","\x00","\x00","\x00"),
	HX_HCSTRING("E","\x45","\x00","\x00","\x00"),
	HX_HCSTRING("F","\x46","\x00","\x00","\x00"),
	HX_HCSTRING("G","\x47","\x00","\x00","\x00"),
	HX_HCSTRING("H","\x48","\x00","\x00","\x00"),
	HX_HCSTRING("I","\x49","\x00","\x00","\x00"),
	HX_HCSTRING("J","\x4a","\x00","\x00","\x00"),
	HX_HCSTRING("K","\x4b","\x00","\x00","\x00"),
	HX_HCSTRING("L","\x4c","\x00","\x00","\x00"),
	HX_HCSTRING("M","\x4d","\x00","\x00","\x00"),
	HX_HCSTRING("N","\x4e","\x00","\x00","\x00"),
	HX_HCSTRING("O","\x4f","\x00","\x00","\x00"),
	HX_HCSTRING("P","\x50","\x00","\x00","\x00"),
	HX_HCSTRING("Q","\x51","\x00","\x00","\x00"),
	HX_HCSTRING("R","\x52","\x00","\x00","\x00"),
	HX_HCSTRING("S","\x53","\x00","\x00","\x00"),
	HX_HCSTRING("T","\x54","\x00","\x00","\x00"),
	HX_HCSTRING("U","\x55","\x00","\x00","\x00"),
	HX_HCSTRING("V","\x56","\x00","\x00","\x00"),
	HX_HCSTRING("W","\x57","\x00","\x00","\x00"),
	HX_HCSTRING("X","\x58","\x00","\x00","\x00"),
	HX_HCSTRING("Y","\x59","\x00","\x00","\x00"),
	HX_HCSTRING("Z","\x5a","\x00","\x00","\x00"),
	HX_HCSTRING("NUMPAD_0","\xfe","\x2e","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_1","\xff","\x2e","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_2","\x00","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_3","\x01","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_4","\x02","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_5","\x03","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_6","\x04","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_7","\x05","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_8","\x06","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_9","\x07","\x2f","\xb3","\x40"),
	HX_HCSTRING("NUMPAD_MULTIPLY","\x16","\xd9","\xd8","\x96"),
	HX_HCSTRING("NUMPAD_ADD","\x4f","\x8c","\x28","\x37"),
	HX_HCSTRING("NUMPAD_ENTER","\xc6","\x52","\xe2","\x0f"),
	HX_HCSTRING("NUMPAD_SUBTRACT","\x06","\x6c","\x5d","\xf4"),
	HX_HCSTRING("NUMPAD_DECIMAL","\xbf","\xc5","\x36","\x01"),
	HX_HCSTRING("NUMPAD_DIVIDE","\xeb","\x41","\x1f","\x90"),
	HX_HCSTRING("F1","\x2b","\x3d","\x00","\x00"),
	HX_HCSTRING("F2","\x2c","\x3d","\x00","\x00"),
	HX_HCSTRING("F3","\x2d","\x3d","\x00","\x00"),
	HX_HCSTRING("F4","\x2e","\x3d","\x00","\x00"),
	HX_HCSTRING("F5","\x2f","\x3d","\x00","\x00"),
	HX_HCSTRING("F6","\x30","\x3d","\x00","\x00"),
	HX_HCSTRING("F7","\x31","\x3d","\x00","\x00"),
	HX_HCSTRING("F8","\x32","\x3d","\x00","\x00"),
	HX_HCSTRING("F9","\x33","\x3d","\x00","\x00"),
	HX_HCSTRING("F10","\xa5","\x48","\x35","\x00"),
	HX_HCSTRING("F11","\xa6","\x48","\x35","\x00"),
	HX_HCSTRING("F12","\xa7","\x48","\x35","\x00"),
	HX_HCSTRING("F13","\xa8","\x48","\x35","\x00"),
	HX_HCSTRING("F14","\xa9","\x48","\x35","\x00"),
	HX_HCSTRING("F15","\xaa","\x48","\x35","\x00"),
	HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6"),
	HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00"),
	HX_HCSTRING("ALTERNATE","\x1a","\x39","\x8c","\x30"),
	HX_HCSTRING("ENTER","\xf8","\xa4","\x74","\xee"),
	HX_HCSTRING("COMMAND","\x2b","\x45","\x41","\x01"),
	HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa"),
	HX_HCSTRING("CONTROL","\x3d","\x3f","\x55","\x99"),
	HX_HCSTRING("BREAK","\x9f","\x5c","\xda","\x36"),
	HX_HCSTRING("CAPS_LOCK","\x09","\x04","\xdb","\xce"),
	HX_HCSTRING("NUMPAD","\xcd","\xce","\x07","\x54"),
	HX_HCSTRING("ESCAPE","\x81","\xef","\x5c","\x8d"),
	HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff"),
	HX_HCSTRING("PAGE_UP","\x8b","\xd9","\x3e","\x0b"),
	HX_HCSTRING("PAGE_DOWN","\x92","\x7b","\x93","\x70"),
	HX_HCSTRING("END","\xbb","\x9f","\x34","\x00"),
	HX_HCSTRING("HOME","\x1f","\x92","\xd3","\x2f"),
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00"),
	HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d"),
	HX_HCSTRING("INSERT","\x39","\xef","\x5f","\x50"),
	HX_HCSTRING("DELETE","\x2b","\x6c","\x5b","\x1d"),
	HX_HCSTRING("NUMLOCK","\x11","\xe9","\x32","\x30"),
	HX_HCSTRING("SEMICOLON","\x11","\x86","\x2a","\x49"),
	HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0"),
	HX_HCSTRING("COMMA","\xb5","\x69","\x4b","\xc8"),
	HX_HCSTRING("MINUS","\x50","\xb8","\x56","\x86"),
	HX_HCSTRING("PERIOD","\x01","\x0d","\x9e","\xed"),
	HX_HCSTRING("SLASH","\x1d","\xf8","\xaf","\xfc"),
	HX_HCSTRING("BACKQUOTE","\x95","\x8b","\xce","\xa2"),
	HX_HCSTRING("LEFTBRACKET","\xe1","\xa8","\x04","\xa4"),
	HX_HCSTRING("BACKSLASH","\x96","\x28","\x9e","\xc3"),
	HX_HCSTRING("RIGHTBRACKET","\xcc","\x45","\x32","\x57"),
	HX_HCSTRING("QUOTE","\x1c","\x5b","\xe0","\xdb"),
	HX_HCSTRING("capsLock","\xac","\x08","\xc2","\x11"),
	HX_HCSTRING("numLock","\x51","\x41","\x38","\x9b"),
	HX_HCSTRING("isAccessible","\xc0","\x82","\xfd","\x3f"),
	HX_HCSTRING("__convertKeyCode","\xd9","\xcb","\x30","\x83"),
	HX_HCSTRING("__getCharCode","\xb9","\x62","\x90","\x0a"),
	HX_HCSTRING("__getKeyLocation","\x1e","\xc9","\x48","\xe9"),
	::String(null())
};

void Keyboard_obj::__register()
{
	hx::Object *dummy = new Keyboard_obj;
	Keyboard_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.ui.Keyboard","\x43","\xb4","\x37","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Keyboard_obj::__GetStatic;
	__mClass->mSetStaticField = &Keyboard_obj::__SetStatic;
	__mClass->mMarkFunc = Keyboard_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Keyboard_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Keyboard_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Keyboard_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Keyboard_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Keyboard_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Keyboard_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_15_boot)
HXDLIN(  15)		NUMBER_0 = (int)48;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_16_boot)
HXDLIN(  16)		NUMBER_1 = (int)49;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_17_boot)
HXDLIN(  17)		NUMBER_2 = (int)50;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_18_boot)
HXDLIN(  18)		NUMBER_3 = (int)51;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_19_boot)
HXDLIN(  19)		NUMBER_4 = (int)52;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_20_boot)
HXDLIN(  20)		NUMBER_5 = (int)53;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_21_boot)
HXDLIN(  21)		NUMBER_6 = (int)54;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_22_boot)
HXDLIN(  22)		NUMBER_7 = (int)55;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_23_boot)
HXDLIN(  23)		NUMBER_8 = (int)56;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_24_boot)
HXDLIN(  24)		NUMBER_9 = (int)57;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_25_boot)
HXDLIN(  25)		A = (int)65;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_26_boot)
HXDLIN(  26)		B = (int)66;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_27_boot)
HXDLIN(  27)		C = (int)67;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_28_boot)
HXDLIN(  28)		D = (int)68;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_29_boot)
HXDLIN(  29)		E = (int)69;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_30_boot)
HXDLIN(  30)		F = (int)70;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_31_boot)
HXDLIN(  31)		G = (int)71;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_32_boot)
HXDLIN(  32)		H = (int)72;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_33_boot)
HXDLIN(  33)		I = (int)73;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_34_boot)
HXDLIN(  34)		J = (int)74;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_35_boot)
HXDLIN(  35)		K = (int)75;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_36_boot)
HXDLIN(  36)		L = (int)76;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_37_boot)
HXDLIN(  37)		M = (int)77;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_38_boot)
HXDLIN(  38)		N = (int)78;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_39_boot)
HXDLIN(  39)		O = (int)79;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_40_boot)
HXDLIN(  40)		P = (int)80;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_41_boot)
HXDLIN(  41)		Q = (int)81;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_42_boot)
HXDLIN(  42)		R = (int)82;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_43_boot)
HXDLIN(  43)		S = (int)83;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_44_boot)
HXDLIN(  44)		T = (int)84;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_45_boot)
HXDLIN(  45)		U = (int)85;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_46_boot)
HXDLIN(  46)		V = (int)86;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_47_boot)
HXDLIN(  47)		W = (int)87;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_48_boot)
HXDLIN(  48)		X = (int)88;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_49_boot)
HXDLIN(  49)		Y = (int)89;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_50_boot)
HXDLIN(  50)		Z = (int)90;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_51_boot)
HXDLIN(  51)		NUMPAD_0 = (int)96;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_52_boot)
HXDLIN(  52)		NUMPAD_1 = (int)97;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_53_boot)
HXDLIN(  53)		NUMPAD_2 = (int)98;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_54_boot)
HXDLIN(  54)		NUMPAD_3 = (int)99;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_55_boot)
HXDLIN(  55)		NUMPAD_4 = (int)100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_56_boot)
HXDLIN(  56)		NUMPAD_5 = (int)101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_57_boot)
HXDLIN(  57)		NUMPAD_6 = (int)102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_58_boot)
HXDLIN(  58)		NUMPAD_7 = (int)103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_59_boot)
HXDLIN(  59)		NUMPAD_8 = (int)104;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_60_boot)
HXDLIN(  60)		NUMPAD_9 = (int)105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_61_boot)
HXDLIN(  61)		NUMPAD_MULTIPLY = (int)106;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_62_boot)
HXDLIN(  62)		NUMPAD_ADD = (int)107;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_63_boot)
HXDLIN(  63)		NUMPAD_ENTER = (int)108;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_64_boot)
HXDLIN(  64)		NUMPAD_SUBTRACT = (int)109;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_65_boot)
HXDLIN(  65)		NUMPAD_DECIMAL = (int)110;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_66_boot)
HXDLIN(  66)		NUMPAD_DIVIDE = (int)111;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_67_boot)
HXDLIN(  67)		F1 = (int)112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_68_boot)
HXDLIN(  68)		F2 = (int)113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_69_boot)
HXDLIN(  69)		F3 = (int)114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_70_boot)
HXDLIN(  70)		F4 = (int)115;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_71_boot)
HXDLIN(  71)		F5 = (int)116;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_72_boot)
HXDLIN(  72)		F6 = (int)117;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_73_boot)
HXDLIN(  73)		F7 = (int)118;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_74_boot)
HXDLIN(  74)		F8 = (int)119;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_75_boot)
HXDLIN(  75)		F9 = (int)120;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_76_boot)
HXDLIN(  76)		F10 = (int)121;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_77_boot)
HXDLIN(  77)		F11 = (int)122;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_78_boot)
HXDLIN(  78)		F12 = (int)123;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_79_boot)
HXDLIN(  79)		F13 = (int)124;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_80_boot)
HXDLIN(  80)		F14 = (int)125;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_81_boot)
HXDLIN(  81)		F15 = (int)126;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_82_boot)
HXDLIN(  82)		BACKSPACE = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_83_boot)
HXDLIN(  83)		TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_84_boot)
HXDLIN(  84)		ALTERNATE = (int)18;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_85_boot)
HXDLIN(  85)		ENTER = (int)13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_86_boot)
HXDLIN(  86)		COMMAND = (int)15;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_87_boot)
HXDLIN(  87)		SHIFT = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_88_boot)
HXDLIN(  88)		CONTROL = (int)17;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_89_boot)
HXDLIN(  89)		BREAK = (int)19;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_90_boot)
HXDLIN(  90)		CAPS_LOCK = (int)20;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_91_boot)
HXDLIN(  91)		NUMPAD = (int)21;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_92_boot)
HXDLIN(  92)		ESCAPE = (int)27;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_93_boot)
HXDLIN(  93)		SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_94_boot)
HXDLIN(  94)		PAGE_UP = (int)33;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_95_boot)
HXDLIN(  95)		PAGE_DOWN = (int)34;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_96_boot)
HXDLIN(  96)		END = (int)35;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_97_boot)
HXDLIN(  97)		HOME = (int)36;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_98_boot)
HXDLIN(  98)		LEFT = (int)37;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_99_boot)
HXDLIN(  99)		RIGHT = (int)39;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_100_boot)
HXDLIN( 100)		UP = (int)38;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_101_boot)
HXDLIN( 101)		DOWN = (int)40;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_102_boot)
HXDLIN( 102)		INSERT = (int)45;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_103_boot)
HXDLIN( 103)		DELETE = (int)46;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_104_boot)
HXDLIN( 104)		NUMLOCK = (int)144;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_105_boot)
HXDLIN( 105)		SEMICOLON = (int)186;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_106_boot)
HXDLIN( 106)		EQUAL = (int)187;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_107_boot)
HXDLIN( 107)		COMMA = (int)188;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_108_boot)
HXDLIN( 108)		MINUS = (int)189;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_109_boot)
HXDLIN( 109)		PERIOD = (int)190;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_110_boot)
HXDLIN( 110)		SLASH = (int)191;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_111_boot)
HXDLIN( 111)		BACKQUOTE = (int)192;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_112_boot)
HXDLIN( 112)		LEFTBRACKET = (int)219;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_113_boot)
HXDLIN( 113)		BACKSLASH = (int)220;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_114_boot)
HXDLIN( 114)		RIGHTBRACKET = (int)221;
            	}
{
            	HX_STACKFRAME(&_hx_pos_410ccb691917537a_115_boot)
HXDLIN( 115)		QUOTE = (int)222;
            	}
}

} // end namespace openfl
} // end namespace ui
