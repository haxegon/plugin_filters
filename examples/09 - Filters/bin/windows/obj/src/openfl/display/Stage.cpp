// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeApplication
#include <lime/_backend/native/NativeApplication.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app_Preloader
#include <lime/app/Preloader.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Int_Void
#include <lime/app/_Event_Float_Float_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Void
#include <lime/app/_Event_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Int_Void
#include <lime/app/_Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Int_Int_Void
#include <lime/app/_Event_String_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_graphics_RenderContext_Void
#include <lime/app/_Event_lime_graphics_RenderContext_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadAxis_Float_Void
#include <lime/app/_Event_lime_ui_GamepadAxis_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadButton_Void
#include <lime/app/_Event_lime_ui_GamepadButton_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Gamepad_Void
#include <lime/app/_Event_lime_ui_Gamepad_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Touch_Void
#include <lime/app/_Event_lime_ui_Touch_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_ConsoleRenderContext
#include <lime/graphics/ConsoleRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_DOMRenderContext
#include <lime/graphics/DOMRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_graphics_RendererType
#include <lime/graphics/RendererType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_system_Display
#include <lime/system/Display.h>
#endif
#ifndef INCLUDED_lime_system_DisplayMode
#include <lime/system/DisplayMode.h>
#endif
#ifndef INCLUDED_lime_ui_Gamepad
#include <lime/ui/Gamepad.h>
#endif
#ifndef INCLUDED_lime_ui_Joystick
#include <lime/ui/Joystick.h>
#endif
#ifndef INCLUDED_lime_ui_Mouse
#include <lime/ui/Mouse.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Touch
#include <lime/ui/Touch.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl__internal_TouchData
#include <lime/utils/ObjectPool_openfl__internal_TouchData.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Point
#include <lime/utils/ObjectPool_openfl_geom_Point.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_TouchData
#include <openfl/_internal/TouchData.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoRenderer
#include <openfl/_internal/renderer/cairo/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasRenderer
#include <openfl/_internal/renderer/canvas/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMRenderer
#include <openfl/_internal/renderer/dom/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_events_ActivityEvent
#include <openfl/events/ActivityEvent.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_FullScreenEvent
#include <openfl/events/FullScreenEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvents
#include <openfl/events/UncaughtErrorEvents.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif
#ifndef INCLUDED_openfl_ui_GameInput
#include <openfl/ui/GameInput.h>
#endif
#ifndef INCLUDED_openfl_ui_Keyboard
#include <openfl/ui/Keyboard.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e171466d8d112c10_180_new,"openfl.display.Stage","new",0x908e7106,"openfl.display.Stage.new","openfl/display/Stage.hx",180,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_335_addRenderer,"openfl.display.Stage","addRenderer",0xe89cb32a,"openfl.display.Stage.addRenderer","openfl/display/Stage.hx",335,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_336_addRenderer,"openfl.display.Stage","addRenderer",0xe89cb32a,"openfl.display.Stage.addRenderer","openfl/display/Stage.hx",336,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_337_addRenderer,"openfl.display.Stage","addRenderer",0xe89cb32a,"openfl.display.Stage.addRenderer","openfl/display/Stage.hx",337,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_333_addRenderer,"openfl.display.Stage","addRenderer",0xe89cb32a,"openfl.display.Stage.addRenderer","openfl/display/Stage.hx",333,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_346_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",346,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_347_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",347,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_348_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",348,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_349_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",349,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_350_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",350,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_351_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",351,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_352_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",352,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_353_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",353,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_354_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",354,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_355_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",355,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_356_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",356,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_357_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",357,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_358_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",358,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_359_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",359,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_360_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",360,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_361_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",361,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_362_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",362,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_363_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",363,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_364_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",364,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_365_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",365,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_366_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",366,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_367_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",367,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_368_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",368,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_342_addWindow,"openfl.display.Stage","addWindow",0xe38e6a17,"openfl.display.Stage.addWindow","openfl/display/Stage.hx",342,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_379_registerModule,"openfl.display.Stage","registerModule",0x13bf3089,"openfl.display.Stage.registerModule","openfl/display/Stage.hx",379,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_398_removeRenderer,"openfl.display.Stage","removeRenderer",0x09dc76c1,"openfl.display.Stage.removeRenderer","openfl/display/Stage.hx",398,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_399_removeWindow,"openfl.display.Stage","removeWindow",0x957549ee,"openfl.display.Stage.removeWindow","openfl/display/Stage.hx",399,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_400_setPreloader,"openfl.display.Stage","setPreloader",0x7a86bf0e,"openfl.display.Stage.setPreloader","openfl/display/Stage.hx",400,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_403_unregisterModule,"openfl.display.Stage","unregisterModule",0x783b9b22,"openfl.display.Stage.unregisterModule","openfl/display/Stage.hx",403,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_418_invalidate,"openfl.display.Stage","invalidate",0x70397995,"openfl.display.Stage.invalidate","openfl/display/Stage.hx",418,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_425_localToGlobal,"openfl.display.Stage","localToGlobal",0xb7e76def,"openfl.display.Stage.localToGlobal","openfl/display/Stage.hx",425,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_432_onGamepadAxisMove,"openfl.display.Stage","onGamepadAxisMove",0xc5912eda,"openfl.display.Stage.onGamepadAxisMove","openfl/display/Stage.hx",432,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_447_onGamepadButtonDown,"openfl.display.Stage","onGamepadButtonDown",0xf94bb7fc,"openfl.display.Stage.onGamepadButtonDown","openfl/display/Stage.hx",447,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_462_onGamepadButtonUp,"openfl.display.Stage","onGamepadButtonUp",0x91cf2b75,"openfl.display.Stage.onGamepadButtonUp","openfl/display/Stage.hx",462,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_477_onGamepadConnect,"openfl.display.Stage","onGamepadConnect",0xd0dcc662,"openfl.display.Stage.onGamepadConnect","openfl/display/Stage.hx",477,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_492_onGamepadDisconnect,"openfl.display.Stage","onGamepadDisconnect",0xb62bb4e4,"openfl.display.Stage.onGamepadDisconnect","openfl/display/Stage.hx",492,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_505_onJoystickAxisMove,"openfl.display.Stage","onJoystickAxisMove",0x5fc8fe87,"openfl.display.Stage.onJoystickAxisMove","openfl/display/Stage.hx",505,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_512_onJoystickButtonDown,"openfl.display.Stage","onJoystickButtonDown",0x6cd88ce9,"openfl.display.Stage.onJoystickButtonDown","openfl/display/Stage.hx",512,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_519_onJoystickButtonUp,"openfl.display.Stage","onJoystickButtonUp",0x2c06fb22,"openfl.display.Stage.onJoystickButtonUp","openfl/display/Stage.hx",519,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_526_onJoystickConnect,"openfl.display.Stage","onJoystickConnect",0x9b994b55,"openfl.display.Stage.onJoystickConnect","openfl/display/Stage.hx",526,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_533_onJoystickDisconnect,"openfl.display.Stage","onJoystickDisconnect",0x29b889d1,"openfl.display.Stage.onJoystickDisconnect","openfl/display/Stage.hx",533,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_540_onJoystickHatMove,"openfl.display.Stage","onJoystickHatMove",0x3124a777,"openfl.display.Stage.onJoystickHatMove","openfl/display/Stage.hx",540,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_547_onJoystickTrackballMove,"openfl.display.Stage","onJoystickTrackballMove",0x38b5dfe6,"openfl.display.Stage.onJoystickTrackballMove","openfl/display/Stage.hx",547,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_554_onKeyDown,"openfl.display.Stage","onKeyDown",0x4ccfc368,"openfl.display.Stage.onKeyDown","openfl/display/Stage.hx",554,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_571_onKeyUp,"openfl.display.Stage","onKeyUp",0x5bcb43e1,"openfl.display.Stage.onKeyUp","openfl/display/Stage.hx",571,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_590_onModuleExit,"openfl.display.Stage","onModuleExit",0xdf5eda83,"openfl.display.Stage.onModuleExit","openfl/display/Stage.hx",590,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_607_onMouseDown,"openfl.display.Stage","onMouseDown",0x156a4aae,"openfl.display.Stage.onMouseDown","openfl/display/Stage.hx",607,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_632_onMouseMove,"openfl.display.Stage","onMouseMove",0x1b5d355d,"openfl.display.Stage.onMouseMove","openfl/display/Stage.hx",632,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_649_onMouseMoveRelative,"openfl.display.Stage","onMouseMoveRelative",0xec53d349,"openfl.display.Stage.onMouseMoveRelative","openfl/display/Stage.hx",649,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_656_onMouseUp,"openfl.display.Stage","onMouseUp",0x70fb4da7,"openfl.display.Stage.onMouseUp","openfl/display/Stage.hx",656,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_687_onMouseWheel,"openfl.display.Stage","onMouseWheel",0x9385e4cf,"openfl.display.Stage.onMouseWheel","openfl/display/Stage.hx",687,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_704_onPreloadComplete,"openfl.display.Stage","onPreloadComplete",0xfd196e69,"openfl.display.Stage.onPreloadComplete","openfl/display/Stage.hx",704,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_711_onPreloadProgress,"openfl.display.Stage","onPreloadProgress",0x037c655d,"openfl.display.Stage.onPreloadProgress","openfl/display/Stage.hx",711,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_720_onRenderContextLost,"openfl.display.Stage","onRenderContextLost",0xf63c6844,"openfl.display.Stage.onRenderContextLost","openfl/display/Stage.hx",720,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_727_onRenderContextRestored,"openfl.display.Stage","onRenderContextRestored",0x98dd6bb6,"openfl.display.Stage.onRenderContextRestored","openfl/display/Stage.hx",727,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_732_onTextEdit,"openfl.display.Stage","onTextEdit",0x0cd051b0,"openfl.display.Stage.onTextEdit","openfl/display/Stage.hx",732,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_739_onTextInput,"openfl.display.Stage","onTextInput",0x7db2eda4,"openfl.display.Stage.onTextInput","openfl/display/Stage.hx",739,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_780_onTouchMove,"openfl.display.Stage","onTouchMove",0x34750bf7,"openfl.display.Stage.onTouchMove","openfl/display/Stage.hx",780,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_795_onTouchEnd,"openfl.display.Stage","onTouchEnd",0xc6cff9b5,"openfl.display.Stage.onTouchEnd","openfl/display/Stage.hx",795,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_816_onTouchStart,"openfl.display.Stage","onTouchStart",0x299b14bc,"openfl.display.Stage.onTouchStart","openfl/display/Stage.hx",816,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_837_onWindowActivate,"openfl.display.Stage","onWindowActivate",0xcfe358dc,"openfl.display.Stage.onWindowActivate","openfl/display/Stage.hx",837,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_852_onWindowClose,"openfl.display.Stage","onWindowClose",0x0c1bf6ef,"openfl.display.Stage.onWindowClose","openfl/display/Stage.hx",852,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_874_onWindowCreate,"openfl.display.Stage","onWindowCreate",0xfa19d7e5,"openfl.display.Stage.onWindowCreate","openfl/display/Stage.hx",874,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_897_onWindowDeactivate,"openfl.display.Stage","onWindowDeactivate",0x9060f59d,"openfl.display.Stage.onWindowDeactivate","openfl/display/Stage.hx",897,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_913_onWindowDropFile,"openfl.display.Stage","onWindowDropFile",0xd38db374,"openfl.display.Stage.onWindowDropFile","openfl/display/Stage.hx",913,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_920_onWindowEnter,"openfl.display.Stage","onWindowEnter",0x343f4c4f,"openfl.display.Stage.onWindowEnter","openfl/display/Stage.hx",920,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_927_onWindowFocusIn,"openfl.display.Stage","onWindowFocusIn",0x0c9ba0d4,"openfl.display.Stage.onWindowFocusIn","openfl/display/Stage.hx",927,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_947_onWindowFocusOut,"openfl.display.Stage","onWindowFocusOut",0xfb95acbf,"openfl.display.Stage.onWindowFocusOut","openfl/display/Stage.hx",947,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_969_onWindowFullscreen,"openfl.display.Stage","onWindowFullscreen",0x4e13d3a4,"openfl.display.Stage.onWindowFullscreen","openfl/display/Stage.hx",969,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_994_onWindowLeave,"openfl.display.Stage","onWindowLeave",0x360c142e,"openfl.display.Stage.onWindowLeave","openfl/display/Stage.hx",994,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1013_onWindowMinimize,"openfl.display.Stage","onWindowMinimize",0x0bb07c47,"openfl.display.Stage.onWindowMinimize","openfl/display/Stage.hx",1013,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1029_onWindowMove,"openfl.display.Stage","onWindowMove",0x7f3617ba,"openfl.display.Stage.onWindowMove","openfl/display/Stage.hx",1029,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1036_onWindowResize,"openfl.display.Stage","onWindowResize",0x8685cadd,"openfl.display.Stage.onWindowResize","openfl/display/Stage.hx",1036,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1064_onWindowRestore,"openfl.display.Stage","onWindowRestore",0x35c8c245,"openfl.display.Stage.onWindowRestore","openfl/display/Stage.hx",1064,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1079_render,"openfl.display.Stage","render",0x050c3670,"openfl.display.Stage.render","openfl/display/Stage.hx",1079,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1177_update,"openfl.display.Stage","update",0x86e85123,"openfl.display.Stage.update","openfl/display/Stage.hx",1177,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1184___broadcastEvent,"openfl.display.Stage","__broadcastEvent",0x79aa0c13,"openfl.display.Stage.__broadcastEvent","openfl/display/Stage.hx",1184,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1201___createRenderer,"openfl.display.Stage","__createRenderer",0x1d5b3f19,"openfl.display.Stage.__createRenderer","openfl/display/Stage.hx",1201,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1236___drag,"openfl.display.Stage","__drag",0xf14b5a2e,"openfl.display.Stage.__drag","openfl/display/Stage.hx",1236,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1278___getInteractive,"openfl.display.Stage","__getInteractive",0xdc3c8ba6,"openfl.display.Stage.__getInteractive","openfl/display/Stage.hx",1278,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1291___globalToLocal,"openfl.display.Stage","__globalToLocal",0x7bdc8953,"openfl.display.Stage.__globalToLocal","openfl/display/Stage.hx",1291,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1304___handleError,"openfl.display.Stage","__handleError",0xdde7e406,"openfl.display.Stage.__handleError","openfl/display/Stage.hx",1304,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1345___onKey,"openfl.display.Stage","__onKey",0x83566246,"openfl.display.Stage.__onKey","openfl/display/Stage.hx",1345,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1400___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1400,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1401___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1401,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1402___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1402,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1403___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1403,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1396___onGamepadConnect,"openfl.display.Stage","__onGamepadConnect",0x5c5bf402,"openfl.display.Stage.__onGamepadConnect","openfl/display/Stage.hx",1396,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1408___onMouse,"openfl.display.Stage","__onMouse",0xfccea68c,"openfl.display.Stage.__onMouse","openfl/display/Stage.hx",1408,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1669___onMouseWheel,"openfl.display.Stage","__onMouseWheel",0x6d35c26f,"openfl.display.Stage.__onMouseWheel","openfl/display/Stage.hx",1669,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1701___onTouch,"openfl.display.Stage","__onTouch",0x049ca826,"openfl.display.Stage.__onTouch","openfl/display/Stage.hx",1701,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1873___resize,"openfl.display.Stage","__resize",0x872a0aae,"openfl.display.Stage.__resize","openfl/display/Stage.hx",1873,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1931___setLogicalSize,"openfl.display.Stage","__setLogicalSize",0x16d2dd62,"openfl.display.Stage.__setLogicalSize","openfl/display/Stage.hx",1931,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1941___startDrag,"openfl.display.Stage","__startDrag",0x2df4a4fc,"openfl.display.Stage.__startDrag","openfl/display/Stage.hx",1941,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1976___stopDrag,"openfl.display.Stage","__stopDrag",0x21724450,"openfl.display.Stage.__stopDrag","openfl/display/Stage.hx",1976,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_1986___update,"openfl.display.Stage","__update",0x05b436c3,"openfl.display.Stage.__update","openfl/display/Stage.hx",1986,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2051_get_color,"openfl.display.Stage","get_color",0x66e36ee0,"openfl.display.Stage.get_color","openfl/display/Stage.hx",2051,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2056_set_color,"openfl.display.Stage","set_color",0x4a345aec,"openfl.display.Stage.set_color","openfl/display/Stage.hx",2056,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2083_get_contentsScaleFactor,"openfl.display.Stage","get_contentsScaleFactor",0xe0f9f23c,"openfl.display.Stage.get_contentsScaleFactor","openfl/display/Stage.hx",2083,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2090_get_displayState,"openfl.display.Stage","get_displayState",0x7908a892,"openfl.display.Stage.get_displayState","openfl/display/Stage.hx",2090,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2095_set_displayState,"openfl.display.Stage","set_displayState",0xcf4a9606,"openfl.display.Stage.set_displayState","openfl/display/Stage.hx",2095,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2130_get_focus,"openfl.display.Stage","get_focus",0x21105d55,"openfl.display.Stage.get_focus","openfl/display/Stage.hx",2130,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2135_set_focus,"openfl.display.Stage","set_focus",0x04614961,"openfl.display.Stage.set_focus","openfl/display/Stage.hx",2135,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2170_get_frameRate,"openfl.display.Stage","get_frameRate",0x6a8511aa,"openfl.display.Stage.get_frameRate","openfl/display/Stage.hx",2170,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2183_set_frameRate,"openfl.display.Stage","set_frameRate",0xaf8af3b6,"openfl.display.Stage.set_frameRate","openfl/display/Stage.hx",2183,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2198_get_fullScreenHeight,"openfl.display.Stage","get_fullScreenHeight",0xb9098a45,"openfl.display.Stage.get_fullScreenHeight","openfl/display/Stage.hx",2198,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2205_get_fullScreenWidth,"openfl.display.Stage","get_fullScreenWidth",0xe22a2968,"openfl.display.Stage.get_fullScreenWidth","openfl/display/Stage.hx",2205,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2212_set_height,"openfl.display.Stage","set_height",0xdf60763e,"openfl.display.Stage.set_height","openfl/display/Stage.hx",2212,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2219_get_mouseX,"openfl.display.Stage","get_mouseX",0xa5a51a76,"openfl.display.Stage.get_mouseX","openfl/display/Stage.hx",2219,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2226_get_mouseY,"openfl.display.Stage","get_mouseY",0xa5a51a77,"openfl.display.Stage.get_mouseY","openfl/display/Stage.hx",2226,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2233_set_rotation,"openfl.display.Stage","set_rotation",0xa6542f55,"openfl.display.Stage.set_rotation","openfl/display/Stage.hx",2233,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2240_set_scaleX,"openfl.display.Stage","set_scaleX",0x193a58e5,"openfl.display.Stage.set_scaleX","openfl/display/Stage.hx",2240,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2247_set_scaleY,"openfl.display.Stage","set_scaleY",0x193a58e6,"openfl.display.Stage.set_scaleY","openfl/display/Stage.hx",2247,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2254_set_transform,"openfl.display.Stage","set_transform",0xbbf90f75,"openfl.display.Stage.set_transform","openfl/display/Stage.hx",2254,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2261_set_width,"openfl.display.Stage","set_width",0xca3a9f8f,"openfl.display.Stage.set_width","openfl/display/Stage.hx",2261,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2268_set_x,"openfl.display.Stage","set_x",0x86d03181,"openfl.display.Stage.set_x","openfl/display/Stage.hx",2268,0xadca4c2c)
HX_LOCAL_STACK_FRAME(_hx_pos_e171466d8d112c10_2275_set_y,"openfl.display.Stage","set_y",0x86d03182,"openfl.display.Stage.set_y","openfl/display/Stage.hx",2275,0xadca4c2c)
namespace openfl{
namespace display{

void Stage_obj::__construct( ::lime::ui::Window window, ::Dynamic color){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_180_new)
HXLINE( 186)		super::__construct();
HXLINE( 254)		this->application = window->application;
HXLINE( 255)		this->window = window;
HXLINE( 256)		this->set_color(color);
HXLINE( 260)		this->set_name(null());
HXLINE( 262)		this->_hx___contentsScaleFactor = window->_hx___scale;
HXLINE( 263)		this->_hx___deltaTime = (int)0;
HXLINE( 264)		this->_hx___displayState = (int)2;
HXLINE( 265)		this->_hx___mouseX = (int)0;
HXLINE( 266)		this->_hx___mouseY = (int)0;
HXLINE( 267)		this->_hx___lastClickTime = (int)0;
HXLINE( 268)		this->_hx___logicalWidth = (int)0;
HXLINE( 269)		this->_hx___logicalHeight = (int)0;
HXLINE( 270)		this->_hx___displayMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 271)		this->_hx___renderDirty = true;
HXLINE( 272)		this->_hx___wasFullscreen = window->_hx___fullscreen;
HXLINE( 274)		int length = null();
HXDLIN( 274)		bool fixed = null();
HXDLIN( 274)		this->stage3Ds =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE( 275)		{
HXLINE( 275)			 ::openfl::_Vector::AbstractVector this1 = this->stage3Ds;
HXDLIN( 275)			 ::openfl::display::Stage3D x =  ::openfl::display::Stage3D_obj::__alloc( HX_CTX );
HXDLIN( 275)			::openfl::_Vector::IVector_obj::push(this1->data,x);
            		}
HXLINE( 277)		this->_hx___resize();
HXLINE( 279)		this->stage = hx::ObjectPtr<OBJ_>(this);
HXLINE( 281)		this->align = (int)6;
HXLINE( 286)		this->allowsFullScreen = true;
HXLINE( 287)		this->allowsFullScreenInteractive = true;
HXLINE( 289)		this->quality = (int)1;
HXLINE( 290)		this->scaleMode = (int)2;
HXLINE( 291)		this->showDefaultContextMenu = true;
HXLINE( 292)		this->softKeyboardRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 293)		this->stageFocusRect = true;
HXLINE( 301)		this->_hx___clearBeforeRender = true;
HXLINE( 302)		this->_hx___stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 303)		this->_hx___rollOutStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 304)		this->_hx___touchData =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 306)		if (hx::IsNull( ::openfl::Lib_obj::get_current()->stage )) {
HXLINE( 308)			 ::openfl::display::Stage _hx_tmp = this->stage;
HXDLIN( 308)			_hx_tmp->addChild(::openfl::Lib_obj::get_current());
            		}
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x09aee5bc) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x09aee5bc;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
	}
}

static ::lime::app::IModule_obj _hx_openfl_display_Stage__hx_lime_app_IModule= {
	( void (hx::Object::*)( ::lime::graphics::Renderer))&::openfl::display::Stage_obj::addRenderer,
	( void (hx::Object::*)( ::lime::ui::Window))&::openfl::display::Stage_obj::addWindow,
	( void (hx::Object::*)( ::lime::app::Application))&::openfl::display::Stage_obj::registerModule,
	( void (hx::Object::*)( ::lime::graphics::Renderer))&::openfl::display::Stage_obj::removeRenderer,
	( void (hx::Object::*)( ::lime::ui::Window))&::openfl::display::Stage_obj::removeWindow,
	( void (hx::Object::*)( ::lime::app::Preloader))&::openfl::display::Stage_obj::setPreloader,
	( void (hx::Object::*)( ::lime::app::Application))&::openfl::display::Stage_obj::unregisterModule,
};

void *Stage_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf464d6e9: return &_hx_openfl_display_Stage__hx_lime_app_IModule;
	}
	return super::_hx_getInterface(inHash);
}

void Stage_obj::addRenderer( ::lime::graphics::Renderer renderer){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::lime::graphics::Renderer,a1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_335_addRenderer)
HXLINE( 335)			f(a1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::graphics::Renderer,a11, ::Dynamic,f1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_336_addRenderer)
HXLINE( 336)			f1(a11);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::graphics::Renderer,a12, ::Dynamic,f2) HXARGC(1)
            		void _hx_run( ::lime::graphics::RenderContext a2){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_337_addRenderer)
HXLINE( 337)			f2(a12,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_333_addRenderer)
HXLINE( 335)		 ::Dynamic f = this->render_dyn();
HXDLIN( 335)		 ::lime::graphics::Renderer a1 = renderer;
HXDLIN( 335)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 335)		renderer->onRender->add(_hx_tmp,null(),null());
HXLINE( 336)		 ::Dynamic f1 = this->onRenderContextLost_dyn();
HXDLIN( 336)		 ::lime::graphics::Renderer a11 = renderer;
HXDLIN( 336)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(a11,f1));
HXDLIN( 336)		renderer->onContextLost->add(_hx_tmp1,null(),null());
HXLINE( 337)		 ::Dynamic f2 = this->onRenderContextRestored_dyn();
HXDLIN( 337)		 ::lime::graphics::Renderer a12 = renderer;
HXDLIN( 337)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(a12,f2));
HXDLIN( 337)		renderer->onContextRestored->add(_hx_tmp2,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,addRenderer,(void))

void Stage_obj::addWindow( ::lime::ui::Window window){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::lime::ui::Window,a1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_346_addWindow)
HXLINE( 346)			f(a1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::ui::Window,a11, ::Dynamic,f1) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_347_addWindow)
HXLINE( 347)			f1(a11);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::ui::Window,a12, ::Dynamic,f2) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_348_addWindow)
HXLINE( 348)			f2(a12);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::lime::ui::Window,a13, ::Dynamic,f3) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_349_addWindow)
HXLINE( 349)			f3(a13);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4, ::lime::ui::Window,a14, ::Dynamic,f4) HXARGC(1)
            		void _hx_run(::String a2){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_350_addWindow)
HXLINE( 350)			f4(a14,a2);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5, ::Dynamic,f5, ::lime::ui::Window,a15) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_351_addWindow)
HXLINE( 351)			f5(a15);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_6, ::Dynamic,f6, ::lime::ui::Window,a16) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_352_addWindow)
HXLINE( 352)			f6(a16);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7, ::lime::ui::Window,a17, ::Dynamic,f7) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_353_addWindow)
HXLINE( 353)			f7(a17);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8, ::lime::ui::Window,a18, ::Dynamic,f8) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_354_addWindow)
HXLINE( 354)			f8(a18);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_9, ::Dynamic,f9, ::lime::ui::Window,a19) HXARGC(2)
            		void _hx_run(int a21,int a3){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_355_addWindow)
HXLINE( 355)			f9(a19,a21,a3);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_10, ::Dynamic,f10, ::lime::ui::Window,a110) HXARGC(2)
            		void _hx_run(int a22,int a31){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_356_addWindow)
HXLINE( 356)			f10(a110,a22,a31);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_11, ::Dynamic,f11, ::lime::ui::Window,a111) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_357_addWindow)
HXLINE( 357)			f11(a111);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_12, ::lime::ui::Window,a112, ::Dynamic,f12) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_358_addWindow)
HXLINE( 358)			f12(a112);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_13, ::Dynamic,f13, ::lime::ui::Window,a113) HXARGC(3)
            		void _hx_run(Float x,Float y,int a23){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_359_addWindow)
HXLINE( 359)			f13(a113,x,y,a23);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_14, ::Dynamic,f14, ::lime::ui::Window,a114) HXARGC(2)
            		void _hx_run(Float x1,Float y1){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_360_addWindow)
HXLINE( 360)			f14(a114,x1,y1);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_15, ::Dynamic,f15, ::lime::ui::Window,a115) HXARGC(2)
            		void _hx_run(Float x2,Float y2){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_361_addWindow)
HXLINE( 361)			f15(a115,x2,y2);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_16, ::lime::ui::Window,a116, ::Dynamic,f16) HXARGC(3)
            		void _hx_run(Float x3,Float y3,int a24){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_362_addWindow)
HXLINE( 362)			f16(a116,x3,y3,a24);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_17, ::Dynamic,f17, ::lime::ui::Window,a117) HXARGC(2)
            		void _hx_run(Float a25,Float a32){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_363_addWindow)
HXLINE( 363)			f17(a117,a25,a32);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_18, ::lime::ui::Window,a118, ::Dynamic,f18) HXARGC(2)
            		void _hx_run(Float x4,Float y4){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_364_addWindow)
HXLINE( 364)			f18(a118,x4,y4);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_19, ::Dynamic,f19, ::lime::ui::Window,a119) HXARGC(2)
            		void _hx_run(int a26,int a33){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_365_addWindow)
HXLINE( 365)			f19(a119,a26,a33);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_20, ::lime::ui::Window,a120, ::Dynamic,f20) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_366_addWindow)
HXLINE( 366)			f20(a120);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_21, ::lime::ui::Window,a121, ::Dynamic,f21) HXARGC(3)
            		void _hx_run(::String a27,int a34,int a4){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_367_addWindow)
HXLINE( 367)			f21(a121,a27,a34,a4);
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_22, ::lime::ui::Window,a122, ::Dynamic,f22) HXARGC(1)
            		void _hx_run(::String a28){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_368_addWindow)
HXLINE( 368)			f22(a122,a28);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_342_addWindow)
HXLINE( 344)		if (hx::IsNotEq( this->window,window )) {
HXLINE( 344)			return;
            		}
HXLINE( 346)		 ::Dynamic f = this->onWindowActivate_dyn();
HXDLIN( 346)		 ::lime::ui::Window a1 = window;
HXDLIN( 346)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 346)		window->onActivate->add(_hx_tmp,null(),null());
HXLINE( 347)		 ::Dynamic f1 = this->onWindowClose_dyn();
HXDLIN( 347)		 ::lime::ui::Window a11 = window;
HXDLIN( 347)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(a11,f1));
HXDLIN( 347)		window->onClose->add(_hx_tmp1,false,(int)-9000);
HXLINE( 348)		 ::Dynamic f2 = this->onWindowCreate_dyn();
HXDLIN( 348)		 ::lime::ui::Window a12 = window;
HXDLIN( 348)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(a12,f2));
HXDLIN( 348)		window->onCreate->add(_hx_tmp2,null(),null());
HXLINE( 349)		 ::Dynamic f3 = this->onWindowDeactivate_dyn();
HXDLIN( 349)		 ::lime::ui::Window a13 = window;
HXDLIN( 349)		 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_3(a13,f3));
HXDLIN( 349)		window->onDeactivate->add(_hx_tmp3,null(),null());
HXLINE( 350)		 ::Dynamic f4 = this->onWindowDropFile_dyn();
HXDLIN( 350)		 ::lime::ui::Window a14 = window;
HXDLIN( 350)		 ::Dynamic _hx_tmp4 =  ::Dynamic(new _hx_Closure_4(a14,f4));
HXDLIN( 350)		window->onDropFile->add(_hx_tmp4,null(),null());
HXLINE( 351)		 ::Dynamic f5 = this->onWindowEnter_dyn();
HXDLIN( 351)		 ::lime::ui::Window a15 = window;
HXDLIN( 351)		 ::Dynamic _hx_tmp5 =  ::Dynamic(new _hx_Closure_5(f5,a15));
HXDLIN( 351)		window->onEnter->add(_hx_tmp5,null(),null());
HXLINE( 352)		 ::Dynamic f6 = this->onWindowFocusIn_dyn();
HXDLIN( 352)		 ::lime::ui::Window a16 = window;
HXDLIN( 352)		 ::Dynamic _hx_tmp6 =  ::Dynamic(new _hx_Closure_6(f6,a16));
HXDLIN( 352)		window->onFocusIn->add(_hx_tmp6,null(),null());
HXLINE( 353)		 ::Dynamic f7 = this->onWindowFocusOut_dyn();
HXDLIN( 353)		 ::lime::ui::Window a17 = window;
HXDLIN( 353)		 ::Dynamic _hx_tmp7 =  ::Dynamic(new _hx_Closure_7(a17,f7));
HXDLIN( 353)		window->onFocusOut->add(_hx_tmp7,null(),null());
HXLINE( 354)		 ::Dynamic f8 = this->onWindowFullscreen_dyn();
HXDLIN( 354)		 ::lime::ui::Window a18 = window;
HXDLIN( 354)		 ::Dynamic _hx_tmp8 =  ::Dynamic(new _hx_Closure_8(a18,f8));
HXDLIN( 354)		window->onFullscreen->add(_hx_tmp8,null(),null());
HXLINE( 355)		 ::Dynamic f9 = this->onKeyDown_dyn();
HXDLIN( 355)		 ::lime::ui::Window a19 = window;
HXDLIN( 355)		 ::Dynamic _hx_tmp9 =  ::Dynamic(new _hx_Closure_9(f9,a19));
HXDLIN( 355)		window->onKeyDown->add(_hx_tmp9,null(),null());
HXLINE( 356)		 ::Dynamic f10 = this->onKeyUp_dyn();
HXDLIN( 356)		 ::lime::ui::Window a110 = window;
HXDLIN( 356)		 ::Dynamic _hx_tmp10 =  ::Dynamic(new _hx_Closure_10(f10,a110));
HXDLIN( 356)		window->onKeyUp->add(_hx_tmp10,null(),null());
HXLINE( 357)		 ::Dynamic f11 = this->onWindowLeave_dyn();
HXDLIN( 357)		 ::lime::ui::Window a111 = window;
HXDLIN( 357)		 ::Dynamic _hx_tmp11 =  ::Dynamic(new _hx_Closure_11(f11,a111));
HXDLIN( 357)		window->onLeave->add(_hx_tmp11,null(),null());
HXLINE( 358)		 ::Dynamic f12 = this->onWindowMinimize_dyn();
HXDLIN( 358)		 ::lime::ui::Window a112 = window;
HXDLIN( 358)		 ::Dynamic _hx_tmp12 =  ::Dynamic(new _hx_Closure_12(a112,f12));
HXDLIN( 358)		window->onMinimize->add(_hx_tmp12,null(),null());
HXLINE( 359)		 ::Dynamic f13 = this->onMouseDown_dyn();
HXDLIN( 359)		 ::lime::ui::Window a113 = window;
HXDLIN( 359)		 ::Dynamic _hx_tmp13 =  ::Dynamic(new _hx_Closure_13(f13,a113));
HXDLIN( 359)		window->onMouseDown->add(_hx_tmp13,null(),null());
HXLINE( 360)		 ::Dynamic f14 = this->onMouseMove_dyn();
HXDLIN( 360)		 ::lime::ui::Window a114 = window;
HXDLIN( 360)		 ::Dynamic _hx_tmp14 =  ::Dynamic(new _hx_Closure_14(f14,a114));
HXDLIN( 360)		window->onMouseMove->add(_hx_tmp14,null(),null());
HXLINE( 361)		 ::Dynamic f15 = this->onMouseMoveRelative_dyn();
HXDLIN( 361)		 ::lime::ui::Window a115 = window;
HXDLIN( 361)		 ::Dynamic _hx_tmp15 =  ::Dynamic(new _hx_Closure_15(f15,a115));
HXDLIN( 361)		window->onMouseMoveRelative->add(_hx_tmp15,null(),null());
HXLINE( 362)		 ::Dynamic f16 = this->onMouseUp_dyn();
HXDLIN( 362)		 ::lime::ui::Window a116 = window;
HXDLIN( 362)		 ::Dynamic _hx_tmp16 =  ::Dynamic(new _hx_Closure_16(a116,f16));
HXDLIN( 362)		window->onMouseUp->add(_hx_tmp16,null(),null());
HXLINE( 363)		 ::Dynamic f17 = this->onMouseWheel_dyn();
HXDLIN( 363)		 ::lime::ui::Window a117 = window;
HXDLIN( 363)		 ::Dynamic _hx_tmp17 =  ::Dynamic(new _hx_Closure_17(f17,a117));
HXDLIN( 363)		window->onMouseWheel->add(_hx_tmp17,null(),null());
HXLINE( 364)		 ::Dynamic f18 = this->onWindowMove_dyn();
HXDLIN( 364)		 ::lime::ui::Window a118 = window;
HXDLIN( 364)		 ::Dynamic _hx_tmp18 =  ::Dynamic(new _hx_Closure_18(a118,f18));
HXDLIN( 364)		window->onMove->add(_hx_tmp18,null(),null());
HXLINE( 365)		 ::Dynamic f19 = this->onWindowResize_dyn();
HXDLIN( 365)		 ::lime::ui::Window a119 = window;
HXDLIN( 365)		 ::Dynamic _hx_tmp19 =  ::Dynamic(new _hx_Closure_19(f19,a119));
HXDLIN( 365)		window->onResize->add(_hx_tmp19,null(),null());
HXLINE( 366)		 ::Dynamic f20 = this->onWindowRestore_dyn();
HXDLIN( 366)		 ::lime::ui::Window a120 = window;
HXDLIN( 366)		 ::Dynamic _hx_tmp20 =  ::Dynamic(new _hx_Closure_20(a120,f20));
HXDLIN( 366)		window->onRestore->add(_hx_tmp20,null(),null());
HXLINE( 367)		 ::Dynamic f21 = this->onTextEdit_dyn();
HXDLIN( 367)		 ::lime::ui::Window a121 = window;
HXDLIN( 367)		 ::Dynamic _hx_tmp21 =  ::Dynamic(new _hx_Closure_21(a121,f21));
HXDLIN( 367)		window->onTextEdit->add(_hx_tmp21,null(),null());
HXLINE( 368)		 ::Dynamic f22 = this->onTextInput_dyn();
HXDLIN( 368)		 ::lime::ui::Window a122 = window;
HXDLIN( 368)		 ::Dynamic _hx_tmp22 =  ::Dynamic(new _hx_Closure_22(a122,f22));
HXDLIN( 368)		window->onTextInput->add(_hx_tmp22,null(),null());
HXLINE( 370)		if ((window->id > (int)-1)) {
HXLINE( 372)			this->onWindowCreate(window);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,addWindow,(void))

void Stage_obj::registerModule( ::lime::app::Application application){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_379_registerModule)
HXLINE( 381)		application->onExit->add(this->onModuleExit_dyn(),false,(int)0);
HXLINE( 382)		application->onUpdate->add(this->update_dyn(),null(),null());
HXLINE( 384)		{
HXLINE( 384)			 ::Dynamic gamepad = ::lime::ui::Gamepad_obj::devices->iterator();
HXDLIN( 384)			while(( (bool)(gamepad->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 384)				 ::lime::ui::Gamepad gamepad1 = ( ( ::lime::ui::Gamepad)(gamepad->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 386)				this->_hx___onGamepadConnect(gamepad1);
            			}
            		}
HXLINE( 390)		::lime::ui::Gamepad_obj::onConnect->add(this->_hx___onGamepadConnect_dyn(),null(),null());
HXLINE( 391)		::lime::ui::Touch_obj::onStart->add(this->onTouchStart_dyn(),null(),null());
HXLINE( 392)		::lime::ui::Touch_obj::onMove->add(this->onTouchMove_dyn(),null(),null());
HXLINE( 393)		::lime::ui::Touch_obj::onEnd->add(this->onTouchEnd_dyn(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,registerModule,(void))

void Stage_obj::removeRenderer( ::lime::graphics::Renderer renderer){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_398_removeRenderer)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,removeRenderer,(void))

void Stage_obj::removeWindow( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_399_removeWindow)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,removeWindow,(void))

void Stage_obj::setPreloader( ::lime::app::Preloader preloader){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_400_setPreloader)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,setPreloader,(void))

void Stage_obj::unregisterModule( ::lime::app::Application application){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_403_unregisterModule)
HXLINE( 405)		application->onExit->remove(this->onModuleExit_dyn());
HXLINE( 406)		application->onUpdate->remove(this->update_dyn());
HXLINE( 408)		::lime::ui::Gamepad_obj::onConnect->remove(this->_hx___onGamepadConnect_dyn());
HXLINE( 409)		::lime::ui::Touch_obj::onStart->remove(this->onTouchStart_dyn());
HXLINE( 410)		::lime::ui::Touch_obj::onMove->remove(this->onTouchMove_dyn());
HXLINE( 411)		::lime::ui::Touch_obj::onEnd->remove(this->onTouchEnd_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,unregisterModule,(void))

void Stage_obj::invalidate(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_418_invalidate)
HXDLIN( 418)		this->_hx___invalidated = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,invalidate,(void))

 ::openfl::geom::Point Stage_obj::localToGlobal( ::openfl::geom::Point pos){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_425_localToGlobal)
HXDLIN( 425)		return pos->clone();
            	}


void Stage_obj::onGamepadAxisMove( ::lime::ui::Gamepad gamepad,int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_432_onGamepadAxisMove)
HXDLIN( 432)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 434)			::openfl::ui::GameInput_obj::_hx___onGamepadAxisMove(gamepad,axis,value);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 438)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onGamepadAxisMove,(void))

void Stage_obj::onGamepadButtonDown( ::lime::ui::Gamepad gamepad,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_447_onGamepadButtonDown)
HXDLIN( 447)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 449)			::openfl::ui::GameInput_obj::_hx___onGamepadButtonDown(gamepad,button);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 453)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onGamepadButtonDown,(void))

void Stage_obj::onGamepadButtonUp( ::lime::ui::Gamepad gamepad,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_462_onGamepadButtonUp)
HXDLIN( 462)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 464)			::openfl::ui::GameInput_obj::_hx___onGamepadButtonUp(gamepad,button);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 468)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onGamepadButtonUp,(void))

void Stage_obj::onGamepadConnect( ::lime::ui::Gamepad gamepad){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_477_onGamepadConnect)
HXDLIN( 477)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 479)			::openfl::ui::GameInput_obj::_hx___onGamepadConnect(gamepad);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 483)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onGamepadConnect,(void))

void Stage_obj::onGamepadDisconnect( ::lime::ui::Gamepad gamepad){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_492_onGamepadDisconnect)
HXDLIN( 492)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 494)			::openfl::ui::GameInput_obj::_hx___onGamepadDisconnect(gamepad);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 498)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onGamepadDisconnect,(void))

void Stage_obj::onJoystickAxisMove( ::lime::ui::Joystick joystick,int axis,Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_505_onJoystickAxisMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickAxisMove,(void))

void Stage_obj::onJoystickButtonDown( ::lime::ui::Joystick joystick,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_512_onJoystickButtonDown)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onJoystickButtonDown,(void))

void Stage_obj::onJoystickButtonUp( ::lime::ui::Joystick joystick,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_519_onJoystickButtonUp)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onJoystickButtonUp,(void))

void Stage_obj::onJoystickConnect( ::lime::ui::Joystick joystick){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_526_onJoystickConnect)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onJoystickConnect,(void))

void Stage_obj::onJoystickDisconnect( ::lime::ui::Joystick joystick){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_533_onJoystickDisconnect)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onJoystickDisconnect,(void))

void Stage_obj::onJoystickHatMove( ::lime::ui::Joystick joystick,int hat,int position){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_540_onJoystickHatMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickHatMove,(void))

void Stage_obj::onJoystickTrackballMove( ::lime::ui::Joystick joystick,int trackball,Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_547_onJoystickTrackballMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onJoystickTrackballMove,(void))

void Stage_obj::onKeyDown( ::lime::ui::Window window,int keyCode,int modifier){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_554_onKeyDown)
HXLINE( 556)		bool _hx_tmp;
HXDLIN( 556)		if (hx::IsNotNull( this->window )) {
HXLINE( 556)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 556)			_hx_tmp = true;
            		}
HXDLIN( 556)		if (_hx_tmp) {
HXLINE( 556)			return;
            		}
HXLINE( 558)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 560)			this->_hx___onKey(HX_("keyDown",a1,69,47,9c),keyCode,modifier);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 564)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onKeyDown,(void))

void Stage_obj::onKeyUp( ::lime::ui::Window window,int keyCode,int modifier){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_571_onKeyUp)
HXLINE( 573)		bool _hx_tmp;
HXDLIN( 573)		if (hx::IsNotNull( this->window )) {
HXLINE( 573)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 573)			_hx_tmp = true;
            		}
HXDLIN( 573)		if (_hx_tmp) {
HXLINE( 573)			return;
            		}
HXLINE( 575)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 577)			this->_hx___onKey(HX_("keyUp",da,b9,fe,de),keyCode,modifier);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 581)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onKeyUp,(void))

void Stage_obj::onModuleExit(int code){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_590_onModuleExit)
HXDLIN( 590)		if (hx::IsNotNull( this->window )) {
HXLINE( 592)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 594)				this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null()));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 598)					this->_hx___handleError(e);
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onModuleExit,(void))

void Stage_obj::onMouseDown( ::lime::ui::Window window,Float x,Float y,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_607_onMouseDown)
HXLINE( 609)		bool _hx_tmp;
HXDLIN( 609)		if (hx::IsNotNull( this->window )) {
HXLINE( 609)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 609)			_hx_tmp = true;
            		}
HXDLIN( 609)		if (_hx_tmp) {
HXLINE( 609)			return;
            		}
HXLINE( 611)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 613)			::String type;
HXDLIN( 613)			switch((int)(button)){
            				case (int)1: {
HXLINE( 613)					type = HX_("middleMouseDown",12,2b,fe,01);
            				}
            				break;
            				case (int)2: {
HXLINE( 613)					type = HX_("rightMouseDown",ab,29,d7,cd);
            				}
            				break;
            				default:{
HXLINE( 613)					type = HX_("mouseDown",27,b1,c2,ee);
            				}
            			}
HXLINE( 621)			int _hx_tmp1 = ::Std_obj::_hx_int((x * window->_hx___scale));
HXDLIN( 621)			this->_hx___onMouse(type,_hx_tmp1,::Std_obj::_hx_int((y * window->_hx___scale)),button);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 625)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onMouseDown,(void))

void Stage_obj::onMouseMove( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_632_onMouseMove)
HXLINE( 634)		bool _hx_tmp;
HXDLIN( 634)		if (hx::IsNotNull( this->window )) {
HXLINE( 634)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 634)			_hx_tmp = true;
            		}
HXDLIN( 634)		if (_hx_tmp) {
HXLINE( 634)			return;
            		}
HXLINE( 636)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 638)			int _hx_tmp1 = ::Std_obj::_hx_int((x * window->_hx___scale));
HXDLIN( 638)			this->_hx___onMouse(HX_("mouseMove",d6,9b,b5,f4),_hx_tmp1,::Std_obj::_hx_int((y * window->_hx___scale)),(int)0);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 642)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouseMove,(void))

void Stage_obj::onMouseMoveRelative( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_649_onMouseMoveRelative)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouseMoveRelative,(void))

void Stage_obj::onMouseUp( ::lime::ui::Window window,Float x,Float y,int button){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_656_onMouseUp)
HXLINE( 658)		bool _hx_tmp;
HXDLIN( 658)		if (hx::IsNotNull( this->window )) {
HXLINE( 658)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 658)			_hx_tmp = true;
            		}
HXDLIN( 658)		if (_hx_tmp) {
HXLINE( 658)			return;
            		}
HXLINE( 660)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 662)			::String type;
HXDLIN( 662)			switch((int)(button)){
            				case (int)1: {
HXLINE( 662)					type = HX_("middleMouseUp",0b,8d,f5,3a);
            				}
            				break;
            				case (int)2: {
HXLINE( 662)					type = HX_("rightMouseUp",64,83,21,ab);
            				}
            				break;
            				default:{
HXLINE( 662)					type = HX_("mouseUp",e0,f3,72,c0);
            				}
            			}
HXLINE( 670)			int _hx_tmp1 = ::Std_obj::_hx_int((x * window->_hx___scale));
HXDLIN( 670)			this->_hx___onMouse(type,_hx_tmp1,::Std_obj::_hx_int((y * window->_hx___scale)),button);
HXLINE( 672)			bool _hx_tmp2;
HXDLIN( 672)			if (!(this->showDefaultContextMenu)) {
HXLINE( 672)				_hx_tmp2 = (button == (int)2);
            			}
            			else {
HXLINE( 672)				_hx_tmp2 = false;
            			}
HXDLIN( 672)			if (_hx_tmp2) {
HXLINE( 674)				window->onMouseUp->cancel();
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 680)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onMouseUp,(void))

void Stage_obj::onMouseWheel( ::lime::ui::Window window,Float deltaX,Float deltaY){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_687_onMouseWheel)
HXLINE( 689)		bool _hx_tmp;
HXDLIN( 689)		if (hx::IsNotNull( this->window )) {
HXLINE( 689)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 689)			_hx_tmp = true;
            		}
HXDLIN( 689)		if (_hx_tmp) {
HXLINE( 689)			return;
            		}
HXLINE( 691)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 693)			int _hx_tmp1 = ::Std_obj::_hx_int((deltaX * window->_hx___scale));
HXDLIN( 693)			this->_hx___onMouseWheel(_hx_tmp1,::Std_obj::_hx_int((deltaY * window->_hx___scale)));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 697)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onMouseWheel,(void))

void Stage_obj::onPreloadComplete(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_704_onPreloadComplete)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,onPreloadComplete,(void))

void Stage_obj::onPreloadProgress(int loaded,int total){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_711_onPreloadProgress)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onPreloadProgress,(void))

void Stage_obj::onRenderContextLost( ::lime::graphics::Renderer renderer){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_720_onRenderContextLost)
HXDLIN( 720)		this->_hx___renderer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onRenderContextLost,(void))

void Stage_obj::onRenderContextRestored( ::lime::graphics::Renderer renderer, ::lime::graphics::RenderContext context){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_727_onRenderContextRestored)
HXDLIN( 727)		this->_hx___createRenderer();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onRenderContextRestored,(void))

void Stage_obj::onTextEdit( ::lime::ui::Window window,::String text,int start,int length){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_732_onTextEdit)
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,onTextEdit,(void))

void Stage_obj::onTextInput( ::lime::ui::Window window,::String text){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_739_onTextInput)
HXLINE( 741)		bool _hx_tmp;
HXDLIN( 741)		if (hx::IsNotNull( this->window )) {
HXLINE( 741)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 741)			_hx_tmp = true;
            		}
HXDLIN( 741)		if (_hx_tmp) {
HXLINE( 741)			return;
            		}
HXLINE( 743)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 745)			::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE( 747)			if (hx::IsNull( this->_hx___focus )) {
HXLINE( 749)				this->_hx___getInteractive(stack);
            			}
            			else {
HXLINE( 753)				this->_hx___focus->_hx___getInteractive(stack);
            			}
HXLINE( 757)			 ::openfl::events::TextEvent event =  ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("textInput",1d,54,0b,57),true,false,text);
HXLINE( 758)			if ((stack->length > (int)0)) {
HXLINE( 760)				stack->reverse();
HXLINE( 761)				this->_hx___dispatchStack(event,stack);
            			}
            			else {
HXLINE( 765)				this->_hx___dispatchEvent(event);
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 771)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onTextInput,(void))

void Stage_obj::onTouchMove( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_780_onTouchMove)
HXDLIN( 780)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 782)			this->_hx___onTouch(HX_("touchMove",70,72,cd,0d),touch);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 786)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchMove,(void))

void Stage_obj::onTouchEnd( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_795_onTouchEnd)
HXDLIN( 795)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 797)			if (hx::IsEq( this->_hx___primaryTouch,touch )) {
HXLINE( 799)				this->_hx___primaryTouch = null();
            			}
HXLINE( 803)			this->_hx___onTouch(HX_("touchEnd",5c,c5,09,00),touch);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 807)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchEnd,(void))

void Stage_obj::onTouchStart( ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_816_onTouchStart)
HXDLIN( 816)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 818)			if (hx::IsNull( this->_hx___primaryTouch )) {
HXLINE( 820)				this->_hx___primaryTouch = touch;
            			}
HXLINE( 824)			this->_hx___onTouch(HX_("touchBegin",ea,cd,e6,a9),touch);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 828)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onTouchStart,(void))

void Stage_obj::onWindowActivate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_837_onWindowActivate)
HXDLIN( 837)		bool _hx_tmp;
HXDLIN( 837)		if (hx::IsNotNull( this->window )) {
HXDLIN( 837)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN( 837)			_hx_tmp = true;
            		}
HXDLIN( 837)		if (_hx_tmp) {
HXDLIN( 837)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowActivate,(void))

void Stage_obj::onWindowClose( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_852_onWindowClose)
HXLINE( 854)		if (hx::IsEq( this->window,window )) {
HXLINE( 856)			this->window = null();
            		}
HXLINE( 860)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 862)			this->_hx___primaryTouch = null();
HXLINE( 863)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null()));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 867)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowClose,(void))

void Stage_obj::onWindowCreate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_874_onWindowCreate)
HXLINE( 876)		bool _hx_tmp;
HXDLIN( 876)		if (hx::IsNotNull( this->window )) {
HXLINE( 876)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 876)			_hx_tmp = true;
            		}
HXDLIN( 876)		if (_hx_tmp) {
HXLINE( 876)			return;
            		}
HXLINE( 878)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 880)			if (hx::IsNotNull( window->renderer )) {
HXLINE( 882)				this->_hx___createRenderer();
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 888)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowCreate,(void))

void Stage_obj::onWindowDeactivate( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_897_onWindowDeactivate)
HXDLIN( 897)		bool _hx_tmp;
HXDLIN( 897)		if (hx::IsNotNull( this->window )) {
HXDLIN( 897)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN( 897)			_hx_tmp = true;
            		}
HXDLIN( 897)		if (_hx_tmp) {
HXDLIN( 897)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowDeactivate,(void))

void Stage_obj::onWindowDropFile( ::lime::ui::Window window,::String file){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_913_onWindowDropFile)
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,onWindowDropFile,(void))

void Stage_obj::onWindowEnter( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_920_onWindowEnter)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowEnter,(void))

void Stage_obj::onWindowFocusIn( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_927_onWindowFocusIn)
HXLINE( 929)		bool _hx_tmp;
HXDLIN( 929)		if (hx::IsNotNull( this->window )) {
HXLINE( 929)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 929)			_hx_tmp = true;
            		}
HXDLIN( 929)		if (_hx_tmp) {
HXLINE( 929)			return;
            		}
HXLINE( 931)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 933)			this->_hx___renderDirty = true;
HXLINE( 934)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("activate",b3,1b,ac,e5),null(),null()));
HXLINE( 936)			this->set_focus(this->_hx___cacheFocus);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 940)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFocusIn,(void))

void Stage_obj::onWindowFocusOut( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_947_onWindowFocusOut)
HXLINE( 949)		bool _hx_tmp;
HXDLIN( 949)		if (hx::IsNotNull( this->window )) {
HXLINE( 949)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 949)			_hx_tmp = true;
            		}
HXDLIN( 949)		if (_hx_tmp) {
HXLINE( 949)			return;
            		}
HXLINE( 951)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 953)			this->_hx___primaryTouch = null();
HXLINE( 954)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("deactivate",34,5c,01,3c),null(),null()));
HXLINE( 956)			 ::openfl::display::InteractiveObject currentFocus = this->get_focus();
HXLINE( 957)			this->set_focus(null());
HXLINE( 958)			this->_hx___cacheFocus = currentFocus;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 962)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFocusOut,(void))

void Stage_obj::onWindowFullscreen( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_969_onWindowFullscreen)
HXLINE( 971)		bool _hx_tmp;
HXDLIN( 971)		if (hx::IsNotNull( this->window )) {
HXLINE( 971)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 971)			_hx_tmp = true;
            		}
HXDLIN( 971)		if (_hx_tmp) {
HXLINE( 971)			return;
            		}
HXLINE( 973)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 975)			this->_hx___resize();
HXLINE( 977)			if (!(this->_hx___wasFullscreen)) {
HXLINE( 979)				this->_hx___wasFullscreen = true;
HXLINE( 980)				if (hx::IsEq( this->_hx___displayState,(int)2 )) {
HXLINE( 980)					this->_hx___displayState = (int)1;
            				}
HXLINE( 981)				this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,false,true));
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 987)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowFullscreen,(void))

void Stage_obj::onWindowLeave( ::lime::ui::Window window){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_994_onWindowLeave)
HXLINE( 996)		bool _hx_tmp;
HXDLIN( 996)		if (hx::IsNotNull( this->window )) {
HXLINE( 996)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE( 996)			_hx_tmp = true;
            		}
HXDLIN( 996)		if (_hx_tmp) {
HXLINE( 996)			return;
            		}
HXLINE( 998)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1000)			this->_hx___dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("mouseLeave",92,28,20,90),null(),null()));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(1004)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowLeave,(void))

void Stage_obj::onWindowMinimize( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1013_onWindowMinimize)
HXDLIN(1013)		bool _hx_tmp;
HXDLIN(1013)		if (hx::IsNotNull( this->window )) {
HXDLIN(1013)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN(1013)			_hx_tmp = true;
            		}
HXDLIN(1013)		if (_hx_tmp) {
HXDLIN(1013)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowMinimize,(void))

void Stage_obj::onWindowMove( ::lime::ui::Window window,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1029_onWindowMove)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onWindowMove,(void))

void Stage_obj::onWindowResize( ::lime::ui::Window window,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1036_onWindowResize)
HXLINE(1038)		bool _hx_tmp;
HXDLIN(1038)		if (hx::IsNotNull( this->window )) {
HXLINE(1038)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXLINE(1038)			_hx_tmp = true;
            		}
HXDLIN(1038)		if (_hx_tmp) {
HXLINE(1038)			return;
            		}
HXLINE(1040)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1042)			this->_hx___renderDirty = true;
HXLINE(1043)			this->_hx___resize();
HXLINE(1045)			bool _hx_tmp1;
HXDLIN(1045)			if (this->_hx___wasFullscreen) {
HXLINE(1045)				_hx_tmp1 = !(window->_hx___fullscreen);
            			}
            			else {
HXLINE(1045)				_hx_tmp1 = false;
            			}
HXDLIN(1045)			if (_hx_tmp1) {
HXLINE(1047)				this->_hx___wasFullscreen = false;
HXLINE(1048)				this->_hx___displayState = (int)2;
HXLINE(1049)				this->_hx___dispatchEvent( ::openfl::events::FullScreenEvent_obj::__alloc( HX_CTX ,HX_("fullScreen",5b,ae,48,2e),false,false,true,true));
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(1055)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,onWindowResize,(void))

void Stage_obj::onWindowRestore( ::lime::ui::Window window){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1064_onWindowRestore)
HXDLIN(1064)		bool _hx_tmp;
HXDLIN(1064)		if (hx::IsNotNull( this->window )) {
HXDLIN(1064)			_hx_tmp = hx::IsNotEq( this->window,window );
            		}
            		else {
HXDLIN(1064)			_hx_tmp = true;
            		}
HXDLIN(1064)		if (_hx_tmp) {
HXDLIN(1064)			return;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,onWindowRestore,(void))

void Stage_obj::render( ::lime::graphics::Renderer renderer){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1079_render)
HXLINE(1081)		bool _hx_tmp;
HXDLIN(1081)		if (hx::IsNotNull( renderer->window )) {
HXLINE(1081)			_hx_tmp = hx::IsNotEq( renderer->window,this->window );
            		}
            		else {
HXLINE(1081)			_hx_tmp = true;
            		}
HXDLIN(1081)		if (_hx_tmp) {
HXLINE(1081)			return;
            		}
HXLINE(1083)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1085)			if (this->_hx___rendering) {
HXLINE(1085)				return;
            			}
HXLINE(1086)			this->_hx___rendering = true;
HXLINE(1096)			bool _hx_tmp1;
HXDLIN(1096)			if (hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1096)				if (!(::openfl::display::Stage3D_obj::_hx___active)) {
HXLINE(1096)					_hx_tmp1 = ( ( ::openfl::display::Stage3D)(::openfl::_Vector::IVector_obj::get(this->stage3Ds->data,(int)0)) )->_hx___contextRequested;
            				}
            				else {
HXLINE(1096)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(1096)				_hx_tmp1 = false;
            			}
HXDLIN(1096)			if (_hx_tmp1) {
HXLINE(1098)				this->_hx___renderer->clear();
HXLINE(1099)				this->_hx___renderer->renderStage3D();
HXLINE(1100)				this->_hx___renderDirty = true;
            			}
HXLINE(1104)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("enterFrame",f5,03,50,02),null(),null()));
HXLINE(1105)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("frameConstructed",09,89,5d,98),null(),null()));
HXLINE(1106)			this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("exitFrame",2f,64,48,12),null(),null()));
HXLINE(1108)			if (this->_hx___invalidated) {
HXLINE(1110)				this->_hx___invalidated = false;
HXLINE(1111)				this->_hx___broadcastEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("render",56,6b,29,05),null(),null()));
            			}
HXLINE(1120)			this->_hx___renderable = true;
HXLINE(1122)			this->_hx___enterFrame(this->_hx___deltaTime);
HXLINE(1123)			this->_hx___deltaTime = (int)0;
HXLINE(1124)			this->_hx___update(false,true,null());
HXLINE(1126)			bool _hx_tmp2;
HXDLIN(1126)			if (hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1126)				_hx_tmp2 = this->_hx___renderDirty;
            			}
            			else {
HXLINE(1126)				_hx_tmp2 = false;
            			}
HXDLIN(1126)			if (_hx_tmp2) {
HXLINE(1128)				if (!(::openfl::display::Stage3D_obj::_hx___active)) {
HXLINE(1130)					this->_hx___renderer->clear();
            				}
HXLINE(1134)				if (hx::IsEq( renderer->type,::lime::graphics::RendererType_obj::CAIRO_dyn() )) {
HXLINE(1136)					 ::lime::graphics::RenderContext _g = renderer->context;
HXDLIN(1136)					if ((_hx_getEnumValueIndex(_g) == (int)4)) {
HXLINE(1138)						 ::lime::graphics::cairo::Cairo cairo = _g->_hx_getObject(0).StaticCast<  ::lime::graphics::cairo::Cairo >();
HXDLIN(1138)						{
HXLINE(1141)							hx::TCast<  ::openfl::_internal::renderer::cairo::CairoRenderer >::cast(this->_hx___renderer)->cairo = cairo;
HXLINE(1142)							this->_hx___renderer->renderSession->cairo = cairo;
            						}
            					}
            				}
HXLINE(1151)				this->_hx___renderer->render();
            			}
            			else {
HXLINE(1155)				renderer->onRender->cancel();
            			}
HXLINE(1164)			this->_hx___rendering = false;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(1168)				this->_hx___handleError(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,render,(void))

void Stage_obj::update(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1177_update)
HXDLIN(1177)		this->_hx___deltaTime = deltaTime;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,update,(void))

void Stage_obj::_hx___broadcastEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1184___broadcastEvent)
HXDLIN(1184)		if (::openfl::display::DisplayObject_obj::_hx___broadcastEvents->exists(event->type)) {
HXLINE(1186)			::Array< ::Dynamic> dispatchers = ( (::Array< ::Dynamic>)(::openfl::display::DisplayObject_obj::_hx___broadcastEvents->get(event->type)) );
HXLINE(1188)			{
HXLINE(1188)				int _g = (int)0;
HXDLIN(1188)				while((_g < dispatchers->length)){
HXLINE(1188)					 ::openfl::display::DisplayObject dispatcher = dispatchers->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1188)					_g = (_g + (int)1);
HXLINE(1190)					dispatcher->_hx___dispatch(event);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___broadcastEvent,(void))

void Stage_obj::_hx___createRenderer(){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1201___createRenderer)
HXDLIN(1201)		 ::lime::graphics::RenderContext _g = this->window->renderer->context;
HXDLIN(1201)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE(1203)				 ::lime::_backend::native::NativeGLRenderContext gl = _g->_hx_getObject(0).StaticCast<  ::lime::_backend::native::NativeGLRenderContext >();
HXLINE(1206)				this->_hx___renderer =  ::openfl::_internal::renderer::opengl::GLRenderer_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),gl,null());
            			}
            			break;
            			case (int)1: {
HXLINE(1209)				 ::lime::graphics::CanvasRenderContext context = _g->_hx_getObject(0).StaticCast<  ::lime::graphics::CanvasRenderContext >();
HXLINE(1211)				this->_hx___renderer =  ::openfl::_internal::renderer::canvas::CanvasRenderer_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),context);
            			}
            			break;
            			case (int)2: {
HXLINE(1213)				 ::lime::graphics::DOMRenderContext element = _g->_hx_getObject(0).StaticCast<  ::lime::graphics::DOMRenderContext >();
HXLINE(1215)				this->_hx___renderer =  ::openfl::_internal::renderer::dom::DOMRenderer_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),element);
            			}
            			break;
            			case (int)4: {
HXLINE(1217)				 ::lime::graphics::cairo::Cairo cairo = _g->_hx_getObject(0).StaticCast<  ::lime::graphics::cairo::Cairo >();
HXLINE(1220)				this->_hx___renderer =  ::openfl::_internal::renderer::cairo::CairoRenderer_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),cairo);
            			}
            			break;
            			case (int)5: {
HXLINE(1223)				 ::lime::graphics::ConsoleRenderContext ctx = _g->_hx_getObject(0).StaticCast<  ::lime::graphics::ConsoleRenderContext >();
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___createRenderer,(void))

void Stage_obj::_hx___drag( ::openfl::geom::Point mouse){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1236___drag)
HXLINE(1238)		 ::openfl::display::DisplayObjectContainer parent = this->_hx___dragObject->parent;
HXLINE(1239)		if (hx::IsNotNull( parent )) {
HXLINE(1241)			 ::openfl::geom::Matrix _this = parent->_hx___getWorldTransform();
HXDLIN(1241)			Float norm = (_this->a * _this->d);
HXDLIN(1241)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1241)			if ((norm1 == (int)0)) {
HXLINE(1241)				mouse->x = -(_this->tx);
HXDLIN(1241)				mouse->y = -(_this->ty);
            			}
            			else {
HXLINE(1241)				Float _this1 = _this->c;
HXDLIN(1241)				Float px = (_this1 * (_this->ty - mouse->y));
HXDLIN(1241)				Float _this2 = _this->d;
HXDLIN(1241)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (mouse->x - _this->tx))));
HXDLIN(1241)				Float _this3 = _this->a;
HXDLIN(1241)				Float _hx_tmp = (_this3 * (mouse->y - _this->ty));
HXDLIN(1241)				Float _this4 = _this->b;
HXDLIN(1241)				mouse->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - mouse->x))));
HXDLIN(1241)				mouse->x = px1;
            			}
            		}
HXLINE(1245)		Float x = (mouse->x + this->_hx___dragOffsetX);
HXLINE(1246)		Float y = (mouse->y + this->_hx___dragOffsetY);
HXLINE(1248)		if (hx::IsNotNull( this->_hx___dragBounds )) {
HXLINE(1250)			if ((x < this->_hx___dragBounds->x)) {
HXLINE(1252)				x = this->_hx___dragBounds->x;
            			}
            			else {
HXLINE(1254)				if ((x > this->_hx___dragBounds->get_right())) {
HXLINE(1256)					x = this->_hx___dragBounds->get_right();
            				}
            			}
HXLINE(1260)			if ((y < this->_hx___dragBounds->y)) {
HXLINE(1262)				y = this->_hx___dragBounds->y;
            			}
            			else {
HXLINE(1264)				if ((y > this->_hx___dragBounds->get_bottom())) {
HXLINE(1266)					y = this->_hx___dragBounds->get_bottom();
            				}
            			}
            		}
HXLINE(1272)		this->_hx___dragObject->set_x(x);
HXLINE(1273)		this->_hx___dragObject->set_y(y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___drag,(void))

bool Stage_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1278___getInteractive)
HXLINE(1280)		if (hx::IsNotNull( stack )) {
HXLINE(1282)			stack->push(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1286)		return true;
            	}


 ::openfl::geom::Point Stage_obj::_hx___globalToLocal( ::openfl::geom::Point global, ::openfl::geom::Point local){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1291___globalToLocal)
HXLINE(1293)		if (hx::IsNotEq( global,local )) {
HXLINE(1295)			local->copyFrom(global);
            		}
HXLINE(1299)		return local;
            	}


void Stage_obj::_hx___handleError( ::Dynamic e){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1304___handleError)
HXLINE(1306)		 ::openfl::events::UncaughtErrorEvent event =  ::openfl::events::UncaughtErrorEvent_obj::__alloc( HX_CTX ,HX_("uncaughtError",f3,98,8b,8b),true,true,e);
HXLINE(1307)		::openfl::Lib_obj::get_current()->_hx___loaderInfo->uncaughtErrorEvents->dispatchEvent(event);
HXLINE(1309)		if (!(event->_hx___preventDefault)) {
HXLINE(1317)			throw e;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___handleError,(void))

void Stage_obj::_hx___onKey(::String type,int keyCode,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1345___onKey)
HXLINE(1347)		::openfl::events::MouseEvent_obj::_hx___altKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier);
HXLINE(1348)		::openfl::events::MouseEvent_obj::_hx___commandKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier);
HXLINE(1349)		::openfl::events::MouseEvent_obj::_hx___ctrlKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
HXLINE(1350)		::openfl::events::MouseEvent_obj::_hx___shiftKey = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier);
HXLINE(1352)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(1354)		if (hx::IsNull( this->_hx___focus )) {
HXLINE(1356)			this->_hx___getInteractive(stack);
            		}
            		else {
HXLINE(1360)			this->_hx___focus->_hx___getInteractive(stack);
            		}
HXLINE(1364)		if ((stack->length > (int)0)) {
HXLINE(1366)			int keyLocation;
HXDLIN(1366)			switch((int)(keyCode)){
            				case (int)1073741908: case (int)1073741909: case (int)1073741910: case (int)1073741911: case (int)1073741912: case (int)1073741913: case (int)1073741914: case (int)1073741915: case (int)1073741916: case (int)1073741917: case (int)1073741918: case (int)1073741919: case (int)1073741920: case (int)1073741921: case (int)1073741922: case (int)1073741923: case (int)1073742044: {
HXLINE(1366)					keyLocation = (int)3;
            				}
            				break;
            				case (int)1073742048: case (int)1073742049: case (int)1073742050: case (int)1073742051: {
HXLINE(1366)					keyLocation = (int)1;
            				}
            				break;
            				case (int)1073742052: case (int)1073742053: case (int)1073742054: case (int)1073742055: {
HXLINE(1366)					keyLocation = (int)2;
            				}
            				break;
            				default:{
HXLINE(1366)					keyLocation = (int)0;
            				}
            			}
HXLINE(1367)			int keyCode1;
HXDLIN(1367)			switch((int)(keyCode)){
            				case (int)8: {
HXLINE(1367)					keyCode1 = (int)8;
            				}
            				break;
            				case (int)9: {
HXLINE(1367)					keyCode1 = (int)9;
            				}
            				break;
            				case (int)13: {
HXLINE(1367)					keyCode1 = (int)13;
            				}
            				break;
            				case (int)27: {
HXLINE(1367)					keyCode1 = (int)27;
            				}
            				break;
            				case (int)32: {
HXLINE(1367)					keyCode1 = (int)32;
            				}
            				break;
            				case (int)33: {
HXLINE(1367)					keyCode1 = (int)49;
            				}
            				break;
            				case (int)34: {
HXLINE(1367)					keyCode1 = (int)222;
            				}
            				break;
            				case (int)35: {
HXLINE(1367)					keyCode1 = (int)51;
            				}
            				break;
            				case (int)36: {
HXLINE(1367)					keyCode1 = (int)52;
            				}
            				break;
            				case (int)37: {
HXLINE(1367)					keyCode1 = (int)53;
            				}
            				break;
            				case (int)38: {
HXLINE(1367)					keyCode1 = (int)55;
            				}
            				break;
            				case (int)39: {
HXLINE(1367)					keyCode1 = (int)222;
            				}
            				break;
            				case (int)40: {
HXLINE(1367)					keyCode1 = (int)57;
            				}
            				break;
            				case (int)41: {
HXLINE(1367)					keyCode1 = (int)48;
            				}
            				break;
            				case (int)42: {
HXLINE(1367)					keyCode1 = (int)56;
            				}
            				break;
            				case (int)44: {
HXLINE(1367)					keyCode1 = (int)188;
            				}
            				break;
            				case (int)45: {
HXLINE(1367)					keyCode1 = (int)189;
            				}
            				break;
            				case (int)46: {
HXLINE(1367)					keyCode1 = (int)190;
            				}
            				break;
            				case (int)47: {
HXLINE(1367)					keyCode1 = (int)191;
            				}
            				break;
            				case (int)48: {
HXLINE(1367)					keyCode1 = (int)48;
            				}
            				break;
            				case (int)49: {
HXLINE(1367)					keyCode1 = (int)49;
            				}
            				break;
            				case (int)50: {
HXLINE(1367)					keyCode1 = (int)50;
            				}
            				break;
            				case (int)51: {
HXLINE(1367)					keyCode1 = (int)51;
            				}
            				break;
            				case (int)52: {
HXLINE(1367)					keyCode1 = (int)52;
            				}
            				break;
            				case (int)53: {
HXLINE(1367)					keyCode1 = (int)53;
            				}
            				break;
            				case (int)54: {
HXLINE(1367)					keyCode1 = (int)54;
            				}
            				break;
            				case (int)55: {
HXLINE(1367)					keyCode1 = (int)55;
            				}
            				break;
            				case (int)56: {
HXLINE(1367)					keyCode1 = (int)56;
            				}
            				break;
            				case (int)57: {
HXLINE(1367)					keyCode1 = (int)57;
            				}
            				break;
            				case (int)58: {
HXLINE(1367)					keyCode1 = (int)186;
            				}
            				break;
            				case (int)59: {
HXLINE(1367)					keyCode1 = (int)186;
            				}
            				break;
            				case (int)60: {
HXLINE(1367)					keyCode1 = (int)60;
            				}
            				break;
            				case (int)61: {
HXLINE(1367)					keyCode1 = (int)187;
            				}
            				break;
            				case (int)62: {
HXLINE(1367)					keyCode1 = (int)190;
            				}
            				break;
            				case (int)63: {
HXLINE(1367)					keyCode1 = (int)191;
            				}
            				break;
            				case (int)64: {
HXLINE(1367)					keyCode1 = (int)50;
            				}
            				break;
            				case (int)91: {
HXLINE(1367)					keyCode1 = (int)219;
            				}
            				break;
            				case (int)92: {
HXLINE(1367)					keyCode1 = (int)220;
            				}
            				break;
            				case (int)93: {
HXLINE(1367)					keyCode1 = (int)221;
            				}
            				break;
            				case (int)94: {
HXLINE(1367)					keyCode1 = (int)54;
            				}
            				break;
            				case (int)95: {
HXLINE(1367)					keyCode1 = (int)189;
            				}
            				break;
            				case (int)96: {
HXLINE(1367)					keyCode1 = (int)192;
            				}
            				break;
            				case (int)97: {
HXLINE(1367)					keyCode1 = (int)65;
            				}
            				break;
            				case (int)98: {
HXLINE(1367)					keyCode1 = (int)66;
            				}
            				break;
            				case (int)99: {
HXLINE(1367)					keyCode1 = (int)67;
            				}
            				break;
            				case (int)100: {
HXLINE(1367)					keyCode1 = (int)68;
            				}
            				break;
            				case (int)101: {
HXLINE(1367)					keyCode1 = (int)69;
            				}
            				break;
            				case (int)102: {
HXLINE(1367)					keyCode1 = (int)70;
            				}
            				break;
            				case (int)103: {
HXLINE(1367)					keyCode1 = (int)71;
            				}
            				break;
            				case (int)104: {
HXLINE(1367)					keyCode1 = (int)72;
            				}
            				break;
            				case (int)105: {
HXLINE(1367)					keyCode1 = (int)73;
            				}
            				break;
            				case (int)106: {
HXLINE(1367)					keyCode1 = (int)74;
            				}
            				break;
            				case (int)107: {
HXLINE(1367)					keyCode1 = (int)75;
            				}
            				break;
            				case (int)108: {
HXLINE(1367)					keyCode1 = (int)76;
            				}
            				break;
            				case (int)109: {
HXLINE(1367)					keyCode1 = (int)77;
            				}
            				break;
            				case (int)110: {
HXLINE(1367)					keyCode1 = (int)78;
            				}
            				break;
            				case (int)111: {
HXLINE(1367)					keyCode1 = (int)79;
            				}
            				break;
            				case (int)112: {
HXLINE(1367)					keyCode1 = (int)80;
            				}
            				break;
            				case (int)113: {
HXLINE(1367)					keyCode1 = (int)81;
            				}
            				break;
            				case (int)114: {
HXLINE(1367)					keyCode1 = (int)82;
            				}
            				break;
            				case (int)115: {
HXLINE(1367)					keyCode1 = (int)83;
            				}
            				break;
            				case (int)116: {
HXLINE(1367)					keyCode1 = (int)84;
            				}
            				break;
            				case (int)117: {
HXLINE(1367)					keyCode1 = (int)85;
            				}
            				break;
            				case (int)118: {
HXLINE(1367)					keyCode1 = (int)86;
            				}
            				break;
            				case (int)119: {
HXLINE(1367)					keyCode1 = (int)87;
            				}
            				break;
            				case (int)120: {
HXLINE(1367)					keyCode1 = (int)88;
            				}
            				break;
            				case (int)121: {
HXLINE(1367)					keyCode1 = (int)89;
            				}
            				break;
            				case (int)122: {
HXLINE(1367)					keyCode1 = (int)90;
            				}
            				break;
            				case (int)127: {
HXLINE(1367)					keyCode1 = (int)46;
            				}
            				break;
            				case (int)1073741881: {
HXLINE(1367)					keyCode1 = (int)20;
            				}
            				break;
            				case (int)1073741882: {
HXLINE(1367)					keyCode1 = (int)112;
            				}
            				break;
            				case (int)1073741883: {
HXLINE(1367)					keyCode1 = (int)113;
            				}
            				break;
            				case (int)1073741884: {
HXLINE(1367)					keyCode1 = (int)114;
            				}
            				break;
            				case (int)1073741885: {
HXLINE(1367)					keyCode1 = (int)115;
            				}
            				break;
            				case (int)1073741886: {
HXLINE(1367)					keyCode1 = (int)116;
            				}
            				break;
            				case (int)1073741887: {
HXLINE(1367)					keyCode1 = (int)117;
            				}
            				break;
            				case (int)1073741888: {
HXLINE(1367)					keyCode1 = (int)118;
            				}
            				break;
            				case (int)1073741889: {
HXLINE(1367)					keyCode1 = (int)119;
            				}
            				break;
            				case (int)1073741890: {
HXLINE(1367)					keyCode1 = (int)120;
            				}
            				break;
            				case (int)1073741891: {
HXLINE(1367)					keyCode1 = (int)121;
            				}
            				break;
            				case (int)1073741892: {
HXLINE(1367)					keyCode1 = (int)122;
            				}
            				break;
            				case (int)1073741893: {
HXLINE(1367)					keyCode1 = (int)123;
            				}
            				break;
            				case (int)1073741894: {
HXLINE(1367)					keyCode1 = (int)301;
            				}
            				break;
            				case (int)1073741895: {
HXLINE(1367)					keyCode1 = (int)145;
            				}
            				break;
            				case (int)1073741896: {
HXLINE(1367)					keyCode1 = (int)19;
            				}
            				break;
            				case (int)1073741897: {
HXLINE(1367)					keyCode1 = (int)45;
            				}
            				break;
            				case (int)1073741898: {
HXLINE(1367)					keyCode1 = (int)36;
            				}
            				break;
            				case (int)1073741899: {
HXLINE(1367)					keyCode1 = (int)33;
            				}
            				break;
            				case (int)1073741901: {
HXLINE(1367)					keyCode1 = (int)35;
            				}
            				break;
            				case (int)1073741902: {
HXLINE(1367)					keyCode1 = (int)34;
            				}
            				break;
            				case (int)1073741903: {
HXLINE(1367)					keyCode1 = (int)39;
            				}
            				break;
            				case (int)1073741904: {
HXLINE(1367)					keyCode1 = (int)37;
            				}
            				break;
            				case (int)1073741905: {
HXLINE(1367)					keyCode1 = (int)40;
            				}
            				break;
            				case (int)1073741906: {
HXLINE(1367)					keyCode1 = (int)38;
            				}
            				break;
            				case (int)1073741907: {
HXLINE(1367)					keyCode1 = (int)144;
            				}
            				break;
            				case (int)1073741908: {
HXLINE(1367)					keyCode1 = (int)111;
            				}
            				break;
            				case (int)1073741909: {
HXLINE(1367)					keyCode1 = (int)106;
            				}
            				break;
            				case (int)1073741910: {
HXLINE(1367)					keyCode1 = (int)109;
            				}
            				break;
            				case (int)1073741911: {
HXLINE(1367)					keyCode1 = (int)107;
            				}
            				break;
            				case (int)1073741912: {
HXLINE(1367)					keyCode1 = (int)108;
            				}
            				break;
            				case (int)1073741913: {
HXLINE(1367)					keyCode1 = (int)97;
            				}
            				break;
            				case (int)1073741914: {
HXLINE(1367)					keyCode1 = (int)98;
            				}
            				break;
            				case (int)1073741915: {
HXLINE(1367)					keyCode1 = (int)99;
            				}
            				break;
            				case (int)1073741916: {
HXLINE(1367)					keyCode1 = (int)100;
            				}
            				break;
            				case (int)1073741917: {
HXLINE(1367)					keyCode1 = (int)101;
            				}
            				break;
            				case (int)1073741918: {
HXLINE(1367)					keyCode1 = (int)102;
            				}
            				break;
            				case (int)1073741919: {
HXLINE(1367)					keyCode1 = (int)103;
            				}
            				break;
            				case (int)1073741920: {
HXLINE(1367)					keyCode1 = (int)104;
            				}
            				break;
            				case (int)1073741921: {
HXLINE(1367)					keyCode1 = (int)105;
            				}
            				break;
            				case (int)1073741922: {
HXLINE(1367)					keyCode1 = (int)96;
            				}
            				break;
            				case (int)1073741923: {
HXLINE(1367)					keyCode1 = (int)110;
            				}
            				break;
            				case (int)1073741925: {
HXLINE(1367)					keyCode1 = (int)302;
            				}
            				break;
            				case (int)1073741928: {
HXLINE(1367)					keyCode1 = (int)124;
            				}
            				break;
            				case (int)1073741929: {
HXLINE(1367)					keyCode1 = (int)125;
            				}
            				break;
            				case (int)1073741930: {
HXLINE(1367)					keyCode1 = (int)126;
            				}
            				break;
            				case (int)1073741982: {
HXLINE(1367)					keyCode1 = (int)13;
            				}
            				break;
            				case (int)1073742044: {
HXLINE(1367)					keyCode1 = (int)110;
            				}
            				break;
            				case (int)1073742048: {
HXLINE(1367)					keyCode1 = (int)17;
            				}
            				break;
            				case (int)1073742049: {
HXLINE(1367)					keyCode1 = (int)16;
            				}
            				break;
            				case (int)1073742050: {
HXLINE(1367)					keyCode1 = (int)18;
            				}
            				break;
            				case (int)1073742051: {
HXLINE(1367)					keyCode1 = (int)15;
            				}
            				break;
            				case (int)1073742052: {
HXLINE(1367)					keyCode1 = (int)17;
            				}
            				break;
            				case (int)1073742053: {
HXLINE(1367)					keyCode1 = (int)16;
            				}
            				break;
            				case (int)1073742054: {
HXLINE(1367)					keyCode1 = (int)18;
            				}
            				break;
            				case (int)1073742055: {
HXLINE(1367)					keyCode1 = (int)15;
            				}
            				break;
            				default:{
HXLINE(1367)					keyCode1 = keyCode;
            				}
            			}
HXLINE(1368)			int charCode = ::openfl::ui::Keyboard_obj::_hx___getCharCode(keyCode1,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier));
HXLINE(1372)			bool event;
HXDLIN(1372)			if (this->_hx___macKeyboard) {
HXLINE(1372)				if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier))) {
HXLINE(1372)					event = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier);
            				}
            				else {
HXLINE(1372)					event = true;
            				}
            			}
            			else {
HXLINE(1372)				event = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
            			}
HXDLIN(1372)			bool event1 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier);
HXDLIN(1372)			bool event2 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier);
HXDLIN(1372)			bool event3 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier);
HXDLIN(1372)			 ::openfl::events::KeyboardEvent event4 =  ::openfl::events::KeyboardEvent_obj::__alloc( HX_CTX ,type,true,true,charCode,keyCode1,keyLocation,event,event1,event2,event3,::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier));
HXLINE(1374)			stack->reverse();
HXLINE(1375)			this->_hx___dispatchStack(event4,stack);
HXLINE(1377)			if (event4->_hx___preventDefault) {
HXLINE(1379)				if ((type == HX_("keyDown",a1,69,47,9c))) {
HXLINE(1381)					this->window->onKeyDown->cancel();
            				}
            				else {
HXLINE(1385)					this->window->onKeyUp->cancel();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___onKey,(void))

void Stage_obj::_hx___onGamepadConnect( ::lime::ui::Gamepad gamepad){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::lime::ui::Gamepad,a1) HXARGC(2)
            		void _hx_run(int a2,Float a3){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1400___onGamepadConnect)
HXLINE(1400)			f(a1,a2,a3);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::ui::Gamepad,a11, ::Dynamic,f1) HXARGC(1)
            		void _hx_run(int a21){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1401___onGamepadConnect)
HXLINE(1401)			f1(a11,a21);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::lime::ui::Gamepad,a12, ::Dynamic,f2) HXARGC(1)
            		void _hx_run(int a22){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1402___onGamepadConnect)
HXLINE(1402)			f2(a12,a22);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::lime::ui::Gamepad,a13, ::Dynamic,f3) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1403___onGamepadConnect)
HXLINE(1403)			f3(a13);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1396___onGamepadConnect)
HXLINE(1398)		this->onGamepadConnect(gamepad);
HXLINE(1400)		 ::Dynamic f = this->onGamepadAxisMove_dyn();
HXDLIN(1400)		 ::lime::ui::Gamepad a1 = gamepad;
HXDLIN(1400)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN(1400)		gamepad->onAxisMove->add(_hx_tmp,null(),null());
HXLINE(1401)		 ::Dynamic f1 = this->onGamepadButtonDown_dyn();
HXDLIN(1401)		 ::lime::ui::Gamepad a11 = gamepad;
HXDLIN(1401)		 ::Dynamic _hx_tmp1 =  ::Dynamic(new _hx_Closure_1(a11,f1));
HXDLIN(1401)		gamepad->onButtonDown->add(_hx_tmp1,null(),null());
HXLINE(1402)		 ::Dynamic f2 = this->onGamepadButtonUp_dyn();
HXDLIN(1402)		 ::lime::ui::Gamepad a12 = gamepad;
HXDLIN(1402)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_2(a12,f2));
HXDLIN(1402)		gamepad->onButtonUp->add(_hx_tmp2,null(),null());
HXLINE(1403)		 ::Dynamic f3 = this->onGamepadDisconnect_dyn();
HXDLIN(1403)		 ::lime::ui::Gamepad a13 = gamepad;
HXDLIN(1403)		 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_3(a13,f3));
HXDLIN(1403)		gamepad->onDisconnect->add(_hx_tmp3,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___onGamepadConnect,(void))

void Stage_obj::_hx___onMouse(::String type,Float x,Float y,int button){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1408___onMouse)
HXLINE(1410)		if ((button > (int)2)) {
HXLINE(1410)			return;
            		}
HXLINE(1412)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get();
HXLINE(1413)		targetPoint->setTo(x,y);
HXLINE(1414)		{
HXLINE(1414)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(1414)			Float norm = (_this->a * _this->d);
HXDLIN(1414)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1414)			if ((norm1 == (int)0)) {
HXLINE(1414)				targetPoint->x = -(_this->tx);
HXDLIN(1414)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(1414)				Float _this1 = _this->c;
HXDLIN(1414)				Float px = (_this1 * (_this->ty - targetPoint->y));
HXDLIN(1414)				Float _this2 = _this->d;
HXDLIN(1414)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (targetPoint->x - _this->tx))));
HXDLIN(1414)				Float _this3 = _this->a;
HXDLIN(1414)				Float _hx_tmp = (_this3 * (targetPoint->y - _this->ty));
HXDLIN(1414)				Float _this4 = _this->b;
HXDLIN(1414)				targetPoint->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - targetPoint->x))));
HXDLIN(1414)				targetPoint->x = px1;
            			}
            		}
HXLINE(1416)		this->_hx___mouseX = targetPoint->x;
HXLINE(1417)		this->_hx___mouseY = targetPoint->y;
HXLINE(1419)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1420)		 ::openfl::display::InteractiveObject target = null();
HXLINE(1422)		if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,hx::ObjectPtr<OBJ_>(this))) {
HXLINE(1424)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(1428)			target = hx::ObjectPtr<OBJ_>(this);
HXLINE(1429)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1433)		if (hx::IsNull( target )) {
HXLINE(1433)			target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1435)		::String clickType = null();
HXLINE(1437)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("middleMouseDown",12,2b,fe,01)) ){
HXLINE(1456)			this->_hx___mouseDownMiddle = target;
HXDLIN(1456)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("middleMouseUp",0b,8d,f5,3a)) ){
HXLINE(1484)			if (hx::IsEq( this->_hx___mouseDownMiddle,target )) {
HXLINE(1486)				clickType = HX_("middleClick",b3,e4,e5,43);
            			}
HXLINE(1490)			this->_hx___mouseDownMiddle = null();
HXLINE(1482)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("mouseDown",27,b1,c2,ee)) ){
HXLINE(1441)			if (target->_hx___allowMouseFocus()) {
HXLINE(1443)				this->set_focus(target);
            			}
            			else {
HXLINE(1447)				this->set_focus(null());
            			}
HXLINE(1451)			this->_hx___mouseDownLeft = target;
HXLINE(1452)			::openfl::events::MouseEvent_obj::_hx___buttonDown = true;
HXLINE(1439)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("mouseUp",e0,f3,72,c0)) ){
HXLINE(1464)			if (hx::IsNotNull( this->_hx___mouseDownLeft )) {
HXLINE(1466)				::openfl::events::MouseEvent_obj::_hx___buttonDown = false;
HXLINE(1468)				bool _hx_tmp1;
HXDLIN(1468)				if (!((this->_hx___mouseX < (int)0))) {
HXLINE(1468)					_hx_tmp1 = (this->_hx___mouseY < (int)0);
            				}
            				else {
HXLINE(1468)					_hx_tmp1 = true;
            				}
HXDLIN(1468)				if (_hx_tmp1) {
HXLINE(1470)					Float _hx_tmp2 = this->_hx___mouseX;
HXDLIN(1470)					Float _hx_tmp3 = this->_hx___mouseY;
HXDLIN(1470)					this->_hx___dispatchEvent(::openfl::events::MouseEvent_obj::_hx___create(HX_("releaseOutside",1e,86,e3,ad),(int)1,_hx_tmp2,_hx_tmp3, ::openfl::geom::Point_obj::__alloc( HX_CTX ,this->_hx___mouseX,this->_hx___mouseY),hx::ObjectPtr<OBJ_>(this),null()));
            				}
            				else {
HXLINE(1472)					if (hx::IsEq( this->_hx___mouseDownLeft,target )) {
HXLINE(1474)						clickType = HX_("click",48,7c,5e,48);
            					}
            				}
HXLINE(1478)				this->_hx___mouseDownLeft = null();
            			}
HXLINE(1464)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("rightMouseDown",ab,29,d7,cd)) ){
HXLINE(1460)			this->_hx___mouseDownRight = target;
HXDLIN(1460)			goto _hx_goto_95;
            		}
            		if (  (_hx_switch_0==HX_("rightMouseUp",64,83,21,ab)) ){
HXLINE(1494)			if (hx::IsEq( this->_hx___mouseDownRight,target )) {
HXLINE(1496)				clickType = HX_("rightClick",cc,62,23,4b);
            			}
HXLINE(1500)			this->_hx___mouseDownRight = null();
HXLINE(1492)			goto _hx_goto_95;
            		}
            		/* default */{
            		}
            		_hx_goto_95:;
HXLINE(1506)		 ::openfl::geom::Point localPoint = ::openfl::geom::Point_obj::_hx___pool->get();
HXLINE(1508)		Float _hx_tmp4 = this->_hx___mouseX;
HXDLIN(1508)		Float _hx_tmp5 = this->_hx___mouseY;
HXDLIN(1508)		this->_hx___dispatchStack(::openfl::events::MouseEvent_obj::_hx___create(type,button,_hx_tmp4,_hx_tmp5,target->_hx___globalToLocal(targetPoint,localPoint),target,null()),stack);
HXLINE(1510)		if (hx::IsNotNull( clickType )) {
HXLINE(1512)			Float _hx_tmp6 = this->_hx___mouseX;
HXDLIN(1512)			Float _hx_tmp7 = this->_hx___mouseY;
HXDLIN(1512)			this->_hx___dispatchStack(::openfl::events::MouseEvent_obj::_hx___create(clickType,button,_hx_tmp6,_hx_tmp7,target->_hx___globalToLocal(targetPoint,localPoint),target,null()),stack);
HXLINE(1514)			bool _hx_tmp8;
HXDLIN(1514)			if ((type == HX_("mouseUp",e0,f3,72,c0))) {
HXLINE(1514)				_hx_tmp8 = target->doubleClickEnabled;
            			}
            			else {
HXLINE(1514)				_hx_tmp8 = false;
            			}
HXDLIN(1514)			if (_hx_tmp8) {
HXLINE(1516)				int currentTime = ::openfl::Lib_obj::getTimer();
HXLINE(1517)				if (((currentTime - this->_hx___lastClickTime) < (int)500)) {
HXLINE(1519)					Float _hx_tmp9 = this->_hx___mouseX;
HXDLIN(1519)					Float _hx_tmp10 = this->_hx___mouseY;
HXDLIN(1519)					this->_hx___dispatchStack(::openfl::events::MouseEvent_obj::_hx___create(HX_("doubleClick",77,03,76,cd),button,_hx_tmp9,_hx_tmp10,target->_hx___globalToLocal(targetPoint,localPoint),target,null()),stack);
HXLINE(1520)					this->_hx___lastClickTime = (int)0;
            				}
            				else {
HXLINE(1524)					this->_hx___lastClickTime = currentTime;
            				}
            			}
            		}
HXLINE(1532)		if ((::openfl::ui::Mouse_obj::_hx___cursor == HX_("auto",6f,df,76,40))) {
HXLINE(1534)			 ::lime::ui::MouseCursor cursor = null();
HXLINE(1536)			if (hx::IsNotNull( this->_hx___mouseDownLeft )) {
HXLINE(1538)				cursor = this->_hx___mouseDownLeft->_hx___getCursor();
            			}
            			else {
HXLINE(1542)				int _g = (int)0;
HXDLIN(1542)				while((_g < stack->length)){
HXLINE(1542)					 ::openfl::display::DisplayObject target1 = stack->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1542)					_g = (_g + (int)1);
HXLINE(1544)					cursor = target1->_hx___getCursor();
HXLINE(1546)					if (hx::IsNotNull( cursor )) {
HXLINE(1548)						::lime::ui::Mouse_obj::set_cursor(cursor);
HXLINE(1549)						goto _hx_goto_96;
            					}
            				}
            				_hx_goto_96:;
            			}
HXLINE(1557)			if (hx::IsNull( cursor )) {
HXLINE(1559)				::lime::ui::Mouse_obj::set_cursor(::lime::ui::MouseCursor_obj::ARROW_dyn());
            			}
            		}
HXLINE(1565)		 ::openfl::events::MouseEvent event;
HXLINE(1567)		if (hx::IsNotEq( target,this->_hx___mouseOverTarget )) {
HXLINE(1569)			if (hx::IsNotNull( this->_hx___mouseOverTarget )) {
HXLINE(1571)				Float event1 = this->_hx___mouseX;
HXDLIN(1571)				Float event2 = this->_hx___mouseY;
HXDLIN(1571)				 ::openfl::geom::Point event3 = this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint);
HXDLIN(1571)				event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseOut",69,e7,1d,a4),button,event1,event2,event3,this->_hx___mouseOverTarget,null());
HXLINE(1572)				this->_hx___mouseOverTarget->_hx___dispatchEvent(event);
            			}
            		}
HXLINE(1578)		{
HXLINE(1578)			int _g1 = (int)0;
HXDLIN(1578)			::Array< ::Dynamic> _g11 = this->_hx___rollOutStack;
HXDLIN(1578)			while((_g1 < _g11->length)){
HXLINE(1578)				 ::openfl::display::DisplayObject target2 = _g11->__get(_g1).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1578)				_g1 = (_g1 + (int)1);
HXLINE(1580)				if ((stack->indexOf(target2,null()) == (int)-1)) {
HXLINE(1582)					this->_hx___rollOutStack->remove(target2);
HXLINE(1584)					Float event4 = this->_hx___mouseX;
HXDLIN(1584)					Float event5 = this->_hx___mouseY;
HXDLIN(1584)					 ::openfl::geom::Point event6 = this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint);
HXDLIN(1584)					event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("rollOut",11,f9,11,5d),button,event4,event5,event6,this->_hx___mouseOverTarget,null());
HXLINE(1585)					event->bubbles = false;
HXLINE(1586)					target2->_hx___dispatchEvent(event);
            				}
            			}
            		}
HXLINE(1592)		{
HXLINE(1592)			int _g2 = (int)0;
HXDLIN(1592)			while((_g2 < stack->length)){
HXLINE(1592)				 ::openfl::display::DisplayObject target3 = stack->__get(_g2).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1592)				_g2 = (_g2 + (int)1);
HXLINE(1594)				bool _hx_tmp11;
HXDLIN(1594)				if ((this->_hx___rollOutStack->indexOf(target3,null()) == (int)-1)) {
HXLINE(1594)					_hx_tmp11 = hx::IsNotNull( this->_hx___mouseOverTarget );
            				}
            				else {
HXLINE(1594)					_hx_tmp11 = false;
            				}
HXDLIN(1594)				if (_hx_tmp11) {
HXLINE(1596)					if (target3->hasEventListener(HX_("rollOver",71,ab,a8,12))) {
HXLINE(1598)						Float event7 = this->_hx___mouseX;
HXDLIN(1598)						Float event8 = this->_hx___mouseY;
HXDLIN(1598)						event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("rollOver",71,ab,a8,12),button,event7,event8,this->_hx___mouseOverTarget->_hx___globalToLocal(targetPoint,localPoint),( ( ::openfl::display::InteractiveObject)(target3) ),null());
HXLINE(1599)						event->bubbles = false;
HXLINE(1600)						target3->_hx___dispatchEvent(event);
            					}
HXLINE(1604)					if (target3->hasEventListener(HX_("rollOut",11,f9,11,5d))) {
HXLINE(1606)						this->_hx___rollOutStack->push(target3);
            					}
            				}
            			}
            		}
HXLINE(1614)		if (hx::IsNotEq( target,this->_hx___mouseOverTarget )) {
HXLINE(1616)			if (hx::IsNotNull( target )) {
HXLINE(1618)				Float event9 = this->_hx___mouseX;
HXDLIN(1618)				Float event10 = this->_hx___mouseY;
HXDLIN(1618)				event = ::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseOver",19,4a,0d,f6),button,event9,event10,target->_hx___globalToLocal(targetPoint,localPoint),target,null());
HXLINE(1619)				event->bubbles = true;
HXLINE(1620)				target->_hx___dispatchEvent(event);
            			}
HXLINE(1624)			this->_hx___mouseOverTarget = target;
            		}
HXLINE(1628)		if (hx::IsNotNull( this->_hx___dragObject )) {
HXLINE(1630)			this->_hx___drag(targetPoint);
HXLINE(1632)			 ::openfl::display::DisplayObject dropTarget = null();
HXLINE(1634)			if (hx::IsEq( this->_hx___mouseOverTarget,this->_hx___dragObject )) {
HXLINE(1636)				bool cacheMouseEnabled = this->_hx___dragObject->mouseEnabled;
HXLINE(1637)				bool cacheMouseChildren = this->_hx___dragObject->mouseChildren;
HXLINE(1639)				this->_hx___dragObject->mouseEnabled = false;
HXLINE(1640)				this->_hx___dragObject->mouseChildren = false;
HXLINE(1642)				::Array< ::Dynamic> stack1 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1644)				if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack1,true,hx::ObjectPtr<OBJ_>(this))) {
HXLINE(1646)					dropTarget = stack1->__get((stack1->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >();
            				}
HXLINE(1650)				this->_hx___dragObject->mouseEnabled = cacheMouseEnabled;
HXLINE(1651)				this->_hx___dragObject->mouseChildren = cacheMouseChildren;
            			}
            			else {
HXLINE(1653)				if (hx::IsNotEq( this->_hx___mouseOverTarget,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1655)					dropTarget = this->_hx___mouseOverTarget;
            				}
            			}
HXLINE(1659)			this->_hx___dragObject->dropTarget = dropTarget;
            		}
HXLINE(1663)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
HXLINE(1664)		::openfl::geom::Point_obj::_hx___pool->release(localPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Stage_obj,_hx___onMouse,(void))

void Stage_obj::_hx___onMouseWheel(Float deltaX,Float deltaY){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1669___onMouseWheel)
HXLINE(1671)		Float x = this->_hx___mouseX;
HXLINE(1672)		Float y = this->_hx___mouseY;
HXLINE(1674)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1675)		 ::openfl::display::InteractiveObject target = null();
HXLINE(1677)		if (this->_hx___hitTest(this->_hx___mouseX,this->_hx___mouseY,true,stack,true,hx::ObjectPtr<OBJ_>(this))) {
HXLINE(1679)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(1683)			target = hx::ObjectPtr<OBJ_>(this);
HXLINE(1684)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1688)		if (hx::IsNull( target )) {
HXLINE(1688)			target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1689)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get();
HXLINE(1690)		targetPoint->setTo(x,y);
HXLINE(1691)		{
HXLINE(1691)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(1691)			Float norm = (_this->a * _this->d);
HXDLIN(1691)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1691)			if ((norm1 == (int)0)) {
HXLINE(1691)				targetPoint->x = -(_this->tx);
HXDLIN(1691)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(1691)				Float _this1 = _this->c;
HXDLIN(1691)				Float px = (_this1 * (_this->ty - targetPoint->y));
HXDLIN(1691)				Float _this2 = _this->d;
HXDLIN(1691)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (targetPoint->x - _this->tx))));
HXDLIN(1691)				Float _this3 = _this->a;
HXDLIN(1691)				Float _hx_tmp = (_this3 * (targetPoint->y - _this->ty));
HXDLIN(1691)				Float _this4 = _this->b;
HXDLIN(1691)				targetPoint->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - targetPoint->x))));
HXDLIN(1691)				targetPoint->x = px1;
            			}
            		}
HXLINE(1692)		int delta = ::Std_obj::_hx_int(deltaY);
HXLINE(1694)		Float _hx_tmp1 = this->_hx___mouseX;
HXDLIN(1694)		Float _hx_tmp2 = this->_hx___mouseY;
HXDLIN(1694)		this->_hx___dispatchStack(::openfl::events::MouseEvent_obj::_hx___create(HX_("mouseWheel",36,28,87,e7),(int)0,_hx_tmp1,_hx_tmp2,target->_hx___globalToLocal(targetPoint,targetPoint),target,delta),stack);
HXLINE(1696)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onMouseWheel,(void))

void Stage_obj::_hx___onTouch(::String type, ::lime::ui::Touch touch){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1701___onTouch)
HXLINE(1703)		 ::openfl::geom::Point targetPoint = ::openfl::geom::Point_obj::_hx___pool->get();
HXLINE(1704)		int _hx_tmp = ::Math_obj::round(((touch->x * this->window->_hx___width) * this->window->_hx___scale));
HXDLIN(1704)		targetPoint->setTo(_hx_tmp,::Math_obj::round(((touch->y * this->window->_hx___height) * this->window->_hx___scale)));
HXLINE(1705)		{
HXLINE(1705)			 ::openfl::geom::Matrix _this = this->_hx___displayMatrix;
HXDLIN(1705)			Float norm = (_this->a * _this->d);
HXDLIN(1705)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1705)			if ((norm1 == (int)0)) {
HXLINE(1705)				targetPoint->x = -(_this->tx);
HXDLIN(1705)				targetPoint->y = -(_this->ty);
            			}
            			else {
HXLINE(1705)				Float _this1 = _this->c;
HXDLIN(1705)				Float px = (_this1 * (_this->ty - targetPoint->y));
HXDLIN(1705)				Float _this2 = _this->d;
HXDLIN(1705)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (targetPoint->x - _this->tx))));
HXDLIN(1705)				Float _this3 = _this->a;
HXDLIN(1705)				Float _hx_tmp1 = (_this3 * (targetPoint->y - _this->ty));
HXDLIN(1705)				Float _this4 = _this->b;
HXDLIN(1705)				targetPoint->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp1 + (_this4 * (_this->tx - targetPoint->x))));
HXDLIN(1705)				targetPoint->x = px1;
            			}
            		}
HXLINE(1707)		Float touchX = targetPoint->x;
HXLINE(1708)		Float touchY = targetPoint->y;
HXLINE(1710)		::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1711)		 ::openfl::display::InteractiveObject target = null();
HXLINE(1713)		if (this->_hx___hitTest(touchX,touchY,false,stack,true,hx::ObjectPtr<OBJ_>(this))) {
HXLINE(1715)			target = ( ( ::openfl::display::InteractiveObject)(stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >()) );
            		}
            		else {
HXLINE(1720)			target = hx::ObjectPtr<OBJ_>(this);
HXLINE(1721)			stack = ::Array_obj< ::Dynamic>::__new(1)->init(0,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1725)		if (hx::IsNull( target )) {
HXLINE(1725)			target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(1727)		int touchId = touch->id;
HXLINE(1728)		 ::openfl::_internal::TouchData touchData = null();
HXLINE(1730)		if (this->_hx___touchData->exists(touchId)) {
HXLINE(1732)			touchData = this->_hx___touchData->get(touchId).StaticCast<  ::openfl::_internal::TouchData >();
            		}
            		else {
HXLINE(1736)			touchData = ::openfl::_internal::TouchData_obj::_hx___pool->get();
HXLINE(1737)			touchData->reset();
HXLINE(1738)			touchData->touch = touch;
HXLINE(1739)			this->_hx___touchData->set(touchId,touchData);
            		}
HXLINE(1743)		::String touchType = null();
HXLINE(1744)		bool releaseTouchData = false;
HXLINE(1746)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("touchBegin",ea,cd,e6,a9)) ){
HXLINE(1750)			touchData->touchDownTarget = target;
HXDLIN(1750)			goto _hx_goto_101;
            		}
            		if (  (_hx_switch_0==HX_("touchEnd",5c,c5,09,00)) ){
HXLINE(1754)			if (hx::IsEq( touchData->touchDownTarget,target )) {
HXLINE(1756)				touchType = HX_("touchTap",e4,1b,15,00);
            			}
HXLINE(1760)			touchData->touchDownTarget = null();
HXLINE(1761)			releaseTouchData = true;
HXLINE(1752)			goto _hx_goto_101;
            		}
            		/* default */{
            		}
            		_hx_goto_101:;
HXLINE(1768)		 ::openfl::geom::Point localPoint = ::openfl::geom::Point_obj::_hx___pool->get();
HXLINE(1769)		bool isPrimaryTouchPoint = hx::IsEq( this->_hx___primaryTouch,touch );
HXLINE(1770)		 ::openfl::events::TouchEvent touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(type,null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(1771)		touchEvent->touchPointID = touchId;
HXLINE(1772)		touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(1774)		this->_hx___dispatchStack(touchEvent,stack);
HXLINE(1776)		if (hx::IsNotNull( touchType )) {
HXLINE(1778)			touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(touchType,null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(1779)			touchEvent->touchPointID = touchId;
HXLINE(1780)			touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(1782)			this->_hx___dispatchStack(touchEvent,stack);
            		}
HXLINE(1786)		 ::openfl::display::InteractiveObject touchOverTarget = touchData->touchOverTarget;
HXLINE(1788)		bool _hx_tmp2;
HXDLIN(1788)		if (hx::IsNotEq( target,touchOverTarget )) {
HXLINE(1788)			_hx_tmp2 = hx::IsNotNull( touchOverTarget );
            		}
            		else {
HXLINE(1788)			_hx_tmp2 = false;
            		}
HXDLIN(1788)		if (_hx_tmp2) {
HXLINE(1790)			touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchOut",0f,62,11,00),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),touchOverTarget);
HXLINE(1791)			touchEvent->touchPointID = touchId;
HXLINE(1792)			touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(1794)			touchOverTarget->_hx___dispatchEvent(touchEvent);
            		}
HXLINE(1798)		::Array< ::Dynamic> touchOutStack = touchData->rollOutStack;
HXLINE(1800)		{
HXLINE(1800)			int _g = (int)0;
HXDLIN(1800)			while((_g < touchOutStack->length)){
HXLINE(1800)				 ::openfl::display::DisplayObject target1 = touchOutStack->__get(_g).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1800)				_g = (_g + (int)1);
HXLINE(1802)				if ((stack->indexOf(target1,null()) == (int)-1)) {
HXLINE(1804)					touchOutStack->remove(target1);
HXLINE(1806)					touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchRollOut",12,0f,74,87),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),touchOverTarget);
HXLINE(1807)					touchEvent->touchPointID = touchId;
HXLINE(1808)					touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(1809)					touchEvent->bubbles = false;
HXLINE(1811)					target1->_hx___dispatchEvent(touchEvent);
            				}
            			}
            		}
HXLINE(1817)		{
HXLINE(1817)			int _g1 = (int)0;
HXDLIN(1817)			while((_g1 < stack->length)){
HXLINE(1817)				 ::openfl::display::DisplayObject target2 = stack->__get(_g1).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN(1817)				_g1 = (_g1 + (int)1);
HXLINE(1819)				if ((touchOutStack->indexOf(target2,null()) == (int)-1)) {
HXLINE(1821)					if (target2->hasEventListener(HX_("touchRollOver",50,d6,19,fe))) {
HXLINE(1823)						touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchRollOver",50,d6,19,fe),null(),touchX,touchY,touchOverTarget->_hx___globalToLocal(targetPoint,localPoint),( ( ::openfl::display::InteractiveObject)(target2) ));
HXLINE(1824)						touchEvent->touchPointID = touchId;
HXLINE(1825)						touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(1826)						touchEvent->bubbles = false;
HXLINE(1828)						target2->_hx___dispatchEvent(touchEvent);
            					}
HXLINE(1832)					if (target2->hasEventListener(HX_("touchRollOut",12,0f,74,87))) {
HXLINE(1834)						touchOutStack->push(target2);
            					}
            				}
            			}
            		}
HXLINE(1842)		if (hx::IsNotEq( target,touchOverTarget )) {
HXLINE(1844)			if (hx::IsNotNull( target )) {
HXLINE(1846)				touchEvent = ::openfl::events::TouchEvent_obj::_hx___create(HX_("touchOver",b3,20,25,0f),null(),touchX,touchY,target->_hx___globalToLocal(targetPoint,localPoint),target);
HXLINE(1847)				touchEvent->touchPointID = touchId;
HXLINE(1848)				touchEvent->isPrimaryTouchPoint = isPrimaryTouchPoint;
HXLINE(1849)				touchEvent->bubbles = true;
HXLINE(1851)				target->_hx___dispatchEvent(touchEvent);
            			}
HXLINE(1855)			touchData->touchOverTarget = target;
            		}
HXLINE(1859)		::openfl::geom::Point_obj::_hx___pool->release(targetPoint);
HXLINE(1860)		::openfl::geom::Point_obj::_hx___pool->release(localPoint);
HXLINE(1862)		if (releaseTouchData) {
HXLINE(1864)			this->_hx___touchData->remove(touchId);
HXLINE(1865)			touchData->reset();
HXLINE(1866)			::openfl::_internal::TouchData_obj::_hx___pool->release(touchData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___onTouch,(void))

void Stage_obj::_hx___resize(){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_1873___resize)
HXLINE(1875)		int cacheWidth = this->stageWidth;
HXLINE(1876)		int cacheHeight = this->stageHeight;
HXLINE(1878)		int windowWidth = ::Std_obj::_hx_int((this->window->_hx___width * this->window->_hx___scale));
HXLINE(1879)		int windowHeight = ::Std_obj::_hx_int((this->window->_hx___height * this->window->_hx___scale));
HXLINE(1886)		this->_hx___displayMatrix->identity();
HXLINE(1888)		bool _hx_tmp;
HXDLIN(1888)		if ((this->_hx___logicalWidth == (int)0)) {
HXLINE(1888)			_hx_tmp = (this->_hx___logicalHeight == (int)0);
            		}
            		else {
HXLINE(1888)			_hx_tmp = false;
            		}
HXDLIN(1888)		if (_hx_tmp) {
HXLINE(1890)			this->stageWidth = windowWidth;
HXLINE(1891)			this->stageHeight = windowHeight;
            		}
            		else {
HXLINE(1895)			this->stageWidth = this->_hx___logicalWidth;
HXLINE(1896)			this->stageHeight = this->_hx___logicalHeight;
HXLINE(1898)			Float scaleX = ((Float)windowWidth / (Float)this->stageWidth);
HXLINE(1899)			Float scaleY = ((Float)windowHeight / (Float)this->stageHeight);
HXLINE(1900)			Float targetScale = ::Math_obj::min(scaleX,scaleY);
HXLINE(1902)			int offsetX = ::Math_obj::round(((Float)(windowWidth - (this->stageWidth * targetScale)) / (Float)(int)2));
HXLINE(1903)			int offsetY = ::Math_obj::round(((Float)(windowHeight - (this->stageHeight * targetScale)) / (Float)(int)2));
HXLINE(1905)			this->_hx___displayMatrix->scale(targetScale,targetScale);
HXLINE(1906)			this->_hx___displayMatrix->translate(offsetX,offsetY);
            		}
HXLINE(1910)		{
HXLINE(1910)			int _g = (int)0;
HXDLIN(1910)			 ::openfl::_Vector::AbstractVector _g1 = this->stage3Ds;
HXDLIN(1910)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE(1910)				 ::openfl::display::Stage3D stage3D = ( ( ::openfl::display::Stage3D)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN(1910)				_g = (_g + (int)1);
HXLINE(1912)				stage3D->_hx___resize(this->stageWidth,this->stageHeight);
            			}
            		}
HXLINE(1916)		if (hx::IsNotNull( this->_hx___renderer )) {
HXLINE(1918)			this->_hx___renderer->resize(windowWidth,windowHeight);
            		}
HXLINE(1922)		bool _hx_tmp1;
HXDLIN(1922)		if ((this->stageWidth == cacheWidth)) {
HXLINE(1922)			_hx_tmp1 = (this->stageHeight != cacheHeight);
            		}
            		else {
HXLINE(1922)			_hx_tmp1 = true;
            		}
HXDLIN(1922)		if (_hx_tmp1) {
HXLINE(1924)			this->_hx___dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("resize",f4,59,7b,08),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,_hx___resize,(void))

void Stage_obj::_hx___setLogicalSize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1931___setLogicalSize)
HXLINE(1933)		this->_hx___logicalWidth = width;
HXLINE(1934)		this->_hx___logicalHeight = height;
HXLINE(1936)		this->_hx___resize();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,_hx___setLogicalSize,(void))

void Stage_obj::_hx___startDrag( ::openfl::display::Sprite sprite,bool lockCenter, ::openfl::geom::Rectangle bounds){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1941___startDrag)
HXLINE(1943)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN(1943)		if (hx::IsNull( bounds )) {
HXLINE(1943)			_hx_tmp = null();
            		}
            		else {
HXLINE(1943)			_hx_tmp = bounds->clone();
            		}
HXDLIN(1943)		this->_hx___dragBounds = _hx_tmp;
HXLINE(1944)		this->_hx___dragObject = sprite;
HXLINE(1946)		if (hx::IsNotNull( this->_hx___dragObject )) {
HXLINE(1948)			if (lockCenter) {
HXLINE(1950)				this->_hx___dragOffsetX = (int)0;
HXLINE(1951)				this->_hx___dragOffsetY = (int)0;
            			}
            			else {
HXLINE(1955)				 ::openfl::geom::Point mouse = ::openfl::geom::Point_obj::_hx___pool->get();
HXLINE(1956)				Float _hx_tmp1 = this->get_mouseX();
HXDLIN(1956)				mouse->setTo(_hx_tmp1,this->get_mouseY());
HXLINE(1957)				 ::openfl::display::DisplayObjectContainer parent = this->_hx___dragObject->parent;
HXLINE(1959)				if (hx::IsNotNull( parent )) {
HXLINE(1961)					 ::openfl::geom::Matrix _this = parent->_hx___getWorldTransform();
HXDLIN(1961)					Float norm = (_this->a * _this->d);
HXDLIN(1961)					Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1961)					if ((norm1 == (int)0)) {
HXLINE(1961)						mouse->x = -(_this->tx);
HXDLIN(1961)						mouse->y = -(_this->ty);
            					}
            					else {
HXLINE(1961)						Float _this1 = _this->c;
HXDLIN(1961)						Float px = (_this1 * (_this->ty - mouse->y));
HXDLIN(1961)						Float _this2 = _this->d;
HXDLIN(1961)						Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (mouse->x - _this->tx))));
HXDLIN(1961)						Float _this3 = _this->a;
HXDLIN(1961)						Float _hx_tmp2 = (_this3 * (mouse->y - _this->ty));
HXDLIN(1961)						Float _this4 = _this->b;
HXDLIN(1961)						mouse->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp2 + (_this4 * (_this->tx - mouse->x))));
HXDLIN(1961)						mouse->x = px1;
            					}
            				}
HXLINE(1965)				Float _hx_tmp3 = this->_hx___dragObject->get_x();
HXDLIN(1965)				this->_hx___dragOffsetX = (_hx_tmp3 - mouse->x);
HXLINE(1966)				Float _hx_tmp4 = this->_hx___dragObject->get_y();
HXDLIN(1966)				this->_hx___dragOffsetY = (_hx_tmp4 - mouse->y);
HXLINE(1967)				::openfl::geom::Point_obj::_hx___pool->release(mouse);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Stage_obj,_hx___startDrag,(void))

void Stage_obj::_hx___stopDrag( ::openfl::display::Sprite sprite){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1976___stopDrag)
HXLINE(1978)		this->_hx___dragBounds = null();
HXLINE(1979)		this->_hx___dragObject = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,_hx___stopDrag,(void))

void Stage_obj::_hx___update(bool transformOnly,bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_1986___update)
HXDLIN(1986)		if (transformOnly) {
HXLINE(1988)			if (this->_hx___transformDirty) {
HXLINE(1990)				this->super::_hx___update(true,updateChildren,maskGraphics);
HXLINE(1992)				if (updateChildren) {
HXLINE(1994)					this->_hx___transformDirty = false;
            				}
            			}
            		}
            		else {
HXLINE(2003)			bool _hx_tmp;
HXDLIN(2003)			if (!(this->_hx___transformDirty)) {
HXLINE(2003)				_hx_tmp = this->_hx___renderDirty;
            			}
            			else {
HXLINE(2003)				_hx_tmp = true;
            			}
HXDLIN(2003)			if (_hx_tmp) {
HXLINE(2005)				this->super::_hx___update(false,updateChildren,maskGraphics);
HXLINE(2007)				bool updateChildren1 = updateChildren;
            			}
            			else {
HXLINE(2022)				if (this->_hx___wasDirty) {
HXLINE(2027)					this->super::_hx___update(false,updateChildren,maskGraphics);
HXLINE(2029)					if (updateChildren) {
HXLINE(2031)						this->_hx___wasDirty = false;
            					}
            				}
            			}
            		}
            	}


 ::Dynamic Stage_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2051_get_color)
HXDLIN(2051)		return this->_hx___color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_color,return )

 ::Dynamic Stage_obj::set_color( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2056_set_color)
HXLINE(2058)		if (hx::IsNull( value )) {
HXLINE(2060)			this->_hx___transparent = true;
HXLINE(2061)			value = (int)0;
            		}
            		else {
HXLINE(2065)			this->_hx___transparent = false;
            		}
HXLINE(2069)		int r = hx::UShr(((int)value & (int)(int)16711680),(int)16);
HXLINE(2070)		int g = hx::UShr(((int)value & (int)(int)65280),(int)8);
HXLINE(2071)		int b = ((int)value & (int)(int)255);
HXLINE(2073)		this->_hx___colorSplit = ::Array_obj< Float >::__new(3)->init(0,((Float)r / (Float)(int)255))->init(1,((Float)g / (Float)(int)255))->init(2,((Float)b / (Float)(int)255));
HXLINE(2074)		this->_hx___colorString = (HX_("#",23,00,00,00) + ::StringTools_obj::hex(((int)value & (int)(int)16777215),(int)6));
HXLINE(2076)		return (this->_hx___color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_color,return )

Float Stage_obj::get_contentsScaleFactor(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2083_get_contentsScaleFactor)
HXDLIN(2083)		return this->_hx___contentsScaleFactor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_contentsScaleFactor,return )

 ::Dynamic Stage_obj::get_displayState(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2090_get_displayState)
HXDLIN(2090)		return this->_hx___displayState;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_displayState,return )

 ::Dynamic Stage_obj::set_displayState( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2095_set_displayState)
HXLINE(2097)		if (hx::IsNotNull( this->window )) {
HXLINE(2099)			if (hx::IsEq( value,(int)2 )) {
HXLINE(2103)				if (this->window->_hx___fullscreen) {
HXLINE(2106)					this->window->set_fullscreen(false);
            				}
            			}
            			else {
HXLINE(2112)				if (!(this->window->_hx___fullscreen)) {
HXLINE(2115)					this->window->set_fullscreen(true);
            				}
            			}
            		}
HXLINE(2123)		return (this->_hx___displayState = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_displayState,return )

 ::openfl::display::InteractiveObject Stage_obj::get_focus(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2130_get_focus)
HXDLIN(2130)		return this->_hx___focus;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_focus,return )

 ::openfl::display::InteractiveObject Stage_obj::set_focus( ::openfl::display::InteractiveObject value){
            	HX_GC_STACKFRAME(&_hx_pos_e171466d8d112c10_2135_set_focus)
HXLINE(2137)		if (hx::IsNotEq( value,this->_hx___focus )) {
HXLINE(2139)			 ::openfl::display::InteractiveObject oldFocus = this->_hx___focus;
HXLINE(2140)			this->_hx___focus = value;
HXLINE(2141)			this->_hx___cacheFocus = value;
HXLINE(2143)			if (hx::IsNotNull( oldFocus )) {
HXLINE(2145)				 ::openfl::events::FocusEvent event =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusOut",96,6f,5e,11),true,false,this->_hx___focus,false,(int)0);
HXLINE(2146)				::Array< ::Dynamic> stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(2147)				oldFocus->_hx___getInteractive(stack);
HXLINE(2148)				stack->reverse();
HXLINE(2149)				this->_hx___dispatchStack(event,stack);
            			}
HXLINE(2153)			if (hx::IsNotNull( this->_hx___focus )) {
HXLINE(2155)				 ::openfl::events::FocusEvent event1 =  ::openfl::events::FocusEvent_obj::__alloc( HX_CTX ,HX_("focusIn",dd,45,83,41),true,false,oldFocus,false,(int)0);
HXLINE(2156)				::Array< ::Dynamic> stack1 = ::Array_obj< ::Dynamic>::__new();
HXLINE(2157)				value->_hx___getInteractive(stack1);
HXLINE(2158)				stack1->reverse();
HXLINE(2159)				this->_hx___dispatchStack(event1,stack1);
            			}
            		}
HXLINE(2165)		return this->_hx___focus;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_focus,return )

Float Stage_obj::get_frameRate(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2170_get_frameRate)
HXLINE(2172)		if (hx::IsNotNull( this->application )) {
HXLINE(2174)			return this->application->backend->getFrameRate();
            		}
HXLINE(2178)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_frameRate,return )

Float Stage_obj::set_frameRate(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2183_set_frameRate)
HXLINE(2185)		if (hx::IsNotNull( this->application )) {
HXLINE(2187)			return this->application->backend->setFrameRate(value);
            		}
HXLINE(2191)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_frameRate,return )

int Stage_obj::get_fullScreenHeight(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2198_get_fullScreenHeight)
HXDLIN(2198)		return this->window->get_display()->currentMode->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_fullScreenHeight,return )

int Stage_obj::get_fullScreenWidth(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2205_get_fullScreenWidth)
HXDLIN(2205)		return this->window->get_display()->currentMode->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_fullScreenWidth,return )

Float Stage_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2212_set_height)
HXDLIN(2212)		return this->get_height();
            	}


Float Stage_obj::get_mouseX(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2219_get_mouseX)
HXDLIN(2219)		return this->_hx___mouseX;
            	}


Float Stage_obj::get_mouseY(){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2226_get_mouseY)
HXDLIN(2226)		return this->_hx___mouseY;
            	}


Float Stage_obj::set_rotation(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2233_set_rotation)
HXDLIN(2233)		return (int)0;
            	}


Float Stage_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2240_set_scaleX)
HXDLIN(2240)		return (int)0;
            	}


Float Stage_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2247_set_scaleY)
HXDLIN(2247)		return (int)0;
            	}


 ::openfl::geom::Transform Stage_obj::set_transform( ::openfl::geom::Transform value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2254_set_transform)
HXDLIN(2254)		return this->get_transform();
            	}


Float Stage_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2261_set_width)
HXDLIN(2261)		return this->get_width();
            	}


Float Stage_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2268_set_x)
HXDLIN(2268)		return (int)0;
            	}


Float Stage_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_e171466d8d112c10_2275_set_y)
HXDLIN(2275)		return (int)0;
            	}



hx::ObjectPtr< Stage_obj > Stage_obj::__new( ::lime::ui::Window window, ::Dynamic color) {
	hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(window,color);
	return __this;
}

hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::ui::Window window, ::Dynamic color) {
	Stage_obj *__this = (Stage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "openfl.display.Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(window,color);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(align,"align");
	HX_MARK_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_MARK_MEMBER_NAME(allowsFullScreenInteractive,"allowsFullScreenInteractive");
	HX_MARK_MEMBER_NAME(application,"application");
	HX_MARK_MEMBER_NAME(quality,"quality");
	HX_MARK_MEMBER_NAME(scaleMode,"scaleMode");
	HX_MARK_MEMBER_NAME(showDefaultContextMenu,"showDefaultContextMenu");
	HX_MARK_MEMBER_NAME(softKeyboardRect,"softKeyboardRect");
	HX_MARK_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_MARK_MEMBER_NAME(stageFocusRect,"stageFocusRect");
	HX_MARK_MEMBER_NAME(stageHeight,"stageHeight");
	HX_MARK_MEMBER_NAME(stageWidth,"stageWidth");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(_hx___cacheFocus,"__cacheFocus");
	HX_MARK_MEMBER_NAME(_hx___clearBeforeRender,"__clearBeforeRender");
	HX_MARK_MEMBER_NAME(_hx___color,"__color");
	HX_MARK_MEMBER_NAME(_hx___colorSplit,"__colorSplit");
	HX_MARK_MEMBER_NAME(_hx___colorString,"__colorString");
	HX_MARK_MEMBER_NAME(_hx___contentsScaleFactor,"__contentsScaleFactor");
	HX_MARK_MEMBER_NAME(_hx___deltaTime,"__deltaTime");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayMatrix,"__displayMatrix");
	HX_MARK_MEMBER_NAME(_hx___displayState,"__displayState");
	HX_MARK_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_MARK_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_MARK_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_MARK_MEMBER_NAME(_hx___focus,"__focus");
	HX_MARK_MEMBER_NAME(_hx___fullscreen,"__fullscreen");
	HX_MARK_MEMBER_NAME(_hx___invalidated,"__invalidated");
	HX_MARK_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_MARK_MEMBER_NAME(_hx___logicalWidth,"__logicalWidth");
	HX_MARK_MEMBER_NAME(_hx___logicalHeight,"__logicalHeight");
	HX_MARK_MEMBER_NAME(_hx___macKeyboard,"__macKeyboard");
	HX_MARK_MEMBER_NAME(_hx___mouseDownLeft,"__mouseDownLeft");
	HX_MARK_MEMBER_NAME(_hx___mouseDownMiddle,"__mouseDownMiddle");
	HX_MARK_MEMBER_NAME(_hx___mouseDownRight,"__mouseDownRight");
	HX_MARK_MEMBER_NAME(_hx___mouseOverTarget,"__mouseOverTarget");
	HX_MARK_MEMBER_NAME(_hx___mouseX,"__mouseX");
	HX_MARK_MEMBER_NAME(_hx___mouseY,"__mouseY");
	HX_MARK_MEMBER_NAME(_hx___primaryTouch,"__primaryTouch");
	HX_MARK_MEMBER_NAME(_hx___renderer,"__renderer");
	HX_MARK_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_MARK_MEMBER_NAME(_hx___rollOutStack,"__rollOutStack");
	HX_MARK_MEMBER_NAME(_hx___stack,"__stack");
	HX_MARK_MEMBER_NAME(_hx___touchData,"__touchData");
	HX_MARK_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_MARK_MEMBER_NAME(_hx___wasDirty,"__wasDirty");
	HX_MARK_MEMBER_NAME(_hx___wasFullscreen,"__wasFullscreen");
	 ::openfl::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(align,"align");
	HX_VISIT_MEMBER_NAME(allowsFullScreen,"allowsFullScreen");
	HX_VISIT_MEMBER_NAME(allowsFullScreenInteractive,"allowsFullScreenInteractive");
	HX_VISIT_MEMBER_NAME(application,"application");
	HX_VISIT_MEMBER_NAME(quality,"quality");
	HX_VISIT_MEMBER_NAME(scaleMode,"scaleMode");
	HX_VISIT_MEMBER_NAME(showDefaultContextMenu,"showDefaultContextMenu");
	HX_VISIT_MEMBER_NAME(softKeyboardRect,"softKeyboardRect");
	HX_VISIT_MEMBER_NAME(stage3Ds,"stage3Ds");
	HX_VISIT_MEMBER_NAME(stageFocusRect,"stageFocusRect");
	HX_VISIT_MEMBER_NAME(stageHeight,"stageHeight");
	HX_VISIT_MEMBER_NAME(stageWidth,"stageWidth");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(_hx___cacheFocus,"__cacheFocus");
	HX_VISIT_MEMBER_NAME(_hx___clearBeforeRender,"__clearBeforeRender");
	HX_VISIT_MEMBER_NAME(_hx___color,"__color");
	HX_VISIT_MEMBER_NAME(_hx___colorSplit,"__colorSplit");
	HX_VISIT_MEMBER_NAME(_hx___colorString,"__colorString");
	HX_VISIT_MEMBER_NAME(_hx___contentsScaleFactor,"__contentsScaleFactor");
	HX_VISIT_MEMBER_NAME(_hx___deltaTime,"__deltaTime");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayMatrix,"__displayMatrix");
	HX_VISIT_MEMBER_NAME(_hx___displayState,"__displayState");
	HX_VISIT_MEMBER_NAME(_hx___dragBounds,"__dragBounds");
	HX_VISIT_MEMBER_NAME(_hx___dragObject,"__dragObject");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetX,"__dragOffsetX");
	HX_VISIT_MEMBER_NAME(_hx___dragOffsetY,"__dragOffsetY");
	HX_VISIT_MEMBER_NAME(_hx___focus,"__focus");
	HX_VISIT_MEMBER_NAME(_hx___fullscreen,"__fullscreen");
	HX_VISIT_MEMBER_NAME(_hx___invalidated,"__invalidated");
	HX_VISIT_MEMBER_NAME(_hx___lastClickTime,"__lastClickTime");
	HX_VISIT_MEMBER_NAME(_hx___logicalWidth,"__logicalWidth");
	HX_VISIT_MEMBER_NAME(_hx___logicalHeight,"__logicalHeight");
	HX_VISIT_MEMBER_NAME(_hx___macKeyboard,"__macKeyboard");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownLeft,"__mouseDownLeft");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownMiddle,"__mouseDownMiddle");
	HX_VISIT_MEMBER_NAME(_hx___mouseDownRight,"__mouseDownRight");
	HX_VISIT_MEMBER_NAME(_hx___mouseOverTarget,"__mouseOverTarget");
	HX_VISIT_MEMBER_NAME(_hx___mouseX,"__mouseX");
	HX_VISIT_MEMBER_NAME(_hx___mouseY,"__mouseY");
	HX_VISIT_MEMBER_NAME(_hx___primaryTouch,"__primaryTouch");
	HX_VISIT_MEMBER_NAME(_hx___renderer,"__renderer");
	HX_VISIT_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_VISIT_MEMBER_NAME(_hx___rollOutStack,"__rollOutStack");
	HX_VISIT_MEMBER_NAME(_hx___stack,"__stack");
	HX_VISIT_MEMBER_NAME(_hx___touchData,"__touchData");
	HX_VISIT_MEMBER_NAME(_hx___transparent,"__transparent");
	HX_VISIT_MEMBER_NAME(_hx___wasDirty,"__wasDirty");
	HX_VISIT_MEMBER_NAME(_hx___wasFullscreen,"__wasFullscreen");
	 ::openfl::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Stage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { return hx::Val( align ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_focus() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return hx::Val( window ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"__drag") ) { return hx::Val( _hx___drag_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { return hx::Val( quality ); }
		if (HX_FIELD_EQ(inName,"__color") ) { return hx::Val( _hx___color ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		if (HX_FIELD_EQ(inName,"__focus") ) { return hx::Val( _hx___focus ); }
		if (HX_FIELD_EQ(inName,"__stack") ) { return hx::Val( _hx___stack ); }
		if (HX_FIELD_EQ(inName,"onKeyUp") ) { return hx::Val( onKeyUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onKey") ) { return hx::Val( _hx___onKey_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { return hx::Val( stage3Ds ); }
		if (HX_FIELD_EQ(inName,"__mouseX") ) { return hx::Val( _hx___mouseX ); }
		if (HX_FIELD_EQ(inName,"__mouseY") ) { return hx::Val( _hx___mouseY ); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_frameRate() ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { return hx::Val( scaleMode ); }
		if (HX_FIELD_EQ(inName,"addWindow") ) { return hx::Val( addWindow_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return hx::Val( onKeyDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseUp") ) { return hx::Val( onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouse") ) { return hx::Val( _hx___onMouse_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onTouch") ) { return hx::Val( _hx___onTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_focus") ) { return hx::Val( get_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_focus") ) { return hx::Val( set_focus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { return hx::Val( stageWidth ); }
		if (HX_FIELD_EQ(inName,"__renderer") ) { return hx::Val( _hx___renderer ); }
		if (HX_FIELD_EQ(inName,"__wasDirty") ) { return hx::Val( _hx___wasDirty ); }
		if (HX_FIELD_EQ(inName,"invalidate") ) { return hx::Val( invalidate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTextEdit") ) { return hx::Val( onTextEdit_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouchEnd") ) { return hx::Val( onTouchEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopDrag") ) { return hx::Val( _hx___stopDrag_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"application") ) { return hx::Val( application ); }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { return hx::Val( stageHeight ); }
		if (HX_FIELD_EQ(inName,"__deltaTime") ) { return hx::Val( _hx___deltaTime ); }
		if (HX_FIELD_EQ(inName,"__rendering") ) { return hx::Val( _hx___rendering ); }
		if (HX_FIELD_EQ(inName,"__touchData") ) { return hx::Val( _hx___touchData ); }
		if (HX_FIELD_EQ(inName,"addRenderer") ) { return hx::Val( addRenderer_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseDown") ) { return hx::Val( onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMove") ) { return hx::Val( onMouseMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTextInput") ) { return hx::Val( onTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouchMove") ) { return hx::Val( onTouchMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startDrag") ) { return hx::Val( _hx___startDrag_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_displayState() ); }
		if (HX_FIELD_EQ(inName,"__cacheFocus") ) { return hx::Val( _hx___cacheFocus ); }
		if (HX_FIELD_EQ(inName,"__colorSplit") ) { return hx::Val( _hx___colorSplit ); }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { return hx::Val( _hx___dragBounds ); }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { return hx::Val( _hx___dragObject ); }
		if (HX_FIELD_EQ(inName,"__fullscreen") ) { return hx::Val( _hx___fullscreen ); }
		if (HX_FIELD_EQ(inName,"removeWindow") ) { return hx::Val( removeWindow_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPreloader") ) { return hx::Val( setPreloader_dyn() ); }
		if (HX_FIELD_EQ(inName,"onModuleExit") ) { return hx::Val( onModuleExit_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return hx::Val( onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouchStart") ) { return hx::Val( onTouchStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowMove") ) { return hx::Val( onWindowMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__colorString") ) { return hx::Val( _hx___colorString ); }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { return hx::Val( _hx___dragOffsetX ); }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { return hx::Val( _hx___dragOffsetY ); }
		if (HX_FIELD_EQ(inName,"__invalidated") ) { return hx::Val( _hx___invalidated ); }
		if (HX_FIELD_EQ(inName,"__macKeyboard") ) { return hx::Val( _hx___macKeyboard ); }
		if (HX_FIELD_EQ(inName,"__transparent") ) { return hx::Val( _hx___transparent ); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowClose") ) { return hx::Val( onWindowClose_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowEnter") ) { return hx::Val( onWindowEnter_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowLeave") ) { return hx::Val( onWindowLeave_dyn() ); }
		if (HX_FIELD_EQ(inName,"__handleError") ) { return hx::Val( _hx___handleError_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_frameRate") ) { return hx::Val( get_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_frameRate") ) { return hx::Val( set_frameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { return hx::Val( stageFocusRect ); }
		if (HX_FIELD_EQ(inName,"__displayState") ) { return hx::Val( _hx___displayState ); }
		if (HX_FIELD_EQ(inName,"__logicalWidth") ) { return hx::Val( _hx___logicalWidth ); }
		if (HX_FIELD_EQ(inName,"__primaryTouch") ) { return hx::Val( _hx___primaryTouch ); }
		if (HX_FIELD_EQ(inName,"__rollOutStack") ) { return hx::Val( _hx___rollOutStack ); }
		if (HX_FIELD_EQ(inName,"registerModule") ) { return hx::Val( registerModule_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeRenderer") ) { return hx::Val( removeRenderer_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowCreate") ) { return hx::Val( onWindowCreate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowResize") ) { return hx::Val( onWindowResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onMouseWheel") ) { return hx::Val( _hx___onMouseWheel_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fullScreenWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fullScreenWidth() ); }
		if (HX_FIELD_EQ(inName,"__displayMatrix") ) { return hx::Val( _hx___displayMatrix ); }
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { return hx::Val( _hx___lastClickTime ); }
		if (HX_FIELD_EQ(inName,"__logicalHeight") ) { return hx::Val( _hx___logicalHeight ); }
		if (HX_FIELD_EQ(inName,"__mouseDownLeft") ) { return hx::Val( _hx___mouseDownLeft ); }
		if (HX_FIELD_EQ(inName,"__wasFullscreen") ) { return hx::Val( _hx___wasFullscreen ); }
		if (HX_FIELD_EQ(inName,"onWindowFocusIn") ) { return hx::Val( onWindowFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowRestore") ) { return hx::Val( onWindowRestore_dyn() ); }
		if (HX_FIELD_EQ(inName,"__globalToLocal") ) { return hx::Val( _hx___globalToLocal_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { return hx::Val( allowsFullScreen ); }
		if (HX_FIELD_EQ(inName,"fullScreenHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fullScreenHeight() ); }
		if (HX_FIELD_EQ(inName,"softKeyboardRect") ) { return hx::Val( softKeyboardRect ); }
		if (HX_FIELD_EQ(inName,"__mouseDownRight") ) { return hx::Val( _hx___mouseDownRight ); }
		if (HX_FIELD_EQ(inName,"unregisterModule") ) { return hx::Val( unregisterModule_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGamepadConnect") ) { return hx::Val( onGamepadConnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowActivate") ) { return hx::Val( onWindowActivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowDropFile") ) { return hx::Val( onWindowDropFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowFocusOut") ) { return hx::Val( onWindowFocusOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowMinimize") ) { return hx::Val( onWindowMinimize_dyn() ); }
		if (HX_FIELD_EQ(inName,"__broadcastEvent") ) { return hx::Val( _hx___broadcastEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__createRenderer") ) { return hx::Val( _hx___createRenderer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return hx::Val( _hx___getInteractive_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setLogicalSize") ) { return hx::Val( _hx___setLogicalSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayState") ) { return hx::Val( get_displayState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayState") ) { return hx::Val( set_displayState_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__mouseDownMiddle") ) { return hx::Val( _hx___mouseDownMiddle ); }
		if (HX_FIELD_EQ(inName,"__mouseOverTarget") ) { return hx::Val( _hx___mouseOverTarget ); }
		if (HX_FIELD_EQ(inName,"onGamepadAxisMove") ) { return hx::Val( onGamepadAxisMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGamepadButtonUp") ) { return hx::Val( onGamepadButtonUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystickConnect") ) { return hx::Val( onJoystickConnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystickHatMove") ) { return hx::Val( onJoystickHatMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPreloadComplete") ) { return hx::Val( onPreloadComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"onPreloadProgress") ) { return hx::Val( onPreloadProgress_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onJoystickAxisMove") ) { return hx::Val( onJoystickAxisMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystickButtonUp") ) { return hx::Val( onJoystickButtonUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowDeactivate") ) { return hx::Val( onWindowDeactivate_dyn() ); }
		if (HX_FIELD_EQ(inName,"onWindowFullscreen") ) { return hx::Val( onWindowFullscreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"__onGamepadConnect") ) { return hx::Val( _hx___onGamepadConnect_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"contentsScaleFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_contentsScaleFactor() ); }
		if (HX_FIELD_EQ(inName,"__clearBeforeRender") ) { return hx::Val( _hx___clearBeforeRender ); }
		if (HX_FIELD_EQ(inName,"onGamepadButtonDown") ) { return hx::Val( onGamepadButtonDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGamepadDisconnect") ) { return hx::Val( onGamepadDisconnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseMoveRelative") ) { return hx::Val( onMouseMoveRelative_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRenderContextLost") ) { return hx::Val( onRenderContextLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fullScreenWidth") ) { return hx::Val( get_fullScreenWidth_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onJoystickButtonDown") ) { return hx::Val( onJoystickButtonDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"onJoystickDisconnect") ) { return hx::Val( onJoystickDisconnect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fullScreenHeight") ) { return hx::Val( get_fullScreenHeight_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__contentsScaleFactor") ) { return hx::Val( _hx___contentsScaleFactor ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"showDefaultContextMenu") ) { return hx::Val( showDefaultContextMenu ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"onJoystickTrackballMove") ) { return hx::Val( onJoystickTrackballMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRenderContextRestored") ) { return hx::Val( onRenderContextRestored_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_contentsScaleFactor") ) { return hx::Val( get_contentsScaleFactor_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"allowsFullScreenInteractive") ) { return hx::Val( allowsFullScreenInteractive ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Stage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { align=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"focus") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_focus(inValue.Cast<  ::openfl::display::InteractiveObject >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast<  ::lime::ui::Window >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { quality=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__color") ) { _hx___color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__focus") ) { _hx___focus=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stack") ) { _hx___stack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stage3Ds") ) { stage3Ds=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseX") ) { _hx___mouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseY") ) { _hx___mouseY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frameRate(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { scaleMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { stageWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderer") ) { _hx___renderer=inValue.Cast<  ::openfl::_internal::renderer::AbstractRenderer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__wasDirty") ) { _hx___wasDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"application") ) { application=inValue.Cast<  ::lime::app::Application >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { stageHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__deltaTime") ) { _hx___deltaTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rendering") ) { _hx___rendering=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__touchData") ) { _hx___touchData=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayState(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cacheFocus") ) { _hx___cacheFocus=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__colorSplit") ) { _hx___colorSplit=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragBounds") ) { _hx___dragBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragObject") ) { _hx___dragObject=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fullscreen") ) { _hx___fullscreen=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__colorString") ) { _hx___colorString=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetX") ) { _hx___dragOffsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dragOffsetY") ) { _hx___dragOffsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__invalidated") ) { _hx___invalidated=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__macKeyboard") ) { _hx___macKeyboard=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transparent") ) { _hx___transparent=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"stageFocusRect") ) { stageFocusRect=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__displayState") ) { _hx___displayState=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__logicalWidth") ) { _hx___logicalWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__primaryTouch") ) { _hx___primaryTouch=inValue.Cast<  ::lime::ui::Touch >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rollOutStack") ) { _hx___rollOutStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__displayMatrix") ) { _hx___displayMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__lastClickTime") ) { _hx___lastClickTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__logicalHeight") ) { _hx___logicalHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseDownLeft") ) { _hx___mouseDownLeft=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__wasFullscreen") ) { _hx___wasFullscreen=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"allowsFullScreen") ) { allowsFullScreen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"softKeyboardRect") ) { softKeyboardRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseDownRight") ) { _hx___mouseDownRight=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__mouseDownMiddle") ) { _hx___mouseDownMiddle=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseOverTarget") ) { _hx___mouseOverTarget=inValue.Cast<  ::openfl::display::InteractiveObject >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__clearBeforeRender") ) { _hx___clearBeforeRender=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__contentsScaleFactor") ) { _hx___contentsScaleFactor=inValue.Cast< Float >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"showDefaultContextMenu") ) { showDefaultContextMenu=inValue.Cast< bool >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"allowsFullScreenInteractive") ) { allowsFullScreenInteractive=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("align","\xc5","\x56","\x91","\x21"));
	outFields->push(HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b"));
	outFields->push(HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8"));
	outFields->push(HX_HCSTRING("application","\x50","\xab","\x3e","\x2a"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("contentsScaleFactor","\xff","\x33","\x35","\xba"));
	outFields->push(HX_HCSTRING("displayState","\x6f","\x4c","\x64","\x90"));
	outFields->push(HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("fullScreenHeight","\xa2","\xe0","\x00","\xaa"));
	outFields->push(HX_HCSTRING("fullScreenWidth","\xab","\x8d","\x8a","\xe5"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	outFields->push(HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"));
	outFields->push(HX_HCSTRING("showDefaultContextMenu","\x4a","\x8c","\x83","\x33"));
	outFields->push(HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec"));
	outFields->push(HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3"));
	outFields->push(HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74"));
	outFields->push(HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"));
	outFields->push(HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"));
	outFields->push(HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"));
	outFields->push(HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f"));
	outFields->push(HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3"));
	outFields->push(HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"));
	outFields->push(HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde"));
	outFields->push(HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13"));
	outFields->push(HX_HCSTRING("__contentsScaleFactor","\xdf","\x54","\x29","\x28"));
	outFields->push(HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04"));
	outFields->push(HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1"));
	outFields->push(HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47"));
	outFields->push(HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6"));
	outFields->push(HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5"));
	outFields->push(HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5"));
	outFields->push(HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e"));
	outFields->push(HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32"));
	outFields->push(HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06"));
	outFields->push(HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1"));
	outFields->push(HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d"));
	outFields->push(HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30"));
	outFields->push(HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8"));
	outFields->push(HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93"));
	outFields->push(HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d"));
	outFields->push(HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5"));
	outFields->push(HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00"));
	outFields->push(HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74"));
	outFields->push(HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74"));
	outFields->push(HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30"));
	outFields->push(HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56"));
	outFields->push(HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb"));
	outFields->push(HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86"));
	outFields->push(HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee"));
	outFields->push(HX_HCSTRING("__touchData","\x69","\x2e","\xfc","\x35"));
	outFields->push(HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b"));
	outFields->push(HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63"));
	outFields->push(HX_HCSTRING("__wasFullscreen","\xa4","\x85","\x04","\xb2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,align),HX_HCSTRING("align","\xc5","\x56","\x91","\x21")},
	{hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreen),HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b")},
	{hx::fsBool,(int)offsetof(Stage_obj,allowsFullScreenInteractive),HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8")},
	{hx::fsObject /*::lime::app::Application*/ ,(int)offsetof(Stage_obj,application),HX_HCSTRING("application","\x50","\xab","\x3e","\x2a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,quality),HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,scaleMode),HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b")},
	{hx::fsBool,(int)offsetof(Stage_obj,showDefaultContextMenu),HX_HCSTRING("showDefaultContextMenu","\x4a","\x8c","\x83","\x33")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Stage_obj,softKeyboardRect),HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Stage_obj,stage3Ds),HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3")},
	{hx::fsBool,(int)offsetof(Stage_obj,stageFocusRect),HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74")},
	{hx::fsInt,(int)offsetof(Stage_obj,stageHeight),HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95")},
	{hx::fsInt,(int)offsetof(Stage_obj,stageWidth),HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d")},
	{hx::fsObject /*::lime::ui::Window*/ ,(int)offsetof(Stage_obj,window),HX_HCSTRING("window","\xf0","\x93","\x8c","\x52")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___cacheFocus),HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___clearBeforeRender),HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___color),HX_HCSTRING("__color","\x43","\xca","\xba","\xb4")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(Stage_obj,_hx___colorSplit),HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde")},
	{hx::fsString,(int)offsetof(Stage_obj,_hx___colorString),HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___contentsScaleFactor),HX_HCSTRING("__contentsScaleFactor","\xdf","\x54","\x29","\x28")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___deltaTime),HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(Stage_obj,_hx___displayMatrix),HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Stage_obj,_hx___displayState),HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Stage_obj,_hx___dragBounds),HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Stage_obj,_hx___dragObject),HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetX),HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___dragOffsetY),HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___focus),HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___fullscreen),HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___invalidated),HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___lastClickTime),HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___logicalWidth),HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___logicalHeight),HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___macKeyboard),HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownLeft),HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownMiddle),HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseDownRight),HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5")},
	{hx::fsObject /*::openfl::display::InteractiveObject*/ ,(int)offsetof(Stage_obj,_hx___mouseOverTarget),HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___mouseX),HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___mouseY),HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74")},
	{hx::fsObject /*::lime::ui::Touch*/ ,(int)offsetof(Stage_obj,_hx___primaryTouch),HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30")},
	{hx::fsObject /*::openfl::_internal::renderer::AbstractRenderer*/ ,(int)offsetof(Stage_obj,_hx___renderer),HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___rendering),HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___rollOutStack),HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Stage_obj,_hx___stack),HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Stage_obj,_hx___touchData),HX_HCSTRING("__touchData","\x69","\x2e","\xfc","\x35")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___transparent),HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___wasDirty),HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63")},
	{hx::fsBool,(int)offsetof(Stage_obj,_hx___wasFullscreen),HX_HCSTRING("__wasFullscreen","\xa4","\x85","\x04","\xb2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Stage_obj_sStaticStorageInfo = 0;
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_HCSTRING("align","\xc5","\x56","\x91","\x21"),
	HX_HCSTRING("allowsFullScreen","\xc5","\x66","\xdc","\x4b"),
	HX_HCSTRING("allowsFullScreenInteractive","\x1d","\x8b","\x2c","\xc8"),
	HX_HCSTRING("application","\x50","\xab","\x3e","\x2a"),
	HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"),
	HX_HCSTRING("scaleMode","\x0d","\xdb","\xd3","\x2b"),
	HX_HCSTRING("showDefaultContextMenu","\x4a","\x8c","\x83","\x33"),
	HX_HCSTRING("softKeyboardRect","\x75","\x35","\x3a","\xec"),
	HX_HCSTRING("stage3Ds","\xa4","\x4e","\x30","\xe3"),
	HX_HCSTRING("stageFocusRect","\x7e","\xd2","\x81","\x74"),
	HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"),
	HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"),
	HX_HCSTRING("window","\xf0","\x93","\x8c","\x52"),
	HX_HCSTRING("__cacheFocus","\x56","\x41","\xd5","\x7f"),
	HX_HCSTRING("__clearBeforeRender","\x42","\xa3","\xd5","\xf3"),
	HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"),
	HX_HCSTRING("__colorSplit","\x97","\x7d","\x6e","\xde"),
	HX_HCSTRING("__colorString","\x74","\xfb","\xd0","\x13"),
	HX_HCSTRING("__contentsScaleFactor","\xdf","\x54","\x29","\x28"),
	HX_HCSTRING("__deltaTime","\x05","\x85","\x88","\x23"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayMatrix","\x03","\x2b","\xdd","\x04"),
	HX_HCSTRING("__displayState","\x8f","\xcf","\x24","\xb1"),
	HX_HCSTRING("__dragBounds","\xa9","\x10","\x1d","\x47"),
	HX_HCSTRING("__dragObject","\xf3","\x08","\x3f","\xf6"),
	HX_HCSTRING("__dragOffsetX","\xb1","\x6c","\xfe","\xd5"),
	HX_HCSTRING("__dragOffsetY","\xb2","\x6c","\xfe","\xd5"),
	HX_HCSTRING("__focus","\xb8","\xb8","\xe7","\x6e"),
	HX_HCSTRING("__fullscreen","\x5b","\xb5","\x47","\x32"),
	HX_HCSTRING("__invalidated","\x69","\x73","\x24","\x06"),
	HX_HCSTRING("__lastClickTime","\x1f","\x4c","\xe7","\xb1"),
	HX_HCSTRING("__logicalWidth","\x9d","\xce","\x2c","\x0d"),
	HX_HCSTRING("__logicalHeight","\x70","\x73","\x57","\x30"),
	HX_HCSTRING("__macKeyboard","\x36","\x6b","\x9a","\xd8"),
	HX_HCSTRING("__mouseDownLeft","\xae","\x3d","\x4b","\x93"),
	HX_HCSTRING("__mouseDownMiddle","\xbc","\x00","\x70","\x1d"),
	HX_HCSTRING("__mouseDownRight","\x55","\xc8","\x97","\xc5"),
	HX_HCSTRING("__mouseOverTarget","\x2a","\xfb","\x94","\x00"),
	HX_HCSTRING("__mouseX","\xb3","\xb5","\x3d","\x74"),
	HX_HCSTRING("__mouseY","\xb4","\xb5","\x3d","\x74"),
	HX_HCSTRING("__primaryTouch","\xbd","\x6b","\x1c","\x30"),
	HX_HCSTRING("__renderer","\x63","\x38","\x14","\x56"),
	HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb"),
	HX_HCSTRING("__rollOutStack","\x97","\xe3","\x31","\x86"),
	HX_HCSTRING("__stack","\x28","\xc0","\x69","\xee"),
	HX_HCSTRING("__touchData","\x69","\x2e","\xfc","\x35"),
	HX_HCSTRING("__transparent","\x32","\x6c","\x32","\x6b"),
	HX_HCSTRING("__wasDirty","\x49","\xbd","\x55","\x63"),
	HX_HCSTRING("__wasFullscreen","\xa4","\x85","\x04","\xb2"),
	HX_HCSTRING("addRenderer","\x84","\xfc","\x37","\xe4"),
	HX_HCSTRING("addWindow","\xf1","\xc8","\xb0","\x0a"),
	HX_HCSTRING("registerModule","\x6f","\xbb","\x14","\x87"),
	HX_HCSTRING("removeRenderer","\xa7","\x01","\x32","\x7d"),
	HX_HCSTRING("removeWindow","\x54","\x2f","\xba","\xc1"),
	HX_HCSTRING("setPreloader","\x74","\xa4","\xcb","\xa6"),
	HX_HCSTRING("unregisterModule","\x88","\x2b","\x36","\x94"),
	HX_HCSTRING("invalidate","\x7b","\x19","\x2a","\x87"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("onGamepadAxisMove","\xb4","\xf7","\xd4","\x24"),
	HX_HCSTRING("onGamepadButtonDown","\x56","\xeb","\xb6","\x87"),
	HX_HCSTRING("onGamepadButtonUp","\x4f","\xf4","\x12","\xf1"),
	HX_HCSTRING("onGamepadConnect","\xc8","\x56","\xd7","\xec"),
	HX_HCSTRING("onGamepadDisconnect","\x3e","\xe8","\x96","\x44"),
	HX_HCSTRING("onJoystickAxisMove","\x6d","\xf4","\xd4","\x5b"),
	HX_HCSTRING("onJoystickButtonDown","\x4f","\x48","\x3a","\x7c"),
	HX_HCSTRING("onJoystickButtonUp","\x08","\xf1","\x12","\x28"),
	HX_HCSTRING("onJoystickConnect","\x2f","\x14","\xdd","\xfa"),
	HX_HCSTRING("onJoystickDisconnect","\x37","\x45","\x1a","\x39"),
	HX_HCSTRING("onJoystickHatMove","\x51","\x70","\x68","\x90"),
	HX_HCSTRING("onJoystickTrackballMove","\x40","\xc8","\x46","\x1a"),
	HX_HCSTRING("onKeyDown","\x42","\x22","\xf2","\x73"),
	HX_HCSTRING("onKeyUp","\x3b","\x58","\x3c","\x75"),
	HX_HCSTRING("onModuleExit","\xe9","\xbf","\xa3","\x0b"),
	HX_HCSTRING("onMouseDown","\x08","\x94","\x05","\x11"),
	HX_HCSTRING("onMouseMove","\xb7","\x7e","\xf8","\x16"),
	HX_HCSTRING("onMouseMoveRelative","\xa3","\x06","\xbf","\x7a"),
	HX_HCSTRING("onMouseUp","\x81","\xac","\x1d","\x98"),
	HX_HCSTRING("onMouseWheel","\x35","\xca","\xca","\xbf"),
	HX_HCSTRING("onPreloadComplete","\x43","\x37","\x5d","\x5c"),
	HX_HCSTRING("onPreloadProgress","\x37","\x2e","\xc0","\x62"),
	HX_HCSTRING("onRenderContextLost","\x9e","\x9b","\xa7","\x84"),
	HX_HCSTRING("onRenderContextRestored","\x10","\x54","\x6e","\x7a"),
	HX_HCSTRING("onTextEdit","\x96","\xf1","\xc0","\x23"),
	HX_HCSTRING("onTextInput","\xfe","\x36","\x4e","\x79"),
	HX_HCSTRING("onTouchMove","\x51","\x55","\x10","\x30"),
	HX_HCSTRING("onTouchEnd","\x9b","\x99","\xc0","\xdd"),
	HX_HCSTRING("onTouchStart","\x22","\xfa","\xdf","\x55"),
	HX_HCSTRING("onWindowActivate","\x42","\xe9","\xdd","\xeb"),
	HX_HCSTRING("onWindowClose","\xc9","\xca","\x1f","\x9c"),
	HX_HCSTRING("onWindowCreate","\xcb","\x62","\x6f","\x6d"),
	HX_HCSTRING("onWindowDeactivate","\x83","\xeb","\x6c","\x8c"),
	HX_HCSTRING("onWindowDropFile","\xda","\x43","\x88","\xef"),
	HX_HCSTRING("onWindowEnter","\x29","\x20","\x43","\xc4"),
	HX_HCSTRING("onWindowFocusIn","\x2e","\x9f","\x1f","\x84"),
	HX_HCSTRING("onWindowFocusOut","\x25","\x3d","\x90","\x17"),
	HX_HCSTRING("onWindowFullscreen","\x8a","\xc9","\x1f","\x4a"),
	HX_HCSTRING("onWindowLeave","\x08","\xe8","\x0f","\xc6"),
	HX_HCSTRING("onWindowMinimize","\xad","\x0c","\xab","\x27"),
	HX_HCSTRING("onWindowMove","\x20","\xfd","\x7a","\xab"),
	HX_HCSTRING("onWindowResize","\xc3","\x55","\xdb","\xf9"),
	HX_HCSTRING("onWindowRestore","\x9f","\xc0","\x4c","\xad"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("__broadcastEvent","\x79","\x9c","\xa4","\x95"),
	HX_HCSTRING("__createRenderer","\x7f","\xcf","\x55","\x39"),
	HX_HCSTRING("__drag","\x14","\x8f","\x68","\xf1"),
	HX_HCSTRING("__getInteractive","\x0c","\x1c","\x37","\xf8"),
	HX_HCSTRING("__globalToLocal","\xad","\x87","\x60","\xf3"),
	HX_HCSTRING("__handleError","\xe0","\xb7","\xeb","\x6d"),
	HX_HCSTRING("__onKey","\xa0","\x76","\xc7","\x9c"),
	HX_HCSTRING("__onGamepadConnect","\xe8","\xe9","\x67","\x58"),
	HX_HCSTRING("__onMouse","\x66","\x05","\xf1","\x23"),
	HX_HCSTRING("__onMouseWheel","\x55","\x4d","\x8b","\xe0"),
	HX_HCSTRING("__onTouch","\x00","\x07","\xbf","\x2b"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__setLogicalSize","\xc8","\x6d","\xcd","\x32"),
	HX_HCSTRING("__startDrag","\x56","\xee","\x8f","\x29"),
	HX_HCSTRING("__stopDrag","\x36","\xe4","\x62","\x38"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_contentsScaleFactor","\x96","\xda","\x8a","\xc2"),
	HX_HCSTRING("get_displayState","\xf8","\x38","\x03","\x95"),
	HX_HCSTRING("set_displayState","\x6c","\x26","\x45","\xeb"),
	HX_HCSTRING("get_focus","\x2f","\xbc","\x32","\x48"),
	HX_HCSTRING("set_focus","\x3b","\xa8","\x83","\x2b"),
	HX_HCSTRING("get_frameRate","\x84","\xe5","\x88","\xfa"),
	HX_HCSTRING("set_frameRate","\x90","\xc7","\x8e","\x3f"),
	HX_HCSTRING("get_fullScreenHeight","\xab","\x45","\x6b","\xc8"),
	HX_HCSTRING("get_fullScreenWidth","\xc2","\x5c","\x95","\x70"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void Stage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
};

#endif

hx::Class Stage_obj::__mClass;

void Stage_obj::__register()
{
	hx::Object *dummy = new Stage_obj;
	Stage_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Stage","\x14","\x36","\x7c","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Stage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Stage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
