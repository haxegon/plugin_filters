// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_RendererType
#include <lime/graphics/RendererType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_Vector_openfl_display_DisplayObject
#include <lime/utils/ObjectPool_openfl_Vector_openfl_display_DisplayObject.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Matrix
#include <lime/utils/ObjectPool_openfl_geom_Matrix.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_Lib
#include <openfl/_internal/Lib.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractFilterManager
#include <openfl/_internal/renderer/AbstractFilterManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMDisplayObject
#include <openfl/_internal/renderer/dom/DOMDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLBitmap
#include <openfl/_internal/renderer/opengl/GLBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskManager
#include <openfl/_internal/renderer/opengl/GLMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskShader
#include <openfl/_internal/renderer/opengl/GLMaskShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_26400284d5456c16_178_new,"openfl.display.DisplayObject","new",0xb225b469,"openfl.display.DisplayObject.new","openfl/display/DisplayObject.hx",178,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_213_addEventListener,"openfl.display.DisplayObject","addEventListener",0xe74b9624,"openfl.display.DisplayObject.addEventListener","openfl/display/DisplayObject.hx",213,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_242_dispatchEvent,"openfl.display.DisplayObject","dispatchEvent",0xe6cd7049,"openfl.display.DisplayObject.dispatchEvent","openfl/display/DisplayObject.hx",242,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_263_getBounds,"openfl.display.DisplayObject","getBounds",0xdb0a2074,"openfl.display.DisplayObject.getBounds","openfl/display/DisplayObject.hx",263,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_298_getRect,"openfl.display.DisplayObject","getRect",0x17591963,"openfl.display.DisplayObject.getRect","openfl/display/DisplayObject.hx",298,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_305_globalToLocal,"openfl.display.DisplayObject","globalToLocal",0x8c16f816,"openfl.display.DisplayObject.globalToLocal","openfl/display/DisplayObject.hx",305,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_310_hitTestObject,"openfl.display.DisplayObject","hitTestObject",0xf7ccfe2d,"openfl.display.DisplayObject.hitTestObject","openfl/display/DisplayObject.hx",310,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_328_hitTestPoint,"openfl.display.DisplayObject","hitTestPoint",0x05917ca2,"openfl.display.DisplayObject.hitTestPoint","openfl/display/DisplayObject.hx",328,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_343_localToGlobal,"openfl.display.DisplayObject","localToGlobal",0x6853eb12,"openfl.display.DisplayObject.localToGlobal","openfl/display/DisplayObject.hx",343,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_348_removeEventListener,"openfl.display.DisplayObject","removeEventListener",0x3ae1cdd3,"openfl.display.DisplayObject.removeEventListener","openfl/display/DisplayObject.hx",348,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_373___cleanup,"openfl.display.DisplayObject","__cleanup",0x25266dcd,"openfl.display.DisplayObject.__cleanup","openfl/display/DisplayObject.hx",373,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_391___dispatch,"openfl.display.DisplayObject","__dispatch",0x4c54e0f1,"openfl.display.DisplayObject.__dispatch","openfl/display/DisplayObject.hx",391,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_412___dispatchChildren,"openfl.display.DisplayObject","__dispatchChildren",0xdb948f50,"openfl.display.DisplayObject.__dispatchChildren","openfl/display/DisplayObject.hx",412,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_419___dispatchEvent,"openfl.display.DisplayObject","__dispatchEvent",0xd8f34d69,"openfl.display.DisplayObject.__dispatchEvent","openfl/display/DisplayObject.hx",419,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_448___dispatchStack,"openfl.display.DisplayObject","__dispatchStack",0xe739ec97,"openfl.display.DisplayObject.__dispatchStack","openfl/display/DisplayObject.hx",448,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_512___dispatchWithCapture,"openfl.display.DisplayObject","__dispatchWithCapture",0x81f3d9af,"openfl.display.DisplayObject.__dispatchWithCapture","openfl/display/DisplayObject.hx",512,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_561___enterFrame,"openfl.display.DisplayObject","__enterFrame",0x5c5351ec,"openfl.display.DisplayObject.__enterFrame","openfl/display/DisplayObject.hx",561,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_570___getBounds,"openfl.display.DisplayObject","__getBounds",0xe772ed94,"openfl.display.DisplayObject.__getBounds","openfl/display/DisplayObject.hx",570,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_581___getCursor,"openfl.display.DisplayObject","__getCursor",0xc03df5f5,"openfl.display.DisplayObject.__getCursor","openfl/display/DisplayObject.hx",581,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_586___getFilterBounds,"openfl.display.DisplayObject","__getFilterBounds",0x4d6bbcac,"openfl.display.DisplayObject.__getFilterBounds","openfl/display/DisplayObject.hx",586,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_614___getInteractive,"openfl.display.DisplayObject","__getInteractive",0xee1ea663,"openfl.display.DisplayObject.__getInteractive","openfl/display/DisplayObject.hx",614,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_619___getLocalBounds,"openfl.display.DisplayObject","__getLocalBounds",0xd51d8ec1,"openfl.display.DisplayObject.__getLocalBounds","openfl/display/DisplayObject.hx",619,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_638___getRenderBounds,"openfl.display.DisplayObject","__getRenderBounds",0xb06992ca,"openfl.display.DisplayObject.__getRenderBounds","openfl/display/DisplayObject.hx",638,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_655___getRenderTransform,"openfl.display.DisplayObject","__getRenderTransform",0x9985c437,"openfl.display.DisplayObject.__getRenderTransform","openfl/display/DisplayObject.hx",655,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_663___getWorldTransform,"openfl.display.DisplayObject","__getWorldTransform",0x71693ad9,"openfl.display.DisplayObject.__getWorldTransform","openfl/display/DisplayObject.hx",663,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_705___globalToLocal,"openfl.display.DisplayObject","__globalToLocal",0x7e3cd536,"openfl.display.DisplayObject.__globalToLocal","openfl/display/DisplayObject.hx",705,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_725___hitTest,"openfl.display.DisplayObject","__hitTest",0x5c63c1ee,"openfl.display.DisplayObject.__hitTest","openfl/display/DisplayObject.hx",725,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_751___hitTestMask,"openfl.display.DisplayObject","__hitTestMask",0x5c65bdfa,"openfl.display.DisplayObject.__hitTestMask","openfl/display/DisplayObject.hx",751,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_770___readGraphicsData,"openfl.display.DisplayObject","__readGraphicsData",0xd9311e42,"openfl.display.DisplayObject.__readGraphicsData","openfl/display/DisplayObject.hx",770,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_779___renderCairo,"openfl.display.DisplayObject","__renderCairo",0x75ab477b,"openfl.display.DisplayObject.__renderCairo","openfl/display/DisplayObject.hx",779,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_801___renderCairoMask,"openfl.display.DisplayObject","__renderCairoMask",0x9fd38e07,"openfl.display.DisplayObject.__renderCairoMask","openfl/display/DisplayObject.hx",801,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_813___renderCanvas,"openfl.display.DisplayObject","__renderCanvas",0x83845285,"openfl.display.DisplayObject.__renderCanvas","openfl/display/DisplayObject.hx",813,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_834___renderCanvasMask,"openfl.display.DisplayObject","__renderCanvasMask",0x388fe611,"openfl.display.DisplayObject.__renderCanvasMask","openfl/display/DisplayObject.hx",834,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_843___renderDOM,"openfl.display.DisplayObject","__renderDOM",0xd2568ab5,"openfl.display.DisplayObject.__renderDOM","openfl/display/DisplayObject.hx",843,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_865___renderDOMClear,"openfl.display.DisplayObject","__renderDOMClear",0x6fd66698,"openfl.display.DisplayObject.__renderDOMClear","openfl/display/DisplayObject.hx",865,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_870___renderGL,"openfl.display.DisplayObject","__renderGL",0xe0ccbd32,"openfl.display.DisplayObject.__renderGL","openfl/display/DisplayObject.hx",870,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_887___renderGLMask,"openfl.display.DisplayObject","__renderGLMask",0xefa7ab3e,"openfl.display.DisplayObject.__renderGLMask","openfl/display/DisplayObject.hx",887,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_904___setParentRenderDirty,"openfl.display.DisplayObject","__setParentRenderDirty",0x844e2287,"openfl.display.DisplayObject.__setParentRenderDirty","openfl/display/DisplayObject.hx",904,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_919___setRenderDirty,"openfl.display.DisplayObject","__setRenderDirty",0x7766cdd1,"openfl.display.DisplayObject.__setRenderDirty","openfl/display/DisplayObject.hx",919,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_931___setStageReference,"openfl.display.DisplayObject","__setStageReference",0xda522b58,"openfl.display.DisplayObject.__setStageReference","openfl/display/DisplayObject.hx",931,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_938___setTransformDirty,"openfl.display.DisplayObject","__setTransformDirty",0x7e906131,"openfl.display.DisplayObject.__setTransformDirty","openfl/display/DisplayObject.hx",938,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_952___setWorldTransformInvalid,"openfl.display.DisplayObject","__setWorldTransformInvalid",0x82c84692,"openfl.display.DisplayObject.__setWorldTransformInvalid","openfl/display/DisplayObject.hx",952,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_957___stopAllMovieClips,"openfl.display.DisplayObject","__stopAllMovieClips",0x3954cfdb,"openfl.display.DisplayObject.__stopAllMovieClips","openfl/display/DisplayObject.hx",957,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_964___update,"openfl.display.DisplayObject","__update",0x3f3ecc80,"openfl.display.DisplayObject.__update","openfl/display/DisplayObject.hx",964,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1070___updateCacheBitmap,"openfl.display.DisplayObject","__updateCacheBitmap",0x0c735731,"openfl.display.DisplayObject.__updateCacheBitmap","openfl/display/DisplayObject.hx",1070,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1283___updateChildren,"openfl.display.DisplayObject","__updateChildren",0xcfbb21df,"openfl.display.DisplayObject.__updateChildren","openfl/display/DisplayObject.hx",1283,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1301___updateMask,"openfl.display.DisplayObject","__updateMask",0x5b0e798c,"openfl.display.DisplayObject.__updateMask","openfl/display/DisplayObject.hx",1301,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1321___updateTransforms,"openfl.display.DisplayObject","__updateTransforms",0x37510227,"openfl.display.DisplayObject.__updateTransforms","openfl/display/DisplayObject.hx",1321,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1393_get_alpha,"openfl.display.DisplayObject","get_alpha",0x5dd6147e,"openfl.display.DisplayObject.get_alpha","openfl/display/DisplayObject.hx",1393,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1398_set_alpha,"openfl.display.DisplayObject","set_alpha",0x4127008a,"openfl.display.DisplayObject.set_alpha","openfl/display/DisplayObject.hx",1398,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1409_get_blendMode,"openfl.display.DisplayObject","get_blendMode",0xee046174,"openfl.display.DisplayObject.get_blendMode","openfl/display/DisplayObject.hx",1409,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1414_set_blendMode,"openfl.display.DisplayObject","set_blendMode",0x330a4380,"openfl.display.DisplayObject.set_blendMode","openfl/display/DisplayObject.hx",1414,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1425_get_cacheAsBitmap,"openfl.display.DisplayObject","get_cacheAsBitmap",0xa5311003,"openfl.display.DisplayObject.get_cacheAsBitmap","openfl/display/DisplayObject.hx",1425,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1430_set_cacheAsBitmap,"openfl.display.DisplayObject","set_cacheAsBitmap",0xc89ee80f,"openfl.display.DisplayObject.set_cacheAsBitmap","openfl/display/DisplayObject.hx",1430,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1440_get_cacheAsBitmapMatrix,"openfl.display.DisplayObject","get_cacheAsBitmapMatrix",0xe47a1ea4,"openfl.display.DisplayObject.get_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",1440,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1445_set_cacheAsBitmapMatrix,"openfl.display.DisplayObject","set_cacheAsBitmapMatrix",0xe6db87b0,"openfl.display.DisplayObject.set_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",1445,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1455_get_filters,"openfl.display.DisplayObject","get_filters",0x661396db,"openfl.display.DisplayObject.get_filters","openfl/display/DisplayObject.hx",1455,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1468_set_filters,"openfl.display.DisplayObject","set_filters",0x70809de7,"openfl.display.DisplayObject.set_filters","openfl/display/DisplayObject.hx",1468,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1489_get_height,"openfl.display.DisplayObject","get_height",0x7d8c16c7,"openfl.display.DisplayObject.get_height","openfl/display/DisplayObject.hx",1489,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1500_set_height,"openfl.display.DisplayObject","set_height",0x8109b53b,"openfl.display.DisplayObject.set_height","openfl/display/DisplayObject.hx",1500,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1526_get_loaderInfo,"openfl.display.DisplayObject","get_loaderInfo",0x6805b101,"openfl.display.DisplayObject.get_loaderInfo","openfl/display/DisplayObject.hx",1526,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1541_get_mask,"openfl.display.DisplayObject","get_mask",0xd81ad7cc,"openfl.display.DisplayObject.get_mask","openfl/display/DisplayObject.hx",1541,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1546_set_mask,"openfl.display.DisplayObject","set_mask",0x86783140,"openfl.display.DisplayObject.set_mask","openfl/display/DisplayObject.hx",1546,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1589_get_mouseX,"openfl.display.DisplayObject","get_mouseX",0x474e5973,"openfl.display.DisplayObject.get_mouseX","openfl/display/DisplayObject.hx",1589,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1599_get_mouseY,"openfl.display.DisplayObject","get_mouseY",0x474e5974,"openfl.display.DisplayObject.get_mouseY","openfl/display/DisplayObject.hx",1599,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1611_get_name,"openfl.display.DisplayObject","get_name",0xd8c4092b,"openfl.display.DisplayObject.get_name","openfl/display/DisplayObject.hx",1611,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1618_set_name,"openfl.display.DisplayObject","set_name",0x8721629f,"openfl.display.DisplayObject.set_name","openfl/display/DisplayObject.hx",1618,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1623_get_root,"openfl.display.DisplayObject","get_root",0xdb738502,"openfl.display.DisplayObject.get_root","openfl/display/DisplayObject.hx",1623,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1638_get_rotation,"openfl.display.DisplayObject","get_rotation",0xdf0fc41e,"openfl.display.DisplayObject.get_rotation","openfl/display/DisplayObject.hx",1638,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1643_set_rotation,"openfl.display.DisplayObject","set_rotation",0xf408e792,"openfl.display.DisplayObject.set_rotation","openfl/display/DisplayObject.hx",1643,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1668_get_scaleX,"openfl.display.DisplayObject","get_scaleX",0xb765f96e,"openfl.display.DisplayObject.get_scaleX","openfl/display/DisplayObject.hx",1668,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1673_set_scaleX,"openfl.display.DisplayObject","set_scaleX",0xbae397e2,"openfl.display.DisplayObject.set_scaleX","openfl/display/DisplayObject.hx",1673,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1709_get_scaleY,"openfl.display.DisplayObject","get_scaleY",0xb765f96f,"openfl.display.DisplayObject.get_scaleY","openfl/display/DisplayObject.hx",1709,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1714_set_scaleY,"openfl.display.DisplayObject","set_scaleY",0xbae397e3,"openfl.display.DisplayObject.set_scaleY","openfl/display/DisplayObject.hx",1714,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1748_get_scrollRect,"openfl.display.DisplayObject","get_scrollRect",0xba87dab1,"openfl.display.DisplayObject.get_scrollRect","openfl/display/DisplayObject.hx",1748,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1761_set_scrollRect,"openfl.display.DisplayObject","set_scrollRect",0xdaa7c325,"openfl.display.DisplayObject.set_scrollRect","openfl/display/DisplayObject.hx",1761,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1780_get_transform,"openfl.display.DisplayObject","get_transform",0x275faa8c,"openfl.display.DisplayObject.get_transform","openfl/display/DisplayObject.hx",1780,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1793_set_transform,"openfl.display.DisplayObject","set_transform",0x6c658c98,"openfl.display.DisplayObject.set_transform","openfl/display/DisplayObject.hx",1793,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1818_get_visible,"openfl.display.DisplayObject","get_visible",0xfff16d92,"openfl.display.DisplayObject.get_visible","openfl/display/DisplayObject.hx",1818,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1823_set_visible,"openfl.display.DisplayObject","set_visible",0x0a5e749e,"openfl.display.DisplayObject.set_visible","openfl/display/DisplayObject.hx",1823,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1831_get_width,"openfl.display.DisplayObject","get_width",0x06a22326,"openfl.display.DisplayObject.get_width","openfl/display/DisplayObject.hx",1831,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1842_set_width,"openfl.display.DisplayObject","set_width",0xe9f30f32,"openfl.display.DisplayObject.set_width","openfl/display/DisplayObject.hx",1842,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1870_get_x,"openfl.display.DisplayObject","get_x",0xc67a5d98,"openfl.display.DisplayObject.get_x","openfl/display/DisplayObject.hx",1870,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1875_set_x,"openfl.display.DisplayObject","set_x",0xaf4953a4,"openfl.display.DisplayObject.set_x","openfl/display/DisplayObject.hx",1875,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1885_get_y,"openfl.display.DisplayObject","get_y",0xc67a5d99,"openfl.display.DisplayObject.get_y","openfl/display/DisplayObject.hx",1885,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_1890_set_y,"openfl.display.DisplayObject","set_y",0xaf4953a5,"openfl.display.DisplayObject.set_y","openfl/display/DisplayObject.hx",1890,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_61_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",61,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_63_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",63,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_64_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",64,0xc7539829)
HX_LOCAL_STACK_FRAME(_hx_pos_26400284d5456c16_65_boot,"openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",65,0xc7539829)
namespace openfl{
namespace display{

void DisplayObject_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_178_new)
HXLINE( 180)		super::__construct(null());
HXLINE( 182)		if (hx::IsNotNull( ::openfl::display::DisplayObject_obj::_hx___initStage )) {
HXLINE( 184)			this->stage = ::openfl::display::DisplayObject_obj::_hx___initStage;
HXLINE( 185)			::openfl::display::DisplayObject_obj::_hx___initStage = null();
            		}
HXLINE( 189)		this->_hx___alpha = (int)1;
HXLINE( 190)		this->_hx___blendMode = (int)10;
HXLINE( 191)		this->_hx___cacheAsBitmap = false;
HXLINE( 192)		this->_hx___transform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 193)		this->_hx___visible = true;
HXLINE( 195)		this->_hx___rotation = (int)0;
HXLINE( 196)		this->_hx___rotationSine = (int)0;
HXLINE( 197)		this->_hx___rotationCosine = (int)1;
HXLINE( 198)		this->_hx___scaleX = (int)1;
HXLINE( 199)		this->_hx___scaleY = (int)1;
HXLINE( 201)		this->_hx___worldAlpha = (int)1;
HXLINE( 202)		this->_hx___worldBlendMode = (int)10;
HXLINE( 203)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 204)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 205)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 206)		this->_hx___worldVisible = true;
HXLINE( 208)		this->set_name((HX_("instance",95,1f,e1,59) + ++::openfl::display::DisplayObject_obj::_hx___instanceCount));
            	}

Dynamic DisplayObject_obj::__CreateEmpty() { return new DisplayObject_obj; }

void *DisplayObject_obj::_hx_vtable = 0;

Dynamic DisplayObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::geom::Rectangle, ::openfl::geom::Matrix))&::openfl::display::DisplayObject_obj::_hx___getBounds,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderGL,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderGLMask,
	( void (hx::Object::*)(bool))&::openfl::display::DisplayObject_obj::_hx___updateChildren,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::DisplayObject_obj::_hx___updateTransforms,
	( void (hx::Object::*)( ::openfl::display::Graphics))&::openfl::display::DisplayObject_obj::_hx___updateMask,
};

void *DisplayObject_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable;
	}
	return super::_hx_getInterface(inHash);
}

void DisplayObject_obj::addEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_useCapture,hx::Null< int >  __o_priority,hx::Null< bool >  __o_useWeakReference){
bool useCapture = __o_useCapture.Default(false);
int priority = __o_priority.Default(0);
bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_213_addEventListener)
HXLINE( 215)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("activate",b3,1b,ac,e5)) ||  (_hx_switch_0==HX_("deactivate",34,5c,01,3c)) ||  (_hx_switch_0==HX_("enterFrame",f5,03,50,02)) ||  (_hx_switch_0==HX_("exitFrame",2f,64,48,12)) ||  (_hx_switch_0==HX_("frameConstructed",09,89,5d,98)) ||  (_hx_switch_0==HX_("render",56,6b,29,05)) ){
HXLINE( 219)			if (!(::haxe::IMap_obj::exists(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type))) {
HXLINE( 221)				::haxe::IMap_obj::set(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type,::Array_obj< ::Dynamic>::__new(0));
            			}
HXLINE( 225)			::Array< ::Dynamic> dispatchers = ( (::Array< ::Dynamic>)(::haxe::IMap_obj::get(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) );
HXLINE( 227)			if ((dispatchers->indexOf(hx::ObjectPtr<OBJ_>(this),null()) == (int)-1)) {
HXLINE( 229)				dispatchers->push(hx::ObjectPtr<OBJ_>(this));
            			}
HXLINE( 217)			goto _hx_goto_1;
            		}
            		/* default */{
            		}
            		_hx_goto_1:;
HXLINE( 237)		this->super::addEventListener(type,listener,useCapture,priority,useWeakReference);
            	}


bool DisplayObject_obj::dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_242_dispatchEvent)
HXLINE( 244)		if (::Std_obj::is(event,hx::ClassOf< ::openfl::events::MouseEvent >())) {
HXLINE( 246)			 ::openfl::events::MouseEvent mouseEvent = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 247)			 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN( 247)			Float _hx_tmp = (mouseEvent->localX * _this->a);
HXDLIN( 247)			mouseEvent->stageX = ((_hx_tmp + (mouseEvent->localY * _this->c)) + _this->tx);
HXLINE( 248)			 ::openfl::geom::Matrix _this1 = this->_hx___getRenderTransform();
HXDLIN( 248)			Float _hx_tmp1 = (mouseEvent->localX * _this1->b);
HXDLIN( 248)			mouseEvent->stageY = ((_hx_tmp1 + (mouseEvent->localY * _this1->d)) + _this1->ty);
            		}
            		else {
HXLINE( 250)			if (::Std_obj::is(event,hx::ClassOf< ::openfl::events::TouchEvent >())) {
HXLINE( 252)				 ::openfl::events::TouchEvent touchEvent = ( ( ::openfl::events::TouchEvent)(event) );
HXLINE( 253)				 ::openfl::geom::Matrix _this2 = this->_hx___getRenderTransform();
HXDLIN( 253)				Float _hx_tmp2 = (touchEvent->localX * _this2->a);
HXDLIN( 253)				touchEvent->stageX = ((_hx_tmp2 + (touchEvent->localY * _this2->c)) + _this2->tx);
HXLINE( 254)				 ::openfl::geom::Matrix _this3 = this->_hx___getRenderTransform();
HXDLIN( 254)				Float _hx_tmp3 = (touchEvent->localX * _this3->b);
HXDLIN( 254)				touchEvent->stageY = ((_hx_tmp3 + (touchEvent->localY * _this3->d)) + _this3->ty);
            			}
            		}
HXLINE( 258)		return this->_hx___dispatchWithCapture(event);
            	}


 ::openfl::geom::Rectangle DisplayObject_obj::getBounds( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_263_getBounds)
HXLINE( 265)		 ::openfl::geom::Matrix matrix;
HXLINE( 266)		bool usingTemp = false;
HXLINE( 268)		if (hx::IsNotNull( targetCoordinateSpace )) {
HXLINE( 270)			matrix = this->_hx___getWorldTransform()->clone();
HXLINE( 271)			matrix->concat(targetCoordinateSpace->_hx___getWorldTransform()->clone()->invert());
            		}
            		else {
HXLINE( 275)			usingTemp = true;
HXLINE( 276)			matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE( 277)			matrix->identity();
            		}
HXLINE( 281)		 ::openfl::geom::Rectangle bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 282)		this->_hx___getBounds(bounds,matrix);
HXLINE( 284)		if (usingTemp) {
HXLINE( 286)			::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
            		}
HXLINE( 290)		return bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getBounds,return )

 ::openfl::geom::Rectangle DisplayObject_obj::getRect( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_298_getRect)
HXDLIN( 298)		return this->getBounds(targetCoordinateSpace);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getRect,return )

 ::openfl::geom::Point DisplayObject_obj::globalToLocal( ::openfl::geom::Point pos){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_305_globalToLocal)
HXDLIN( 305)		return this->_hx___globalToLocal(pos, ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,globalToLocal,return )

bool DisplayObject_obj::hitTestObject( ::openfl::display::DisplayObject obj){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_310_hitTestObject)
HXLINE( 312)		bool _hx_tmp;
HXDLIN( 312)		bool _hx_tmp1;
HXDLIN( 312)		if (hx::IsNotNull( obj )) {
HXLINE( 312)			_hx_tmp1 = hx::IsNotNull( obj->parent );
            		}
            		else {
HXLINE( 312)			_hx_tmp1 = false;
            		}
HXDLIN( 312)		if (_hx_tmp1) {
HXLINE( 312)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 312)			_hx_tmp = false;
            		}
HXDLIN( 312)		if (_hx_tmp) {
HXLINE( 314)			 ::openfl::geom::Rectangle currentBounds = this->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 315)			 ::openfl::geom::Rectangle targetBounds = obj->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 317)			return currentBounds->intersects(targetBounds);
            		}
HXLINE( 321)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,hitTestObject,return )

bool DisplayObject_obj::hitTestPoint(Float x,Float y,hx::Null< bool >  __o_shapeFlag){
bool shapeFlag = __o_shapeFlag.Default(false);
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_328_hitTestPoint)
HXDLIN( 328)		if (hx::IsNotNull( this->stage )) {
HXLINE( 330)			return this->_hx___hitTest(x,y,shapeFlag,null(),true,hx::ObjectPtr<OBJ_>(this));
            		}
            		else {
HXLINE( 334)			return false;
            		}
HXLINE( 328)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,hitTestPoint,return )

 ::openfl::geom::Point DisplayObject_obj::localToGlobal( ::openfl::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_343_localToGlobal)
HXDLIN( 343)		return this->_hx___getRenderTransform()->transformPoint(point);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,localToGlobal,return )

void DisplayObject_obj::removeEventListener(::String type, ::Dynamic listener,hx::Null< bool >  __o_useCapture){
bool useCapture = __o_useCapture.Default(false);
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_348_removeEventListener)
HXLINE( 350)		this->super::removeEventListener(type,listener,useCapture);
HXLINE( 352)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("activate",b3,1b,ac,e5)) ||  (_hx_switch_0==HX_("deactivate",34,5c,01,3c)) ||  (_hx_switch_0==HX_("enterFrame",f5,03,50,02)) ||  (_hx_switch_0==HX_("exitFrame",2f,64,48,12)) ||  (_hx_switch_0==HX_("frameConstructed",09,89,5d,98)) ||  (_hx_switch_0==HX_("render",56,6b,29,05)) ){
HXLINE( 356)			if (!(this->hasEventListener(type))) {
HXLINE( 358)				if (::haxe::IMap_obj::exists(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) {
HXLINE( 360)					( (::Array< ::Dynamic>)(::haxe::IMap_obj::get(::openfl::display::DisplayObject_obj::_hx___broadcastEvents,type)) )->remove(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
HXLINE( 356)			goto _hx_goto_10;
            		}
            		/* default */{
            		}
            		_hx_goto_10:;
            	}


void DisplayObject_obj::_hx___cleanup(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_373___cleanup)
HXLINE( 375)		this->_hx___cairo = null();
HXLINE( 382)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 384)			this->_hx___graphics->_hx___cleanup();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___cleanup,(void))

bool DisplayObject_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_391___dispatch)
HXLINE( 393)		bool _hx_tmp;
HXDLIN( 393)		if (hx::IsNotNull( this->_hx___eventMap )) {
HXLINE( 393)			_hx_tmp = this->hasEventListener(event->type);
            		}
            		else {
HXLINE( 393)			_hx_tmp = false;
            		}
HXDLIN( 393)		if (_hx_tmp) {
HXLINE( 395)			bool result = this->super::_hx___dispatchEvent(event);
HXLINE( 397)			if (event->_hx___isCanceled) {
HXLINE( 399)				return true;
            			}
HXLINE( 403)			return result;
            		}
HXLINE( 407)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatch,return )

void DisplayObject_obj::_hx___dispatchChildren( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_412___dispatchChildren)
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatchChildren,(void))

bool DisplayObject_obj::_hx___dispatchEvent( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_419___dispatchEvent)
HXLINE( 421)		bool result = this->super::_hx___dispatchEvent(event);
HXLINE( 423)		if (event->_hx___isCanceled) {
HXLINE( 425)			return true;
            		}
HXLINE( 429)		bool _hx_tmp;
HXDLIN( 429)		bool _hx_tmp1;
HXDLIN( 429)		if (event->bubbles) {
HXLINE( 429)			_hx_tmp1 = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 429)			_hx_tmp1 = false;
            		}
HXDLIN( 429)		if (_hx_tmp1) {
HXLINE( 429)			_hx_tmp = hx::IsNotEq( this->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 429)			_hx_tmp = false;
            		}
HXDLIN( 429)		if (_hx_tmp) {
HXLINE( 431)			event->eventPhase = (int)3;
HXLINE( 433)			if (hx::IsNull( event->target )) {
HXLINE( 435)				event->target = hx::ObjectPtr<OBJ_>(this);
            			}
HXLINE( 439)			this->parent->_hx___dispatchEvent(event);
            		}
HXLINE( 443)		return result;
            	}


void DisplayObject_obj::_hx___dispatchStack( ::openfl::events::Event event,::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_448___dispatchStack)
HXLINE( 450)		 ::openfl::display::DisplayObject target;
HXLINE( 451)		int length = stack->length;
HXLINE( 453)		if ((length == (int)0)) {
HXLINE( 455)			event->eventPhase = (int)2;
HXLINE( 456)			target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE( 457)			target->_hx___dispatch(event);
            		}
            		else {
HXLINE( 461)			event->eventPhase = (int)1;
HXLINE( 462)			event->target = stack->__get((stack->length - (int)1)).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 464)			{
HXLINE( 464)				int _g1 = (int)0;
HXDLIN( 464)				int _g = (length - (int)1);
HXDLIN( 464)				while((_g1 < _g)){
HXLINE( 464)					_g1 = (_g1 + (int)1);
HXDLIN( 464)					int i = (_g1 - (int)1);
HXLINE( 466)					stack->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE( 468)					if (event->_hx___isCanceled) {
HXLINE( 470)						return;
            					}
            				}
            			}
HXLINE( 476)			event->eventPhase = (int)2;
HXLINE( 477)			target = ( ( ::openfl::display::DisplayObject)(event->target) );
HXLINE( 478)			target->_hx___dispatch(event);
HXLINE( 480)			if (event->_hx___isCanceled) {
HXLINE( 482)				return;
            			}
HXLINE( 486)			if (event->bubbles) {
HXLINE( 488)				event->eventPhase = (int)3;
HXLINE( 489)				int i1 = (length - (int)2);
HXLINE( 491)				while((i1 >= (int)0)){
HXLINE( 493)					stack->__get(i1).StaticCast<  ::openfl::display::DisplayObject >()->_hx___dispatch(event);
HXLINE( 495)					if (event->_hx___isCanceled) {
HXLINE( 497)						return;
            					}
HXLINE( 501)					i1 = (i1 - (int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___dispatchStack,(void))

bool DisplayObject_obj::_hx___dispatchWithCapture( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_512___dispatchWithCapture)
HXLINE( 514)		if (hx::IsNull( event->target )) {
HXLINE( 516)			event->target = hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 520)		if (hx::IsNotNull( this->parent )) {
HXLINE( 522)			event->eventPhase = (int)1;
HXLINE( 524)			if (hx::IsEq( this->parent,this->stage )) {
HXLINE( 526)				this->parent->_hx___dispatch(event);
            			}
            			else {
HXLINE( 530)				 ::openfl::_Vector::AbstractVector stack = ::openfl::display::DisplayObject_obj::_hx___tempStack->get();
HXLINE( 531)				 ::openfl::display::DisplayObjectContainer parent = this->parent;
HXLINE( 532)				int i = (int)0;
HXLINE( 534)				while(hx::IsNotNull( parent )){
HXLINE( 536)					::openfl::_Vector::IVector_obj::set(stack->data,i,parent);
HXLINE( 537)					parent = parent->parent;
HXLINE( 538)					i = (i + (int)1);
            				}
HXLINE( 542)				{
HXLINE( 542)					int _g1 = (int)0;
HXDLIN( 542)					int _g = i;
HXDLIN( 542)					while((_g1 < _g)){
HXLINE( 542)						_g1 = (_g1 + (int)1);
HXDLIN( 542)						int j = (_g1 - (int)1);
HXLINE( 544)						::Dynamic stack1 = stack->data;
HXDLIN( 544)						( ( ::openfl::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(stack1,((i - j) - (int)1))) )->_hx___dispatch(event);
            					}
            				}
HXLINE( 548)				::openfl::display::DisplayObject_obj::_hx___tempStack->release(stack);
            			}
            		}
HXLINE( 554)		event->eventPhase = (int)2;
HXLINE( 556)		return this->_hx___dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___dispatchWithCapture,return )

void DisplayObject_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_561___enterFrame)
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___enterFrame,(void))

void DisplayObject_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_570___getBounds)
HXDLIN( 570)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 572)			this->_hx___graphics->_hx___getBounds(rect,matrix);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getBounds,(void))

 ::lime::ui::MouseCursor DisplayObject_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_581___getCursor)
HXDLIN( 581)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getCursor,return )

void DisplayObject_obj::_hx___getFilterBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_586___getFilterBounds)
HXLINE( 590)		this->_hx___getBounds(rect,matrix);
HXLINE( 592)		bool _hx_tmp;
HXDLIN( 592)		if (hx::IsNotNull( this->_hx___filters )) {
HXLINE( 592)			_hx_tmp = (this->_hx___filters->length > (int)0);
            		}
            		else {
HXLINE( 592)			_hx_tmp = false;
            		}
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 594)			 ::openfl::geom::Rectangle extension = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 596)			{
HXLINE( 596)				int _g = (int)0;
HXDLIN( 596)				::Array< ::Dynamic> _g1 = this->_hx___filters;
HXDLIN( 596)				while((_g < _g1->length)){
HXLINE( 596)					 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 596)					_g = (_g + (int)1);
HXLINE( 597)					int _hx_tmp1 = -(filter->_hx___leftExtension);
HXDLIN( 597)					int _hx_tmp2 = -(filter->_hx___topExtension);
HXDLIN( 597)					int _hx_tmp3 = (filter->_hx___leftExtension + filter->_hx___rightExtension);
HXDLIN( 597)					extension->_hx___expand(_hx_tmp1,_hx_tmp2,_hx_tmp3,(filter->_hx___topExtension + filter->_hx___bottomExtension));
            				}
            			}
HXLINE( 600)			 ::openfl::geom::Rectangle rect1 = rect;
HXDLIN( 600)			rect1->width = (rect1->width + extension->width);
HXLINE( 601)			 ::openfl::geom::Rectangle rect2 = rect;
HXDLIN( 601)			rect2->height = (rect2->height + extension->height);
HXLINE( 602)			 ::openfl::geom::Rectangle rect3 = rect;
HXDLIN( 602)			rect3->x = (rect3->x + extension->x);
HXLINE( 603)			 ::openfl::geom::Rectangle rect4 = rect;
HXDLIN( 603)			rect4->y = (rect4->y + extension->y);
HXLINE( 605)			::openfl::geom::Rectangle_obj::_hx___pool->release(extension);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getFilterBounds,(void))

bool DisplayObject_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_614___getInteractive)
HXDLIN( 614)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getInteractive,return )

void DisplayObject_obj::_hx___getLocalBounds( ::openfl::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_619___getLocalBounds)
HXLINE( 625)		this->_hx___getBounds(rect,this->_hx___transform);
HXLINE( 630)		 ::openfl::geom::Rectangle rect1 = rect;
HXDLIN( 630)		rect1->x = (rect1->x - this->_hx___transform->tx);
HXLINE( 631)		 ::openfl::geom::Rectangle rect2 = rect;
HXDLIN( 631)		rect2->y = (rect2->y - this->_hx___transform->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getLocalBounds,(void))

void DisplayObject_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_638___getRenderBounds)
HXDLIN( 638)		if (hx::IsNull( this->_hx___scrollRect )) {
HXLINE( 640)			this->_hx___getBounds(rect,matrix);
            		}
            		else {
HXLINE( 644)			 ::openfl::geom::Rectangle r = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 645)			r->copyFrom(this->_hx___scrollRect);
HXLINE( 646)			r->_hx___transform(r,matrix);
HXLINE( 647)			rect->_hx___expand(matrix->tx,matrix->ty,r->width,r->height);
HXLINE( 648)			::openfl::geom::Rectangle_obj::_hx___pool->release(r);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getRenderBounds,(void))

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getRenderTransform(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_655___getRenderTransform)
HXLINE( 657)		this->_hx___getWorldTransform();
HXLINE( 658)		return this->_hx___renderTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getRenderTransform,return )

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getWorldTransform(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_663___getWorldTransform)
HXLINE( 665)		bool transformDirty;
HXDLIN( 665)		if (!(this->_hx___transformDirty)) {
HXLINE( 665)			transformDirty = this->_hx___worldTransformInvalid;
            		}
            		else {
HXLINE( 665)			transformDirty = true;
            		}
HXLINE( 667)		if (transformDirty) {
HXLINE( 669)			::Array< ::Dynamic> list = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 670)			 ::openfl::display::DisplayObject current = hx::ObjectPtr<OBJ_>(this);
HXLINE( 672)			if (hx::IsNull( this->parent )) {
HXLINE( 674)				this->_hx___update(true,false,null());
            			}
            			else {
HXLINE( 678)				while(hx::IsNotEq( current,this->stage )){
HXLINE( 680)					list->push(current);
HXLINE( 681)					current = current->parent;
HXLINE( 683)					if (hx::IsNull( current )) {
HXLINE( 683)						goto _hx_goto_31;
            					}
            				}
            				_hx_goto_31:;
            			}
HXLINE( 688)			int i = list->length;
HXLINE( 689)			while(true){
HXLINE( 689)				i = (i - (int)1);
HXDLIN( 689)				if (!((i >= (int)0))) {
HXLINE( 689)					goto _hx_goto_32;
            				}
HXLINE( 691)				current = list->__get(i).StaticCast<  ::openfl::display::DisplayObject >();
HXLINE( 692)				current->_hx___update(true,false,null());
HXLINE( 693)				current->_hx___worldTransformInvalid = false;
            			}
            			_hx_goto_32:;
            		}
HXLINE( 700)		return this->_hx___worldTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getWorldTransform,return )

 ::openfl::geom::Point DisplayObject_obj::_hx___globalToLocal( ::openfl::geom::Point global, ::openfl::geom::Point local){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_705___globalToLocal)
HXLINE( 707)		this->_hx___getRenderTransform();
HXLINE( 709)		if (hx::IsEq( global,local )) {
HXLINE( 711)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN( 711)			Float norm = (_this->a * _this->d);
HXDLIN( 711)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 711)			if ((norm1 == (int)0)) {
HXLINE( 711)				global->x = -(_this->tx);
HXDLIN( 711)				global->y = -(_this->ty);
            			}
            			else {
HXLINE( 711)				Float _this1 = _this->c;
HXDLIN( 711)				Float px = (_this1 * (_this->ty - global->y));
HXDLIN( 711)				Float _this2 = _this->d;
HXDLIN( 711)				Float px1 = (((Float)((Float)1.0) / (Float)norm1) * (px + (_this2 * (global->x - _this->tx))));
HXDLIN( 711)				Float _this3 = _this->a;
HXDLIN( 711)				Float _hx_tmp = (_this3 * (global->y - _this->ty));
HXDLIN( 711)				Float _this4 = _this->b;
HXDLIN( 711)				global->y = (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this4 * (_this->tx - global->x))));
HXDLIN( 711)				global->x = px1;
            			}
            		}
            		else {
HXLINE( 715)			 ::openfl::geom::Matrix _this5 = this->_hx___renderTransform;
HXDLIN( 715)			Float norm2 = (_this5->a * _this5->d);
HXDLIN( 715)			Float norm3 = (norm2 - (_this5->b * _this5->c));
HXDLIN( 715)			Float _hx_tmp1;
HXDLIN( 715)			if ((norm3 == (int)0)) {
HXLINE( 715)				_hx_tmp1 = -(_this5->tx);
            			}
            			else {
HXLINE( 715)				Float _this6 = _this5->c;
HXDLIN( 715)				Float _hx_tmp2 = (_this6 * (_this5->ty - global->y));
HXDLIN( 715)				Float _this7 = _this5->d;
HXDLIN( 715)				_hx_tmp1 = (((Float)((Float)1.0) / (Float)norm3) * (_hx_tmp2 + (_this7 * (global->x - _this5->tx))));
            			}
HXDLIN( 715)			local->x = _hx_tmp1;
HXLINE( 716)			 ::openfl::geom::Matrix _this8 = this->_hx___renderTransform;
HXDLIN( 716)			Float norm4 = (_this8->a * _this8->d);
HXDLIN( 716)			Float norm5 = (norm4 - (_this8->b * _this8->c));
HXDLIN( 716)			Float _hx_tmp3;
HXDLIN( 716)			if ((norm5 == (int)0)) {
HXLINE( 716)				_hx_tmp3 = -(_this8->ty);
            			}
            			else {
HXLINE( 716)				Float _this9 = _this8->a;
HXDLIN( 716)				Float _hx_tmp4 = (_this9 * (global->y - _this8->ty));
HXDLIN( 716)				Float _this10 = _this8->b;
HXDLIN( 716)				_hx_tmp3 = (((Float)((Float)1.0) / (Float)norm5) * (_hx_tmp4 + (_this10 * (_this8->tx - global->x))));
            			}
HXDLIN( 716)			local->y = _hx_tmp3;
            		}
HXLINE( 720)		return local;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___globalToLocal,return )

bool DisplayObject_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_725___hitTest)
HXLINE( 727)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 729)			bool _hx_tmp;
HXDLIN( 729)			if (!(!(hitObject->get_visible()))) {
HXLINE( 729)				_hx_tmp = this->_hx___isMask;
            			}
            			else {
HXLINE( 729)				_hx_tmp = true;
            			}
HXDLIN( 729)			if (_hx_tmp) {
HXLINE( 729)				return false;
            			}
HXLINE( 730)			bool _hx_tmp1;
HXDLIN( 730)			if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 730)				_hx_tmp1 = !(this->get_mask()->_hx___hitTestMask(x,y));
            			}
            			else {
HXLINE( 730)				_hx_tmp1 = false;
            			}
HXDLIN( 730)			if (_hx_tmp1) {
HXLINE( 730)				return false;
            			}
HXLINE( 732)			 ::openfl::display::Graphics _hx_tmp2 = this->_hx___graphics;
HXDLIN( 732)			if (_hx_tmp2->_hx___hitTest(x,y,shapeFlag,this->_hx___getRenderTransform())) {
HXLINE( 734)				bool _hx_tmp3;
HXDLIN( 734)				if (hx::IsNotNull( stack )) {
HXLINE( 734)					_hx_tmp3 = !(interactiveOnly);
            				}
            				else {
HXLINE( 734)					_hx_tmp3 = false;
            				}
HXDLIN( 734)				if (_hx_tmp3) {
HXLINE( 736)					stack->push(hitObject);
            				}
HXLINE( 740)				return true;
            			}
            		}
HXLINE( 746)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC6(DisplayObject_obj,_hx___hitTest,return )

bool DisplayObject_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_751___hitTestMask)
HXLINE( 753)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 755)			 ::openfl::display::Graphics _hx_tmp = this->_hx___graphics;
HXDLIN( 755)			if (_hx_tmp->_hx___hitTest(x,y,true,this->_hx___getRenderTransform())) {
HXLINE( 757)				return true;
            			}
            		}
HXLINE( 763)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___hitTestMask,return )

void DisplayObject_obj::_hx___readGraphicsData( ::openfl::_Vector::AbstractVector graphicsData,bool recurse){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_770___readGraphicsData)
HXDLIN( 770)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 772)			this->_hx___graphics->_hx___readGraphicsData(graphicsData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___readGraphicsData,(void))

void DisplayObject_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_779___renderCairo)
HXLINE( 782)		this->_hx___updateCacheBitmap(renderSession,!(this->_hx___worldColorTransform->_hx___isDefault()));
HXLINE( 784)		bool _hx_tmp;
HXDLIN( 784)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 784)			_hx_tmp = !(this->_hx___cacheBitmapRender);
            		}
            		else {
HXLINE( 784)			_hx_tmp = false;
            		}
HXDLIN( 784)		if (_hx_tmp) {
HXLINE( 786)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN( 786)			bool _hx_tmp1;
HXDLIN( 786)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 786)				_hx_tmp1 = (bitmap->_hx___worldAlpha <= (int)0);
            			}
            			else {
HXLINE( 786)				_hx_tmp1 = true;
            			}
HXDLIN( 786)			if (!(_hx_tmp1)) {
HXLINE( 786)				 ::lime::graphics::cairo::Cairo cairo = renderSession->cairo;
HXDLIN( 786)				bool _hx_tmp2;
HXDLIN( 786)				if (hx::IsNotNull( bitmap->_hx___bitmapData )) {
HXLINE( 786)					_hx_tmp2 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 786)					_hx_tmp2 = false;
            				}
HXDLIN( 786)				if (_hx_tmp2) {
HXLINE( 786)					renderSession->blendModeManager->setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 786)					renderSession->maskManager->pushObject(bitmap,null());
HXDLIN( 786)					 ::openfl::geom::Matrix transform = bitmap->_hx___renderTransform;
HXDLIN( 786)					if (renderSession->roundPixels) {
HXLINE( 786)						 ::lime::math::Matrix3 matrix = transform->_hx___toMatrix3();
HXDLIN( 786)						matrix->tx = ::Math_obj::round(matrix->tx);
HXDLIN( 786)						matrix->ty = ::Math_obj::round(matrix->ty);
HXDLIN( 786)						cairo->set_matrix(matrix);
            					}
            					else {
HXLINE( 786)						cairo->set_matrix(transform->_hx___toMatrix3());
            					}
HXDLIN( 786)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 786)					if (hx::IsNotNull( surface )) {
HXLINE( 786)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 786)						int _hx_tmp3;
HXDLIN( 786)						bool _hx_tmp4;
HXDLIN( 786)						if (renderSession->allowSmoothing) {
HXLINE( 786)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE( 786)							_hx_tmp4 = false;
            						}
HXDLIN( 786)						if (_hx_tmp4) {
HXLINE( 786)							_hx_tmp3 = (int)1;
            						}
            						else {
HXLINE( 786)							_hx_tmp3 = (int)3;
            						}
HXDLIN( 786)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN( 786)						cairo->set_source(pattern);
HXDLIN( 786)						if ((bitmap->_hx___worldAlpha == (int)1)) {
HXLINE( 786)							cairo->paint();
            						}
            						else {
HXLINE( 786)							cairo->paintWithAlpha(bitmap->_hx___worldAlpha);
            						}
            					}
HXDLIN( 786)					renderSession->maskManager->popObject(bitmap,null());
            				}
            			}
            		}
            		else {
HXLINE( 790)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairo,(void))

void DisplayObject_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_801___renderCairoMask)
HXDLIN( 801)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 803)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairoMask,(void))

void DisplayObject_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_813___renderCanvas)
HXDLIN( 813)		bool _hx_tmp;
HXDLIN( 813)		if (hx::IsNotNull( this->get_mask() )) {
HXDLIN( 813)			if ((this->get_mask()->get_width() > (int)0)) {
HXDLIN( 813)				_hx_tmp = (this->get_mask()->get_height() > (int)0);
            			}
            			else {
HXDLIN( 813)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 813)			_hx_tmp = true;
            		}
HXDLIN( 813)		if (_hx_tmp) {
HXLINE( 815)			this->_hx___updateCacheBitmap(renderSession,!(this->_hx___worldColorTransform->_hx___isDefault()));
HXLINE( 817)			bool _hx_tmp1;
HXDLIN( 817)			if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 817)				_hx_tmp1 = !(this->_hx___cacheBitmapRender);
            			}
            			else {
HXLINE( 817)				_hx_tmp1 = false;
            			}
HXDLIN( 817)			if (_hx_tmp1) {
HXLINE( 819)				 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvas,(void))

void DisplayObject_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_834___renderCanvasMask)
HXDLIN( 834)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 836)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvasMask,(void))

void DisplayObject_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_843___renderDOM)
HXLINE( 845)		this->_hx___updateCacheBitmap(renderSession,!(this->_hx___worldColorTransform->_hx___isDefault()));
HXLINE( 847)		bool _hx_tmp;
HXDLIN( 847)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 847)			_hx_tmp = !(this->_hx___cacheBitmapRender);
            		}
            		else {
HXLINE( 847)			_hx_tmp = false;
            		}
HXDLIN( 847)		if (_hx_tmp) {
HXLINE( 849)			this->_hx___renderDOMClear(renderSession);
HXLINE( 850)			this->_hx___cacheBitmap->stage = this->stage;
HXLINE( 852)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderDOM,(void))

void DisplayObject_obj::_hx___renderDOMClear( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_865___renderDOMClear)
HXDLIN( 865)		::openfl::_internal::renderer::dom::DOMDisplayObject_obj::clear(hx::ObjectPtr<OBJ_>(this),renderSession);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderDOMClear,(void))

void DisplayObject_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_870___renderGL)
HXLINE( 872)		this->_hx___updateCacheBitmap(renderSession,false);
HXLINE( 874)		bool _hx_tmp;
HXDLIN( 874)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 874)			_hx_tmp = !(this->_hx___cacheBitmapRender);
            		}
            		else {
HXLINE( 874)			_hx_tmp = false;
            		}
HXDLIN( 874)		if (_hx_tmp) {
HXLINE( 876)			::openfl::_internal::renderer::opengl::GLBitmap_obj::render(this->_hx___cacheBitmap,renderSession);
            		}
            		else {
HXLINE( 880)			bool _hx_tmp1;
HXDLIN( 880)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE( 880)				_hx_tmp1 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE( 880)				_hx_tmp1 = false;
            			}
HXDLIN( 880)			if (!(_hx_tmp1)) {
HXLINE( 880)				bool _hx_tmp2;
HXDLIN( 880)				if (!(!(this->_hx___renderable))) {
HXLINE( 880)					_hx_tmp2 = (this->_hx___worldAlpha <= (int)0);
            				}
            				else {
HXLINE( 880)					_hx_tmp2 = true;
            				}
HXDLIN( 880)				if (!(_hx_tmp2)) {
HXLINE( 880)					bool _hx_tmp3;
HXDLIN( 880)					bool _hx_tmp4;
HXDLIN( 880)					bool _hx_tmp5;
HXDLIN( 880)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE( 880)						_hx_tmp5 = !(this->_hx___cacheBitmapRender);
            					}
            					else {
HXLINE( 880)						_hx_tmp5 = false;
            					}
HXDLIN( 880)					if (_hx_tmp5) {
HXLINE( 880)						_hx_tmp4 = (this->get_width() > (int)0);
            					}
            					else {
HXLINE( 880)						_hx_tmp4 = false;
            					}
HXDLIN( 880)					if (_hx_tmp4) {
HXLINE( 880)						_hx_tmp3 = (this->get_height() > (int)0);
            					}
            					else {
HXLINE( 880)						_hx_tmp3 = false;
            					}
HXDLIN( 880)					if (_hx_tmp3) {
HXLINE( 880)						renderSession->blendModeManager->setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 880)						renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 880)						 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXDLIN( 880)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXDLIN( 880)						Float _hx_tmp6 = this->get_width();
HXDLIN( 880)						rect->setTo((int)0,(int)0,_hx_tmp6,this->get_height());
HXDLIN( 880)						renderSession->maskManager->pushRect(rect,this->_hx___renderTransform);
HXDLIN( 880)						int color = this->opaqueBackground;
HXDLIN( 880)						gl->clearColor(((Float)((int)hx::UShr(color,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255),(int)1);
HXDLIN( 880)						gl->clear(gl->COLOR_BUFFER_BIT);
HXDLIN( 880)						renderSession->maskManager->popRect();
HXDLIN( 880)						renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 880)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN( 880)					if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 880)						bool _hx_tmp7;
HXDLIN( 880)						if (!(!(this->_hx___renderable))) {
HXLINE( 880)							_hx_tmp7 = (this->_hx___worldAlpha <= (int)0);
            						}
            						else {
HXLINE( 880)							_hx_tmp7 = true;
            						}
HXDLIN( 880)						if (!(_hx_tmp7)) {
HXLINE( 880)							 ::openfl::display::Graphics graphics = this->_hx___graphics;
HXDLIN( 880)							if (hx::IsNotNull( graphics )) {
HXLINE( 880)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,renderSession,this->_hx___renderTransform);
HXDLIN( 880)								 ::openfl::geom::Rectangle bounds = graphics->_hx___bounds;
HXDLIN( 880)								bool _hx_tmp8;
HXDLIN( 880)								if (hx::IsNotNull( graphics->_hx___bitmap )) {
HXLINE( 880)									_hx_tmp8 = graphics->_hx___visible;
            								}
            								else {
HXLINE( 880)									_hx_tmp8 = false;
            								}
HXDLIN( 880)								if (_hx_tmp8) {
HXLINE( 880)									 ::openfl::_internal::renderer::opengl::GLRenderer renderer = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(renderSession->renderer) );
HXDLIN( 880)									 ::lime::_backend::native::NativeGLRenderContext gl1 = renderSession->gl;
HXDLIN( 880)									renderSession->blendModeManager->setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 880)									renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 880)									 ::openfl::display::Shader shader = renderSession->filterManager->pushObject(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 880)									renderSession->shaderManager->setShader(shader);
HXDLIN( 880)									shader->get_data()->uImage0->input = graphics->_hx___bitmap;
HXDLIN( 880)									shader->get_data()->uImage0->smoothing = renderSession->allowSmoothing;
HXDLIN( 880)									shader->get_data()->uMatrix->value = renderer->getMatrix(graphics->_hx___worldTransform);
HXDLIN( 880)									bool useColorTransform = !(this->_hx___worldColorTransform->_hx___isDefault());
HXDLIN( 880)									if (hx::IsNull(  ::Dynamic( ::Dynamic(shader->get_data()->__Field(HX_("uColorTransform",de,6e,95,6e),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) )) {
HXLINE( 880)										 ::Dynamic(shader->get_data()->__Field(HX_("uColorTransform",de,6e,95,6e),hx::paccDynamic))->__SetField(HX_("value",71,7f,b8,31),::cpp::VirtualArray_obj::__new(0),hx::paccDynamic);
            									}
HXDLIN( 880)									 ::Dynamic( ::Dynamic(shader->get_data()->__Field(HX_("uColorTransform",de,6e,95,6e),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic))->__SetItem((int)0,useColorTransform);
HXDLIN( 880)									renderSession->shaderManager->updateShader(shader);
HXDLIN( 880)									int gl2 = gl1->ARRAY_BUFFER;
HXDLIN( 880)									gl1->bindBuffer(gl2,graphics->_hx___bitmap->getBuffer(gl1,this->_hx___worldAlpha,this->_hx___worldColorTransform));
HXDLIN( 880)									int _hx_tmp9 = shader->get_data()->aPosition->index;
HXDLIN( 880)									int gl3 = gl1->FLOAT;
HXDLIN( 880)									gl1->vertexAttribPointer(_hx_tmp9,(int)3,gl3,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
HXDLIN( 880)									int _hx_tmp10 = shader->get_data()->aTexCoord->index;
HXDLIN( 880)									int gl4 = gl1->FLOAT;
HXDLIN( 880)									gl1->vertexAttribPointer(_hx_tmp10,(int)2,gl4,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)12));
HXDLIN( 880)									int _hx_tmp11 = shader->get_data()->aAlpha->index;
HXDLIN( 880)									int gl5 = gl1->FLOAT;
HXDLIN( 880)									gl1->vertexAttribPointer(_hx_tmp11,(int)1,gl5,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)20));
HXDLIN( 880)									{
HXLINE( 880)										 ::Dynamic _hx_tmp12 =  ::Dynamic( ::Dynamic(shader->get_data()->__Field(HX_("aColorMultipliers",b0,43,d0,d8),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic));
HXDLIN( 880)										int gl6 = gl1->FLOAT;
HXDLIN( 880)										gl1->vertexAttribPointer(( (int)(_hx_tmp12) ),(int)4,gl6,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)24));
HXDLIN( 880)										 ::Dynamic _hx_tmp13 = ( ::Dynamic( ::Dynamic(shader->get_data()->__Field(HX_("aColorMultipliers",b0,43,d0,d8),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) + (int)1);
HXDLIN( 880)										int gl7 = gl1->FLOAT;
HXDLIN( 880)										gl1->vertexAttribPointer(( (int)(_hx_tmp13) ),(int)4,gl7,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)40));
HXDLIN( 880)										 ::Dynamic _hx_tmp14 = ( ::Dynamic( ::Dynamic(shader->get_data()->__Field(HX_("aColorMultipliers",b0,43,d0,d8),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) + (int)2);
HXDLIN( 880)										int gl8 = gl1->FLOAT;
HXDLIN( 880)										gl1->vertexAttribPointer(( (int)(_hx_tmp14) ),(int)4,gl8,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)56));
HXDLIN( 880)										 ::Dynamic _hx_tmp15 = ( ::Dynamic( ::Dynamic(shader->get_data()->__Field(HX_("aColorMultipliers",b0,43,d0,d8),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic)) + (int)3);
HXDLIN( 880)										int gl9 = gl1->FLOAT;
HXDLIN( 880)										gl1->vertexAttribPointer(( (int)(_hx_tmp15) ),(int)4,gl9,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)72));
HXDLIN( 880)										 ::Dynamic _hx_tmp16 =  ::Dynamic( ::Dynamic(shader->get_data()->__Field(HX_("aColorOffsets",5e,dc,bd,36),hx::paccDynamic))->__Field(HX_("index",12,9b,14,be),hx::paccDynamic));
HXDLIN( 880)										int gl10 = gl1->FLOAT;
HXDLIN( 880)										gl1->vertexAttribPointer(( (int)(_hx_tmp16) ),(int)4,gl10,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)88));
            									}
HXDLIN( 880)									gl1->drawArrays(gl1->TRIANGLE_STRIP,(int)0,(int)4);
HXDLIN( 880)									renderSession->filterManager->popObject(hx::ObjectPtr<OBJ_>(this));
HXDLIN( 880)									renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderGL,(void))

void DisplayObject_obj::_hx___renderGLMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_887___renderGLMask)
HXLINE( 889)		this->_hx___updateCacheBitmap(renderSession,false);
HXLINE( 891)		bool _hx_tmp;
HXDLIN( 891)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 891)			_hx_tmp = !(this->_hx___cacheBitmapRender);
            		}
            		else {
HXLINE( 891)			_hx_tmp = false;
            		}
HXDLIN( 891)		if (_hx_tmp) {
HXLINE( 893)			::openfl::_internal::renderer::opengl::GLBitmap_obj::renderMask(this->_hx___cacheBitmap,renderSession);
            		}
            		else {
HXLINE( 897)			bool _hx_tmp1;
HXDLIN( 897)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE( 897)				_hx_tmp1 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE( 897)				_hx_tmp1 = false;
            			}
HXDLIN( 897)			if (!(_hx_tmp1)) {
HXLINE( 897)				bool _hx_tmp2;
HXDLIN( 897)				bool _hx_tmp3;
HXDLIN( 897)				bool _hx_tmp4;
HXDLIN( 897)				if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE( 897)					_hx_tmp4 = !(this->_hx___cacheBitmapRender);
            				}
            				else {
HXLINE( 897)					_hx_tmp4 = false;
            				}
HXDLIN( 897)				if (_hx_tmp4) {
HXLINE( 897)					_hx_tmp3 = (this->get_width() > (int)0);
            				}
            				else {
HXLINE( 897)					_hx_tmp3 = false;
            				}
HXDLIN( 897)				if (_hx_tmp3) {
HXLINE( 897)					_hx_tmp2 = (this->get_height() > (int)0);
            				}
            				else {
HXLINE( 897)					_hx_tmp2 = false;
            				}
HXDLIN( 897)				if (_hx_tmp2) {
HXLINE( 897)					 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
            				}
HXDLIN( 897)				if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 897)					 ::openfl::display::Graphics graphics = this->_hx___graphics;
HXDLIN( 897)					if (hx::IsNotNull( graphics )) {
HXLINE( 897)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,renderSession,this->_hx___renderTransform);
HXDLIN( 897)						 ::openfl::geom::Rectangle bounds = graphics->_hx___bounds;
HXDLIN( 897)						if (hx::IsNotNull( graphics->_hx___bitmap )) {
HXLINE( 897)							 ::openfl::_internal::renderer::opengl::GLRenderer renderer = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(renderSession->renderer) );
HXDLIN( 897)							 ::lime::_backend::native::NativeGLRenderContext gl1 = renderSession->gl;
HXDLIN( 897)							 ::openfl::_internal::renderer::opengl::GLMaskShader shader = ::openfl::_internal::renderer::opengl::GLMaskManager_obj::maskShader;
HXDLIN( 897)							renderSession->shaderManager->setShader(shader);
HXDLIN( 897)							shader->get_data()->uImage0->input = graphics->_hx___bitmap;
HXDLIN( 897)							shader->get_data()->uImage0->smoothing = renderSession->allowSmoothing;
HXDLIN( 897)							shader->get_data()->uMatrix->value = renderer->getMatrix(graphics->_hx___worldTransform);
HXDLIN( 897)							renderSession->shaderManager->updateShader(shader);
HXDLIN( 897)							int gl2 = gl1->ARRAY_BUFFER;
HXDLIN( 897)							gl1->bindBuffer(gl2,graphics->_hx___bitmap->getBuffer(gl1,this->_hx___worldAlpha,this->_hx___worldColorTransform));
HXDLIN( 897)							int _hx_tmp5 = shader->get_data()->aPosition->index;
HXDLIN( 897)							int gl3 = gl1->FLOAT;
HXDLIN( 897)							gl1->vertexAttribPointer(_hx_tmp5,(int)3,gl3,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)0));
HXDLIN( 897)							int _hx_tmp6 = shader->get_data()->aTexCoord->index;
HXDLIN( 897)							int gl4 = gl1->FLOAT;
HXDLIN( 897)							gl1->vertexAttribPointer(_hx_tmp6,(int)2,gl4,false,(int)104,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt((int)12));
HXDLIN( 897)							gl1->drawArrays(gl1->TRIANGLE_STRIP,(int)0,(int)4);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderGLMask,(void))

void DisplayObject_obj::_hx___setParentRenderDirty(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_904___setParentRenderDirty)
HXLINE( 906)		 ::openfl::display::DisplayObject renderParent;
HXDLIN( 906)		if (hx::IsNotNull( this->_hx___renderParent )) {
HXLINE( 906)			renderParent = this->_hx___renderParent;
            		}
            		else {
HXLINE( 906)			renderParent = this->parent;
            		}
HXLINE( 907)		bool _hx_tmp;
HXDLIN( 907)		if (hx::IsNotNull( renderParent )) {
HXLINE( 907)			_hx_tmp = !(renderParent->_hx___renderDirty);
            		}
            		else {
HXLINE( 907)			_hx_tmp = false;
            		}
HXDLIN( 907)		if (_hx_tmp) {
HXLINE( 909)			renderParent->_hx___renderDirty = true;
HXLINE( 910)			renderParent->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setParentRenderDirty,(void))

void DisplayObject_obj::_hx___setRenderDirty(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_919___setRenderDirty)
HXDLIN( 919)		if (!(this->_hx___renderDirty)) {
HXLINE( 921)			this->_hx___renderDirty = true;
HXLINE( 922)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setRenderDirty,(void))

void DisplayObject_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_931___setStageReference)
HXDLIN( 931)		this->stage = stage;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___setStageReference,(void))

void DisplayObject_obj::_hx___setTransformDirty(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_938___setTransformDirty)
HXDLIN( 938)		if (!(this->_hx___transformDirty)) {
HXLINE( 940)			this->_hx___transformDirty = true;
HXLINE( 942)			this->_hx___setWorldTransformInvalid();
HXLINE( 943)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setTransformDirty,(void))

void DisplayObject_obj::_hx___setWorldTransformInvalid(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_952___setWorldTransformInvalid)
HXDLIN( 952)		this->_hx___worldTransformInvalid = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setWorldTransformInvalid,(void))

void DisplayObject_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_957___stopAllMovieClips)
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___stopAllMovieClips,(void))

void DisplayObject_obj::_hx___update(bool transformOnly,bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_964___update)
HXLINE( 966)		 ::openfl::display::DisplayObject renderParent;
HXDLIN( 966)		if (hx::IsNotNull( this->_hx___renderParent )) {
HXLINE( 966)			renderParent = this->_hx___renderParent;
            		}
            		else {
HXLINE( 966)			renderParent = this->parent;
            		}
HXLINE( 967)		bool _hx_tmp;
HXDLIN( 967)		if (this->_hx___isMask) {
HXLINE( 967)			_hx_tmp = hx::IsNull( renderParent );
            		}
            		else {
HXLINE( 967)			_hx_tmp = false;
            		}
HXDLIN( 967)		if (_hx_tmp) {
HXLINE( 967)			renderParent = this->_hx___maskTarget;
            		}
HXLINE( 968)		bool _hx_tmp1;
HXDLIN( 968)		bool _hx_tmp2;
HXDLIN( 968)		bool _hx_tmp3;
HXDLIN( 968)		bool _hx_tmp4;
HXDLIN( 968)		if (this->get_visible()) {
HXLINE( 968)			_hx_tmp4 = (this->_hx___scaleX != (int)0);
            		}
            		else {
HXLINE( 968)			_hx_tmp4 = false;
            		}
HXDLIN( 968)		if (_hx_tmp4) {
HXLINE( 968)			_hx_tmp3 = (this->_hx___scaleY != (int)0);
            		}
            		else {
HXLINE( 968)			_hx_tmp3 = false;
            		}
HXDLIN( 968)		if (_hx_tmp3) {
HXLINE( 968)			_hx_tmp2 = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 968)			_hx_tmp2 = false;
            		}
HXDLIN( 968)		if (_hx_tmp2) {
HXLINE( 968)			if (hx::IsNotNull( renderParent )) {
HXLINE( 968)				_hx_tmp1 = !(renderParent->_hx___isMask);
            			}
            			else {
HXLINE( 968)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 968)			_hx_tmp1 = false;
            		}
HXDLIN( 968)		this->_hx___renderable = _hx_tmp1;
HXLINE( 969)		this->_hx___updateTransforms(null());
HXLINE( 973)		this->_hx___transformDirty = false;
HXLINE( 977)		if (hx::IsNotNull( maskGraphics )) {
HXLINE( 979)			this->_hx___updateMask(maskGraphics);
            		}
HXLINE( 983)		if (!(transformOnly)) {
HXLINE(1001)			 ::openfl::geom::ColorTransform _hx_tmp5 = this->_hx___worldColorTransform;
HXDLIN(1001)			if (!(_hx_tmp5->_hx___equals(this->get_transform()->get_colorTransform(),null()))) {
HXLINE(1003)				this->_hx___worldColorTransform = this->get_transform()->get_colorTransform()->_hx___clone();
            			}
HXLINE(1007)			if (hx::IsNotNull( renderParent )) {
HXLINE(1021)				Float _hx_tmp6 = this->get_alpha();
HXDLIN(1021)				this->_hx___worldAlpha = (_hx_tmp6 * renderParent->_hx___worldAlpha);
HXLINE(1025)				this->_hx___worldColorTransform->_hx___combine(renderParent->_hx___worldColorTransform);
HXLINE(1027)				bool _hx_tmp7;
HXDLIN(1027)				if (hx::IsNotNull( this->_hx___blendMode )) {
HXLINE(1027)					_hx_tmp7 = hx::IsEq( this->_hx___blendMode,(int)10 );
            				}
            				else {
HXLINE(1027)					_hx_tmp7 = true;
            				}
HXDLIN(1027)				if (_hx_tmp7) {
HXLINE(1030)					this->_hx___worldBlendMode = renderParent->_hx___blendMode;
            				}
            				else {
HXLINE(1034)					this->_hx___worldBlendMode = this->_hx___blendMode;
            				}
            			}
            			else {
HXLINE(1040)				this->_hx___worldAlpha = this->get_alpha();
            			}
            		}
HXLINE(1061)		bool _hx_tmp8;
HXDLIN(1061)		if (updateChildren) {
HXLINE(1061)			_hx_tmp8 = hx::IsNotNull( this->get_mask() );
            		}
            		else {
HXLINE(1061)			_hx_tmp8 = false;
            		}
HXDLIN(1061)		if (_hx_tmp8) {
HXLINE(1063)			this->get_mask()->_hx___update(transformOnly,true,maskGraphics);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,_hx___update,(void))

void DisplayObject_obj::_hx___updateCacheBitmap( ::openfl::_internal::renderer::RenderSession renderSession,bool force){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1070___updateCacheBitmap)
HXLINE(1072)		if (this->_hx___cacheBitmapRender) {
HXLINE(1072)			return;
            		}
HXLINE(1074)		if (this->get_cacheAsBitmap()) {
HXLINE(1076)			 ::openfl::geom::Matrix matrix = null();
HXDLIN(1076)			 ::openfl::geom::Rectangle rect = null();
HXLINE(1079)			this->_hx___update(false,true,null());
HXLINE(1081)			bool needRender;
HXDLIN(1081)			bool needRender1;
HXDLIN(1081)			bool needRender2;
HXDLIN(1081)			if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1081)				if (this->_hx___renderDirty) {
HXLINE(1081)					bool needRender3;
HXDLIN(1081)					if (!(force)) {
HXLINE(1081)						if (hx::IsNotNull( this->_hx___children )) {
HXLINE(1081)							needRender3 = (this->_hx___children->length > (int)0);
            						}
            						else {
HXLINE(1081)							needRender3 = false;
            						}
            					}
            					else {
HXLINE(1081)						needRender3 = true;
            					}
HXDLIN(1081)					if (!(needRender3)) {
HXLINE(1081)						if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1081)							needRender2 = this->_hx___graphics->_hx___dirty;
            						}
            						else {
HXLINE(1081)							needRender2 = false;
            						}
            					}
            					else {
HXLINE(1081)						needRender2 = true;
            					}
            				}
            				else {
HXLINE(1081)					needRender2 = false;
            				}
            			}
            			else {
HXLINE(1081)				needRender2 = true;
            			}
HXDLIN(1081)			if (!(needRender2)) {
HXLINE(1081)				needRender1 = hx::IsNotEq( this->opaqueBackground,this->_hx___cacheBitmapBackground );
            			}
            			else {
HXLINE(1081)				needRender1 = true;
            			}
HXDLIN(1081)			if (!(needRender1)) {
HXLINE(1081)				needRender = !(this->_hx___cacheBitmapColorTransform->_hx___equals(this->_hx___worldColorTransform,null()));
            			}
            			else {
HXLINE(1081)				needRender = true;
            			}
HXLINE(1082)			bool updateTransform;
HXDLIN(1082)			if (!(needRender)) {
HXLINE(1082)				updateTransform = !(this->_hx___cacheBitmap->_hx___worldTransform->equals(this->_hx___worldTransform));
            			}
            			else {
HXLINE(1082)				updateTransform = true;
            			}
HXLINE(1083)			bool hasFilters;
HXDLIN(1083)			if (hx::IsNotNull( this->_hx___filters )) {
HXLINE(1083)				hasFilters = (this->_hx___filters->length > (int)0);
            			}
            			else {
HXLINE(1083)				hasFilters = false;
            			}
HXLINE(1085)			bool _hx_tmp;
HXDLIN(1085)			if (hasFilters) {
HXLINE(1085)				_hx_tmp = !(needRender);
            			}
            			else {
HXLINE(1085)				_hx_tmp = false;
            			}
HXDLIN(1085)			if (_hx_tmp) {
HXLINE(1087)				int _g = (int)0;
HXDLIN(1087)				::Array< ::Dynamic> _g1 = this->_hx___filters;
HXDLIN(1087)				while((_g < _g1->length)){
HXLINE(1087)					 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(1087)					_g = (_g + (int)1);
HXLINE(1089)					if (filter->_hx___renderDirty) {
HXLINE(1091)						needRender = true;
HXLINE(1092)						goto _hx_goto_53;
            					}
            				}
            				_hx_goto_53:;
            			}
HXLINE(1100)			int bitmapWidth = (int)0;
HXDLIN(1100)			int bitmapHeight = (int)0;
HXLINE(1102)			bool _hx_tmp1;
HXDLIN(1102)			if (!(updateTransform)) {
HXLINE(1102)				_hx_tmp1 = needRender;
            			}
            			else {
HXLINE(1102)				_hx_tmp1 = true;
            			}
HXDLIN(1102)			if (_hx_tmp1) {
HXLINE(1104)				matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE(1105)				rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1106)				matrix->identity();
HXLINE(1108)				this->_hx___getFilterBounds(rect,this->_hx___renderTransform);
HXLINE(1110)				bitmapWidth = ::Math_obj::ceil(rect->width);
HXLINE(1111)				bitmapHeight = ::Math_obj::ceil(rect->height);
HXLINE(1113)				bool _hx_tmp2;
HXDLIN(1113)				bool _hx_tmp3;
HXDLIN(1113)				if (!(needRender)) {
HXLINE(1113)					_hx_tmp3 = hx::IsNotNull( this->_hx___cacheBitmap );
            				}
            				else {
HXLINE(1113)					_hx_tmp3 = false;
            				}
HXDLIN(1113)				if (_hx_tmp3) {
HXLINE(1113)					if ((bitmapWidth == this->_hx___cacheBitmap->get_width())) {
HXLINE(1113)						_hx_tmp2 = (bitmapHeight != this->_hx___cacheBitmap->get_height());
            					}
            					else {
HXLINE(1113)						_hx_tmp2 = true;
            					}
            				}
            				else {
HXLINE(1113)					_hx_tmp2 = false;
            				}
HXDLIN(1113)				if (_hx_tmp2) {
HXLINE(1115)					needRender = true;
            				}
            			}
HXLINE(1122)			if (needRender) {
HXLINE(1124)				this->_hx___cacheBitmapBackground = this->opaqueBackground;
HXLINE(1125)				int color;
HXDLIN(1125)				if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE(1125)					color = ((int)(int)-16777216 | (int)this->opaqueBackground);
            				}
            				else {
HXLINE(1125)					color = (int)0;
            				}
HXLINE(1127)				bool _hx_tmp4;
HXDLIN(1127)				if ((rect->width >= ((Float)0.5))) {
HXLINE(1127)					_hx_tmp4 = (rect->height >= ((Float)0.5));
            				}
            				else {
HXLINE(1127)					_hx_tmp4 = false;
            				}
HXDLIN(1127)				if (_hx_tmp4) {
HXLINE(1129)					bool _hx_tmp5;
HXDLIN(1129)					bool _hx_tmp6;
HXDLIN(1129)					if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1129)						_hx_tmp6 = (bitmapWidth != this->_hx___cacheBitmap->get_width());
            					}
            					else {
HXLINE(1129)						_hx_tmp6 = true;
            					}
HXDLIN(1129)					if (!(_hx_tmp6)) {
HXLINE(1129)						_hx_tmp5 = (bitmapHeight != this->_hx___cacheBitmap->get_height());
            					}
            					else {
HXLINE(1129)						_hx_tmp5 = true;
            					}
HXDLIN(1129)					if (_hx_tmp5) {
HXLINE(1131)						this->_hx___cacheBitmapData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapWidth,bitmapHeight,true,color);
HXLINE(1135)						if (hx::IsNull( this->_hx___cacheBitmap )) {
HXLINE(1135)							this->_hx___cacheBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,null(),null(),null());
            						}
HXLINE(1136)						this->_hx___cacheBitmap->_hx___bitmapData = this->_hx___cacheBitmapData;
            					}
            					else {
HXLINE(1141)						this->_hx___cacheBitmapData->fillRect(this->_hx___cacheBitmapData->rect,color);
            					}
            				}
            				else {
HXLINE(1147)					this->_hx___cacheBitmap = null();
HXLINE(1148)					this->_hx___cacheBitmapData = null();
HXLINE(1149)					return;
            				}
            			}
HXLINE(1155)			bool _hx_tmp7;
HXDLIN(1155)			if (!(updateTransform)) {
HXLINE(1155)				_hx_tmp7 = needRender;
            			}
            			else {
HXLINE(1155)				_hx_tmp7 = true;
            			}
HXDLIN(1155)			if (_hx_tmp7) {
HXLINE(1157)				this->_hx___cacheBitmap->_hx___worldTransform->copyFrom(this->_hx___worldTransform);
HXLINE(1159)				this->_hx___cacheBitmap->_hx___renderTransform->identity();
HXLINE(1160)				this->_hx___cacheBitmap->_hx___renderTransform->tx = rect->x;
HXLINE(1161)				this->_hx___cacheBitmap->_hx___renderTransform->ty = rect->y;
HXLINE(1163)				matrix->concat(this->_hx___renderTransform);
HXLINE(1164)				 ::openfl::geom::Matrix matrix1 = matrix;
HXDLIN(1164)				matrix1->tx = (matrix1->tx - ::Math_obj::round(rect->x));
HXLINE(1165)				 ::openfl::geom::Matrix matrix2 = matrix;
HXDLIN(1165)				matrix2->ty = (matrix2->ty - ::Math_obj::round(rect->y));
            			}
HXLINE(1169)			this->_hx___cacheBitmap->smoothing = renderSession->allowSmoothing;
HXLINE(1170)			this->_hx___cacheBitmap->_hx___renderable = this->_hx___renderable;
HXLINE(1171)			this->_hx___cacheBitmap->_hx___worldAlpha = this->_hx___worldAlpha;
HXLINE(1172)			this->_hx___cacheBitmap->_hx___worldBlendMode = this->_hx___worldBlendMode;
HXLINE(1173)			this->_hx___cacheBitmap->_hx___scrollRect = this->_hx___scrollRect;
HXLINE(1175)			this->_hx___cacheBitmap->set_mask(this->_hx___mask);
HXLINE(1177)			if (needRender) {
HXLINE(1179)				this->_hx___cacheBitmapRender = true;
HXLINE(1181)				this->_hx___cacheBitmapData->_hx___draw(hx::ObjectPtr<OBJ_>(this),matrix,null(),null(),null(),renderSession->allowSmoothing);
HXLINE(1183)				if (hasFilters) {
HXLINE(1185)					bool needSecondBitmapData = false;
HXLINE(1186)					bool needCopyOfOriginal = false;
HXLINE(1188)					{
HXLINE(1188)						int _g2 = (int)0;
HXDLIN(1188)						::Array< ::Dynamic> _g11 = this->_hx___filters;
HXDLIN(1188)						while((_g2 < _g11->length)){
HXLINE(1188)							 ::openfl::filters::BitmapFilter filter1 = _g11->__get(_g2).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(1188)							_g2 = (_g2 + (int)1);
HXLINE(1189)							if (filter1->_hx___needSecondBitmapData) {
HXLINE(1190)								needSecondBitmapData = true;
            							}
HXLINE(1192)							if (filter1->_hx___preserveObject) {
HXLINE(1193)								needCopyOfOriginal = true;
            							}
            						}
            					}
HXLINE(1197)					 ::openfl::display::BitmapData bitmapData = this->_hx___cacheBitmapData;
HXLINE(1198)					 ::openfl::display::BitmapData bitmapData2 = null();
HXLINE(1199)					 ::openfl::display::BitmapData bitmapData3 = null();
HXLINE(1203)					if (needSecondBitmapData) {
HXLINE(1204)						bitmapData2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapData->width,bitmapData->height,true,(int)0);
            					}
            					else {
HXLINE(1206)						bitmapData2 = bitmapData;
            					}
HXLINE(1209)					if (needCopyOfOriginal) {
HXLINE(1210)						bitmapData3 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,bitmapData->width,bitmapData->height,true,(int)0);
            					}
HXLINE(1213)					 ::openfl::geom::Rectangle sourceRect = bitmapData->rect;
HXLINE(1214)					 ::openfl::geom::Point destPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1215)					 ::openfl::display::BitmapData cacheBitmap;
HXDLIN(1215)					 ::openfl::display::BitmapData lastBitmap;
HXLINE(1217)					{
HXLINE(1217)						int _g3 = (int)0;
HXDLIN(1217)						::Array< ::Dynamic> _g12 = this->_hx___filters;
HXDLIN(1217)						while((_g3 < _g12->length)){
HXLINE(1217)							 ::openfl::filters::BitmapFilter filter2 = _g12->__get(_g3).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN(1217)							_g3 = (_g3 + (int)1);
HXLINE(1219)							if (filter2->_hx___preserveObject) {
HXLINE(1220)								bitmapData3->copyPixels(bitmapData,bitmapData->rect,destPoint,null(),null(),null());
            							}
HXLINE(1223)							lastBitmap = filter2->_hx___applyFilter(bitmapData2,bitmapData,sourceRect,destPoint);
HXLINE(1225)							if (filter2->_hx___preserveObject) {
HXLINE(1226)								lastBitmap->draw(bitmapData3,null(),this->get_transform()->get_colorTransform(),null(),null(),null());
            							}
HXLINE(1228)							filter2->_hx___renderDirty = false;
HXLINE(1230)							bool _hx_tmp8;
HXDLIN(1230)							if (needSecondBitmapData) {
HXLINE(1230)								_hx_tmp8 = hx::IsEq( lastBitmap,bitmapData2 );
            							}
            							else {
HXLINE(1230)								_hx_tmp8 = false;
            							}
HXDLIN(1230)							if (_hx_tmp8) {
HXLINE(1232)								cacheBitmap = bitmapData;
HXLINE(1233)								bitmapData = bitmapData2;
HXLINE(1234)								bitmapData2 = cacheBitmap;
            							}
            						}
            					}
HXLINE(1240)					this->_hx___cacheBitmap->set_bitmapData(bitmapData);
            				}
HXLINE(1244)				this->_hx___cacheBitmapRender = false;
HXLINE(1246)				if (hx::IsNull( this->_hx___cacheBitmapColorTransform )) {
HXLINE(1246)					this->_hx___cacheBitmapColorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            				}
HXLINE(1247)				this->_hx___cacheBitmapColorTransform->_hx___copyFrom(this->_hx___worldColorTransform);
HXLINE(1249)				if (!(this->_hx___cacheBitmapColorTransform->_hx___isDefault())) {
HXLINE(1251)					this->_hx___cacheBitmapData->colorTransform(this->_hx___cacheBitmapData->rect,this->_hx___cacheBitmapColorTransform);
            				}
            			}
HXLINE(1257)			if (updateTransform) {
HXLINE(1259)				this->_hx___update(false,true,null());
HXLINE(1261)				::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
HXLINE(1262)				::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            			}
            		}
            		else {
HXLINE(1266)			if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1268)				if (hx::IsEq( renderSession->renderType,::lime::graphics::RendererType_obj::DOM_dyn() )) {
HXLINE(1270)					this->_hx___cacheBitmap->_hx___renderDOMClear(renderSession);
            				}
HXLINE(1274)				this->_hx___cacheBitmap = null();
HXLINE(1275)				this->_hx___cacheBitmapData = null();
HXLINE(1276)				this->_hx___cacheBitmapColorTransform = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___updateCacheBitmap,(void))

void DisplayObject_obj::_hx___updateChildren(bool transformOnly){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1283___updateChildren)
HXLINE(1285)		 ::openfl::display::DisplayObject renderParent;
HXDLIN(1285)		if (hx::IsNotNull( this->_hx___renderParent )) {
HXLINE(1285)			renderParent = this->_hx___renderParent;
            		}
            		else {
HXLINE(1285)			renderParent = this->parent;
            		}
HXLINE(1286)		bool _hx_tmp;
HXDLIN(1286)		bool _hx_tmp1;
HXDLIN(1286)		bool _hx_tmp2;
HXDLIN(1286)		bool _hx_tmp3;
HXDLIN(1286)		if (this->get_visible()) {
HXLINE(1286)			_hx_tmp3 = (this->_hx___scaleX != (int)0);
            		}
            		else {
HXLINE(1286)			_hx_tmp3 = false;
            		}
HXDLIN(1286)		if (_hx_tmp3) {
HXLINE(1286)			_hx_tmp2 = (this->_hx___scaleY != (int)0);
            		}
            		else {
HXLINE(1286)			_hx_tmp2 = false;
            		}
HXDLIN(1286)		if (_hx_tmp2) {
HXLINE(1286)			_hx_tmp1 = !(this->_hx___isMask);
            		}
            		else {
HXLINE(1286)			_hx_tmp1 = false;
            		}
HXDLIN(1286)		if (_hx_tmp1) {
HXLINE(1286)			if (hx::IsNotNull( renderParent )) {
HXLINE(1286)				_hx_tmp = !(renderParent->_hx___isMask);
            			}
            			else {
HXLINE(1286)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1286)			_hx_tmp = false;
            		}
HXDLIN(1286)		this->_hx___renderable = _hx_tmp;
HXLINE(1287)		this->_hx___worldAlpha = this->get_alpha();
HXLINE(1288)		this->_hx___worldBlendMode = this->get_blendMode();
HXLINE(1290)		if (this->_hx___transformDirty) {
HXLINE(1292)			this->_hx___transformDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateChildren,(void))

void DisplayObject_obj::_hx___updateMask( ::openfl::display::Graphics maskGraphics){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1301___updateMask)
HXDLIN(1301)		if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE(1303)			maskGraphics->_hx___commands->overrideMatrix(this->_hx___worldTransform);
HXLINE(1304)			maskGraphics->_hx___commands->append(this->_hx___graphics->_hx___commands);
HXLINE(1305)			maskGraphics->set___dirty(true);
HXLINE(1306)			maskGraphics->_hx___visible = true;
HXLINE(1308)			if (hx::IsNull( maskGraphics->_hx___bounds )) {
HXLINE(1310)				maskGraphics->_hx___bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE(1314)			this->_hx___graphics->_hx___getBounds(maskGraphics->_hx___bounds,::openfl::geom::Matrix_obj::_hx___identity);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateMask,(void))

void DisplayObject_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1321___updateTransforms)
HXLINE(1323)		bool overrided = hx::IsNotNull( overrideTransform );
HXLINE(1324)		 ::openfl::geom::Matrix local;
HXDLIN(1324)		if (overrided) {
HXLINE(1324)			local = overrideTransform;
            		}
            		else {
HXLINE(1324)			local = this->_hx___transform;
            		}
HXLINE(1326)		if (hx::IsNull( this->_hx___worldTransform )) {
HXLINE(1328)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(1332)		if (hx::IsNull( this->_hx___renderTransform )) {
HXLINE(1334)			this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(1338)		 ::openfl::display::DisplayObject renderParent;
HXDLIN(1338)		if (hx::IsNotNull( this->_hx___renderParent )) {
HXLINE(1338)			renderParent = this->_hx___renderParent;
            		}
            		else {
HXLINE(1338)			renderParent = this->parent;
            		}
HXLINE(1339)		 ::openfl::geom::Matrix parentTransform;
HXLINE(1341)		bool _hx_tmp;
HXDLIN(1341)		if (!(overrided)) {
HXLINE(1341)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE(1341)			_hx_tmp = false;
            		}
HXDLIN(1341)		if (_hx_tmp) {
HXLINE(1343)			parentTransform = this->parent->_hx___worldTransform;
HXLINE(1345)			Float _hx_tmp1 = (local->a * parentTransform->a);
HXDLIN(1345)			this->_hx___worldTransform->a = (_hx_tmp1 + (local->b * parentTransform->c));
HXLINE(1346)			Float _hx_tmp2 = (local->a * parentTransform->b);
HXDLIN(1346)			this->_hx___worldTransform->b = (_hx_tmp2 + (local->b * parentTransform->d));
HXLINE(1347)			Float _hx_tmp3 = (local->c * parentTransform->a);
HXDLIN(1347)			this->_hx___worldTransform->c = (_hx_tmp3 + (local->d * parentTransform->c));
HXLINE(1348)			Float _hx_tmp4 = (local->c * parentTransform->b);
HXDLIN(1348)			this->_hx___worldTransform->d = (_hx_tmp4 + (local->d * parentTransform->d));
HXLINE(1349)			Float _hx_tmp5 = (local->tx * parentTransform->a);
HXDLIN(1349)			this->_hx___worldTransform->tx = ((_hx_tmp5 + (local->ty * parentTransform->c)) + parentTransform->tx);
HXLINE(1350)			Float _hx_tmp6 = (local->tx * parentTransform->b);
HXDLIN(1350)			this->_hx___worldTransform->ty = ((_hx_tmp6 + (local->ty * parentTransform->d)) + parentTransform->ty);
            		}
            		else {
HXLINE(1354)			this->_hx___worldTransform->copyFrom(local);
            		}
HXLINE(1358)		bool _hx_tmp7;
HXDLIN(1358)		if (!(overrided)) {
HXLINE(1358)			_hx_tmp7 = hx::IsNotNull( renderParent );
            		}
            		else {
HXLINE(1358)			_hx_tmp7 = false;
            		}
HXDLIN(1358)		if (_hx_tmp7) {
HXLINE(1360)			parentTransform = renderParent->_hx___renderTransform;
HXLINE(1362)			Float _hx_tmp8 = (local->a * parentTransform->a);
HXDLIN(1362)			this->_hx___renderTransform->a = (_hx_tmp8 + (local->b * parentTransform->c));
HXLINE(1363)			Float _hx_tmp9 = (local->a * parentTransform->b);
HXDLIN(1363)			this->_hx___renderTransform->b = (_hx_tmp9 + (local->b * parentTransform->d));
HXLINE(1364)			Float _hx_tmp10 = (local->c * parentTransform->a);
HXDLIN(1364)			this->_hx___renderTransform->c = (_hx_tmp10 + (local->d * parentTransform->c));
HXLINE(1365)			Float _hx_tmp11 = (local->c * parentTransform->b);
HXDLIN(1365)			this->_hx___renderTransform->d = (_hx_tmp11 + (local->d * parentTransform->d));
HXLINE(1366)			Float _hx_tmp12 = (local->tx * parentTransform->a);
HXDLIN(1366)			this->_hx___renderTransform->tx = ((_hx_tmp12 + (local->ty * parentTransform->c)) + parentTransform->tx);
HXLINE(1367)			Float _hx_tmp13 = (local->tx * parentTransform->b);
HXDLIN(1367)			this->_hx___renderTransform->ty = ((_hx_tmp13 + (local->ty * parentTransform->d)) + parentTransform->ty);
            		}
            		else {
HXLINE(1371)			this->_hx___renderTransform->copyFrom(local);
            		}
HXLINE(1375)		if (hx::IsNotNull( this->_hx___scrollRect )) {
HXLINE(1377)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1377)			Float px = -(this->_hx___scrollRect->x);
HXDLIN(1377)			Float py = -(this->_hx___scrollRect->y);
HXDLIN(1377)			Float _hx_tmp14 = (px * _this->a);
HXDLIN(1377)			_this->tx = ((_hx_tmp14 + (py * _this->c)) + _this->tx);
HXDLIN(1377)			Float _hx_tmp15 = (px * _this->b);
HXDLIN(1377)			_this->ty = ((_hx_tmp15 + (py * _this->d)) + _this->ty);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateTransforms,(void))

Float DisplayObject_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1393_get_alpha)
HXDLIN(1393)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_alpha,return )

Float DisplayObject_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1398_set_alpha)
HXLINE(1400)		if ((value > ((Float)1.0))) {
HXLINE(1400)			value = ((Float)1.0);
            		}
HXLINE(1401)		if ((value != this->_hx___alpha)) {
HXLINE(1401)			if (!(this->_hx___renderDirty)) {
HXLINE(1401)				this->_hx___renderDirty = true;
HXDLIN(1401)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1402)		return (this->_hx___alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_alpha,return )

 ::Dynamic DisplayObject_obj::get_blendMode(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1409_get_blendMode)
HXDLIN(1409)		return this->_hx___blendMode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_blendMode,return )

 ::Dynamic DisplayObject_obj::set_blendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1414_set_blendMode)
HXLINE(1416)		if (hx::IsNull( value )) {
HXLINE(1416)			value = (int)10;
            		}
HXLINE(1417)		if (hx::IsNotEq( value,this->_hx___blendMode )) {
HXLINE(1417)			if (!(this->_hx___renderDirty)) {
HXLINE(1417)				this->_hx___renderDirty = true;
HXDLIN(1417)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1418)		return (this->_hx___blendMode = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_blendMode,return )

bool DisplayObject_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1425_get_cacheAsBitmap)
HXDLIN(1425)		if (hx::IsNull( this->_hx___filters )) {
HXDLIN(1425)			return this->_hx___cacheAsBitmap;
            		}
            		else {
HXDLIN(1425)			return true;
            		}
HXDLIN(1425)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmap,return )

bool DisplayObject_obj::set_cacheAsBitmap(bool value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1430_set_cacheAsBitmap)
HXLINE(1432)		if (!(this->_hx___renderDirty)) {
HXLINE(1432)			this->_hx___renderDirty = true;
HXDLIN(1432)			this->_hx___setParentRenderDirty();
            		}
HXLINE(1433)		return (this->_hx___cacheAsBitmap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmap,return )

 ::openfl::geom::Matrix DisplayObject_obj::get_cacheAsBitmapMatrix(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1440_get_cacheAsBitmapMatrix)
HXDLIN(1440)		return this->_hx___cacheAsBitmapMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmapMatrix,return )

 ::openfl::geom::Matrix DisplayObject_obj::set_cacheAsBitmapMatrix( ::openfl::geom::Matrix value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1445_set_cacheAsBitmapMatrix)
HXLINE(1447)		if (!(this->_hx___renderDirty)) {
HXLINE(1447)			this->_hx___renderDirty = true;
HXDLIN(1447)			this->_hx___setParentRenderDirty();
            		}
HXLINE(1448)		return (this->_hx___cacheAsBitmapMatrix = value->clone());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmapMatrix,return )

::Array< ::Dynamic> DisplayObject_obj::get_filters(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1455_get_filters)
HXDLIN(1455)		if (hx::IsNull( this->_hx___filters )) {
HXLINE(1457)			return ::Array_obj< ::Dynamic>::__new();
            		}
            		else {
HXLINE(1461)			return this->_hx___filters->copy();
            		}
HXLINE(1455)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_filters,return )

::Array< ::Dynamic> DisplayObject_obj::set_filters(::Array< ::Dynamic> value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1468_set_filters)
HXLINE(1470)		bool _hx_tmp;
HXDLIN(1470)		if (hx::IsNotNull( value )) {
HXLINE(1470)			_hx_tmp = (value->length > (int)0);
            		}
            		else {
HXLINE(1470)			_hx_tmp = false;
            		}
HXDLIN(1470)		if (_hx_tmp) {
HXLINE(1472)			this->_hx___filters = value;
            		}
            		else {
HXLINE(1477)			this->_hx___filters = null();
            		}
HXLINE(1482)		if (!(this->_hx___renderDirty)) {
HXLINE(1482)			this->_hx___renderDirty = true;
HXDLIN(1482)			this->_hx___setParentRenderDirty();
            		}
HXLINE(1484)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_filters,return )

Float DisplayObject_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1489_get_height)
HXLINE(1491)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1492)		this->_hx___getLocalBounds(rect);
HXLINE(1493)		Float height = rect->height;
HXLINE(1494)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(1495)		return height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_height,return )

Float DisplayObject_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1500_set_height)
HXLINE(1502)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1503)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE(1504)		matrix->identity();
HXLINE(1506)		this->_hx___getBounds(rect,matrix);
HXLINE(1508)		if ((value != rect->height)) {
HXLINE(1510)			this->set_scaleY(((Float)value / (Float)rect->height));
            		}
            		else {
HXLINE(1514)			this->set_scaleY((int)1);
            		}
HXLINE(1518)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(1519)		::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
HXLINE(1521)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_height,return )

 ::openfl::display::LoaderInfo DisplayObject_obj::get_loaderInfo(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1526_get_loaderInfo)
HXLINE(1528)		if (hx::IsNotNull( this->stage )) {
HXLINE(1530)			return ::openfl::_internal::Lib_obj::current->_hx___loaderInfo;
            		}
HXLINE(1534)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_loaderInfo,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_mask(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1541_get_mask)
HXDLIN(1541)		return this->_hx___mask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mask,return )

 ::openfl::display::DisplayObject DisplayObject_obj::set_mask( ::openfl::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1546_set_mask)
HXLINE(1548)		if (hx::IsEq( value,this->_hx___mask )) {
HXLINE(1550)			return value;
            		}
HXLINE(1554)		if (hx::IsNotEq( value,this->_hx___mask )) {
HXLINE(1556)			this->_hx___setTransformDirty();
HXLINE(1557)			if (!(this->_hx___renderDirty)) {
HXLINE(1557)				this->_hx___renderDirty = true;
HXDLIN(1557)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1561)		if (hx::IsNotNull( this->_hx___mask )) {
HXLINE(1563)			this->_hx___mask->_hx___isMask = false;
HXLINE(1564)			this->_hx___mask->_hx___maskTarget = null();
HXLINE(1565)			this->_hx___mask->_hx___setTransformDirty();
HXLINE(1566)			{
HXLINE(1566)				 ::openfl::display::DisplayObject _this = this->_hx___mask;
HXDLIN(1566)				if (!(_this->_hx___renderDirty)) {
HXLINE(1566)					_this->_hx___renderDirty = true;
HXDLIN(1566)					_this->_hx___setParentRenderDirty();
            				}
            			}
            		}
HXLINE(1570)		if (hx::IsNotNull( value )) {
HXLINE(1572)			value->_hx___isMask = true;
HXLINE(1573)			value->_hx___maskTarget = hx::ObjectPtr<OBJ_>(this);
HXLINE(1574)			value->_hx___setWorldTransformInvalid();
            		}
HXLINE(1578)		bool _hx_tmp;
HXDLIN(1578)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE(1578)			_hx_tmp = hx::IsNotEq( this->_hx___cacheBitmap->get_mask(),value );
            		}
            		else {
HXLINE(1578)			_hx_tmp = false;
            		}
HXDLIN(1578)		if (_hx_tmp) {
HXLINE(1580)			this->_hx___cacheBitmap->set_mask(value);
            		}
HXLINE(1584)		return (this->_hx___mask = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_mask,return )

Float DisplayObject_obj::get_mouseX(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1589_get_mouseX)
HXLINE(1591)		Float mouseX;
HXDLIN(1591)		if (hx::IsNotNull( this->stage )) {
HXLINE(1591)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(1591)			mouseX = ::openfl::_internal::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(1592)		Float mouseY;
HXDLIN(1592)		if (hx::IsNotNull( this->stage )) {
HXLINE(1592)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(1592)			mouseY = ::openfl::_internal::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(1594)		 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN(1594)		Float norm = (_this->a * _this->d);
HXDLIN(1594)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1594)		if ((norm1 == (int)0)) {
HXLINE(1594)			return -(_this->tx);
            		}
            		else {
HXLINE(1594)			Float _this1 = _this->c;
HXDLIN(1594)			Float _hx_tmp = (_this1 * (_this->ty - mouseY));
HXDLIN(1594)			Float _this2 = _this->d;
HXDLIN(1594)			return (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this2 * (mouseX - _this->tx))));
            		}
HXDLIN(1594)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseX,return )

Float DisplayObject_obj::get_mouseY(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1599_get_mouseY)
HXLINE(1601)		Float mouseX;
HXDLIN(1601)		if (hx::IsNotNull( this->stage )) {
HXLINE(1601)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(1601)			mouseX = ::openfl::_internal::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(1602)		Float mouseY;
HXDLIN(1602)		if (hx::IsNotNull( this->stage )) {
HXLINE(1602)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(1602)			mouseY = ::openfl::_internal::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(1604)		 ::openfl::geom::Matrix _this = this->_hx___getRenderTransform();
HXDLIN(1604)		Float norm = (_this->a * _this->d);
HXDLIN(1604)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1604)		if ((norm1 == (int)0)) {
HXLINE(1604)			return -(_this->ty);
            		}
            		else {
HXLINE(1604)			Float _this1 = _this->a;
HXDLIN(1604)			Float _hx_tmp = (_this1 * (mouseY - _this->ty));
HXDLIN(1604)			Float _this2 = _this->b;
HXDLIN(1604)			return (((Float)((Float)1.0) / (Float)norm1) * (_hx_tmp + (_this2 * (_this->tx - mouseX))));
            		}
HXDLIN(1604)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseY,return )

::String DisplayObject_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1611_get_name)
HXDLIN(1611)		return this->_hx___name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_name,return )

::String DisplayObject_obj::set_name(::String value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1618_set_name)
HXDLIN(1618)		return (this->_hx___name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_name,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1623_get_root)
HXLINE(1625)		if (hx::IsNotNull( this->stage )) {
HXLINE(1627)			return ::openfl::_internal::Lib_obj::current;
            		}
HXLINE(1631)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_root,return )

Float DisplayObject_obj::get_rotation(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1638_get_rotation)
HXDLIN(1638)		return this->_hx___rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_rotation,return )

Float DisplayObject_obj::set_rotation(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1643_set_rotation)
HXLINE(1645)		if ((value != this->_hx___rotation)) {
HXLINE(1647)			this->_hx___rotation = value;
HXLINE(1648)			Float radians = this->_hx___rotation;
HXDLIN(1648)			Float radians1 = (radians * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE(1649)			this->_hx___rotationSine = ::Math_obj::sin(radians1);
HXLINE(1650)			this->_hx___rotationCosine = ::Math_obj::cos(radians1);
HXLINE(1652)			this->_hx___transform->a = (this->_hx___rotationCosine * this->_hx___scaleX);
HXLINE(1653)			this->_hx___transform->b = (this->_hx___rotationSine * this->_hx___scaleX);
HXLINE(1654)			this->_hx___transform->c = (-(this->_hx___rotationSine) * this->_hx___scaleY);
HXLINE(1655)			this->_hx___transform->d = (this->_hx___rotationCosine * this->_hx___scaleY);
HXLINE(1657)			this->_hx___setTransformDirty();
            		}
HXLINE(1661)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_rotation,return )

Float DisplayObject_obj::get_scaleX(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1668_get_scaleX)
HXDLIN(1668)		return this->_hx___scaleX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleX,return )

Float DisplayObject_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1673_set_scaleX)
HXLINE(1675)		if ((value != this->_hx___scaleX)) {
HXLINE(1677)			this->_hx___scaleX = value;
HXLINE(1679)			if ((this->_hx___transform->b == (int)0)) {
HXLINE(1681)				if ((value != this->_hx___transform->a)) {
HXLINE(1681)					this->_hx___setTransformDirty();
            				}
HXLINE(1682)				this->_hx___transform->a = value;
            			}
            			else {
HXLINE(1686)				Float a = (this->_hx___rotationCosine * value);
HXLINE(1687)				Float b = (this->_hx___rotationSine * value);
HXLINE(1689)				bool _hx_tmp;
HXDLIN(1689)				if ((this->_hx___transform->a == a)) {
HXLINE(1689)					_hx_tmp = (this->_hx___transform->b != b);
            				}
            				else {
HXLINE(1689)					_hx_tmp = true;
            				}
HXDLIN(1689)				if (_hx_tmp) {
HXLINE(1691)					this->_hx___setTransformDirty();
            				}
HXLINE(1695)				this->_hx___transform->a = a;
HXLINE(1696)				this->_hx___transform->b = b;
            			}
            		}
HXLINE(1702)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleX,return )

Float DisplayObject_obj::get_scaleY(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1709_get_scaleY)
HXDLIN(1709)		return this->_hx___scaleY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleY,return )

Float DisplayObject_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1714_set_scaleY)
HXLINE(1716)		if ((value != this->_hx___scaleY)) {
HXLINE(1718)			this->_hx___scaleY = value;
HXLINE(1720)			if ((this->_hx___transform->c == (int)0)) {
HXLINE(1722)				if ((value != this->_hx___transform->d)) {
HXLINE(1722)					this->_hx___setTransformDirty();
            				}
HXLINE(1723)				this->_hx___transform->d = value;
            			}
            			else {
HXLINE(1727)				Float c = (-(this->_hx___rotationSine) * value);
HXLINE(1728)				Float d = (this->_hx___rotationCosine * value);
HXLINE(1730)				bool _hx_tmp;
HXDLIN(1730)				if ((this->_hx___transform->d == d)) {
HXLINE(1730)					_hx_tmp = (this->_hx___transform->c != c);
            				}
            				else {
HXLINE(1730)					_hx_tmp = true;
            				}
HXDLIN(1730)				if (_hx_tmp) {
HXLINE(1732)					this->_hx___setTransformDirty();
            				}
HXLINE(1736)				this->_hx___transform->c = c;
HXLINE(1737)				this->_hx___transform->d = d;
            			}
            		}
HXLINE(1743)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleY,return )

 ::openfl::geom::Rectangle DisplayObject_obj::get_scrollRect(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1748_get_scrollRect)
HXLINE(1750)		if (hx::IsNull( this->_hx___scrollRect )) {
HXLINE(1752)			return null();
            		}
HXLINE(1756)		return this->_hx___scrollRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scrollRect,return )

 ::openfl::geom::Rectangle DisplayObject_obj::set_scrollRect( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1761_set_scrollRect)
HXLINE(1763)		if (hx::IsNotEq( value,this->_hx___scrollRect )) {
HXLINE(1765)			this->_hx___setTransformDirty();
            		}
HXLINE(1775)		return (this->_hx___scrollRect = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scrollRect,return )

 ::openfl::geom::Transform DisplayObject_obj::get_transform(){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1780_get_transform)
HXLINE(1782)		if (hx::IsNull( this->_hx___objectTransform )) {
HXLINE(1784)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1788)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_transform,return )

 ::openfl::geom::Transform DisplayObject_obj::set_transform( ::openfl::geom::Transform value){
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_1793_set_transform)
HXLINE(1795)		if (hx::IsNull( value )) {
HXLINE(1797)			HX_STACK_DO_THROW( ::openfl::errors::TypeError_obj::__alloc( HX_CTX ,HX_("Parameter transform must be non-null.",56,12,fe,6e)));
            		}
HXLINE(1801)		if (hx::IsNull( this->_hx___objectTransform )) {
HXLINE(1803)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1807)		this->_hx___setTransformDirty();
HXLINE(1808)		 ::openfl::geom::Transform _hx_tmp = this->_hx___objectTransform;
HXDLIN(1808)		_hx_tmp->set_matrix(value->get_matrix());
HXLINE(1809)		 ::openfl::geom::Transform _hx_tmp1 = this->_hx___objectTransform;
HXDLIN(1809)		_hx_tmp1->set_colorTransform(value->get_colorTransform()->_hx___clone());
HXLINE(1811)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_transform,return )

bool DisplayObject_obj::get_visible(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1818_get_visible)
HXDLIN(1818)		return this->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_visible,return )

bool DisplayObject_obj::set_visible(bool value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1823_set_visible)
HXLINE(1825)		if ((value != this->_hx___visible)) {
HXLINE(1825)			if (!(this->_hx___renderDirty)) {
HXLINE(1825)				this->_hx___renderDirty = true;
HXDLIN(1825)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1826)		return (this->_hx___visible = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_visible,return )

Float DisplayObject_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1831_get_width)
HXLINE(1833)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1834)		this->_hx___getLocalBounds(rect);
HXLINE(1835)		Float width = rect->width;
HXLINE(1836)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(1837)		return width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_width,return )

Float DisplayObject_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1842_set_width)
HXLINE(1844)		 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1845)		 ::openfl::geom::Matrix matrix = ::openfl::geom::Matrix_obj::_hx___pool->get();
HXLINE(1846)		matrix->identity();
HXLINE(1848)		this->_hx___getBounds(rect,matrix);
HXLINE(1850)		if ((value != rect->width)) {
HXLINE(1852)			this->set_scaleX(((Float)value / (Float)rect->width));
            		}
            		else {
HXLINE(1856)			this->set_scaleX((int)1);
            		}
HXLINE(1860)		::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
HXLINE(1861)		::openfl::geom::Matrix_obj::_hx___pool->release(matrix);
HXLINE(1863)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_width,return )

Float DisplayObject_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1870_get_x)
HXDLIN(1870)		return this->_hx___transform->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_x,return )

Float DisplayObject_obj::set_x(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1875_set_x)
HXLINE(1877)		if ((value != this->_hx___transform->tx)) {
HXLINE(1877)			this->_hx___setTransformDirty();
            		}
HXLINE(1878)		return (this->_hx___transform->tx = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_x,return )

Float DisplayObject_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1885_get_y)
HXDLIN(1885)		return this->_hx___transform->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_y,return )

Float DisplayObject_obj::set_y(Float value){
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_1890_set_y)
HXLINE(1892)		if ((value != this->_hx___transform->ty)) {
HXLINE(1892)			this->_hx___setTransformDirty();
            		}
HXLINE(1893)		return (this->_hx___transform->ty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_y,return )

 ::haxe::ds::StringMap DisplayObject_obj::_hx___broadcastEvents;

 ::openfl::display::Stage DisplayObject_obj::_hx___initStage;

int DisplayObject_obj::_hx___instanceCount;

bool DisplayObject_obj::_hx___supportDOM;

 ::lime::utils::ObjectPool_openfl_Vector_openfl_display_DisplayObject DisplayObject_obj::_hx___tempStack;


hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__new() {
	hx::ObjectPtr< DisplayObject_obj > __this = new DisplayObject_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObject_obj *__this = (DisplayObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObject_obj), true, "openfl.display.DisplayObject"));
	*(void **)__this = DisplayObject_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObject_obj::DisplayObject_obj()
{
}

void DisplayObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObject);
	HX_MARK_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_MARK_MEMBER_NAME(stage,"stage");
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmap,"__cacheBitmap");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapBackground,"__cacheBitmapBackground");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapColorTransform,"__cacheBitmapColorTransform");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapData,"__cacheBitmapData");
	HX_MARK_MEMBER_NAME(_hx___cacheBitmapRender,"__cacheBitmapRender");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___children,"__children");
	HX_MARK_MEMBER_NAME(_hx___filters,"__filters");
	HX_MARK_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_MARK_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___loaderInfo,"__loaderInfo");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___maskTarget,"__maskTarget");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	HX_MARK_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_MARK_MEMBER_NAME(_hx___renderParent,"__renderParent");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___renderTransformCache,"__renderTransformCache");
	HX_MARK_MEMBER_NAME(_hx___renderTransformChanged,"__renderTransformChanged");
	HX_MARK_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_MARK_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_MARK_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_MARK_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_MARK_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_MARK_MEMBER_NAME(_hx___worldBlendMode,"__worldBlendMode");
	HX_MARK_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_MARK_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_MARK_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_MARK_MEMBER_NAME(_hx___worldTransformInvalid,"__worldTransformInvalid");
	HX_MARK_MEMBER_NAME(_hx___worldZ,"__worldZ");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_VISIT_MEMBER_NAME(stage,"stage");
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmap,"__cacheBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapBackground,"__cacheBitmapBackground");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapColorTransform,"__cacheBitmapColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapData,"__cacheBitmapData");
	HX_VISIT_MEMBER_NAME(_hx___cacheBitmapRender,"__cacheBitmapRender");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___children,"__children");
	HX_VISIT_MEMBER_NAME(_hx___filters,"__filters");
	HX_VISIT_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_VISIT_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___loaderInfo,"__loaderInfo");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___maskTarget,"__maskTarget");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	HX_VISIT_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_VISIT_MEMBER_NAME(_hx___renderParent,"__renderParent");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___renderTransformCache,"__renderTransformCache");
	HX_VISIT_MEMBER_NAME(_hx___renderTransformChanged,"__renderTransformChanged");
	HX_VISIT_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_VISIT_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_VISIT_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_VISIT_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_VISIT_MEMBER_NAME(_hx___scaleY,"__scaleY");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldBlendMode,"__worldBlendMode");
	HX_VISIT_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_VISIT_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_VISIT_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldTransformInvalid,"__worldTransformInvalid");
	HX_VISIT_MEMBER_NAME(_hx___worldZ,"__worldZ");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_x() ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_y() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mask() ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_name() ); }
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_root() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		if (HX_FIELD_EQ(inName,"stage") ) { return hx::Val( stage ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseX() ); }
		if (HX_FIELD_EQ(inName,"mouseY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseY() ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleX() ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleY() ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask ); }
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_filters() ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_visible() ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha ); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo ); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return hx::Val( getRect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotation() ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask ); }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { return hx::Val( _hx___scaleX ); }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { return hx::Val( _hx___scaleY ); }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { return hx::Val( _hx___worldZ ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mask") ) { return hx::Val( get_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mask") ) { return hx::Val( set_mask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blendMode() ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transform() ); }
		if (HX_FIELD_EQ(inName,"__filters") ) { return hx::Val( _hx___filters ); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__cleanup") ) { return hx::Val( _hx___cleanup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_loaderInfo() ); }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { return hx::Val( scale9Grid ); }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollRect() ); }
		if (HX_FIELD_EQ(inName,"__children") ) { return hx::Val( _hx___children ); }
		if (HX_FIELD_EQ(inName,"__graphics") ) { return hx::Val( _hx___graphics ); }
		if (HX_FIELD_EQ(inName,"__rotation") ) { return hx::Val( _hx___rotation ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode ); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform ); }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { return hx::Val( _hx___worldClip ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_filters") ) { return hx::Val( get_filters_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return hx::Val( set_filters_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return hx::Val( get_visible_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__loaderInfo") ) { return hx::Val( _hx___loaderInfo ); }
		if (HX_FIELD_EQ(inName,"__maskTarget") ) { return hx::Val( _hx___maskTarget ); }
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable ); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect ); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha ); }
		if (HX_FIELD_EQ(inName,"hitTestPoint") ) { return hx::Val( hitTestPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateMask") ) { return hx::Val( _hx___updateMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cacheAsBitmap() ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmap") ) { return hx::Val( _hx___cacheBitmap ); }
		if (HX_FIELD_EQ(inName,"__interactive") ) { return hx::Val( _hx___interactive ); }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { return hx::Val( _hx___renderDirty ); }
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return hx::Val( dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return hx::Val( globalToLocal_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTestObject") ) { return hx::Val( hitTestObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blendMode") ) { return hx::Val( get_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return hx::Val( set_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_transform") ) { return hx::Val( get_transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderParent") ) { return hx::Val( _hx___renderParent ); }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { return hx::Val( _hx___rotationSine ); }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { return hx::Val( _hx___worldVisible ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_loaderInfo") ) { return hx::Val( get_loaderInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollRect") ) { return hx::Val( get_scrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollRect") ) { return hx::Val( set_scrollRect_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { return hx::Val( _hx___cacheAsBitmap ); }
		if (HX_FIELD_EQ(inName,"__dispatchEvent") ) { return hx::Val( _hx___dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatchStack") ) { return hx::Val( _hx___dispatchStack_dyn() ); }
		if (HX_FIELD_EQ(inName,"__globalToLocal") ) { return hx::Val( _hx___globalToLocal_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { return hx::Val( opaqueBackground ); }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { return hx::Val( _hx___rotationCosine ); }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty ); }
		if (HX_FIELD_EQ(inName,"__worldBlendMode") ) { return hx::Val( _hx___worldBlendMode ); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform ); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return hx::Val( _hx___getInteractive_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getLocalBounds") ) { return hx::Val( _hx___getLocalBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setRenderDirty") ) { return hx::Val( _hx___setRenderDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__cacheBitmapData") ) { return hx::Val( _hx___cacheBitmapData ); }
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { return hx::Val( _hx___objectTransform ); }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform ); }
		if (HX_FIELD_EQ(inName,"__getFilterBounds") ) { return hx::Val( _hx___getFilterBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return hx::Val( get_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmap") ) { return hx::Val( set_cacheAsBitmap_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { return hx::Val( _hx___worldClipChanged ); }
		if (HX_FIELD_EQ(inName,"__dispatchChildren") ) { return hx::Val( _hx___dispatchChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"__readGraphicsData") ) { return hx::Val( _hx___readGraphicsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cacheAsBitmapMatrix() ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmapRender") ) { return hx::Val( _hx___cacheBitmapRender ); }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { return hx::Val( _hx___worldAlphaChanged ); }
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return hx::Val( removeEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getWorldTransform") ) { return hx::Val( _hx___getWorldTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setTransformDirty") ) { return hx::Val( _hx___setTransformDirty_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__getRenderTransform") ) { return hx::Val( _hx___getRenderTransform_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { return hx::Val( _hx___cacheAsBitmapMatrix ); }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform ); }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { return hx::Val( _hx___worldVisibleChanged ); }
		if (HX_FIELD_EQ(inName,"__dispatchWithCapture") ) { return hx::Val( _hx___dispatchWithCapture_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderTransformCache") ) { return hx::Val( _hx___renderTransformCache ); }
		if (HX_FIELD_EQ(inName,"__setParentRenderDirty") ) { return hx::Val( _hx___setParentRenderDirty_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__cacheBitmapBackground") ) { return hx::Val( _hx___cacheBitmapBackground ); }
		if (HX_FIELD_EQ(inName,"__worldTransformInvalid") ) { return hx::Val( _hx___worldTransformInvalid ); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmapMatrix") ) { return hx::Val( get_cacheAsBitmapMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmapMatrix") ) { return hx::Val( set_cacheAsBitmapMatrix_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__renderTransformChanged") ) { return hx::Val( _hx___renderTransformChanged ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__setWorldTransformInvalid") ) { return hx::Val( _hx___setWorldTransformInvalid_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__cacheBitmapColorTransform") ) { return hx::Val( _hx___cacheBitmapColorTransform ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DisplayObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__initStage") ) { outValue = ( _hx___initStage ); return true; }
		if (HX_FIELD_EQ(inName,"__tempStack") ) { outValue = ( _hx___tempStack ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { outValue = ( _hx___instanceCount ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__broadcastEvents") ) { outValue = ( _hx___broadcastEvents ); return true; }
	}
	return false;
}

hx::Val DisplayObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mask(inValue.Cast<  ::openfl::display::DisplayObject >()) ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::openfl::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filters(inValue.Cast< ::Array< ::Dynamic> >()) ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { _hx___scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { _hx___scaleY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { _hx___worldZ=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blendMode(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transform(inValue.Cast<  ::openfl::geom::Transform >()) ); }
		if (HX_FIELD_EQ(inName,"__filters") ) { _hx___filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { scale9Grid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollRect(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		if (HX_FIELD_EQ(inName,"__children") ) { _hx___children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__graphics") ) { _hx___graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotation") ) { _hx___rotation=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { _hx___worldClip=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__loaderInfo") ) { _hx___loaderInfo=inValue.Cast<  ::openfl::display::LoaderInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__maskTarget") ) { _hx___maskTarget=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmap") ) { _hx___cacheBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__interactive") ) { _hx___interactive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { _hx___renderDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderParent") ) { _hx___renderParent=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { _hx___rotationSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { _hx___worldVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { _hx___cacheAsBitmap=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { opaqueBackground=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { _hx___rotationCosine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldBlendMode") ) { _hx___worldBlendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__cacheBitmapData") ) { _hx___cacheBitmapData=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { _hx___objectTransform=inValue.Cast<  ::openfl::geom::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { _hx___worldClipChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmapMatrix(inValue.Cast<  ::openfl::geom::Matrix >()) ); }
		if (HX_FIELD_EQ(inName,"__cacheBitmapRender") ) { _hx___cacheBitmapRender=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { _hx___worldAlphaChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { _hx___cacheAsBitmapMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { _hx___worldVisibleChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__renderTransformCache") ) { _hx___renderTransformCache=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__cacheBitmapBackground") ) { _hx___cacheBitmapBackground=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransformInvalid") ) { _hx___worldTransformInvalid=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__renderTransformChanged") ) { _hx___renderTransformChanged=inValue.Cast< bool >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__cacheBitmapColorTransform") ) { _hx___cacheBitmapColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DisplayObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__initStage") ) { _hx___initStage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		if (HX_FIELD_EQ(inName,"__tempStack") ) { _hx___tempStack=ioValue.Cast<  ::lime::utils::ObjectPool_openfl_Vector_openfl_display_DisplayObject >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { _hx___instanceCount=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__broadcastEvents") ) { _hx___broadcastEvents=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void DisplayObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("cacheAsBitmap","\xe3","\x82","\x0f","\x6a"));
	outFields->push(HX_HCSTRING("cacheAsBitmapMatrix","\x84","\xf9","\x81","\x95"));
	outFields->push(HX_HCSTRING("filters","\xbb","\xa1","\x46","\x09"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6"));
	outFields->push(HX_HCSTRING("mask","\xec","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scrollRect","\xd1","\xdb","\x66","\x09"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"));
	outFields->push(HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"));
	outFields->push(HX_HCSTRING("__cacheBitmap","\xb1","\x7c","\x25","\x58"));
	outFields->push(HX_HCSTRING("__cacheBitmapBackground","\xff","\x3b","\xef","\xca"));
	outFields->push(HX_HCSTRING("__cacheBitmapColorTransform","\x1a","\x5c","\xd5","\xa9"));
	outFields->push(HX_HCSTRING("__cacheBitmapData","\x7b","\xab","\xbc","\x95"));
	outFields->push(HX_HCSTRING("__cacheBitmapRender","\xe7","\x76","\x7f","\xe1"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"));
	outFields->push(HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"));
	outFields->push(HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"));
	outFields->push(HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"));
	outFields->push(HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"));
	outFields->push(HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef"));
	outFields->push(HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"));
	outFields->push(HX_HCSTRING("__maskTarget","\x7d","\x9c","\x64","\xd4"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	outFields->push(HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"));
	outFields->push(HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"));
	outFields->push(HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"));
	outFields->push(HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc"));
	outFields->push(HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1"));
	outFields->push(HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"));
	outFields->push(HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"));
	outFields->push(HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"));
	outFields->push(HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"));
	outFields->push(HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"));
	outFields->push(HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61"));
	outFields->push(HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"));
	outFields->push(HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"));
	outFields->push(HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"));
	outFields->push(HX_HCSTRING("__worldTransformInvalid","\x3d","\x6a","\x28","\x96"));
	outFields->push(HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,opaqueBackground),HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a")},
	{hx::fsObject /*::openfl::display::DisplayObjectContainer*/ ,(int)offsetof(DisplayObject_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,scale9Grid),HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(int)offsetof(DisplayObject_obj,stage),HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmap),HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmapMatrix),HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmap),HX_HCSTRING("__cacheBitmap","\xb1","\x7c","\x25","\x58")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapBackground),HX_HCSTRING("__cacheBitmapBackground","\xff","\x3b","\xef","\xca")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapColorTransform),HX_HCSTRING("__cacheBitmapColorTransform","\x1a","\x5c","\xd5","\xa9")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapData),HX_HCSTRING("__cacheBitmapData","\x7b","\xab","\xbc","\x95")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___cacheBitmapRender),HX_HCSTRING("__cacheBitmapRender","\xe7","\x76","\x7f","\xe1")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(DisplayObject_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___children),HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___filters),HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(DisplayObject_obj,_hx___graphics),HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___interactive),HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___isMask),HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d")},
	{hx::fsObject /*::openfl::display::LoaderInfo*/ ,(int)offsetof(DisplayObject_obj,_hx___loaderInfo),HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___mask),HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___maskTarget),HX_HCSTRING("__maskTarget","\x7d","\x9c","\x64","\xd4")},
	{hx::fsString,(int)offsetof(DisplayObject_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{hx::fsObject /*::openfl::geom::Transform*/ ,(int)offsetof(DisplayObject_obj,_hx___objectTransform),HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderable),HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderDirty),HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___renderParent),HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___renderTransformCache),HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderTransformChanged),HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotation),HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationCosine),HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationSine),HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___scaleX),HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___scaleY),HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___scrollRect),HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___worldAlpha),HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldAlphaChanged),HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___worldBlendMode),HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___worldClip),HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldClipChanged),HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(DisplayObject_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisible),HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisibleChanged),HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldTransformInvalid),HX_HCSTRING("__worldTransformInvalid","\x3d","\x6a","\x28","\x96")},
	{hx::fsInt,(int)offsetof(DisplayObject_obj,_hx___worldZ),HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DisplayObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &DisplayObject_obj::_hx___broadcastEvents,HX_HCSTRING("__broadcastEvents","\xda","\x4d","\x64","\x5a")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &DisplayObject_obj::_hx___initStage,HX_HCSTRING("__initStage","\x6e","\xce","\xc9","\xcd")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___instanceCount,HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f")},
	{hx::fsBool,(void *) &DisplayObject_obj::_hx___supportDOM,HX_HCSTRING("__supportDOM","\xd3","\x00","\xfe","\x8b")},
	{hx::fsObject /*::lime::utils::ObjectPool_openfl_Vector_openfl_display_DisplayObject*/ ,(void *) &DisplayObject_obj::_hx___tempStack,HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObject_obj_sMemberFields[] = {
	HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"),
	HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"),
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"),
	HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"),
	HX_HCSTRING("__cacheBitmap","\xb1","\x7c","\x25","\x58"),
	HX_HCSTRING("__cacheBitmapBackground","\xff","\x3b","\xef","\xca"),
	HX_HCSTRING("__cacheBitmapColorTransform","\x1a","\x5c","\xd5","\xa9"),
	HX_HCSTRING("__cacheBitmapData","\x7b","\xab","\xbc","\x95"),
	HX_HCSTRING("__cacheBitmapRender","\xe7","\x76","\x7f","\xe1"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"),
	HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"),
	HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"),
	HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"),
	HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"),
	HX_HCSTRING("__loaderInfo","\x41","\x2d","\x78","\xef"),
	HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"),
	HX_HCSTRING("__maskTarget","\x7d","\x9c","\x64","\xd4"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"),
	HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"),
	HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"),
	HX_HCSTRING("__renderParent","\x40","\x8c","\x94","\x7d"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__renderTransformCache","\x4c","\x42","\xcb","\xbc"),
	HX_HCSTRING("__renderTransformChanged","\x7e","\xef","\x84","\xa1"),
	HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"),
	HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"),
	HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"),
	HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"),
	HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"),
	HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"),
	HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"),
	HX_HCSTRING("__worldBlendMode","\xc2","\x5e","\x7d","\x61"),
	HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"),
	HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"),
	HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"),
	HX_HCSTRING("__worldTransformInvalid","\x3d","\x6a","\x28","\x96"),
	HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getRect","\xda","\xfc","\x29","\x1e"),
	HX_HCSTRING("globalToLocal","\xcd","\x4e","\xae","\x6b"),
	HX_HCSTRING("hitTestObject","\xe4","\x54","\x64","\xd7"),
	HX_HCSTRING("hitTestPoint","\xcb","\xa9","\x21","\xe4"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("__cleanup","\x04","\x5d","\x90","\x2c"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__dispatchChildren","\x39","\x81","\xf4","\xf4"),
	HX_HCSTRING("__dispatchEvent","\xe0","\xff","\x16","\x4e"),
	HX_HCSTRING("__dispatchStack","\x0e","\x9f","\x5d","\x5c"),
	HX_HCSTRING("__dispatchWithCapture","\x66","\x3f","\x63","\x34"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getFilterBounds","\xe3","\x3a","\xba","\x18"),
	HX_HCSTRING("__getInteractive","\x0c","\x1c","\x37","\xf8"),
	HX_HCSTRING("__getLocalBounds","\x6a","\x04","\x36","\xdf"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__getRenderTransform","\x60","\xc2","\x34","\xc0"),
	HX_HCSTRING("__getWorldTransform","\xd0","\xf4","\xfc","\x8b"),
	HX_HCSTRING("__globalToLocal","\xad","\x87","\x60","\xf3"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__readGraphicsData","\x2b","\x10","\x91","\xf2"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__setParentRenderDirty","\xf0","\xbc","\x57","\xf3"),
	HX_HCSTRING("__setRenderDirty","\x7a","\x43","\x7f","\x81"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setTransformDirty","\x28","\x1b","\x24","\x99"),
	HX_HCSTRING("__setWorldTransformInvalid","\x7b","\xc9","\xb9","\xd4"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateCacheBitmap","\x28","\x11","\x07","\x27"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateMask","\xb5","\xa6","\x9e","\x39"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_blendMode","\x2b","\xb8","\x9b","\xcd"),
	HX_HCSTRING("set_blendMode","\x37","\x9a","\xa1","\x12"),
	HX_HCSTRING("get_cacheAsBitmap","\x3a","\x8e","\x7f","\x70"),
	HX_HCSTRING("set_cacheAsBitmap","\x46","\x66","\xed","\x93"),
	HX_HCSTRING("get_cacheAsBitmapMatrix","\x1b","\xa0","\xd7","\x9d"),
	HX_HCSTRING("set_cacheAsBitmapMatrix","\x27","\x09","\x39","\xa0"),
	HX_HCSTRING("get_filters","\xd2","\x01","\x41","\x8f"),
	HX_HCSTRING("set_filters","\xde","\x08","\xae","\x99"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_loaderInfo","\x6a","\x3a","\xda","\x2c"),
	HX_HCSTRING("get_mask","\x75","\xfc","\x10","\xc8"),
	HX_HCSTRING("set_mask","\xe9","\x55","\x6e","\x76"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scrollRect","\x1a","\x64","\x5c","\x7f"),
	HX_HCSTRING("set_scrollRect","\x8e","\x4c","\x7c","\x9f"),
	HX_HCSTRING("get_transform","\x43","\x01","\xf7","\x06"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("get_visible","\x89","\xd8","\x1e","\x29"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void DisplayObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___broadcastEvents,"__broadcastEvents");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___initStage,"__initStage");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___supportDOM,"__supportDOM");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___tempStack,"__tempStack");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___broadcastEvents,"__broadcastEvents");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___initStage,"__initStage");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___supportDOM,"__supportDOM");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___tempStack,"__tempStack");
};

#endif

hx::Class DisplayObject_obj::__mClass;

static ::String DisplayObject_obj_sStaticFields[] = {
	HX_HCSTRING("__broadcastEvents","\xda","\x4d","\x64","\x5a"),
	HX_HCSTRING("__initStage","\x6e","\xce","\xc9","\xcd"),
	HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f"),
	HX_HCSTRING("__supportDOM","\xd3","\x00","\xfe","\x8b"),
	HX_HCSTRING("__tempStack","\x74","\xb4","\x4b","\xe8"),
	::String(null())
};

void DisplayObject_obj::__register()
{
	hx::Object *dummy = new DisplayObject_obj;
	DisplayObject_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObject","\xf7","\x4b","\x6f","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObject_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObject_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplayObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObject_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_61_boot)
HXDLIN(  61)		_hx___broadcastEvents =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_63_boot)
HXDLIN(  63)		_hx___instanceCount = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_26400284d5456c16_64_boot)
HXDLIN(  64)		_hx___supportDOM = false;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::openfl::_Vector::AbstractVector _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_65_boot)
HXDLIN(  65)			int length = null();
HXDLIN(  65)			bool fixed = null();
HXDLIN(  65)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::openfl::_Vector::AbstractVector stack){
            			HX_STACKFRAME(&_hx_pos_26400284d5456c16_65_boot)
HXDLIN(  65)			::openfl::_Vector::IVector_obj::set_length(stack->data,(int)0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_26400284d5456c16_65_boot)
HXDLIN(  65)		_hx___tempStack =  ::lime::utils::ObjectPool_openfl_Vector_openfl_display_DisplayObject_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1()),null());
            	}
}

} // end namespace openfl
} // end namespace display
