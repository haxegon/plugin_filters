// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_utils__Dictionary_ClassMap
#include <openfl/utils/_Dictionary/ClassMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e4d60601e770703e_171_new,"openfl.utils._Dictionary.ClassMap","new",0xf688c28a,"openfl.utils._Dictionary.ClassMap.new","openfl/utils/Dictionary.hx",171,0x5979b1eb)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d60601e770703e_192_exists,"openfl.utils._Dictionary.ClassMap","exists",0xb39161f2,"openfl.utils._Dictionary.ClassMap.exists","openfl/utils/Dictionary.hx",192,0x5979b1eb)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d60601e770703e_199_get,"openfl.utils._Dictionary.ClassMap","get",0xf68372c0,"openfl.utils._Dictionary.ClassMap.get","openfl/utils/Dictionary.hx",199,0x5979b1eb)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d60601e770703e_206_keys,"openfl.utils._Dictionary.ClassMap","keys",0xbf25d48a,"openfl.utils._Dictionary.ClassMap.keys","openfl/utils/Dictionary.hx",206,0x5979b1eb)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d60601e770703e_213_iterator,"openfl.utils._Dictionary.ClassMap","iterator",0xc9353f84,"openfl.utils._Dictionary.ClassMap.iterator","openfl/utils/Dictionary.hx",213,0x5979b1eb)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d60601e770703e_218_remove,"openfl.utils._Dictionary.ClassMap","remove",0xf839e05a,"openfl.utils._Dictionary.ClassMap.remove","openfl/utils/Dictionary.hx",218,0x5979b1eb)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d60601e770703e_226_set,"openfl.utils._Dictionary.ClassMap","set",0xf68c8dcc,"openfl.utils._Dictionary.ClassMap.set","openfl/utils/Dictionary.hx",226,0x5979b1eb)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d60601e770703e_238_toString,"openfl.utils._Dictionary.ClassMap","toString",0x6e09c642,"openfl.utils._Dictionary.ClassMap.toString","openfl/utils/Dictionary.hx",238,0x5979b1eb)
namespace openfl{
namespace utils{
namespace _Dictionary{

void ClassMap_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e4d60601e770703e_171_new)
HXLINE( 173)		this->types =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 174)		this->values =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic ClassMap_obj::__CreateEmpty() { return new ClassMap_obj; }

void *ClassMap_obj::_hx_vtable = 0;

Dynamic ClassMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ClassMap_obj > _hx_result = new ClassMap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ClassMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5914d0b8;
}

static ::haxe::IMap_obj _hx_openfl_utils__Dictionary_ClassMap__hx_haxe_IMap= {
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::openfl::utils::_Dictionary::ClassMap_obj::get,
	( void (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::utils::_Dictionary::ClassMap_obj::set_41d0cb46,
	( bool (hx::Object::*)( ::Dynamic))&::openfl::utils::_Dictionary::ClassMap_obj::exists,
	( bool (hx::Object::*)( ::Dynamic))&::openfl::utils::_Dictionary::ClassMap_obj::remove,
	(  ::Dynamic (hx::Object::*)())&::openfl::utils::_Dictionary::ClassMap_obj::keys,
	(  ::Dynamic (hx::Object::*)())&::openfl::utils::_Dictionary::ClassMap_obj::iterator,
};

void ClassMap_obj::set_41d0cb46( ::Dynamic k, ::Dynamic v) {
			set(k,v);
}
void *ClassMap_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x09c2bd39: return &_hx_openfl_utils__Dictionary_ClassMap__hx_haxe_IMap;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

bool ClassMap_obj::exists( ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_e4d60601e770703e_192_exists)
HXDLIN( 192)		::Dynamic this1 = this->types;
HXDLIN( 192)		return ( ( ::haxe::ds::StringMap)(this1) )->exists(::Type_obj::getClassName(key));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClassMap_obj,exists,return )

 ::Dynamic ClassMap_obj::get( ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_e4d60601e770703e_199_get)
HXDLIN( 199)		::Dynamic this1 = this->values;
HXDLIN( 199)		return ( ( ::haxe::ds::StringMap)(this1) )->get(::Type_obj::getClassName(key));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClassMap_obj,get,return )

 ::Dynamic ClassMap_obj::keys(){
            	HX_STACKFRAME(&_hx_pos_e4d60601e770703e_206_keys)
HXDLIN( 206)		return this->types->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ClassMap_obj,keys,return )

 ::Dynamic ClassMap_obj::iterator(){
            	HX_STACKFRAME(&_hx_pos_e4d60601e770703e_213_iterator)
HXDLIN( 213)		return this->values->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ClassMap_obj,iterator,return )

bool ClassMap_obj::remove( ::Dynamic key){
            	HX_STACKFRAME(&_hx_pos_e4d60601e770703e_218_remove)
HXLINE( 220)		::String name = ::Type_obj::getClassName(key);
HXLINE( 221)		if (!(this->types->remove(name))) {
HXLINE( 221)			return this->values->remove(name);
            		}
            		else {
HXLINE( 221)			return true;
            		}
HXDLIN( 221)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ClassMap_obj,remove,return )

void ClassMap_obj::set( ::Dynamic key, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e4d60601e770703e_226_set)
HXLINE( 228)		::String name = ::Type_obj::getClassName(key);
HXLINE( 230)		this->types->set(name,key);
HXLINE( 231)		this->values->set(name,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ClassMap_obj,set,(void))

::String ClassMap_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_e4d60601e770703e_238_toString)
HXDLIN( 238)		return this->values->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ClassMap_obj,toString,return )


hx::ObjectPtr< ClassMap_obj > ClassMap_obj::__new() {
	hx::ObjectPtr< ClassMap_obj > __this = new ClassMap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< ClassMap_obj > ClassMap_obj::__alloc(hx::Ctx *_hx_ctx) {
	ClassMap_obj *__this = (ClassMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ClassMap_obj), true, "openfl.utils._Dictionary.ClassMap"));
	*(void **)__this = ClassMap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ClassMap_obj::ClassMap_obj()
{
}

void ClassMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ClassMap);
	HX_MARK_MEMBER_NAME(types,"types");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_END_CLASS();
}

void ClassMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(types,"types");
	HX_VISIT_MEMBER_NAME(values,"values");
}

hx::Val ClassMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { return hx::Val( types ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ClassMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ClassMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"));
	outFields->push(HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ClassMap_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(ClassMap_obj,types),HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(ClassMap_obj,values),HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ClassMap_obj_sStaticStorageInfo = 0;
#endif

static ::String ClassMap_obj_sMemberFields[] = {
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("values","\xe2","\x03","\xb7","\x4f"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void ClassMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ClassMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ClassMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ClassMap_obj::__mClass,"__mClass");
};

#endif

hx::Class ClassMap_obj::__mClass;

void ClassMap_obj::__register()
{
	hx::Object *dummy = new ClassMap_obj;
	ClassMap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.utils._Dictionary.ClassMap","\x98","\x75","\x06","\xf6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ClassMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ClassMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ClassMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ClassMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClassMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClassMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace utils
} // end namespace _Dictionary
