// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_AGALMiniAssembler
#include <openfl/utils/AGALMiniAssembler.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__AGALMiniAssembler_OpCode
#include <openfl/utils/_AGALMiniAssembler/OpCode.h>
#endif
#ifndef INCLUDED_openfl_utils__AGALMiniAssembler_Register
#include <openfl/utils/_AGALMiniAssembler/Register.h>
#endif
#ifndef INCLUDED_openfl_utils__AGALMiniAssembler_Sampler
#include <openfl/utils/_AGALMiniAssembler/Sampler.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_878a01ff4ba15759_41_new,"openfl.utils.AGALMiniAssembler","new",0xa6ddea8f,"openfl.utils.AGALMiniAssembler.new","openfl/utils/AGALMiniAssembler.hx",41,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_189_assemble2,"openfl.utils.AGALMiniAssembler","assemble2",0xada2ae4f,"openfl.utils.AGALMiniAssembler.assemble2","openfl/utils/AGALMiniAssembler.hx",189,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_200_assemble,"openfl.utils.AGALMiniAssembler","assemble",0x3c794483,"openfl.utils.AGALMiniAssembler.assemble","openfl/utils/AGALMiniAssembler.hx",200,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_754_initregmap,"openfl.utils.AGALMiniAssembler","initregmap",0x0ed0be89,"openfl.utils.AGALMiniAssembler.initregmap","openfl/utils/AGALMiniAssembler.hx",754,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_859_match,"openfl.utils.AGALMiniAssembler","match",0xf40b8d34,"openfl.utils.AGALMiniAssembler.match","openfl/utils/AGALMiniAssembler.hx",859,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_779_init,"openfl.utils.AGALMiniAssembler","init",0x58080a01,"openfl.utils.AGALMiniAssembler.init","openfl/utils/AGALMiniAssembler.hx",779,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_44_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",44,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_45_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",45,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_46_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",46,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_48_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",48,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_49_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",49,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_51_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",51,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_52_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",52,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_55_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",55,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_56_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",56,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_57_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",57,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_58_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",58,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_59_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",59,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_60_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",60,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_63_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",63,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_64_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",64,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_65_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",65,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_66_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",66,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_69_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",69,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_70_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",70,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_71_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",71,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_72_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",72,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_73_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",73,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_74_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",74,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_75_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",75,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_76_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",76,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_77_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",77,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_80_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",80,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_81_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",81,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_82_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",82,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_83_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",83,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_84_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",84,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_85_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",85,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_86_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",86,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_87_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",87,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_88_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",88,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_89_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",89,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_90_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",90,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_91_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",91,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_92_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",92,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_93_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",93,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_94_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",94,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_95_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",95,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_96_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",96,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_97_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",97,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_98_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",98,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_99_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",99,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_100_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",100,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_101_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",101,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_102_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",102,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_103_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",103,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_104_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",104,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_105_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",105,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_106_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",106,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_107_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",107,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_108_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",108,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_109_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",109,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_110_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",110,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_111_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",111,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_112_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",112,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_113_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",113,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_114_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",114,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_115_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",115,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_116_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",116,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_117_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",117,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_118_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",118,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_119_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",119,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_120_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",120,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_121_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",121,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_122_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",122,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_123_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",123,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_126_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",126,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_127_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",127,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_128_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",128,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_129_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",129,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_130_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",130,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_131_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",131,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_132_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",132,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_133_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",133,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_134_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",134,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_135_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",135,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_136_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",136,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_139_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",139,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_140_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",140,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_141_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",141,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_142_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",142,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_143_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",143,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_144_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",144,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_145_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",145,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_146_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",146,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_147_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",147,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_148_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",148,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_149_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",149,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_150_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",150,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_151_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",151,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_152_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",152,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_153_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",153,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_154_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",154,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_155_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",155,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_156_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",156,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_157_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",157,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_158_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",158,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_159_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",159,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_160_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",160,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_161_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",161,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_162_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",162,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_163_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",163,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_164_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",164,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_165_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",165,0x125eff83)
HX_LOCAL_STACK_FRAME(_hx_pos_878a01ff4ba15759_167_boot,"openfl.utils.AGALMiniAssembler","boot",0x53685323,"openfl.utils.AGALMiniAssembler.boot","openfl/utils/AGALMiniAssembler.hx",167,0x125eff83)
namespace openfl{
namespace utils{

void AGALMiniAssembler_obj::__construct(hx::Null< bool >  __o_debugging){
bool debugging = __o_debugging.Default(false);
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_41_new)
HXLINE( 173)		this->debugEnabled = false;
HXLINE( 178)		this->debugEnabled = debugging;
HXLINE( 180)		if (!(::openfl::utils::AGALMiniAssembler_obj::initialized)) {
HXLINE( 182)			::openfl::utils::AGALMiniAssembler_obj::init();
            		}
            	}

Dynamic AGALMiniAssembler_obj::__CreateEmpty() { return new AGALMiniAssembler_obj; }

void *AGALMiniAssembler_obj::_hx_vtable = 0;

Dynamic AGALMiniAssembler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AGALMiniAssembler_obj > _hx_result = new AGALMiniAssembler_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AGALMiniAssembler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3f00ff77;
}

 ::openfl::display3D::Program3D AGALMiniAssembler_obj::assemble2( ::openfl::display3D::Context3D context3D,int version,::String vertexSource,::String fragmentSource){
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_189_assemble2)
HXLINE( 191)		 ::openfl::utils::ByteArrayData agalVertex = this->assemble(HX_("vertex",64,db,47,a1),vertexSource,version,null());
HXLINE( 192)		 ::openfl::utils::ByteArrayData agalFragment = this->assemble(HX_("fragment",d0,5f,e5,ad),fragmentSource,version,null());
HXLINE( 193)		 ::openfl::display3D::Program3D program = context3D->createProgram();
HXLINE( 194)		program->upload(agalVertex,agalFragment);
HXLINE( 195)		return program;
            	}


HX_DEFINE_DYNAMIC_FUNC4(AGALMiniAssembler_obj,assemble2,return )

 ::openfl::utils::ByteArrayData AGALMiniAssembler_obj::assemble(::String mode,::String source,hx::Null< int >  __o_version,hx::Null< bool >  __o_ignoreLimits){
int version = __o_version.Default(1);
bool ignoreLimits = __o_ignoreLimits.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_200_assemble)
HXLINE( 202)		int start = ::openfl::Lib_obj::getTimer();
HXLINE( 204)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 204)		this->agalcode = this1;
HXLINE( 205)		this->error = HX_("",00,00,00,00);
HXLINE( 207)		bool isFrag = false;
HXLINE( 209)		if ((mode == HX_("fragment",d0,5f,e5,ad))) {
HXLINE( 211)			isFrag = true;
            		}
            		else {
HXLINE( 213)			if ((mode != HX_("vertex",64,db,47,a1))) {
HXLINE( 215)				this->error = ((((((HX_("ERROR: mode needs to be \"",d8,b7,4c,b2) + HX_("fragment",d0,5f,e5,ad)) + HX_("\" or \"",a3,20,aa,4e)) + HX_("vertex",64,db,47,a1)) + HX_("\" but is \"",69,33,a7,e2)) + mode) + HX_("\".",cc,1d,00,00));
            			}
            		}
HXLINE( 219)		this->agalcode->_hx___endian = (int)1;
HXLINE( 220)		this->agalcode->writeByte((int)160);
HXLINE( 221)		this->agalcode->writeUnsignedInt(version);
HXLINE( 222)		this->agalcode->writeByte((int)161);
HXLINE( 223)		int _hx_tmp;
HXDLIN( 223)		if (isFrag) {
HXLINE( 223)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE( 223)			_hx_tmp = (int)0;
            		}
HXDLIN( 223)		this->agalcode->writeByte(_hx_tmp);
HXLINE( 225)		this->initregmap(version,ignoreLimits);
HXLINE( 227)		::Array< ::String > lines = ::StringTools_obj::replace(source,HX_("\r",0d,00,00,00),HX_("\n",0a,00,00,00)).split(HX_("\n",0a,00,00,00));
HXLINE( 228)		int nest = (int)0;
HXLINE( 229)		int nops = (int)0;
HXLINE( 230)		int lng = lines->length;
HXLINE( 232)		 ::EReg reg1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("<.*>",c6,d9,cb,27),HX_("g",67,00,00,00));
HXLINE( 233)		 ::EReg reg2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("([\\w\\.\\-\\+]+)",fb,41,d4,12),HX_("gi",22,5a,00,00));
HXLINE( 234)		 ::EReg reg3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\\w{3}",4c,2f,6f,dd),HX_("ig",de,5b,00,00));
HXLINE( 235)		 ::EReg reg4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?",ca,7c,76,12),HX_("gi",22,5a,00,00));
HXLINE( 236)		 ::EReg reg5 =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\[.*\\]",bc,fb,d3,4c),HX_("ig",de,5b,00,00));
HXLINE( 237)		 ::EReg reg6 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\\b[A-Za-z]{1,3}",fa,3b,55,e1),HX_("ig",de,5b,00,00));
HXLINE( 238)		 ::EReg reg7 =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\d+",a3,26,46,00),HX_("",00,00,00,00));
HXLINE( 239)		 ::EReg reg8 =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\.[xyzw]{1,4})",c8,ae,42,2b),HX_("",00,00,00,00));
HXLINE( 240)		 ::EReg reg9 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[A-Za-z]{1,3}",de,ce,de,ac),HX_("ig",de,5b,00,00));
HXLINE( 241)		 ::EReg reg10 =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\.[xyzw]{1,1})",05,68,40,2b),HX_("",00,00,00,00));
HXLINE( 242)		 ::EReg reg11 =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\+\\d{1,3}",89,08,70,4a),HX_("ig",de,5b,00,00));
HXLINE( 244)		int i = (int)0;
HXLINE( 246)		while(true){
HXLINE( 246)			bool _hx_tmp1;
HXDLIN( 246)			if ((i < lng)) {
HXLINE( 246)				_hx_tmp1 = (this->error == HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 246)				_hx_tmp1 = false;
            			}
HXDLIN( 246)			if (!(_hx_tmp1)) {
HXLINE( 246)				goto _hx_goto_2;
            			}
HXLINE( 248)			::String line = ::StringTools_obj::trim(lines->__get(i));
HXLINE( 251)			int startcomment = line.indexOf(HX_("//",20,29,00,00),null());
HXLINE( 252)			if ((startcomment != (int)-1)) {
HXLINE( 254)				line = line.substr((int)0,startcomment);
            			}
HXLINE( 259)			int optsi;
HXDLIN( 259)			if (reg1->match(line)) {
HXLINE( 259)				optsi = ( (int)(reg1->matchedPos()->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
            			}
            			else {
HXLINE( 259)				optsi = (int)-1;
            			}
HXLINE( 260)			::Array< ::String > opts = null();
HXLINE( 262)			if ((optsi != (int)-1)) {
HXLINE( 264)				opts = this->match(line.substr(optsi,null()),reg2);
HXLINE( 265)				line = line.substr((int)0,optsi);
            			}
HXLINE( 270)			::String opCode = null();
HXLINE( 271)			 ::openfl::utils::_AGALMiniAssembler::OpCode opFound = null();
HXLINE( 273)			if (reg3->match(line)) {
HXLINE( 275)				opCode = reg3->matched((int)0);
HXLINE( 276)				opFound = ::openfl::utils::AGALMiniAssembler_obj::OPMAP->get(opCode).StaticCast<  ::openfl::utils::_AGALMiniAssembler::OpCode >();
            			}
HXLINE( 280)			if (hx::IsNull( opFound )) {
HXLINE( 282)				if ((line.length >= (int)3)) {
HXLINE( 284)					 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 284)					_hx_tmp2((((HX_("warning: bad line ",cf,50,44,4f) + i) + HX_(": ",a6,32,00,00)) + lines->__get(i)),hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),284,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            				}
HXLINE( 288)				i = (i + (int)1);
HXLINE( 289)				continue;
            			}
HXLINE( 294)			if (this->debugEnabled) {
HXLINE( 296)				::haxe::Log_obj::trace(opFound,hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),296,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            			}
HXLINE( 300)			if (hx::IsNull( opFound )) {
HXLINE( 302)				if ((line.length >= (int)3)) {
HXLINE( 304)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 304)					_hx_tmp3((((HX_("warning: bad line ",cf,50,44,4f) + i) + HX_(": ",a6,32,00,00)) + lines->__get(i)),hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),304,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            				}
HXLINE( 308)				i = (i + (int)1);
HXLINE( 309)				continue;
            			}
HXLINE( 313)			int line1 = line.indexOf(opFound->name,null());
HXDLIN( 313)			line = line.substr((line1 + opFound->name.length),null());
HXLINE( 315)			bool _hx_tmp4;
HXDLIN( 315)			if ((((int)opFound->flags & (int)(int)256) != (int)0)) {
HXLINE( 315)				_hx_tmp4 = (version < (int)2);
            			}
            			else {
HXLINE( 315)				_hx_tmp4 = false;
            			}
HXDLIN( 315)			if (_hx_tmp4) {
HXLINE( 317)				this->error = HX_("error: opcode requires version 2.",d2,34,38,ba);
HXLINE( 318)				goto _hx_goto_2;
            			}
HXLINE( 322)			bool _hx_tmp5;
HXDLIN( 322)			if ((((int)opFound->flags & (int)(int)64) != (int)0)) {
HXLINE( 322)				_hx_tmp5 = isFrag;
            			}
            			else {
HXLINE( 322)				_hx_tmp5 = false;
            			}
HXDLIN( 322)			if (_hx_tmp5) {
HXLINE( 324)				this->error = HX_("error: opcode is only allowed in vertex programs.",a4,4b,76,ab);
HXLINE( 325)				goto _hx_goto_2;
            			}
HXLINE( 329)			bool _hx_tmp6;
HXDLIN( 329)			if ((((int)opFound->flags & (int)(int)32) != (int)0)) {
HXLINE( 329)				_hx_tmp6 = !(isFrag);
            			}
            			else {
HXLINE( 329)				_hx_tmp6 = false;
            			}
HXDLIN( 329)			if (_hx_tmp6) {
HXLINE( 331)				this->error = HX_("error: opcode is only allowed in fragment programs.",50,b1,63,46);
HXLINE( 332)				goto _hx_goto_2;
            			}
HXLINE( 336)			if (this->verbose) {
HXLINE( 338)				 ::Dynamic _hx_tmp7 = ::haxe::Log_obj::trace;
HXDLIN( 338)				::String _hx_tmp8 = (HX_("emit opcode=",e2,2a,94,83) + ::Std_obj::string(opFound));
HXDLIN( 338)				_hx_tmp7(_hx_tmp8,hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),338,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            			}
HXLINE( 342)			this->agalcode->writeUnsignedInt(opFound->emitCode);
HXLINE( 343)			nops = (nops + (int)1);
HXLINE( 345)			if ((nops > (int)4096)) {
HXLINE( 347)				this->error = ((HX_("error: too many opcodes. maximum is ",26,64,b3,3b) + (int)4096) + HX_(".",2e,00,00,00));
HXLINE( 348)				goto _hx_goto_2;
            			}
HXLINE( 353)			::Array< ::String > regs = this->match(line,reg4);
HXLINE( 355)			if ((regs->length != opFound->numRegister)) {
HXLINE( 357)				this->error = ((((HX_("error: wrong number of operands. found ",ad,a0,73,c8) + regs->length) + HX_(" but expected ",e9,a0,e7,6d)) + opFound->numRegister) + HX_(".",2e,00,00,00));
HXLINE( 358)				goto _hx_goto_2;
            			}
HXLINE( 362)			bool badreg = false;
HXLINE( 363)			int pad = (int)160;
HXLINE( 364)			int regLength = regs->length;
HXLINE( 366)			{
HXLINE( 366)				int _g1 = (int)0;
HXDLIN( 366)				int _g = regLength;
HXDLIN( 366)				while((_g1 < _g)){
HXLINE( 366)					_g1 = (_g1 + (int)1);
HXDLIN( 366)					int j = (_g1 - (int)1);
HXLINE( 368)					bool isRelative = false;
HXLINE( 369)					::Array< ::String > relreg = this->match(regs->__get(j),reg5);
HXLINE( 371)					if ((relreg->length > (int)0)) {
HXLINE( 373)						regs[j] = ::StringTools_obj::replace(regs->__get(j),relreg->__get((int)0),HX_("0",30,00,00,00));
HXLINE( 375)						if (this->verbose) {
HXLINE( 377)							::haxe::Log_obj::trace(HX_("IS REL",03,c6,b4,0f),hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),377,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            						}
HXLINE( 381)						isRelative = true;
            					}
HXLINE( 385)					::Array< ::String > res = this->match(regs->__get(j),reg6);
HXLINE( 386)					if ((res->length == (int)0)) {
HXLINE( 388)						this->error = ((((HX_("error: could not parse operand ",5e,e6,18,8a) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(").",e5,23,00,00));
HXLINE( 389)						badreg = true;
HXLINE( 390)						goto _hx_goto_3;
            					}
HXLINE( 394)					 ::openfl::utils::_AGALMiniAssembler::Register regFound = ::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(res->__get((int)0)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Register >();
HXLINE( 397)					if (this->debugEnabled) {
HXLINE( 399)						::haxe::Log_obj::trace(regFound,hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),399,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            					}
HXLINE( 403)					if (hx::IsNull( regFound )) {
HXLINE( 405)						this->error = ((((HX_("error: could not find register name for operand ",d3,f6,78,ae) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(").",e5,23,00,00));
HXLINE( 406)						badreg = true;
HXLINE( 407)						goto _hx_goto_3;
            					}
HXLINE( 411)					if (isFrag) {
HXLINE( 413)						if ((((int)regFound->flags & (int)(int)32) == (int)0)) {
HXLINE( 415)							this->error = ((((HX_("error: register operand ",66,bd,b9,f5) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(") only allowed in vertex programs.",e9,f2,50,fb));
HXLINE( 416)							badreg = true;
HXLINE( 417)							goto _hx_goto_3;
            						}
HXLINE( 421)						if (isRelative) {
HXLINE( 423)							this->error = ((((HX_("error: register operand ",66,bd,b9,f5) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(") relative adressing not allowed in fragment programs.",34,7c,f5,9f));
HXLINE( 424)							badreg = true;
HXLINE( 425)							goto _hx_goto_3;
            						}
            					}
            					else {
HXLINE( 431)						if ((((int)regFound->flags & (int)(int)64) == (int)0)) {
HXLINE( 433)							this->error = ((((HX_("error: register operand ",66,bd,b9,f5) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(") only allowed in fragment programs.",d5,73,aa,3f));
HXLINE( 434)							badreg = true;
HXLINE( 435)							goto _hx_goto_3;
            						}
            					}
HXLINE( 441)					int _hx_tmp9 = regs->__get(j).indexOf(regFound->name,null());
HXDLIN( 441)					regs[j] = regs->__get(j).substr((_hx_tmp9 + regFound->name.length),null());
HXLINE( 443)					::Array< ::String > idxmatch;
HXDLIN( 443)					if (isRelative) {
HXLINE( 443)						idxmatch = this->match(relreg->__get((int)0),reg7);
            					}
            					else {
HXLINE( 443)						idxmatch = this->match(regs->__get(j),reg7);
            					}
HXLINE( 444)					int regidx = (int)0;
HXLINE( 446)					if ((idxmatch->length > (int)0)) {
HXLINE( 448)						regidx = ::Std_obj::parseInt(idxmatch->__get((int)0));
            					}
HXLINE( 452)					int a = regFound->range;
HXDLIN( 452)					bool aNeg = (regidx < (int)0);
HXDLIN( 452)					bool bNeg = (a < (int)0);
HXDLIN( 452)					bool _hx_tmp10;
HXDLIN( 452)					if ((aNeg != bNeg)) {
HXLINE( 452)						_hx_tmp10 = aNeg;
            					}
            					else {
HXLINE( 452)						_hx_tmp10 = (regidx > a);
            					}
HXDLIN( 452)					if (_hx_tmp10) {
HXLINE( 454)						::String _hx_tmp11 = ((((HX_("error: register operand ",66,bd,b9,f5) + j) + HX_(" (",08,1c,00,00)) + regs->__get(j)) + HX_(") index exceeds limit of ",5e,a7,88,f8));
HXDLIN( 454)						int _hx_int = (regFound->range + (int)1);
HXDLIN( 454)						Float _hx_tmp12;
HXDLIN( 454)						if ((_hx_int < (int)0)) {
HXLINE( 454)							_hx_tmp12 = (((Float)4294967296.0) + _hx_int);
            						}
            						else {
HXLINE( 454)							_hx_tmp12 = (_hx_int + ((Float)0.0));
            						}
HXDLIN( 454)						this->error = ((_hx_tmp11 + ::Std_obj::string(_hx_tmp12)) + HX_(".",2e,00,00,00));
HXLINE( 455)						badreg = true;
HXLINE( 456)						goto _hx_goto_3;
            					}
HXLINE( 460)					int regmask = (int)0;
HXLINE( 461)					::Array< ::String > maskmatch = this->match(regs->__get(j),reg8);
HXLINE( 462)					bool isDest;
HXDLIN( 462)					if ((j == (int)0)) {
HXLINE( 462)						isDest = (((int)opFound->flags & (int)(int)128) == (int)0);
            					}
            					else {
HXLINE( 462)						isDest = false;
            					}
HXLINE( 463)					bool isSampler;
HXDLIN( 463)					if ((j == (int)2)) {
HXLINE( 463)						isSampler = (((int)opFound->flags & (int)(int)8) != (int)0);
            					}
            					else {
HXLINE( 463)						isSampler = false;
            					}
HXLINE( 464)					int reltype = (int)0;
HXLINE( 465)					int relsel = (int)0;
HXLINE( 466)					int reloffset = (int)0;
HXLINE( 468)					bool _hx_tmp13;
HXDLIN( 468)					if (isDest) {
HXLINE( 468)						_hx_tmp13 = isRelative;
            					}
            					else {
HXLINE( 468)						_hx_tmp13 = false;
            					}
HXDLIN( 468)					if (_hx_tmp13) {
HXLINE( 470)						this->error = HX_("error: relative can not be destination",54,bb,32,e3);
HXLINE( 471)						badreg = true;
HXLINE( 472)						goto _hx_goto_3;
            					}
HXLINE( 476)					if ((maskmatch->length > (int)0)) {
HXLINE( 478)						regmask = (int)0;
HXLINE( 479)						int cv = (int)0;
HXLINE( 480)						int maskLength = maskmatch->__get((int)0).length;
HXLINE( 481)						int k = (int)1;
HXLINE( 483)						while((k < maskLength)){
HXLINE( 485)							cv = (maskmatch->__get((int)0).charCodeAt(k) - (int)120);
HXLINE( 487)							bool aNeg1 = (cv < (int)0);
HXDLIN( 487)							bool bNeg1 = ((int)2 < (int)0);
HXDLIN( 487)							bool _hx_tmp14;
HXDLIN( 487)							if ((aNeg1 != bNeg1)) {
HXLINE( 487)								_hx_tmp14 = aNeg1;
            							}
            							else {
HXLINE( 487)								_hx_tmp14 = (cv > (int)2);
            							}
HXDLIN( 487)							if (_hx_tmp14) {
HXLINE( 489)								cv = (int)3;
            							}
HXLINE( 493)							if (isDest) {
HXLINE( 495)								regmask = ((int)regmask | (int)((int)(int)1 << (int)cv));
            							}
            							else {
HXLINE( 499)								regmask = ((int)regmask | (int)((int)cv << (int)((int)(k - (int)1) << (int)(int)1)));
            							}
HXLINE( 503)							k = (k + (int)1);
            						}
HXLINE( 507)						if (!(isDest)) {
HXLINE( 509)							while((k <= (int)4)){
HXLINE( 511)								regmask = ((int)regmask | (int)((int)cv << (int)((int)(k - (int)1) << (int)(int)1)));
HXLINE( 512)								k = (k + (int)1);
            							}
            						}
            					}
            					else {
HXLINE( 520)						if (isDest) {
HXLINE( 520)							regmask = (int)15;
            						}
            						else {
HXLINE( 520)							regmask = (int)228;
            						}
            					}
HXLINE( 524)					if (isRelative) {
HXLINE( 526)						::Array< ::String > relname = this->match(relreg->__get((int)0),reg9);
HXLINE( 527)						 ::openfl::utils::_AGALMiniAssembler::Register regFoundRel = ::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(relname->__get((int)0)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Register >();
HXLINE( 529)						if (hx::IsNull( regFoundRel )) {
HXLINE( 531)							this->error = HX_("error: bad index register",1a,79,3a,ab);
HXLINE( 532)							badreg = true;
HXLINE( 533)							goto _hx_goto_3;
            						}
HXLINE( 537)						reltype = regFoundRel->emitCode;
HXLINE( 538)						::Array< ::String > selmatch = this->match(relreg->__get((int)0),reg10);
HXLINE( 540)						if ((selmatch->length == (int)0)) {
HXLINE( 542)							this->error = HX_("error: bad index register select",42,31,f8,d3);
HXLINE( 543)							badreg = true;
HXLINE( 544)							goto _hx_goto_3;
            						}
HXLINE( 548)						relsel = (selmatch->__get((int)0).charCodeAt((int)1) - (int)120);
HXLINE( 550)						bool aNeg2 = (relsel < (int)0);
HXDLIN( 550)						bool bNeg2 = ((int)2 < (int)0);
HXDLIN( 550)						bool _hx_tmp15;
HXDLIN( 550)						if ((aNeg2 != bNeg2)) {
HXLINE( 550)							_hx_tmp15 = aNeg2;
            						}
            						else {
HXLINE( 550)							_hx_tmp15 = (relsel > (int)2);
            						}
HXDLIN( 550)						if (_hx_tmp15) {
HXLINE( 552)							relsel = (int)3;
            						}
HXLINE( 556)						::Array< ::String > relofs = this->match(relreg->__get((int)0),reg11);
HXLINE( 558)						if ((relofs->length > (int)0)) {
HXLINE( 560)							reloffset = ::Std_obj::parseInt(relofs->__get((int)0));
            						}
HXLINE( 564)						bool _hx_tmp16;
HXDLIN( 564)						if ((reloffset >= (int)0)) {
HXLINE( 564)							_hx_tmp16 = (reloffset > (int)255);
            						}
            						else {
HXLINE( 564)							_hx_tmp16 = true;
            						}
HXDLIN( 564)						if (_hx_tmp16) {
HXLINE( 566)							this->error = ((HX_("error: index offset ",f1,9c,33,57) + reloffset) + HX_(" out of bounds. [0..255]",de,2b,59,f3));
HXLINE( 567)							badreg = true;
HXLINE( 568)							goto _hx_goto_3;
            						}
HXLINE( 572)						if (this->verbose) {
HXLINE( 574)							 ::Dynamic _hx_tmp17 = ::haxe::Log_obj::trace;
HXDLIN( 574)							::String _hx_tmp18 = ((((HX_("RELATIVE: type=",91,08,0e,50) + reltype) + HX_("==",60,35,00,00)) + relname->__get((int)0)) + HX_(" sel=",83,1b,23,b9));
HXDLIN( 574)							int int1 = relsel;
HXDLIN( 574)							Float _hx_tmp19;
HXDLIN( 574)							if ((int1 < (int)0)) {
HXLINE( 574)								_hx_tmp19 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE( 574)								_hx_tmp19 = (int1 + ((Float)0.0));
            							}
HXDLIN( 574)							::String _hx_tmp20 = ((_hx_tmp18 + ::Std_obj::string(_hx_tmp19)) + HX_("==",60,35,00,00));
HXDLIN( 574)							::String _hx_tmp21 = ((_hx_tmp20 + selmatch->__get((int)0)) + HX_(" idx=",80,41,86,b2));
HXDLIN( 574)							int int2 = regidx;
HXDLIN( 574)							Float _hx_tmp22;
HXDLIN( 574)							if ((int2 < (int)0)) {
HXLINE( 574)								_hx_tmp22 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE( 574)								_hx_tmp22 = (int2 + ((Float)0.0));
            							}
HXDLIN( 574)							::String _hx_tmp23 = (((_hx_tmp21 + ::Std_obj::string(_hx_tmp22)) + HX_(" offset=",2a,4d,b3,fd)) + reloffset);
HXDLIN( 574)							_hx_tmp17(_hx_tmp23,hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),574,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            						}
            					}
HXLINE( 580)					if (this->verbose) {
HXLINE( 582)						 ::Dynamic _hx_tmp24 = ::haxe::Log_obj::trace;
HXDLIN( 582)						::String _hx_tmp25 = ((HX_("  emit argcode=",c7,a3,7b,7d) + ::Std_obj::string(regFound)) + HX_("[",5b,00,00,00));
HXDLIN( 582)						int int3 = regidx;
HXDLIN( 582)						Float _hx_tmp26;
HXDLIN( 582)						if ((int3 < (int)0)) {
HXLINE( 582)							_hx_tmp26 = (((Float)4294967296.0) + int3);
            						}
            						else {
HXLINE( 582)							_hx_tmp26 = (int3 + ((Float)0.0));
            						}
HXDLIN( 582)						::String _hx_tmp27 = ((((_hx_tmp25 + ::Std_obj::string(_hx_tmp26)) + HX_("][",5e,51,00,00)) + regmask) + HX_("]",5d,00,00,00));
HXDLIN( 582)						_hx_tmp24(_hx_tmp27,hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),582,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            					}
HXLINE( 586)					if (isDest) {
HXLINE( 588)						this->agalcode->writeShort(regidx);
HXLINE( 589)						this->agalcode->writeByte(regmask);
HXLINE( 590)						this->agalcode->writeByte(regFound->emitCode);
HXLINE( 591)						pad = (pad - (int)32);
            					}
            					else {
HXLINE( 595)						if (isSampler) {
HXLINE( 597)							if (this->verbose) {
HXLINE( 599)								::haxe::Log_obj::trace(HX_("  emit sampler",3b,ce,fa,fa),hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),599,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            							}
HXLINE( 603)							int samplerbits = (int)5;
HXLINE( 604)							int optsLength;
HXDLIN( 604)							if (hx::IsNull( opts )) {
HXLINE( 604)								optsLength = (int)0;
            							}
            							else {
HXLINE( 604)								optsLength = opts->length;
            							}
HXLINE( 605)							Float bias = ((Float)0.0);
HXLINE( 607)							{
HXLINE( 607)								int _g3 = (int)0;
HXDLIN( 607)								int _g2 = optsLength;
HXDLIN( 607)								while((_g3 < _g2)){
HXLINE( 607)									_g3 = (_g3 + (int)1);
HXDLIN( 607)									int k1 = (_g3 - (int)1);
HXLINE( 609)									if (this->verbose) {
HXLINE( 611)										 ::Dynamic _hx_tmp28 = ::haxe::Log_obj::trace;
HXDLIN( 611)										_hx_tmp28((HX_("    opt: ",99,49,70,b6) + opts->__get(k1)),hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),611,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            									}
HXLINE( 615)									 ::openfl::utils::_AGALMiniAssembler::Sampler optfound = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP->get(opts->__get(k1)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Sampler >();
HXLINE( 617)									if (hx::IsNull( optfound )) {
HXLINE( 621)										bias = ::Std_obj::parseFloat(opts->__get(k1));
HXLINE( 623)										if (this->verbose) {
HXLINE( 625)											 ::Dynamic _hx_tmp29 = ::haxe::Log_obj::trace;
HXDLIN( 625)											_hx_tmp29((HX_("    bias: ",5f,a5,fa,a4) + bias),hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),625,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            										}
            									}
            									else {
HXLINE( 631)										if ((optfound->flag != (int)16)) {
HXLINE( 633)											samplerbits = ((int)samplerbits & (int)~(((int)(int)15 << (int)optfound->flag)));
            										}
HXLINE( 637)										samplerbits = ((int)samplerbits | (int)((int)optfound->mask << (int)optfound->flag));
            									}
            								}
            							}
HXLINE( 643)							this->agalcode->writeShort(regidx);
HXLINE( 644)							 ::openfl::utils::ByteArrayData _hx_tmp30 = this->agalcode;
HXDLIN( 644)							_hx_tmp30->writeByte(::Std_obj::_hx_int((bias * ((Float)8.0))));
HXLINE( 645)							this->agalcode->writeByte((int)0);
HXLINE( 646)							this->agalcode->writeUnsignedInt(samplerbits);
HXLINE( 648)							if (this->verbose) {
HXLINE( 650)								 ::Dynamic _hx_tmp31 = ::haxe::Log_obj::trace;
HXDLIN( 650)								_hx_tmp31((HX_("    bits: ",2c,b3,89,b1) + (samplerbits - (int)5)),hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),650,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            							}
HXLINE( 654)							pad = (pad - (int)64);
            						}
            						else {
HXLINE( 658)							if ((j == (int)0)) {
HXLINE( 660)								this->agalcode->writeUnsignedInt((int)0);
HXLINE( 661)								pad = (pad - (int)32);
            							}
HXLINE( 665)							this->agalcode->writeShort(regidx);
HXLINE( 666)							this->agalcode->writeByte(reloffset);
HXLINE( 667)							this->agalcode->writeByte(regmask);
HXLINE( 668)							this->agalcode->writeByte(regFound->emitCode);
HXLINE( 669)							this->agalcode->writeByte(reltype);
HXLINE( 670)							int _hx_tmp32;
HXDLIN( 670)							if (isRelative) {
HXLINE( 670)								_hx_tmp32 = ((int)relsel | (int)(int)32768);
            							}
            							else {
HXLINE( 670)								_hx_tmp32 = (int)0;
            							}
HXDLIN( 670)							this->agalcode->writeShort(_hx_tmp32);
HXLINE( 672)							pad = (pad - (int)64);
            						}
            					}
            				}
            				_hx_goto_3:;
            			}
HXLINE( 681)			int j1 = (int)0;
HXLINE( 682)			while((j1 < pad)){
HXLINE( 684)				this->agalcode->writeByte((int)0);
HXLINE( 685)				j1 = (j1 + (int)8);
            			}
HXLINE( 689)			if (badreg) {
HXLINE( 691)				goto _hx_goto_2;
            			}
HXLINE( 695)			i = (i + (int)1);
            		}
            		_hx_goto_2:;
HXLINE( 699)		if ((this->error != HX_("",00,00,00,00))) {
HXLINE( 701)			 ::openfl::utils::AGALMiniAssembler _hx_tmp33 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 701)			_hx_tmp33->error = (_hx_tmp33->error + (((HX_("\n  at line ",49,c3,70,34) + i) + HX_(" ",20,00,00,00)) + lines->__get(i)));
HXLINE( 702)			::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(this->agalcode,(int)0);
HXLINE( 703)			::haxe::Log_obj::trace(this->error,hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),703,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            		}
HXLINE( 708)		if (this->debugEnabled) {
HXLINE( 710)			::String dbgLine = HX_("generated bytecode:",94,4e,7c,79);
HXLINE( 711)			int agalLength = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->agalcode);
HXLINE( 713)			{
HXLINE( 713)				int _g11 = (int)0;
HXDLIN( 713)				int _g4 = agalLength;
HXDLIN( 713)				while((_g11 < _g4)){
HXLINE( 713)					_g11 = (_g11 + (int)1);
HXDLIN( 713)					int index = (_g11 - (int)1);
HXLINE( 715)					if ((hx::Mod(index,(int)16) == (int)0)) {
HXLINE( 717)						dbgLine = (dbgLine + HX_("\n",0a,00,00,00));
            					}
HXLINE( 721)					if ((hx::Mod(index,(int)4) == (int)0)) {
HXLINE( 723)						dbgLine = (dbgLine + HX_(" ",20,00,00,00));
            					}
HXLINE( 727)					::String byteStr = ::StringTools_obj::hex(this->agalcode->b->__get(index),(int)2);
HXLINE( 729)					if ((byteStr.length < (int)2)) {
HXLINE( 731)						byteStr = (HX_("0",30,00,00,00) + byteStr);
            					}
HXLINE( 735)					dbgLine = (dbgLine + byteStr);
            				}
            			}
HXLINE( 739)			::haxe::Log_obj::trace(dbgLine,hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),739,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            		}
HXLINE( 743)		if (this->verbose) {
HXLINE( 745)			 ::Dynamic _hx_tmp34 = ::haxe::Log_obj::trace;
HXDLIN( 745)			::String _hx_tmp35 = ((HX_("AGALMiniAssembler.assemble time: ",4b,2c,a6,f9) + ((Float)(::openfl::Lib_obj::getTimer() - start) / (Float)(int)1000)) + HX_("s",73,00,00,00));
HXDLIN( 745)			_hx_tmp34(_hx_tmp35,hx::SourceInfo(HX_("AGALMiniAssembler.hx",46,16,79,50),745,HX_("openfl.utils.AGALMiniAssembler",1d,f7,bb,62),HX_("assemble",12,a9,1b,c5)));
            		}
HXLINE( 749)		return this->agalcode;
            	}


HX_DEFINE_DYNAMIC_FUNC4(AGALMiniAssembler_obj,assemble,return )

void AGALMiniAssembler_obj::initregmap(int version,bool ignorelimits){
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_754_initregmap)
HXLINE( 756)		{
HXLINE( 756)			::Dynamic this1 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 756)			int v;
HXDLIN( 756)			if (ignorelimits) {
HXLINE( 756)				v = (int)1024;
            			}
            			else {
HXLINE( 756)				bool v1;
HXDLIN( 756)				if ((version != (int)1)) {
HXLINE( 756)					v1 = (version == (int)2);
            				}
            				else {
HXLINE( 756)					v1 = true;
            				}
HXDLIN( 756)				if (v1) {
HXLINE( 756)					v = (int)7;
            				}
            				else {
HXLINE( 756)					v = (int)15;
            				}
            			}
HXDLIN( 756)			 ::openfl::utils::_AGALMiniAssembler::Register v2 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("va",2b,67,00,00),HX_("vertex attribute",60,ec,e8,40),(int)0,v,(int)66);
HXDLIN( 756)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("va",2b,67,00,00),v2);
            		}
HXLINE( 757)		{
HXLINE( 757)			::Dynamic this2 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 757)			int v3;
HXDLIN( 757)			if (ignorelimits) {
HXLINE( 757)				v3 = (int)1024;
            			}
            			else {
HXLINE( 757)				if ((version == (int)1)) {
HXLINE( 757)					v3 = (int)127;
            				}
            				else {
HXLINE( 757)					v3 = (int)249;
            				}
            			}
HXDLIN( 757)			 ::openfl::utils::_AGALMiniAssembler::Register v4 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("vc",2d,67,00,00),HX_("vertex constant",a0,79,46,53),(int)1,v3,(int)66);
HXDLIN( 757)			( ( ::haxe::ds::StringMap)(this2) )->set(HX_("vc",2d,67,00,00),v4);
            		}
HXLINE( 758)		{
HXLINE( 758)			::Dynamic this3 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 758)			int v5;
HXDLIN( 758)			if (ignorelimits) {
HXLINE( 758)				v5 = (int)1024;
            			}
            			else {
HXLINE( 758)				if ((version == (int)1)) {
HXLINE( 758)					v5 = (int)7;
            				}
            				else {
HXLINE( 758)					v5 = (int)25;
            				}
            			}
HXDLIN( 758)			 ::openfl::utils::_AGALMiniAssembler::Register v6 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("vt",3e,67,00,00),HX_("vertex temporary",d5,c5,fd,1d),(int)2,v5,(int)67);
HXDLIN( 758)			( ( ::haxe::ds::StringMap)(this3) )->set(HX_("vt",3e,67,00,00),v6);
            		}
HXLINE( 759)		{
HXLINE( 759)			::Dynamic this4 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 759)			int v7;
HXDLIN( 759)			if (ignorelimits) {
HXLINE( 759)				v7 = (int)1024;
            			}
            			else {
HXLINE( 759)				v7 = (int)0;
            			}
HXDLIN( 759)			 ::openfl::utils::_AGALMiniAssembler::Register v8 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("vo",39,67,00,00),HX_("vertex output",3d,00,1e,e4),(int)3,v7,(int)65);
HXDLIN( 759)			( ( ::haxe::ds::StringMap)(this4) )->set(HX_("vo",39,67,00,00),v8);
            		}
HXLINE( 760)		{
HXLINE( 760)			::Dynamic this5 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 760)			int v9;
HXDLIN( 760)			if (ignorelimits) {
HXLINE( 760)				v9 = (int)1024;
            			}
            			else {
HXLINE( 760)				if ((version == (int)1)) {
HXLINE( 760)					v9 = (int)7;
            				}
            				else {
HXLINE( 760)					v9 = (int)9;
            				}
            			}
HXDLIN( 760)			 ::openfl::utils::_AGALMiniAssembler::Register v10 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("vi",33,67,00,00),HX_("varying",70,bc,7b,e7),(int)4,v9,(int)99);
HXDLIN( 760)			( ( ::haxe::ds::StringMap)(this5) )->set(HX_("vi",33,67,00,00),v10);
            		}
HXLINE( 761)		{
HXLINE( 761)			::Dynamic this6 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 761)			int v11;
HXDLIN( 761)			if (ignorelimits) {
HXLINE( 761)				v11 = (int)1024;
            			}
            			else {
HXLINE( 761)				if ((version == (int)1)) {
HXLINE( 761)					v11 = (int)27;
            				}
            				else {
HXLINE( 761)					if ((version == (int)2)) {
HXLINE( 761)						v11 = (int)63;
            					}
            					else {
HXLINE( 761)						v11 = (int)199;
            					}
            				}
            			}
HXDLIN( 761)			 ::openfl::utils::_AGALMiniAssembler::Register v12 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("fc",3d,59,00,00),HX_("fragment constant",b4,07,43,d0),(int)1,v11,(int)34);
HXDLIN( 761)			( ( ::haxe::ds::StringMap)(this6) )->set(HX_("fc",3d,59,00,00),v12);
            		}
HXLINE( 762)		{
HXLINE( 762)			::Dynamic this7 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 762)			int v13;
HXDLIN( 762)			if (ignorelimits) {
HXLINE( 762)				v13 = (int)1024;
            			}
            			else {
HXLINE( 762)				if ((version == (int)1)) {
HXLINE( 762)					v13 = (int)7;
            				}
            				else {
HXLINE( 762)					v13 = (int)25;
            				}
            			}
HXDLIN( 762)			 ::openfl::utils::_AGALMiniAssembler::Register v14 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("ft",4e,59,00,00),HX_("fragment temporary",41,89,fd,fd),(int)2,v13,(int)35);
HXDLIN( 762)			( ( ::haxe::ds::StringMap)(this7) )->set(HX_("ft",4e,59,00,00),v14);
            		}
HXLINE( 763)		{
HXLINE( 763)			::Dynamic this8 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 763)			int v15;
HXDLIN( 763)			if (ignorelimits) {
HXLINE( 763)				v15 = (int)1024;
            			}
            			else {
HXLINE( 763)				v15 = (int)7;
            			}
HXDLIN( 763)			 ::openfl::utils::_AGALMiniAssembler::Register v16 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("fs",4d,59,00,00),HX_("texture sampler",c3,a4,85,37),(int)5,v15,(int)34);
HXDLIN( 763)			( ( ::haxe::ds::StringMap)(this8) )->set(HX_("fs",4d,59,00,00),v16);
            		}
HXLINE( 764)		{
HXLINE( 764)			::Dynamic this9 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 764)			int v17;
HXDLIN( 764)			if (ignorelimits) {
HXLINE( 764)				v17 = (int)1024;
            			}
            			else {
HXLINE( 764)				if ((version == (int)1)) {
HXLINE( 764)					v17 = (int)0;
            				}
            				else {
HXLINE( 764)					v17 = (int)3;
            				}
            			}
HXDLIN( 764)			 ::openfl::utils::_AGALMiniAssembler::Register v18 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("fo",49,59,00,00),HX_("fragment output",51,21,41,79),(int)3,v17,(int)33);
HXDLIN( 764)			( ( ::haxe::ds::StringMap)(this9) )->set(HX_("fo",49,59,00,00),v18);
            		}
HXLINE( 765)		{
HXLINE( 765)			::Dynamic this10 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 765)			int v19;
HXDLIN( 765)			if (ignorelimits) {
HXLINE( 765)				v19 = (int)1024;
            			}
            			else {
HXLINE( 765)				if ((version == (int)1)) {
HXLINE( 765)					v19 = (int)-1;
            				}
            				else {
HXLINE( 765)					v19 = (int)0;
            				}
            			}
HXDLIN( 765)			 ::openfl::utils::_AGALMiniAssembler::Register v20 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("fd",3e,59,00,00),HX_("fragment depth output",ce,1a,fc,b5),(int)6,v19,(int)33);
HXDLIN( 765)			( ( ::haxe::ds::StringMap)(this10) )->set(HX_("fd",3e,59,00,00),v20);
            		}
HXLINE( 766)		{
HXLINE( 766)			::Dynamic this11 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 766)			int v21;
HXDLIN( 766)			if (ignorelimits) {
HXLINE( 766)				v21 = (int)1024;
            			}
            			else {
HXLINE( 766)				v21 = (int)0;
            			}
HXDLIN( 766)			 ::openfl::utils::_AGALMiniAssembler::Register v22 =  ::openfl::utils::_AGALMiniAssembler::Register_obj::__alloc( HX_CTX ,HX_("iid",84,08,50,00),HX_("instance id",86,af,f1,28),(int)7,v21,(int)66);
HXDLIN( 766)			( ( ::haxe::ds::StringMap)(this11) )->set(HX_("iid",84,08,50,00),v22);
            		}
HXLINE( 769)		{
HXLINE( 769)			::Dynamic this12 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 769)			 ::openfl::utils::_AGALMiniAssembler::Register v23 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("vo",39,67,00,00)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Register >();
HXDLIN( 769)			( ( ::haxe::ds::StringMap)(this12) )->set(HX_("op",21,61,00,00),v23);
            		}
HXLINE( 770)		{
HXLINE( 770)			::Dynamic this13 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 770)			 ::openfl::utils::_AGALMiniAssembler::Register v24 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("vi",33,67,00,00)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Register >();
HXDLIN( 770)			( ( ::haxe::ds::StringMap)(this13) )->set(HX_("i",69,00,00,00),v24);
            		}
HXLINE( 771)		{
HXLINE( 771)			::Dynamic this14 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 771)			 ::openfl::utils::_AGALMiniAssembler::Register v25 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("vi",33,67,00,00)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Register >();
HXDLIN( 771)			( ( ::haxe::ds::StringMap)(this14) )->set(HX_("v",76,00,00,00),v25);
            		}
HXLINE( 772)		{
HXLINE( 772)			::Dynamic this15 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 772)			 ::openfl::utils::_AGALMiniAssembler::Register v26 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("fo",49,59,00,00)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Register >();
HXDLIN( 772)			( ( ::haxe::ds::StringMap)(this15) )->set(HX_("oc",14,61,00,00),v26);
            		}
HXLINE( 773)		{
HXLINE( 773)			::Dynamic this16 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 773)			 ::openfl::utils::_AGALMiniAssembler::Register v27 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("fd",3e,59,00,00)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Register >();
HXDLIN( 773)			( ( ::haxe::ds::StringMap)(this16) )->set(HX_("od",15,61,00,00),v27);
            		}
HXLINE( 774)		{
HXLINE( 774)			::Dynamic this17 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP;
HXDLIN( 774)			 ::openfl::utils::_AGALMiniAssembler::Register v28 = ::openfl::utils::AGALMiniAssembler_obj::REGMAP->get(HX_("vi",33,67,00,00)).StaticCast<  ::openfl::utils::_AGALMiniAssembler::Register >();
HXDLIN( 774)			( ( ::haxe::ds::StringMap)(this17) )->set(HX_("fi",43,59,00,00),v28);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(AGALMiniAssembler_obj,initregmap,(void))

::Array< ::String > AGALMiniAssembler_obj::match(::String value, ::EReg reg){
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_859_match)
HXLINE( 861)		::Array< ::String > matches = ::Array_obj< ::String >::__new(0);
HXLINE( 862)		int index = (int)0;
HXLINE( 863)		::String match;
HXLINE( 865)		while(reg->matchSub(value,index,null())){
HXLINE( 867)			match = reg->matched((int)0);
HXLINE( 868)			matches->push(match);
HXLINE( 869)			index = (( (int)(reg->matchedPos()->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) + match.length);
            		}
HXLINE( 873)		return matches;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AGALMiniAssembler_obj,match,return )

 ::haxe::ds::StringMap AGALMiniAssembler_obj::OPMAP;

 ::haxe::ds::StringMap AGALMiniAssembler_obj::REGMAP;

 ::haxe::ds::StringMap AGALMiniAssembler_obj::SAMPLEMAP;

int AGALMiniAssembler_obj::MAX_NESTING;

int AGALMiniAssembler_obj::MAX_OPCODES;

::String AGALMiniAssembler_obj::FRAGMENT;

::String AGALMiniAssembler_obj::VERTEX;

int AGALMiniAssembler_obj::SAMPLER_TYPE_SHIFT;

int AGALMiniAssembler_obj::SAMPLER_DIM_SHIFT;

int AGALMiniAssembler_obj::SAMPLER_SPECIAL_SHIFT;

int AGALMiniAssembler_obj::SAMPLER_REPEAT_SHIFT;

int AGALMiniAssembler_obj::SAMPLER_MIPMAP_SHIFT;

int AGALMiniAssembler_obj::SAMPLER_FILTER_SHIFT;

int AGALMiniAssembler_obj::REG_WRITE;

int AGALMiniAssembler_obj::REG_READ;

int AGALMiniAssembler_obj::REG_FRAG;

int AGALMiniAssembler_obj::REG_VERT;

int AGALMiniAssembler_obj::OP_SCALAR;

int AGALMiniAssembler_obj::OP_SPECIAL_TEX;

int AGALMiniAssembler_obj::OP_SPECIAL_MATRIX;

int AGALMiniAssembler_obj::OP_FRAG_ONLY;

int AGALMiniAssembler_obj::OP_VERT_ONLY;

int AGALMiniAssembler_obj::OP_NO_DEST;

int AGALMiniAssembler_obj::OP_VERSION2;

int AGALMiniAssembler_obj::OP_INCNEST;

int AGALMiniAssembler_obj::OP_DECNEST;

::String AGALMiniAssembler_obj::MOV;

::String AGALMiniAssembler_obj::ADD;

::String AGALMiniAssembler_obj::SUB;

::String AGALMiniAssembler_obj::MUL;

::String AGALMiniAssembler_obj::DIV;

::String AGALMiniAssembler_obj::RCP;

::String AGALMiniAssembler_obj::MIN;

::String AGALMiniAssembler_obj::MAX;

::String AGALMiniAssembler_obj::FRC;

::String AGALMiniAssembler_obj::SQT;

::String AGALMiniAssembler_obj::RSQ;

::String AGALMiniAssembler_obj::POW;

::String AGALMiniAssembler_obj::LOG;

::String AGALMiniAssembler_obj::EXP;

::String AGALMiniAssembler_obj::NRM;

::String AGALMiniAssembler_obj::SIN;

::String AGALMiniAssembler_obj::COS;

::String AGALMiniAssembler_obj::CRS;

::String AGALMiniAssembler_obj::DP3;

::String AGALMiniAssembler_obj::DP4;

::String AGALMiniAssembler_obj::ABS;

::String AGALMiniAssembler_obj::NEG;

::String AGALMiniAssembler_obj::SAT;

::String AGALMiniAssembler_obj::M33;

::String AGALMiniAssembler_obj::M44;

::String AGALMiniAssembler_obj::M34;

::String AGALMiniAssembler_obj::DDX;

::String AGALMiniAssembler_obj::DDY;

::String AGALMiniAssembler_obj::IFE;

::String AGALMiniAssembler_obj::INE;

::String AGALMiniAssembler_obj::IFG;

::String AGALMiniAssembler_obj::IFL;

::String AGALMiniAssembler_obj::IEG;

::String AGALMiniAssembler_obj::IEL;

::String AGALMiniAssembler_obj::ELS;

::String AGALMiniAssembler_obj::EIF;

::String AGALMiniAssembler_obj::TED;

::String AGALMiniAssembler_obj::KIL;

::String AGALMiniAssembler_obj::TEX;

::String AGALMiniAssembler_obj::SGE;

::String AGALMiniAssembler_obj::SLT;

::String AGALMiniAssembler_obj::SGN;

::String AGALMiniAssembler_obj::SEQ;

::String AGALMiniAssembler_obj::SNE;

::String AGALMiniAssembler_obj::VA;

::String AGALMiniAssembler_obj::VC;

::String AGALMiniAssembler_obj::VT;

::String AGALMiniAssembler_obj::VO;

::String AGALMiniAssembler_obj::VI;

::String AGALMiniAssembler_obj::FC;

::String AGALMiniAssembler_obj::FT;

::String AGALMiniAssembler_obj::FS;

::String AGALMiniAssembler_obj::FO;

::String AGALMiniAssembler_obj::FD;

::String AGALMiniAssembler_obj::IID;

::String AGALMiniAssembler_obj::D2;

::String AGALMiniAssembler_obj::D3;

::String AGALMiniAssembler_obj::CUBE;

::String AGALMiniAssembler_obj::MIPNEAREST;

::String AGALMiniAssembler_obj::MIPLINEAR;

::String AGALMiniAssembler_obj::MIPNONE;

::String AGALMiniAssembler_obj::NOMIP;

::String AGALMiniAssembler_obj::NEAREST;

::String AGALMiniAssembler_obj::LINEAR;

::String AGALMiniAssembler_obj::ANISOTROPIC2X;

::String AGALMiniAssembler_obj::ANISOTROPIC4X;

::String AGALMiniAssembler_obj::ANISOTROPIC8X;

::String AGALMiniAssembler_obj::ANISOTROPIC16X;

::String AGALMiniAssembler_obj::CENTROID;

::String AGALMiniAssembler_obj::SINGLE;

::String AGALMiniAssembler_obj::IGNORESAMPLER;

::String AGALMiniAssembler_obj::REPEAT;

::String AGALMiniAssembler_obj::WRAP;

::String AGALMiniAssembler_obj::CLAMP;

::String AGALMiniAssembler_obj::REPEAT_U_CLAMP_V;

::String AGALMiniAssembler_obj::CLAMP_U_REPEAT_V;

::String AGALMiniAssembler_obj::RGBA;

::String AGALMiniAssembler_obj::COMPRESSED;

::String AGALMiniAssembler_obj::COMPRESSEDALPHA;

::String AGALMiniAssembler_obj::DXT1;

::String AGALMiniAssembler_obj::DXT5;

::String AGALMiniAssembler_obj::VIDEO;

bool AGALMiniAssembler_obj::initialized;

void AGALMiniAssembler_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_779_init)
HXLINE( 781)		::openfl::utils::AGALMiniAssembler_obj::initialized = true;
HXLINE( 784)		{
HXLINE( 784)			::Dynamic this1 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 784)			 ::openfl::utils::_AGALMiniAssembler::OpCode v =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("mov",d4,16,53,00),(int)2,(int)0,(int)0);
HXDLIN( 784)			( ( ::haxe::ds::StringMap)(this1) )->set(HX_("mov",d4,16,53,00),v);
            		}
HXLINE( 785)		{
HXLINE( 785)			::Dynamic this2 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 785)			 ::openfl::utils::_AGALMiniAssembler::OpCode v1 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("add",21,f2,49,00),(int)3,(int)1,(int)0);
HXDLIN( 785)			( ( ::haxe::ds::StringMap)(this2) )->set(HX_("add",21,f2,49,00),v1);
            		}
HXLINE( 786)		{
HXLINE( 786)			::Dynamic this3 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 786)			 ::openfl::utils::_AGALMiniAssembler::OpCode v2 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sub",80,a9,57,00),(int)3,(int)2,(int)0);
HXDLIN( 786)			( ( ::haxe::ds::StringMap)(this3) )->set(HX_("sub",80,a9,57,00),v2);
            		}
HXLINE( 787)		{
HXLINE( 787)			::Dynamic this4 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 787)			 ::openfl::utils::_AGALMiniAssembler::OpCode v3 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("mul",04,1c,53,00),(int)3,(int)3,(int)0);
HXDLIN( 787)			( ( ::haxe::ds::StringMap)(this4) )->set(HX_("mul",04,1c,53,00),v3);
            		}
HXLINE( 788)		{
HXLINE( 788)			::Dynamic this5 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 788)			 ::openfl::utils::_AGALMiniAssembler::OpCode v4 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("div",51,3d,4c,00),(int)3,(int)4,(int)0);
HXDLIN( 788)			( ( ::haxe::ds::StringMap)(this5) )->set(HX_("div",51,3d,4c,00),v4);
            		}
HXLINE( 789)		{
HXLINE( 789)			::Dynamic this6 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 789)			 ::openfl::utils::_AGALMiniAssembler::OpCode v5 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("rcp",9f,d7,56,00),(int)2,(int)5,(int)0);
HXDLIN( 789)			( ( ::haxe::ds::StringMap)(this6) )->set(HX_("rcp",9f,d7,56,00),v5);
            		}
HXLINE( 790)		{
HXLINE( 790)			::Dynamic this7 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 790)			 ::openfl::utils::_AGALMiniAssembler::OpCode v6 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("min",92,11,53,00),(int)3,(int)6,(int)0);
HXDLIN( 790)			( ( ::haxe::ds::StringMap)(this7) )->set(HX_("min",92,11,53,00),v6);
            		}
HXLINE( 791)		{
HXLINE( 791)			::Dynamic this8 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 791)			 ::openfl::utils::_AGALMiniAssembler::OpCode v7 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("max",a4,0a,53,00),(int)3,(int)7,(int)0);
HXDLIN( 791)			( ( ::haxe::ds::StringMap)(this8) )->set(HX_("max",a4,0a,53,00),v7);
            		}
HXLINE( 792)		{
HXLINE( 792)			::Dynamic this9 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 792)			 ::openfl::utils::_AGALMiniAssembler::OpCode v8 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("frc",97,c9,4d,00),(int)2,(int)8,(int)0);
HXDLIN( 792)			( ( ::haxe::ds::StringMap)(this9) )->set(HX_("frc",97,c9,4d,00),v8);
            		}
HXLINE( 793)		{
HXLINE( 793)			::Dynamic this10 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 793)			 ::openfl::utils::_AGALMiniAssembler::OpCode v9 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sqt",16,a6,57,00),(int)2,(int)9,(int)0);
HXDLIN( 793)			( ( ::haxe::ds::StringMap)(this10) )->set(HX_("sqt",16,a6,57,00),v9);
            		}
HXLINE( 794)		{
HXLINE( 794)			::Dynamic this11 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 794)			 ::openfl::utils::_AGALMiniAssembler::OpCode v10 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("rsq",90,e5,56,00),(int)2,(int)10,(int)0);
HXDLIN( 794)			( ( ::haxe::ds::StringMap)(this11) )->set(HX_("rsq",90,e5,56,00),v10);
            		}
HXLINE( 795)		{
HXLINE( 795)			::Dynamic this12 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 795)			 ::openfl::utils::_AGALMiniAssembler::OpCode v11 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("pow",98,5d,55,00),(int)3,(int)11,(int)0);
HXDLIN( 795)			( ( ::haxe::ds::StringMap)(this12) )->set(HX_("pow",98,5d,55,00),v11);
            		}
HXLINE( 796)		{
HXLINE( 796)			::Dynamic this13 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 796)			 ::openfl::utils::_AGALMiniAssembler::OpCode v12 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("log",84,54,52,00),(int)2,(int)12,(int)0);
HXDLIN( 796)			( ( ::haxe::ds::StringMap)(this13) )->set(HX_("log",84,54,52,00),v12);
            		}
HXLINE( 797)		{
HXLINE( 797)			::Dynamic this14 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 797)			 ::openfl::utils::_AGALMiniAssembler::OpCode v13 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("exp",9d,0c,4d,00),(int)2,(int)13,(int)0);
HXDLIN( 797)			( ( ::haxe::ds::StringMap)(this14) )->set(HX_("exp",9d,0c,4d,00),v13);
            		}
HXLINE( 798)		{
HXLINE( 798)			::Dynamic this15 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 798)			 ::openfl::utils::_AGALMiniAssembler::OpCode v14 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("nrm",a9,db,53,00),(int)2,(int)14,(int)0);
HXDLIN( 798)			( ( ::haxe::ds::StringMap)(this15) )->set(HX_("nrm",a9,db,53,00),v14);
            		}
HXLINE( 799)		{
HXLINE( 799)			::Dynamic this16 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 799)			 ::openfl::utils::_AGALMiniAssembler::OpCode v15 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sin",18,9f,57,00),(int)2,(int)15,(int)0);
HXDLIN( 799)			( ( ::haxe::ds::StringMap)(this16) )->set(HX_("sin",18,9f,57,00),v15);
            		}
HXLINE( 800)		{
HXLINE( 800)			::Dynamic this17 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 800)			 ::openfl::utils::_AGALMiniAssembler::OpCode v16 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("cos",47,80,4b,00),(int)2,(int)16,(int)0);
HXDLIN( 800)			( ( ::haxe::ds::StringMap)(this17) )->set(HX_("cos",47,80,4b,00),v16);
            		}
HXLINE( 801)		{
HXLINE( 801)			::Dynamic this18 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 801)			 ::openfl::utils::_AGALMiniAssembler::OpCode v17 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("crs",e4,82,4b,00),(int)3,(int)17,(int)0);
HXDLIN( 801)			( ( ::haxe::ds::StringMap)(this18) )->set(HX_("crs",e4,82,4b,00),v17);
            		}
HXLINE( 802)		{
HXLINE( 802)			::Dynamic this19 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 802)			 ::openfl::utils::_AGALMiniAssembler::OpCode v18 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("dp3",27,43,4c,00),(int)3,(int)18,(int)0);
HXDLIN( 802)			( ( ::haxe::ds::StringMap)(this19) )->set(HX_("dp3",27,43,4c,00),v18);
            		}
HXLINE( 803)		{
HXLINE( 803)			::Dynamic this20 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 803)			 ::openfl::utils::_AGALMiniAssembler::OpCode v19 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("dp4",28,43,4c,00),(int)3,(int)19,(int)0);
HXDLIN( 803)			( ( ::haxe::ds::StringMap)(this20) )->set(HX_("dp4",28,43,4c,00),v19);
            		}
HXLINE( 804)		{
HXLINE( 804)			::Dynamic this21 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 804)			 ::openfl::utils::_AGALMiniAssembler::OpCode v20 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("abs",72,f0,49,00),(int)2,(int)20,(int)0);
HXDLIN( 804)			( ( ::haxe::ds::StringMap)(this21) )->set(HX_("abs",72,f0,49,00),v20);
            		}
HXLINE( 805)		{
HXLINE( 805)			::Dynamic this22 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 805)			 ::openfl::utils::_AGALMiniAssembler::OpCode v21 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("neg",50,d0,53,00),(int)2,(int)21,(int)0);
HXDLIN( 805)			( ( ::haxe::ds::StringMap)(this22) )->set(HX_("neg",50,d0,53,00),v21);
            		}
HXLINE( 806)		{
HXLINE( 806)			::Dynamic this23 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 806)			 ::openfl::utils::_AGALMiniAssembler::OpCode v22 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sat",26,98,57,00),(int)2,(int)22,(int)0);
HXDLIN( 806)			( ( ::haxe::ds::StringMap)(this23) )->set(HX_("sat",26,98,57,00),v22);
            		}
HXLINE( 807)		{
HXLINE( 807)			::Dynamic this24 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 807)			 ::openfl::utils::_AGALMiniAssembler::OpCode v23 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("m33",4d,e2,52,00),(int)3,(int)23,(int)16);
HXDLIN( 807)			( ( ::haxe::ds::StringMap)(this24) )->set(HX_("m33",4d,e2,52,00),v23);
            		}
HXLINE( 808)		{
HXLINE( 808)			::Dynamic this25 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 808)			 ::openfl::utils::_AGALMiniAssembler::OpCode v24 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("m44",2d,e3,52,00),(int)3,(int)24,(int)16);
HXDLIN( 808)			( ( ::haxe::ds::StringMap)(this25) )->set(HX_("m44",2d,e3,52,00),v24);
            		}
HXLINE( 809)		{
HXLINE( 809)			::Dynamic this26 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 809)			 ::openfl::utils::_AGALMiniAssembler::OpCode v25 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("m34",4e,e2,52,00),(int)3,(int)25,(int)16);
HXDLIN( 809)			( ( ::haxe::ds::StringMap)(this26) )->set(HX_("m34",4e,e2,52,00),v25);
            		}
HXLINE( 810)		{
HXLINE( 810)			::Dynamic this27 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 810)			 ::openfl::utils::_AGALMiniAssembler::OpCode v26 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ddx",f8,38,4c,00),(int)2,(int)26,(int)288);
HXDLIN( 810)			( ( ::haxe::ds::StringMap)(this27) )->set(HX_("ddx",f8,38,4c,00),v26);
            		}
HXLINE( 811)		{
HXLINE( 811)			::Dynamic this28 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 811)			 ::openfl::utils::_AGALMiniAssembler::OpCode v27 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ddy",f9,38,4c,00),(int)2,(int)27,(int)288);
HXDLIN( 811)			( ( ::haxe::ds::StringMap)(this28) )->set(HX_("ddy",f9,38,4c,00),v27);
            		}
HXLINE( 812)		{
HXLINE( 812)			::Dynamic this29 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 812)			 ::openfl::utils::_AGALMiniAssembler::OpCode v28 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ife",e8,05,50,00),(int)2,(int)28,(int)897);
HXDLIN( 812)			( ( ::haxe::ds::StringMap)(this29) )->set(HX_("ife",e8,05,50,00),v28);
            		}
HXLINE( 813)		{
HXLINE( 813)			::Dynamic this30 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 813)			 ::openfl::utils::_AGALMiniAssembler::OpCode v29 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ine",e0,0c,50,00),(int)2,(int)29,(int)897);
HXDLIN( 813)			( ( ::haxe::ds::StringMap)(this30) )->set(HX_("ine",e0,0c,50,00),v29);
            		}
HXLINE( 814)		{
HXLINE( 814)			::Dynamic this31 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 814)			 ::openfl::utils::_AGALMiniAssembler::OpCode v30 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ifg",ea,05,50,00),(int)2,(int)30,(int)897);
HXDLIN( 814)			( ( ::haxe::ds::StringMap)(this31) )->set(HX_("ifg",ea,05,50,00),v30);
            		}
HXLINE( 815)		{
HXLINE( 815)			::Dynamic this32 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 815)			 ::openfl::utils::_AGALMiniAssembler::OpCode v31 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("ifl",ef,05,50,00),(int)2,(int)31,(int)897);
HXDLIN( 815)			( ( ::haxe::ds::StringMap)(this32) )->set(HX_("ifl",ef,05,50,00),v31);
            		}
HXLINE( 816)		{
HXLINE( 816)			::Dynamic this33 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 816)			 ::openfl::utils::_AGALMiniAssembler::OpCode v32 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("els",2c,02,4d,00),(int)0,(int)32,(int)1921);
HXDLIN( 816)			( ( ::haxe::ds::StringMap)(this33) )->set(HX_("els",2c,02,4d,00),v32);
            		}
HXLINE( 817)		{
HXLINE( 817)			::Dynamic this34 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 817)			 ::openfl::utils::_AGALMiniAssembler::OpCode v33 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("eif",82,ff,4c,00),(int)0,(int)33,(int)1409);
HXDLIN( 817)			( ( ::haxe::ds::StringMap)(this34) )->set(HX_("eif",82,ff,4c,00),v33);
            		}
HXLINE( 820)		{
HXLINE( 820)			::Dynamic this35 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 820)			 ::openfl::utils::_AGALMiniAssembler::OpCode v34 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("kil",0e,8d,51,00),(int)1,(int)39,(int)160);
HXDLIN( 820)			( ( ::haxe::ds::StringMap)(this35) )->set(HX_("kil",0e,8d,51,00),v34);
            		}
HXLINE( 821)		{
HXLINE( 821)			::Dynamic this36 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 821)			 ::openfl::utils::_AGALMiniAssembler::OpCode v35 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("tex",e7,5d,58,00),(int)3,(int)40,(int)40);
HXDLIN( 821)			( ( ::haxe::ds::StringMap)(this36) )->set(HX_("tex",e7,5d,58,00),v35);
            		}
HXLINE( 822)		{
HXLINE( 822)			::Dynamic this37 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 822)			 ::openfl::utils::_AGALMiniAssembler::OpCode v36 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sge",51,9d,57,00),(int)3,(int)41,(int)0);
HXDLIN( 822)			( ( ::haxe::ds::StringMap)(this37) )->set(HX_("sge",51,9d,57,00),v36);
            		}
HXLINE( 823)		{
HXLINE( 823)			::Dynamic this38 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 823)			 ::openfl::utils::_AGALMiniAssembler::OpCode v37 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("slt",bb,a1,57,00),(int)3,(int)42,(int)0);
HXDLIN( 823)			( ( ::haxe::ds::StringMap)(this38) )->set(HX_("slt",bb,a1,57,00),v37);
            		}
HXLINE( 824)		{
HXLINE( 824)			::Dynamic this39 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 824)			 ::openfl::utils::_AGALMiniAssembler::OpCode v38 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sgn",5a,9d,57,00),(int)2,(int)43,(int)0);
HXDLIN( 824)			( ( ::haxe::ds::StringMap)(this39) )->set(HX_("sgn",5a,9d,57,00),v38);
            		}
HXLINE( 825)		{
HXLINE( 825)			::Dynamic this40 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 825)			 ::openfl::utils::_AGALMiniAssembler::OpCode v39 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("seq",9f,9b,57,00),(int)3,(int)44,(int)0);
HXDLIN( 825)			( ( ::haxe::ds::StringMap)(this40) )->set(HX_("seq",9f,9b,57,00),v39);
            		}
HXLINE( 826)		{
HXLINE( 826)			::Dynamic this41 = ::openfl::utils::AGALMiniAssembler_obj::OPMAP;
HXDLIN( 826)			 ::openfl::utils::_AGALMiniAssembler::OpCode v40 =  ::openfl::utils::_AGALMiniAssembler::OpCode_obj::__alloc( HX_CTX ,HX_("sne",6a,a3,57,00),(int)3,(int)45,(int)0);
HXDLIN( 826)			( ( ::haxe::ds::StringMap)(this41) )->set(HX_("sne",6a,a3,57,00),v40);
            		}
HXLINE( 828)		{
HXLINE( 828)			::Dynamic this42 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 828)			 ::openfl::utils::_AGALMiniAssembler::Sampler v41 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("rgba",b4,d0,a8,4b),(int)8,(int)0);
HXDLIN( 828)			( ( ::haxe::ds::StringMap)(this42) )->set(HX_("rgba",b4,d0,a8,4b),v41);
            		}
HXLINE( 829)		{
HXLINE( 829)			::Dynamic this43 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 829)			 ::openfl::utils::_AGALMiniAssembler::Sampler v42 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("compressed",81,4c,da,67),(int)8,(int)1);
HXDLIN( 829)			( ( ::haxe::ds::StringMap)(this43) )->set(HX_("compressed",81,4c,da,67),v42);
            		}
HXLINE( 830)		{
HXLINE( 830)			::Dynamic this44 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 830)			 ::openfl::utils::_AGALMiniAssembler::Sampler v43 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("compressedalpha",3d,67,f2,b6),(int)8,(int)2);
HXDLIN( 830)			( ( ::haxe::ds::StringMap)(this44) )->set(HX_("compressedalpha",3d,67,f2,b6),v43);
            		}
HXLINE( 831)		{
HXLINE( 831)			::Dynamic this45 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 831)			 ::openfl::utils::_AGALMiniAssembler::Sampler v44 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("dxt1",d1,c9,74,42),(int)8,(int)1);
HXDLIN( 831)			( ( ::haxe::ds::StringMap)(this45) )->set(HX_("dxt1",d1,c9,74,42),v44);
            		}
HXLINE( 832)		{
HXLINE( 832)			::Dynamic this46 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 832)			 ::openfl::utils::_AGALMiniAssembler::Sampler v45 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("dxt5",d5,c9,74,42),(int)8,(int)2);
HXDLIN( 832)			( ( ::haxe::ds::StringMap)(this46) )->set(HX_("dxt5",d5,c9,74,42),v45);
            		}
HXLINE( 833)		{
HXLINE( 833)			::Dynamic this47 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 833)			 ::openfl::utils::_AGALMiniAssembler::Sampler v46 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("video",7b,14,fc,36),(int)8,(int)3);
HXDLIN( 833)			( ( ::haxe::ds::StringMap)(this47) )->set(HX_("video",7b,14,fc,36),v46);
            		}
HXLINE( 834)		{
HXLINE( 834)			::Dynamic this48 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 834)			 ::openfl::utils::_AGALMiniAssembler::Sampler v47 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("2d",f2,2b,00,00),(int)12,(int)0);
HXDLIN( 834)			( ( ::haxe::ds::StringMap)(this48) )->set(HX_("2d",f2,2b,00,00),v47);
            		}
HXLINE( 835)		{
HXLINE( 835)			::Dynamic this49 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 835)			 ::openfl::utils::_AGALMiniAssembler::Sampler v48 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("3d",d1,2c,00,00),(int)12,(int)2);
HXDLIN( 835)			( ( ::haxe::ds::StringMap)(this49) )->set(HX_("3d",d1,2c,00,00),v48);
            		}
HXLINE( 836)		{
HXLINE( 836)			::Dynamic this50 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 836)			 ::openfl::utils::_AGALMiniAssembler::Sampler v49 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("cube",f5,3c,c9,41),(int)12,(int)1);
HXDLIN( 836)			( ( ::haxe::ds::StringMap)(this50) )->set(HX_("cube",f5,3c,c9,41),v49);
            		}
HXLINE( 837)		{
HXLINE( 837)			::Dynamic this51 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 837)			 ::openfl::utils::_AGALMiniAssembler::Sampler v50 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("mipnearest",4a,21,95,d0),(int)24,(int)1);
HXDLIN( 837)			( ( ::haxe::ds::StringMap)(this51) )->set(HX_("mipnearest",4a,21,95,d0),v50);
            		}
HXLINE( 838)		{
HXLINE( 838)			::Dynamic this52 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 838)			 ::openfl::utils::_AGALMiniAssembler::Sampler v51 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("miplinear",79,ca,7e,64),(int)24,(int)2);
HXDLIN( 838)			( ( ::haxe::ds::StringMap)(this52) )->set(HX_("miplinear",79,ca,7e,64),v51);
            		}
HXLINE( 839)		{
HXLINE( 839)			::Dynamic this53 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 839)			 ::openfl::utils::_AGALMiniAssembler::Sampler v52 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("mipnone",4c,7e,07,76),(int)24,(int)0);
HXDLIN( 839)			( ( ::haxe::ds::StringMap)(this53) )->set(HX_("mipnone",4c,7e,07,76),v52);
            		}
HXLINE( 840)		{
HXLINE( 840)			::Dynamic this54 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 840)			 ::openfl::utils::_AGALMiniAssembler::Sampler v53 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("nomip",f3,8f,c5,9f),(int)24,(int)0);
HXDLIN( 840)			( ( ::haxe::ds::StringMap)(this54) )->set(HX_("nomip",f3,8f,c5,9f),v53);
            		}
HXLINE( 841)		{
HXLINE( 841)			::Dynamic this55 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 841)			 ::openfl::utils::_AGALMiniAssembler::Sampler v54 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("nearest",5e,18,ca,65),(int)28,(int)0);
HXDLIN( 841)			( ( ::haxe::ds::StringMap)(this55) )->set(HX_("nearest",5e,18,ca,65),v54);
            		}
HXLINE( 842)		{
HXLINE( 842)			::Dynamic this56 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 842)			 ::openfl::utils::_AGALMiniAssembler::Sampler v55 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("linear",e5,51,a0,ec),(int)28,(int)1);
HXDLIN( 842)			( ( ::haxe::ds::StringMap)(this56) )->set(HX_("linear",e5,51,a0,ec),v55);
            		}
HXLINE( 843)		{
HXLINE( 843)			::Dynamic this57 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 843)			 ::openfl::utils::_AGALMiniAssembler::Sampler v56 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("anisotropic2x",77,56,26,f5),(int)28,(int)2);
HXDLIN( 843)			( ( ::haxe::ds::StringMap)(this57) )->set(HX_("anisotropic2x",77,56,26,f5),v56);
            		}
HXLINE( 844)		{
HXLINE( 844)			::Dynamic this58 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 844)			 ::openfl::utils::_AGALMiniAssembler::Sampler v57 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("anisotropic4x",35,58,26,f5),(int)28,(int)3);
HXDLIN( 844)			( ( ::haxe::ds::StringMap)(this58) )->set(HX_("anisotropic4x",35,58,26,f5),v57);
            		}
HXLINE( 845)		{
HXLINE( 845)			::Dynamic this59 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 845)			 ::openfl::utils::_AGALMiniAssembler::Sampler v58 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("anisotropic8x",b1,5b,26,f5),(int)28,(int)4);
HXDLIN( 845)			( ( ::haxe::ds::StringMap)(this59) )->set(HX_("anisotropic8x",b1,5b,26,f5),v58);
            		}
HXLINE( 846)		{
HXLINE( 846)			::Dynamic this60 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 846)			 ::openfl::utils::_AGALMiniAssembler::Sampler v59 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("anisotropic16x",62,56,64,8c),(int)28,(int)5);
HXDLIN( 846)			( ( ::haxe::ds::StringMap)(this60) )->set(HX_("anisotropic16x",62,56,64,8c),v59);
            		}
HXLINE( 847)		{
HXLINE( 847)			::Dynamic this61 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 847)			 ::openfl::utils::_AGALMiniAssembler::Sampler v60 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("centroid",40,e0,e5,97),(int)16,(int)1);
HXDLIN( 847)			( ( ::haxe::ds::StringMap)(this61) )->set(HX_("centroid",40,e0,e5,97),v60);
            		}
HXLINE( 848)		{
HXLINE( 848)			::Dynamic this62 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 848)			 ::openfl::utils::_AGALMiniAssembler::Sampler v61 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("single",88,66,21,b9),(int)16,(int)2);
HXDLIN( 848)			( ( ::haxe::ds::StringMap)(this62) )->set(HX_("single",88,66,21,b9),v61);
            		}
HXLINE( 849)		{
HXLINE( 849)			::Dynamic this63 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 849)			 ::openfl::utils::_AGALMiniAssembler::Sampler v62 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("ignoresampler",36,32,06,d4),(int)16,(int)4);
HXDLIN( 849)			( ( ::haxe::ds::StringMap)(this63) )->set(HX_("ignoresampler",36,32,06,d4),v62);
            		}
HXLINE( 850)		{
HXLINE( 850)			::Dynamic this64 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 850)			 ::openfl::utils::_AGALMiniAssembler::Sampler v63 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("repeat",5b,97,7c,06),(int)20,(int)1);
HXDLIN( 850)			( ( ::haxe::ds::StringMap)(this64) )->set(HX_("repeat",5b,97,7c,06),v63);
            		}
HXLINE( 851)		{
HXLINE( 851)			::Dynamic this65 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 851)			 ::openfl::utils::_AGALMiniAssembler::Sampler v64 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("wrap",ca,39,ff,4e),(int)20,(int)1);
HXDLIN( 851)			( ( ::haxe::ds::StringMap)(this65) )->set(HX_("wrap",ca,39,ff,4e),v64);
            		}
HXLINE( 852)		{
HXLINE( 852)			::Dynamic this66 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 852)			 ::openfl::utils::_AGALMiniAssembler::Sampler v65 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("clamp",fb,72,58,48),(int)20,(int)0);
HXDLIN( 852)			( ( ::haxe::ds::StringMap)(this66) )->set(HX_("clamp",fb,72,58,48),v65);
            		}
HXLINE( 853)		{
HXLINE( 853)			::Dynamic this67 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 853)			 ::openfl::utils::_AGALMiniAssembler::Sampler v66 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("clamp_u_repeat_v",a0,8d,a7,28),(int)20,(int)2);
HXDLIN( 853)			( ( ::haxe::ds::StringMap)(this67) )->set(HX_("clamp_u_repeat_v",a0,8d,a7,28),v66);
            		}
HXLINE( 854)		{
HXLINE( 854)			::Dynamic this68 = ::openfl::utils::AGALMiniAssembler_obj::SAMPLEMAP;
HXDLIN( 854)			 ::openfl::utils::_AGALMiniAssembler::Sampler v67 =  ::openfl::utils::_AGALMiniAssembler::Sampler_obj::__alloc( HX_CTX ,HX_("repeat_u_clamp_v",c4,04,17,dd),(int)20,(int)3);
HXDLIN( 854)			( ( ::haxe::ds::StringMap)(this68) )->set(HX_("repeat_u_clamp_v",c4,04,17,dd),v67);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AGALMiniAssembler_obj,init,(void))


hx::ObjectPtr< AGALMiniAssembler_obj > AGALMiniAssembler_obj::__new(hx::Null< bool >  __o_debugging) {
	hx::ObjectPtr< AGALMiniAssembler_obj > __this = new AGALMiniAssembler_obj();
	__this->__construct(__o_debugging);
	return __this;
}

hx::ObjectPtr< AGALMiniAssembler_obj > AGALMiniAssembler_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< bool >  __o_debugging) {
	AGALMiniAssembler_obj *__this = (AGALMiniAssembler_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AGALMiniAssembler_obj), true, "openfl.utils.AGALMiniAssembler"));
	*(void **)__this = AGALMiniAssembler_obj::_hx_vtable;
	__this->__construct(__o_debugging);
	return __this;
}

AGALMiniAssembler_obj::AGALMiniAssembler_obj()
{
}

void AGALMiniAssembler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AGALMiniAssembler);
	HX_MARK_MEMBER_NAME(agalcode,"agalcode");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(verbose,"verbose");
	HX_MARK_MEMBER_NAME(debugEnabled,"debugEnabled");
	HX_MARK_END_CLASS();
}

void AGALMiniAssembler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(agalcode,"agalcode");
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(verbose,"verbose");
	HX_VISIT_MEMBER_NAME(debugEnabled,"debugEnabled");
}

hx::Val AGALMiniAssembler_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error ); }
		if (HX_FIELD_EQ(inName,"match") ) { return hx::Val( match_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { return hx::Val( verbose ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"agalcode") ) { return hx::Val( agalcode ); }
		if (HX_FIELD_EQ(inName,"assemble") ) { return hx::Val( assemble_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"assemble2") ) { return hx::Val( assemble2_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initregmap") ) { return hx::Val( initregmap_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"debugEnabled") ) { return hx::Val( debugEnabled ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AGALMiniAssembler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"OPMAP") ) { outValue = ( OPMAP ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"REGMAP") ) { outValue = ( REGMAP ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"SAMPLEMAP") ) { outValue = ( SAMPLEMAP ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
	}
	return false;
}

hx::Val AGALMiniAssembler_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { verbose=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"agalcode") ) { agalcode=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"debugEnabled") ) { debugEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AGALMiniAssembler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"OPMAP") ) { OPMAP=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"REGMAP") ) { REGMAP=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"SAMPLEMAP") ) { SAMPLEMAP=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void AGALMiniAssembler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("agalcode","\xfe","\x5c","\xe9","\xa0"));
	outFields->push(HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"));
	outFields->push(HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"));
	outFields->push(HX_HCSTRING("debugEnabled","\x6e","\x1a","\x2c","\xda"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AGALMiniAssembler_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(AGALMiniAssembler_obj,agalcode),HX_HCSTRING("agalcode","\xfe","\x5c","\xe9","\xa0")},
	{hx::fsString,(int)offsetof(AGALMiniAssembler_obj,error),HX_HCSTRING("error","\xc8","\xcb","\x29","\x73")},
	{hx::fsBool,(int)offsetof(AGALMiniAssembler_obj,verbose),HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71")},
	{hx::fsBool,(int)offsetof(AGALMiniAssembler_obj,debugEnabled),HX_HCSTRING("debugEnabled","\x6e","\x1a","\x2c","\xda")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo AGALMiniAssembler_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &AGALMiniAssembler_obj::OPMAP,HX_HCSTRING("OPMAP","\xfb","\x8b","\xc3","\xb1")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &AGALMiniAssembler_obj::REGMAP,HX_HCSTRING("REGMAP","\xc8","\x69","\x12","\xb3")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &AGALMiniAssembler_obj::SAMPLEMAP,HX_HCSTRING("SAMPLEMAP","\x92","\x10","\xe0","\x58")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::MAX_NESTING,HX_HCSTRING("MAX_NESTING","\x2f","\xf3","\xac","\x96")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::MAX_OPCODES,HX_HCSTRING("MAX_OPCODES","\xca","\x35","\x74","\xec")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::FRAGMENT,HX_HCSTRING("FRAGMENT","\xd0","\xef","\x6a","\x07")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::VERTEX,HX_HCSTRING("VERTEX","\x64","\x87","\xca","\x53")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::SAMPLER_TYPE_SHIFT,HX_HCSTRING("SAMPLER_TYPE_SHIFT","\x14","\x7b","\x00","\xa2")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::SAMPLER_DIM_SHIFT,HX_HCSTRING("SAMPLER_DIM_SHIFT","\x74","\xd9","\x2e","\x8e")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::SAMPLER_SPECIAL_SHIFT,HX_HCSTRING("SAMPLER_SPECIAL_SHIFT","\xa5","\x21","\x3b","\x19")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::SAMPLER_REPEAT_SHIFT,HX_HCSTRING("SAMPLER_REPEAT_SHIFT","\x35","\xae","\xb2","\x55")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::SAMPLER_MIPMAP_SHIFT,HX_HCSTRING("SAMPLER_MIPMAP_SHIFT","\x22","\xa4","\xa4","\x01")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::SAMPLER_FILTER_SHIFT,HX_HCSTRING("SAMPLER_FILTER_SHIFT","\x52","\x5a","\xcd","\x30")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::REG_WRITE,HX_HCSTRING("REG_WRITE","\x34","\x40","\x8f","\xce")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::REG_READ,HX_HCSTRING("REG_READ","\x81","\x5d","\x41","\xd4")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::REG_FRAG,HX_HCSTRING("REG_FRAG","\x5d","\xab","\x5c","\xcc")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::REG_VERT,HX_HCSTRING("REG_VERT","\xdc","\x46","\xe6","\xd6")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_SCALAR,HX_HCSTRING("OP_SCALAR","\xca","\xb5","\x62","\x55")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_SPECIAL_TEX,HX_HCSTRING("OP_SPECIAL_TEX","\x03","\xae","\xa5","\xd2")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_SPECIAL_MATRIX,HX_HCSTRING("OP_SPECIAL_MATRIX","\x85","\x7b","\x16","\x8b")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_FRAG_ONLY,HX_HCSTRING("OP_FRAG_ONLY","\xfb","\x46","\x30","\xc5")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_VERT_ONLY,HX_HCSTRING("OP_VERT_ONLY","\x1c","\x9f","\x47","\x02")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_NO_DEST,HX_HCSTRING("OP_NO_DEST","\x02","\x1a","\x18","\x9e")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_VERSION2,HX_HCSTRING("OP_VERSION2","\x58","\x64","\xbc","\x53")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_INCNEST,HX_HCSTRING("OP_INCNEST","\xf8","\x4f","\x35","\x4f")},
	{hx::fsInt,(void *) &AGALMiniAssembler_obj::OP_DECNEST,HX_HCSTRING("OP_DECNEST","\xdc","\xbe","\x13","\xe6")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::MOV,HX_HCSTRING("MOV","\xb4","\xb2","\x3a","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::ADD,HX_HCSTRING("ADD","\x01","\x8e","\x31","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SUB,HX_HCSTRING("SUB","\x60","\x45","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::MUL,HX_HCSTRING("MUL","\xe4","\xb7","\x3a","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::DIV,HX_HCSTRING("DIV","\x31","\xd9","\x33","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::RCP,HX_HCSTRING("RCP","\x7f","\x73","\x3e","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::MIN,HX_HCSTRING("MIN","\x72","\xad","\x3a","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::MAX,HX_HCSTRING("MAX","\x84","\xa6","\x3a","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::FRC,HX_HCSTRING("FRC","\x77","\x65","\x35","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SQT,HX_HCSTRING("SQT","\xf6","\x41","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::RSQ,HX_HCSTRING("RSQ","\x70","\x81","\x3e","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::POW,HX_HCSTRING("POW","\x78","\xf9","\x3c","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::LOG,HX_HCSTRING("LOG","\x64","\xf0","\x39","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::EXP,HX_HCSTRING("EXP","\x7d","\xa8","\x34","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::NRM,HX_HCSTRING("NRM","\x89","\x77","\x3b","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SIN,HX_HCSTRING("SIN","\xf8","\x3a","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::COS,HX_HCSTRING("COS","\x27","\x1c","\x33","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::CRS,HX_HCSTRING("CRS","\xc4","\x1e","\x33","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::DP3,HX_HCSTRING("DP3","\x27","\xdf","\x33","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::DP4,HX_HCSTRING("DP4","\x28","\xdf","\x33","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::ABS,HX_HCSTRING("ABS","\x52","\x8c","\x31","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::NEG,HX_HCSTRING("NEG","\x30","\x6c","\x3b","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SAT,HX_HCSTRING("SAT","\x06","\x34","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::M33,HX_HCSTRING("M33","\x2d","\x9a","\x3a","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::M44,HX_HCSTRING("M44","\x0d","\x9b","\x3a","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::M34,HX_HCSTRING("M34","\x2e","\x9a","\x3a","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::DDX,HX_HCSTRING("DDX","\xd8","\xd4","\x33","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::DDY,HX_HCSTRING("DDY","\xd9","\xd4","\x33","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::IFE,HX_HCSTRING("IFE","\xc8","\xa1","\x37","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::INE,HX_HCSTRING("INE","\xc0","\xa8","\x37","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::IFG,HX_HCSTRING("IFG","\xca","\xa1","\x37","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::IFL,HX_HCSTRING("IFL","\xcf","\xa1","\x37","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::IEG,HX_HCSTRING("IEG","\xeb","\xa0","\x37","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::IEL,HX_HCSTRING("IEL","\xf0","\xa0","\x37","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::ELS,HX_HCSTRING("ELS","\x0c","\x9e","\x34","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::EIF,HX_HCSTRING("EIF","\x62","\x9b","\x34","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::TED,HX_HCSTRING("TED","\xb3","\xf9","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::KIL,HX_HCSTRING("KIL","\xee","\x28","\x39","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::TEX,HX_HCSTRING("TEX","\xc7","\xf9","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SGE,HX_HCSTRING("SGE","\x31","\x39","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SLT,HX_HCSTRING("SLT","\x9b","\x3d","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SGN,HX_HCSTRING("SGN","\x3a","\x39","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SEQ,HX_HCSTRING("SEQ","\x7f","\x37","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SNE,HX_HCSTRING("SNE","\x4a","\x3f","\x3f","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::VA,HX_HCSTRING("VA","\x2b","\x4b","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::VC,HX_HCSTRING("VC","\x2d","\x4b","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::VT,HX_HCSTRING("VT","\x3e","\x4b","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::VO,HX_HCSTRING("VO","\x39","\x4b","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::VI,HX_HCSTRING("VI","\x33","\x4b","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::FC,HX_HCSTRING("FC","\x3d","\x3d","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::FT,HX_HCSTRING("FT","\x4e","\x3d","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::FS,HX_HCSTRING("FS","\x4d","\x3d","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::FO,HX_HCSTRING("FO","\x49","\x3d","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::FD,HX_HCSTRING("FD","\x3e","\x3d","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::IID,HX_HCSTRING("IID","\x64","\xa4","\x37","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::D2,HX_HCSTRING("D2","\x6e","\x3b","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::D3,HX_HCSTRING("D3","\x6f","\x3b","\x00","\x00")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::CUBE,HX_HCSTRING("CUBE","\xf5","\x04","\x8a","\x2c")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::MIPNEAREST,HX_HCSTRING("MIPNEAREST","\x4a","\x95","\x9e","\xc2")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::MIPLINEAR,HX_HCSTRING("MIPLINEAR","\x59","\x3a","\xd7","\x5f")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::MIPNONE,HX_HCSTRING("MIPNONE","\x2c","\x52","\xdb","\xf5")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::NOMIP,HX_HCSTRING("NOMIP","\xd3","\xc7","\xb3","\x1d")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::NEAREST,HX_HCSTRING("NEAREST","\x3e","\xec","\x9d","\xe5")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::LINEAR,HX_HCSTRING("LINEAR","\xe5","\xfd","\x22","\x9f")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::ANISOTROPIC2X,HX_HCSTRING("ANISOTROPIC2X","\x37","\x1a","\x65","\xdb")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::ANISOTROPIC4X,HX_HCSTRING("ANISOTROPIC4X","\xf5","\x1b","\x65","\xdb")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::ANISOTROPIC8X,HX_HCSTRING("ANISOTROPIC8X","\x71","\x1f","\x65","\xdb")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::ANISOTROPIC16X,HX_HCSTRING("ANISOTROPIC16X","\x62","\xf6","\x10","\x1d")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::CENTROID,HX_HCSTRING("CENTROID","\x40","\x70","\x6b","\xf1")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::SINGLE,HX_HCSTRING("SINGLE","\x88","\x12","\xa4","\x6b")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::IGNORESAMPLER,HX_HCSTRING("IGNORESAMPLER","\x16","\xda","\x44","\xba")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::REPEAT,HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::WRAP,HX_HCSTRING("WRAP","\xca","\x01","\xc0","\x39")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::CLAMP,HX_HCSTRING("CLAMP","\xdb","\xaa","\x46","\xc6")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::REPEAT_U_CLAMP_V,HX_HCSTRING("REPEAT_U_CLAMP_V","\x64","\x80","\xcf","\x17")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::CLAMP_U_REPEAT_V,HX_HCSTRING("CLAMP_U_REPEAT_V","\xc0","\x51","\xbd","\xad")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::RGBA,HX_HCSTRING("RGBA","\xb4","\x98","\x69","\x36")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::COMPRESSED,HX_HCSTRING("COMPRESSED","\x81","\xc0","\xe3","\x59")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::COMPRESSEDALPHA,HX_HCSTRING("COMPRESSEDALPHA","\x1d","\xab","\x12","\xa8")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::DXT1,HX_HCSTRING("DXT1","\xf1","\x91","\x35","\x2d")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::DXT5,HX_HCSTRING("DXT5","\xf5","\x91","\x35","\x2d")},
	{hx::fsString,(void *) &AGALMiniAssembler_obj::VIDEO,HX_HCSTRING("VIDEO","\x5b","\x4c","\xea","\xb4")},
	{hx::fsBool,(void *) &AGALMiniAssembler_obj::initialized,HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String AGALMiniAssembler_obj_sMemberFields[] = {
	HX_HCSTRING("agalcode","\xfe","\x5c","\xe9","\xa0"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"),
	HX_HCSTRING("debugEnabled","\x6e","\x1a","\x2c","\xda"),
	HX_HCSTRING("assemble2","\xe0","\x46","\x18","\xb3"),
	HX_HCSTRING("assemble","\x12","\xa9","\x1b","\xc5"),
	HX_HCSTRING("initregmap","\xd8","\xa4","\x40","\xd0"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	::String(null()) };

static void AGALMiniAssembler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OPMAP,"OPMAP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::REGMAP,"REGMAP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLEMAP,"SAMPLEMAP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MAX_NESTING,"MAX_NESTING");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MAX_OPCODES,"MAX_OPCODES");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::FRAGMENT,"FRAGMENT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::VERTEX,"VERTEX");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_TYPE_SHIFT,"SAMPLER_TYPE_SHIFT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_DIM_SHIFT,"SAMPLER_DIM_SHIFT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_SPECIAL_SHIFT,"SAMPLER_SPECIAL_SHIFT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_REPEAT_SHIFT,"SAMPLER_REPEAT_SHIFT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_MIPMAP_SHIFT,"SAMPLER_MIPMAP_SHIFT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_FILTER_SHIFT,"SAMPLER_FILTER_SHIFT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::REG_WRITE,"REG_WRITE");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::REG_READ,"REG_READ");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::REG_FRAG,"REG_FRAG");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::REG_VERT,"REG_VERT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_SCALAR,"OP_SCALAR");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_SPECIAL_TEX,"OP_SPECIAL_TEX");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_SPECIAL_MATRIX,"OP_SPECIAL_MATRIX");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_FRAG_ONLY,"OP_FRAG_ONLY");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_VERT_ONLY,"OP_VERT_ONLY");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_NO_DEST,"OP_NO_DEST");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_VERSION2,"OP_VERSION2");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_INCNEST,"OP_INCNEST");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::OP_DECNEST,"OP_DECNEST");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MOV,"MOV");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::ADD,"ADD");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SUB,"SUB");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MUL,"MUL");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::DIV,"DIV");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::RCP,"RCP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MIN,"MIN");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MAX,"MAX");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::FRC,"FRC");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SQT,"SQT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::RSQ,"RSQ");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::POW,"POW");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::LOG,"LOG");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::EXP,"EXP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::NRM,"NRM");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SIN,"SIN");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::COS,"COS");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::CRS,"CRS");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::DP3,"DP3");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::DP4,"DP4");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::ABS,"ABS");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::NEG,"NEG");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SAT,"SAT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::M33,"M33");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::M44,"M44");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::M34,"M34");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::DDX,"DDX");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::DDY,"DDY");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::IFE,"IFE");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::INE,"INE");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::IFG,"IFG");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::IFL,"IFL");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::IEG,"IEG");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::IEL,"IEL");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::ELS,"ELS");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::EIF,"EIF");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::TED,"TED");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::KIL,"KIL");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::TEX,"TEX");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SGE,"SGE");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SLT,"SLT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SGN,"SGN");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SEQ,"SEQ");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SNE,"SNE");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::VA,"VA");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::VC,"VC");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::VT,"VT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::VO,"VO");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::VI,"VI");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::FC,"FC");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::FT,"FT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::FS,"FS");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::FO,"FO");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::FD,"FD");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::IID,"IID");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::D2,"D2");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::D3,"D3");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::CUBE,"CUBE");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MIPNEAREST,"MIPNEAREST");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MIPLINEAR,"MIPLINEAR");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::MIPNONE,"MIPNONE");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::NOMIP,"NOMIP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::NEAREST,"NEAREST");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::LINEAR,"LINEAR");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::ANISOTROPIC2X,"ANISOTROPIC2X");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::ANISOTROPIC4X,"ANISOTROPIC4X");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::ANISOTROPIC8X,"ANISOTROPIC8X");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::ANISOTROPIC16X,"ANISOTROPIC16X");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::CENTROID,"CENTROID");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::SINGLE,"SINGLE");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::IGNORESAMPLER,"IGNORESAMPLER");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::REPEAT,"REPEAT");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::WRAP,"WRAP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::CLAMP,"CLAMP");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::REPEAT_U_CLAMP_V,"REPEAT_U_CLAMP_V");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::CLAMP_U_REPEAT_V,"CLAMP_U_REPEAT_V");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::RGBA,"RGBA");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::COMPRESSED,"COMPRESSED");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::COMPRESSEDALPHA,"COMPRESSEDALPHA");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::DXT1,"DXT1");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::DXT5,"DXT5");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::VIDEO,"VIDEO");
	HX_MARK_MEMBER_NAME(AGALMiniAssembler_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AGALMiniAssembler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OPMAP,"OPMAP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::REGMAP,"REGMAP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLEMAP,"SAMPLEMAP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MAX_NESTING,"MAX_NESTING");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MAX_OPCODES,"MAX_OPCODES");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::FRAGMENT,"FRAGMENT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::VERTEX,"VERTEX");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_TYPE_SHIFT,"SAMPLER_TYPE_SHIFT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_DIM_SHIFT,"SAMPLER_DIM_SHIFT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_SPECIAL_SHIFT,"SAMPLER_SPECIAL_SHIFT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_REPEAT_SHIFT,"SAMPLER_REPEAT_SHIFT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_MIPMAP_SHIFT,"SAMPLER_MIPMAP_SHIFT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAMPLER_FILTER_SHIFT,"SAMPLER_FILTER_SHIFT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::REG_WRITE,"REG_WRITE");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::REG_READ,"REG_READ");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::REG_FRAG,"REG_FRAG");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::REG_VERT,"REG_VERT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_SCALAR,"OP_SCALAR");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_SPECIAL_TEX,"OP_SPECIAL_TEX");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_SPECIAL_MATRIX,"OP_SPECIAL_MATRIX");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_FRAG_ONLY,"OP_FRAG_ONLY");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_VERT_ONLY,"OP_VERT_ONLY");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_NO_DEST,"OP_NO_DEST");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_VERSION2,"OP_VERSION2");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_INCNEST,"OP_INCNEST");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::OP_DECNEST,"OP_DECNEST");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MOV,"MOV");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::ADD,"ADD");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SUB,"SUB");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MUL,"MUL");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::DIV,"DIV");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::RCP,"RCP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MIN,"MIN");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MAX,"MAX");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::FRC,"FRC");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SQT,"SQT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::RSQ,"RSQ");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::POW,"POW");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::LOG,"LOG");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::EXP,"EXP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::NRM,"NRM");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SIN,"SIN");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::COS,"COS");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::CRS,"CRS");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::DP3,"DP3");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::DP4,"DP4");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::ABS,"ABS");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::NEG,"NEG");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SAT,"SAT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::M33,"M33");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::M44,"M44");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::M34,"M34");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::DDX,"DDX");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::DDY,"DDY");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::IFE,"IFE");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::INE,"INE");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::IFG,"IFG");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::IFL,"IFL");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::IEG,"IEG");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::IEL,"IEL");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::ELS,"ELS");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::EIF,"EIF");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::TED,"TED");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::KIL,"KIL");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::TEX,"TEX");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SGE,"SGE");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SLT,"SLT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SGN,"SGN");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SEQ,"SEQ");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SNE,"SNE");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::VA,"VA");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::VC,"VC");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::VT,"VT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::VO,"VO");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::VI,"VI");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::FC,"FC");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::FT,"FT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::FS,"FS");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::FO,"FO");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::FD,"FD");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::IID,"IID");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::D2,"D2");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::D3,"D3");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::CUBE,"CUBE");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MIPNEAREST,"MIPNEAREST");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MIPLINEAR,"MIPLINEAR");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::MIPNONE,"MIPNONE");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::NOMIP,"NOMIP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::NEAREST,"NEAREST");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::LINEAR,"LINEAR");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::ANISOTROPIC2X,"ANISOTROPIC2X");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::ANISOTROPIC4X,"ANISOTROPIC4X");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::ANISOTROPIC8X,"ANISOTROPIC8X");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::ANISOTROPIC16X,"ANISOTROPIC16X");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::CENTROID,"CENTROID");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::SINGLE,"SINGLE");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::IGNORESAMPLER,"IGNORESAMPLER");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::REPEAT,"REPEAT");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::WRAP,"WRAP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::CLAMP,"CLAMP");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::REPEAT_U_CLAMP_V,"REPEAT_U_CLAMP_V");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::CLAMP_U_REPEAT_V,"CLAMP_U_REPEAT_V");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::RGBA,"RGBA");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::COMPRESSED,"COMPRESSED");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::COMPRESSEDALPHA,"COMPRESSEDALPHA");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::DXT1,"DXT1");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::DXT5,"DXT5");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::VIDEO,"VIDEO");
	HX_VISIT_MEMBER_NAME(AGALMiniAssembler_obj::initialized,"initialized");
};

#endif

hx::Class AGALMiniAssembler_obj::__mClass;

static ::String AGALMiniAssembler_obj_sStaticFields[] = {
	HX_HCSTRING("OPMAP","\xfb","\x8b","\xc3","\xb1"),
	HX_HCSTRING("REGMAP","\xc8","\x69","\x12","\xb3"),
	HX_HCSTRING("SAMPLEMAP","\x92","\x10","\xe0","\x58"),
	HX_HCSTRING("MAX_NESTING","\x2f","\xf3","\xac","\x96"),
	HX_HCSTRING("MAX_OPCODES","\xca","\x35","\x74","\xec"),
	HX_HCSTRING("FRAGMENT","\xd0","\xef","\x6a","\x07"),
	HX_HCSTRING("VERTEX","\x64","\x87","\xca","\x53"),
	HX_HCSTRING("SAMPLER_TYPE_SHIFT","\x14","\x7b","\x00","\xa2"),
	HX_HCSTRING("SAMPLER_DIM_SHIFT","\x74","\xd9","\x2e","\x8e"),
	HX_HCSTRING("SAMPLER_SPECIAL_SHIFT","\xa5","\x21","\x3b","\x19"),
	HX_HCSTRING("SAMPLER_REPEAT_SHIFT","\x35","\xae","\xb2","\x55"),
	HX_HCSTRING("SAMPLER_MIPMAP_SHIFT","\x22","\xa4","\xa4","\x01"),
	HX_HCSTRING("SAMPLER_FILTER_SHIFT","\x52","\x5a","\xcd","\x30"),
	HX_HCSTRING("REG_WRITE","\x34","\x40","\x8f","\xce"),
	HX_HCSTRING("REG_READ","\x81","\x5d","\x41","\xd4"),
	HX_HCSTRING("REG_FRAG","\x5d","\xab","\x5c","\xcc"),
	HX_HCSTRING("REG_VERT","\xdc","\x46","\xe6","\xd6"),
	HX_HCSTRING("OP_SCALAR","\xca","\xb5","\x62","\x55"),
	HX_HCSTRING("OP_SPECIAL_TEX","\x03","\xae","\xa5","\xd2"),
	HX_HCSTRING("OP_SPECIAL_MATRIX","\x85","\x7b","\x16","\x8b"),
	HX_HCSTRING("OP_FRAG_ONLY","\xfb","\x46","\x30","\xc5"),
	HX_HCSTRING("OP_VERT_ONLY","\x1c","\x9f","\x47","\x02"),
	HX_HCSTRING("OP_NO_DEST","\x02","\x1a","\x18","\x9e"),
	HX_HCSTRING("OP_VERSION2","\x58","\x64","\xbc","\x53"),
	HX_HCSTRING("OP_INCNEST","\xf8","\x4f","\x35","\x4f"),
	HX_HCSTRING("OP_DECNEST","\xdc","\xbe","\x13","\xe6"),
	HX_HCSTRING("MOV","\xb4","\xb2","\x3a","\x00"),
	HX_HCSTRING("ADD","\x01","\x8e","\x31","\x00"),
	HX_HCSTRING("SUB","\x60","\x45","\x3f","\x00"),
	HX_HCSTRING("MUL","\xe4","\xb7","\x3a","\x00"),
	HX_HCSTRING("DIV","\x31","\xd9","\x33","\x00"),
	HX_HCSTRING("RCP","\x7f","\x73","\x3e","\x00"),
	HX_HCSTRING("MIN","\x72","\xad","\x3a","\x00"),
	HX_HCSTRING("MAX","\x84","\xa6","\x3a","\x00"),
	HX_HCSTRING("FRC","\x77","\x65","\x35","\x00"),
	HX_HCSTRING("SQT","\xf6","\x41","\x3f","\x00"),
	HX_HCSTRING("RSQ","\x70","\x81","\x3e","\x00"),
	HX_HCSTRING("POW","\x78","\xf9","\x3c","\x00"),
	HX_HCSTRING("LOG","\x64","\xf0","\x39","\x00"),
	HX_HCSTRING("EXP","\x7d","\xa8","\x34","\x00"),
	HX_HCSTRING("NRM","\x89","\x77","\x3b","\x00"),
	HX_HCSTRING("SIN","\xf8","\x3a","\x3f","\x00"),
	HX_HCSTRING("COS","\x27","\x1c","\x33","\x00"),
	HX_HCSTRING("CRS","\xc4","\x1e","\x33","\x00"),
	HX_HCSTRING("DP3","\x27","\xdf","\x33","\x00"),
	HX_HCSTRING("DP4","\x28","\xdf","\x33","\x00"),
	HX_HCSTRING("ABS","\x52","\x8c","\x31","\x00"),
	HX_HCSTRING("NEG","\x30","\x6c","\x3b","\x00"),
	HX_HCSTRING("SAT","\x06","\x34","\x3f","\x00"),
	HX_HCSTRING("M33","\x2d","\x9a","\x3a","\x00"),
	HX_HCSTRING("M44","\x0d","\x9b","\x3a","\x00"),
	HX_HCSTRING("M34","\x2e","\x9a","\x3a","\x00"),
	HX_HCSTRING("DDX","\xd8","\xd4","\x33","\x00"),
	HX_HCSTRING("DDY","\xd9","\xd4","\x33","\x00"),
	HX_HCSTRING("IFE","\xc8","\xa1","\x37","\x00"),
	HX_HCSTRING("INE","\xc0","\xa8","\x37","\x00"),
	HX_HCSTRING("IFG","\xca","\xa1","\x37","\x00"),
	HX_HCSTRING("IFL","\xcf","\xa1","\x37","\x00"),
	HX_HCSTRING("IEG","\xeb","\xa0","\x37","\x00"),
	HX_HCSTRING("IEL","\xf0","\xa0","\x37","\x00"),
	HX_HCSTRING("ELS","\x0c","\x9e","\x34","\x00"),
	HX_HCSTRING("EIF","\x62","\x9b","\x34","\x00"),
	HX_HCSTRING("TED","\xb3","\xf9","\x3f","\x00"),
	HX_HCSTRING("KIL","\xee","\x28","\x39","\x00"),
	HX_HCSTRING("TEX","\xc7","\xf9","\x3f","\x00"),
	HX_HCSTRING("SGE","\x31","\x39","\x3f","\x00"),
	HX_HCSTRING("SLT","\x9b","\x3d","\x3f","\x00"),
	HX_HCSTRING("SGN","\x3a","\x39","\x3f","\x00"),
	HX_HCSTRING("SEQ","\x7f","\x37","\x3f","\x00"),
	HX_HCSTRING("SNE","\x4a","\x3f","\x3f","\x00"),
	HX_HCSTRING("VA","\x2b","\x4b","\x00","\x00"),
	HX_HCSTRING("VC","\x2d","\x4b","\x00","\x00"),
	HX_HCSTRING("VT","\x3e","\x4b","\x00","\x00"),
	HX_HCSTRING("VO","\x39","\x4b","\x00","\x00"),
	HX_HCSTRING("VI","\x33","\x4b","\x00","\x00"),
	HX_HCSTRING("FC","\x3d","\x3d","\x00","\x00"),
	HX_HCSTRING("FT","\x4e","\x3d","\x00","\x00"),
	HX_HCSTRING("FS","\x4d","\x3d","\x00","\x00"),
	HX_HCSTRING("FO","\x49","\x3d","\x00","\x00"),
	HX_HCSTRING("FD","\x3e","\x3d","\x00","\x00"),
	HX_HCSTRING("IID","\x64","\xa4","\x37","\x00"),
	HX_HCSTRING("D2","\x6e","\x3b","\x00","\x00"),
	HX_HCSTRING("D3","\x6f","\x3b","\x00","\x00"),
	HX_HCSTRING("CUBE","\xf5","\x04","\x8a","\x2c"),
	HX_HCSTRING("MIPNEAREST","\x4a","\x95","\x9e","\xc2"),
	HX_HCSTRING("MIPLINEAR","\x59","\x3a","\xd7","\x5f"),
	HX_HCSTRING("MIPNONE","\x2c","\x52","\xdb","\xf5"),
	HX_HCSTRING("NOMIP","\xd3","\xc7","\xb3","\x1d"),
	HX_HCSTRING("NEAREST","\x3e","\xec","\x9d","\xe5"),
	HX_HCSTRING("LINEAR","\xe5","\xfd","\x22","\x9f"),
	HX_HCSTRING("ANISOTROPIC2X","\x37","\x1a","\x65","\xdb"),
	HX_HCSTRING("ANISOTROPIC4X","\xf5","\x1b","\x65","\xdb"),
	HX_HCSTRING("ANISOTROPIC8X","\x71","\x1f","\x65","\xdb"),
	HX_HCSTRING("ANISOTROPIC16X","\x62","\xf6","\x10","\x1d"),
	HX_HCSTRING("CENTROID","\x40","\x70","\x6b","\xf1"),
	HX_HCSTRING("SINGLE","\x88","\x12","\xa4","\x6b"),
	HX_HCSTRING("IGNORESAMPLER","\x16","\xda","\x44","\xba"),
	HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8"),
	HX_HCSTRING("WRAP","\xca","\x01","\xc0","\x39"),
	HX_HCSTRING("CLAMP","\xdb","\xaa","\x46","\xc6"),
	HX_HCSTRING("REPEAT_U_CLAMP_V","\x64","\x80","\xcf","\x17"),
	HX_HCSTRING("CLAMP_U_REPEAT_V","\xc0","\x51","\xbd","\xad"),
	HX_HCSTRING("RGBA","\xb4","\x98","\x69","\x36"),
	HX_HCSTRING("COMPRESSED","\x81","\xc0","\xe3","\x59"),
	HX_HCSTRING("COMPRESSEDALPHA","\x1d","\xab","\x12","\xa8"),
	HX_HCSTRING("DXT1","\xf1","\x91","\x35","\x2d"),
	HX_HCSTRING("DXT5","\xf5","\x91","\x35","\x2d"),
	HX_HCSTRING("VIDEO","\x5b","\x4c","\xea","\xb4"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null())
};

void AGALMiniAssembler_obj::__register()
{
	hx::Object *dummy = new AGALMiniAssembler_obj;
	AGALMiniAssembler_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.utils.AGALMiniAssembler","\x1d","\xf7","\xbb","\x62");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AGALMiniAssembler_obj::__GetStatic;
	__mClass->mSetStaticField = &AGALMiniAssembler_obj::__SetStatic;
	__mClass->mMarkFunc = AGALMiniAssembler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AGALMiniAssembler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AGALMiniAssembler_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AGALMiniAssembler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AGALMiniAssembler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AGALMiniAssembler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AGALMiniAssembler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AGALMiniAssembler_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_44_boot)
HXDLIN(  44)		OPMAP =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_45_boot)
HXDLIN(  45)		REGMAP =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_878a01ff4ba15759_46_boot)
HXDLIN(  46)		SAMPLEMAP =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_48_boot)
HXDLIN(  48)		MAX_NESTING = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_49_boot)
HXDLIN(  49)		MAX_OPCODES = (int)4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_51_boot)
HXDLIN(  51)		FRAGMENT = HX_("fragment",d0,5f,e5,ad);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_52_boot)
HXDLIN(  52)		VERTEX = HX_("vertex",64,db,47,a1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_55_boot)
HXDLIN(  55)		SAMPLER_TYPE_SHIFT = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_56_boot)
HXDLIN(  56)		SAMPLER_DIM_SHIFT = (int)12;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_57_boot)
HXDLIN(  57)		SAMPLER_SPECIAL_SHIFT = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_58_boot)
HXDLIN(  58)		SAMPLER_REPEAT_SHIFT = (int)20;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_59_boot)
HXDLIN(  59)		SAMPLER_MIPMAP_SHIFT = (int)24;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_60_boot)
HXDLIN(  60)		SAMPLER_FILTER_SHIFT = (int)28;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_63_boot)
HXDLIN(  63)		REG_WRITE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_64_boot)
HXDLIN(  64)		REG_READ = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_65_boot)
HXDLIN(  65)		REG_FRAG = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_66_boot)
HXDLIN(  66)		REG_VERT = (int)64;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_69_boot)
HXDLIN(  69)		OP_SCALAR = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_70_boot)
HXDLIN(  70)		OP_SPECIAL_TEX = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_71_boot)
HXDLIN(  71)		OP_SPECIAL_MATRIX = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_72_boot)
HXDLIN(  72)		OP_FRAG_ONLY = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_73_boot)
HXDLIN(  73)		OP_VERT_ONLY = (int)64;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_74_boot)
HXDLIN(  74)		OP_NO_DEST = (int)128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_75_boot)
HXDLIN(  75)		OP_VERSION2 = (int)256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_76_boot)
HXDLIN(  76)		OP_INCNEST = (int)512;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_77_boot)
HXDLIN(  77)		OP_DECNEST = (int)1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_80_boot)
HXDLIN(  80)		MOV = HX_("mov",d4,16,53,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_81_boot)
HXDLIN(  81)		ADD = HX_("add",21,f2,49,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_82_boot)
HXDLIN(  82)		SUB = HX_("sub",80,a9,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_83_boot)
HXDLIN(  83)		MUL = HX_("mul",04,1c,53,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_84_boot)
HXDLIN(  84)		DIV = HX_("div",51,3d,4c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_85_boot)
HXDLIN(  85)		RCP = HX_("rcp",9f,d7,56,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_86_boot)
HXDLIN(  86)		MIN = HX_("min",92,11,53,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_87_boot)
HXDLIN(  87)		MAX = HX_("max",a4,0a,53,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_88_boot)
HXDLIN(  88)		FRC = HX_("frc",97,c9,4d,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_89_boot)
HXDLIN(  89)		SQT = HX_("sqt",16,a6,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_90_boot)
HXDLIN(  90)		RSQ = HX_("rsq",90,e5,56,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_91_boot)
HXDLIN(  91)		POW = HX_("pow",98,5d,55,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_92_boot)
HXDLIN(  92)		LOG = HX_("log",84,54,52,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_93_boot)
HXDLIN(  93)		EXP = HX_("exp",9d,0c,4d,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_94_boot)
HXDLIN(  94)		NRM = HX_("nrm",a9,db,53,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_95_boot)
HXDLIN(  95)		SIN = HX_("sin",18,9f,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_96_boot)
HXDLIN(  96)		COS = HX_("cos",47,80,4b,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_97_boot)
HXDLIN(  97)		CRS = HX_("crs",e4,82,4b,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_98_boot)
HXDLIN(  98)		DP3 = HX_("dp3",27,43,4c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_99_boot)
HXDLIN(  99)		DP4 = HX_("dp4",28,43,4c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_100_boot)
HXDLIN( 100)		ABS = HX_("abs",72,f0,49,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_101_boot)
HXDLIN( 101)		NEG = HX_("neg",50,d0,53,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_102_boot)
HXDLIN( 102)		SAT = HX_("sat",26,98,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_103_boot)
HXDLIN( 103)		M33 = HX_("m33",4d,e2,52,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_104_boot)
HXDLIN( 104)		M44 = HX_("m44",2d,e3,52,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_105_boot)
HXDLIN( 105)		M34 = HX_("m34",4e,e2,52,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_106_boot)
HXDLIN( 106)		DDX = HX_("ddx",f8,38,4c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_107_boot)
HXDLIN( 107)		DDY = HX_("ddy",f9,38,4c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_108_boot)
HXDLIN( 108)		IFE = HX_("ife",e8,05,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_109_boot)
HXDLIN( 109)		INE = HX_("ine",e0,0c,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_110_boot)
HXDLIN( 110)		IFG = HX_("ifg",ea,05,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_111_boot)
HXDLIN( 111)		IFL = HX_("ifl",ef,05,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_112_boot)
HXDLIN( 112)		IEG = HX_("ieg",0b,05,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_113_boot)
HXDLIN( 113)		IEL = HX_("iel",10,05,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_114_boot)
HXDLIN( 114)		ELS = HX_("els",2c,02,4d,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_115_boot)
HXDLIN( 115)		EIF = HX_("eif",82,ff,4c,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_116_boot)
HXDLIN( 116)		TED = HX_("ted",d3,5d,58,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_117_boot)
HXDLIN( 117)		KIL = HX_("kil",0e,8d,51,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_118_boot)
HXDLIN( 118)		TEX = HX_("tex",e7,5d,58,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_119_boot)
HXDLIN( 119)		SGE = HX_("sge",51,9d,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_120_boot)
HXDLIN( 120)		SLT = HX_("slt",bb,a1,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_121_boot)
HXDLIN( 121)		SGN = HX_("sgn",5a,9d,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_122_boot)
HXDLIN( 122)		SEQ = HX_("seq",9f,9b,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_123_boot)
HXDLIN( 123)		SNE = HX_("sne",6a,a3,57,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_126_boot)
HXDLIN( 126)		VA = HX_("va",2b,67,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_127_boot)
HXDLIN( 127)		VC = HX_("vc",2d,67,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_128_boot)
HXDLIN( 128)		VT = HX_("vt",3e,67,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_129_boot)
HXDLIN( 129)		VO = HX_("vo",39,67,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_130_boot)
HXDLIN( 130)		VI = HX_("vi",33,67,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_131_boot)
HXDLIN( 131)		FC = HX_("fc",3d,59,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_132_boot)
HXDLIN( 132)		FT = HX_("ft",4e,59,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_133_boot)
HXDLIN( 133)		FS = HX_("fs",4d,59,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_134_boot)
HXDLIN( 134)		FO = HX_("fo",49,59,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_135_boot)
HXDLIN( 135)		FD = HX_("fd",3e,59,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_136_boot)
HXDLIN( 136)		IID = HX_("iid",84,08,50,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_139_boot)
HXDLIN( 139)		D2 = HX_("2d",f2,2b,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_140_boot)
HXDLIN( 140)		D3 = HX_("3d",d1,2c,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_141_boot)
HXDLIN( 141)		CUBE = HX_("cube",f5,3c,c9,41);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_142_boot)
HXDLIN( 142)		MIPNEAREST = HX_("mipnearest",4a,21,95,d0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_143_boot)
HXDLIN( 143)		MIPLINEAR = HX_("miplinear",79,ca,7e,64);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_144_boot)
HXDLIN( 144)		MIPNONE = HX_("mipnone",4c,7e,07,76);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_145_boot)
HXDLIN( 145)		NOMIP = HX_("nomip",f3,8f,c5,9f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_146_boot)
HXDLIN( 146)		NEAREST = HX_("nearest",5e,18,ca,65);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_147_boot)
HXDLIN( 147)		LINEAR = HX_("linear",e5,51,a0,ec);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_148_boot)
HXDLIN( 148)		ANISOTROPIC2X = HX_("anisotropic2x",77,56,26,f5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_149_boot)
HXDLIN( 149)		ANISOTROPIC4X = HX_("anisotropic4x",35,58,26,f5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_150_boot)
HXDLIN( 150)		ANISOTROPIC8X = HX_("anisotropic8x",b1,5b,26,f5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_151_boot)
HXDLIN( 151)		ANISOTROPIC16X = HX_("anisotropic16x",62,56,64,8c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_152_boot)
HXDLIN( 152)		CENTROID = HX_("centroid",40,e0,e5,97);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_153_boot)
HXDLIN( 153)		SINGLE = HX_("single",88,66,21,b9);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_154_boot)
HXDLIN( 154)		IGNORESAMPLER = HX_("ignoresampler",36,32,06,d4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_155_boot)
HXDLIN( 155)		REPEAT = HX_("repeat",5b,97,7c,06);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_156_boot)
HXDLIN( 156)		WRAP = HX_("wrap",ca,39,ff,4e);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_157_boot)
HXDLIN( 157)		CLAMP = HX_("clamp",fb,72,58,48);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_158_boot)
HXDLIN( 158)		REPEAT_U_CLAMP_V = HX_("repeat_u_clamp_v",c4,04,17,dd);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_159_boot)
HXDLIN( 159)		CLAMP_U_REPEAT_V = HX_("clamp_u_repeat_v",a0,8d,a7,28);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_160_boot)
HXDLIN( 160)		RGBA = HX_("rgba",b4,d0,a8,4b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_161_boot)
HXDLIN( 161)		COMPRESSED = HX_("compressed",81,4c,da,67);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_162_boot)
HXDLIN( 162)		COMPRESSEDALPHA = HX_("compressedalpha",3d,67,f2,b6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_163_boot)
HXDLIN( 163)		DXT1 = HX_("dxt1",d1,c9,74,42);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_164_boot)
HXDLIN( 164)		DXT5 = HX_("dxt5",d5,c9,74,42);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_165_boot)
HXDLIN( 165)		VIDEO = HX_("video",7b,14,fc,36);
            	}
{
            	HX_STACKFRAME(&_hx_pos_878a01ff4ba15759_167_boot)
HXDLIN( 167)		initialized = false;
            	}
}

} // end namespace openfl
} // end namespace utils
