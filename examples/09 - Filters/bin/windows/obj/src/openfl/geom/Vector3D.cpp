// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_272ec68939e03fc6_43_new,"openfl.geom.Vector3D","new",0x722c67da,"openfl.geom.Vector3D.new","openfl/geom/Vector3D.hx",43,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_55_add,"openfl.geom.Vector3D","add",0x7222899b,"openfl.geom.Vector3D.add","openfl/geom/Vector3D.hx",55,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_85_clone,"openfl.geom.Vector3D","clone",0x532bfd57,"openfl.geom.Vector3D.clone","openfl/geom/Vector3D.hx",85,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_90_copyFrom,"openfl.geom.Vector3D","copyFrom",0x528f1a05,"openfl.geom.Vector3D.copyFrom","openfl/geom/Vector3D.hx",90,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_101_crossProduct,"openfl.geom.Vector3D","crossProduct",0x872350d5,"openfl.geom.Vector3D.crossProduct","openfl/geom/Vector3D.hx",101,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_106_decrementBy,"openfl.geom.Vector3D","decrementBy",0xa34dbc44,"openfl.geom.Vector3D.decrementBy","openfl/geom/Vector3D.hx",106,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_128_dotProduct,"openfl.geom.Vector3D","dotProduct",0x3a72d36c,"openfl.geom.Vector3D.dotProduct","openfl/geom/Vector3D.hx",128,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_135_equals,"openfl.geom.Vector3D","equals",0x24f6bf05,"openfl.geom.Vector3D.equals","openfl/geom/Vector3D.hx",135,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_140_incrementBy,"openfl.geom.Vector3D","incrementBy",0xea440b60,"openfl.geom.Vector3D.incrementBy","openfl/geom/Vector3D.hx",140,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_151_nearEquals,"openfl.geom.Vector3D","nearEquals",0xfaf41d0d,"openfl.geom.Vector3D.nearEquals","openfl/geom/Vector3D.hx",151,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_156_negate,"openfl.geom.Vector3D","negate",0xcc1d1288,"openfl.geom.Vector3D.negate","openfl/geom/Vector3D.hx",156,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_165_normalize,"openfl.geom.Vector3D","normalize",0x09bfa687,"openfl.geom.Vector3D.normalize","openfl/geom/Vector3D.hx",165,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_182_project,"openfl.geom.Vector3D","project",0xf43def53,"openfl.geom.Vector3D.project","openfl/geom/Vector3D.hx",182,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_191_scaleBy,"openfl.geom.Vector3D","scaleBy",0x635a1b7b,"openfl.geom.Vector3D.scaleBy","openfl/geom/Vector3D.hx",191,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_200_setTo,"openfl.geom.Vector3D","setTo",0x84f87bb7,"openfl.geom.Vector3D.setTo","openfl/geom/Vector3D.hx",200,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_211_subtract,"openfl.geom.Vector3D","subtract",0x823f835a,"openfl.geom.Vector3D.subtract","openfl/geom/Vector3D.hx",211,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_218_toString,"openfl.geom.Vector3D","toString",0xc29cdef2,"openfl.geom.Vector3D.toString","openfl/geom/Vector3D.hx",218,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_232_get_length,"openfl.geom.Vector3D","get_length",0x8c11b075,"openfl.geom.Vector3D.get_length","openfl/geom/Vector3D.hx",232,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_239_get_lengthSquared,"openfl.geom.Vector3D","get_lengthSquared",0xa2b22932,"openfl.geom.Vector3D.get_lengthSquared","openfl/geom/Vector3D.hx",239,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_60_angleBetween,"openfl.geom.Vector3D","angleBetween",0x8d2e8f7b,"openfl.geom.Vector3D.angleBetween","openfl/geom/Vector3D.hx",60,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_115_distance,"openfl.geom.Vector3D","distance",0xf627a17b,"openfl.geom.Vector3D.distance","openfl/geom/Vector3D.hx",115,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_246_get_X_AXIS,"openfl.geom.Vector3D","get_X_AXIS",0xfabcdcb7,"openfl.geom.Vector3D.get_X_AXIS","openfl/geom/Vector3D.hx",246,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_253_get_Y_AXIS,"openfl.geom.Vector3D","get_Y_AXIS",0x61183916,"openfl.geom.Vector3D.get_Y_AXIS","openfl/geom/Vector3D.hx",253,0xc7821076)
HX_LOCAL_STACK_FRAME(_hx_pos_272ec68939e03fc6_260_get_Z_AXIS,"openfl.geom.Vector3D","get_Z_AXIS",0xc7739575,"openfl.geom.Vector3D.get_Z_AXIS","openfl/geom/Vector3D.hx",260,0xc7821076)
namespace openfl{
namespace geom{

void Vector3D_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float z = __o_z.Default(0);
Float w = __o_w.Default(0);
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_43_new)
HXLINE(  45)		this->w = w;
HXLINE(  46)		this->x = x;
HXLINE(  47)		this->y = y;
HXLINE(  48)		this->z = z;
            	}

Dynamic Vector3D_obj::__CreateEmpty() { return new Vector3D_obj; }

void *Vector3D_obj::_hx_vtable = 0;

Dynamic Vector3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector3D_obj > _hx_result = new Vector3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Vector3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3c3ecb20;
}

 ::openfl::geom::Vector3D Vector3D_obj::add( ::openfl::geom::Vector3D a){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_55_add)
HXDLIN(  55)		Float _hx_tmp = (this->x + a->x);
HXDLIN(  55)		Float _hx_tmp1 = (this->y + a->y);
HXDLIN(  55)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(this->z + a->z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,add,return )

 ::openfl::geom::Vector3D Vector3D_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_85_clone)
HXDLIN(  85)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,this->x,this->y,this->z,this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,clone,return )

void Vector3D_obj::copyFrom( ::openfl::geom::Vector3D sourceVector3D){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_90_copyFrom)
HXLINE(  92)		this->x = sourceVector3D->x;
HXLINE(  93)		this->y = sourceVector3D->y;
HXLINE(  94)		this->z = sourceVector3D->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,copyFrom,(void))

 ::openfl::geom::Vector3D Vector3D_obj::crossProduct( ::openfl::geom::Vector3D a){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_101_crossProduct)
HXDLIN( 101)		Float _hx_tmp = (this->y * a->z);
HXDLIN( 101)		Float _hx_tmp1 = (_hx_tmp - (this->z * a->y));
HXDLIN( 101)		Float _hx_tmp2 = (this->z * a->x);
HXDLIN( 101)		Float _hx_tmp3 = (_hx_tmp2 - (this->x * a->z));
HXDLIN( 101)		Float _hx_tmp4 = (this->x * a->y);
HXDLIN( 101)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp3,(_hx_tmp4 - (this->y * a->x)),(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,crossProduct,return )

void Vector3D_obj::decrementBy( ::openfl::geom::Vector3D a){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_106_decrementBy)
HXLINE( 108)		 ::openfl::geom::Vector3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 108)		_hx_tmp->x = (_hx_tmp->x - a->x);
HXLINE( 109)		 ::openfl::geom::Vector3D _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 109)		_hx_tmp1->y = (_hx_tmp1->y - a->y);
HXLINE( 110)		 ::openfl::geom::Vector3D _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 110)		_hx_tmp2->z = (_hx_tmp2->z - a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,decrementBy,(void))

Float Vector3D_obj::dotProduct( ::openfl::geom::Vector3D a){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_128_dotProduct)
HXDLIN( 128)		Float _hx_tmp = (this->x * a->x);
HXDLIN( 128)		Float _hx_tmp1 = (_hx_tmp + (this->y * a->y));
HXDLIN( 128)		return (_hx_tmp1 + (this->z * a->z));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,dotProduct,return )

bool Vector3D_obj::equals( ::openfl::geom::Vector3D toCompare,hx::Null< bool >  __o_allFour){
bool allFour = __o_allFour.Default(false);
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_135_equals)
HXDLIN( 135)		bool _hx_tmp;
HXDLIN( 135)		bool _hx_tmp1;
HXDLIN( 135)		if ((this->x == toCompare->x)) {
HXDLIN( 135)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXDLIN( 135)			_hx_tmp1 = false;
            		}
HXDLIN( 135)		if (_hx_tmp1) {
HXDLIN( 135)			_hx_tmp = (this->z == toCompare->z);
            		}
            		else {
HXDLIN( 135)			_hx_tmp = false;
            		}
HXDLIN( 135)		if (_hx_tmp) {
HXDLIN( 135)			if (!(!(allFour))) {
HXDLIN( 135)				return (this->w == toCompare->w);
            			}
            			else {
HXDLIN( 135)				return true;
            			}
            		}
            		else {
HXDLIN( 135)			return false;
            		}
HXDLIN( 135)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,equals,return )

void Vector3D_obj::incrementBy( ::openfl::geom::Vector3D a){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_140_incrementBy)
HXLINE( 142)		 ::openfl::geom::Vector3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 142)		_hx_tmp->x = (_hx_tmp->x + a->x);
HXLINE( 143)		 ::openfl::geom::Vector3D _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 143)		_hx_tmp1->y = (_hx_tmp1->y + a->y);
HXLINE( 144)		 ::openfl::geom::Vector3D _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 144)		_hx_tmp2->z = (_hx_tmp2->z + a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,incrementBy,(void))

bool Vector3D_obj::nearEquals( ::openfl::geom::Vector3D toCompare,Float tolerance, ::Dynamic __o_allFour){
 ::Dynamic allFour = __o_allFour.Default(false);
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_151_nearEquals)
HXDLIN( 151)		bool _hx_tmp;
HXDLIN( 151)		bool _hx_tmp1;
HXDLIN( 151)		if ((::Math_obj::abs((this->x - toCompare->x)) < tolerance)) {
HXDLIN( 151)			_hx_tmp1 = (::Math_obj::abs((this->y - toCompare->y)) < tolerance);
            		}
            		else {
HXDLIN( 151)			_hx_tmp1 = false;
            		}
HXDLIN( 151)		if (_hx_tmp1) {
HXDLIN( 151)			_hx_tmp = (::Math_obj::abs((this->z - toCompare->z)) < tolerance);
            		}
            		else {
HXDLIN( 151)			_hx_tmp = false;
            		}
HXDLIN( 151)		if (_hx_tmp) {
HXDLIN( 151)			if (!(!(allFour))) {
HXDLIN( 151)				return (::Math_obj::abs((this->w - toCompare->w)) < tolerance);
            			}
            			else {
HXDLIN( 151)				return true;
            			}
            		}
            		else {
HXDLIN( 151)			return false;
            		}
HXDLIN( 151)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector3D_obj,nearEquals,return )

void Vector3D_obj::negate(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_156_negate)
HXLINE( 158)		 ::openfl::geom::Vector3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 158)		_hx_tmp->x = (_hx_tmp->x * (int)-1);
HXLINE( 159)		 ::openfl::geom::Vector3D _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 159)		_hx_tmp1->y = (_hx_tmp1->y * (int)-1);
HXLINE( 160)		 ::openfl::geom::Vector3D _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 160)		_hx_tmp2->z = (_hx_tmp2->z * (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,negate,(void))

Float Vector3D_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_165_normalize)
HXLINE( 167)		Float l = this->get_length();
HXLINE( 169)		if ((l != (int)0)) {
HXLINE( 171)			 ::openfl::geom::Vector3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 171)			_hx_tmp->x = ((Float)_hx_tmp->x / (Float)l);
HXLINE( 172)			 ::openfl::geom::Vector3D _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 172)			_hx_tmp1->y = ((Float)_hx_tmp1->y / (Float)l);
HXLINE( 173)			 ::openfl::geom::Vector3D _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 173)			_hx_tmp2->z = ((Float)_hx_tmp2->z / (Float)l);
            		}
HXLINE( 177)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,normalize,return )

void Vector3D_obj::project(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_182_project)
HXLINE( 184)		 ::openfl::geom::Vector3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 184)		_hx_tmp->x = ((Float)_hx_tmp->x / (Float)this->w);
HXLINE( 185)		 ::openfl::geom::Vector3D _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 185)		_hx_tmp1->y = ((Float)_hx_tmp1->y / (Float)this->w);
HXLINE( 186)		 ::openfl::geom::Vector3D _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 186)		_hx_tmp2->z = ((Float)_hx_tmp2->z / (Float)this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,project,(void))

void Vector3D_obj::scaleBy(Float s){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_191_scaleBy)
HXLINE( 193)		 ::openfl::geom::Vector3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 193)		_hx_tmp->x = (_hx_tmp->x * s);
HXLINE( 194)		 ::openfl::geom::Vector3D _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 194)		_hx_tmp1->y = (_hx_tmp1->y * s);
HXLINE( 195)		 ::openfl::geom::Vector3D _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 195)		_hx_tmp2->z = (_hx_tmp2->z * s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,scaleBy,(void))

void Vector3D_obj::setTo(Float xa,Float ya,Float za){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_200_setTo)
HXLINE( 202)		this->x = xa;
HXLINE( 203)		this->y = ya;
HXLINE( 204)		this->z = za;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector3D_obj,setTo,(void))

 ::openfl::geom::Vector3D Vector3D_obj::subtract( ::openfl::geom::Vector3D a){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_211_subtract)
HXDLIN( 211)		Float _hx_tmp = (this->x - a->x);
HXDLIN( 211)		Float _hx_tmp1 = (this->y - a->y);
HXDLIN( 211)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(this->z - a->z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,subtract,return )

::String Vector3D_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_218_toString)
HXDLIN( 218)		return ((((((HX_("Vector3D(",54,b9,2e,19) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(", ",74,26,00,00)) + this->z) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,toString,return )

Float Vector3D_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_232_get_length)
HXDLIN( 232)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 232)		Float _hx_tmp1 = (_hx_tmp + (this->y * this->y));
HXDLIN( 232)		return ::Math_obj::sqrt((_hx_tmp1 + (this->z * this->z)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_length,return )

Float Vector3D_obj::get_lengthSquared(){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_239_get_lengthSquared)
HXDLIN( 239)		Float _hx_tmp = (this->x * this->x);
HXDLIN( 239)		Float _hx_tmp1 = (_hx_tmp + (this->y * this->y));
HXDLIN( 239)		return (_hx_tmp1 + (this->z * this->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_lengthSquared,return )

Float Vector3D_obj::angleBetween( ::openfl::geom::Vector3D a, ::openfl::geom::Vector3D b){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_60_angleBetween)
HXLINE(  62)		Float la = a->get_length();
HXLINE(  63)		Float lb = b->get_length();
HXLINE(  64)		Float dot = a->dotProduct(b);
HXLINE(  66)		if ((la != (int)0)) {
HXLINE(  68)			dot = ((Float)dot / (Float)la);
            		}
HXLINE(  72)		if ((lb != (int)0)) {
HXLINE(  74)			dot = ((Float)dot / (Float)lb);
            		}
HXLINE(  78)		return ::Math_obj::acos(dot);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,angleBetween,return )

Float Vector3D_obj::distance( ::openfl::geom::Vector3D pt1, ::openfl::geom::Vector3D pt2){
            	HX_STACKFRAME(&_hx_pos_272ec68939e03fc6_115_distance)
HXLINE( 117)		Float x = (pt2->x - pt1->x);
HXLINE( 118)		Float y = (pt2->y - pt1->y);
HXLINE( 119)		Float z = (pt2->z - pt1->z);
HXLINE( 121)		return ::Math_obj::sqrt((((x * x) + (y * y)) + (z * z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,distance,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_X_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_246_get_X_AXIS)
HXDLIN( 246)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_X_AXIS,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_Y_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_253_get_Y_AXIS)
HXDLIN( 253)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)0,(int)1,(int)0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_Y_AXIS,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_Z_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_272ec68939e03fc6_260_get_Z_AXIS)
HXDLIN( 260)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_Z_AXIS,return )


hx::ObjectPtr< Vector3D_obj > Vector3D_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w) {
	hx::ObjectPtr< Vector3D_obj > __this = new Vector3D_obj();
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

hx::ObjectPtr< Vector3D_obj > Vector3D_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w) {
	Vector3D_obj *__this = (Vector3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vector3D_obj), false, "openfl.geom.Vector3D"));
	*(void **)__this = Vector3D_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

Vector3D_obj::Vector3D_obj()
{
}

hx::Val Vector3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w ); }
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"negate") ) { return hx::Val( negate_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"project") ) { return hx::Val( project_dyn() ); }
		if (HX_FIELD_EQ(inName,"scaleBy") ) { return hx::Val( scaleBy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dotProduct") ) { return hx::Val( dotProduct_dyn() ); }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { return hx::Val( nearEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decrementBy") ) { return hx::Val( decrementBy_dyn() ); }
		if (HX_FIELD_EQ(inName,"incrementBy") ) { return hx::Val( incrementBy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"crossProduct") ) { return hx::Val( crossProduct_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_lengthSquared() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { return hx::Val( get_lengthSquared_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vector3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"X_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_X_AXIS() ); return true; } }
		if (HX_FIELD_EQ(inName,"Y_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_Y_AXIS() ); return true; } }
		if (HX_FIELD_EQ(inName,"Z_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_Z_AXIS() ); return true; } }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_X_AXIS") ) { outValue = get_X_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Y_AXIS") ) { outValue = get_Y_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Z_AXIS") ) { outValue = get_Z_AXIS_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { outValue = angleBetween_dyn(); return true; }
	}
	return false;
}

hx::Val Vector3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vector3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("lengthSquared","\xe1","\x24","\x45","\x35"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vector3D_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Vector3D_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector3D_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector3D_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector3D_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vector3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Vector3D_obj_sMemberFields[] = {
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("crossProduct","\x8f","\xa7","\xc9","\x63"),
	HX_HCSTRING("decrementBy","\xca","\x1a","\x7a","\xad"),
	HX_HCSTRING("dotProduct","\xa6","\x27","\xf0","\x3d"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("incrementBy","\xe6","\x69","\x70","\xf4"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("project","\xd9","\x12","\xeb","\xf5"),
	HX_HCSTRING("scaleBy","\x01","\x3f","\x07","\x65"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_lengthSquared","\x38","\x30","\xb5","\x3b"),
	::String(null()) };

static void Vector3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector3D_obj::__mClass,"__mClass");
};

#endif

hx::Class Vector3D_obj::__mClass;

static ::String Vector3D_obj_sStaticFields[] = {
	HX_HCSTRING("angleBetween","\x35","\xe6","\xd4","\x69"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("get_X_AXIS","\xf1","\x30","\x3a","\xfe"),
	HX_HCSTRING("get_Y_AXIS","\x50","\x8d","\x95","\x64"),
	HX_HCSTRING("get_Z_AXIS","\xaf","\xe9","\xf0","\xca"),
	::String(null())
};

void Vector3D_obj::__register()
{
	hx::Object *dummy = new Vector3D_obj;
	Vector3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Vector3D","\xe8","\x32","\xf9","\x44");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vector3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vector3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vector3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace geom
