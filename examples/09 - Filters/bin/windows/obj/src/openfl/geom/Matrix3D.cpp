// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_37_new,"openfl.geom.Matrix3D","new",0xe0591fd8,"openfl.geom.Matrix3D.new","openfl/geom/Matrix3D.hx",37,0x3acce238)
static const Float _hx_array_data_3d2e93e6_2[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_50_append,"openfl.geom.Matrix3D","append",0x481b8d62,"openfl.geom.Matrix3D.append","openfl/geom/Matrix3D.hx",50,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_84_appendRotation,"openfl.geom.Matrix3D","appendRotation",0xf492b8c0,"openfl.geom.Matrix3D.appendRotation","openfl/geom/Matrix3D.hx",84,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_135_appendScale,"openfl.geom.Matrix3D","appendScale",0x02daedc8,"openfl.geom.Matrix3D.appendScale","openfl/geom/Matrix3D.hx",135,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_140_appendTranslation,"openfl.geom.Matrix3D","appendTranslation",0x514252af,"openfl.geom.Matrix3D.appendTranslation","openfl/geom/Matrix3D.hx",140,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_151_clone,"openfl.geom.Matrix3D","clone",0x2ff530d5,"openfl.geom.Matrix3D.clone","openfl/geom/Matrix3D.hx",151,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_158_copyColumnFrom,"openfl.geom.Matrix3D","copyColumnFrom",0x63600afd,"openfl.geom.Matrix3D.copyColumnFrom","openfl/geom/Matrix3D.hx",158,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_197_copyColumnTo,"openfl.geom.Matrix3D","copyColumnTo",0x8c37304e,"openfl.geom.Matrix3D.copyColumnTo","openfl/geom/Matrix3D.hx",197,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_236_copyFrom,"openfl.geom.Matrix3D","copyFrom",0xe290a947,"openfl.geom.Matrix3D.copyFrom","openfl/geom/Matrix3D.hx",236,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_241_copyRawDataFrom,"openfl.geom.Matrix3D","copyRawDataFrom",0x9938207f,"openfl.geom.Matrix3D.copyRawDataFrom","openfl/geom/Matrix3D.hx",241,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_266_copyRawDataTo,"openfl.geom.Matrix3D","copyRawDataTo",0xac978150,"openfl.geom.Matrix3D.copyRawDataTo","openfl/geom/Matrix3D.hx",266,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_291_copyRowFrom,"openfl.geom.Matrix3D","copyRowFrom",0x3d20cce7,"openfl.geom.Matrix3D.copyRowFrom","openfl/geom/Matrix3D.hx",291,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_330_copyRowTo,"openfl.geom.Matrix3D","copyRowTo",0x42dcc3b8,"openfl.geom.Matrix3D.copyRowTo","openfl/geom/Matrix3D.hx",330,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_369_copyToMatrix3D,"openfl.geom.Matrix3D","copyToMatrix3D",0x2cc9916a,"openfl.geom.Matrix3D.copyToMatrix3D","openfl/geom/Matrix3D.hx",369,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_403_decompose,"openfl.geom.Matrix3D","decompose",0x4a21fd29,"openfl.geom.Matrix3D.decompose","openfl/geom/Matrix3D.hx",403,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_529_deltaTransformVector,"openfl.geom.Matrix3D","deltaTransformVector",0x0285cbbf,"openfl.geom.Matrix3D.deltaTransformVector","openfl/geom/Matrix3D.hx",529,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_540_identity,"openfl.geom.Matrix3D","identity",0xd35ee2c6,"openfl.geom.Matrix3D.identity","openfl/geom/Matrix3D.hx",540,0x3acce238)
static const Float _hx_array_data_3d2e93e6_24[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_562_interpolateTo,"openfl.geom.Matrix3D","interpolateTo",0x74c2e614,"openfl.geom.Matrix3D.interpolateTo","openfl/geom/Matrix3D.hx",562,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_571_invert,"openfl.geom.Matrix3D","invert",0x5820929e,"openfl.geom.Matrix3D.invert","openfl/geom/Matrix3D.hx",571,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_609_pointAt,"openfl.geom.Matrix3D","pointAt",0xd7900cdb,"openfl.geom.Matrix3D.pointAt","openfl/geom/Matrix3D.hx",609,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_676_prepend,"openfl.geom.Matrix3D","prepend",0xbe4f0286,"openfl.geom.Matrix3D.prepend","openfl/geom/Matrix3D.hx",676,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_710_prependRotation,"openfl.geom.Matrix3D","prependRotation",0x54b5f1e4,"openfl.geom.Matrix3D.prependRotation","openfl/geom/Matrix3D.hx",710,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_761_prependScale,"openfl.geom.Matrix3D","prependScale",0x59d85624,"openfl.geom.Matrix3D.prependScale","openfl/geom/Matrix3D.hx",761,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_766_prependTranslation,"openfl.geom.Matrix3D","prependTranslation",0x2df4680b,"openfl.geom.Matrix3D.prependTranslation","openfl/geom/Matrix3D.hx",766,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_775_recompose,"openfl.geom.Matrix3D","recompose",0xd355bb37,"openfl.geom.Matrix3D.recompose","openfl/geom/Matrix3D.hx",775,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_882_transformVector,"openfl.geom.Matrix3D","transformVector",0x3f2dcec7,"openfl.geom.Matrix3D.transformVector","openfl/geom/Matrix3D.hx",882,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_893_transformVectors,"openfl.geom.Matrix3D","transformVectors",0x08e71fcc,"openfl.geom.Matrix3D.transformVectors","openfl/geom/Matrix3D.hx",893,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_915_transpose,"openfl.geom.Matrix3D","transpose",0x1ba989f1,"openfl.geom.Matrix3D.transpose","openfl/geom/Matrix3D.hx",915,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_975_get_determinant,"openfl.geom.Matrix3D","get_determinant",0x5f71b8a4,"openfl.geom.Matrix3D.get_determinant","openfl/geom/Matrix3D.hx",975,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_987_get_position,"openfl.geom.Matrix3D","get_position",0x1555563a,"openfl.geom.Matrix3D.get_position","openfl/geom/Matrix3D.hx",987,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_992_set_position,"openfl.geom.Matrix3D","set_position",0x2a4e79ae,"openfl.geom.Matrix3D.set_position","openfl/geom/Matrix3D.hx",992,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_374_create2D,"openfl.geom.Matrix3D","create2D",0x4623e756,"openfl.geom.Matrix3D.create2D","openfl/geom/Matrix3D.hx",374,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_387_createABCD,"openfl.geom.Matrix3D","createABCD",0x0e55d246,"openfl.geom.Matrix3D.createABCD","openfl/geom/Matrix3D.hx",387,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_392_createOrtho,"openfl.geom.Matrix3D","createOrtho",0xac3dd614,"openfl.geom.Matrix3D.createOrtho","openfl/geom/Matrix3D.hx",392,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_545_interpolate,"openfl.geom.Matrix3D","interpolate",0x6cc85c39,"openfl.geom.Matrix3D.interpolate","openfl/geom/Matrix3D.hx",545,0x3acce238)
HX_LOCAL_STACK_FRAME(_hx_pos_48294970c42d50e6_934___getAxisRotation,"openfl.geom.Matrix3D","__getAxisRotation",0xf649170d,"openfl.geom.Matrix3D.__getAxisRotation","openfl/geom/Matrix3D.hx",934,0x3acce238)
namespace openfl{
namespace geom{

void Matrix3D_obj::__construct( ::openfl::_Vector::AbstractVector v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_37_new)
HXDLIN(  37)		bool _hx_tmp;
HXDLIN(  37)		if (hx::IsNotNull( v )) {
HXDLIN(  37)			_hx_tmp = (::openfl::_Vector::IVector_obj::get_length(v->data) == (int)16);
            		}
            		else {
HXDLIN(  37)			_hx_tmp = false;
            		}
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  39)			::Dynamic data = null();
HXDLIN(  39)			this->rawData =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::concat(v->data,data),null());
            		}
            		else {
HXLINE(  43)			::Array< Float > a = ::Array_obj< Float >::fromData( _hx_array_data_3d2e93e6_2,16);
HXDLIN(  43)			int length = null();
HXDLIN(  43)			bool fixed = null();
HXDLIN(  43)			 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN(  43)			{
HXLINE(  43)				int _g1 = (int)0;
HXDLIN(  43)				int _g = a->length;
HXDLIN(  43)				while((_g1 < _g)){
HXLINE(  43)					_g1 = (_g1 + (int)1);
HXDLIN(  43)					int i = (_g1 - (int)1);
HXDLIN(  43)					::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            				}
            			}
HXDLIN(  43)			this->rawData = vector;
            		}
            	}

Dynamic Matrix3D_obj::__CreateEmpty() { return new Matrix3D_obj; }

void *Matrix3D_obj::_hx_vtable = 0;

Dynamic Matrix3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix3D_obj > _hx_result = new Matrix3D_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Matrix3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x34742c1e;
}

void Matrix3D_obj::append( ::openfl::geom::Matrix3D lhs){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_50_append)
HXLINE(  52)		Float m111 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) );
HXDLIN(  52)		Float m121 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) );
HXDLIN(  52)		Float m131 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) );
HXDLIN(  52)		Float m141 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
HXDLIN(  52)		Float m112 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) );
HXDLIN(  52)		Float m122 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) );
HXDLIN(  52)		Float m132 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) );
HXDLIN(  52)		Float m142 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) );
HXDLIN(  52)		Float m113 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) );
HXDLIN(  52)		Float m123 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) );
HXDLIN(  52)		Float m133 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) );
HXDLIN(  52)		Float m143 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) );
HXDLIN(  52)		Float m114 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) );
HXDLIN(  52)		Float m124 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) );
HXDLIN(  52)		Float m134 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) );
HXDLIN(  52)		Float m144 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) );
HXDLIN(  52)		Float m211 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)0)) );
HXDLIN(  52)		Float m221 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)4)) );
HXDLIN(  52)		Float m231 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)8)) );
HXDLIN(  52)		Float m241 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)12)) );
HXDLIN(  52)		Float m212 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)1)) );
HXDLIN(  52)		Float m222 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)5)) );
HXDLIN(  52)		Float m232 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)9)) );
HXDLIN(  52)		Float m242 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)13)) );
HXDLIN(  52)		Float m213 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)2)) );
HXDLIN(  52)		Float m223 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)6)) );
HXDLIN(  52)		Float m233 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)10)) );
HXDLIN(  52)		Float m243 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)14)) );
HXDLIN(  52)		Float m214 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)3)) );
HXDLIN(  52)		Float m224 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)7)) );
HXDLIN(  52)		Float m234 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)11)) );
HXDLIN(  52)		Float m244 = ( (Float)(::openfl::_Vector::IVector_obj::get(lhs->rawData->data,(int)15)) );
HXLINE(  61)		{
HXLINE(  61)			::Dynamic this1 = this->rawData->data;
HXDLIN(  61)			::openfl::_Vector::IVector_obj::set(this1,(int)0,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
            		}
HXLINE(  62)		{
HXLINE(  62)			::Dynamic this2 = this->rawData->data;
HXDLIN(  62)			::openfl::_Vector::IVector_obj::set(this2,(int)1,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
            		}
HXLINE(  63)		{
HXLINE(  63)			::Dynamic this3 = this->rawData->data;
HXDLIN(  63)			::openfl::_Vector::IVector_obj::set(this3,(int)2,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
            		}
HXLINE(  64)		{
HXLINE(  64)			::Dynamic this4 = this->rawData->data;
HXDLIN(  64)			::openfl::_Vector::IVector_obj::set(this4,(int)3,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
            		}
HXLINE(  66)		{
HXLINE(  66)			::Dynamic this5 = this->rawData->data;
HXDLIN(  66)			::openfl::_Vector::IVector_obj::set(this5,(int)4,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
            		}
HXLINE(  67)		{
HXLINE(  67)			::Dynamic this6 = this->rawData->data;
HXDLIN(  67)			::openfl::_Vector::IVector_obj::set(this6,(int)5,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
            		}
HXLINE(  68)		{
HXLINE(  68)			::Dynamic this7 = this->rawData->data;
HXDLIN(  68)			::openfl::_Vector::IVector_obj::set(this7,(int)6,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
            		}
HXLINE(  69)		{
HXLINE(  69)			::Dynamic this8 = this->rawData->data;
HXDLIN(  69)			::openfl::_Vector::IVector_obj::set(this8,(int)7,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
            		}
HXLINE(  71)		{
HXLINE(  71)			::Dynamic this9 = this->rawData->data;
HXDLIN(  71)			::openfl::_Vector::IVector_obj::set(this9,(int)8,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
            		}
HXLINE(  72)		{
HXLINE(  72)			::Dynamic this10 = this->rawData->data;
HXDLIN(  72)			::openfl::_Vector::IVector_obj::set(this10,(int)9,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
            		}
HXLINE(  73)		{
HXLINE(  73)			::Dynamic this11 = this->rawData->data;
HXDLIN(  73)			::openfl::_Vector::IVector_obj::set(this11,(int)10,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
            		}
HXLINE(  74)		{
HXLINE(  74)			::Dynamic this12 = this->rawData->data;
HXDLIN(  74)			::openfl::_Vector::IVector_obj::set(this12,(int)11,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
            		}
HXLINE(  76)		{
HXLINE(  76)			::Dynamic this13 = this->rawData->data;
HXDLIN(  76)			::openfl::_Vector::IVector_obj::set(this13,(int)12,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
            		}
HXLINE(  77)		{
HXLINE(  77)			::Dynamic this14 = this->rawData->data;
HXDLIN(  77)			::openfl::_Vector::IVector_obj::set(this14,(int)13,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
            		}
HXLINE(  78)		{
HXLINE(  78)			::Dynamic this15 = this->rawData->data;
HXDLIN(  78)			::openfl::_Vector::IVector_obj::set(this15,(int)14,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
            		}
HXLINE(  79)		{
HXLINE(  79)			::Dynamic this16 = this->rawData->data;
HXDLIN(  79)			::openfl::_Vector::IVector_obj::set(this16,(int)15,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,append,(void))

void Matrix3D_obj::appendRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_84_appendRotation)
HXLINE(  86)		Float tx;
HXDLIN(  86)		Float ty;
HXDLIN(  86)		Float tz = (int)0;
HXLINE(  87)		ty = tz;
HXDLIN(  87)		tx = ty;
HXLINE(  89)		if (hx::IsNotNull( pivotPoint )) {
HXLINE(  90)			tx = pivotPoint->x;
HXLINE(  91)			ty = pivotPoint->y;
HXLINE(  92)			tz = pivotPoint->z;
            		}
HXLINE(  94)		Float radian = ((Float)(degrees * ::Math_obj::PI) / (Float)(int)180);
HXLINE(  95)		Float cos = ::Math_obj::cos(radian);
HXLINE(  96)		Float sin = ::Math_obj::sin(radian);
HXLINE(  97)		Float x = axis->x;
HXLINE(  98)		Float y = axis->y;
HXLINE(  99)		Float z = axis->z;
HXLINE( 100)		Float x2 = (x * x);
HXLINE( 101)		Float y2 = (y * y);
HXLINE( 102)		Float z2 = (z * z);
HXLINE( 103)		Float ls = ((x2 + y2) + z2);
HXLINE( 104)		if ((ls != (int)0)) {
HXLINE( 105)			Float l = ::Math_obj::sqrt(ls);
HXLINE( 106)			x = ((Float)x / (Float)l);
HXLINE( 107)			y = ((Float)y / (Float)l);
HXLINE( 108)			z = ((Float)z / (Float)l);
HXLINE( 109)			x2 = ((Float)x2 / (Float)ls);
HXLINE( 110)			y2 = ((Float)y2 / (Float)ls);
HXLINE( 111)			z2 = ((Float)z2 / (Float)ls);
            		}
HXLINE( 113)		Float ccos = ((int)1 - cos);
HXLINE( 114)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 115)		 ::openfl::_Vector::AbstractVector d = m->rawData;
HXLINE( 116)		::Dynamic d1 = d->data;
HXDLIN( 116)		::openfl::_Vector::IVector_obj::set(d1,(int)0,(x2 + ((y2 + z2) * cos)));
HXLINE( 117)		::Dynamic d2 = d->data;
HXDLIN( 117)		::openfl::_Vector::IVector_obj::set(d2,(int)1,(((x * y) * ccos) + (z * sin)));
HXLINE( 118)		::Dynamic d3 = d->data;
HXDLIN( 118)		::openfl::_Vector::IVector_obj::set(d3,(int)2,(((x * z) * ccos) - (y * sin)));
HXLINE( 119)		::Dynamic d4 = d->data;
HXDLIN( 119)		::openfl::_Vector::IVector_obj::set(d4,(int)4,(((x * y) * ccos) - (z * sin)));
HXLINE( 120)		::Dynamic d5 = d->data;
HXDLIN( 120)		::openfl::_Vector::IVector_obj::set(d5,(int)5,(y2 + ((x2 + z2) * cos)));
HXLINE( 121)		::Dynamic d6 = d->data;
HXDLIN( 121)		::openfl::_Vector::IVector_obj::set(d6,(int)6,(((y * z) * ccos) + (x * sin)));
HXLINE( 122)		::Dynamic d7 = d->data;
HXDLIN( 122)		::openfl::_Vector::IVector_obj::set(d7,(int)8,(((x * z) * ccos) + (y * sin)));
HXLINE( 123)		::Dynamic d8 = d->data;
HXDLIN( 123)		::openfl::_Vector::IVector_obj::set(d8,(int)9,(((y * z) * ccos) - (x * sin)));
HXLINE( 124)		::Dynamic d9 = d->data;
HXDLIN( 124)		::openfl::_Vector::IVector_obj::set(d9,(int)10,(z2 + ((x2 + y2) * cos)));
HXLINE( 125)		::Dynamic d10 = d->data;
HXDLIN( 125)		::openfl::_Vector::IVector_obj::set(d10,(int)12,((((tx * (y2 + z2)) - (x * ((ty * y) + (tz * z)))) * ccos) + (((ty * z) - (tz * y)) * sin)));
HXLINE( 126)		::Dynamic d11 = d->data;
HXDLIN( 126)		::openfl::_Vector::IVector_obj::set(d11,(int)13,((((ty * (x2 + z2)) - (y * ((tx * x) + (tz * z)))) * ccos) + (((tz * x) - (tx * z)) * sin)));
HXLINE( 127)		::Dynamic d12 = d->data;
HXDLIN( 127)		::openfl::_Vector::IVector_obj::set(d12,(int)14,((((tz * (x2 + y2)) - (z * ((tx * x) + (ty * y)))) * ccos) + (((tx * y) - (ty * x)) * sin)));
HXLINE( 128)		this->append(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendRotation,(void))

void Matrix3D_obj::appendScale(Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_135_appendScale)
HXDLIN( 135)		::Array< Float > a = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 135)		int length = null();
HXDLIN( 135)		bool fixed = null();
HXDLIN( 135)		 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN( 135)		{
HXDLIN( 135)			int _g1 = (int)0;
HXDLIN( 135)			int _g = a->length;
HXDLIN( 135)			while((_g1 < _g)){
HXDLIN( 135)				_g1 = (_g1 + (int)1);
HXDLIN( 135)				int i = (_g1 - (int)1);
HXDLIN( 135)				::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            			}
            		}
HXDLIN( 135)		this->append( ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendScale,(void))

void Matrix3D_obj::appendTranslation(Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_140_appendTranslation)
HXLINE( 142)		{
HXLINE( 142)			 ::openfl::_Vector::AbstractVector _g = this->rawData;
HXDLIN( 142)			{
HXLINE( 142)				Float value = (( (Float)(::openfl::_Vector::IVector_obj::get(_g->data,(int)12)) ) + x);
HXDLIN( 142)				::openfl::_Vector::IVector_obj::set(_g->data,(int)12,value);
            			}
            		}
HXLINE( 143)		{
HXLINE( 143)			 ::openfl::_Vector::AbstractVector _g1 = this->rawData;
HXDLIN( 143)			{
HXLINE( 143)				Float value1 = (( (Float)(::openfl::_Vector::IVector_obj::get(_g1->data,(int)13)) ) + y);
HXDLIN( 143)				::openfl::_Vector::IVector_obj::set(_g1->data,(int)13,value1);
            			}
            		}
HXLINE( 144)		{
HXLINE( 144)			 ::openfl::_Vector::AbstractVector _g2 = this->rawData;
HXDLIN( 144)			{
HXLINE( 144)				Float value2 = (( (Float)(::openfl::_Vector::IVector_obj::get(_g2->data,(int)14)) ) + z);
HXDLIN( 144)				::openfl::_Vector::IVector_obj::set(_g2->data,(int)14,value2);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendTranslation,(void))

 ::openfl::geom::Matrix3D Matrix3D_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_151_clone)
HXDLIN( 151)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX , ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::copy(this->rawData->data),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,clone,return )

void Matrix3D_obj::copyColumnFrom(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_158_copyColumnFrom)
HXDLIN( 158)		switch((int)(column)){
            			case (int)0: {
HXLINE( 162)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)0,vector3D->x);
HXLINE( 163)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)1,vector3D->y);
HXLINE( 164)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)2,vector3D->z);
HXLINE( 165)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)3,vector3D->w);
            			}
            			break;
            			case (int)1: {
HXLINE( 169)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)4,vector3D->x);
HXLINE( 170)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)5,vector3D->y);
HXLINE( 171)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)6,vector3D->z);
HXLINE( 172)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)7,vector3D->w);
            			}
            			break;
            			case (int)2: {
HXLINE( 176)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)8,vector3D->x);
HXLINE( 177)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)9,vector3D->y);
HXLINE( 178)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)10,vector3D->z);
HXLINE( 179)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)11,vector3D->w);
            			}
            			break;
            			case (int)3: {
HXLINE( 183)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)12,vector3D->x);
HXLINE( 184)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)13,vector3D->y);
HXLINE( 185)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)14,vector3D->z);
HXLINE( 186)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)15,vector3D->w);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnFrom,(void))

void Matrix3D_obj::copyColumnTo(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_197_copyColumnTo)
HXDLIN( 197)		switch((int)(column)){
            			case (int)0: {
HXLINE( 201)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) );
HXLINE( 202)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) );
HXLINE( 203)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) );
HXLINE( 204)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) );
            			}
            			break;
            			case (int)1: {
HXLINE( 208)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) );
HXLINE( 209)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) );
HXLINE( 210)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) );
HXLINE( 211)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) );
            			}
            			break;
            			case (int)2: {
HXLINE( 215)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) );
HXLINE( 216)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) );
HXLINE( 217)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) );
HXLINE( 218)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) );
            			}
            			break;
            			case (int)3: {
HXLINE( 222)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
HXLINE( 223)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) );
HXLINE( 224)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) );
HXLINE( 225)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) );
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnTo,(void))

void Matrix3D_obj::copyFrom( ::openfl::geom::Matrix3D other){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_236_copyFrom)
HXDLIN( 236)		this->rawData =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::copy(other->rawData->data),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyFrom,(void))

void Matrix3D_obj::copyRawDataFrom( ::openfl::_Vector::AbstractVector vector,hx::Null< int >  __o_index,hx::Null< bool >  __o_transpose){
int index = __o_index.Default(0);
bool transpose = __o_transpose.Default(false);
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_241_copyRawDataFrom)
HXLINE( 243)		if (transpose) {
HXLINE( 245)			this->transpose();
            		}
HXLINE( 249)		int length = (::openfl::_Vector::IVector_obj::get_length(vector->data) - index);
HXLINE( 251)		{
HXLINE( 251)			int _g1 = (int)0;
HXDLIN( 251)			int _g = length;
HXDLIN( 251)			while((_g1 < _g)){
HXLINE( 251)				_g1 = (_g1 + (int)1);
HXDLIN( 251)				int i = (_g1 - (int)1);
HXLINE( 253)				{
HXLINE( 253)					 ::openfl::_Vector::AbstractVector this1 = this->rawData;
HXDLIN( 253)					Float value = ( (Float)(::openfl::_Vector::IVector_obj::get(vector->data,(i + index))) );
HXDLIN( 253)					::openfl::_Vector::IVector_obj::set(this1->data,i,value);
            				}
            			}
            		}
HXLINE( 257)		if (transpose) {
HXLINE( 259)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataFrom,(void))

void Matrix3D_obj::copyRawDataTo( ::openfl::_Vector::AbstractVector vector,hx::Null< int >  __o_index,hx::Null< bool >  __o_transpose){
int index = __o_index.Default(0);
bool transpose = __o_transpose.Default(false);
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_266_copyRawDataTo)
HXLINE( 268)		if (transpose) {
HXLINE( 270)			this->transpose();
            		}
HXLINE( 274)		{
HXLINE( 274)			int _g1 = (int)0;
HXDLIN( 274)			int _g = ::openfl::_Vector::IVector_obj::get_length(this->rawData->data);
HXDLIN( 274)			while((_g1 < _g)){
HXLINE( 274)				_g1 = (_g1 + (int)1);
HXDLIN( 274)				int i = (_g1 - (int)1);
HXLINE( 276)				{
HXLINE( 276)					Float value = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,i)) );
HXDLIN( 276)					::openfl::_Vector::IVector_obj::set(vector->data,(i + index),value);
            				}
            			}
            		}
HXLINE( 280)		if (transpose) {
HXLINE( 282)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataTo,(void))

void Matrix3D_obj::copyRowFrom(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_291_copyRowFrom)
HXDLIN( 291)		switch((int)(row)){
            			case (int)0: {
HXLINE( 295)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)0,vector3D->x);
HXLINE( 296)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)4,vector3D->y);
HXLINE( 297)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)8,vector3D->z);
HXLINE( 298)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)12,vector3D->w);
            			}
            			break;
            			case (int)1: {
HXLINE( 302)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)1,vector3D->x);
HXLINE( 303)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)5,vector3D->y);
HXLINE( 304)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)9,vector3D->z);
HXLINE( 305)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)13,vector3D->w);
            			}
            			break;
            			case (int)2: {
HXLINE( 309)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)2,vector3D->x);
HXLINE( 310)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)6,vector3D->y);
HXLINE( 311)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)10,vector3D->z);
HXLINE( 312)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)14,vector3D->w);
            			}
            			break;
            			case (int)3: {
HXLINE( 316)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)3,vector3D->x);
HXLINE( 317)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)7,vector3D->y);
HXLINE( 318)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)11,vector3D->z);
HXLINE( 319)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)15,vector3D->w);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowFrom,(void))

void Matrix3D_obj::copyRowTo(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_330_copyRowTo)
HXDLIN( 330)		switch((int)(row)){
            			case (int)0: {
HXLINE( 334)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) );
HXLINE( 335)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) );
HXLINE( 336)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) );
HXLINE( 337)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
            			}
            			break;
            			case (int)1: {
HXLINE( 341)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) );
HXLINE( 342)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) );
HXLINE( 343)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) );
HXLINE( 344)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) );
            			}
            			break;
            			case (int)2: {
HXLINE( 348)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) );
HXLINE( 349)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) );
HXLINE( 350)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) );
HXLINE( 351)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) );
            			}
            			break;
            			case (int)3: {
HXLINE( 355)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) );
HXLINE( 356)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) );
HXLINE( 357)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) );
HXLINE( 358)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) );
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowTo,(void))

void Matrix3D_obj::copyToMatrix3D( ::openfl::geom::Matrix3D other){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_369_copyToMatrix3D)
HXDLIN( 369)		other->rawData =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::copy(this->rawData->data),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyToMatrix3D,(void))

 ::openfl::_Vector::AbstractVector Matrix3D_obj::decompose( ::Dynamic orientationStyle){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_403_decompose)
HXLINE( 405)		if (hx::IsNull( orientationStyle )) {
HXLINE( 407)			orientationStyle = (int)1;
            		}
HXLINE( 411)		int length = null();
HXDLIN( 411)		bool fixed = null();
HXDLIN( 411)		 ::openfl::_Vector::AbstractVector vec =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE( 412)		 ::openfl::geom::Matrix3D m = this->clone();
HXLINE( 413)		 ::openfl::_Vector::AbstractVector mr =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::copy(m->rawData->data),null());
HXLINE( 415)		Float pos = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)12)) );
HXDLIN( 415)		Float pos1 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)13)) );
HXDLIN( 415)		 ::openfl::geom::Vector3D pos2 =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,pos,pos1,( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)14)) ),null());
HXLINE( 416)		::openfl::_Vector::IVector_obj::set(mr->data,(int)12,(int)0);
HXLINE( 417)		::openfl::_Vector::IVector_obj::set(mr->data,(int)13,(int)0);
HXLINE( 418)		::openfl::_Vector::IVector_obj::set(mr->data,(int)14,(int)0);
HXLINE( 420)		 ::openfl::geom::Vector3D scale =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 422)		Float _hx_tmp = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) );
HXDLIN( 422)		Float _hx_tmp1 = (_hx_tmp * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) ));
HXDLIN( 422)		Float _hx_tmp2 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 422)		Float _hx_tmp3 = (_hx_tmp1 + (_hx_tmp2 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) )));
HXDLIN( 422)		Float _hx_tmp4 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) );
HXDLIN( 422)		scale->x = ::Math_obj::sqrt((_hx_tmp3 + (_hx_tmp4 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ))));
HXLINE( 423)		Float _hx_tmp5 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) );
HXDLIN( 423)		Float _hx_tmp6 = (_hx_tmp5 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) ));
HXDLIN( 423)		Float _hx_tmp7 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) );
HXDLIN( 423)		Float _hx_tmp8 = (_hx_tmp6 + (_hx_tmp7 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) )));
HXDLIN( 423)		Float _hx_tmp9 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 423)		scale->y = ::Math_obj::sqrt((_hx_tmp8 + (_hx_tmp9 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) ))));
HXLINE( 424)		Float _hx_tmp10 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) );
HXDLIN( 424)		Float _hx_tmp11 = (_hx_tmp10 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) ));
HXDLIN( 424)		Float _hx_tmp12 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) );
HXDLIN( 424)		Float _hx_tmp13 = (_hx_tmp11 + (_hx_tmp12 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) )));
HXDLIN( 424)		Float _hx_tmp14 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) );
HXDLIN( 424)		scale->z = ::Math_obj::sqrt((_hx_tmp13 + (_hx_tmp14 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ))));
HXLINE( 426)		Float _hx_tmp15 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) );
HXDLIN( 426)		Float _hx_tmp16 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) );
HXDLIN( 426)		Float _hx_tmp17 = (_hx_tmp16 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ));
HXDLIN( 426)		Float _hx_tmp18 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 426)		Float _hx_tmp19 = (_hx_tmp15 * (_hx_tmp17 - (_hx_tmp18 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) ))));
HXDLIN( 426)		Float _hx_tmp20 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 426)		Float _hx_tmp21 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) );
HXDLIN( 426)		Float _hx_tmp22 = (_hx_tmp21 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ));
HXDLIN( 426)		Float _hx_tmp23 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 426)		Float _hx_tmp24 = (_hx_tmp19 - (_hx_tmp20 * (_hx_tmp22 - (_hx_tmp23 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) )))));
HXDLIN( 426)		Float _hx_tmp25 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) );
HXDLIN( 426)		Float _hx_tmp26 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) );
HXDLIN( 426)		Float _hx_tmp27 = (_hx_tmp26 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) ));
HXDLIN( 426)		Float _hx_tmp28 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) );
HXDLIN( 426)		if (((_hx_tmp24 + (_hx_tmp25 * (_hx_tmp27 - (_hx_tmp28 * ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) ))))) < (int)0)) {
HXLINE( 428)			scale->z = -(scale->z);
            		}
HXLINE( 432)		{
HXLINE( 432)			 ::openfl::_Vector::AbstractVector _g = mr;
HXDLIN( 432)			{
HXLINE( 432)				Float value = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g->data,(int)0)) ) / (Float)scale->x);
HXDLIN( 432)				::openfl::_Vector::IVector_obj::set(_g->data,(int)0,value);
            			}
            		}
HXLINE( 433)		{
HXLINE( 433)			 ::openfl::_Vector::AbstractVector _g1 = mr;
HXDLIN( 433)			{
HXLINE( 433)				Float value1 = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g1->data,(int)1)) ) / (Float)scale->x);
HXDLIN( 433)				::openfl::_Vector::IVector_obj::set(_g1->data,(int)1,value1);
            			}
            		}
HXLINE( 434)		{
HXLINE( 434)			 ::openfl::_Vector::AbstractVector _g2 = mr;
HXDLIN( 434)			{
HXLINE( 434)				Float value2 = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g2->data,(int)2)) ) / (Float)scale->x);
HXDLIN( 434)				::openfl::_Vector::IVector_obj::set(_g2->data,(int)2,value2);
            			}
            		}
HXLINE( 435)		{
HXLINE( 435)			 ::openfl::_Vector::AbstractVector _g3 = mr;
HXDLIN( 435)			{
HXLINE( 435)				Float value3 = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g3->data,(int)4)) ) / (Float)scale->y);
HXDLIN( 435)				::openfl::_Vector::IVector_obj::set(_g3->data,(int)4,value3);
            			}
            		}
HXLINE( 436)		{
HXLINE( 436)			 ::openfl::_Vector::AbstractVector _g4 = mr;
HXDLIN( 436)			{
HXLINE( 436)				Float value4 = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g4->data,(int)5)) ) / (Float)scale->y);
HXDLIN( 436)				::openfl::_Vector::IVector_obj::set(_g4->data,(int)5,value4);
            			}
            		}
HXLINE( 437)		{
HXLINE( 437)			 ::openfl::_Vector::AbstractVector _g5 = mr;
HXDLIN( 437)			{
HXLINE( 437)				Float value5 = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g5->data,(int)6)) ) / (Float)scale->y);
HXDLIN( 437)				::openfl::_Vector::IVector_obj::set(_g5->data,(int)6,value5);
            			}
            		}
HXLINE( 438)		{
HXLINE( 438)			 ::openfl::_Vector::AbstractVector _g6 = mr;
HXDLIN( 438)			{
HXLINE( 438)				Float value6 = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g6->data,(int)8)) ) / (Float)scale->z);
HXDLIN( 438)				::openfl::_Vector::IVector_obj::set(_g6->data,(int)8,value6);
            			}
            		}
HXLINE( 439)		{
HXLINE( 439)			 ::openfl::_Vector::AbstractVector _g7 = mr;
HXDLIN( 439)			{
HXLINE( 439)				Float value7 = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g7->data,(int)9)) ) / (Float)scale->z);
HXDLIN( 439)				::openfl::_Vector::IVector_obj::set(_g7->data,(int)9,value7);
            			}
            		}
HXLINE( 440)		{
HXLINE( 440)			 ::openfl::_Vector::AbstractVector _g8 = mr;
HXDLIN( 440)			{
HXLINE( 440)				Float value8 = ((Float)( (Float)(::openfl::_Vector::IVector_obj::get(_g8->data,(int)10)) ) / (Float)scale->z);
HXDLIN( 440)				::openfl::_Vector::IVector_obj::set(_g8->data,(int)10,value8);
            			}
            		}
HXLINE( 442)		 ::openfl::geom::Vector3D rot =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 444)		 ::Dynamic _hx_switch_0 = orientationStyle;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 448)			Float _hx_tmp29 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) );
HXDLIN( 448)			Float _hx_tmp30 = (_hx_tmp29 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) ));
HXDLIN( 448)			rot->w = ::Math_obj::acos(((Float)((_hx_tmp30 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) )) - (int)1) / (Float)(int)2));
HXLINE( 450)			Float len = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 450)			Float len1 = (len - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) ));
HXDLIN( 450)			Float len2 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 450)			Float len3 = (len1 * (len2 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) )));
HXDLIN( 450)			Float len4 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) );
HXDLIN( 450)			Float len5 = (len4 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ));
HXDLIN( 450)			Float len6 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) );
HXDLIN( 450)			Float len7 = (len3 + (len5 * (len6 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ))));
HXDLIN( 450)			Float len8 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 450)			Float len9 = (len8 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) ));
HXDLIN( 450)			Float len10 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 450)			Float len11 = ::Math_obj::sqrt((len7 + (len9 * (len10 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) )))));
HXLINE( 452)			if ((len11 != (int)0)) {
HXLINE( 454)				Float _hx_tmp31 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 454)				rot->x = ((Float)(_hx_tmp31 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) )) / (Float)len11);
HXLINE( 455)				Float _hx_tmp32 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) );
HXDLIN( 455)				rot->y = ((Float)(_hx_tmp32 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) )) / (Float)len11);
HXLINE( 456)				Float _hx_tmp33 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 456)				rot->z = ((Float)(_hx_tmp33 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) )) / (Float)len11);
            			}
            			else {
HXLINE( 460)				rot->x = (rot->y = (rot->z = (int)0));
            			}
HXLINE( 446)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 504)			rot->y = ::Math_obj::asin(-(( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) )));
HXLINE( 506)			bool _hx_tmp34;
HXDLIN( 506)			if ((( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ) != (int)1)) {
HXLINE( 506)				_hx_tmp34 = (( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ) != (int)-1);
            			}
            			else {
HXLINE( 506)				_hx_tmp34 = false;
            			}
HXDLIN( 506)			if (_hx_tmp34) {
HXLINE( 508)				Float _hx_tmp35 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 508)				rot->x = ::Math_obj::atan2(_hx_tmp35,( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ));
HXLINE( 509)				Float _hx_tmp36 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 509)				rot->z = ::Math_obj::atan2(_hx_tmp36,( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) ));
            			}
            			else {
HXLINE( 513)				rot->z = (int)0;
HXLINE( 514)				Float _hx_tmp37 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) );
HXDLIN( 514)				rot->x = ::Math_obj::atan2(_hx_tmp37,( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) ));
            			}
HXLINE( 502)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 466)			Float tr = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) );
HXDLIN( 466)			Float tr1 = (tr + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) ));
HXDLIN( 466)			Float tr2 = (tr1 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ));
HXLINE( 468)			if ((tr2 > (int)0)) {
HXLINE( 470)				rot->w = ((Float)::Math_obj::sqrt(((int)1 + tr2)) / (Float)(int)2);
HXLINE( 472)				Float _hx_tmp38 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 472)				Float _hx_tmp39 = (_hx_tmp38 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) ));
HXDLIN( 472)				rot->x = ((Float)_hx_tmp39 / (Float)((int)4 * rot->w));
HXLINE( 473)				Float _hx_tmp40 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) );
HXDLIN( 473)				Float _hx_tmp41 = (_hx_tmp40 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ));
HXDLIN( 473)				rot->y = ((Float)_hx_tmp41 / (Float)((int)4 * rot->w));
HXLINE( 474)				Float _hx_tmp42 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 474)				Float _hx_tmp43 = (_hx_tmp42 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) ));
HXDLIN( 474)				rot->z = ((Float)_hx_tmp43 / (Float)((int)4 * rot->w));
            			}
            			else {
HXLINE( 476)				bool _hx_tmp44;
HXDLIN( 476)				Float _hx_tmp45 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) );
HXDLIN( 476)				if ((_hx_tmp45 > ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) ))) {
HXLINE( 476)					Float _hx_tmp46 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) );
HXDLIN( 476)					_hx_tmp44 = (_hx_tmp46 > ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ));
            				}
            				else {
HXLINE( 476)					_hx_tmp44 = false;
            				}
HXDLIN( 476)				if (_hx_tmp44) {
HXLINE( 478)					Float _hx_tmp47 = ((int)1 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) ));
HXDLIN( 478)					Float _hx_tmp48 = (_hx_tmp47 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) ));
HXDLIN( 478)					rot->x = ((Float)::Math_obj::sqrt((_hx_tmp48 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ))) / (Float)(int)2);
HXLINE( 480)					Float _hx_tmp49 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 480)					Float _hx_tmp50 = (_hx_tmp49 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) ));
HXDLIN( 480)					rot->w = ((Float)_hx_tmp50 / (Float)((int)4 * rot->x));
HXLINE( 481)					Float _hx_tmp51 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 481)					Float _hx_tmp52 = (_hx_tmp51 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) ));
HXDLIN( 481)					rot->y = ((Float)_hx_tmp52 / (Float)((int)4 * rot->x));
HXLINE( 482)					Float _hx_tmp53 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) );
HXDLIN( 482)					Float _hx_tmp54 = (_hx_tmp53 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ));
HXDLIN( 482)					rot->z = ((Float)_hx_tmp54 / (Float)((int)4 * rot->x));
            				}
            				else {
HXLINE( 484)					Float _hx_tmp55 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) );
HXDLIN( 484)					if ((_hx_tmp55 > ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ))) {
HXLINE( 486)						Float _hx_tmp56 = ((int)1 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) ));
HXDLIN( 486)						Float _hx_tmp57 = (_hx_tmp56 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) ));
HXDLIN( 486)						rot->y = ((Float)::Math_obj::sqrt((_hx_tmp57 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ))) / (Float)(int)2);
HXLINE( 488)						Float _hx_tmp58 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 488)						Float _hx_tmp59 = (_hx_tmp58 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) ));
HXDLIN( 488)						rot->x = ((Float)_hx_tmp59 / (Float)((int)4 * rot->y));
HXLINE( 489)						Float _hx_tmp60 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) );
HXDLIN( 489)						Float _hx_tmp61 = (_hx_tmp60 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ));
HXDLIN( 489)						rot->w = ((Float)_hx_tmp61 / (Float)((int)4 * rot->y));
HXLINE( 490)						Float _hx_tmp62 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 490)						Float _hx_tmp63 = (_hx_tmp62 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) ));
HXDLIN( 490)						rot->z = ((Float)_hx_tmp63 / (Float)((int)4 * rot->y));
            					}
            					else {
HXLINE( 494)						Float _hx_tmp64 = ((int)1 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)10)) ));
HXDLIN( 494)						Float _hx_tmp65 = (_hx_tmp64 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)0)) ));
HXDLIN( 494)						rot->z = ((Float)::Math_obj::sqrt((_hx_tmp65 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)5)) ))) / (Float)(int)2);
HXLINE( 496)						Float _hx_tmp66 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)8)) );
HXDLIN( 496)						Float _hx_tmp67 = (_hx_tmp66 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)2)) ));
HXDLIN( 496)						rot->x = ((Float)_hx_tmp67 / (Float)((int)4 * rot->z));
HXLINE( 497)						Float _hx_tmp68 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)6)) );
HXDLIN( 497)						Float _hx_tmp69 = (_hx_tmp68 + ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)9)) ));
HXDLIN( 497)						rot->y = ((Float)_hx_tmp69 / (Float)((int)4 * rot->z));
HXLINE( 498)						Float _hx_tmp70 = ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)1)) );
HXDLIN( 498)						Float _hx_tmp71 = (_hx_tmp70 - ( (Float)(::openfl::_Vector::IVector_obj::get(mr->data,(int)4)) ));
HXDLIN( 498)						rot->w = ((Float)_hx_tmp71 / (Float)((int)4 * rot->z));
            					}
            				}
            			}
HXLINE( 464)			goto _hx_goto_19;
            		}
            		_hx_goto_19:;
HXLINE( 520)		::openfl::_Vector::IVector_obj::push(vec->data,pos2);
HXLINE( 521)		::openfl::_Vector::IVector_obj::push(vec->data,rot);
HXLINE( 522)		::openfl::_Vector::IVector_obj::push(vec->data,scale);
HXLINE( 524)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,decompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::deltaTransformVector( ::openfl::geom::Vector3D v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_529_deltaTransformVector)
HXLINE( 531)		Float x = v->x;
HXDLIN( 531)		Float y = v->y;
HXDLIN( 531)		Float z = v->z;
HXLINE( 533)		Float _hx_tmp = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) ));
HXDLIN( 533)		Float _hx_tmp1 = (_hx_tmp + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) )));
HXDLIN( 533)		Float _hx_tmp2 = (_hx_tmp1 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) )));
HXDLIN( 533)		Float _hx_tmp3 = (_hx_tmp2 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) ));
HXDLIN( 533)		Float _hx_tmp4 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) ));
HXDLIN( 533)		Float _hx_tmp5 = (_hx_tmp4 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) )));
HXDLIN( 533)		Float _hx_tmp6 = (_hx_tmp5 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) )));
HXDLIN( 533)		Float _hx_tmp7 = (_hx_tmp6 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) ));
HXDLIN( 533)		Float _hx_tmp8 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) ));
HXDLIN( 533)		Float _hx_tmp9 = (_hx_tmp8 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) )));
HXDLIN( 533)		Float _hx_tmp10 = (_hx_tmp9 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) )));
HXDLIN( 533)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp7,(_hx_tmp10 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) )),(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,deltaTransformVector,return )

void Matrix3D_obj::identity(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_540_identity)
HXDLIN( 540)		::Array< Float > a = ::Array_obj< Float >::fromData( _hx_array_data_3d2e93e6_24,16);
HXDLIN( 540)		int length = null();
HXDLIN( 540)		bool fixed = null();
HXDLIN( 540)		 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN( 540)		{
HXDLIN( 540)			int _g1 = (int)0;
HXDLIN( 540)			int _g = a->length;
HXDLIN( 540)			while((_g1 < _g)){
HXDLIN( 540)				_g1 = (_g1 + (int)1);
HXDLIN( 540)				int i = (_g1 - (int)1);
HXDLIN( 540)				::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            			}
            		}
HXDLIN( 540)		this->rawData = vector;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,identity,(void))

void Matrix3D_obj::interpolateTo( ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_562_interpolateTo)
HXDLIN( 562)		int _g = (int)0;
HXDLIN( 562)		while((_g < (int)16)){
HXDLIN( 562)			_g = (_g + (int)1);
HXDLIN( 562)			int i = (_g - (int)1);
HXLINE( 564)			{
HXLINE( 564)				 ::openfl::_Vector::AbstractVector this1 = this->rawData;
HXDLIN( 564)				Float value = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,i)) );
HXDLIN( 564)				Float value1 = ( (Float)(::openfl::_Vector::IVector_obj::get(toMat->rawData->data,i)) );
HXDLIN( 564)				Float value2 = (value + ((value1 - ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,i)) )) * percent));
HXDLIN( 564)				::openfl::_Vector::IVector_obj::set(this1->data,i,value2);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,interpolateTo,(void))

bool Matrix3D_obj::invert(){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_571_invert)
HXLINE( 573)		Float d = this->get_determinant();
HXLINE( 574)		bool invertable = (::Math_obj::abs(d) > ((Float)0.00000000001));
HXLINE( 576)		if (invertable) {
HXLINE( 578)			d = ((Float)(int)1 / (Float)d);
HXLINE( 580)			Float m11 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) );
HXDLIN( 580)			Float m21 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) );
HXDLIN( 580)			Float m31 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) );
HXDLIN( 580)			Float m41 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
HXLINE( 581)			Float m12 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) );
HXDLIN( 581)			Float m22 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) );
HXDLIN( 581)			Float m32 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) );
HXDLIN( 581)			Float m42 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) );
HXLINE( 582)			Float m13 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) );
HXDLIN( 582)			Float m23 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) );
HXDLIN( 582)			Float m33 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) );
HXDLIN( 582)			Float m43 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) );
HXLINE( 583)			Float m14 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) );
HXDLIN( 583)			Float m24 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) );
HXDLIN( 583)			Float m34 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) );
HXDLIN( 583)			Float m44 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) );
HXLINE( 585)			{
HXLINE( 585)				::Dynamic this1 = this->rawData->data;
HXDLIN( 585)				::openfl::_Vector::IVector_obj::set(this1,(int)0,(d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24))))));
            			}
HXLINE( 586)			{
HXLINE( 586)				::Dynamic this2 = this->rawData->data;
HXDLIN( 586)				::openfl::_Vector::IVector_obj::set(this2,(int)1,(-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14))))));
            			}
HXLINE( 587)			{
HXLINE( 587)				::Dynamic this3 = this->rawData->data;
HXDLIN( 587)				::openfl::_Vector::IVector_obj::set(this3,(int)2,(d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14))))));
            			}
HXLINE( 588)			{
HXLINE( 588)				::Dynamic this4 = this->rawData->data;
HXDLIN( 588)				::openfl::_Vector::IVector_obj::set(this4,(int)3,(-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14))))));
            			}
HXLINE( 589)			{
HXLINE( 589)				::Dynamic this5 = this->rawData->data;
HXDLIN( 589)				::openfl::_Vector::IVector_obj::set(this5,(int)4,(-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24))))));
            			}
HXLINE( 590)			{
HXLINE( 590)				::Dynamic this6 = this->rawData->data;
HXDLIN( 590)				::openfl::_Vector::IVector_obj::set(this6,(int)5,(d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14))))));
            			}
HXLINE( 591)			{
HXLINE( 591)				::Dynamic this7 = this->rawData->data;
HXDLIN( 591)				::openfl::_Vector::IVector_obj::set(this7,(int)6,(-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14))))));
            			}
HXLINE( 592)			{
HXLINE( 592)				::Dynamic this8 = this->rawData->data;
HXDLIN( 592)				::openfl::_Vector::IVector_obj::set(this8,(int)7,(d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14))))));
            			}
HXLINE( 593)			{
HXLINE( 593)				::Dynamic this9 = this->rawData->data;
HXDLIN( 593)				::openfl::_Vector::IVector_obj::set(this9,(int)8,(d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24))))));
            			}
HXLINE( 594)			{
HXLINE( 594)				::Dynamic this10 = this->rawData->data;
HXDLIN( 594)				::openfl::_Vector::IVector_obj::set(this10,(int)9,(-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14))))));
            			}
HXLINE( 595)			{
HXLINE( 595)				::Dynamic this11 = this->rawData->data;
HXDLIN( 595)				::openfl::_Vector::IVector_obj::set(this11,(int)10,(d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14))))));
            			}
HXLINE( 596)			{
HXLINE( 596)				::Dynamic this12 = this->rawData->data;
HXDLIN( 596)				::openfl::_Vector::IVector_obj::set(this12,(int)11,(-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14))))));
            			}
HXLINE( 597)			{
HXLINE( 597)				::Dynamic this13 = this->rawData->data;
HXDLIN( 597)				::openfl::_Vector::IVector_obj::set(this13,(int)12,(-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23))))));
            			}
HXLINE( 598)			{
HXLINE( 598)				::Dynamic this14 = this->rawData->data;
HXDLIN( 598)				::openfl::_Vector::IVector_obj::set(this14,(int)13,(d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13))))));
            			}
HXLINE( 599)			{
HXLINE( 599)				::Dynamic this15 = this->rawData->data;
HXDLIN( 599)				::openfl::_Vector::IVector_obj::set(this15,(int)14,(-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13))))));
            			}
HXLINE( 600)			{
HXLINE( 600)				::Dynamic this16 = this->rawData->data;
HXDLIN( 600)				::openfl::_Vector::IVector_obj::set(this16,(int)15,(d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13))))));
            			}
            		}
HXLINE( 604)		return invertable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,invert,return )

void Matrix3D_obj::pointAt( ::openfl::geom::Vector3D pos, ::openfl::geom::Vector3D at, ::openfl::geom::Vector3D up){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_609_pointAt)
HXLINE( 611)		if (hx::IsNull( at )) {
HXLINE( 613)			at =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)-1,null());
            		}
HXLINE( 617)		if (hx::IsNull( up )) {
HXLINE( 619)			up =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)0,(int)-1,(int)0,null());
            		}
HXLINE( 623)		 ::openfl::geom::Vector3D dir = at->subtract(pos);
HXLINE( 624)		 ::openfl::geom::Vector3D vup = up->clone();
HXLINE( 625)		 ::openfl::geom::Vector3D right;
HXLINE( 627)		dir->normalize();
HXLINE( 628)		vup->normalize();
HXLINE( 630)		 ::openfl::geom::Vector3D dir2 = dir->clone();
HXLINE( 631)		dir2->scaleBy(vup->dotProduct(dir));
HXLINE( 633)		vup = vup->subtract(dir2);
HXLINE( 635)		if ((vup->get_length() > (int)0)) {
HXLINE( 637)			vup->normalize();
            		}
            		else {
HXLINE( 641)			if ((dir->x != (int)0)) {
HXLINE( 643)				vup =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,-(dir->y),dir->x,(int)0,null());
            			}
            			else {
HXLINE( 647)				vup =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null());
            			}
            		}
HXLINE( 653)		right = vup->crossProduct(dir);
HXLINE( 654)		right->normalize();
HXLINE( 656)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)0,right->x);
HXLINE( 657)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)4,right->y);
HXLINE( 658)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)8,right->z);
HXLINE( 659)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)12,((Float)0.0));
HXLINE( 660)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)1,vup->x);
HXLINE( 661)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)5,vup->y);
HXLINE( 662)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)9,vup->z);
HXLINE( 663)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)13,((Float)0.0));
HXLINE( 664)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)2,dir->x);
HXLINE( 665)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)6,dir->y);
HXLINE( 666)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)10,dir->z);
HXLINE( 667)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)14,((Float)0.0));
HXLINE( 668)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)3,pos->x);
HXLINE( 669)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)7,pos->y);
HXLINE( 670)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)11,pos->z);
HXLINE( 671)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)15,((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,pointAt,(void))

void Matrix3D_obj::prepend( ::openfl::geom::Matrix3D rhs){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_676_prepend)
HXLINE( 678)		Float m111 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)0)) );
HXDLIN( 678)		Float m121 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)4)) );
HXDLIN( 678)		Float m131 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)8)) );
HXDLIN( 678)		Float m141 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)12)) );
HXDLIN( 678)		Float m112 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)1)) );
HXDLIN( 678)		Float m122 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)5)) );
HXDLIN( 678)		Float m132 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)9)) );
HXDLIN( 678)		Float m142 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)13)) );
HXDLIN( 678)		Float m113 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)2)) );
HXDLIN( 678)		Float m123 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)6)) );
HXDLIN( 678)		Float m133 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)10)) );
HXDLIN( 678)		Float m143 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)14)) );
HXDLIN( 678)		Float m114 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)3)) );
HXDLIN( 678)		Float m124 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)7)) );
HXDLIN( 678)		Float m134 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)11)) );
HXDLIN( 678)		Float m144 = ( (Float)(::openfl::_Vector::IVector_obj::get(rhs->rawData->data,(int)15)) );
HXDLIN( 678)		Float m211 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) );
HXDLIN( 678)		Float m221 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) );
HXDLIN( 678)		Float m231 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) );
HXDLIN( 678)		Float m241 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
HXDLIN( 678)		Float m212 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) );
HXDLIN( 678)		Float m222 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) );
HXDLIN( 678)		Float m232 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) );
HXDLIN( 678)		Float m242 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) );
HXDLIN( 678)		Float m213 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) );
HXDLIN( 678)		Float m223 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) );
HXDLIN( 678)		Float m233 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) );
HXDLIN( 678)		Float m243 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) );
HXDLIN( 678)		Float m214 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) );
HXDLIN( 678)		Float m224 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) );
HXDLIN( 678)		Float m234 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) );
HXDLIN( 678)		Float m244 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) );
HXLINE( 687)		{
HXLINE( 687)			::Dynamic this1 = this->rawData->data;
HXDLIN( 687)			::openfl::_Vector::IVector_obj::set(this1,(int)0,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
            		}
HXLINE( 688)		{
HXLINE( 688)			::Dynamic this2 = this->rawData->data;
HXDLIN( 688)			::openfl::_Vector::IVector_obj::set(this2,(int)1,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
            		}
HXLINE( 689)		{
HXLINE( 689)			::Dynamic this3 = this->rawData->data;
HXDLIN( 689)			::openfl::_Vector::IVector_obj::set(this3,(int)2,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
            		}
HXLINE( 690)		{
HXLINE( 690)			::Dynamic this4 = this->rawData->data;
HXDLIN( 690)			::openfl::_Vector::IVector_obj::set(this4,(int)3,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
            		}
HXLINE( 692)		{
HXLINE( 692)			::Dynamic this5 = this->rawData->data;
HXDLIN( 692)			::openfl::_Vector::IVector_obj::set(this5,(int)4,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
            		}
HXLINE( 693)		{
HXLINE( 693)			::Dynamic this6 = this->rawData->data;
HXDLIN( 693)			::openfl::_Vector::IVector_obj::set(this6,(int)5,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
            		}
HXLINE( 694)		{
HXLINE( 694)			::Dynamic this7 = this->rawData->data;
HXDLIN( 694)			::openfl::_Vector::IVector_obj::set(this7,(int)6,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
            		}
HXLINE( 695)		{
HXLINE( 695)			::Dynamic this8 = this->rawData->data;
HXDLIN( 695)			::openfl::_Vector::IVector_obj::set(this8,(int)7,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
            		}
HXLINE( 697)		{
HXLINE( 697)			::Dynamic this9 = this->rawData->data;
HXDLIN( 697)			::openfl::_Vector::IVector_obj::set(this9,(int)8,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
            		}
HXLINE( 698)		{
HXLINE( 698)			::Dynamic this10 = this->rawData->data;
HXDLIN( 698)			::openfl::_Vector::IVector_obj::set(this10,(int)9,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
            		}
HXLINE( 699)		{
HXLINE( 699)			::Dynamic this11 = this->rawData->data;
HXDLIN( 699)			::openfl::_Vector::IVector_obj::set(this11,(int)10,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
            		}
HXLINE( 700)		{
HXLINE( 700)			::Dynamic this12 = this->rawData->data;
HXDLIN( 700)			::openfl::_Vector::IVector_obj::set(this12,(int)11,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
            		}
HXLINE( 702)		{
HXLINE( 702)			::Dynamic this13 = this->rawData->data;
HXDLIN( 702)			::openfl::_Vector::IVector_obj::set(this13,(int)12,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
            		}
HXLINE( 703)		{
HXLINE( 703)			::Dynamic this14 = this->rawData->data;
HXDLIN( 703)			::openfl::_Vector::IVector_obj::set(this14,(int)13,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
            		}
HXLINE( 704)		{
HXLINE( 704)			::Dynamic this15 = this->rawData->data;
HXDLIN( 704)			::openfl::_Vector::IVector_obj::set(this15,(int)14,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
            		}
HXLINE( 705)		{
HXLINE( 705)			::Dynamic this16 = this->rawData->data;
HXDLIN( 705)			::openfl::_Vector::IVector_obj::set(this16,(int)15,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,prepend,(void))

void Matrix3D_obj::prependRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_710_prependRotation)
HXLINE( 712)		Float tx;
HXDLIN( 712)		Float ty;
HXDLIN( 712)		Float tz = (int)0;
HXLINE( 713)		ty = tz;
HXDLIN( 713)		tx = ty;
HXLINE( 714)		if (hx::IsNotNull( pivotPoint )) {
HXLINE( 715)			tx = pivotPoint->x;
HXLINE( 716)			ty = pivotPoint->y;
HXLINE( 717)			tz = pivotPoint->z;
            		}
HXLINE( 719)		Float radian = ((Float)(degrees * ::Math_obj::PI) / (Float)(int)180);
HXLINE( 720)		Float cos = ::Math_obj::cos(radian);
HXLINE( 721)		Float sin = ::Math_obj::sin(radian);
HXLINE( 722)		Float x = axis->x;
HXLINE( 723)		Float y = axis->y;
HXLINE( 724)		Float z = axis->z;
HXLINE( 725)		Float x2 = (x * x);
HXLINE( 726)		Float y2 = (y * y);
HXLINE( 727)		Float z2 = (z * z);
HXLINE( 728)		Float ls = ((x2 + y2) + z2);
HXLINE( 729)		if ((ls != (int)0)) {
HXLINE( 730)			Float l = ::Math_obj::sqrt(ls);
HXLINE( 731)			x = ((Float)x / (Float)l);
HXLINE( 732)			y = ((Float)y / (Float)l);
HXLINE( 733)			z = ((Float)z / (Float)l);
HXLINE( 734)			x2 = ((Float)x2 / (Float)ls);
HXLINE( 735)			y2 = ((Float)y2 / (Float)ls);
HXLINE( 736)			z2 = ((Float)z2 / (Float)ls);
            		}
HXLINE( 738)		Float ccos = ((int)1 - cos);
HXLINE( 739)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 740)		 ::openfl::_Vector::AbstractVector d = m->rawData;
HXLINE( 741)		::Dynamic d1 = d->data;
HXDLIN( 741)		::openfl::_Vector::IVector_obj::set(d1,(int)0,(x2 + ((y2 + z2) * cos)));
HXLINE( 742)		::Dynamic d2 = d->data;
HXDLIN( 742)		::openfl::_Vector::IVector_obj::set(d2,(int)1,(((x * y) * ccos) + (z * sin)));
HXLINE( 743)		::Dynamic d3 = d->data;
HXDLIN( 743)		::openfl::_Vector::IVector_obj::set(d3,(int)2,(((x * z) * ccos) - (y * sin)));
HXLINE( 744)		::Dynamic d4 = d->data;
HXDLIN( 744)		::openfl::_Vector::IVector_obj::set(d4,(int)4,(((x * y) * ccos) - (z * sin)));
HXLINE( 745)		::Dynamic d5 = d->data;
HXDLIN( 745)		::openfl::_Vector::IVector_obj::set(d5,(int)5,(y2 + ((x2 + z2) * cos)));
HXLINE( 746)		::Dynamic d6 = d->data;
HXDLIN( 746)		::openfl::_Vector::IVector_obj::set(d6,(int)6,(((y * z) * ccos) + (x * sin)));
HXLINE( 747)		::Dynamic d7 = d->data;
HXDLIN( 747)		::openfl::_Vector::IVector_obj::set(d7,(int)8,(((x * z) * ccos) + (y * sin)));
HXLINE( 748)		::Dynamic d8 = d->data;
HXDLIN( 748)		::openfl::_Vector::IVector_obj::set(d8,(int)9,(((y * z) * ccos) - (x * sin)));
HXLINE( 749)		::Dynamic d9 = d->data;
HXDLIN( 749)		::openfl::_Vector::IVector_obj::set(d9,(int)10,(z2 + ((x2 + y2) * cos)));
HXLINE( 750)		::Dynamic d10 = d->data;
HXDLIN( 750)		::openfl::_Vector::IVector_obj::set(d10,(int)12,((((tx * (y2 + z2)) - (x * ((ty * y) + (tz * z)))) * ccos) + (((ty * z) - (tz * y)) * sin)));
HXLINE( 751)		::Dynamic d11 = d->data;
HXDLIN( 751)		::openfl::_Vector::IVector_obj::set(d11,(int)13,((((ty * (x2 + z2)) - (y * ((tx * x) + (tz * z)))) * ccos) + (((tz * x) - (tx * z)) * sin)));
HXLINE( 752)		::Dynamic d12 = d->data;
HXDLIN( 752)		::openfl::_Vector::IVector_obj::set(d12,(int)14,((((tz * (x2 + y2)) - (z * ((tx * x) + (ty * y)))) * ccos) + (((tx * y) - (ty * x)) * sin)));
HXLINE( 754)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependRotation,(void))

void Matrix3D_obj::prependScale(Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_761_prependScale)
HXDLIN( 761)		::Array< Float > a = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 761)		int length = null();
HXDLIN( 761)		bool fixed = null();
HXDLIN( 761)		 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN( 761)		{
HXDLIN( 761)			int _g1 = (int)0;
HXDLIN( 761)			int _g = a->length;
HXDLIN( 761)			while((_g1 < _g)){
HXDLIN( 761)				_g1 = (_g1 + (int)1);
HXDLIN( 761)				int i = (_g1 - (int)1);
HXDLIN( 761)				::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            			}
            		}
HXDLIN( 761)		this->prepend( ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependScale,(void))

void Matrix3D_obj::prependTranslation(Float x,Float y,Float z){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_766_prependTranslation)
HXLINE( 768)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 769)		m->set_position( ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,x,y,z,null()));
HXLINE( 770)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependTranslation,(void))

bool Matrix3D_obj::recompose( ::openfl::_Vector::AbstractVector components, ::Dynamic orientationStyle){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_775_recompose)
HXLINE( 777)		bool _hx_tmp;
HXDLIN( 777)		bool _hx_tmp1;
HXDLIN( 777)		bool _hx_tmp2;
HXDLIN( 777)		if ((::openfl::_Vector::IVector_obj::get_length(components->data) >= (int)3)) {
HXLINE( 777)			_hx_tmp2 = (( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->x == (int)0);
            		}
            		else {
HXLINE( 777)			_hx_tmp2 = true;
            		}
HXDLIN( 777)		if (!(_hx_tmp2)) {
HXLINE( 777)			_hx_tmp1 = (( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->y == (int)0);
            		}
            		else {
HXLINE( 777)			_hx_tmp1 = true;
            		}
HXDLIN( 777)		if (!(_hx_tmp1)) {
HXLINE( 777)			_hx_tmp = (( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->z == (int)0);
            		}
            		else {
HXLINE( 777)			_hx_tmp = true;
            		}
HXDLIN( 777)		if (_hx_tmp) {
HXLINE( 779)			return false;
            		}
HXLINE( 783)		if (hx::IsNull( orientationStyle )) {
HXLINE( 785)			orientationStyle = (int)1;
            		}
HXLINE( 789)		this->identity();
HXLINE( 791)		::Array< Float > scale = ::Array_obj< Float >::__new(0);
HXLINE( 792)		scale[(int)0] = (scale[(int)1] = (scale[(int)2] = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->x));
HXLINE( 793)		scale[(int)4] = (scale[(int)5] = (scale[(int)6] = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->y));
HXLINE( 794)		scale[(int)8] = (scale[(int)9] = (scale[(int)10] = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->z));
HXLINE( 796)		if (hx::IsNull( orientationStyle )) {
HXLINE( 826)			Float x = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->x;
HXLINE( 827)			Float y = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->y;
HXLINE( 828)			Float z = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->z;
HXLINE( 829)			Float w = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->w;
HXLINE( 831)			if (hx::IsEq( orientationStyle,(int)0 )) {
HXLINE( 833)				x = (x * ::Math_obj::sin(((Float)w / (Float)(int)2)));
HXLINE( 834)				y = (y * ::Math_obj::sin(((Float)w / (Float)(int)2)));
HXLINE( 835)				z = (z * ::Math_obj::sin(((Float)w / (Float)(int)2)));
HXLINE( 836)				w = ::Math_obj::cos(((Float)w / (Float)(int)2));
            			}
HXLINE( 840)			{
HXLINE( 840)				::Dynamic this1 = this->rawData->data;
HXDLIN( 840)				::openfl::_Vector::IVector_obj::set(this1,(int)0,((((int)1 - (((int)2 * y) * y)) - (((int)2 * z) * z)) * scale->__get((int)0)));
            			}
HXLINE( 841)			{
HXLINE( 841)				::Dynamic this2 = this->rawData->data;
HXDLIN( 841)				::openfl::_Vector::IVector_obj::set(this2,(int)1,(((((int)2 * x) * y) + (((int)2 * w) * z)) * scale->__get((int)1)));
            			}
HXLINE( 842)			{
HXLINE( 842)				::Dynamic this3 = this->rawData->data;
HXDLIN( 842)				::openfl::_Vector::IVector_obj::set(this3,(int)2,(((((int)2 * x) * z) - (((int)2 * w) * y)) * scale->__get((int)2)));
            			}
HXLINE( 843)			::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)3,(int)0);
HXLINE( 844)			{
HXLINE( 844)				::Dynamic this4 = this->rawData->data;
HXDLIN( 844)				::openfl::_Vector::IVector_obj::set(this4,(int)4,(((((int)2 * x) * y) - (((int)2 * w) * z)) * scale->__get((int)4)));
            			}
HXLINE( 845)			{
HXLINE( 845)				::Dynamic this5 = this->rawData->data;
HXDLIN( 845)				::openfl::_Vector::IVector_obj::set(this5,(int)5,((((int)1 - (((int)2 * x) * x)) - (((int)2 * z) * z)) * scale->__get((int)5)));
            			}
HXLINE( 846)			{
HXLINE( 846)				::Dynamic this6 = this->rawData->data;
HXDLIN( 846)				::openfl::_Vector::IVector_obj::set(this6,(int)6,(((((int)2 * y) * z) + (((int)2 * w) * x)) * scale->__get((int)6)));
            			}
HXLINE( 847)			::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)7,(int)0);
HXLINE( 848)			{
HXLINE( 848)				::Dynamic this7 = this->rawData->data;
HXDLIN( 848)				::openfl::_Vector::IVector_obj::set(this7,(int)8,(((((int)2 * x) * z) + (((int)2 * w) * y)) * scale->__get((int)8)));
            			}
HXLINE( 849)			{
HXLINE( 849)				::Dynamic this8 = this->rawData->data;
HXDLIN( 849)				::openfl::_Vector::IVector_obj::set(this8,(int)9,(((((int)2 * y) * z) - (((int)2 * w) * x)) * scale->__get((int)9)));
            			}
HXLINE( 850)			{
HXLINE( 850)				::Dynamic this9 = this->rawData->data;
HXDLIN( 850)				::openfl::_Vector::IVector_obj::set(this9,(int)10,((((int)1 - (((int)2 * x) * x)) - (((int)2 * y) * y)) * scale->__get((int)10)));
            			}
HXLINE( 851)			::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)11,(int)0);
HXLINE( 852)			{
HXLINE( 852)				 ::openfl::_Vector::AbstractVector this10 = this->rawData;
HXDLIN( 852)				Float value = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->x;
HXDLIN( 852)				::openfl::_Vector::IVector_obj::set(this10->data,(int)12,value);
            			}
HXLINE( 853)			{
HXLINE( 853)				 ::openfl::_Vector::AbstractVector this11 = this->rawData;
HXDLIN( 853)				Float value1 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->y;
HXDLIN( 853)				::openfl::_Vector::IVector_obj::set(this11->data,(int)13,value1);
            			}
HXLINE( 854)			{
HXLINE( 854)				 ::openfl::_Vector::AbstractVector this12 = this->rawData;
HXDLIN( 854)				Float value2 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->z;
HXDLIN( 854)				::openfl::_Vector::IVector_obj::set(this12->data,(int)14,value2);
            			}
HXLINE( 855)			::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)15,(int)1);
            		}
            		else {
HXLINE( 796)			if (hx::IsEq( orientationStyle,(int)1 )) {
HXLINE( 800)				Float cx = ::Math_obj::cos(( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->x);
HXLINE( 801)				Float cy = ::Math_obj::cos(( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->y);
HXLINE( 802)				Float cz = ::Math_obj::cos(( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->z);
HXLINE( 803)				Float sx = ::Math_obj::sin(( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->x);
HXLINE( 804)				Float sy = ::Math_obj::sin(( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->y);
HXLINE( 805)				Float sz = ::Math_obj::sin(( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->z);
HXLINE( 807)				{
HXLINE( 807)					::Dynamic this13 = this->rawData->data;
HXDLIN( 807)					::openfl::_Vector::IVector_obj::set(this13,(int)0,((cy * cz) * scale->__get((int)0)));
            				}
HXLINE( 808)				{
HXLINE( 808)					::Dynamic this14 = this->rawData->data;
HXDLIN( 808)					::openfl::_Vector::IVector_obj::set(this14,(int)1,((cy * sz) * scale->__get((int)1)));
            				}
HXLINE( 809)				{
HXLINE( 809)					::Dynamic this15 = this->rawData->data;
HXDLIN( 809)					::openfl::_Vector::IVector_obj::set(this15,(int)2,(-(sy) * scale->__get((int)2)));
            				}
HXLINE( 810)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)3,(int)0);
HXLINE( 811)				{
HXLINE( 811)					::Dynamic this16 = this->rawData->data;
HXDLIN( 811)					::openfl::_Vector::IVector_obj::set(this16,(int)4,((((sx * sy) * cz) - (cx * sz)) * scale->__get((int)4)));
            				}
HXLINE( 812)				{
HXLINE( 812)					::Dynamic this17 = this->rawData->data;
HXDLIN( 812)					::openfl::_Vector::IVector_obj::set(this17,(int)5,((((sx * sy) * sz) + (cx * cz)) * scale->__get((int)5)));
            				}
HXLINE( 813)				{
HXLINE( 813)					::Dynamic this18 = this->rawData->data;
HXDLIN( 813)					::openfl::_Vector::IVector_obj::set(this18,(int)6,((sx * cy) * scale->__get((int)6)));
            				}
HXLINE( 814)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)7,(int)0);
HXLINE( 815)				{
HXLINE( 815)					::Dynamic this19 = this->rawData->data;
HXDLIN( 815)					::openfl::_Vector::IVector_obj::set(this19,(int)8,((((cx * sy) * cz) + (sx * sz)) * scale->__get((int)8)));
            				}
HXLINE( 816)				{
HXLINE( 816)					::Dynamic this20 = this->rawData->data;
HXDLIN( 816)					::openfl::_Vector::IVector_obj::set(this20,(int)9,((((cx * sy) * sz) - (sx * cz)) * scale->__get((int)9)));
            				}
HXLINE( 817)				{
HXLINE( 817)					::Dynamic this21 = this->rawData->data;
HXDLIN( 817)					::openfl::_Vector::IVector_obj::set(this21,(int)10,((cx * cy) * scale->__get((int)10)));
            				}
HXLINE( 818)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)11,(int)0);
HXLINE( 819)				{
HXLINE( 819)					 ::openfl::_Vector::AbstractVector this22 = this->rawData;
HXDLIN( 819)					Float value3 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->x;
HXDLIN( 819)					::openfl::_Vector::IVector_obj::set(this22->data,(int)12,value3);
            				}
HXLINE( 820)				{
HXLINE( 820)					 ::openfl::_Vector::AbstractVector this23 = this->rawData;
HXDLIN( 820)					Float value4 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->y;
HXDLIN( 820)					::openfl::_Vector::IVector_obj::set(this23->data,(int)13,value4);
            				}
HXLINE( 821)				{
HXLINE( 821)					 ::openfl::_Vector::AbstractVector this24 = this->rawData;
HXDLIN( 821)					Float value5 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->z;
HXDLIN( 821)					::openfl::_Vector::IVector_obj::set(this24->data,(int)14,value5);
            				}
HXLINE( 822)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)15,(int)1);
            			}
            			else {
HXLINE( 826)				Float x1 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->x;
HXLINE( 827)				Float y1 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->y;
HXLINE( 828)				Float z1 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->z;
HXLINE( 829)				Float w1 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)1)) )->w;
HXLINE( 831)				if (hx::IsEq( orientationStyle,(int)0 )) {
HXLINE( 833)					x1 = (x1 * ::Math_obj::sin(((Float)w1 / (Float)(int)2)));
HXLINE( 834)					y1 = (y1 * ::Math_obj::sin(((Float)w1 / (Float)(int)2)));
HXLINE( 835)					z1 = (z1 * ::Math_obj::sin(((Float)w1 / (Float)(int)2)));
HXLINE( 836)					w1 = ::Math_obj::cos(((Float)w1 / (Float)(int)2));
            				}
HXLINE( 840)				{
HXLINE( 840)					::Dynamic this25 = this->rawData->data;
HXDLIN( 840)					::openfl::_Vector::IVector_obj::set(this25,(int)0,((((int)1 - (((int)2 * y1) * y1)) - (((int)2 * z1) * z1)) * scale->__get((int)0)));
            				}
HXLINE( 841)				{
HXLINE( 841)					::Dynamic this26 = this->rawData->data;
HXDLIN( 841)					::openfl::_Vector::IVector_obj::set(this26,(int)1,(((((int)2 * x1) * y1) + (((int)2 * w1) * z1)) * scale->__get((int)1)));
            				}
HXLINE( 842)				{
HXLINE( 842)					::Dynamic this27 = this->rawData->data;
HXDLIN( 842)					::openfl::_Vector::IVector_obj::set(this27,(int)2,(((((int)2 * x1) * z1) - (((int)2 * w1) * y1)) * scale->__get((int)2)));
            				}
HXLINE( 843)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)3,(int)0);
HXLINE( 844)				{
HXLINE( 844)					::Dynamic this28 = this->rawData->data;
HXDLIN( 844)					::openfl::_Vector::IVector_obj::set(this28,(int)4,(((((int)2 * x1) * y1) - (((int)2 * w1) * z1)) * scale->__get((int)4)));
            				}
HXLINE( 845)				{
HXLINE( 845)					::Dynamic this29 = this->rawData->data;
HXDLIN( 845)					::openfl::_Vector::IVector_obj::set(this29,(int)5,((((int)1 - (((int)2 * x1) * x1)) - (((int)2 * z1) * z1)) * scale->__get((int)5)));
            				}
HXLINE( 846)				{
HXLINE( 846)					::Dynamic this30 = this->rawData->data;
HXDLIN( 846)					::openfl::_Vector::IVector_obj::set(this30,(int)6,(((((int)2 * y1) * z1) + (((int)2 * w1) * x1)) * scale->__get((int)6)));
            				}
HXLINE( 847)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)7,(int)0);
HXLINE( 848)				{
HXLINE( 848)					::Dynamic this31 = this->rawData->data;
HXDLIN( 848)					::openfl::_Vector::IVector_obj::set(this31,(int)8,(((((int)2 * x1) * z1) + (((int)2 * w1) * y1)) * scale->__get((int)8)));
            				}
HXLINE( 849)				{
HXLINE( 849)					::Dynamic this32 = this->rawData->data;
HXDLIN( 849)					::openfl::_Vector::IVector_obj::set(this32,(int)9,(((((int)2 * y1) * z1) - (((int)2 * w1) * x1)) * scale->__get((int)9)));
            				}
HXLINE( 850)				{
HXLINE( 850)					::Dynamic this33 = this->rawData->data;
HXDLIN( 850)					::openfl::_Vector::IVector_obj::set(this33,(int)10,((((int)1 - (((int)2 * x1) * x1)) - (((int)2 * y1) * y1)) * scale->__get((int)10)));
            				}
HXLINE( 851)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)11,(int)0);
HXLINE( 852)				{
HXLINE( 852)					 ::openfl::_Vector::AbstractVector this34 = this->rawData;
HXDLIN( 852)					Float value6 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->x;
HXDLIN( 852)					::openfl::_Vector::IVector_obj::set(this34->data,(int)12,value6);
            				}
HXLINE( 853)				{
HXLINE( 853)					 ::openfl::_Vector::AbstractVector this35 = this->rawData;
HXDLIN( 853)					Float value7 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->y;
HXDLIN( 853)					::openfl::_Vector::IVector_obj::set(this35->data,(int)13,value7);
            				}
HXLINE( 854)				{
HXLINE( 854)					 ::openfl::_Vector::AbstractVector this36 = this->rawData;
HXDLIN( 854)					Float value8 = ( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)0)) )->z;
HXDLIN( 854)					::openfl::_Vector::IVector_obj::set(this36->data,(int)14,value8);
            				}
HXLINE( 855)				::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)15,(int)1);
            			}
            		}
HXLINE( 859)		if ((( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->x == (int)0)) {
HXLINE( 861)			::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)0,((Float)1e-15));
            		}
HXLINE( 865)		if ((( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->y == (int)0)) {
HXLINE( 867)			::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)5,((Float)1e-15));
            		}
HXLINE( 871)		if ((( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->z == (int)0)) {
HXLINE( 873)			::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)10,((Float)1e-15));
            		}
HXLINE( 877)		bool _hx_tmp3;
HXDLIN( 877)		bool _hx_tmp4;
HXDLIN( 877)		if ((( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->x != (int)0)) {
HXLINE( 877)			_hx_tmp4 = (( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->y == (int)0);
            		}
            		else {
HXLINE( 877)			_hx_tmp4 = true;
            		}
HXDLIN( 877)		if (!(_hx_tmp4)) {
HXLINE( 877)			_hx_tmp3 = (( ( ::openfl::geom::Vector3D)(::openfl::_Vector::IVector_obj::get(components->data,(int)2)) )->y == (int)0);
            		}
            		else {
HXLINE( 877)			_hx_tmp3 = true;
            		}
HXDLIN( 877)		return !(_hx_tmp3);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,recompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::transformVector( ::openfl::geom::Vector3D v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_882_transformVector)
HXLINE( 884)		Float x = v->x;
HXLINE( 885)		Float y = v->y;
HXLINE( 886)		Float z = v->z;
HXLINE( 888)		Float _hx_tmp = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) ));
HXDLIN( 888)		Float _hx_tmp1 = (_hx_tmp + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) )));
HXDLIN( 888)		Float _hx_tmp2 = (_hx_tmp1 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) )));
HXDLIN( 888)		Float _hx_tmp3 = (_hx_tmp2 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) ));
HXDLIN( 888)		Float _hx_tmp4 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) ));
HXDLIN( 888)		Float _hx_tmp5 = (_hx_tmp4 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) )));
HXDLIN( 888)		Float _hx_tmp6 = (_hx_tmp5 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) )));
HXDLIN( 888)		Float _hx_tmp7 = (_hx_tmp6 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) ));
HXDLIN( 888)		Float _hx_tmp8 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) ));
HXDLIN( 888)		Float _hx_tmp9 = (_hx_tmp8 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) )));
HXDLIN( 888)		Float _hx_tmp10 = (_hx_tmp9 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) )));
HXDLIN( 888)		Float _hx_tmp11 = (_hx_tmp10 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) ));
HXDLIN( 888)		Float _hx_tmp12 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) ));
HXDLIN( 888)		Float _hx_tmp13 = (_hx_tmp12 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) )));
HXDLIN( 888)		Float _hx_tmp14 = (_hx_tmp13 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) )));
HXDLIN( 888)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp7,_hx_tmp11,(_hx_tmp14 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,transformVector,return )

void Matrix3D_obj::transformVectors( ::openfl::_Vector::AbstractVector vin, ::openfl::_Vector::AbstractVector vout){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_893_transformVectors)
HXLINE( 895)		int i = (int)0;
HXLINE( 896)		Float x;
HXDLIN( 896)		Float y;
HXDLIN( 896)		Float z;
HXLINE( 898)		while(((i + (int)3) <= ::openfl::_Vector::IVector_obj::get_length(vin->data))){
HXLINE( 900)			x = ( (Float)(::openfl::_Vector::IVector_obj::get(vin->data,i)) );
HXLINE( 901)			::Dynamic vin1 = vin->data;
HXDLIN( 901)			y = ( (Float)(::openfl::_Vector::IVector_obj::get(vin1,(i + (int)1))) );
HXLINE( 902)			::Dynamic vin2 = vin->data;
HXDLIN( 902)			z = ( (Float)(::openfl::_Vector::IVector_obj::get(vin2,(i + (int)2))) );
HXLINE( 904)			{
HXLINE( 904)				Float value = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) ));
HXDLIN( 904)				Float value1 = (value + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) )));
HXDLIN( 904)				Float value2 = (value1 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) )));
HXDLIN( 904)				Float value3 = (value2 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) ));
HXDLIN( 904)				::openfl::_Vector::IVector_obj::set(vout->data,i,value3);
            			}
HXLINE( 905)			{
HXLINE( 905)				Float value4 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) ));
HXDLIN( 905)				Float value5 = (value4 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) )));
HXDLIN( 905)				Float value6 = (value5 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) )));
HXDLIN( 905)				Float value7 = (value6 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) ));
HXDLIN( 905)				::Dynamic vout1 = vout->data;
HXDLIN( 905)				::openfl::_Vector::IVector_obj::set(vout1,(i + (int)1),value7);
            			}
HXLINE( 906)			{
HXLINE( 906)				Float value8 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) ));
HXDLIN( 906)				Float value9 = (value8 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) )));
HXDLIN( 906)				Float value10 = (value9 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) )));
HXDLIN( 906)				Float value11 = (value10 + ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) ));
HXDLIN( 906)				::Dynamic vout2 = vout->data;
HXDLIN( 906)				::openfl::_Vector::IVector_obj::set(vout2,(i + (int)2),value11);
            			}
HXLINE( 908)			i = (i + (int)3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,transformVectors,(void))

void Matrix3D_obj::transpose(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_915_transpose)
HXLINE( 917)		 ::openfl::_Vector::AbstractVector oRawData =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::copy(this->rawData->data),null());
HXLINE( 918)		{
HXLINE( 918)			 ::openfl::_Vector::AbstractVector this1 = this->rawData;
HXDLIN( 918)			Float value = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)4)) );
HXDLIN( 918)			::openfl::_Vector::IVector_obj::set(this1->data,(int)1,value);
            		}
HXLINE( 919)		{
HXLINE( 919)			 ::openfl::_Vector::AbstractVector this2 = this->rawData;
HXDLIN( 919)			Float value1 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)8)) );
HXDLIN( 919)			::openfl::_Vector::IVector_obj::set(this2->data,(int)2,value1);
            		}
HXLINE( 920)		{
HXLINE( 920)			 ::openfl::_Vector::AbstractVector this3 = this->rawData;
HXDLIN( 920)			Float value2 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)12)) );
HXDLIN( 920)			::openfl::_Vector::IVector_obj::set(this3->data,(int)3,value2);
            		}
HXLINE( 921)		{
HXLINE( 921)			 ::openfl::_Vector::AbstractVector this4 = this->rawData;
HXDLIN( 921)			Float value3 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)1)) );
HXDLIN( 921)			::openfl::_Vector::IVector_obj::set(this4->data,(int)4,value3);
            		}
HXLINE( 922)		{
HXLINE( 922)			 ::openfl::_Vector::AbstractVector this5 = this->rawData;
HXDLIN( 922)			Float value4 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)9)) );
HXDLIN( 922)			::openfl::_Vector::IVector_obj::set(this5->data,(int)6,value4);
            		}
HXLINE( 923)		{
HXLINE( 923)			 ::openfl::_Vector::AbstractVector this6 = this->rawData;
HXDLIN( 923)			Float value5 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)13)) );
HXDLIN( 923)			::openfl::_Vector::IVector_obj::set(this6->data,(int)7,value5);
            		}
HXLINE( 924)		{
HXLINE( 924)			 ::openfl::_Vector::AbstractVector this7 = this->rawData;
HXDLIN( 924)			Float value6 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)2)) );
HXDLIN( 924)			::openfl::_Vector::IVector_obj::set(this7->data,(int)8,value6);
            		}
HXLINE( 925)		{
HXLINE( 925)			 ::openfl::_Vector::AbstractVector this8 = this->rawData;
HXDLIN( 925)			Float value7 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)6)) );
HXDLIN( 925)			::openfl::_Vector::IVector_obj::set(this8->data,(int)9,value7);
            		}
HXLINE( 926)		{
HXLINE( 926)			 ::openfl::_Vector::AbstractVector this9 = this->rawData;
HXDLIN( 926)			Float value8 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)14)) );
HXDLIN( 926)			::openfl::_Vector::IVector_obj::set(this9->data,(int)11,value8);
            		}
HXLINE( 927)		{
HXLINE( 927)			 ::openfl::_Vector::AbstractVector this10 = this->rawData;
HXDLIN( 927)			Float value9 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)3)) );
HXDLIN( 927)			::openfl::_Vector::IVector_obj::set(this10->data,(int)12,value9);
            		}
HXLINE( 928)		{
HXLINE( 928)			 ::openfl::_Vector::AbstractVector this11 = this->rawData;
HXDLIN( 928)			Float value10 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)7)) );
HXDLIN( 928)			::openfl::_Vector::IVector_obj::set(this11->data,(int)13,value10);
            		}
HXLINE( 929)		{
HXLINE( 929)			 ::openfl::_Vector::AbstractVector this12 = this->rawData;
HXDLIN( 929)			Float value11 = ( (Float)(::openfl::_Vector::IVector_obj::get(oRawData->data,(int)11)) );
HXDLIN( 929)			::openfl::_Vector::IVector_obj::set(this12->data,(int)14,value11);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,transpose,(void))

Float Matrix3D_obj::get_determinant(){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_975_get_determinant)
HXDLIN( 975)		Float _hx_tmp = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) );
HXDLIN( 975)		Float _hx_tmp1 = (_hx_tmp * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) ));
HXDLIN( 975)		Float _hx_tmp2 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) );
HXDLIN( 975)		Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) )));
HXDLIN( 975)		Float _hx_tmp4 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) );
HXDLIN( 975)		Float _hx_tmp5 = (_hx_tmp4 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) ));
HXDLIN( 975)		Float _hx_tmp6 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) );
HXDLIN( 975)		Float _hx_tmp7 = (_hx_tmp3 * (_hx_tmp5 - (_hx_tmp6 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) ))));
HXLINE( 976)		Float _hx_tmp8 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) );
HXDLIN( 976)		Float _hx_tmp9 = (_hx_tmp8 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) ));
HXDLIN( 976)		Float _hx_tmp10 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) );
HXDLIN( 976)		Float _hx_tmp11 = (_hx_tmp9 - (_hx_tmp10 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) )));
HXDLIN( 976)		Float _hx_tmp12 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) );
HXDLIN( 976)		Float _hx_tmp13 = (_hx_tmp12 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) ));
HXDLIN( 976)		Float _hx_tmp14 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) );
HXLINE( 975)		Float _hx_tmp15 = (_hx_tmp7 - (_hx_tmp11 * (_hx_tmp13 - (_hx_tmp14 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) )))));
HXLINE( 977)		Float _hx_tmp16 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)0)) );
HXDLIN( 977)		Float _hx_tmp17 = (_hx_tmp16 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) ));
HXDLIN( 977)		Float _hx_tmp18 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
HXDLIN( 977)		Float _hx_tmp19 = (_hx_tmp17 - (_hx_tmp18 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)1)) )));
HXDLIN( 977)		Float _hx_tmp20 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) );
HXDLIN( 977)		Float _hx_tmp21 = (_hx_tmp20 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) ));
HXDLIN( 977)		Float _hx_tmp22 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) );
HXLINE( 975)		Float _hx_tmp23 = (_hx_tmp15 + (_hx_tmp19 * (_hx_tmp21 - (_hx_tmp22 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) )))));
HXLINE( 978)		Float _hx_tmp24 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) );
HXDLIN( 978)		Float _hx_tmp25 = (_hx_tmp24 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) ));
HXDLIN( 978)		Float _hx_tmp26 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) );
HXDLIN( 978)		Float _hx_tmp27 = (_hx_tmp25 - (_hx_tmp26 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) )));
HXDLIN( 978)		Float _hx_tmp28 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) );
HXDLIN( 978)		Float _hx_tmp29 = (_hx_tmp28 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)15)) ));
HXDLIN( 978)		Float _hx_tmp30 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14)) );
HXLINE( 975)		Float _hx_tmp31 = (_hx_tmp23 + (_hx_tmp27 * (_hx_tmp29 - (_hx_tmp30 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) )))));
HXLINE( 979)		Float _hx_tmp32 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)4)) );
HXDLIN( 979)		Float _hx_tmp33 = (_hx_tmp32 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) ));
HXDLIN( 979)		Float _hx_tmp34 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
HXDLIN( 979)		Float _hx_tmp35 = (_hx_tmp33 - (_hx_tmp34 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)5)) )));
HXDLIN( 979)		Float _hx_tmp36 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) );
HXDLIN( 979)		Float _hx_tmp37 = (_hx_tmp36 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)11)) ));
HXDLIN( 979)		Float _hx_tmp38 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)10)) );
HXLINE( 975)		Float _hx_tmp39 = (_hx_tmp31 - (_hx_tmp35 * (_hx_tmp37 - (_hx_tmp38 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) )))));
HXLINE( 980)		Float _hx_tmp40 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)8)) );
HXDLIN( 980)		Float _hx_tmp41 = (_hx_tmp40 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) ));
HXDLIN( 980)		Float _hx_tmp42 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
HXDLIN( 980)		Float _hx_tmp43 = (_hx_tmp41 - (_hx_tmp42 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)9)) )));
HXDLIN( 980)		Float _hx_tmp44 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)2)) );
HXDLIN( 980)		Float _hx_tmp45 = (_hx_tmp44 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)7)) ));
HXDLIN( 980)		Float _hx_tmp46 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)6)) );
HXLINE( 975)		return (_hx_tmp39 + (_hx_tmp43 * (_hx_tmp45 - (_hx_tmp46 * ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)3)) )))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_determinant,return )

 ::openfl::geom::Vector3D Matrix3D_obj::get_position(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_987_get_position)
HXDLIN( 987)		Float _hx_tmp = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)12)) );
HXDLIN( 987)		Float _hx_tmp1 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)13)) );
HXDLIN( 987)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::openfl::_Vector::IVector_obj::get(this->rawData->data,(int)14),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_position,return )

 ::openfl::geom::Vector3D Matrix3D_obj::set_position( ::openfl::geom::Vector3D val){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_992_set_position)
HXLINE( 994)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)12,val->x);
HXLINE( 995)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)13,val->y);
HXLINE( 996)		::openfl::_Vector::IVector_obj::set(this->rawData->data,(int)14,val->z);
HXLINE( 997)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,set_position,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::create2D(Float x,Float y,hx::Null< Float >  __o_scale,hx::Null< Float >  __o_rotation){
Float scale = __o_scale.Default(1);
Float rotation = __o_rotation.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_374_create2D)
HXLINE( 376)		Float theta = ((Float)(rotation * ::Math_obj::PI) / (Float)((Float)180.0));
HXLINE( 377)		Float c = ::Math_obj::cos(theta);
HXLINE( 378)		Float s = ::Math_obj::sin(theta);
HXLINE( 380)		::Array< Float > a = ::Array_obj< Float >::__new(16)->init(0,(c * scale))->init(1,(-(s) * scale))->init(2,(int)0)->init(3,(int)0)->init(4,(s * scale))->init(5,(c * scale))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,x)->init(13,y)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 380)		int length = null();
HXDLIN( 380)		bool fixed = null();
HXDLIN( 380)		 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN( 380)		{
HXLINE( 380)			int _g1 = (int)0;
HXDLIN( 380)			int _g = a->length;
HXDLIN( 380)			while((_g1 < _g)){
HXLINE( 380)				_g1 = (_g1 + (int)1);
HXDLIN( 380)				int i = (_g1 - (int)1);
HXDLIN( 380)				::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            			}
            		}
HXDLIN( 380)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,create2D,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createABCD(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_387_createABCD)
HXDLIN( 387)		::Array< Float > a1 = ::Array_obj< Float >::__new(16)->init(0,a)->init(1,b)->init(2,(int)0)->init(3,(int)0)->init(4,c)->init(5,d)->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,tx)->init(13,ty)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 387)		int length = null();
HXDLIN( 387)		bool fixed = null();
HXDLIN( 387)		 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN( 387)		{
HXDLIN( 387)			int _g1 = (int)0;
HXDLIN( 387)			int _g = a1->length;
HXDLIN( 387)			while((_g1 < _g)){
HXDLIN( 387)				_g1 = (_g1 + (int)1);
HXDLIN( 387)				int i = (_g1 - (int)1);
HXDLIN( 387)				::openfl::_Vector::IVector_obj::set(vector->data,i,a1->__get(i));
            			}
            		}
HXDLIN( 387)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createABCD,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createOrtho(Float x0,Float x1,Float y0,Float y1,Float zNear,Float zFar){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_392_createOrtho)
HXLINE( 394)		Float sx = ((Float)((Float)1.0) / (Float)(x1 - x0));
HXLINE( 395)		Float sy = ((Float)((Float)1.0) / (Float)(y1 - y0));
HXLINE( 396)		Float sz = ((Float)((Float)1.0) / (Float)(zFar - zNear));
HXLINE( 398)		::Array< Float > a = ::Array_obj< Float >::__new(16)->init(0,(((Float)2.0) * sx))->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(((Float)2.0) * sy))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(((Float)-2.0) * sz))->init(11,(int)0)->init(12,(-((x0 + x1)) * sx))->init(13,(-((y0 + y1)) * sy))->init(14,(-((zNear + zFar)) * sz))->init(15,(int)1);
HXDLIN( 398)		int length = null();
HXDLIN( 398)		bool fixed = null();
HXDLIN( 398)		 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN( 398)		{
HXLINE( 398)			int _g1 = (int)0;
HXDLIN( 398)			int _g = a->length;
HXDLIN( 398)			while((_g1 < _g)){
HXLINE( 398)				_g1 = (_g1 + (int)1);
HXDLIN( 398)				int i = (_g1 - (int)1);
HXDLIN( 398)				::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            			}
            		}
HXDLIN( 398)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createOrtho,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::interpolate( ::openfl::geom::Matrix3D thisMat, ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_545_interpolate)
HXLINE( 547)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 549)		{
HXLINE( 549)			int _g = (int)0;
HXDLIN( 549)			while((_g < (int)16)){
HXLINE( 549)				_g = (_g + (int)1);
HXDLIN( 549)				int i = (_g - (int)1);
HXLINE( 551)				{
HXLINE( 551)					 ::openfl::_Vector::AbstractVector this1 = m->rawData;
HXDLIN( 551)					Float value = ( (Float)(::openfl::_Vector::IVector_obj::get(thisMat->rawData->data,i)) );
HXDLIN( 551)					Float value1 = ( (Float)(::openfl::_Vector::IVector_obj::get(toMat->rawData->data,i)) );
HXDLIN( 551)					Float value2 = (value + ((value1 - ( (Float)(::openfl::_Vector::IVector_obj::get(thisMat->rawData->data,i)) )) * percent));
HXDLIN( 551)					::openfl::_Vector::IVector_obj::set(this1->data,i,value2);
            				}
            			}
            		}
HXLINE( 555)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,interpolate,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::_hx___getAxisRotation(Float x,Float y,Float z,Float degrees){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_934___getAxisRotation)
HXLINE( 936)		 ::openfl::geom::Matrix3D m =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 938)		 ::openfl::geom::Vector3D a1 =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,x,y,z,null());
HXLINE( 939)		Float rad = (-(degrees) * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 940)		Float c = ::Math_obj::cos(rad);
HXLINE( 941)		Float s = ::Math_obj::sin(rad);
HXLINE( 942)		Float t = (((Float)1.0) - c);
HXLINE( 944)		::openfl::_Vector::IVector_obj::set(m->rawData->data,(int)0,(c + ((a1->x * a1->x) * t)));
HXLINE( 945)		::openfl::_Vector::IVector_obj::set(m->rawData->data,(int)5,(c + ((a1->y * a1->y) * t)));
HXLINE( 946)		::openfl::_Vector::IVector_obj::set(m->rawData->data,(int)10,(c + ((a1->z * a1->z) * t)));
HXLINE( 948)		Float tmp1 = ((a1->x * a1->y) * t);
HXLINE( 949)		Float tmp2 = (a1->z * s);
HXLINE( 950)		{
HXLINE( 950)			::Dynamic this1 = m->rawData->data;
HXDLIN( 950)			::openfl::_Vector::IVector_obj::set(this1,(int)4,(tmp1 + tmp2));
            		}
HXLINE( 951)		{
HXLINE( 951)			::Dynamic this2 = m->rawData->data;
HXDLIN( 951)			::openfl::_Vector::IVector_obj::set(this2,(int)1,(tmp1 - tmp2));
            		}
HXLINE( 952)		tmp1 = ((a1->x * a1->z) * t);
HXLINE( 953)		tmp2 = (a1->y * s);
HXLINE( 954)		{
HXLINE( 954)			::Dynamic this3 = m->rawData->data;
HXDLIN( 954)			::openfl::_Vector::IVector_obj::set(this3,(int)8,(tmp1 - tmp2));
            		}
HXLINE( 955)		{
HXLINE( 955)			::Dynamic this4 = m->rawData->data;
HXDLIN( 955)			::openfl::_Vector::IVector_obj::set(this4,(int)2,(tmp1 + tmp2));
            		}
HXLINE( 956)		tmp1 = ((a1->y * a1->z) * t);
HXLINE( 957)		tmp2 = (a1->x * s);
HXLINE( 958)		{
HXLINE( 958)			::Dynamic this5 = m->rawData->data;
HXDLIN( 958)			::openfl::_Vector::IVector_obj::set(this5,(int)9,(tmp1 + tmp2));
            		}
HXLINE( 959)		{
HXLINE( 959)			::Dynamic this6 = m->rawData->data;
HXDLIN( 959)			::openfl::_Vector::IVector_obj::set(this6,(int)6,(tmp1 - tmp2));
            		}
HXLINE( 961)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,_hx___getAxisRotation,return )


hx::ObjectPtr< Matrix3D_obj > Matrix3D_obj::__new( ::openfl::_Vector::AbstractVector v) {
	hx::ObjectPtr< Matrix3D_obj > __this = new Matrix3D_obj();
	__this->__construct(v);
	return __this;
}

hx::ObjectPtr< Matrix3D_obj > Matrix3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::_Vector::AbstractVector v) {
	Matrix3D_obj *__this = (Matrix3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Matrix3D_obj), true, "openfl.geom.Matrix3D"));
	*(void **)__this = Matrix3D_obj::_hx_vtable;
	__this->__construct(v);
	return __this;
}

Matrix3D_obj::Matrix3D_obj()
{
}

void Matrix3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Matrix3D);
	HX_MARK_MEMBER_NAME(rawData,"rawData");
	HX_MARK_END_CLASS();
}

void Matrix3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rawData,"rawData");
}

hx::Val Matrix3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn() ); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { return hx::Val( rawData ); }
		if (HX_FIELD_EQ(inName,"pointAt") ) { return hx::Val( pointAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"prepend") ) { return hx::Val( prepend_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"recompose") ) { return hx::Val( recompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"determinant") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_determinant() ); }
		if (HX_FIELD_EQ(inName,"appendScale") ) { return hx::Val( appendScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"prependScale") ) { return hx::Val( prependScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyRawDataTo") ) { return hx::Val( copyRawDataTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { return hx::Val( interpolateTo_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { return hx::Val( appendRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyToMatrix3D") ) { return hx::Val( copyToMatrix3D_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"copyRawDataFrom") ) { return hx::Val( copyRawDataFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"prependRotation") ) { return hx::Val( prependRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return hx::Val( transformVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { return hx::Val( get_determinant_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { return hx::Val( transformVectors_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { return hx::Val( appendTranslation_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { return hx::Val( prependTranslation_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { return hx::Val( deltaTransformVector_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createABCD") ) { outValue = createABCD_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__getAxisRotation") ) { outValue = _hx___getAxisRotation_dyn(); return true; }
	}
	return false;
}

hx::Val Matrix3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { rawData=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue.Cast<  ::openfl::geom::Vector3D >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("determinant","\x95","\x5d","\x15","\x32"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Matrix3D_obj,rawData),HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Matrix3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Matrix3D_obj_sMemberFields[] = {
	HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("appendRotation","\x38","\x45","\xe8","\xcb"),
	HX_HCSTRING("appendScale","\x50","\x66","\x45","\xb5"),
	HX_HCSTRING("appendTranslation","\x37","\xe1","\x3d","\xd6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRawDataFrom","\x07","\x7d","\xbd","\x2c"),
	HX_HCSTRING("copyRawDataTo","\xd8","\x2b","\xf7","\xa8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("copyToMatrix3D","\xe2","\x1d","\x1f","\x04"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("interpolateTo","\x9c","\x90","\x22","\x71"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("pointAt","\x63","\xa1","\x21","\x51"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("recompose","\xbf","\x81","\xdb","\x03"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformVectors","\x44","\xba","\x12","\x8a"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	::String(null()) };

static void Matrix3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix3D_obj::__mClass,"__mClass");
};

#endif

hx::Class Matrix3D_obj::__mClass;

static ::String Matrix3D_obj_sStaticFields[] = {
	HX_HCSTRING("create2D","\xce","\x49","\xf4","\x2b"),
	HX_HCSTRING("createABCD","\xbe","\xc2","\xdd","\x52"),
	HX_HCSTRING("createOrtho","\x9c","\x4e","\xa8","\x5e"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("__getAxisRotation","\x95","\xa5","\x44","\x7b"),
	::String(null())
};

void Matrix3D_obj::__register()
{
	hx::Object *dummy = new Matrix3D_obj;
	Matrix3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Matrix3D","\xe6","\x93","\x2e","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace geom
