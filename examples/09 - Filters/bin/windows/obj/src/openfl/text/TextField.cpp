// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeWindow
#include <lime/_backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphPosition
#include <lime/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMTextField
#include <openfl/_internal/renderer/dom/DOMTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_DynamicTextSymbol
#include <openfl/_internal/symbols/DynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_FontSymbol
#include <openfl/_internal/symbols/FontSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_text_HTMLParser
#include <openfl/_internal/text/HTMLParser.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_167_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",167,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_202_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",202,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_218_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",218,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_254_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",254,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_301_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",301,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_329_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",329,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_356_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",356,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_377_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",377,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_407_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",407,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_432_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",432,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_453_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",453,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_484_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",484,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_497_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",497,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_541_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",541,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_571_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",571,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_630_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",630,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_640_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",640,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_780_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",780,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_807___allowMouseFocus,"openfl.text.TextField","__allowMouseFocus",0x70182198,"openfl.text.TextField.__allowMouseFocus","openfl/text/TextField.hx",807,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_814___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",814,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_827___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",827,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_856___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",856,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_865___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",865,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_894___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",894,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_903___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",903,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_932___disableInput,"openfl.text.TextField","__disableInput",0xd160e346,"openfl.text.TextField.__disableInput","openfl/text/TextField.hx",932,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_946___dispatch,"openfl.text.TextField","__dispatch",0x10db5efe,"openfl.text.TextField.__dispatch","openfl/text/TextField.hx",946,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_982___enableInput,"openfl.text.TextField","__enableInput",0x9681fcc3,"openfl.text.TextField.__enableInput","openfl/text/TextField.hx",982,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1007___fromSymbol,"openfl.text.TextField","__fromSymbol",0x5dd0dda6,"openfl.text.TextField.__fromSymbol","openfl/text/TextField.hx",1007,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1150___getAdvance,"openfl.text.TextField","__getAdvance",0x6a1cb7d0,"openfl.text.TextField.__getAdvance","openfl/text/TextField.hx",1150,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1156___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",1156,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1173___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",1173,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1211___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1211,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1230___getGroup,"openfl.text.TextField","__getGroup",0xec43530d,"openfl.text.TextField.__getGroup","openfl/text/TextField.hx",1230,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1286___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1286,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1322___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",1322,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1350___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",1350,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1369___renderCairo,"openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",1369,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1379___renderCanvas,"openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",1379,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1444___renderDOM,"openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",1444,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1485___renderDOMClear,"openfl.text.TextField","__renderDOMClear",0x09e66c65,"openfl.text.TextField.__renderDOMClear","openfl/text/TextField.hx",1485,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1490___renderGL,"openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",1490,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1503___renderGLMask,"openfl.text.TextField","__renderGLMask",0x687ab3cb,"openfl.text.TextField.__renderGLMask","openfl/text/TextField.hx",1503,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1516___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",1516,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1526___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",1526,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1546___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",1546,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1566___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",1566,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1581___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",1581,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1623___updateScrollH,"openfl.text.TextField","__updateScrollH",0x4ea991ce,"openfl.text.TextField.__updateScrollH","openfl/text/TextField.hx",1623,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1645___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",1645,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1688___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",1688,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1705_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",1705,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1710_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",1710,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1725_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",1725,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1730_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",1730,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1747_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",1747,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1752_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",1752,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1768_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",1768,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1773_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",1773,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1789_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",1789,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1794_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",1794,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1810_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",1810,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1815_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",1815,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1829_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",1829,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1838_get_cacheAsBitmap,"openfl.text.TextField","get_cacheAsBitmap",0xd9261d96,"openfl.text.TextField.get_cacheAsBitmap","openfl/text/TextField.hx",1838,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1849_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",1849,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1856_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",1856,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1861_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",1861,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1876_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",1876,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1881_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",1881,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1901_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",1901,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1915_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",1915,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1922_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",1922,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1936_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",1936,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1941_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",1941,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1949_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",1949,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1969_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",1969,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_1974_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",1974,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2036_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",2036,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2051_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",2051,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2056_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",2056,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2073_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",2073,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2082_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",2082,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2093_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",2093,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2100_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",2100,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2107_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",2107,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2112_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",2112,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2129_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",2129,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2140_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2140,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2145_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2145,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2161_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2161,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2166_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2166,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2188_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2188,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2193_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2193,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2215_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2215,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2220_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2220,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2243_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",2243,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2250_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",2250,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2257_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",2257,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2262_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",2262,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2278_get_tabEnabled,"openfl.text.TextField","get_tabEnabled",0x69fcfe19,"openfl.text.TextField.get_tabEnabled","openfl/text/TextField.hx",2278,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2285_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2285,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2290_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2290,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2327_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",2327,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2332_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",2332,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2351_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",2351,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2359_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",2359,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2369_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",2369,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2374_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",2374,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2404_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",2404,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2412_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",2412,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2432_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",2432,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2437_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",2437,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2459_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",2459,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2493_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",2493,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2540_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",2540,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2547_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",2547,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2556_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",2556,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2587_this_onKeyDown,"openfl.text.TextField","this_onKeyDown",0xebbe0505,"openfl.text.TextField.this_onKeyDown","openfl/text/TextField.hx",2587,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2600_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",2600,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2624_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",2624,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_2872_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",2872,0xccf02094)
HX_LOCAL_STACK_FRAME(_hx_pos_d001dbc361c2c159_61_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",61,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_167_new)
HXLINE( 169)		super::__construct();
HXLINE( 171)		this->_hx___caretIndex = (int)-1;
HXLINE( 172)		this->_hx___displayAsPassword = false;
HXLINE( 173)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 174)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 175)		this->_hx___layoutDirty = true;
HXLINE( 176)		this->_hx___offsetX = (int)0;
HXLINE( 177)		this->_hx___offsetY = (int)0;
HXLINE( 178)		this->_hx___mouseWheelEnabled = true;
HXLINE( 179)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 181)		if (hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 183)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),(int)12,(int)0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),(int)3,(int)0,(int)0,(int)0,(int)0);
HXLINE( 184)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = (int)0;
HXLINE( 185)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 186)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = (int)0;
HXLINE( 187)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 191)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 192)		{
HXLINE( 192)			 ::openfl::_Vector::AbstractVector this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 192)			 ::openfl::_internal::text::TextFormatRange x =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,(int)0,(int)0);
HXDLIN( 192)			::openfl::_Vector::IVector_obj::push(this1->data,x);
            		}
HXLINE( 194)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
HXLINE( 195)		this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE( 196)		this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE( 197)		this->addEventListener(HX_("keyDown",a1,69,47,9c),this->this_onKeyDown_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d9fc210;
	}
}

static ::openfl::display::IShaderDrawable_obj _hx_openfl_text_TextField__hx_openfl_display_IShaderDrawable= {
};

void *TextField_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xa78ed11a: return &_hx_openfl_text_TextField__hx_openfl_display_IShaderDrawable;
	}
	return super::_hx_getInterface(inHash);
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_202_appendText)
HXLINE( 204)		bool _hx_tmp;
HXDLIN( 204)		if (hx::IsNotNull( text )) {
HXLINE( 204)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 204)			_hx_tmp = true;
            		}
HXDLIN( 204)		if (_hx_tmp) {
HXLINE( 204)			return;
            		}
HXLINE( 206)		this->_hx___dirty = true;
HXLINE( 207)		this->_hx___layoutDirty = true;
HXLINE( 208)		if (!(this->_hx___renderDirty)) {
HXLINE( 208)			this->_hx___renderDirty = true;
HXDLIN( 208)			this->_hx___setParentRenderDirty();
            		}
HXLINE( 210)		this->_hx___updateText(::lime::text::_UTF8String::UTF8String_Impl__obj::plus(this->_hx___text,text));
HXLINE( 212)		 ::openfl::_Vector::AbstractVector this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 212)		int index = (::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data) - (int)1);
HXDLIN( 212)		( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this1->data,index)) )->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE( 213)		this->_hx___updateScrollH();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_218_getCharBoundaries)
HXLINE( 220)		bool _hx_tmp;
HXDLIN( 220)		if ((charIndex >= (int)0)) {
HXLINE( 220)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 220)			_hx_tmp = true;
            		}
HXDLIN( 220)		if (_hx_tmp) {
HXLINE( 220)			return null();
            		}
HXLINE( 222)		this->_hx___updateLayout();
HXLINE( 224)		{
HXLINE( 224)			int _g = (int)0;
HXDLIN( 224)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 224)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 224)				 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 224)				_g = (_g + (int)1);
HXLINE( 226)				bool _hx_tmp1;
HXDLIN( 226)				if ((charIndex >= group->startIndex)) {
HXLINE( 226)					_hx_tmp1 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE( 226)					_hx_tmp1 = false;
            				}
HXDLIN( 226)				if (_hx_tmp1) {
HXLINE( 228)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 230)						Float x = group->offsetX;
HXLINE( 232)						{
HXLINE( 232)							int _g3 = (int)0;
HXDLIN( 232)							int _g2 = (charIndex - group->startIndex);
HXDLIN( 232)							while((_g3 < _g2)){
HXLINE( 232)								_g3 = (_g3 + (int)1);
HXDLIN( 232)								int i = (_g3 - (int)1);
HXLINE( 234)								Float x1;
HXDLIN( 234)								bool x2;
HXDLIN( 234)								if ((i >= (int)0)) {
HXLINE( 234)									x2 = (i < group->positions->length);
            								}
            								else {
HXLINE( 234)									x2 = false;
            								}
HXDLIN( 234)								if (x2) {
HXLINE( 234)									x1 = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE( 234)									x1 = (int)0;
            								}
HXDLIN( 234)								x = (x + x1);
            							}
            						}
HXLINE( 239)						int index = (charIndex - group->startIndex);
HXDLIN( 239)						Float lastPosition;
HXDLIN( 239)						bool lastPosition1;
HXDLIN( 239)						if ((index >= (int)0)) {
HXLINE( 239)							lastPosition1 = (index < group->positions->length);
            						}
            						else {
HXLINE( 239)							lastPosition1 = false;
            						}
HXDLIN( 239)						if (lastPosition1) {
HXLINE( 239)							lastPosition = group->positions->__get(index).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            						}
            						else {
HXLINE( 239)							lastPosition = (int)0;
            						}
HXLINE( 241)						Float group1 = group->offsetY;
HXDLIN( 241)						return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x,group1,lastPosition,(group->ascent + group->descent));
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE( 249)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_254_getCharIndexAtPoint)
HXLINE( 256)		bool _hx_tmp;
HXDLIN( 256)		bool _hx_tmp1;
HXDLIN( 256)		bool _hx_tmp2;
HXDLIN( 256)		if (!((x <= (int)2))) {
HXLINE( 256)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 256)			_hx_tmp2 = true;
            		}
HXDLIN( 256)		if (!(_hx_tmp2)) {
HXLINE( 256)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 256)			_hx_tmp1 = true;
            		}
HXDLIN( 256)		if (!(_hx_tmp1)) {
HXLINE( 256)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 256)			_hx_tmp = true;
            		}
HXDLIN( 256)		if (_hx_tmp) {
HXLINE( 256)			return (int)-1;
            		}
HXLINE( 258)		this->_hx___updateLayout();
HXLINE( 260)		x = (x + this->get_scrollH());
HXLINE( 262)		{
HXLINE( 262)			int _g1 = (int)0;
HXDLIN( 262)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 262)			while((_g1 < _g)){
HXLINE( 262)				_g1 = (_g1 + (int)1);
HXDLIN( 262)				int i = (_g1 - (int)1);
HXLINE( 264)				y = (y + ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->lineHeights->data,i)) ));
            			}
            		}
HXLINE( 268)		{
HXLINE( 268)			int _g2 = (int)0;
HXDLIN( 268)			 ::openfl::_Vector::AbstractVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 268)			while((_g2 < ::openfl::_Vector::IVector_obj::get_length(_g11->data))){
HXLINE( 268)				 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_g11->data,_g2)) );
HXDLIN( 268)				_g2 = (_g2 + (int)1);
HXLINE( 270)				bool _hx_tmp3;
HXDLIN( 270)				if ((y >= group->offsetY)) {
HXLINE( 270)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 270)					_hx_tmp3 = false;
            				}
HXDLIN( 270)				if (_hx_tmp3) {
HXLINE( 272)					bool _hx_tmp4;
HXDLIN( 272)					if ((x >= group->offsetX)) {
HXLINE( 272)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 272)						_hx_tmp4 = false;
            					}
HXDLIN( 272)					if (_hx_tmp4) {
HXLINE( 274)						Float advance = ((Float)0.0);
HXLINE( 276)						{
HXLINE( 276)							int _g3 = (int)0;
HXDLIN( 276)							int _g21 = group->positions->length;
HXDLIN( 276)							while((_g3 < _g21)){
HXLINE( 276)								_g3 = (_g3 + (int)1);
HXDLIN( 276)								int i1 = (_g3 - (int)1);
HXLINE( 278)								Float advance1;
HXDLIN( 278)								bool advance2;
HXDLIN( 278)								if ((i1 >= (int)0)) {
HXLINE( 278)									advance2 = (i1 < group->positions->length);
            								}
            								else {
HXLINE( 278)									advance2 = false;
            								}
HXDLIN( 278)								if (advance2) {
HXLINE( 278)									advance1 = group->positions->__get(i1).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE( 278)									advance1 = (int)0;
            								}
HXDLIN( 278)								advance = (advance + advance1);
HXLINE( 280)								if ((x <= (group->offsetX + advance))) {
HXLINE( 282)									return (group->startIndex + i1);
            								}
            							}
            						}
HXLINE( 288)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 296)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_301_getFirstCharInParagraph)
HXLINE( 303)		bool _hx_tmp;
HXDLIN( 303)		if ((charIndex >= (int)0)) {
HXLINE( 303)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 303)			_hx_tmp = true;
            		}
HXDLIN( 303)		if (_hx_tmp) {
HXLINE( 303)			return (int)0;
            		}
HXLINE( 305)		int index = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 306)		int startIndex = (int)0;
HXLINE( 308)		while((index > (int)-1)){
HXLINE( 310)			if ((index <= charIndex)) {
HXLINE( 312)				startIndex = (index + (int)1);
            			}
            			else {
HXLINE( 314)				if ((index > charIndex)) {
HXLINE( 316)					goto _hx_goto_9;
            				}
            			}
HXLINE( 320)			 ::openfl::_internal::text::TextEngine index1 = this->_hx___textEngine;
HXDLIN( 320)			index = index1->getLineBreakIndex((index + (int)1));
            		}
            		_hx_goto_9:;
HXLINE( 324)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_329_getLineIndexAtPoint)
HXLINE( 331)		this->_hx___updateLayout();
HXLINE( 333)		bool _hx_tmp;
HXDLIN( 333)		bool _hx_tmp1;
HXDLIN( 333)		bool _hx_tmp2;
HXDLIN( 333)		if (!((x <= (int)2))) {
HXLINE( 333)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 333)			_hx_tmp2 = true;
            		}
HXDLIN( 333)		if (!(_hx_tmp2)) {
HXLINE( 333)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 333)			_hx_tmp1 = true;
            		}
HXDLIN( 333)		if (!(_hx_tmp1)) {
HXLINE( 333)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 333)			_hx_tmp = true;
            		}
HXDLIN( 333)		if (_hx_tmp) {
HXLINE( 333)			return (int)-1;
            		}
HXLINE( 335)		{
HXLINE( 335)			int _g1 = (int)0;
HXDLIN( 335)			int _g = (this->get_scrollV() - (int)1);
HXDLIN( 335)			while((_g1 < _g)){
HXLINE( 335)				_g1 = (_g1 + (int)1);
HXDLIN( 335)				int i = (_g1 - (int)1);
HXLINE( 337)				y = (y + ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->lineHeights->data,i)) ));
            			}
            		}
HXLINE( 341)		{
HXLINE( 341)			int _g2 = (int)0;
HXDLIN( 341)			 ::openfl::_Vector::AbstractVector _g11 = this->_hx___textEngine->layoutGroups;
HXDLIN( 341)			while((_g2 < ::openfl::_Vector::IVector_obj::get_length(_g11->data))){
HXLINE( 341)				 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_g11->data,_g2)) );
HXDLIN( 341)				_g2 = (_g2 + (int)1);
HXLINE( 343)				bool _hx_tmp3;
HXDLIN( 343)				if ((y >= group->offsetY)) {
HXLINE( 343)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 343)					_hx_tmp3 = false;
            				}
HXDLIN( 343)				if (_hx_tmp3) {
HXLINE( 345)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 351)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_356_getLineIndexOfChar)
HXLINE( 358)		bool _hx_tmp;
HXDLIN( 358)		if ((charIndex >= (int)0)) {
HXLINE( 358)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE( 358)			_hx_tmp = true;
            		}
HXDLIN( 358)		if (_hx_tmp) {
HXLINE( 358)			return (int)-1;
            		}
HXLINE( 360)		this->_hx___updateLayout();
HXLINE( 362)		{
HXLINE( 362)			int _g = (int)0;
HXDLIN( 362)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 362)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 362)				 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 362)				_g = (_g + (int)1);
HXLINE( 364)				bool _hx_tmp1;
HXDLIN( 364)				if ((group->startIndex <= charIndex)) {
HXLINE( 364)					_hx_tmp1 = (group->endIndex >= charIndex);
            				}
            				else {
HXLINE( 364)					_hx_tmp1 = false;
            				}
HXDLIN( 364)				if (_hx_tmp1) {
HXLINE( 366)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 372)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_377_getLineLength)
HXLINE( 379)		this->_hx___updateLayout();
HXLINE( 381)		bool _hx_tmp;
HXDLIN( 381)		if ((lineIndex >= (int)0)) {
HXLINE( 381)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 381)			_hx_tmp = true;
            		}
HXDLIN( 381)		if (_hx_tmp) {
HXLINE( 381)			return (int)0;
            		}
HXLINE( 383)		int startIndex = (int)-1;
HXLINE( 384)		int endIndex = (int)-1;
HXLINE( 386)		{
HXLINE( 386)			int _g = (int)0;
HXDLIN( 386)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 386)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 386)				 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 386)				_g = (_g + (int)1);
HXLINE( 388)				if ((group->lineIndex == lineIndex)) {
HXLINE( 390)					if ((startIndex == (int)-1)) {
HXLINE( 390)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 392)					int group1 = group->lineIndex;
HXDLIN( 392)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 394)						endIndex = group->startIndex;
HXLINE( 395)						goto _hx_goto_16;
            					}
            				}
            			}
            			_hx_goto_16:;
            		}
HXLINE( 401)		if ((endIndex == (int)-1)) {
HXLINE( 401)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 402)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_407_getLineMetrics)
HXLINE( 409)		this->_hx___updateLayout();
HXLINE( 411)		Float ascender = ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->lineAscents->data,lineIndex)) );
HXLINE( 412)		Float descender = ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->lineDescents->data,lineIndex)) );
HXLINE( 413)		Float leading = ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->lineLeadings->data,lineIndex)) );
HXLINE( 414)		Float lineHeight = ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->lineHeights->data,lineIndex)) );
HXLINE( 415)		Float lineWidth = ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->lineWidths->data,lineIndex)) );
HXLINE( 419)		Float margin;
HXDLIN( 419)		 ::Dynamic _g = this->_hx___textFormat->align;
HXDLIN( 419)		 ::Dynamic _hx_switch_0 = _g;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 419)			margin = ((Float)(this->_hx___textEngine->width - lineWidth) / (Float)(int)2);
HXDLIN( 419)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)4) ){
HXLINE( 419)			margin = ((this->_hx___textEngine->width - lineWidth) - (int)2);
HXDLIN( 419)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ){
HXLINE( 419)			margin = (int)2;
HXDLIN( 419)			goto _hx_goto_18;
            		}
            		_hx_goto_18:;
HXLINE( 427)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_432_getLineOffset)
HXLINE( 434)		this->_hx___updateLayout();
HXLINE( 436)		bool _hx_tmp;
HXDLIN( 436)		if ((lineIndex >= (int)0)) {
HXLINE( 436)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 436)			_hx_tmp = true;
            		}
HXDLIN( 436)		if (_hx_tmp) {
HXLINE( 436)			return (int)-1;
            		}
HXLINE( 438)		{
HXLINE( 438)			int _g = (int)0;
HXDLIN( 438)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 438)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 438)				 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 438)				_g = (_g + (int)1);
HXLINE( 440)				if ((group->lineIndex == lineIndex)) {
HXLINE( 442)					return group->startIndex;
            				}
            			}
            		}
HXLINE( 448)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_453_getLineText)
HXLINE( 455)		this->_hx___updateLayout();
HXLINE( 457)		bool _hx_tmp;
HXDLIN( 457)		if ((lineIndex >= (int)0)) {
HXLINE( 457)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 457)			_hx_tmp = true;
            		}
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 457)			return null();
            		}
HXLINE( 459)		int startIndex = (int)-1;
HXLINE( 460)		int endIndex = (int)-1;
HXLINE( 462)		{
HXLINE( 462)			int _g = (int)0;
HXDLIN( 462)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN( 462)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 462)				 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 462)				_g = (_g + (int)1);
HXLINE( 464)				if ((group->lineIndex == lineIndex)) {
HXLINE( 466)					if ((startIndex == (int)-1)) {
HXLINE( 466)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 468)					int group1 = group->lineIndex;
HXDLIN( 468)					if ((group1 == (lineIndex + (int)1))) {
HXLINE( 470)						endIndex = group->startIndex;
HXLINE( 471)						goto _hx_goto_22;
            					}
            				}
            			}
            			_hx_goto_22:;
            		}
HXLINE( 477)		if ((endIndex == (int)-1)) {
HXLINE( 477)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 479)		return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___textEngine->text,startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_484_getParagraphLength)
HXLINE( 486)		bool _hx_tmp;
HXDLIN( 486)		if ((charIndex >= (int)0)) {
HXLINE( 486)			_hx_tmp = (charIndex > (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text) - (int)1));
            		}
            		else {
HXLINE( 486)			_hx_tmp = true;
            		}
HXDLIN( 486)		if (_hx_tmp) {
HXLINE( 486)			return (int)0;
            		}
HXLINE( 488)		int startIndex = this->getFirstCharInParagraph(charIndex);
HXLINE( 489)		int endIndex = (this->_hx___textEngine->getLineBreakIndex(charIndex) + (int)1);
HXLINE( 491)		if ((endIndex == (int)0)) {
HXLINE( 491)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 492)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_497_getTextFormat)
HXLINE( 499)		 ::openfl::text::TextFormat format = null();
HXLINE( 501)		{
HXLINE( 501)			int _g = (int)0;
HXDLIN( 501)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 501)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 501)				 ::openfl::_internal::text::TextFormatRange group = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 501)				_g = (_g + (int)1);
HXLINE( 503)				bool _hx_tmp;
HXDLIN( 503)				bool _hx_tmp1;
HXDLIN( 503)				if ((group->start <= beginIndex)) {
HXLINE( 503)					_hx_tmp1 = (group->end >= beginIndex);
            				}
            				else {
HXLINE( 503)					_hx_tmp1 = false;
            				}
HXDLIN( 503)				if (!(_hx_tmp1)) {
HXLINE( 503)					if ((group->start <= endIndex)) {
HXLINE( 503)						_hx_tmp = (group->end >= endIndex);
            					}
            					else {
HXLINE( 503)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 503)					_hx_tmp = true;
            				}
HXDLIN( 503)				if (_hx_tmp) {
HXLINE( 505)					if (hx::IsNull( format )) {
HXLINE( 507)						format = group->format->clone();
            					}
            					else {
HXLINE( 511)						if ((group->format->font != format->font)) {
HXLINE( 511)							format->font = null();
            						}
HXLINE( 512)						if (hx::IsNotEq( group->format->size,format->size )) {
HXLINE( 512)							format->size = null();
            						}
HXLINE( 513)						if (hx::IsNotEq( group->format->color,format->color )) {
HXLINE( 513)							format->color = null();
            						}
HXLINE( 514)						if (hx::IsNotEq( group->format->bold,format->bold )) {
HXLINE( 514)							format->bold = null();
            						}
HXLINE( 515)						if (hx::IsNotEq( group->format->italic,format->italic )) {
HXLINE( 515)							format->italic = null();
            						}
HXLINE( 516)						if (hx::IsNotEq( group->format->underline,format->underline )) {
HXLINE( 516)							format->underline = null();
            						}
HXLINE( 517)						if ((group->format->url != format->url)) {
HXLINE( 517)							format->url = null();
            						}
HXLINE( 518)						if ((group->format->target != format->target)) {
HXLINE( 518)							format->target = null();
            						}
HXLINE( 519)						if (hx::IsNotEq( group->format->align,format->align )) {
HXLINE( 519)							format->align = null();
            						}
HXLINE( 520)						if (hx::IsNotEq( group->format->leftMargin,format->leftMargin )) {
HXLINE( 520)							format->leftMargin = null();
            						}
HXLINE( 521)						if (hx::IsNotEq( group->format->rightMargin,format->rightMargin )) {
HXLINE( 521)							format->rightMargin = null();
            						}
HXLINE( 522)						if (hx::IsNotEq( group->format->indent,format->indent )) {
HXLINE( 522)							format->indent = null();
            						}
HXLINE( 523)						if (hx::IsNotEq( group->format->leading,format->leading )) {
HXLINE( 523)							format->leading = null();
            						}
HXLINE( 524)						if (hx::IsNotEq( group->format->blockIndent,format->blockIndent )) {
HXLINE( 524)							format->blockIndent = null();
            						}
HXLINE( 525)						if (hx::IsNotEq( group->format->bullet,format->bullet )) {
HXLINE( 525)							format->bullet = null();
            						}
HXLINE( 526)						if (hx::IsNotEq( group->format->kerning,format->kerning )) {
HXLINE( 526)							format->kerning = null();
            						}
HXLINE( 527)						if (hx::IsNotEq( group->format->letterSpacing,format->letterSpacing )) {
HXLINE( 527)							format->letterSpacing = null();
            						}
HXLINE( 528)						if (hx::IsNotEq( group->format->tabStops,format->tabStops )) {
HXLINE( 528)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 536)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_541_replaceSelectedText)
HXLINE( 543)		bool _hx_tmp;
HXDLIN( 543)		if ((value == HX_("",00,00,00,00))) {
HXLINE( 543)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE( 543)			_hx_tmp = false;
            		}
HXDLIN( 543)		if (_hx_tmp) {
HXLINE( 543)			return;
            		}
HXLINE( 545)		int startIndex;
HXDLIN( 545)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE( 545)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 545)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE( 546)		int endIndex;
HXDLIN( 546)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE( 546)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 546)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE( 548)		bool _hx_tmp1;
HXDLIN( 548)		bool _hx_tmp2;
HXDLIN( 548)		if ((startIndex == endIndex)) {
HXLINE( 548)			_hx_tmp2 = (this->_hx___textEngine->maxChars > (int)0);
            		}
            		else {
HXLINE( 548)			_hx_tmp2 = false;
            		}
HXDLIN( 548)		if (_hx_tmp2) {
HXLINE( 548)			int _hx_tmp3 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXDLIN( 548)			_hx_tmp1 = (_hx_tmp3 == this->_hx___textEngine->maxChars);
            		}
            		else {
HXLINE( 548)			_hx_tmp1 = false;
            		}
HXDLIN( 548)		if (_hx_tmp1) {
HXLINE( 548)			return;
            		}
HXLINE( 550)		if ((startIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE( 550)			startIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 551)		if ((endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE( 551)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 552)		if ((endIndex < startIndex)) {
HXLINE( 554)			int cache = endIndex;
HXLINE( 555)			endIndex = startIndex;
HXLINE( 556)			startIndex = cache;
            		}
HXLINE( 559)		if ((startIndex < (int)0)) {
HXLINE( 559)			startIndex = (int)0;
            		}
HXLINE( 561)		this->replaceText(startIndex,endIndex,value);
HXLINE( 563)		int i = (startIndex + ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value));
HXLINE( 564)		if ((i > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE( 564)			i = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 566)		this->setSelection(i,i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_571_replaceText)
HXLINE( 573)		bool _hx_tmp;
HXDLIN( 573)		bool _hx_tmp1;
HXDLIN( 573)		bool _hx_tmp2;
HXDLIN( 573)		if ((endIndex >= beginIndex)) {
HXLINE( 573)			_hx_tmp2 = (beginIndex < (int)0);
            		}
            		else {
HXLINE( 573)			_hx_tmp2 = true;
            		}
HXDLIN( 573)		if (!(_hx_tmp2)) {
HXLINE( 573)			_hx_tmp1 = (endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE( 573)			_hx_tmp1 = true;
            		}
HXDLIN( 573)		if (!(_hx_tmp1)) {
HXLINE( 573)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE( 573)			_hx_tmp = true;
            		}
HXDLIN( 573)		if (_hx_tmp) {
HXLINE( 573)			return;
            		}
HXLINE( 575)		::String _hx_tmp3 = (::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,(int)0,beginIndex) + newText);
HXDLIN( 575)		this->_hx___updateText((_hx_tmp3 + ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,endIndex,null())));
HXLINE( 576)		if ((endIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE( 576)			endIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE( 578)		int newText1 = newText.length;
HXDLIN( 578)		int offset = (newText1 - (endIndex - beginIndex));
HXLINE( 580)		int i = (int)0;
HXLINE( 581)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE( 583)		while((i < ::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data))){
HXLINE( 585)			range = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->textFormatRanges->data,i)) );
HXLINE( 587)			bool _hx_tmp4;
HXDLIN( 587)			if ((range->start <= beginIndex)) {
HXLINE( 587)				_hx_tmp4 = (range->end >= endIndex);
            			}
            			else {
HXLINE( 587)				_hx_tmp4 = false;
            			}
HXDLIN( 587)			if (_hx_tmp4) {
HXLINE( 589)				 ::openfl::_internal::text::TextFormatRange range1 = range;
HXDLIN( 589)				range1->end = (range1->end + offset);
HXLINE( 590)				i = (i + (int)1);
            			}
            			else {
HXLINE( 592)				bool _hx_tmp5;
HXDLIN( 592)				if ((range->start >= beginIndex)) {
HXLINE( 592)					_hx_tmp5 = (range->end <= endIndex);
            				}
            				else {
HXLINE( 592)					_hx_tmp5 = false;
            				}
HXDLIN( 592)				if (_hx_tmp5) {
HXLINE( 594)					if ((i > (int)0)) {
HXLINE( 596)						 ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::splice(this->_hx___textEngine->textFormatRanges->data,i,(int)1),null());
            					}
            					else {
HXLINE( 600)						range->start = (int)0;
HXLINE( 601)						range->end = (beginIndex + newText.length);
HXLINE( 602)						i = (i + (int)1);
            					}
HXLINE( 606)					offset = (offset - (range->end - range->start));
            				}
            				else {
HXLINE( 608)					bool _hx_tmp6;
HXDLIN( 608)					if ((range->start > beginIndex)) {
HXLINE( 608)						_hx_tmp6 = (range->start <= endIndex);
            					}
            					else {
HXLINE( 608)						_hx_tmp6 = false;
            					}
HXDLIN( 608)					if (_hx_tmp6) {
HXLINE( 610)						 ::openfl::_internal::text::TextFormatRange range2 = range;
HXDLIN( 610)						range2->start = (range2->start + offset);
HXLINE( 611)						i = (i + (int)1);
            					}
            					else {
HXLINE( 615)						i = (i + (int)1);
            					}
            				}
            			}
            		}
HXLINE( 621)		this->_hx___updateScrollH();
HXLINE( 623)		this->_hx___dirty = true;
HXLINE( 624)		this->_hx___layoutDirty = true;
HXLINE( 625)		if (!(this->_hx___renderDirty)) {
HXLINE( 625)			this->_hx___renderDirty = true;
HXDLIN( 625)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_630_setSelection)
HXLINE( 632)		this->_hx___selectionIndex = beginIndex;
HXLINE( 633)		this->_hx___caretIndex = endIndex;
HXLINE( 634)		this->_hx___stopCursorTimer();
HXLINE( 635)		this->_hx___startCursorTimer();
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_640_setTextFormat)
HXLINE( 642)		int max = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
HXLINE( 643)		 ::openfl::_internal::text::TextFormatRange range;
HXLINE( 645)		if ((beginIndex < (int)0)) {
HXLINE( 645)			beginIndex = (int)0;
            		}
HXLINE( 646)		if ((endIndex < (int)0)) {
HXLINE( 646)			endIndex = (int)0;
            		}
HXLINE( 648)		if ((endIndex == (int)0)) {
HXLINE( 650)			if ((beginIndex == (int)0)) {
HXLINE( 652)				endIndex = max;
            			}
            			else {
HXLINE( 656)				endIndex = (beginIndex + (int)1);
            			}
            		}
HXLINE( 662)		if ((endIndex < beginIndex)) {
HXLINE( 662)			return;
            		}
HXLINE( 664)		bool _hx_tmp;
HXDLIN( 664)		if ((beginIndex == (int)0)) {
HXLINE( 664)			_hx_tmp = (endIndex >= max);
            		}
            		else {
HXLINE( 664)			_hx_tmp = false;
            		}
HXDLIN( 664)		if (_hx_tmp) {
HXLINE( 668)			this->_hx___textFormat->_hx___merge(format);
HXLINE( 670)			{
HXLINE( 670)				int _g1 = (int)0;
HXDLIN( 670)				int _g = ::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data);
HXDLIN( 670)				while((_g1 < _g)){
HXLINE( 670)					_g1 = (_g1 + (int)1);
HXDLIN( 670)					int i = (_g1 - (int)1);
HXLINE( 672)					range = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->textFormatRanges->data,i)) );
HXLINE( 673)					range->format->_hx___merge(this->_hx___textFormat);
            				}
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			int _hx_run( ::openfl::_internal::text::TextFormatRange a, ::openfl::_internal::text::TextFormatRange b){
            				HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_780_setTextFormat)
HXLINE( 782)				bool _hx_tmp3;
HXDLIN( 782)				if ((a->start >= b->start)) {
HXLINE( 782)					_hx_tmp3 = (a->end < b->end);
            				}
            				else {
HXLINE( 782)					_hx_tmp3 = true;
            				}
HXDLIN( 782)				if (_hx_tmp3) {
HXLINE( 784)					return (int)-1;
            				}
            				else {
HXLINE( 786)					bool _hx_tmp4;
HXDLIN( 786)					if ((a->start <= b->start)) {
HXLINE( 786)						_hx_tmp4 = (a->end > b->end);
            					}
            					else {
HXLINE( 786)						_hx_tmp4 = true;
            					}
HXDLIN( 786)					if (_hx_tmp4) {
HXLINE( 788)						return (int)1;
            					}
            				}
HXLINE( 792)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 679)			int index = ::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data);
HXLINE( 680)			int searchIndex;
HXLINE( 682)			while((index > (int)0)){
HXLINE( 684)				index = (index - (int)1);
HXLINE( 685)				range = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->textFormatRanges->data,index)) );
HXLINE( 687)				bool _hx_tmp1;
HXDLIN( 687)				if ((range->start == beginIndex)) {
HXLINE( 687)					_hx_tmp1 = (range->end == endIndex);
            				}
            				else {
HXLINE( 687)					_hx_tmp1 = false;
            				}
HXDLIN( 687)				if (_hx_tmp1) {
HXLINE( 691)					range->format = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 692)					range->format->_hx___merge(format);
HXLINE( 693)					return;
            				}
HXLINE( 697)				bool _hx_tmp2;
HXDLIN( 697)				if ((range->start >= beginIndex)) {
HXLINE( 697)					_hx_tmp2 = (range->end <= endIndex);
            				}
            				else {
HXLINE( 697)					_hx_tmp2 = false;
            				}
HXDLIN( 697)				if (_hx_tmp2) {
HXLINE( 701)					searchIndex = ::openfl::_Vector::IVector_obj::indexOf(this->_hx___textEngine->textFormatRanges->data,range,(int)0);
HXLINE( 703)					if ((searchIndex > (int)-1)) {
HXLINE( 705)						 ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::splice(this->_hx___textEngine->textFormatRanges->data,searchIndex,(int)1),null());
            					}
            				}
            			}
HXLINE( 713)			 ::openfl::_internal::text::TextFormatRange prevRange = null();
HXDLIN( 713)			 ::openfl::_internal::text::TextFormatRange nextRange = null();
HXLINE( 717)			if ((beginIndex > (int)0)) {
HXLINE( 719)				int _g11 = (int)0;
HXDLIN( 719)				int _g2 = ::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data);
HXDLIN( 719)				while((_g11 < _g2)){
HXLINE( 719)					_g11 = (_g11 + (int)1);
HXDLIN( 719)					int i1 = (_g11 - (int)1);
HXLINE( 721)					range = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->textFormatRanges->data,i1)) );
HXLINE( 723)					if ((range->end >= beginIndex)) {
HXLINE( 725)						prevRange = range;
HXLINE( 727)						goto _hx_goto_33;
            					}
            				}
            				_hx_goto_33:;
            			}
HXLINE( 734)			if ((endIndex < max)) {
HXLINE( 736)				int ni = ::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data);
HXLINE( 738)				while(true){
HXLINE( 738)					ni = (ni - (int)1);
HXDLIN( 738)					if (!((ni >= (int)0))) {
HXLINE( 738)						goto _hx_goto_34;
            					}
HXLINE( 740)					range = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->textFormatRanges->data,ni)) );
HXLINE( 742)					if ((range->start <= endIndex)) {
HXLINE( 744)						nextRange = range;
HXLINE( 746)						goto _hx_goto_34;
            					}
            				}
            				_hx_goto_34:;
            			}
HXLINE( 754)			if (hx::IsEq( nextRange,prevRange )) {
HXLINE( 758)				 ::openfl::text::TextFormat nextRange1 = nextRange->format->clone();
HXDLIN( 758)				nextRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,nextRange1,nextRange->start,nextRange->end);
HXLINE( 759)				::openfl::_Vector::IVector_obj::push(this->_hx___textEngine->textFormatRanges->data,nextRange);
            			}
HXLINE( 763)			if (hx::IsNotNull( prevRange )) {
HXLINE( 765)				prevRange->end = beginIndex;
            			}
HXLINE( 769)			if (hx::IsNotNull( nextRange )) {
HXLINE( 771)				nextRange->start = endIndex;
            			}
HXLINE( 775)			 ::openfl::text::TextFormat textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 776)			textFormat->_hx___merge(format);
HXLINE( 778)			{
HXLINE( 778)				 ::openfl::_Vector::AbstractVector this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 778)				 ::openfl::_internal::text::TextFormatRange x =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,textFormat,beginIndex,endIndex);
HXDLIN( 778)				::openfl::_Vector::IVector_obj::push(this1->data,x);
            			}
HXLINE( 780)			::openfl::_Vector::IVector_obj::sort(this->_hx___textEngine->textFormatRanges->data, ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE( 798)		this->_hx___dirty = true;
HXLINE( 799)		this->_hx___layoutDirty = true;
HXLINE( 800)		if (!(this->_hx___renderDirty)) {
HXLINE( 800)			this->_hx___renderDirty = true;
HXDLIN( 800)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

bool TextField_obj::_hx___allowMouseFocus(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_807___allowMouseFocus)
HXDLIN( 807)		bool _hx_tmp;
HXDLIN( 807)		if (hx::IsNotEq( this->_hx___textEngine->type,(int)1 )) {
HXDLIN( 807)			_hx_tmp = this->get_tabEnabled();
            		}
            		else {
HXDLIN( 807)			_hx_tmp = true;
            		}
HXDLIN( 807)		if (!(_hx_tmp)) {
HXDLIN( 807)			return this->get_selectable();
            		}
            		else {
HXDLIN( 807)			return true;
            		}
HXDLIN( 807)		return false;
            	}


void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_814___caretBeginningOfLine)
HXDLIN( 814)		bool _hx_tmp;
HXDLIN( 814)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXDLIN( 814)			_hx_tmp = (this->_hx___caretIndex < this->_hx___selectionIndex);
            		}
            		else {
HXDLIN( 814)			_hx_tmp = true;
            		}
HXDLIN( 814)		if (_hx_tmp) {
HXLINE( 816)			this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            		}
            		else {
HXLINE( 820)			this->_hx___selectionIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___selectionIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_827___caretEndOfLine)
HXLINE( 829)		int lineIndex;
HXLINE( 831)		if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE( 833)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
            		else {
HXLINE( 837)			lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
            		}
HXLINE( 841)		if ((lineIndex < (this->_hx___textEngine->numLines - (int)1))) {
HXLINE( 843)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + (int)1)) - (int)1);
            		}
            		else {
HXLINE( 847)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_856___caretNextCharacter)
HXDLIN( 856)		int _hx_tmp = this->_hx___caretIndex;
HXDLIN( 856)		if ((_hx_tmp < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text))) {
HXLINE( 858)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_865___caretNextLine)
HXLINE( 867)		if (hx::IsNull( lineIndex )) {
HXLINE( 869)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 873)		if (hx::IsLess( lineIndex,(this->_hx___textEngine->numLines - (int)1) )) {
HXLINE( 875)			if (hx::IsNull( caretIndex )) {
HXLINE( 877)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 881)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex + (int)1));
            		}
            		else {
HXLINE( 885)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_894___caretPreviousCharacter)
HXDLIN( 894)		if ((this->_hx___caretIndex > (int)0)) {
HXLINE( 896)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_903___caretPreviousLine)
HXLINE( 905)		if (hx::IsNull( lineIndex )) {
HXLINE( 907)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 911)		if (hx::IsGreater( lineIndex,(int)0 )) {
HXLINE( 913)			if (hx::IsNull( caretIndex )) {
HXLINE( 915)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 919)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex - (int)1));
            		}
            		else {
HXLINE( 923)			this->_hx___caretIndex = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___disableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_932___disableInput)
HXDLIN( 932)		bool _hx_tmp;
HXDLIN( 932)		if (this->_hx___inputEnabled) {
HXDLIN( 932)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN( 932)			_hx_tmp = false;
            		}
HXDLIN( 932)		if (_hx_tmp) {
HXLINE( 934)			this->stage->window->backend->setEnableTextEvents(false);
HXLINE( 935)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE( 936)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE( 938)			this->_hx___inputEnabled = false;
HXLINE( 939)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___disableInput,(void))

bool TextField_obj::_hx___dispatch( ::openfl::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_946___dispatch)
HXLINE( 948)		bool _hx_tmp;
HXDLIN( 948)		if ((event->eventPhase == (int)2)) {
HXLINE( 948)			_hx_tmp = (event->type == HX_("mouseUp",e0,f3,72,c0));
            		}
            		else {
HXLINE( 948)			_hx_tmp = false;
            		}
HXDLIN( 948)		if (_hx_tmp) {
HXLINE( 950)			 ::openfl::events::MouseEvent event1 = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 951)			Float group = this->get_mouseX();
HXDLIN( 951)			 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE( 953)			if (hx::IsNotNull( group1 )) {
HXLINE( 955)				::String url = group1->format->url;
HXLINE( 957)				bool _hx_tmp1;
HXDLIN( 957)				if (hx::IsNotNull( url )) {
HXLINE( 957)					_hx_tmp1 = (url != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 957)					_hx_tmp1 = false;
            				}
HXDLIN( 957)				if (_hx_tmp1) {
HXLINE( 959)					if (::StringTools_obj::startsWith(url,HX_("event:",e0,4e,6a,96))) {
HXLINE( 961)						this->dispatchEvent( ::openfl::events::TextEvent_obj::__alloc( HX_CTX ,HX_("link",fa,17,b3,47),false,false,url.substr((int)6,null())));
            					}
            					else {
HXLINE( 965)						::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),null());
            					}
            				}
            			}
            		}
HXLINE( 975)		return this->super::_hx___dispatch(event);
            	}


void TextField_obj::_hx___enableInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_982___enableInput)
HXDLIN( 982)		if (hx::IsNotNull( this->stage )) {
HXLINE( 984)			this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 986)			if (!(this->_hx___inputEnabled)) {
HXLINE( 988)				this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 990)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE( 992)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE( 993)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE( 997)				this->_hx___inputEnabled = true;
HXLINE( 998)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___enableInput,(void))

void TextField_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::DynamicTextSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1007___fromSymbol)
HXLINE(1009)		this->_hx___symbol = symbol;
HXLINE(1011)		this->set_width(symbol->width);
HXLINE(1012)		this->set_height(symbol->height);
HXLINE(1014)		this->_hx___offsetX = symbol->x;
HXLINE(1015)		this->_hx___offsetY = symbol->y;
HXLINE(1017)		this->set_multiline(symbol->multiline);
HXLINE(1018)		this->set_wordWrap(symbol->wordWrap);
HXLINE(1019)		this->set_displayAsPassword(symbol->password);
HXLINE(1021)		if (symbol->border) {
HXLINE(1023)			this->set_border(true);
HXLINE(1024)			this->set_background(true);
            		}
HXLINE(1028)		this->set_selectable(symbol->selectable);
HXLINE(1030)		if (symbol->input) {
HXLINE(1032)			this->set_type((int)1);
            		}
HXLINE(1036)		 ::openfl::text::TextFormat format =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(1037)		if (hx::IsNotNull( symbol->color )) {
HXLINE(1037)			format->color = ((int)symbol->color & (int)(int)16777215);
            		}
HXLINE(1038)		format->size = ::Math_obj::round(((Float)symbol->fontHeight / (Float)(int)20));
HXLINE(1040)		 ::openfl::_internal::symbols::FontSymbol font = ( ( ::openfl::_internal::symbols::FontSymbol)(swf->symbols->get(symbol->fontID).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >()) );
HXLINE(1042)		if (hx::IsNotNull( font )) {
HXLINE(1052)			format->_hx___ascent = ((Float)((Float)font->ascent / (Float)(int)20) / (Float)(int)1024);
HXLINE(1053)			format->_hx___descent = ((Float)((Float)font->descent / (Float)(int)20) / (Float)(int)1024);
            		}
HXLINE(1057)		format->font = symbol->fontName;
HXLINE(1059)		bool found = false;
HXLINE(1061)		{
HXLINE(1061)			::String _g = format->font;
HXDLIN(1061)			if (hx::IsNull( _g )) {
HXLINE(1065)				found = true;
            			}
            			else {
HXLINE(1061)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE(1065)					found = true;
HXDLIN(1065)					goto _hx_goto_48;
            				}
            				/* default */{
HXLINE(1069)					int _g1 = (int)0;
HXDLIN(1069)					::Array< ::Dynamic> _g11 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1069)					while((_g1 < _g11->length)){
HXLINE(1069)						 ::openfl::text::Font font1 = _g11->__get(_g1).StaticCast<  ::openfl::text::Font >();
HXDLIN(1069)						_g1 = (_g1 + (int)1);
HXLINE(1071)						if ((font1->name == format->font)) {
HXLINE(1073)							found = true;
HXLINE(1074)							goto _hx_goto_47;
            						}
            					}
            					_hx_goto_47:;
            				}
            				_hx_goto_48:;
            			}
            		}
HXLINE(1082)		if (!(found)) {
HXLINE(1084)			 ::EReg alpha =  ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z]+",51,38,19,1d),HX_("g",67,00,00,00));
HXLINE(1086)			{
HXLINE(1086)				int _g12 = (int)0;
HXDLIN(1086)				::Array< ::Dynamic> _g2 = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN(1086)				while((_g12 < _g2->length)){
HXLINE(1086)					 ::openfl::text::Font font2 = _g2->__get(_g12).StaticCast<  ::openfl::text::Font >();
HXDLIN(1086)					_g12 = (_g12 + (int)1);
HXLINE(1088)					::String _hx_tmp = alpha->replace(font2->name,HX_("",00,00,00,00)).substr((int)0,symbol->fontName.length);
HXDLIN(1088)					if ((_hx_tmp == symbol->fontName)) {
HXLINE(1090)						format->font = font2->name;
HXLINE(1091)						found = true;
HXLINE(1092)						goto _hx_goto_49;
            					}
            				}
            				_hx_goto_49:;
            			}
            		}
HXLINE(1100)		if (found) {
HXLINE(1102)			this->set_embedFonts(true);
            		}
            		else {
HXLINE(1104)			if (!(::openfl::text::TextField_obj::_hx___missingFontWarning->exists(format->font))) {
HXLINE(1106)				::openfl::text::TextField_obj::_hx___missingFontWarning->set(format->font,true);
HXLINE(1107)				::lime::utils::Log_obj::warn(((HX_("Could not find required font \"",97,15,e8,5b) + format->font) + HX_("\", it has not been embedded",4c,66,7a,0a)),hx::SourceInfo(HX_("TextField.hx",31,a8,83,a8),1107,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__fromSymbol",82,2f,b5,6a)));
            			}
            		}
HXLINE(1111)		if (hx::IsNotNull( symbol->align )) {
HXLINE(1113)			if ((symbol->align == HX_("center",d5,25,db,05))) {
HXLINE(1113)				format->align = (int)0;
            			}
            			else {
HXLINE(1114)				if ((symbol->align == HX_("right",dc,0b,64,e9))) {
HXLINE(1114)					format->align = (int)4;
            				}
            				else {
HXLINE(1115)					if ((symbol->align == HX_("justify",50,df,b5,83))) {
HXLINE(1115)						format->align = (int)2;
            					}
            				}
            			}
HXLINE(1117)			format->leftMargin = ::Std_obj::_hx_int(((Float)symbol->leftMargin / (Float)(int)20));
HXLINE(1118)			format->rightMargin = ::Std_obj::_hx_int(((Float)symbol->rightMargin / (Float)(int)20));
HXLINE(1119)			format->indent = ::Std_obj::_hx_int(((Float)symbol->indent / (Float)(int)20));
HXLINE(1120)			format->leading = ::Std_obj::_hx_int(((Float)symbol->leading / (Float)(int)20));
            		}
HXLINE(1124)		this->set_defaultTextFormat(format);
HXLINE(1126)		if (hx::IsNotNull( symbol->text )) {
HXLINE(1128)			if (symbol->html) {
HXLINE(1130)				this->set_htmlText(symbol->text);
            			}
            			else {
HXLINE(1134)				this->set_text(symbol->text);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___fromSymbol,(void))

Float TextField_obj::_hx___getAdvance( ::Dynamic position){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1150___getAdvance)
HXDLIN(1150)		return ( (Float)( ::Dynamic(position->__Field(HX_("advance",82,08,0c,ef),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAdvance,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1156___getBounds)
HXLINE(1158)		this->_hx___updateLayout();
HXLINE(1160)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE(1161)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE(1162)		 ::openfl::geom::Rectangle bounds1 = bounds;
HXDLIN(1162)		bounds1->x = (bounds1->x + this->_hx___offsetX);
HXLINE(1163)		 ::openfl::geom::Rectangle bounds2 = bounds;
HXDLIN(1163)		bounds2->y = (bounds2->y + this->_hx___offsetY);
HXLINE(1164)		bounds->_hx___transform(bounds,matrix);
HXLINE(1166)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE(1168)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1173___getCharIndexOnDifferentLine)
HXLINE(1175)		bool _hx_tmp;
HXDLIN(1175)		if ((charIndex >= (int)0)) {
HXLINE(1175)			_hx_tmp = (charIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
            		else {
HXLINE(1175)			_hx_tmp = true;
            		}
HXDLIN(1175)		if (_hx_tmp) {
HXLINE(1175)			return (int)-1;
            		}
HXLINE(1176)		bool _hx_tmp1;
HXDLIN(1176)		if ((lineIndex >= (int)0)) {
HXLINE(1176)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE(1176)			_hx_tmp1 = true;
            		}
HXDLIN(1176)		if (_hx_tmp1) {
HXLINE(1176)			return (int)-1;
            		}
HXLINE(1178)		 ::Dynamic x = null();
HXDLIN(1178)		 ::Dynamic y = null();
HXLINE(1180)		{
HXLINE(1180)			int _g = (int)0;
HXDLIN(1180)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___textEngine->layoutGroups;
HXDLIN(1180)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE(1180)				 ::openfl::_internal::text::TextLayoutGroup group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN(1180)				_g = (_g + (int)1);
HXLINE(1182)				bool _hx_tmp2;
HXDLIN(1182)				if ((charIndex >= group->startIndex)) {
HXLINE(1182)					_hx_tmp2 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE(1182)					_hx_tmp2 = false;
            				}
HXDLIN(1182)				if (_hx_tmp2) {
HXLINE(1184)					x = group->offsetX;
HXLINE(1186)					{
HXLINE(1186)						int _g3 = (int)0;
HXDLIN(1186)						int _g2 = (charIndex - group->startIndex);
HXDLIN(1186)						while((_g3 < _g2)){
HXLINE(1186)							_g3 = (_g3 + (int)1);
HXDLIN(1186)							int i = (_g3 - (int)1);
HXLINE(1188)							Float x1;
HXDLIN(1188)							bool x2;
HXDLIN(1188)							if ((i >= (int)0)) {
HXLINE(1188)								x2 = (i < group->positions->length);
            							}
            							else {
HXLINE(1188)								x2 = false;
            							}
HXDLIN(1188)							if (x2) {
HXLINE(1188)								x1 = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1188)								x1 = (int)0;
            							}
HXDLIN(1188)							x = (x + x1);
            						}
            					}
HXLINE(1192)					if (hx::IsNotNull( y )) {
HXLINE(1192)						return this->_hx___getPosition(x,y);
            					}
            				}
HXLINE(1196)				if ((group->lineIndex == lineIndex)) {
HXLINE(1198)					Float group1 = group->offsetY;
HXDLIN(1198)					y = (group1 + ((Float)group->height / (Float)(int)2));
HXLINE(1200)					if (hx::IsNotNull( x )) {
HXLINE(1200)						return this->_hx___getPosition(x,y);
            					}
            				}
            			}
            		}
HXLINE(1206)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

 ::lime::ui::MouseCursor TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1211___getCursor)
HXLINE(1213)		Float group = this->get_mouseX();
HXDLIN(1213)		 ::openfl::_internal::text::TextLayoutGroup group1 = this->_hx___getGroup(group,this->get_mouseY(),true);
HXLINE(1215)		bool _hx_tmp;
HXDLIN(1215)		if (hx::IsNotNull( group1 )) {
HXLINE(1215)			_hx_tmp = (group1->format->url != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1215)			_hx_tmp = false;
            		}
HXDLIN(1215)		if (_hx_tmp) {
HXLINE(1217)			return ::lime::ui::MouseCursor_obj::POINTER_dyn();
            		}
            		else {
HXLINE(1219)			if (this->_hx___textEngine->selectable) {
HXLINE(1221)				return ::lime::ui::MouseCursor_obj::TEXT_dyn();
            			}
            		}
HXLINE(1225)		return null();
            	}


 ::openfl::_internal::text::TextLayoutGroup TextField_obj::_hx___getGroup(Float x,Float y,hx::Null< bool >  __o_precise){
bool precise = __o_precise.Default(false);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1230___getGroup)
HXLINE(1232)		this->_hx___updateLayout();
HXLINE(1234)		x = (x + this->get_scrollH());
HXLINE(1236)		{
HXLINE(1236)			int _g1 = (int)0;
HXDLIN(1236)			int _g = (this->get_scrollV() - (int)1);
HXDLIN(1236)			while((_g1 < _g)){
HXLINE(1236)				_g1 = (_g1 + (int)1);
HXDLIN(1236)				int i = (_g1 - (int)1);
HXLINE(1238)				y = (y + ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->lineHeights->data,i)) ));
            			}
            		}
HXLINE(1242)		bool _hx_tmp;
HXDLIN(1242)		if (!(precise)) {
HXLINE(1242)			_hx_tmp = (y > this->_hx___textEngine->textHeight);
            		}
            		else {
HXLINE(1242)			_hx_tmp = false;
            		}
HXDLIN(1242)		if (_hx_tmp) {
HXLINE(1242)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1244)		bool firstGroup = true;
HXLINE(1245)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1245)		 ::openfl::_internal::text::TextLayoutGroup nextGroup;
HXLINE(1247)		{
HXLINE(1247)			int _g11 = (int)0;
HXDLIN(1247)			int _g2 = ::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->layoutGroups->data);
HXDLIN(1247)			while((_g11 < _g2)){
HXLINE(1247)				_g11 = (_g11 + (int)1);
HXDLIN(1247)				int i1 = (_g11 - (int)1);
HXLINE(1249)				group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->layoutGroups->data,i1)) );
HXLINE(1251)				if ((i1 < (::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->layoutGroups->data) - (int)1))) {
HXLINE(1253)					::Dynamic this1 = this->_hx___textEngine->layoutGroups->data;
HXDLIN(1253)					nextGroup = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this1,(i1 + (int)1))) );
            				}
            				else {
HXLINE(1257)					nextGroup = null();
            				}
HXLINE(1261)				if (firstGroup) {
HXLINE(1263)					if ((y < group->offsetY)) {
HXLINE(1263)						y = group->offsetY;
            					}
HXLINE(1264)					if ((x < group->offsetX)) {
HXLINE(1264)						x = group->offsetX;
            					}
HXLINE(1265)					firstGroup = false;
            				}
HXLINE(1269)				bool _hx_tmp1;
HXDLIN(1269)				bool _hx_tmp2;
HXDLIN(1269)				if ((y >= group->offsetY)) {
HXLINE(1269)					_hx_tmp2 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1269)					_hx_tmp2 = false;
            				}
HXDLIN(1269)				if (!(_hx_tmp2)) {
HXLINE(1269)					if (!(precise)) {
HXLINE(1269)						_hx_tmp1 = hx::IsNull( nextGroup );
            					}
            					else {
HXLINE(1269)						_hx_tmp1 = false;
            					}
            				}
            				else {
HXLINE(1269)					_hx_tmp1 = true;
            				}
HXDLIN(1269)				if (_hx_tmp1) {
HXLINE(1271)					bool _hx_tmp3;
HXDLIN(1271)					bool _hx_tmp4;
HXDLIN(1271)					if ((x >= group->offsetX)) {
HXLINE(1271)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1271)						_hx_tmp4 = false;
            					}
HXDLIN(1271)					if (!(_hx_tmp4)) {
HXLINE(1271)						if (!(precise)) {
HXLINE(1271)							if (hx::IsNotNull( nextGroup )) {
HXLINE(1271)								_hx_tmp3 = (nextGroup->lineIndex != group->lineIndex);
            							}
            							else {
HXLINE(1271)								_hx_tmp3 = true;
            							}
            						}
            						else {
HXLINE(1271)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1271)						_hx_tmp3 = true;
            					}
HXDLIN(1271)					if (_hx_tmp3) {
HXLINE(1273)						return group;
            					}
            				}
            			}
            		}
HXLINE(1281)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,_hx___getGroup,return )

int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1286___getPosition)
HXLINE(1288)		 ::openfl::_internal::text::TextLayoutGroup group = this->_hx___getGroup(x,y,null());
HXLINE(1290)		if (hx::IsNull( group )) {
HXLINE(1292)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(1296)		Float advance = ((Float)0.0);
HXLINE(1298)		{
HXLINE(1298)			int _g1 = (int)0;
HXDLIN(1298)			int _g = group->positions->length;
HXDLIN(1298)			while((_g1 < _g)){
HXLINE(1298)				_g1 = (_g1 + (int)1);
HXDLIN(1298)				int i = (_g1 - (int)1);
HXLINE(1300)				Float advance1;
HXDLIN(1300)				bool advance2;
HXDLIN(1300)				if ((i >= (int)0)) {
HXLINE(1300)					advance2 = (i < group->positions->length);
            				}
            				else {
HXLINE(1300)					advance2 = false;
            				}
HXDLIN(1300)				if (advance2) {
HXLINE(1300)					advance1 = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            				}
            				else {
HXLINE(1300)					advance1 = (int)0;
            				}
HXDLIN(1300)				advance = (advance + advance1);
HXLINE(1302)				if ((x <= (group->offsetX + advance))) {
HXLINE(1304)					Float group1 = group->offsetX;
HXDLIN(1304)					Float _hx_tmp;
HXDLIN(1304)					bool _hx_tmp1;
HXDLIN(1304)					if ((i >= (int)0)) {
HXLINE(1304)						_hx_tmp1 = (i < group->positions->length);
            					}
            					else {
HXLINE(1304)						_hx_tmp1 = false;
            					}
HXDLIN(1304)					if (_hx_tmp1) {
HXLINE(1304)						_hx_tmp = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1304)						_hx_tmp = (int)0;
            					}
HXDLIN(1304)					Float _hx_tmp2 = (group1 + (advance - _hx_tmp));
HXDLIN(1304)					Float _hx_tmp3;
HXDLIN(1304)					bool _hx_tmp4;
HXDLIN(1304)					if ((i >= (int)0)) {
HXLINE(1304)						_hx_tmp4 = (i < group->positions->length);
            					}
            					else {
HXLINE(1304)						_hx_tmp4 = false;
            					}
HXDLIN(1304)					if (_hx_tmp4) {
HXLINE(1304)						_hx_tmp3 = group->positions->__get(i).StaticCast<  ::lime::text::GlyphPosition >()->advance->x;
            					}
            					else {
HXLINE(1304)						_hx_tmp3 = (int)0;
            					}
HXDLIN(1304)					if ((x <= (_hx_tmp2 + ((Float)_hx_tmp3 / (Float)(int)2)))) {
HXLINE(1306)						return (group->startIndex + i);
            					}
            					else {
HXLINE(1310)						if (((group->startIndex + i) < group->endIndex)) {
HXLINE(1310)							return ((group->startIndex + i) + (int)1);
            						}
            						else {
HXLINE(1310)							return group->endIndex;
            						}
            					}
            				}
            			}
            		}
HXLINE(1318)		return group->endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1322___hitTest)
HXLINE(1324)		bool _hx_tmp;
HXDLIN(1324)		bool _hx_tmp1;
HXDLIN(1324)		if (!(!(hitObject->get_visible()))) {
HXLINE(1324)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(1324)			_hx_tmp1 = true;
            		}
HXDLIN(1324)		if (!(_hx_tmp1)) {
HXLINE(1324)			if (interactiveOnly) {
HXLINE(1324)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(1324)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1324)			_hx_tmp = true;
            		}
HXDLIN(1324)		if (_hx_tmp) {
HXLINE(1324)			return false;
            		}
HXLINE(1325)		bool _hx_tmp2;
HXDLIN(1325)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1325)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(1325)			_hx_tmp2 = false;
            		}
HXDLIN(1325)		if (_hx_tmp2) {
HXLINE(1325)			return false;
            		}
HXLINE(1327)		this->_hx___getRenderTransform();
HXLINE(1328)		this->_hx___updateLayout();
HXLINE(1330)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1330)		Float norm = (_this->a * _this->d);
HXDLIN(1330)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1330)		Float px;
HXDLIN(1330)		if ((norm1 == (int)0)) {
HXLINE(1330)			px = -(_this->tx);
            		}
            		else {
HXLINE(1330)			Float _this1 = _this->c;
HXDLIN(1330)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1330)			Float _this2 = _this->d;
HXDLIN(1330)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1331)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1331)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1331)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1331)		Float py;
HXDLIN(1331)		if ((norm3 == (int)0)) {
HXLINE(1331)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1331)			Float _this4 = _this3->a;
HXDLIN(1331)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1331)			Float _this5 = _this3->b;
HXDLIN(1331)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1333)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1335)			if (hx::IsNotNull( stack )) {
HXLINE(1337)				stack->push(hitObject);
            			}
HXLINE(1341)			return true;
            		}
HXLINE(1345)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1350___hitTestMask)
HXLINE(1352)		this->_hx___getRenderTransform();
HXLINE(1353)		this->_hx___updateLayout();
HXLINE(1355)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1355)		Float norm = (_this->a * _this->d);
HXDLIN(1355)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(1355)		Float px;
HXDLIN(1355)		if ((norm1 == (int)0)) {
HXLINE(1355)			px = -(_this->tx);
            		}
            		else {
HXLINE(1355)			Float _this1 = _this->c;
HXDLIN(1355)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN(1355)			Float _this2 = _this->d;
HXDLIN(1355)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE(1356)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN(1356)		Float norm2 = (_this3->a * _this3->d);
HXDLIN(1356)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(1356)		Float py;
HXDLIN(1356)		if ((norm3 == (int)0)) {
HXLINE(1356)			py = -(_this3->ty);
            		}
            		else {
HXLINE(1356)			Float _this4 = _this3->a;
HXDLIN(1356)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN(1356)			Float _this5 = _this3->b;
HXDLIN(1356)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE(1358)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1360)			return true;
            		}
HXLINE(1364)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1369___renderCairo)
HXLINE(1372)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1373)		this->super::_hx___renderCairo(renderSession);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1379___renderCanvas)
            	}


void TextField_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1444___renderDOM)
            	}


void TextField_obj::_hx___renderDOMClear( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1485___renderDOMClear)
HXDLIN(1485)		::openfl::_internal::renderer::dom::DOMTextField_obj::clear(hx::ObjectPtr<OBJ_>(this),renderSession);
            	}


void TextField_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1490___renderGL)
HXLINE(1495)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1498)		this->super::_hx___renderGL(renderSession);
            	}


void TextField_obj::_hx___renderGLMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1503___renderGLMask)
HXLINE(1508)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1511)		this->super::_hx___renderGLMask(renderSession);
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1516___startCursorTimer)
HXLINE(1518)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),(int)600);
HXLINE(1519)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(1520)		this->_hx___dirty = true;
HXLINE(1521)		if (!(this->_hx___renderDirty)) {
HXLINE(1521)			this->_hx___renderDirty = true;
HXDLIN(1521)			this->_hx___setParentRenderDirty();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1526___startTextInput)
HXLINE(1528)		if ((this->_hx___caretIndex < (int)0)) {
HXLINE(1530)			this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE(1531)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(1535)		bool enableInput = true;
HXLINE(1537)		if (enableInput) {
HXLINE(1539)			this->_hx___enableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1546___stopCursorTimer)
HXLINE(1548)		if (hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(1550)			this->_hx___cursorTimer->stop();
HXLINE(1551)			this->_hx___cursorTimer = null();
            		}
HXLINE(1555)		if (this->_hx___showCursor) {
HXLINE(1557)			this->_hx___showCursor = false;
HXLINE(1558)			this->_hx___dirty = true;
HXLINE(1559)			if (!(this->_hx___renderDirty)) {
HXLINE(1559)				this->_hx___renderDirty = true;
HXDLIN(1559)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1566___stopTextInput)
HXLINE(1568)		bool disableInput = true;
HXLINE(1570)		if (disableInput) {
HXLINE(1572)			this->_hx___disableInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1581___updateLayout)
HXDLIN(1581)		if (this->_hx___layoutDirty) {
HXLINE(1583)			Float cacheWidth = this->_hx___textEngine->width;
HXLINE(1584)			Float cacheHeight = this->_hx___textEngine->height;
HXLINE(1586)			this->_hx___textEngine->update();
HXLINE(1588)			if (hx::IsNotEq( this->_hx___textEngine->autoSize,(int)2 )) {
HXLINE(1590)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(1592)					 ::Dynamic _g = this->_hx___textEngine->autoSize;
HXDLIN(1592)					 ::Dynamic _hx_switch_0 = _g;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE(1600)						 ::openfl::text::TextField _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1600)						Float _hx_tmp = _g1->get_x();
HXDLIN(1600)						_g1->set_x((_hx_tmp + ((Float)(cacheWidth - this->_hx___textEngine->width) / (Float)(int)2)));
HXDLIN(1600)						goto _hx_goto_74;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE(1596)						 ::openfl::text::TextField _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1596)						Float _hx_tmp1 = _g2->get_x();
HXDLIN(1596)						_g2->set_x((_hx_tmp1 + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(1596)						goto _hx_goto_74;
            					}
            					/* default */{
            					}
            					_hx_goto_74:;
            				}
HXLINE(1610)				this->_hx___textEngine->getBounds();
            			}
HXLINE(1614)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1623___updateScrollH)
HXDLIN(1623)		bool _hx_tmp;
HXDLIN(1623)		if (!(this->get_multiline())) {
HXDLIN(1623)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXDLIN(1623)			_hx_tmp = false;
            		}
HXDLIN(1623)		if (_hx_tmp) {
HXLINE(1625)			this->_hx___layoutDirty = true;
HXLINE(1626)			this->_hx___updateLayout();
HXLINE(1628)			Float offsetX = ((this->_hx___textEngine->textWidth - this->_hx___textEngine->width) + (int)4);
HXLINE(1630)			if ((offsetX > (int)0)) {
HXLINE(1632)				this->set_scrollH(::Math_obj::ceil(offsetX));
            			}
            			else {
HXLINE(1636)				this->set_scrollH((int)0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateScrollH,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1645___updateText)
HXLINE(1657)		this->_hx___textEngine->set_text(value);
HXLINE(1658)		this->_hx___text = this->_hx___textEngine->text;
HXLINE(1660)		int _hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXDLIN(1660)		if ((_hx_tmp < this->_hx___caretIndex)) {
HXLINE(1662)			this->_hx___selectionIndex = (this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            		}
HXLINE(1666)		if (!(this->_hx___displayAsPassword)) {
HXLINE(1668)			this->_hx___textEngine->set_text(this->_hx___text);
            		}
            		else {
HXLINE(1672)			int length = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->get_text());
HXLINE(1673)			::String mask = HX_("",00,00,00,00);
HXLINE(1675)			{
HXLINE(1675)				int _g1 = (int)0;
HXDLIN(1675)				int _g = length;
HXDLIN(1675)				while((_g1 < _g)){
HXLINE(1675)					_g1 = (_g1 + (int)1);
HXDLIN(1675)					int i = (_g1 - (int)1);
HXLINE(1677)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(1681)			this->_hx___textEngine->set_text(mask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1688___updateTransforms)
HXLINE(1690)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(1691)		{
HXLINE(1691)			 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN(1691)			Float px = this->_hx___offsetX;
HXDLIN(1691)			Float py = this->_hx___offsetY;
HXDLIN(1691)			Float _hx_tmp = (px * _this->a);
HXDLIN(1691)			_this->tx = ((_hx_tmp + (py * _this->c)) + _this->tx);
HXDLIN(1691)			Float _hx_tmp1 = (px * _this->b);
HXDLIN(1691)			_this->ty = ((_hx_tmp1 + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1705_get_antiAliasType)
HXDLIN(1705)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1710_set_antiAliasType)
HXLINE(1712)		bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->antiAliasType );
HXLINE(1718)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1725_get_autoSize)
HXDLIN(1725)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1730_set_autoSize)
HXLINE(1732)		if (hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(1734)			this->_hx___dirty = true;
HXLINE(1735)			this->_hx___layoutDirty = true;
HXLINE(1736)			if (!(this->_hx___renderDirty)) {
HXLINE(1736)				this->_hx___renderDirty = true;
HXDLIN(1736)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1740)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1747_get_background)
HXDLIN(1747)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1752_set_background)
HXLINE(1754)		if ((value != this->_hx___textEngine->background)) {
HXLINE(1756)			this->_hx___dirty = true;
HXLINE(1757)			if (!(this->_hx___renderDirty)) {
HXLINE(1757)				this->_hx___renderDirty = true;
HXDLIN(1757)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1761)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1768_get_backgroundColor)
HXDLIN(1768)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1773_set_backgroundColor)
HXLINE(1775)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(1777)			this->_hx___dirty = true;
HXLINE(1778)			if (!(this->_hx___renderDirty)) {
HXLINE(1778)				this->_hx___renderDirty = true;
HXDLIN(1778)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1782)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1789_get_border)
HXDLIN(1789)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1794_set_border)
HXLINE(1796)		if ((value != this->_hx___textEngine->border)) {
HXLINE(1798)			this->_hx___dirty = true;
HXLINE(1799)			if (!(this->_hx___renderDirty)) {
HXLINE(1799)				this->_hx___renderDirty = true;
HXDLIN(1799)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1803)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1810_get_borderColor)
HXDLIN(1810)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1815_set_borderColor)
HXLINE(1817)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(1819)			this->_hx___dirty = true;
HXLINE(1820)			if (!(this->_hx___renderDirty)) {
HXLINE(1820)				this->_hx___renderDirty = true;
HXDLIN(1820)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1824)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1829_get_bottomScrollV)
HXLINE(1831)		this->_hx___updateLayout();
HXLINE(1833)		return this->_hx___textEngine->bottomScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

bool TextField_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1838_get_cacheAsBitmap)
HXLINE(1841)		bool _hx_tmp;
HXDLIN(1841)		bool _hx_tmp1;
HXDLIN(1841)		if (hx::IsNotNull( this->_hx___filters )) {
HXLINE(1841)			_hx_tmp1 = (this->_hx___filters->length == (int)1);
            		}
            		else {
HXLINE(1841)			_hx_tmp1 = false;
            		}
HXDLIN(1841)		if (_hx_tmp1) {
HXLINE(1841)			_hx_tmp = ::Std_obj::is(this->_hx___filters->__get((int)0).StaticCast<  ::openfl::filters::BitmapFilter >(),hx::ClassOf< ::openfl::filters::GlowFilter >());
            		}
            		else {
HXLINE(1841)			_hx_tmp = false;
            		}
HXDLIN(1841)		if (_hx_tmp) {
HXLINE(1841)			return false;
            		}
HXLINE(1842)		return this->super::get_cacheAsBitmap();
            	}


int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1849_get_caretIndex)
HXDLIN(1849)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1856_get_defaultTextFormat)
HXDLIN(1856)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1861_set_defaultTextFormat)
HXLINE(1863)		this->_hx___textFormat->_hx___merge(value);
HXLINE(1865)		this->_hx___layoutDirty = true;
HXLINE(1866)		this->_hx___dirty = true;
HXLINE(1867)		if (!(this->_hx___renderDirty)) {
HXLINE(1867)			this->_hx___renderDirty = true;
HXDLIN(1867)			this->_hx___setParentRenderDirty();
            		}
HXLINE(1869)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1876_get_displayAsPassword)
HXDLIN(1876)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1881_set_displayAsPassword)
HXLINE(1883)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(1885)			this->_hx___dirty = true;
HXLINE(1886)			this->_hx___layoutDirty = true;
HXLINE(1887)			if (!(this->_hx___renderDirty)) {
HXLINE(1887)				this->_hx___renderDirty = true;
HXDLIN(1887)				this->_hx___setParentRenderDirty();
            			}
HXLINE(1889)			this->_hx___displayAsPassword = value;
HXLINE(1890)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(1894)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1901_get_embedFonts)
HXDLIN(1901)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1915_set_embedFonts)
HXDLIN(1915)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1922_get_gridFitType)
HXDLIN(1922)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1936_set_gridFitType)
HXDLIN(1936)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1941_get_height)
HXLINE(1943)		this->_hx___updateLayout();
HXLINE(1944)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(1944)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1949_set_height)
HXLINE(1951)		if ((value != this->_hx___textEngine->height)) {
HXLINE(1953)			this->_hx___setTransformDirty();
HXLINE(1954)			this->_hx___dirty = true;
HXLINE(1955)			this->_hx___layoutDirty = true;
HXLINE(1956)			if (!(this->_hx___renderDirty)) {
HXLINE(1956)				this->_hx___renderDirty = true;
HXDLIN(1956)				this->_hx___setParentRenderDirty();
            			}
HXLINE(1958)			this->_hx___textEngine->height = value;
            		}
HXLINE(1962)		Float _hx_tmp = this->_hx___textEngine->height;
HXDLIN(1962)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1969_get_htmlText)
HXDLIN(1969)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1974_set_htmlText)
HXLINE(1976)		bool _hx_tmp;
HXDLIN(1976)		if (!(!(this->_hx___isHTML))) {
HXLINE(1976)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(1976)			_hx_tmp = true;
            		}
HXDLIN(1976)		if (_hx_tmp) {
HXLINE(1978)			this->_hx___dirty = true;
HXLINE(1979)			this->_hx___layoutDirty = true;
HXLINE(1980)			if (!(this->_hx___renderDirty)) {
HXLINE(1980)				this->_hx___renderDirty = true;
HXDLIN(1980)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(1984)		this->_hx___isHTML = true;
HXLINE(1994)		value = ::openfl::_internal::text::HTMLParser_obj::parse(value,this->_hx___textFormat,this->_hx___textEngine->textFormatRanges);
HXLINE(2028)		this->_hx___updateText(value);
HXLINE(2031)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2036_get_length)
HXLINE(2038)		if (hx::IsNotNull( this->_hx___text )) {
HXLINE(2040)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            		}
HXLINE(2044)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2051_get_maxChars)
HXDLIN(2051)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2056_set_maxChars)
HXLINE(2058)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(2060)			this->_hx___textEngine->maxChars = value;
HXLINE(2062)			this->_hx___dirty = true;
HXLINE(2063)			this->_hx___layoutDirty = true;
HXLINE(2064)			if (!(this->_hx___renderDirty)) {
HXLINE(2064)				this->_hx___renderDirty = true;
HXDLIN(2064)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2068)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2073_get_maxScrollH)
HXLINE(2075)		this->_hx___updateLayout();
HXLINE(2077)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2082_get_maxScrollV)
HXLINE(2084)		this->_hx___updateLayout();
HXLINE(2086)		return this->_hx___textEngine->maxScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2093_get_mouseWheelEnabled)
HXDLIN(2093)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2100_set_mouseWheelEnabled)
HXDLIN(2100)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2107_get_multiline)
HXDLIN(2107)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2112_set_multiline)
HXLINE(2114)		if ((value != this->_hx___textEngine->multiline)) {
HXLINE(2116)			this->_hx___dirty = true;
HXLINE(2117)			this->_hx___layoutDirty = true;
HXLINE(2118)			this->_hx___updateText(this->_hx___text);
HXLINE(2119)			this->_hx___updateScrollH();
HXLINE(2120)			if (!(this->_hx___renderDirty)) {
HXLINE(2120)				this->_hx___renderDirty = true;
HXDLIN(2120)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2124)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2129_get_numLines)
HXLINE(2131)		this->_hx___updateLayout();
HXLINE(2133)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2140_get_restrict)
HXDLIN(2140)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2145_set_restrict)
HXLINE(2147)		if ((this->_hx___textEngine->restrict != value)) {
HXLINE(2149)			this->_hx___textEngine->set_restrict(value);
HXLINE(2150)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(2154)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2161_get_scrollH)
HXDLIN(2161)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2166_set_scrollH)
HXLINE(2168)		this->_hx___updateLayout();
HXLINE(2170)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2170)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2171)		if ((value < (int)0)) {
HXLINE(2171)			value = (int)0;
            		}
HXLINE(2173)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2175)			this->_hx___dirty = true;
HXLINE(2176)			if (!(this->_hx___renderDirty)) {
HXLINE(2176)				this->_hx___renderDirty = true;
HXDLIN(2176)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2177)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2181)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2188_get_scrollV)
HXDLIN(2188)		return this->_hx___textEngine->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2193_set_scrollV)
HXLINE(2195)		this->_hx___updateLayout();
HXLINE(2197)		if ((value > this->_hx___textEngine->maxScrollV)) {
HXLINE(2197)			value = this->_hx___textEngine->maxScrollV;
            		}
HXLINE(2198)		if ((value < (int)1)) {
HXLINE(2198)			value = (int)1;
            		}
HXLINE(2200)		if ((value != this->_hx___textEngine->scrollV)) {
HXLINE(2202)			this->_hx___dirty = true;
HXLINE(2203)			if (!(this->_hx___renderDirty)) {
HXLINE(2203)				this->_hx___renderDirty = true;
HXDLIN(2203)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2204)			this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("scroll",0d,d8,64,47),null(),null()));
            		}
HXLINE(2208)		return (this->_hx___textEngine->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2215_get_selectable)
HXDLIN(2215)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2220_set_selectable)
HXLINE(2222)		bool _hx_tmp;
HXDLIN(2222)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2222)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(2222)			_hx_tmp = false;
            		}
HXDLIN(2222)		if (_hx_tmp) {
HXLINE(2224)			bool _hx_tmp1;
HXDLIN(2224)			if (hx::IsNotNull( this->stage )) {
HXLINE(2224)				_hx_tmp1 = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2224)				_hx_tmp1 = false;
            			}
HXDLIN(2224)			if (_hx_tmp1) {
HXLINE(2226)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2228)				if (!(value)) {
HXLINE(2230)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2236)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2243_get_selectionBeginIndex)
HXDLIN(2243)		return ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2250_get_selectionEndIndex)
HXDLIN(2250)		return ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2257_get_sharpness)
HXDLIN(2257)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2262_set_sharpness)
HXLINE(2264)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(2266)			this->_hx___dirty = true;
HXLINE(2267)			if (!(this->_hx___renderDirty)) {
HXLINE(2267)				this->_hx___renderDirty = true;
HXDLIN(2267)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2271)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

bool TextField_obj::get_tabEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2278_get_tabEnabled)
HXDLIN(2278)		if (hx::IsNull( this->_hx___tabEnabled )) {
HXDLIN(2278)			return hx::IsEq( this->_hx___textEngine->type,(int)1 );
            		}
            		else {
HXDLIN(2278)			return this->_hx___tabEnabled;
            		}
HXDLIN(2278)		return false;
            	}


::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2285_get_text)
HXDLIN(2285)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2290_set_text)
HXLINE(2292)		bool _hx_tmp;
HXDLIN(2292)		if (!(this->_hx___isHTML)) {
HXLINE(2292)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2292)			_hx_tmp = true;
            		}
HXDLIN(2292)		if (_hx_tmp) {
HXLINE(2294)			this->_hx___dirty = true;
HXLINE(2295)			this->_hx___layoutDirty = true;
HXLINE(2296)			if (!(this->_hx___renderDirty)) {
HXLINE(2296)				this->_hx___renderDirty = true;
HXDLIN(2296)				this->_hx___setParentRenderDirty();
            			}
            		}
            		else {
HXLINE(2300)			return value;
            		}
HXLINE(2304)		if ((::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data) > (int)1)) {
HXLINE(2306)			 ::openfl::_Vector::AbstractVector this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2306)			int len = (::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data) - (int)1);
HXDLIN(2306)			 ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::splice(this1->data,(int)1,len),null());
            		}
HXLINE(2310)		::String utfValue = value;
HXLINE(2311)		 ::openfl::_internal::text::TextFormatRange range = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this->_hx___textEngine->textFormatRanges->data,(int)0)) );
HXLINE(2312)		range->format = this->_hx___textFormat;
HXLINE(2313)		range->start = (int)0;
HXLINE(2314)		range->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(utfValue);
HXLINE(2316)		this->_hx___isHTML = false;
HXLINE(2318)		this->_hx___updateText(value);
HXLINE(2320)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2327_get_textColor)
HXDLIN(2327)		return this->_hx___textFormat->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2332_set_textColor)
HXLINE(2334)		if (hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(2336)			this->_hx___dirty = true;
HXLINE(2337)			if (!(this->_hx___renderDirty)) {
HXLINE(2337)				this->_hx___renderDirty = true;
HXDLIN(2337)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2341)		{
HXLINE(2341)			int _g = (int)0;
HXDLIN(2341)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2341)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE(2341)				 ::openfl::_internal::text::TextFormatRange range = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN(2341)				_g = (_g + (int)1);
HXLINE(2343)				range->format->color = value;
            			}
            		}
HXLINE(2347)		return (this->_hx___textFormat->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2351_get_textWidth)
HXLINE(2353)		this->_hx___updateLayout();
HXLINE(2354)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2359_get_textHeight)
HXLINE(2361)		this->_hx___updateLayout();
HXLINE(2362)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2369_get_type)
HXDLIN(2369)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2374_set_type)
HXLINE(2376)		if (hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(2378)			if (hx::IsEq( value,(int)1 )) {
HXLINE(2380)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(2382)				this->this_onFocusIn(null());
HXLINE(2383)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(2387)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(2389)				this->_hx___stopTextInput();
HXLINE(2390)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(2394)			this->_hx___dirty = true;
HXLINE(2395)			if (!(this->_hx___renderDirty)) {
HXLINE(2395)				this->_hx___renderDirty = true;
HXDLIN(2395)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2399)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2404_get_width)
HXLINE(2406)		this->_hx___updateLayout();
HXLINE(2407)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(2407)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2412_set_width)
HXLINE(2414)		if ((value != this->_hx___textEngine->width)) {
HXLINE(2416)			this->_hx___setTransformDirty();
HXLINE(2417)			this->_hx___dirty = true;
HXLINE(2418)			this->_hx___layoutDirty = true;
HXLINE(2419)			if (!(this->_hx___renderDirty)) {
HXLINE(2419)				this->_hx___renderDirty = true;
HXDLIN(2419)				this->_hx___setParentRenderDirty();
            			}
HXLINE(2421)			this->_hx___textEngine->width = value;
            		}
HXLINE(2425)		Float _hx_tmp = this->_hx___textEngine->width;
HXDLIN(2425)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2432_get_wordWrap)
HXDLIN(2432)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2437_set_wordWrap)
HXLINE(2439)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(2441)			this->_hx___dirty = true;
HXLINE(2442)			this->_hx___layoutDirty = true;
HXLINE(2443)			if (!(this->_hx___renderDirty)) {
HXLINE(2443)				this->_hx___renderDirty = true;
HXDLIN(2443)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2447)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2459_stage_onMouseMove)
HXLINE(2461)		if (hx::IsNull( this->stage )) {
HXLINE(2461)			return;
            		}
HXLINE(2463)		bool _hx_tmp;
HXDLIN(2463)		if (this->_hx___textEngine->selectable) {
HXLINE(2463)			_hx_tmp = (this->_hx___selectionIndex >= (int)0);
            		}
            		else {
HXLINE(2463)			_hx_tmp = false;
            		}
HXDLIN(2463)		if (_hx_tmp) {
HXLINE(2465)			this->_hx___updateLayout();
HXLINE(2467)			Float position = this->get_mouseX();
HXDLIN(2467)			Float position1 = (position + this->get_scrollH());
HXDLIN(2467)			int position2 = this->_hx___getPosition(position1,this->get_mouseY());
HXLINE(2469)			if ((position2 != this->_hx___caretIndex)) {
HXLINE(2471)				this->_hx___caretIndex = position2;
HXLINE(2479)				{
HXLINE(2481)					this->_hx___dirty = true;
HXLINE(2482)					if (!(this->_hx___renderDirty)) {
HXLINE(2482)						this->_hx___renderDirty = true;
HXDLIN(2482)						this->_hx___setParentRenderDirty();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2493_stage_onMouseUp)
HXLINE(2495)		if (hx::IsNull( this->stage )) {
HXLINE(2495)			return;
            		}
HXLINE(2497)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(2498)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(2500)		if (hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2502)			this->_hx___getWorldTransform();
HXLINE(2503)			this->_hx___updateLayout();
HXLINE(2505)			 ::openfl::geom::Matrix _this = this->_hx___worldTransform;
HXDLIN(2505)			Float px = this->get_x();
HXDLIN(2505)			Float py = this->get_y();
HXDLIN(2505)			Float norm = (_this->a * _this->d);
HXDLIN(2505)			Float norm1 = (norm - (_this->b * _this->c));
HXDLIN(2505)			Float px1;
HXDLIN(2505)			if ((norm1 == (int)0)) {
HXLINE(2505)				px1 = -(_this->tx);
            			}
            			else {
HXLINE(2505)				Float _this1 = _this->c;
HXDLIN(2505)				Float px2 = (_this1 * (_this->ty - py));
HXDLIN(2505)				Float _this2 = _this->d;
HXDLIN(2505)				px1 = (((Float)((Float)1.0) / (Float)norm1) * (px2 + (_this2 * (px - _this->tx))));
            			}
HXLINE(2506)			 ::openfl::geom::Matrix _this3 = this->_hx___worldTransform;
HXDLIN(2506)			Float px3 = this->get_x();
HXDLIN(2506)			Float py1 = this->get_y();
HXDLIN(2506)			Float norm2 = (_this3->a * _this3->d);
HXDLIN(2506)			Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN(2506)			Float py2;
HXDLIN(2506)			if ((norm3 == (int)0)) {
HXLINE(2506)				py2 = -(_this3->ty);
            			}
            			else {
HXLINE(2506)				Float _this4 = _this3->a;
HXDLIN(2506)				Float py3 = (_this4 * (py1 - _this3->ty));
HXDLIN(2506)				Float _this5 = _this3->b;
HXDLIN(2506)				py2 = (((Float)((Float)1.0) / (Float)norm3) * (py3 + (_this5 * (_this3->tx - px3))));
            			}
HXLINE(2508)			Float upPos = this->get_mouseX();
HXDLIN(2508)			Float upPos1 = (upPos + this->get_scrollH());
HXDLIN(2508)			int upPos2 = this->_hx___getPosition(upPos1,this->get_mouseY());
HXLINE(2509)			int leftPos;
HXLINE(2510)			int rightPos;
HXLINE(2512)			leftPos = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___selectionIndex,upPos2));
HXLINE(2513)			rightPos = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___selectionIndex,upPos2));
HXLINE(2515)			this->_hx___selectionIndex = leftPos;
HXLINE(2516)			this->_hx___caretIndex = rightPos;
HXLINE(2518)			if (this->_hx___inputEnabled) {
HXLINE(2520)				this->this_onFocusIn(null());
HXLINE(2522)				this->_hx___stopCursorTimer();
HXLINE(2523)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2540_this_onAddedToStage)
HXDLIN(2540)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2547_this_onFocusIn)
HXDLIN(2547)		bool _hx_tmp;
HXDLIN(2547)		bool _hx_tmp1;
HXDLIN(2547)		bool _hx_tmp2;
HXDLIN(2547)		if (this->get_selectable()) {
HXDLIN(2547)			_hx_tmp2 = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXDLIN(2547)			_hx_tmp2 = false;
            		}
HXDLIN(2547)		if (_hx_tmp2) {
HXDLIN(2547)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXDLIN(2547)			_hx_tmp1 = false;
            		}
HXDLIN(2547)		if (_hx_tmp1) {
HXDLIN(2547)			_hx_tmp = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN(2547)			_hx_tmp = false;
            		}
HXDLIN(2547)		if (_hx_tmp) {
HXLINE(2549)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2556_this_onFocusOut)
HXLINE(2558)		this->_hx___stopCursorTimer();
HXLINE(2562)		bool _hx_tmp;
HXDLIN(2562)		if (hx::IsNotNull( event->relatedObject )) {
HXLINE(2562)			_hx_tmp = !(::Std_obj::is(event->relatedObject,hx::ClassOf< ::openfl::text::TextField >()));
            		}
            		else {
HXLINE(2562)			_hx_tmp = true;
            		}
HXDLIN(2562)		if (_hx_tmp) {
HXLINE(2564)			this->_hx___stopTextInput();
            		}
            		else {
HXLINE(2568)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(2569)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(2570)			this->_hx___inputEnabled = false;
            		}
HXLINE(2574)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2576)			this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2577)			this->_hx___dirty = true;
HXLINE(2578)			if (!(this->_hx___renderDirty)) {
HXLINE(2578)				this->_hx___renderDirty = true;
HXDLIN(2578)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onKeyDown( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2587_this_onKeyDown)
HXDLIN(2587)		bool _hx_tmp;
HXDLIN(2587)		bool _hx_tmp1;
HXDLIN(2587)		bool _hx_tmp2;
HXDLIN(2587)		if (this->get_selectable()) {
HXDLIN(2587)			_hx_tmp2 = hx::IsNotEq( this->get_type(),(int)1 );
            		}
            		else {
HXDLIN(2587)			_hx_tmp2 = false;
            		}
HXDLIN(2587)		if (_hx_tmp2) {
HXDLIN(2587)			_hx_tmp1 = (event->keyCode == (int)67);
            		}
            		else {
HXDLIN(2587)			_hx_tmp1 = false;
            		}
HXDLIN(2587)		if (_hx_tmp1) {
HXDLIN(2587)			if (!(event->commandKey)) {
HXDLIN(2587)				_hx_tmp = event->ctrlKey;
            			}
            			else {
HXDLIN(2587)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN(2587)			_hx_tmp = false;
            		}
HXDLIN(2587)		if (_hx_tmp) {
HXLINE(2589)			if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(2591)				::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onKeyDown,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2600_this_onMouseDown)
HXLINE(2602)		if (!(this->get_selectable())) {
HXLINE(2602)			return;
            		}
HXLINE(2604)		this->_hx___updateLayout();
HXLINE(2606)		Float _hx_tmp = this->get_mouseX();
HXDLIN(2606)		Float _hx_tmp1 = (_hx_tmp + this->get_scrollH());
HXDLIN(2606)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp1,this->get_mouseY());
HXLINE(2607)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2609)		{
HXLINE(2611)			this->_hx___dirty = true;
HXLINE(2612)			if (!(this->_hx___renderDirty)) {
HXLINE(2612)				this->_hx___renderDirty = true;
HXDLIN(2612)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE(2616)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(2617)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2624_window_onKeyDown)
HXDLIN(2624)		switch((int)(key)){
            			case (int)8: {
HXLINE(2637)				bool _hx_tmp;
HXDLIN(2637)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2637)					_hx_tmp = (this->_hx___caretIndex > (int)0);
            				}
            				else {
HXLINE(2637)					_hx_tmp = false;
            				}
HXDLIN(2637)				if (_hx_tmp) {
HXLINE(2639)					this->_hx___selectionIndex = (this->_hx___caretIndex - (int)1);
            				}
HXLINE(2643)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2645)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2646)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2648)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(2858)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2860)					this->_hx___caretIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
HXLINE(2861)					this->_hx___selectionIndex = (int)0;
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(2805)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2807)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(2809)						::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
            					}
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(2833)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2835)					::String text = ::lime::_hx_system::Clipboard_obj::get_text();
HXLINE(2837)					if (hx::IsNotNull( text )) {
HXLINE(2839)						this->replaceSelectedText(text);
            					}
            					else {
HXLINE(2843)						this->replaceSelectedText(HX_("",00,00,00,00));
            					}
HXLINE(2847)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(2851)					 ::openfl::_Vector::AbstractVector this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2851)					int index = (::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges->data) - (int)1);
HXDLIN(2851)					( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this1->data,index)) )->end = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text);
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(2817)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2819)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(2821)						::lime::_hx_system::Clipboard_obj::set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(this->_hx___text,this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(2823)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2824)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(2654)				bool _hx_tmp1;
HXDLIN(2654)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2654)					int _hx_tmp2 = this->_hx___caretIndex;
HXDLIN(2654)					_hx_tmp1 = (_hx_tmp2 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->_hx___text));
            				}
            				else {
HXLINE(2654)					_hx_tmp1 = false;
            				}
HXDLIN(2654)				if (_hx_tmp1) {
HXLINE(2656)					this->_hx___selectionIndex = (this->_hx___caretIndex + (int)1);
            				}
HXLINE(2660)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2662)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2663)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2665)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(2793)				this->_hx___caretBeginningOfLine();
HXLINE(2794)				this->_hx___stopCursorTimer();
HXLINE(2795)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741901: {
HXLINE(2799)				this->_hx___caretEndOfLine();
HXLINE(2800)				this->_hx___stopCursorTimer();
HXLINE(2801)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741903: {
HXLINE(2706)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2708)					this->_hx___caretEndOfLine();
HXLINE(2710)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2712)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2716)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2718)						this->_hx___caretNextCharacter();
            					}
            					else {
HXLINE(2722)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2724)							this->_hx___caretNextCharacter();
            						}
            						else {
HXLINE(2728)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2732)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2736)				this->_hx___stopCursorTimer();
HXLINE(2737)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741904: {
HXLINE(2671)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2673)					this->_hx___caretBeginningOfLine();
HXLINE(2675)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2677)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2681)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2683)						this->_hx___caretPreviousCharacter();
            					}
            					else {
HXLINE(2687)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2689)							this->_hx___caretPreviousCharacter();
            						}
            						else {
HXLINE(2693)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2697)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2701)				this->_hx___stopCursorTimer();
HXLINE(2702)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741905: {
HXLINE(2741)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2743)					this->_hx___caretNextLine(null(),null());
            				}
            				else {
HXLINE(2747)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2749)						this->_hx___caretNextLine(null(),null());
            					}
            					else {
HXLINE(2753)						int lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2754)						this->_hx___caretNextLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2758)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2762)				this->_hx___stopCursorTimer();
HXLINE(2763)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741906: {
HXLINE(2767)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2769)					this->_hx___caretPreviousLine(null(),null());
            				}
            				else {
HXLINE(2773)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2775)						this->_hx___caretPreviousLine(null(),null());
            					}
            					else {
HXLINE(2779)						int lineIndex1 = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2780)						this->_hx___caretPreviousLine(lineIndex1,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2784)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2788)				this->_hx___stopCursorTimer();
HXLINE(2789)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(2628)				if (this->_hx___textEngine->multiline) {
HXLINE(2630)					this->replaceSelectedText(HX_("\n",0a,00,00,00));
HXLINE(2631)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2872_window_onTextInput)
HXLINE(2874)		this->replaceSelectedText(value);
HXLINE(2876)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::haxe::ds::StringMap TextField_obj::_hx___missingFontWarning;


hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___htmlText,"__htmlText");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_type() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_border() ); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollH() ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scrollV() ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoSize() ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_htmlText() ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxChars() ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numLines() ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_restrict() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds ); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML ); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multiline() ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_sharpness() ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textColor() ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textWidth() ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_background() ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_caretIndex() ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_embedFonts() ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollH() ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_maxScrollV() ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectable() ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textHeight() ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { return hx::Val( _hx___htmlText ); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__dispatch") ) { return hx::Val( _hx___dispatch_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getGroup") ) { return hx::Val( _hx___getGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_borderColor() ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_gridFitType() ); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getAdvance") ) { return hx::Val( _hx___getAdvance_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return hx::Val( _hx___updateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_antiAliasType() ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottomScrollV() ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty ); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enableInput") ) { return hx::Val( _hx___enableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled ); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn() ); }
		if (HX_FIELD_EQ(inName,"__disableInput") ) { return hx::Val( _hx___disableInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return hx::Val( get_tabEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onKeyDown") ) { return hx::Val( this_onKeyDown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_backgroundColor() ); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return hx::Val( _hx___caretNextLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateScrollH") ) { return hx::Val( _hx___updateScrollH_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex ); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return hx::Val( _hx___caretEndOfLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_defaultTextFormat() ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_displayAsPassword() ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mouseWheelEnabled() ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionEndIndex() ); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"__allowMouseFocus") ) { return hx::Val( _hx___allowMouseFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return hx::Val( get_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn() ); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_selectionBeginIndex() ); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return hx::Val( _hx___displayAsPassword ); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return hx::Val( _hx___mouseWheelEnabled ); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn() ); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return hx::Val( _hx___caretPreviousLine_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return hx::Val( _hx___caretNextCharacter_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return hx::Val( get_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return hx::Val( set_mouseWheelEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return hx::Val( _hx___caretBeginningOfLine_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return hx::Val( _hx___caretPreviousCharacter_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return hx::Val( _hx___getCharIndexOnDifferentLine_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = ( _hx___defaultTextFormat ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { outValue = ( _hx___missingFontWarning ); return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::DynamicTextSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"__htmlText") ) { _hx___htmlText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue.Cast<  ::openfl::text::TextFormat >()) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mouseWheelEnabled(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__missingFontWarning") ) { _hx___missingFontWarning=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("defaultTextFormat","\xe5","\xc7","\xe0","\x0a"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("htmlText","\xb8","\x1f","\x38","\x10"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("mouseWheelEnabled","\xeb","\x16","\x54","\x65"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"));
	outFields->push(HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"));
	outFields->push(HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"));
	outFields->push(HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"));
	outFields->push(HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"));
	outFields->push(HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"));
	outFields->push(HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(TextField_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::_internal::symbols::DynamicTextSymbol*/ ,(int)offsetof(TextField_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___htmlText),HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3")},
	{hx::fsObject /*::openfl::_internal::text::TextEngine*/ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextField_obj::_hx___missingFontWarning,HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"),
	HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"),
	HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"),
	HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"),
	HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"),
	HX_HCSTRING("__htmlText","\xd8","\x92","\x70","\xb3"),
	HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("appendText","\xa7","\xcf","\x05","\x5b"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("getFirstCharInParagraph","\xf9","\x5c","\x3d","\x08"),
	HX_HCSTRING("getLineIndexAtPoint","\x35","\xdc","\x50","\x98"),
	HX_HCSTRING("getLineIndexOfChar","\xb5","\x68","\x99","\xa1"),
	HX_HCSTRING("getLineLength","\x30","\xec","\x21","\xd0"),
	HX_HCSTRING("getLineMetrics","\xb9","\xab","\xc6","\xf2"),
	HX_HCSTRING("getLineOffset","\xdd","\xee","\x59","\x91"),
	HX_HCSTRING("getLineText","\x77","\xdd","\x16","\xb0"),
	HX_HCSTRING("getParagraphLength","\xfe","\x0e","\x4e","\xc4"),
	HX_HCSTRING("getTextFormat","\xfa","\x6b","\xf1","\x90"),
	HX_HCSTRING("replaceSelectedText","\xfc","\xfe","\x33","\xbb"),
	HX_HCSTRING("replaceText","\x01","\x6b","\x95","\x61"),
	HX_HCSTRING("setSelection","\x4a","\xb8","\x6a","\xb2"),
	HX_HCSTRING("setTextFormat","\x06","\x4e","\xf7","\xd5"),
	HX_HCSTRING("__allowMouseFocus","\x3c","\x92","\x71","\x07"),
	HX_HCSTRING("__caretBeginningOfLine","\x45","\xc9","\x47","\xfd"),
	HX_HCSTRING("__caretEndOfLine","\x03","\x74","\xb1","\x5c"),
	HX_HCSTRING("__caretNextCharacter","\xd3","\x7b","\x4f","\xea"),
	HX_HCSTRING("__caretNextLine","\x0a","\x68","\xad","\x0d"),
	HX_HCSTRING("__caretPreviousCharacter","\x8f","\xce","\x6c","\x11"),
	HX_HCSTRING("__caretPreviousLine","\xce","\x0e","\x89","\x48"),
	HX_HCSTRING("__disableInput","\x22","\x64","\x62","\x1d"),
	HX_HCSTRING("__dispatch","\xda","\x41","\x9c","\xc1"),
	HX_HCSTRING("__enableInput","\x67","\x4b","\x65","\xd1"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getAdvance","\xac","\x09","\x01","\x77"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCharIndexOnDifferentLine","\x08","\x76","\x0f","\x0a"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getGroup","\xe9","\x35","\x04","\x9d"),
	HX_HCSTRING("__getPosition","\x3f","\xa4","\x66","\x39"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__startCursorTimer","\xed","\x46","\xa3","\x83"),
	HX_HCSTRING("__startTextInput","\x7b","\xae","\x85","\xaa"),
	HX_HCSTRING("__stopCursorTimer","\x0d","\xcd","\x6c","\x26"),
	HX_HCSTRING("__stopTextInput","\x9b","\x6c","\xcb","\xa1"),
	HX_HCSTRING("__updateLayout","\xb3","\xd8","\x3c","\x79"),
	HX_HCSTRING("__updateScrollH","\x72","\xd1","\xf8","\x83"),
	HX_HCSTRING("__updateText","\x76","\x32","\x42","\x3e"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_antiAliasType","\xbf","\xcf","\x6a","\xee"),
	HX_HCSTRING("set_antiAliasType","\xcb","\xa7","\xd8","\x11"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_borderColor","\x6e","\xf4","\xb6","\x97"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_cacheAsBitmap","\x3a","\x8e","\x7f","\x70"),
	HX_HCSTRING("get_caretIndex","\xd8","\x3e","\x51","\x53"),
	HX_HCSTRING("get_defaultTextFormat","\xbc","\xca","\x8e","\x89"),
	HX_HCSTRING("set_defaultTextFormat","\xc8","\x98","\x97","\xdd"),
	HX_HCSTRING("get_displayAsPassword","\xe6","\xcd","\x44","\x69"),
	HX_HCSTRING("set_displayAsPassword","\xf2","\x9b","\x4d","\xbd"),
	HX_HCSTRING("get_embedFonts","\x74","\x4f","\xd7","\x04"),
	HX_HCSTRING("set_embedFonts","\xe8","\x37","\xf7","\x24"),
	HX_HCSTRING("get_gridFitType","\x9c","\xaa","\xf5","\x74"),
	HX_HCSTRING("set_gridFitType","\xa8","\x27","\xc1","\x70"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_htmlText","\xc1","\xd3","\x51","\xc5"),
	HX_HCSTRING("set_htmlText","\x35","\xf7","\x4a","\xda"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxChars","\xa2","\xa3","\xea","\xa4"),
	HX_HCSTRING("set_maxChars","\x16","\xc7","\xe3","\xb9"),
	HX_HCSTRING("get_maxScrollH","\xa0","\x35","\xf2","\x10"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("get_mouseWheelEnabled","\xc2","\x19","\x02","\xe4"),
	HX_HCSTRING("set_mouseWheelEnabled","\xce","\xe7","\x0a","\x38"),
	HX_HCSTRING("get_multiline","\xc4","\xa6","\x75","\x5f"),
	HX_HCSTRING("set_multiline","\xd0","\x88","\x7b","\xa4"),
	HX_HCSTRING("get_numLines","\xe2","\xa5","\x2b","\xe7"),
	HX_HCSTRING("get_restrict","\x45","\x7f","\xb8","\xa6"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollH","\xb2","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollH","\xbe","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_selectable","\xdf","\x3e","\x20","\x3a"),
	HX_HCSTRING("set_selectable","\x53","\x27","\x40","\x5a"),
	HX_HCSTRING("get_selectionBeginIndex","\x2c","\x26","\x6d","\xdf"),
	HX_HCSTRING("get_selectionEndIndex","\x7a","\x10","\xf0","\xc9"),
	HX_HCSTRING("get_sharpness","\x58","\xf6","\x88","\xdc"),
	HX_HCSTRING("set_sharpness","\x64","\xd8","\x8e","\x21"),
	HX_HCSTRING("get_tabEnabled","\xf5","\x7e","\xfe","\xb5"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_textColor","\x4d","\xd5","\xad","\xa4"),
	HX_HCSTRING("set_textColor","\x59","\xb7","\xb3","\xe9"),
	HX_HCSTRING("get_textWidth","\xf0","\x19","\xb4","\x24"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("stage_onMouseMove","\x76","\xbc","\x61","\xde"),
	HX_HCSTRING("stage_onMouseUp","\x80","\xac","\x07","\xd1"),
	HX_HCSTRING("this_onAddedToStage","\x23","\x9e","\xce","\x72"),
	HX_HCSTRING("this_onFocusIn","\x1d","\x62","\xfb","\xdc"),
	HX_HCSTRING("this_onFocusOut","\x56","\x0b","\xff","\x7e"),
	HX_HCSTRING("this_onKeyDown","\xe1","\x85","\xbf","\x37"),
	HX_HCSTRING("this_onMouseDown","\x67","\x5d","\xaa","\x6d"),
	HX_HCSTRING("window_onKeyDown","\xf3","\x7d","\x3b","\xd1"),
	HX_HCSTRING("window_onTextInput","\xef","\xa0","\x6a","\xc0"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___missingFontWarning,"__missingFontWarning");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd"),
	HX_HCSTRING("__missingFontWarning","\xa7","\x0d","\x0e","\x1a"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Object *dummy = new TextField_obj;
	TextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.TextField","\xca","\xa8","\xd5","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_61_boot)
HXDLIN(  61)		_hx___missingFontWarning =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace text
