// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLTextureBase
#include <openfl/_internal/stage3D/opengl/GLTextureBase.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6659164148434b5e_42_new,"openfl.display3D.textures.TextureBase","new",0x670078a1,"openfl.display3D.textures.TextureBase.new","openfl/display3D/textures/TextureBase.hx",42,0x7b0f92ae)
HX_LOCAL_STACK_FRAME(_hx_pos_6659164148434b5e_59_dispose,"openfl.display3D.textures.TextureBase","dispose",0xa678dd60,"openfl.display3D.textures.TextureBase.dispose","openfl/display3D/textures/TextureBase.hx",59,0x7b0f92ae)
HX_LOCAL_STACK_FRAME(_hx_pos_6659164148434b5e_66___getImage,"openfl.display3D.textures.TextureBase","__getImage",0x67fff3e4,"openfl.display3D.textures.TextureBase.__getImage","openfl/display3D/textures/TextureBase.hx",66,0x7b0f92ae)
HX_LOCAL_STACK_FRAME(_hx_pos_6659164148434b5e_73___getTexture,"openfl.display3D.textures.TextureBase","__getTexture",0x3c3c91a4,"openfl.display3D.textures.TextureBase.__getTexture","openfl/display3D/textures/TextureBase.hx",73,0x7b0f92ae)
HX_LOCAL_STACK_FRAME(_hx_pos_6659164148434b5e_80___setSamplerState,"openfl.display3D.textures.TextureBase","__setSamplerState",0x8e361f8c,"openfl.display3D.textures.TextureBase.__setSamplerState","openfl/display3D/textures/TextureBase.hx",80,0x7b0f92ae)
namespace openfl{
namespace display3D{
namespace textures{

void TextureBase_obj::__construct( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_42_new)
HXLINE(  44)		super::__construct(null());
HXLINE(  46)		this->_hx___context = context;
HXLINE(  49)		::openfl::_internal::stage3D::opengl::GLTextureBase_obj::create(hx::ObjectPtr<OBJ_>(this),this->_hx___context->_hx___renderSession);
            	}

Dynamic TextureBase_obj::__CreateEmpty() { return new TextureBase_obj; }

void *TextureBase_obj::_hx_vtable = 0;

Dynamic TextureBase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextureBase_obj > _hx_result = new TextureBase_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextureBase_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19affbf1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19affbf1;
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

void TextureBase_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_59_dispose)
HXDLIN(  59)		::openfl::_internal::stage3D::opengl::GLTextureBase_obj::dispose(hx::ObjectPtr<OBJ_>(this),this->_hx___context->_hx___renderSession);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureBase_obj,dispose,(void))

 ::lime::graphics::Image TextureBase_obj::_hx___getImage( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_66___getImage)
HXDLIN(  66)		return ::openfl::_internal::stage3D::opengl::GLTextureBase_obj::getImage(hx::ObjectPtr<OBJ_>(this),this->_hx___context->_hx___renderSession,bitmapData);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureBase_obj,_hx___getImage,return )

 ::lime::graphics::opengl::GLObject TextureBase_obj::_hx___getTexture(){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_73___getTexture)
HXDLIN(  73)		return this->_hx___textureID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureBase_obj,_hx___getTexture,return )

void TextureBase_obj::_hx___setSamplerState( ::openfl::_internal::stage3D::SamplerState state){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_80___setSamplerState)
HXDLIN(  80)		::openfl::_internal::stage3D::opengl::GLTextureBase_obj::setSamplerState(hx::ObjectPtr<OBJ_>(this),this->_hx___context->_hx___renderSession,state);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureBase_obj,_hx___setSamplerState,(void))


hx::ObjectPtr< TextureBase_obj > TextureBase_obj::__new( ::openfl::display3D::Context3D context) {
	hx::ObjectPtr< TextureBase_obj > __this = new TextureBase_obj();
	__this->__construct(context);
	return __this;
}

hx::ObjectPtr< TextureBase_obj > TextureBase_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context) {
	TextureBase_obj *__this = (TextureBase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextureBase_obj), true, "openfl.display3D.textures.TextureBase"));
	*(void **)__this = TextureBase_obj::_hx_vtable;
	__this->__construct(context);
	return __this;
}

TextureBase_obj::TextureBase_obj()
{
}

void TextureBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextureBase);
	HX_MARK_MEMBER_NAME(_hx___alphaTexture,"__alphaTexture");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___format,"__format");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___internalFormat,"__internalFormat");
	HX_MARK_MEMBER_NAME(_hx___optimizeForRenderToTexture,"__optimizeForRenderToTexture");
	HX_MARK_MEMBER_NAME(_hx___samplerState,"__samplerState");
	HX_MARK_MEMBER_NAME(_hx___streamingLevels,"__streamingLevels");
	HX_MARK_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_MARK_MEMBER_NAME(_hx___textureID,"__textureID");
	HX_MARK_MEMBER_NAME(_hx___textureTarget,"__textureTarget");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextureBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___alphaTexture,"__alphaTexture");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___format,"__format");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___internalFormat,"__internalFormat");
	HX_VISIT_MEMBER_NAME(_hx___optimizeForRenderToTexture,"__optimizeForRenderToTexture");
	HX_VISIT_MEMBER_NAME(_hx___samplerState,"__samplerState");
	HX_VISIT_MEMBER_NAME(_hx___streamingLevels,"__streamingLevels");
	HX_VISIT_MEMBER_NAME(_hx___textureContext,"__textureContext");
	HX_VISIT_MEMBER_NAME(_hx___textureID,"__textureID");
	HX_VISIT_MEMBER_NAME(_hx___textureTarget,"__textureTarget");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextureBase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__format") ) { return hx::Val( _hx___format ); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__getImage") ) { return hx::Val( _hx___getImage_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__textureID") ) { return hx::Val( _hx___textureID ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__getTexture") ) { return hx::Val( _hx___getTexture_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__alphaTexture") ) { return hx::Val( _hx___alphaTexture ); }
		if (HX_FIELD_EQ(inName,"__samplerState") ) { return hx::Val( _hx___samplerState ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureTarget") ) { return hx::Val( _hx___textureTarget ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__internalFormat") ) { return hx::Val( _hx___internalFormat ); }
		if (HX_FIELD_EQ(inName,"__textureContext") ) { return hx::Val( _hx___textureContext ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__streamingLevels") ) { return hx::Val( _hx___streamingLevels ); }
		if (HX_FIELD_EQ(inName,"__setSamplerState") ) { return hx::Val( _hx___setSamplerState_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__optimizeForRenderToTexture") ) { return hx::Val( _hx___optimizeForRenderToTexture ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextureBase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__format") ) { _hx___format=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__textureID") ) { _hx___textureID=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__alphaTexture") ) { _hx___alphaTexture=inValue.Cast<  ::openfl::display3D::textures::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerState") ) { _hx___samplerState=inValue.Cast<  ::openfl::_internal::stage3D::SamplerState >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureTarget") ) { _hx___textureTarget=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__internalFormat") ) { _hx___internalFormat=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureContext") ) { _hx___textureContext=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__streamingLevels") ) { _hx___streamingLevels=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__optimizeForRenderToTexture") ) { _hx___optimizeForRenderToTexture=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextureBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__alphaTexture","\x3d","\x94","\x14","\x53"));
	outFields->push(HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"));
	outFields->push(HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__internalFormat","\x74","\x81","\xbd","\x56"));
	outFields->push(HX_HCSTRING("__optimizeForRenderToTexture","\xbe","\xd4","\x90","\xb3"));
	outFields->push(HX_HCSTRING("__samplerState","\x09","\x67","\x80","\xdc"));
	outFields->push(HX_HCSTRING("__streamingLevels","\x51","\xa1","\xde","\x07"));
	outFields->push(HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f"));
	outFields->push(HX_HCSTRING("__textureID","\x56","\x7e","\x75","\xdd"));
	outFields->push(HX_HCSTRING("__textureTarget","\x6c","\xff","\xb6","\xa1"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextureBase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::textures::Texture*/ ,(int)offsetof(TextureBase_obj,_hx___alphaTexture),HX_HCSTRING("__alphaTexture","\x3d","\x94","\x14","\x53")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(TextureBase_obj,_hx___context),HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___format),HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___internalFormat),HX_HCSTRING("__internalFormat","\x74","\x81","\xbd","\x56")},
	{hx::fsBool,(int)offsetof(TextureBase_obj,_hx___optimizeForRenderToTexture),HX_HCSTRING("__optimizeForRenderToTexture","\xbe","\xd4","\x90","\xb3")},
	{hx::fsObject /*::openfl::_internal::stage3D::SamplerState*/ ,(int)offsetof(TextureBase_obj,_hx___samplerState),HX_HCSTRING("__samplerState","\x09","\x67","\x80","\xdc")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___streamingLevels),HX_HCSTRING("__streamingLevels","\x51","\xa1","\xde","\x07")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(TextureBase_obj,_hx___textureContext),HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(TextureBase_obj,_hx___textureID),HX_HCSTRING("__textureID","\x56","\x7e","\x75","\xdd")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___textureTarget),HX_HCSTRING("__textureTarget","\x6c","\xff","\xb6","\xa1")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextureBase_obj_sStaticStorageInfo = 0;
#endif

static ::String TextureBase_obj_sMemberFields[] = {
	HX_HCSTRING("__alphaTexture","\x3d","\x94","\x14","\x53"),
	HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"),
	HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__internalFormat","\x74","\x81","\xbd","\x56"),
	HX_HCSTRING("__optimizeForRenderToTexture","\xbe","\xd4","\x90","\xb3"),
	HX_HCSTRING("__samplerState","\x09","\x67","\x80","\xdc"),
	HX_HCSTRING("__streamingLevels","\x51","\xa1","\xde","\x07"),
	HX_HCSTRING("__textureContext","\x74","\x21","\x78","\x6f"),
	HX_HCSTRING("__textureID","\x56","\x7e","\x75","\xdd"),
	HX_HCSTRING("__textureTarget","\x6c","\xff","\xb6","\xa1"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("__getImage","\x05","\xa2","\x78","\xc0"),
	HX_HCSTRING("__getTexture","\x05","\xca","\xd5","\x26"),
	HX_HCSTRING("__setSamplerState","\x8b","\xe7","\xcf","\x5d"),
	::String(null()) };

static void TextureBase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextureBase_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextureBase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextureBase_obj::__mClass,"__mClass");
};

#endif

hx::Class TextureBase_obj::__mClass;

void TextureBase_obj::__register()
{
	hx::Object *dummy = new TextureBase_obj;
	TextureBase_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.textures.TextureBase","\x2f","\x94","\x15","\xbc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextureBase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextureBase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextureBase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextureBase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureBase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
} // end namespace textures
