// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequestDefaults
#include <openfl/net/URLRequestDefaults.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequestHeader
#include <openfl/net/URLRequestHeader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d7a2132659cec934_19_new,"openfl.net.URLRequest","new",0xe13767c1,"openfl.net.URLRequest.new","openfl/net/URLRequest.hx",19,0xe997cd0d)
namespace openfl{
namespace net{

void URLRequest_obj::__construct(::String url){
            	HX_STACKFRAME(&_hx_pos_d7a2132659cec934_19_new)
HXLINE(  21)		if (hx::IsNotNull( url )) {
HXLINE(  23)			this->url = url;
            		}
HXLINE(  27)		this->contentType = null();
HXLINE(  28)		this->followRedirects = ::openfl::net::URLRequestDefaults_obj::followRedirects;
HXLINE(  29)		Float _hx_tmp;
HXDLIN(  29)		if ((::openfl::net::URLRequestDefaults_obj::idleTimeout > (int)0)) {
HXLINE(  29)			_hx_tmp = ::openfl::net::URLRequestDefaults_obj::idleTimeout;
            		}
            		else {
HXLINE(  29)			_hx_tmp = (int)30000;
            		}
HXDLIN(  29)		this->idleTimeout = _hx_tmp;
HXLINE(  30)		this->manageCookies = ::openfl::net::URLRequestDefaults_obj::manageCookies;
HXLINE(  31)		this->method = HX_("GET",76,1c,36,00);
HXLINE(  32)		this->requestHeaders = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  33)		this->userAgent = ::openfl::net::URLRequestDefaults_obj::userAgent;
            	}

Dynamic URLRequest_obj::__CreateEmpty() { return new URLRequest_obj; }

void *URLRequest_obj::_hx_vtable = 0;

Dynamic URLRequest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< URLRequest_obj > _hx_result = new URLRequest_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool URLRequest_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2d927a45;
}


hx::ObjectPtr< URLRequest_obj > URLRequest_obj::__new(::String url) {
	hx::ObjectPtr< URLRequest_obj > __this = new URLRequest_obj();
	__this->__construct(url);
	return __this;
}

hx::ObjectPtr< URLRequest_obj > URLRequest_obj::__alloc(hx::Ctx *_hx_ctx,::String url) {
	URLRequest_obj *__this = (URLRequest_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(URLRequest_obj), true, "openfl.net.URLRequest"));
	*(void **)__this = URLRequest_obj::_hx_vtable;
	__this->__construct(url);
	return __this;
}

URLRequest_obj::URLRequest_obj()
{
}

void URLRequest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(URLRequest);
	HX_MARK_MEMBER_NAME(contentType,"contentType");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(followRedirects,"followRedirects");
	HX_MARK_MEMBER_NAME(idleTimeout,"idleTimeout");
	HX_MARK_MEMBER_NAME(manageCookies,"manageCookies");
	HX_MARK_MEMBER_NAME(method,"method");
	HX_MARK_MEMBER_NAME(requestHeaders,"requestHeaders");
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(userAgent,"userAgent");
	HX_MARK_END_CLASS();
}

void URLRequest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(contentType,"contentType");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(followRedirects,"followRedirects");
	HX_VISIT_MEMBER_NAME(idleTimeout,"idleTimeout");
	HX_VISIT_MEMBER_NAME(manageCookies,"manageCookies");
	HX_VISIT_MEMBER_NAME(method,"method");
	HX_VISIT_MEMBER_NAME(requestHeaders,"requestHeaders");
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(userAgent,"userAgent");
}

hx::Val URLRequest_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { return hx::Val( method ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"userAgent") ) { return hx::Val( userAgent ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contentType") ) { return hx::Val( contentType ); }
		if (HX_FIELD_EQ(inName,"idleTimeout") ) { return hx::Val( idleTimeout ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"manageCookies") ) { return hx::Val( manageCookies ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"requestHeaders") ) { return hx::Val( requestHeaders ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"followRedirects") ) { return hx::Val( followRedirects ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val URLRequest_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { method=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"userAgent") ) { userAgent=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contentType") ) { contentType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleTimeout") ) { idleTimeout=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"manageCookies") ) { manageCookies=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"requestHeaders") ) { requestHeaders=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"followRedirects") ) { followRedirects=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void URLRequest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("contentType","\x93","\x3c","\x7b","\x2a"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("followRedirects","\x26","\x5a","\x40","\x75"));
	outFields->push(HX_HCSTRING("idleTimeout","\xed","\x65","\x58","\x2d"));
	outFields->push(HX_HCSTRING("manageCookies","\x6a","\x1f","\x8f","\xbc"));
	outFields->push(HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09"));
	outFields->push(HX_HCSTRING("requestHeaders","\xb7","\xb2","\x4f","\xdc"));
	outFields->push(HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"));
	outFields->push(HX_HCSTRING("userAgent","\x7a","\xf0","\x12","\xc8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo URLRequest_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(URLRequest_obj,contentType),HX_HCSTRING("contentType","\x93","\x3c","\x7b","\x2a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(URLRequest_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsBool,(int)offsetof(URLRequest_obj,followRedirects),HX_HCSTRING("followRedirects","\x26","\x5a","\x40","\x75")},
	{hx::fsFloat,(int)offsetof(URLRequest_obj,idleTimeout),HX_HCSTRING("idleTimeout","\xed","\x65","\x58","\x2d")},
	{hx::fsBool,(int)offsetof(URLRequest_obj,manageCookies),HX_HCSTRING("manageCookies","\x6a","\x1f","\x8f","\xbc")},
	{hx::fsString,(int)offsetof(URLRequest_obj,method),HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(URLRequest_obj,requestHeaders),HX_HCSTRING("requestHeaders","\xb7","\xb2","\x4f","\xdc")},
	{hx::fsString,(int)offsetof(URLRequest_obj,url),HX_HCSTRING("url","\x6f","\x2b","\x59","\x00")},
	{hx::fsString,(int)offsetof(URLRequest_obj,userAgent),HX_HCSTRING("userAgent","\x7a","\xf0","\x12","\xc8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *URLRequest_obj_sStaticStorageInfo = 0;
#endif

static ::String URLRequest_obj_sMemberFields[] = {
	HX_HCSTRING("contentType","\x93","\x3c","\x7b","\x2a"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("followRedirects","\x26","\x5a","\x40","\x75"),
	HX_HCSTRING("idleTimeout","\xed","\x65","\x58","\x2d"),
	HX_HCSTRING("manageCookies","\x6a","\x1f","\x8f","\xbc"),
	HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09"),
	HX_HCSTRING("requestHeaders","\xb7","\xb2","\x4f","\xdc"),
	HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"),
	HX_HCSTRING("userAgent","\x7a","\xf0","\x12","\xc8"),
	::String(null()) };

static void URLRequest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(URLRequest_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void URLRequest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(URLRequest_obj::__mClass,"__mClass");
};

#endif

hx::Class URLRequest_obj::__mClass;

void URLRequest_obj::__register()
{
	hx::Object *dummy = new URLRequest_obj;
	URLRequest_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.net.URLRequest","\x4f","\x73","\x1e","\xca");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = URLRequest_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(URLRequest_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< URLRequest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = URLRequest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = URLRequest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = URLRequest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace net
