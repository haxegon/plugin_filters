// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLMaskShader
#include <openfl/_internal/renderer/opengl/GLMaskShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bd52279317ecd192_278_new,"openfl._internal.renderer.opengl.GLMaskShader","new",0xf6bb608c,"openfl._internal.renderer.opengl.GLMaskShader.new","openfl/_internal/renderer/opengl/GLMaskManager.hx",278,0x0550a1c8)
namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLMaskShader_obj::__construct( ::openfl::utils::ByteArrayData code){
            	HX_STACKFRAME(&_hx_pos_bd52279317ecd192_278_new)
HXLINE( 111)		if (hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 111)			this->_hx___glFragmentSource = HX_("varying vec2 vTexCoord;\n\t\t\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}",80,b8,88,e9);
            		}
HXLINE( 110)		if (hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 110)			this->_hx___glVertexSource = HX_("attribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}",7e,1f,15,01);
            		}
HXLINE( 280)		super::__construct(code);
            	}

Dynamic GLMaskShader_obj::__CreateEmpty() { return new GLMaskShader_obj; }

void *GLMaskShader_obj::_hx_vtable = 0;

Dynamic GLMaskShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLMaskShader_obj > _hx_result = new GLMaskShader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GLMaskShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5e833990) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x5e833990;
	} else {
		return inClassId==(int)0x676ab1f7;
	}
}


hx::ObjectPtr< GLMaskShader_obj > GLMaskShader_obj::__new( ::openfl::utils::ByteArrayData code) {
	hx::ObjectPtr< GLMaskShader_obj > __this = new GLMaskShader_obj();
	__this->__construct(code);
	return __this;
}

hx::ObjectPtr< GLMaskShader_obj > GLMaskShader_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::utils::ByteArrayData code) {
	GLMaskShader_obj *__this = (GLMaskShader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GLMaskShader_obj), true, "openfl._internal.renderer.opengl.GLMaskShader"));
	*(void **)__this = GLMaskShader_obj::_hx_vtable;
	__this->__construct(code);
	return __this;
}

GLMaskShader_obj::GLMaskShader_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLMaskShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLMaskShader_obj_sStaticStorageInfo = 0;
#endif

static void GLMaskShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLMaskShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLMaskShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLMaskShader_obj::__mClass,"__mClass");
};

#endif

hx::Class GLMaskShader_obj::__mClass;

void GLMaskShader_obj::__register()
{
	hx::Object *dummy = new GLMaskShader_obj;
	GLMaskShader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLMaskShader","\x9a","\x6a","\x4d","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLMaskShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLMaskShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLMaskShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLMaskShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLMaskShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
