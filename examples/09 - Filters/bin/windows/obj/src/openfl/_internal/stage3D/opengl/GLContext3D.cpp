// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_Context3DStateCache
#include <openfl/_internal/stage3D/Context3DStateCache.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLContext3D
#include <openfl/_internal/stage3D/opengl/GLContext3D.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_64_create,"openfl._internal.stage3D.opengl.GLContext3D","create",0x121cd5bf,"openfl._internal.stage3D.opengl.GLContext3D.create","openfl/_internal/stage3D/opengl/GLContext3D.hx",64,0x6963e5f1)
static const Float _hx_array_data_da5a374b_2[] = {
	1.0,1.0,1.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_190_clear,"openfl._internal.stage3D.opengl.GLContext3D","clear",0x11ed4c2a,"openfl._internal.stage3D.opengl.GLContext3D.clear","openfl/_internal/stage3D/opengl/GLContext3D.hx",190,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_229_configureBackBuffer,"openfl._internal.stage3D.opengl.GLContext3D","configureBackBuffer",0xadbd8f6a,"openfl._internal.stage3D.opengl.GLContext3D.configureBackBuffer","openfl/_internal/stage3D/opengl/GLContext3D.hx",229,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_248_dispose,"openfl._internal.stage3D.opengl.GLContext3D","dispose",0x70fffc7c,"openfl._internal.stage3D.opengl.GLContext3D.dispose","openfl/_internal/stage3D/opengl/GLContext3D.hx",248,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_255_drawToBitmapData,"openfl._internal.stage3D.opengl.GLContext3D","drawToBitmapData",0x3884f5bb,"openfl._internal.stage3D.opengl.GLContext3D.drawToBitmapData","openfl/_internal/stage3D/opengl/GLContext3D.hx",255,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_271_drawTriangles,"openfl._internal.stage3D.opengl.GLContext3D","drawTriangles",0x127183a4,"openfl._internal.stage3D.opengl.GLContext3D.drawTriangles","openfl/_internal/stage3D/opengl/GLContext3D.hx",271,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_302_present,"openfl._internal.stage3D.opengl.GLContext3D","present",0xef8fb6d8,"openfl._internal.stage3D.opengl.GLContext3D.present","openfl/_internal/stage3D/opengl/GLContext3D.hx",302,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_318_setBlendFactors,"openfl._internal.stage3D.opengl.GLContext3D","setBlendFactors",0x2e5b6c12,"openfl._internal.stage3D.opengl.GLContext3D.setBlendFactors","openfl/_internal/stage3D/opengl/GLContext3D.hx",318,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_335_setColorMask,"openfl._internal.stage3D.opengl.GLContext3D","setColorMask",0x4bc0eef0,"openfl._internal.stage3D.opengl.GLContext3D.setColorMask","openfl/_internal/stage3D/opengl/GLContext3D.hx",335,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_344_setCulling,"openfl._internal.stage3D.opengl.GLContext3D","setCulling",0x21e69331,"openfl._internal.stage3D.opengl.GLContext3D.setCulling","openfl/_internal/stage3D/opengl/GLContext3D.hx",344,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_395_setDepthTest,"openfl._internal.stage3D.opengl.GLContext3D","setDepthTest",0xcb7a45f6,"openfl._internal.stage3D.opengl.GLContext3D.setDepthTest","openfl/_internal/stage3D/opengl/GLContext3D.hx",395,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_445_setEnableErrorChecking,"openfl._internal.stage3D.opengl.GLContext3D","setEnableErrorChecking",0x89de8ac0,"openfl._internal.stage3D.opengl.GLContext3D.setEnableErrorChecking","openfl/_internal/stage3D/opengl/GLContext3D.hx",445,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_452_setProgram,"openfl._internal.stage3D.opengl.GLContext3D","setProgram",0xc257fb45,"openfl._internal.stage3D.opengl.GLContext3D.setProgram","openfl/_internal/stage3D/opengl/GLContext3D.hx",452,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_472_setProgramConstantsFromByteArray,"openfl._internal.stage3D.opengl.GLContext3D","setProgramConstantsFromByteArray",0x79e535bd,"openfl._internal.stage3D.opengl.GLContext3D.setProgramConstantsFromByteArray","openfl/_internal/stage3D/opengl/GLContext3D.hx",472,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_504_setProgramConstantsFromMatrix,"openfl._internal.stage3D.opengl.GLContext3D","setProgramConstantsFromMatrix",0xa484da75,"openfl._internal.stage3D.opengl.GLContext3D.setProgramConstantsFromMatrix","openfl/_internal/stage3D/opengl/GLContext3D.hx",504,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_566_setProgramConstantsFromVector,"openfl._internal.stage3D.opengl.GLContext3D","setProgramConstantsFromVector",0x801a54f7,"openfl._internal.stage3D.opengl.GLContext3D.setProgramConstantsFromVector","openfl/_internal/stage3D/opengl/GLContext3D.hx",566,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_599_setRenderToBackBuffer,"openfl._internal.stage3D.opengl.GLContext3D","setRenderToBackBuffer",0x59e92937,"openfl._internal.stage3D.opengl.GLContext3D.setRenderToBackBuffer","openfl/_internal/stage3D/opengl/GLContext3D.hx",599,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_626_setRenderToTexture,"openfl._internal.stage3D.opengl.GLContext3D","setRenderToTexture",0x13ac342b,"openfl._internal.stage3D.opengl.GLContext3D.setRenderToTexture","openfl/_internal/stage3D/opengl/GLContext3D.hx",626,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_770_setSamplerStateAt,"openfl._internal.stage3D.opengl.GLContext3D","setSamplerStateAt",0xbd4f029b,"openfl._internal.stage3D.opengl.GLContext3D.setSamplerStateAt","openfl/_internal/stage3D/opengl/GLContext3D.hx",770,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_892_setScissorRectangle,"openfl._internal.stage3D.opengl.GLContext3D","setScissorRectangle",0xacd85792,"openfl._internal.stage3D.opengl.GLContext3D.setScissorRectangle","openfl/_internal/stage3D/opengl/GLContext3D.hx",892,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_903_setStencilActions,"openfl._internal.stage3D.opengl.GLContext3D","setStencilActions",0x3da4bec0,"openfl._internal.stage3D.opengl.GLContext3D.setStencilActions","openfl/_internal/stage3D/opengl/GLContext3D.hx",903,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_915_setStencilReferenceValue,"openfl._internal.stage3D.opengl.GLContext3D","setStencilReferenceValue",0xa69b3b43,"openfl._internal.stage3D.opengl.GLContext3D.setStencilReferenceValue","openfl/_internal/stage3D/opengl/GLContext3D.hx",915,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_931_setTextureAt,"openfl._internal.stage3D.opengl.GLContext3D","setTextureAt",0xd74651af,"openfl._internal.stage3D.opengl.GLContext3D.setTextureAt","openfl/_internal/stage3D/opengl/GLContext3D.hx",931,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_941_setVertexBufferAt,"openfl._internal.stage3D.opengl.GLContext3D","setVertexBufferAt",0xd8f72af6,"openfl._internal.stage3D.opengl.GLContext3D.setVertexBufferAt","openfl/_internal/stage3D/opengl/GLContext3D.hx",941,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1001___flushSamplerState,"openfl._internal.stage3D.opengl.GLContext3D","__flushSamplerState",0xf6f5250a,"openfl._internal.stage3D.opengl.GLContext3D.__flushSamplerState","openfl/_internal/stage3D/opengl/GLContext3D.hx",1001,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1047___getGLCompareMode,"openfl._internal.stage3D.opengl.GLContext3D","__getGLCompareMode",0xda71b490,"openfl._internal.stage3D.opengl.GLContext3D.__getGLCompareMode","openfl/_internal/stage3D/opengl/GLContext3D.hx",1047,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1066___getGLTriangleFace,"openfl._internal.stage3D.opengl.GLContext3D","__getGLTriangleFace",0x6d33e89d,"openfl._internal.stage3D.opengl.GLContext3D.__getGLTriangleFace","openfl/_internal/stage3D/opengl/GLContext3D.hx",1066,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1081___getGLStencilAction,"openfl._internal.stage3D.opengl.GLContext3D","__getGLStencilAction",0xdaa342ba,"openfl._internal.stage3D.opengl.GLContext3D.__getGLStencilAction","openfl/_internal/stage3D/opengl/GLContext3D.hx",1081,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1100___hasGLExtension,"openfl._internal.stage3D.opengl.GLContext3D","__hasGLExtension",0xe0149f23,"openfl._internal.stage3D.opengl.GLContext3D.__hasGLExtension","openfl/_internal/stage3D/opengl/GLContext3D.hx",1100,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1105___setViewport,"openfl._internal.stage3D.opengl.GLContext3D","__setViewport",0x498796a5,"openfl._internal.stage3D.opengl.GLContext3D.__setViewport","openfl/_internal/stage3D/opengl/GLContext3D.hx",1105,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1205___updateDepthAndStencilState,"openfl._internal.stage3D.opengl.GLContext3D","__updateDepthAndStencilState",0x73a676f5,"openfl._internal.stage3D.opengl.GLContext3D.__updateDepthAndStencilState","openfl/_internal/stage3D/opengl/GLContext3D.hx",1205,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1228___updateBlendFactorsTEMP,"openfl._internal.stage3D.opengl.GLContext3D","__updateBlendFactorsTEMP",0x3ae883d3,"openfl._internal.stage3D.opengl.GLContext3D.__updateBlendFactorsTEMP","openfl/_internal/stage3D/opengl/GLContext3D.hx",1228,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1238___updateBlendFactors,"openfl._internal.stage3D.opengl.GLContext3D","__updateBlendFactors",0xfb74ed3f,"openfl._internal.stage3D.opengl.GLContext3D.__updateBlendFactors","openfl/_internal/stage3D/opengl/GLContext3D.hx",1238,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1286___updateScissorRectangle,"openfl._internal.stage3D.opengl.GLContext3D","__updateScissorRectangle",0x144e733f,"openfl._internal.stage3D.opengl.GLContext3D.__updateScissorRectangle","openfl/_internal/stage3D/opengl/GLContext3D.hx",1286,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1335___updateBackbufferViewportTEMP,"openfl._internal.stage3D.opengl.GLContext3D","__updateBackbufferViewportTEMP",0x3ee4e74d,"openfl._internal.stage3D.opengl.GLContext3D.__updateBackbufferViewportTEMP","openfl/_internal/stage3D/opengl/GLContext3D.hx",1335,0x6963e5f1)
HX_LOCAL_STACK_FRAME(_hx_pos_829f03b13519819f_1345___updateBackbufferViewport,"openfl._internal.stage3D.opengl.GLContext3D","__updateBackbufferViewport",0x4fe78bb9,"openfl._internal.stage3D.opengl.GLContext3D.__updateBackbufferViewport","openfl/_internal/stage3D/opengl/GLContext3D.hx",1345,0x6963e5f1)
namespace openfl{
namespace _internal{
namespace stage3D{
namespace opengl{

void GLContext3D_obj::__construct() { }

Dynamic GLContext3D_obj::__CreateEmpty() { return new GLContext3D_obj; }

void *GLContext3D_obj::_hx_vtable = 0;

Dynamic GLContext3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLContext3D_obj > _hx_result = new GLContext3D_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLContext3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x41bc9ce9;
}

 ::openfl::display3D::Context3D GLContext3D_obj::context;

 ::lime::_backend::native::NativeGLRenderContext GLContext3D_obj::gl;

void GLContext3D_obj::create( ::openfl::display3D::Context3D context){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_64_create)
HXLINE(  66)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE(  68)		 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN(  68)		context->_hx___vertexConstants = this1;
HXLINE(  69)		 ::lime::utils::ArrayBufferView this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN(  69)		context->_hx___fragmentConstants = this2;
HXLINE(  71)		::cpp::VirtualArray array = ::Array_obj< Float >::fromData( _hx_array_data_da5a374b_2,4);
HXDLIN(  71)		 ::lime::utils::ArrayBufferView this3;
HXDLIN(  71)		if (hx::IsNotNull( array )) {
HXLINE(  71)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN(  71)			_this->byteOffset = (int)0;
HXDLIN(  71)			_this->length = array->get_length();
HXDLIN(  71)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  71)			 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  71)			_this->buffer = this4;
HXDLIN(  71)			_this->copyFromArray(array,null());
HXDLIN(  71)			this3 = _this;
            		}
            		else {
HXLINE(  71)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  71)		context->_hx___positionScale = this3;
HXLINE(  72)		context->_hx___samplerDirty = (int)0;
HXLINE(  73)		bool fixed = null();
HXDLIN(  73)		context->_hx___samplerTextures =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,(int)8,fixed,null()),null());
HXLINE(  74)		context->_hx___samplerStates = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  76)		{
HXLINE(  76)			int _g = (int)0;
HXDLIN(  76)			while((_g < (int)8)){
HXLINE(  76)				_g = (_g + (int)1);
HXDLIN(  76)				int i = (_g - (int)1);
HXLINE(  78)				::Array< ::Dynamic> context1 = context->_hx___samplerStates;
HXDLIN(  78)				context1[i] =  ::openfl::_internal::stage3D::SamplerState_obj::__alloc( HX_CTX ,gl->LINEAR,gl->LINEAR,gl->CLAMP_TO_EDGE,gl->CLAMP_TO_EDGE,null(),null(),null(),null(),null());
            			}
            		}
HXLINE(  85)		context->maxBackBufferHeight = (context->maxBackBufferWidth = (int)16384);
HXLINE(  88)		context->_hx___backBufferAntiAlias = (int)0;
HXLINE(  89)		context->_hx___backBufferEnableDepthAndStencil = true;
HXLINE(  90)		context->_hx___backBufferWantsBestResolution = false;
HXLINE(  92)		context->_hx___frameCount = (int)0;
HXLINE(  93)		context->_hx___rttDepthAndStencil = false;
HXLINE(  94)		context->_hx___samplerDirty = (int)0;
HXLINE(  95)		context->_hx___stencilCompareMode = (int)0;
HXLINE(  96)		context->_hx___stencilRef = (int)0;
HXLINE(  97)		context->_hx___stencilReadMask = (int)255;
HXLINE(  99)		 ::Dynamic anisoExtension = gl->getExtension(HX_("EXT_texture_filter_anisotropic",4c,4c,32,3d));
HXLINE( 113)		 ::Dynamic stencilExtension = gl->getExtension(HX_("OES_packed_depth_stencil",7b,19,31,fc));
HXLINE( 115)		if (hx::IsNotNull( stencilExtension )) {
HXLINE( 117)			context->_hx___supportsPackedDepthStencil = true;
HXLINE( 118)			::openfl::display3D::Context3D_obj::DEPTH_STENCIL = ( (int)(stencilExtension->__Field(HX_("DEPTH24_STENCIL8_OES",b4,24,e8,3a),hx::paccDynamic)) );
            		}
            		else {
HXLINE( 122)			stencilExtension = gl->getExtension(HX_("EXT_packed_depth_stencil",f7,88,e3,09));
HXLINE( 124)			if (hx::IsNotNull( stencilExtension )) {
HXLINE( 126)				context->_hx___supportsPackedDepthStencil = true;
HXLINE( 127)				::openfl::display3D::Context3D_obj::DEPTH_STENCIL = ( (int)(stencilExtension->__Field(HX_("DEPTH24_STENCIL8_EXT",b8,9e,e0,3a),hx::paccDynamic)) );
            			}
            		}
HXLINE( 135)		context->_hx___supportsAnisotropicFiltering = hx::IsNotNull( anisoExtension );
HXLINE( 137)		if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 139)			::openfl::display3D::Context3D_obj::TEXTURE_MAX_ANISOTROPY_EXT = ( (int)(anisoExtension->__Field(HX_("TEXTURE_MAX_ANISOTROPY_EXT",63,c1,6c,51),hx::paccDynamic)) );
HXLINE( 141)			int maxAnisotropy = ( (int)(gl->getParameter(( (int)(anisoExtension->__Field(HX_("MAX_TEXTURE_MAX_ANISOTROPY_EXT",7e,54,e7,a3),hx::paccDynamic)) ))) );
HXLINE( 142)			context->_hx___maxAnisotropyTexture2D = maxAnisotropy;
HXLINE( 143)			context->_hx___maxAnisotropyTexture2D = maxAnisotropy;
            		}
HXLINE( 155)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 157)		::String vendor = ( (::String)(gl->getParameter(gl->VENDOR)) );
HXLINE( 158)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 160)		::String version = ( (::String)(gl->getParameter(gl->VERSION)) );
HXLINE( 161)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 163)		::String renderer = ( (::String)(gl->getParameter(gl->RENDERER)) );
HXLINE( 164)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 166)		::String glslVersion = ( (::String)(gl->getParameter(gl->SHADING_LANGUAGE_VERSION)) );
HXLINE( 167)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 169)		context->driverInfo = ((((((((HX_("OpenGL",8f,bc,28,56) + HX_(" Vendor=",75,5d,11,19)) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + renderer) + HX_(" GLSL=",5f,30,5a,df)) + glslVersion);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,create,(void))

void GLContext3D_obj::clear( ::openfl::display3D::Context3D context,hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil,hx::Null< int >  __o_mask){
Float red = __o_red.Default(0);
Float green = __o_green.Default(0);
Float blue = __o_blue.Default(0);
Float alpha = __o_alpha.Default(1);
Float depth = __o_depth.Default(1);
int stencil = __o_stencil.Default(0);
int mask = __o_mask.Default(7);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_190_clear)
HXLINE( 192)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 193)		int clearMask = (int)0;
HXLINE( 195)		if ((((int)mask & (int)(int)1) != (int)0)) {
HXLINE( 197)			clearMask = ((int)clearMask | (int)gl->COLOR_BUFFER_BIT);
HXLINE( 199)			gl->clearColor(red,green,blue,alpha);
HXLINE( 200)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 204)		if ((((int)mask & (int)(int)2) != (int)0)) {
HXLINE( 206)			clearMask = ((int)clearMask | (int)gl->DEPTH_BUFFER_BIT);
HXLINE( 208)			gl->depthMask(true);
HXLINE( 209)			gl->clearDepthf(depth);
HXLINE( 210)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 214)		if ((((int)mask & (int)(int)4) != (int)0)) {
HXLINE( 216)			clearMask = ((int)clearMask | (int)gl->STENCIL_BUFFER_BIT);
HXLINE( 218)			gl->clearStencil(stencil);
HXLINE( 219)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 223)		gl->clear(clearMask);
HXLINE( 224)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(GLContext3D_obj,clear,(void))

void GLContext3D_obj::configureBackBuffer( ::openfl::display3D::Context3D context,int width,int height,int antiAlias,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< bool >  __o_wantsBestResolution,hx::Null< bool >  __o_wantsBestResolutionOnBrowserZoom){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
bool wantsBestResolution = __o_wantsBestResolution.Default(false);
bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_229_configureBackBuffer)
HXLINE( 231)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 232)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = context->_hx___renderSession->gl;
HXLINE( 234)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBackbufferViewport();
HXLINE( 236)		context->backBufferWidth = width;
HXLINE( 237)		context->backBufferHeight = height;
HXLINE( 239)		context->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 240)		context->_hx___backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 241)		context->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 243)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(GLContext3D_obj,configureBackBuffer,(void))

void GLContext3D_obj::dispose( ::openfl::display3D::Context3D context,hx::Null< bool >  __o_recreate){
bool recreate = __o_recreate.Default(true);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_248_dispose)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,dispose,(void))

void GLContext3D_obj::drawToBitmapData( ::openfl::display3D::Context3D context, ::openfl::display::BitmapData destination){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_255_drawToBitmapData)
HXLINE( 257)		 ::lime::ui::Window window = context->_hx___stage3D->_hx___stage->window;
HXLINE( 259)		if (hx::IsNotNull( window )) {
HXLINE( 261)			 ::lime::graphics::Image image = window->renderer->readPixels(null());
HXLINE( 262)			int heightOffset = (image->height - context->backBufferHeight);
HXLINE( 264)			 ::lime::graphics::Image destination1 = destination->image;
HXDLIN( 264)			int _hx_tmp = ::Std_obj::_hx_int(context->_hx___stage3D->get_x());
HXDLIN( 264)			int _hx_tmp1 = ::Std_obj::_hx_int((context->_hx___stage3D->get_y() + heightOffset));
HXDLIN( 264)			 ::lime::math::Rectangle _hx_tmp2 =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,context->backBufferWidth,context->backBufferHeight);
HXDLIN( 264)			destination1->copyPixels(image,_hx_tmp2, ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null()),null(),null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,drawToBitmapData,(void))

void GLContext3D_obj::drawTriangles( ::openfl::display3D::Context3D context, ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  __o_firstIndex,hx::Null< int >  __o_numTriangles){
int firstIndex = __o_firstIndex.Default(0);
int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_271_drawTriangles)
HXLINE( 273)		if (hx::IsNull( context->_hx___program )) {
HXLINE( 275)			return;
            		}
HXLINE( 279)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 280)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = context->_hx___renderSession->gl;
HXLINE( 282)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___flushSamplerState();
HXLINE( 283)		context->_hx___program->_hx___flush();
HXLINE( 285)		int count;
HXDLIN( 285)		if ((numTriangles == (int)-1)) {
HXLINE( 285)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE( 285)			count = (numTriangles * (int)3);
            		}
HXLINE( 287)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->bindBuffer(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ELEMENT_ARRAY_BUFFER,indexBuffer->_hx___id);
HXLINE( 288)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 290)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN( 290)		int _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->TRIANGLES;
HXDLIN( 290)		int indexBuffer1 = indexBuffer->_hx___elementType;
HXDLIN( 290)		_hx_tmp->drawElements(_hx_tmp1,count,indexBuffer1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(firstIndex));
HXLINE( 291)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLContext3D_obj,drawTriangles,(void))

void GLContext3D_obj::present( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_302_present)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,present,(void))

void GLContext3D_obj::setBlendFactors( ::openfl::display3D::Context3D context, ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_318_setBlendFactors)
HXLINE( 320)		bool updateSrc = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendSrcFactor(sourceFactor);
HXLINE( 321)		bool updateDest = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendDestFactor(destinationFactor);
HXLINE( 323)		bool _hx_tmp;
HXDLIN( 323)		if (!(updateSrc)) {
HXLINE( 323)			_hx_tmp = updateDest;
            		}
            		else {
HXLINE( 323)			_hx_tmp = true;
            		}
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 325)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 326)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = context->_hx___renderSession->gl;
HXLINE( 328)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBlendFactors();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLContext3D_obj,setBlendFactors,(void))

void GLContext3D_obj::setColorMask( ::openfl::display3D::Context3D context,bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_335_setColorMask)
HXLINE( 337)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 339)		gl->colorMask(red,green,blue,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setColorMask,(void))

 ::openfl::errors::Error GLContext3D_obj::setCulling( ::openfl::display3D::Context3D context, ::Dynamic triangleFaceToCull){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_344_setCulling)
HXLINE( 346)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 348)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateCullingMode(triangleFaceToCull)) {
HXLINE( 361)			 ::Dynamic _hx_switch_0 = triangleFaceToCull;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 369)				gl->enable(gl->CULL_FACE);
HXLINE( 370)				gl->cullFace(gl->FRONT);
HXLINE( 367)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 374)				gl->enable(gl->CULL_FACE);
HXLINE( 375)				gl->cullFace(gl->BACK);
HXLINE( 372)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 379)				gl->enable(gl->CULL_FACE);
HXLINE( 380)				gl->cullFace(gl->FRONT_AND_BACK);
HXLINE( 377)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 365)				gl->disable(gl->CULL_FACE);
HXDLIN( 365)				goto _hx_goto_11;
            			}
            			/* default */{
HXLINE( 384)				return  ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null());
            			}
            			_hx_goto_11:;
            		}
HXLINE( 390)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,setCulling,return )

void GLContext3D_obj::setDepthTest( ::openfl::display3D::Context3D context,bool depthMask, ::Dynamic passCompareMode){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_395_setDepthTest)
HXLINE( 397)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 398)		bool depthTestEnabled = context->_hx___backBufferEnableDepthAndStencil;
HXLINE( 400)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestEnabled(depthTestEnabled)) {
HXLINE( 402)			if (depthTestEnabled) {
HXLINE( 404)				gl->enable(gl->DEPTH_TEST);
            			}
            			else {
HXLINE( 408)				gl->disable(gl->DEPTH_TEST);
            			}
            		}
HXLINE( 414)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestMask(depthMask)) {
HXLINE( 416)			gl->depthMask(depthMask);
            		}
HXLINE( 420)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthCompareMode(passCompareMode)) {
HXLINE( 422)			 ::Dynamic _hx_switch_0 = passCompareMode;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 424)				gl->depthFunc(gl->ALWAYS);
HXDLIN( 424)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 425)				gl->depthFunc(gl->EQUAL);
HXDLIN( 425)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 426)				gl->depthFunc(gl->GREATER);
HXDLIN( 426)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 427)				gl->depthFunc(gl->GEQUAL);
HXDLIN( 427)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE( 428)				gl->depthFunc(gl->LESS);
HXDLIN( 428)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE( 429)				gl->depthFunc(gl->LEQUAL);
HXDLIN( 429)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)6) ){
HXLINE( 430)				gl->depthFunc(gl->NEVER);
HXDLIN( 430)				goto _hx_goto_13;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE( 431)				gl->depthFunc(gl->NOTEQUAL);
HXDLIN( 431)				goto _hx_goto_13;
            			}
            			/* default */{
HXLINE( 434)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_13:;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLContext3D_obj,setDepthTest,(void))

void GLContext3D_obj::setEnableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_445_setEnableErrorChecking)
HXDLIN( 445)		::openfl::_internal::stage3D::GLUtils_obj::debug = value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,setEnableErrorChecking,(void))

void GLContext3D_obj::setProgram( ::openfl::display3D::Context3D context, ::openfl::display3D::Program3D program){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_452_setProgram)
HXDLIN( 452)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateProgram3D(program)) {
HXLINE( 454)			program->_hx___use();
HXLINE( 455)			program->_hx___setPositionScale(context->_hx___positionScale);
HXLINE( 457)			context->_hx___program = program;
HXLINE( 459)			 ::openfl::display3D::Context3D context1 = context;
HXDLIN( 459)			context1->_hx___samplerDirty = ((int)context1->_hx___samplerDirty | (int)context->_hx___program->_hx___samplerUsageMask);
HXLINE( 461)			{
HXLINE( 461)				int _g = (int)0;
HXDLIN( 461)				while((_g < (int)8)){
HXLINE( 461)					_g = (_g + (int)1);
HXDLIN( 461)					int i = (_g - (int)1);
HXLINE( 463)					 ::openfl::_internal::stage3D::SamplerState context2 = context->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXDLIN( 463)					context2->copyFrom(context->_hx___program->_hx___getSamplerState(i));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,setProgram,(void))

void GLContext3D_obj::setProgramConstantsFromByteArray( ::openfl::display3D::Context3D context, ::Dynamic programType,int firstRegister,int numRegisters, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_472_setProgramConstantsFromByteArray)
HXLINE( 474)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 476)		if ((numRegisters == (int)-1)) {
HXLINE( 478)			numRegisters = (((int)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data) >> (int)(int)2) - byteArrayOffset);
            		}
HXLINE( 482)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 483)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 483)		if (isVertex) {
HXLINE( 483)			dest = context->_hx___vertexConstants;
            		}
            		else {
HXLINE( 483)			dest = context->_hx___fragmentConstants;
            		}
HXLINE( 485)		 ::haxe::io::Bytes bytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 485)		 ::Dynamic len = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
HXDLIN( 485)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 485)		if (hx::IsNotNull( bytes )) {
HXLINE( 485)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 485)			int in_byteOffset = (int)0;
HXDLIN( 485)			if ((in_byteOffset < (int)0)) {
HXLINE( 485)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 485)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 485)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 485)			int bufferByteLength = bytes->length;
HXDLIN( 485)			int elementSize = _this->bytesPerElement;
HXDLIN( 485)			int newByteLength = bufferByteLength;
HXDLIN( 485)			if (hx::IsNull( len )) {
HXLINE( 485)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 485)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 485)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 485)				if ((newByteLength < (int)0)) {
HXLINE( 485)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE( 485)				newByteLength = (len * _this->bytesPerElement);
HXDLIN( 485)				int newRange = (in_byteOffset + newByteLength);
HXDLIN( 485)				if ((newRange > bufferByteLength)) {
HXLINE( 485)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 485)			_this->buffer = bytes;
HXDLIN( 485)			_this->byteOffset = in_byteOffset;
HXDLIN( 485)			_this->byteLength = newByteLength;
HXDLIN( 485)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 485)			this1 = _this;
            		}
            		else {
HXLINE( 485)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 485)		 ::lime::utils::ArrayBufferView floatData = this1;
HXLINE( 486)		int outOffset = (firstRegister * (int)4);
HXLINE( 487)		int _hx_int = byteArrayOffset;
HXDLIN( 487)		Float inOffset;
HXDLIN( 487)		if ((_hx_int < (int)0)) {
HXLINE( 487)			inOffset = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 487)			inOffset = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 487)		int int1 = (int)4;
HXDLIN( 487)		Float inOffset1;
HXDLIN( 487)		if ((int1 < (int)0)) {
HXLINE( 487)			inOffset1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE( 487)			inOffset1 = (int1 + ((Float)0.0));
            		}
HXDLIN( 487)		int inOffset2 = ::Std_obj::_hx_int(((Float)inOffset / (Float)inOffset1));
HXLINE( 489)		{
HXLINE( 489)			int _g1 = (int)0;
HXDLIN( 489)			int _g = (numRegisters * (int)4);
HXDLIN( 489)			while((_g1 < _g)){
HXLINE( 489)				_g1 = (_g1 + (int)1);
HXDLIN( 489)				int i = (_g1 - (int)1);
HXLINE( 491)				{
HXLINE( 491)					int floatData1 = floatData->byteOffset;
HXDLIN( 491)					Float val = ::__hxcpp_memory_get_float(floatData->buffer->b,(floatData1 + ((inOffset2 + i) * (int)4)));
HXDLIN( 491)					{
HXLINE( 491)						int dest1 = dest->byteOffset;
HXDLIN( 491)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((outOffset + i) * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE( 495)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 497)			context->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GLContext3D_obj,setProgramConstantsFromByteArray,(void))

void GLContext3D_obj::setProgramConstantsFromMatrix( ::openfl::display3D::Context3D context, ::Dynamic programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_504_setProgramConstantsFromMatrix)
HXLINE( 506)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 507)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 507)		if (isVertex) {
HXLINE( 507)			dest = context->_hx___vertexConstants;
            		}
            		else {
HXLINE( 507)			dest = context->_hx___fragmentConstants;
            		}
HXLINE( 508)		 ::openfl::_Vector::AbstractVector source = matrix->rawData;
HXLINE( 509)		int i = (firstRegister * (int)4);
HXLINE( 511)		if (transposedMatrix) {
HXLINE( 513)			{
HXLINE( 513)				i = (i + (int)1);
HXDLIN( 513)				Float val = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)0)) );
HXDLIN( 513)				{
HXLINE( 513)					int dest1 = dest->byteOffset;
HXDLIN( 513)					::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((i - (int)1) * (int)4)),val);
            				}
            			}
HXLINE( 514)			{
HXLINE( 514)				i = (i + (int)1);
HXDLIN( 514)				Float val1 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)4)) );
HXDLIN( 514)				{
HXLINE( 514)					int dest2 = dest->byteOffset;
HXDLIN( 514)					::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((i - (int)1) * (int)4)),val1);
            				}
            			}
HXLINE( 515)			{
HXLINE( 515)				i = (i + (int)1);
HXDLIN( 515)				Float val2 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)8)) );
HXDLIN( 515)				{
HXLINE( 515)					int dest3 = dest->byteOffset;
HXDLIN( 515)					::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((i - (int)1) * (int)4)),val2);
            				}
            			}
HXLINE( 516)			{
HXLINE( 516)				i = (i + (int)1);
HXDLIN( 516)				Float val3 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)12)) );
HXDLIN( 516)				{
HXLINE( 516)					int dest4 = dest->byteOffset;
HXDLIN( 516)					::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((i - (int)1) * (int)4)),val3);
            				}
            			}
HXLINE( 518)			{
HXLINE( 518)				i = (i + (int)1);
HXDLIN( 518)				Float val4 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)1)) );
HXDLIN( 518)				{
HXLINE( 518)					int dest5 = dest->byteOffset;
HXDLIN( 518)					::__hxcpp_memory_set_float(dest->buffer->b,(dest5 + ((i - (int)1) * (int)4)),val4);
            				}
            			}
HXLINE( 519)			{
HXLINE( 519)				i = (i + (int)1);
HXDLIN( 519)				Float val5 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)5)) );
HXDLIN( 519)				{
HXLINE( 519)					int dest6 = dest->byteOffset;
HXDLIN( 519)					::__hxcpp_memory_set_float(dest->buffer->b,(dest6 + ((i - (int)1) * (int)4)),val5);
            				}
            			}
HXLINE( 520)			{
HXLINE( 520)				i = (i + (int)1);
HXDLIN( 520)				Float val6 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)9)) );
HXDLIN( 520)				{
HXLINE( 520)					int dest7 = dest->byteOffset;
HXDLIN( 520)					::__hxcpp_memory_set_float(dest->buffer->b,(dest7 + ((i - (int)1) * (int)4)),val6);
            				}
            			}
HXLINE( 521)			{
HXLINE( 521)				i = (i + (int)1);
HXDLIN( 521)				Float val7 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)13)) );
HXDLIN( 521)				{
HXLINE( 521)					int dest8 = dest->byteOffset;
HXDLIN( 521)					::__hxcpp_memory_set_float(dest->buffer->b,(dest8 + ((i - (int)1) * (int)4)),val7);
            				}
            			}
HXLINE( 523)			{
HXLINE( 523)				i = (i + (int)1);
HXDLIN( 523)				Float val8 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)2)) );
HXDLIN( 523)				{
HXLINE( 523)					int dest9 = dest->byteOffset;
HXDLIN( 523)					::__hxcpp_memory_set_float(dest->buffer->b,(dest9 + ((i - (int)1) * (int)4)),val8);
            				}
            			}
HXLINE( 524)			{
HXLINE( 524)				i = (i + (int)1);
HXDLIN( 524)				Float val9 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)6)) );
HXDLIN( 524)				{
HXLINE( 524)					int dest10 = dest->byteOffset;
HXDLIN( 524)					::__hxcpp_memory_set_float(dest->buffer->b,(dest10 + ((i - (int)1) * (int)4)),val9);
            				}
            			}
HXLINE( 525)			{
HXLINE( 525)				i = (i + (int)1);
HXDLIN( 525)				Float val10 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)10)) );
HXDLIN( 525)				{
HXLINE( 525)					int dest11 = dest->byteOffset;
HXDLIN( 525)					::__hxcpp_memory_set_float(dest->buffer->b,(dest11 + ((i - (int)1) * (int)4)),val10);
            				}
            			}
HXLINE( 526)			{
HXLINE( 526)				i = (i + (int)1);
HXDLIN( 526)				Float val11 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)14)) );
HXDLIN( 526)				{
HXLINE( 526)					int dest12 = dest->byteOffset;
HXDLIN( 526)					::__hxcpp_memory_set_float(dest->buffer->b,(dest12 + ((i - (int)1) * (int)4)),val11);
            				}
            			}
HXLINE( 528)			{
HXLINE( 528)				i = (i + (int)1);
HXDLIN( 528)				Float val12 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)3)) );
HXDLIN( 528)				{
HXLINE( 528)					int dest13 = dest->byteOffset;
HXDLIN( 528)					::__hxcpp_memory_set_float(dest->buffer->b,(dest13 + ((i - (int)1) * (int)4)),val12);
            				}
            			}
HXLINE( 529)			{
HXLINE( 529)				i = (i + (int)1);
HXDLIN( 529)				Float val13 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)7)) );
HXDLIN( 529)				{
HXLINE( 529)					int dest14 = dest->byteOffset;
HXDLIN( 529)					::__hxcpp_memory_set_float(dest->buffer->b,(dest14 + ((i - (int)1) * (int)4)),val13);
            				}
            			}
HXLINE( 530)			{
HXLINE( 530)				i = (i + (int)1);
HXDLIN( 530)				Float val14 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)11)) );
HXDLIN( 530)				{
HXLINE( 530)					int dest15 = dest->byteOffset;
HXDLIN( 530)					::__hxcpp_memory_set_float(dest->buffer->b,(dest15 + ((i - (int)1) * (int)4)),val14);
            				}
            			}
HXLINE( 531)			{
HXLINE( 531)				i = (i + (int)1);
HXDLIN( 531)				Float val15 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)15)) );
HXDLIN( 531)				{
HXLINE( 531)					int dest16 = dest->byteOffset;
HXDLIN( 531)					::__hxcpp_memory_set_float(dest->buffer->b,(dest16 + ((i - (int)1) * (int)4)),val15);
            				}
            			}
            		}
            		else {
HXLINE( 535)			{
HXLINE( 535)				i = (i + (int)1);
HXDLIN( 535)				Float val16 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)0)) );
HXDLIN( 535)				{
HXLINE( 535)					int dest17 = dest->byteOffset;
HXDLIN( 535)					::__hxcpp_memory_set_float(dest->buffer->b,(dest17 + ((i - (int)1) * (int)4)),val16);
            				}
            			}
HXLINE( 536)			{
HXLINE( 536)				i = (i + (int)1);
HXDLIN( 536)				Float val17 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)1)) );
HXDLIN( 536)				{
HXLINE( 536)					int dest18 = dest->byteOffset;
HXDLIN( 536)					::__hxcpp_memory_set_float(dest->buffer->b,(dest18 + ((i - (int)1) * (int)4)),val17);
            				}
            			}
HXLINE( 537)			{
HXLINE( 537)				i = (i + (int)1);
HXDLIN( 537)				Float val18 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)2)) );
HXDLIN( 537)				{
HXLINE( 537)					int dest19 = dest->byteOffset;
HXDLIN( 537)					::__hxcpp_memory_set_float(dest->buffer->b,(dest19 + ((i - (int)1) * (int)4)),val18);
            				}
            			}
HXLINE( 538)			{
HXLINE( 538)				i = (i + (int)1);
HXDLIN( 538)				Float val19 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)3)) );
HXDLIN( 538)				{
HXLINE( 538)					int dest20 = dest->byteOffset;
HXDLIN( 538)					::__hxcpp_memory_set_float(dest->buffer->b,(dest20 + ((i - (int)1) * (int)4)),val19);
            				}
            			}
HXLINE( 540)			{
HXLINE( 540)				i = (i + (int)1);
HXDLIN( 540)				Float val20 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)4)) );
HXDLIN( 540)				{
HXLINE( 540)					int dest21 = dest->byteOffset;
HXDLIN( 540)					::__hxcpp_memory_set_float(dest->buffer->b,(dest21 + ((i - (int)1) * (int)4)),val20);
            				}
            			}
HXLINE( 541)			{
HXLINE( 541)				i = (i + (int)1);
HXDLIN( 541)				Float val21 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)5)) );
HXDLIN( 541)				{
HXLINE( 541)					int dest22 = dest->byteOffset;
HXDLIN( 541)					::__hxcpp_memory_set_float(dest->buffer->b,(dest22 + ((i - (int)1) * (int)4)),val21);
            				}
            			}
HXLINE( 542)			{
HXLINE( 542)				i = (i + (int)1);
HXDLIN( 542)				Float val22 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)6)) );
HXDLIN( 542)				{
HXLINE( 542)					int dest23 = dest->byteOffset;
HXDLIN( 542)					::__hxcpp_memory_set_float(dest->buffer->b,(dest23 + ((i - (int)1) * (int)4)),val22);
            				}
            			}
HXLINE( 543)			{
HXLINE( 543)				i = (i + (int)1);
HXDLIN( 543)				Float val23 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)7)) );
HXDLIN( 543)				{
HXLINE( 543)					int dest24 = dest->byteOffset;
HXDLIN( 543)					::__hxcpp_memory_set_float(dest->buffer->b,(dest24 + ((i - (int)1) * (int)4)),val23);
            				}
            			}
HXLINE( 545)			{
HXLINE( 545)				i = (i + (int)1);
HXDLIN( 545)				Float val24 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)8)) );
HXDLIN( 545)				{
HXLINE( 545)					int dest25 = dest->byteOffset;
HXDLIN( 545)					::__hxcpp_memory_set_float(dest->buffer->b,(dest25 + ((i - (int)1) * (int)4)),val24);
            				}
            			}
HXLINE( 546)			{
HXLINE( 546)				i = (i + (int)1);
HXDLIN( 546)				Float val25 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)9)) );
HXDLIN( 546)				{
HXLINE( 546)					int dest26 = dest->byteOffset;
HXDLIN( 546)					::__hxcpp_memory_set_float(dest->buffer->b,(dest26 + ((i - (int)1) * (int)4)),val25);
            				}
            			}
HXLINE( 547)			{
HXLINE( 547)				i = (i + (int)1);
HXDLIN( 547)				Float val26 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)10)) );
HXDLIN( 547)				{
HXLINE( 547)					int dest27 = dest->byteOffset;
HXDLIN( 547)					::__hxcpp_memory_set_float(dest->buffer->b,(dest27 + ((i - (int)1) * (int)4)),val26);
            				}
            			}
HXLINE( 548)			{
HXLINE( 548)				i = (i + (int)1);
HXDLIN( 548)				Float val27 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)11)) );
HXDLIN( 548)				{
HXLINE( 548)					int dest28 = dest->byteOffset;
HXDLIN( 548)					::__hxcpp_memory_set_float(dest->buffer->b,(dest28 + ((i - (int)1) * (int)4)),val27);
            				}
            			}
HXLINE( 550)			{
HXLINE( 550)				i = (i + (int)1);
HXDLIN( 550)				Float val28 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)12)) );
HXDLIN( 550)				{
HXLINE( 550)					int dest29 = dest->byteOffset;
HXDLIN( 550)					::__hxcpp_memory_set_float(dest->buffer->b,(dest29 + ((i - (int)1) * (int)4)),val28);
            				}
            			}
HXLINE( 551)			{
HXLINE( 551)				i = (i + (int)1);
HXDLIN( 551)				Float val29 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)13)) );
HXDLIN( 551)				{
HXLINE( 551)					int dest30 = dest->byteOffset;
HXDLIN( 551)					::__hxcpp_memory_set_float(dest->buffer->b,(dest30 + ((i - (int)1) * (int)4)),val29);
            				}
            			}
HXLINE( 552)			{
HXLINE( 552)				i = (i + (int)1);
HXDLIN( 552)				Float val30 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)14)) );
HXDLIN( 552)				{
HXLINE( 552)					int dest31 = dest->byteOffset;
HXDLIN( 552)					::__hxcpp_memory_set_float(dest->buffer->b,(dest31 + ((i - (int)1) * (int)4)),val30);
            				}
            			}
HXLINE( 553)			{
HXLINE( 553)				i = (i + (int)1);
HXDLIN( 553)				Float val31 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(int)15)) );
HXDLIN( 553)				{
HXLINE( 553)					int dest32 = dest->byteOffset;
HXDLIN( 553)					::__hxcpp_memory_set_float(dest->buffer->b,(dest32 + ((i - (int)1) * (int)4)),val31);
            				}
            			}
            		}
HXLINE( 557)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 559)			context->_hx___program->_hx___markDirty(isVertex,firstRegister,(int)4);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setProgramConstantsFromMatrix,(void))

void GLContext3D_obj::setProgramConstantsFromVector( ::openfl::display3D::Context3D context, ::Dynamic programType,int firstRegister, ::openfl::_Vector::AbstractVector data,hx::Null< int >  __o_numRegisters){
int numRegisters = __o_numRegisters.Default(-1);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_566_setProgramConstantsFromVector)
HXLINE( 568)		if ((numRegisters == (int)-1)) {
HXLINE( 570)			numRegisters = ((int)::openfl::_Vector::IVector_obj::get_length(data->data) >> (int)(int)2);
            		}
HXLINE( 574)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 575)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 575)		if (isVertex) {
HXLINE( 575)			dest = context->_hx___vertexConstants;
            		}
            		else {
HXLINE( 575)			dest = context->_hx___fragmentConstants;
            		}
HXLINE( 576)		 ::openfl::_Vector::AbstractVector source = data;
HXLINE( 578)		int sourceIndex = (int)0;
HXLINE( 579)		int destIndex = (firstRegister * (int)4);
HXLINE( 581)		{
HXLINE( 581)			int _g1 = (int)0;
HXDLIN( 581)			int _g = numRegisters;
HXDLIN( 581)			while((_g1 < _g)){
HXLINE( 581)				_g1 = (_g1 + (int)1);
HXDLIN( 581)				int i = (_g1 - (int)1);
HXLINE( 583)				{
HXLINE( 583)					destIndex = (destIndex + (int)1);
HXDLIN( 583)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 583)					Float val = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(sourceIndex - (int)1))) );
HXDLIN( 583)					{
HXLINE( 583)						int dest1 = dest->byteOffset;
HXDLIN( 583)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((destIndex - (int)1) * (int)4)),val);
            					}
            				}
HXLINE( 584)				{
HXLINE( 584)					destIndex = (destIndex + (int)1);
HXDLIN( 584)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 584)					Float val1 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(sourceIndex - (int)1))) );
HXDLIN( 584)					{
HXLINE( 584)						int dest2 = dest->byteOffset;
HXDLIN( 584)						::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((destIndex - (int)1) * (int)4)),val1);
            					}
            				}
HXLINE( 585)				{
HXLINE( 585)					destIndex = (destIndex + (int)1);
HXDLIN( 585)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 585)					Float val2 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(sourceIndex - (int)1))) );
HXDLIN( 585)					{
HXLINE( 585)						int dest3 = dest->byteOffset;
HXDLIN( 585)						::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((destIndex - (int)1) * (int)4)),val2);
            					}
            				}
HXLINE( 586)				{
HXLINE( 586)					destIndex = (destIndex + (int)1);
HXDLIN( 586)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 586)					Float val3 = ( (Float)(::openfl::_Vector::IVector_obj::get(source->data,(sourceIndex - (int)1))) );
HXDLIN( 586)					{
HXLINE( 586)						int dest4 = dest->byteOffset;
HXDLIN( 586)						::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((destIndex - (int)1) * (int)4)),val3);
            					}
            				}
            			}
            		}
HXLINE( 590)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 592)			context->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setProgramConstantsFromVector,(void))

void GLContext3D_obj::setRenderToBackBuffer( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_599_setRenderToBackBuffer)
HXLINE( 601)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 603)		gl->bindFramebuffer(gl->FRAMEBUFFER,null());
HXLINE( 604)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 606)		gl->frontFace(gl->CCW);
HXLINE( 607)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 609)		context->_hx___renderToTexture = null();
HXLINE( 610)		context->_hx___scissorRectangle = null();
HXLINE( 611)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBackbufferViewport();
HXLINE( 612)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateScissorRectangle();
HXLINE( 613)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateDepthAndStencilState();
HXLINE( 615)		{
HXLINE( 615)			 ::lime::utils::ArrayBufferView this1 = context->_hx___positionScale;
HXDLIN( 615)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)1.0));
            		}
HXLINE( 617)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 619)			context->_hx___program->_hx___setPositionScale(context->_hx___positionScale);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,setRenderToBackBuffer,(void))

void GLContext3D_obj::setRenderToTexture( ::openfl::display3D::Context3D context, ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias,hx::Null< int >  __o_surfaceSelector){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
int antiAlias = __o_antiAlias.Default(0);
int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_626_setRenderToTexture)
HXLINE( 628)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 630)		int width = (int)0;
HXLINE( 631)		int height = (int)0;
HXLINE( 633)		if (hx::IsNull( context->_hx___framebuffer )) {
HXLINE( 635)			context->_hx___framebuffer = gl->createFramebuffer();
HXLINE( 636)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 640)		gl->bindFramebuffer(gl->FRAMEBUFFER,context->_hx___framebuffer);
HXLINE( 641)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 643)		if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE( 645)			 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(texture) );
HXLINE( 646)			width = texture2D->_hx___width;
HXLINE( 647)			height = texture2D->_hx___height;
HXLINE( 649)			gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,texture->_hx___textureID,(int)0);
HXLINE( 650)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE( 652)			if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE( 654)				 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(texture) );
HXLINE( 655)				width = rectTexture->_hx___width;
HXLINE( 656)				height = rectTexture->_hx___height;
HXLINE( 658)				gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,texture->_hx___textureID,(int)0);
HXLINE( 659)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 661)				if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::CubeTexture >())) {
HXLINE( 663)					 ::openfl::display3D::textures::CubeTexture cubeTexture = ( ( ::openfl::display3D::textures::CubeTexture)(texture) );
HXLINE( 664)					width = cubeTexture->_hx___size;
HXLINE( 665)					height = cubeTexture->_hx___size;
HXLINE( 667)					{
HXLINE( 667)						int _g = (int)0;
HXDLIN( 667)						while((_g < (int)6)){
HXLINE( 667)							_g = (_g + (int)1);
HXDLIN( 667)							int i = (_g - (int)1);
HXLINE( 669)							int gl1 = gl->FRAMEBUFFER;
HXDLIN( 669)							int gl2 = gl->COLOR_ATTACHMENT0;
HXDLIN( 669)							gl->framebufferTexture2D(gl1,gl2,(gl->TEXTURE_CUBE_MAP_POSITIVE_X + i),texture->_hx___textureID,(int)0);
HXLINE( 670)							::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            						}
            					}
            				}
            				else {
HXLINE( 676)					HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Invalid texture",92,3e,59,9a),null()));
            				}
            			}
            		}
HXLINE( 680)		if (enableDepthAndStencil) {
HXLINE( 682)			if (context->_hx___supportsPackedDepthStencil) {
HXLINE( 684)				if (hx::IsNull( context->_hx___depthStencilRenderBuffer )) {
HXLINE( 686)					context->_hx___depthStencilRenderBuffer = gl->createRenderbuffer();
HXLINE( 687)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 691)				gl->bindRenderbuffer(gl->RENDERBUFFER,context->_hx___depthStencilRenderBuffer);
HXLINE( 692)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 693)				gl->renderbufferStorage(gl->RENDERBUFFER,::openfl::display3D::Context3D_obj::DEPTH_STENCIL,width,height);
HXLINE( 694)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 696)				gl->framebufferRenderbuffer(gl->FRAMEBUFFER,gl->DEPTH_STENCIL_ATTACHMENT,gl->RENDERBUFFER,context->_hx___depthStencilRenderBuffer);
HXLINE( 697)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 701)				if (hx::IsNull( context->_hx___depthRenderBuffer )) {
HXLINE( 703)					context->_hx___depthRenderBuffer = gl->createRenderbuffer();
HXLINE( 704)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 708)				if (hx::IsNull( context->_hx___stencilRenderBuffer )) {
HXLINE( 710)					context->_hx___stencilRenderBuffer = gl->createRenderbuffer();
HXLINE( 711)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 715)				gl->bindRenderbuffer(gl->RENDERBUFFER,context->_hx___depthRenderBuffer);
HXLINE( 716)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 717)				gl->renderbufferStorage(gl->RENDERBUFFER,gl->DEPTH_COMPONENT16,width,height);
HXLINE( 718)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 719)				gl->bindRenderbuffer(gl->RENDERBUFFER,context->_hx___stencilRenderBuffer);
HXLINE( 720)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 721)				gl->renderbufferStorage(gl->RENDERBUFFER,gl->STENCIL_INDEX8,width,height);
HXLINE( 722)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 724)				gl->framebufferRenderbuffer(gl->FRAMEBUFFER,gl->DEPTH_ATTACHMENT,gl->RENDERBUFFER,context->_hx___depthRenderBuffer);
HXLINE( 725)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 726)				gl->framebufferRenderbuffer(gl->FRAMEBUFFER,gl->STENCIL_ATTACHMENT,gl->RENDERBUFFER,context->_hx___stencilRenderBuffer);
HXLINE( 727)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
HXLINE( 731)			gl->bindRenderbuffer(gl->RENDERBUFFER,null());
HXLINE( 732)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 736)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___setViewport((int)0,(int)0,width,height);
HXLINE( 738)		if (context->_hx___enableErrorChecking) {
HXLINE( 740)			int code = gl->checkFramebufferStatus(gl->FRAMEBUFFER);
HXLINE( 742)			if ((code != gl->FRAMEBUFFER_COMPLETE)) {
HXLINE( 744)				::haxe::Log_obj::trace(HX_("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",55,db,0b,ac),hx::SourceInfo(HX_("GLContext3D.hx",23,90,06,f9),744,HX_("openfl._internal.stage3D.opengl.GLContext3D",4b,37,5a,da),HX_("setRenderToTexture",e8,2c,92,46)));
            			}
            		}
HXLINE( 750)		{
HXLINE( 750)			 ::lime::utils::ArrayBufferView this1 = context->_hx___positionScale;
HXDLIN( 750)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)-1.0));
            		}
HXLINE( 752)		if (hx::IsNotNull( context->_hx___program )) {
HXLINE( 754)			context->_hx___program->_hx___setPositionScale(context->_hx___positionScale);
            		}
HXLINE( 758)		gl->frontFace(gl->CW);
HXLINE( 759)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 761)		context->_hx___renderToTexture = texture;
HXLINE( 762)		context->_hx___scissorRectangle = null();
HXLINE( 763)		context->_hx___rttDepthAndStencil = enableDepthAndStencil;
HXLINE( 764)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateScissorRectangle();
HXLINE( 765)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateDepthAndStencilState();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setRenderToTexture,(void))

void GLContext3D_obj::setSamplerStateAt( ::openfl::display3D::Context3D context,int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_770_setSamplerStateAt)
HXLINE( 772)		bool _hx_tmp;
HXDLIN( 772)		if ((sampler >= (int)0)) {
HXLINE( 772)			_hx_tmp = (sampler > (int)8);
            		}
            		else {
HXLINE( 772)			_hx_tmp = true;
            		}
HXDLIN( 772)		if (_hx_tmp) {
HXLINE( 774)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("sampler out of range",de,61,c4,36),null()));
            		}
HXLINE( 778)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 779)		 ::openfl::_internal::stage3D::SamplerState state = context->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXLINE( 781)		 ::Dynamic _hx_switch_0 = wrap;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 785)			state->set_wrapModeS(gl->CLAMP_TO_EDGE);
HXLINE( 786)			state->set_wrapModeT(gl->CLAMP_TO_EDGE);
HXLINE( 783)			goto _hx_goto_26;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 790)			state->set_wrapModeS(gl->CLAMP_TO_EDGE);
HXLINE( 791)			state->set_wrapModeT(gl->REPEAT);
HXLINE( 788)			goto _hx_goto_26;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 795)			state->set_wrapModeS(gl->REPEAT);
HXLINE( 796)			state->set_wrapModeT(gl->REPEAT);
HXLINE( 793)			goto _hx_goto_26;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 800)			state->set_wrapModeS(gl->REPEAT);
HXLINE( 801)			state->set_wrapModeT(gl->CLAMP_TO_EDGE);
HXLINE( 798)			goto _hx_goto_26;
            		}
            		/* default */{
HXLINE( 805)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("wrap bad enum",52,1c,4c,59),null()));
            		}
            		_hx_goto_26:;
HXLINE( 809)		 ::Dynamic _hx_switch_1 = filter;
            		if (  (_hx_switch_1==(int)0) ){
HXLINE( 857)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 859)				Float _hx_tmp1;
HXDLIN( 859)				if ((context->_hx___maxAnisotropyTexture2D < (int)16)) {
HXLINE( 859)					_hx_tmp1 = context->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 859)					_hx_tmp1 = (int)16;
            				}
HXDLIN( 859)				state->set_maxAniso(_hx_tmp1);
            			}
HXLINE( 857)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)1) ){
HXLINE( 833)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 835)				Float _hx_tmp2;
HXDLIN( 835)				if ((context->_hx___maxAnisotropyTexture2D < (int)2)) {
HXLINE( 835)					_hx_tmp2 = context->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 835)					_hx_tmp2 = (int)2;
            				}
HXDLIN( 835)				state->set_maxAniso(_hx_tmp2);
            			}
HXLINE( 833)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)2) ){
HXLINE( 841)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 843)				Float _hx_tmp3;
HXDLIN( 843)				if ((context->_hx___maxAnisotropyTexture2D < (int)4)) {
HXLINE( 843)					_hx_tmp3 = context->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 843)					_hx_tmp3 = (int)4;
            				}
HXDLIN( 843)				state->set_maxAniso(_hx_tmp3);
            			}
HXLINE( 841)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)3) ){
HXLINE( 849)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 851)				Float _hx_tmp4;
HXDLIN( 851)				if ((context->_hx___maxAnisotropyTexture2D < (int)8)) {
HXLINE( 851)					_hx_tmp4 = context->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 851)					_hx_tmp4 = (int)8;
            				}
HXDLIN( 851)				state->set_maxAniso(_hx_tmp4);
            			}
HXLINE( 849)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)4) ){
HXLINE( 813)			state->set_magFilter(gl->LINEAR);
HXLINE( 815)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 817)				state->set_maxAniso((int)1);
            			}
HXLINE( 811)			goto _hx_goto_27;
            		}
            		if (  (_hx_switch_1==(int)5) ){
HXLINE( 823)			state->set_magFilter(gl->NEAREST);
HXLINE( 825)			if (context->_hx___supportsAnisotropicFiltering) {
HXLINE( 827)				state->set_maxAniso((int)1);
            			}
HXLINE( 821)			goto _hx_goto_27;
            		}
            		/* default */{
HXLINE( 865)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("filter bad enum",a4,08,ed,96),null()));
            		}
            		_hx_goto_27:;
HXLINE( 869)		 ::Dynamic _hx_switch_2 = mipfilter;
            		if (  (_hx_switch_2==(int)0) ){
HXLINE( 873)			int _hx_tmp5;
HXDLIN( 873)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 873)				_hx_tmp5 = gl->NEAREST_MIPMAP_LINEAR;
            			}
            			else {
HXLINE( 873)				_hx_tmp5 = gl->LINEAR_MIPMAP_LINEAR;
            			}
HXDLIN( 873)			state->set_minFilter(_hx_tmp5);
HXDLIN( 873)			goto _hx_goto_28;
            		}
            		if (  (_hx_switch_2==(int)1) ){
HXLINE( 877)			int _hx_tmp6;
HXDLIN( 877)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 877)				_hx_tmp6 = gl->NEAREST_MIPMAP_NEAREST;
            			}
            			else {
HXLINE( 877)				_hx_tmp6 = gl->LINEAR_MIPMAP_NEAREST;
            			}
HXDLIN( 877)			state->set_minFilter(_hx_tmp6);
HXDLIN( 877)			goto _hx_goto_28;
            		}
            		if (  (_hx_switch_2==(int)2) ){
HXLINE( 881)			int _hx_tmp7;
HXDLIN( 881)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 881)				_hx_tmp7 = gl->NEAREST;
            			}
            			else {
HXLINE( 881)				_hx_tmp7 = gl->LINEAR;
            			}
HXDLIN( 881)			state->set_minFilter(_hx_tmp7);
HXDLIN( 881)			goto _hx_goto_28;
            		}
            		/* default */{
HXLINE( 885)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("mipfiter bad enum",b2,1b,09,c4),null()));
            		}
            		_hx_goto_28:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setSamplerStateAt,(void))

void GLContext3D_obj::setScissorRectangle( ::openfl::display3D::Context3D context, ::openfl::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_892_setScissorRectangle)
HXLINE( 894)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 895)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = context->_hx___renderSession->gl;
HXLINE( 897)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 897)		if (hx::IsNotNull( rectangle )) {
HXLINE( 897)			_hx_tmp = rectangle->clone();
            		}
            		else {
HXLINE( 897)			_hx_tmp = null();
            		}
HXDLIN( 897)		context->_hx___scissorRectangle = _hx_tmp;
HXLINE( 898)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateScissorRectangle();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLContext3D_obj,setScissorRectangle,(void))

void GLContext3D_obj::setStencilActions( ::openfl::display3D::Context3D context, ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
 ::Dynamic triangleFace = __o_triangleFace.Default(2);
 ::Dynamic compareMode = __o_compareMode.Default(0);
 ::Dynamic actionOnBothPass = __o_actionOnBothPass.Default(5);
 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail.Default(5);
 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail.Default(5);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_903_setStencilActions)
HXLINE( 905)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 906)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = context->_hx___renderSession->gl;
HXLINE( 908)		context->_hx___stencilCompareMode = compareMode;
HXLINE( 909)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN( 909)		int _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLTriangleFace(triangleFace);
HXDLIN( 909)		int _hx_tmp2 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLStencilAction(actionOnDepthPassStencilFail);
HXDLIN( 909)		int _hx_tmp3 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLStencilAction(actionOnDepthFail);
HXDLIN( 909)		_hx_tmp->stencilOpSeparate(_hx_tmp1,_hx_tmp2,_hx_tmp3,::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLStencilAction(actionOnBothPass));
HXLINE( 910)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp4 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN( 910)		int _hx_tmp5 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLCompareMode(context->_hx___stencilCompareMode);
HXDLIN( 910)		_hx_tmp4->stencilFunc(_hx_tmp5,context->_hx___stencilRef,context->_hx___stencilReadMask);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GLContext3D_obj,setStencilActions,(void))

void GLContext3D_obj::setStencilReferenceValue( ::openfl::display3D::Context3D context,int referenceValue,hx::Null< int >  __o_readMask,hx::Null< int >  __o_writeMask){
int readMask = __o_readMask.Default(255);
int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_915_setStencilReferenceValue)
HXLINE( 917)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE( 918)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = context->_hx___renderSession->gl;
HXLINE( 920)		context->_hx___stencilReadMask = readMask;
HXLINE( 921)		context->_hx___stencilRef = referenceValue;
HXLINE( 923)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN( 923)		int _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___getGLCompareMode(context->_hx___stencilCompareMode);
HXDLIN( 923)		_hx_tmp->stencilFunc(_hx_tmp1,context->_hx___stencilRef,context->_hx___stencilReadMask);
HXLINE( 924)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->stencilMask(writeMask);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLContext3D_obj,setStencilReferenceValue,(void))

void GLContext3D_obj::setTextureAt( ::openfl::display3D::Context3D context,int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_931_setTextureAt)
HXDLIN( 931)		if (hx::IsNotEq( ( ( ::openfl::display3D::textures::TextureBase)(::openfl::_Vector::IVector_obj::get(context->_hx___samplerTextures->data,sampler)) ),texture )) {
HXLINE( 933)			::openfl::_Vector::IVector_obj::set(context->_hx___samplerTextures->data,sampler,texture);
HXLINE( 934)			 ::openfl::display3D::Context3D context1 = context;
HXDLIN( 934)			context1->_hx___samplerDirty = ((int)context1->_hx___samplerDirty | (int)((int)(int)1 << (int)sampler));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLContext3D_obj,setTextureAt,(void))

void GLContext3D_obj::setVertexBufferAt( ::openfl::display3D::Context3D context,int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::Dynamic __o_format){
int bufferOffset = __o_bufferOffset.Default(0);
 ::Dynamic format = __o_format.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_941_setVertexBufferAt)
HXLINE( 943)		 ::lime::_backend::native::NativeGLRenderContext gl = context->_hx___renderSession->gl;
HXLINE( 945)		if (hx::IsNull( buffer )) {
HXLINE( 947)			gl->disableVertexAttribArray(index);
HXLINE( 948)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 950)			gl->bindBuffer(gl->ARRAY_BUFFER,null());
HXLINE( 951)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 953)			return;
            		}
HXLINE( 957)		gl->enableVertexAttribArray(index);
HXLINE( 958)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 960)		gl->bindBuffer(gl->ARRAY_BUFFER,buffer->_hx___id);
HXLINE( 961)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 963)		int byteOffset = (bufferOffset * (int)4);
HXLINE( 965)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 969)			int gl1 = gl->UNSIGNED_BYTE;
HXDLIN( 969)			int buffer1 = buffer->_hx___stride;
HXDLIN( 969)			gl->vertexAttribPointer(index,(int)4,gl1,true,buffer1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE( 970)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 967)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 989)			int gl2 = gl->FLOAT;
HXDLIN( 989)			int buffer2 = buffer->_hx___stride;
HXDLIN( 989)			gl->vertexAttribPointer(index,(int)1,gl2,false,buffer2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE( 990)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 987)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 984)			int gl3 = gl->FLOAT;
HXDLIN( 984)			int buffer3 = buffer->_hx___stride;
HXDLIN( 984)			gl->vertexAttribPointer(index,(int)2,gl3,false,buffer3,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE( 985)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 982)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 979)			int gl4 = gl->FLOAT;
HXDLIN( 979)			int buffer4 = buffer->_hx___stride;
HXDLIN( 979)			gl->vertexAttribPointer(index,(int)3,gl4,false,buffer4,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE( 980)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 977)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 974)			int gl5 = gl->FLOAT;
HXDLIN( 974)			int buffer5 = buffer->_hx___stride;
HXDLIN( 974)			gl->vertexAttribPointer(index,(int)4,gl5,false,buffer5,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromInt(byteOffset));
HXLINE( 975)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 972)			goto _hx_goto_34;
            		}
            		/* default */{
HXLINE( 994)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_34:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLContext3D_obj,setVertexBufferAt,(void))

void GLContext3D_obj::_hx___flushSamplerState(){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1001___flushSamplerState)
HXLINE(1003)		int sampler = (int)0;
HXLINE(1005)		while((::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerDirty != (int)0)){
HXLINE(1007)			int _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerDirty;
HXDLIN(1007)			if ((((int)_hx_tmp & (int)((int)(int)1 << (int)sampler)) != (int)0)) {
HXLINE(1009)				if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateActiveTextureSample(sampler)) {
HXLINE(1011)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN(1011)					_hx_tmp1->activeTexture((::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->TEXTURE0 + sampler));
HXLINE(1012)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE(1016)				 ::openfl::display3D::textures::TextureBase texture = ( ( ::openfl::display3D::textures::TextureBase)(::openfl::_Vector::IVector_obj::get(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerTextures->data,sampler)) );
HXLINE(1018)				if (hx::IsNotNull( texture )) {
HXLINE(1020)					int target = texture->_hx___textureTarget;
HXLINE(1022)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp2 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN(1022)					_hx_tmp2->bindTexture(target,texture->_hx___getTexture());
HXLINE(1023)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1025)					texture->_hx___setSamplerState(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >());
            				}
            				else {
HXLINE(1029)					::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->bindTexture(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->TEXTURE_2D,null());
HXLINE(1030)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE(1034)				 ::openfl::display3D::Context3D _hx_tmp3 = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context;
HXDLIN(1034)				_hx_tmp3->_hx___samplerDirty = ((int)_hx_tmp3->_hx___samplerDirty & (int)~(((int)(int)1 << (int)sampler)));
            			}
HXLINE(1038)			sampler = (sampler + (int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___flushSamplerState,(void))

int GLContext3D_obj::_hx___getGLCompareMode( ::Dynamic compareMode){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1047___getGLCompareMode)
HXDLIN(1047)		 ::Dynamic _hx_switch_0 = compareMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1049)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ALWAYS;
HXDLIN(1049)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1050)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->EQUAL;
HXDLIN(1050)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1051)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->GREATER;
HXDLIN(1051)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1052)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->GEQUAL;
HXDLIN(1052)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1053)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->LESS;
HXDLIN(1053)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1054)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->LEQUAL;
HXDLIN(1054)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1055)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->NEVER;
HXDLIN(1055)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1056)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->NOTEQUAL;
HXDLIN(1056)			goto _hx_goto_38;
            		}
            		/* default */{
HXLINE(1057)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->EQUAL;
            		}
            		_hx_goto_38:;
HXLINE(1047)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___getGLCompareMode,return )

int GLContext3D_obj::_hx___getGLTriangleFace( ::Dynamic triangleFace){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1066___getGLTriangleFace)
HXDLIN(1066)		 ::Dynamic _hx_switch_0 = triangleFace;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1069)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->BACK;
HXDLIN(1069)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1068)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->FRONT;
HXDLIN(1068)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1070)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->FRONT_AND_BACK;
HXDLIN(1070)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1071)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->NONE;
HXDLIN(1071)			goto _hx_goto_40;
            		}
            		/* default */{
HXLINE(1072)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->FRONT_AND_BACK;
            		}
            		_hx_goto_40:;
HXLINE(1066)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___getGLTriangleFace,return )

int GLContext3D_obj::_hx___getGLStencilAction( ::Dynamic stencilAction){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1081___getGLStencilAction)
HXDLIN(1081)		 ::Dynamic _hx_switch_0 = stencilAction;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1083)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DECR;
HXDLIN(1083)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1084)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DECR_WRAP;
HXDLIN(1084)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1085)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->INCR;
HXDLIN(1085)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1086)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->INCR_WRAP;
HXDLIN(1086)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1087)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->INVERT;
HXDLIN(1087)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1088)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->KEEP;
HXDLIN(1088)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1089)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->REPLACE;
HXDLIN(1089)			goto _hx_goto_42;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1090)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ZERO;
HXDLIN(1090)			goto _hx_goto_42;
            		}
            		/* default */{
HXLINE(1091)			return ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->KEEP;
            		}
            		_hx_goto_42:;
HXLINE(1081)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___getGLStencilAction,return )

bool GLContext3D_obj::_hx___hasGLExtension(::String name){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1100___hasGLExtension)
HXDLIN(1100)		return (::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->getSupportedExtensions()->indexOf(name,null()) != (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___hasGLExtension,return )

void GLContext3D_obj::_hx___setViewport(int originX,int originY,int width,int height){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1105___setViewport)
HXLINE(1107)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture )) {
HXLINE(1107)			originY = (originY * (int)-1);
            		}
HXLINE(1109)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateViewport(originX,originY,width,height)) {
HXLINE(1111)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->viewport(originX,originY,width,height);
HXLINE(1112)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLContext3D_obj,_hx___setViewport,(void))

void GLContext3D_obj::_hx___updateDepthAndStencilState(){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1205___updateDepthAndStencilState)
HXLINE(1207)		bool depthAndStencil;
HXDLIN(1207)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture )) {
HXLINE(1207)			depthAndStencil = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___rttDepthAndStencil;
            		}
            		else {
HXLINE(1207)			depthAndStencil = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___backBufferEnableDepthAndStencil;
            		}
HXLINE(1209)		if (depthAndStencil) {
HXLINE(1211)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->enable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DEPTH_TEST);
HXLINE(1212)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1213)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->enable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->STENCIL_TEST);
HXLINE(1214)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE(1218)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->disable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DEPTH_TEST);
HXLINE(1219)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1220)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->disable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->STENCIL_TEST);
HXLINE(1221)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___updateDepthAndStencilState,(void))

void GLContext3D_obj::_hx___updateBlendFactorsTEMP( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1228___updateBlendFactorsTEMP)
HXLINE(1230)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE(1231)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = context->_hx___renderSession->gl;
HXLINE(1233)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBlendFactors();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___updateBlendFactorsTEMP,(void))

void GLContext3D_obj::_hx___updateBlendFactors(){
            	HX_GC_STACKFRAME(&_hx_pos_829f03b13519819f_1238___updateBlendFactors)
HXLINE(1240)		bool _hx_tmp;
HXDLIN(1240)		if (hx::IsNotNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor )) {
HXLINE(1240)			_hx_tmp = hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor );
            		}
            		else {
HXLINE(1240)			_hx_tmp = true;
            		}
HXDLIN(1240)		if (_hx_tmp) {
HXLINE(1242)			return;
            		}
HXLINE(1246)		int src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE;
HXLINE(1247)		int dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ZERO;
HXLINE(1248)		{
HXLINE(1248)			 ::Dynamic _g = ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor;
HXDLIN(1248)			 ::Dynamic _hx_switch_0 = _g;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE(1253)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DST_ALPHA;
HXDLIN(1253)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE(1254)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DST_COLOR;
HXDLIN(1254)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE(1250)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE;
HXDLIN(1250)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE(1256)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_DST_ALPHA;
HXDLIN(1256)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE(1257)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_DST_COLOR;
HXDLIN(1257)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE(1255)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(1255)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE(1252)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SRC_ALPHA;
HXDLIN(1252)				goto _hx_goto_48;
            			}
            			if (  (_hx_switch_0==(int)9) ){
HXLINE(1251)				src = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ZERO;
HXDLIN(1251)				goto _hx_goto_48;
            			}
            			/* default */{
HXLINE(1259)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_48:;
            		}
HXLINE(1263)		{
HXLINE(1263)			 ::Dynamic _g1 = ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor;
HXDLIN(1263)			 ::Dynamic _hx_switch_1 = _g1;
            			if (  (_hx_switch_1==(int)0) ){
HXLINE(1269)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->DST_ALPHA;
HXDLIN(1269)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_1==(int)2) ){
HXLINE(1265)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE;
HXDLIN(1265)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_1==(int)3) ){
HXLINE(1272)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_DST_ALPHA;
HXDLIN(1272)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_1==(int)5) ){
HXLINE(1270)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_SRC_ALPHA;
HXDLIN(1270)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_1==(int)6) ){
HXLINE(1271)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ONE_MINUS_SRC_COLOR;
HXDLIN(1271)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_1==(int)7) ){
HXLINE(1267)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SRC_ALPHA;
HXDLIN(1267)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_1==(int)8) ){
HXLINE(1268)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SRC_COLOR;
HXDLIN(1268)				goto _hx_goto_49;
            			}
            			if (  (_hx_switch_1==(int)9) ){
HXLINE(1266)				dest = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->ZERO;
HXDLIN(1266)				goto _hx_goto_49;
            			}
            			/* default */{
HXLINE(1274)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_49:;
            		}
HXLINE(1278)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->enable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->BLEND);
HXLINE(1279)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1280)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->blendFunc(src,dest);
HXLINE(1281)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___updateBlendFactors,(void))

void GLContext3D_obj::_hx___updateScissorRectangle(){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1286___updateScissorRectangle)
HXLINE(1288)		if (hx::IsNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle )) {
HXLINE(1290)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->disable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SCISSOR_TEST);
HXLINE(1291)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1292)			return;
            		}
HXLINE(1296)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->enable(::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl->SCISSOR_TEST);
HXLINE(1297)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1299)		int height = (int)0;
HXLINE(1300)		int offsetX = (int)0;
HXLINE(1301)		int offsetY = (int)0;
HXLINE(1303)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture )) {
HXLINE(1305)			if (::Std_obj::is(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE(1307)				 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture) );
HXLINE(1308)				height = texture2D->_hx___height;
            			}
            			else {
HXLINE(1310)				if (::Std_obj::is(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(1312)					 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture) );
HXLINE(1313)					height = rectTexture->_hx___height;
            				}
            			}
            		}
            		else {
HXLINE(1319)			height = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferHeight;
HXLINE(1320)			offsetX = ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->get_x());
HXLINE(1321)			offsetY = ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->get_y());
            		}
HXLINE(1325)		 ::lime::_backend::native::NativeGLRenderContext _hx_tmp = ::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl;
HXDLIN(1325)		int _hx_tmp1 = (::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->x) + offsetX);
HXLINE(1326)		int _hx_tmp2 = (height - ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->y));
HXDLIN(1326)		int _hx_tmp3 = ((_hx_tmp2 - ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->height)) + offsetY);
HXLINE(1327)		int _hx_tmp4 = ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->width);
HXLINE(1325)		_hx_tmp->scissor(_hx_tmp1,_hx_tmp3,_hx_tmp4,::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___scissorRectangle->height));
HXLINE(1330)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___updateScissorRectangle,(void))

void GLContext3D_obj::_hx___updateBackbufferViewportTEMP( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1335___updateBackbufferViewportTEMP)
HXLINE(1337)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::context = context;
HXLINE(1338)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::gl = context->_hx___renderSession->gl;
HXLINE(1340)		::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___updateBackbufferViewport();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GLContext3D_obj,_hx___updateBackbufferViewportTEMP,(void))

void GLContext3D_obj::_hx___updateBackbufferViewport(){
            	HX_STACKFRAME(&_hx_pos_829f03b13519819f_1345___updateBackbufferViewport)
HXLINE(1347)		if (!(::openfl::display::Stage3D_obj::_hx___active)) {
HXLINE(1349)			::openfl::display::Stage3D_obj::_hx___active = true;
HXLINE(1350)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderSession->renderer->clear();
            		}
HXLINE(1354)		bool _hx_tmp;
HXDLIN(1354)		bool _hx_tmp1;
HXDLIN(1354)		if (hx::IsNull( ::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___renderToTexture )) {
HXLINE(1354)			_hx_tmp1 = (::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferWidth > (int)0);
            		}
            		else {
HXLINE(1354)			_hx_tmp1 = false;
            		}
HXDLIN(1354)		if (_hx_tmp1) {
HXLINE(1354)			_hx_tmp = (::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferHeight > (int)0);
            		}
            		else {
HXLINE(1354)			_hx_tmp = false;
            		}
HXDLIN(1354)		if (_hx_tmp) {
HXLINE(1356)			int _hx_tmp2 = ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->get_x());
HXDLIN(1356)			int _hx_tmp3 = ::Std_obj::_hx_int(::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->_hx___stage3D->get_y());
HXDLIN(1356)			::openfl::_internal::stage3D::opengl::GLContext3D_obj::_hx___setViewport(_hx_tmp2,_hx_tmp3,::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferWidth,::openfl::_internal::stage3D::opengl::GLContext3D_obj::context->backBufferHeight);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLContext3D_obj,_hx___updateBackbufferViewport,(void))


GLContext3D_obj::GLContext3D_obj()
{
}

bool GLContext3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { outValue = ( gl ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { outValue = ( context ); return true; }
		if (HX_FIELD_EQ(inName,"dispose") ) { outValue = dispose_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"present") ) { outValue = present_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setCulling") ) { outValue = setCulling_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setProgram") ) { outValue = setProgram_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setColorMask") ) { outValue = setColorMask_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { outValue = setDepthTest_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { outValue = setTextureAt_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { outValue = drawTriangles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__setViewport") ) { outValue = _hx___setViewport_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { outValue = setBlendFactors_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { outValue = drawToBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__hasGLExtension") ) { outValue = _hx___hasGLExtension_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { outValue = setSamplerStateAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { outValue = setStencilActions_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { outValue = setVertexBufferAt_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { outValue = setRenderToTexture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { outValue = _hx___getGLCompareMode_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { outValue = configureBackBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { outValue = setScissorRectangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__flushSamplerState") ) { outValue = _hx___flushSamplerState_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getGLTriangleFace") ) { outValue = _hx___getGLTriangleFace_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { outValue = _hx___getGLStencilAction_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__updateBlendFactors") ) { outValue = _hx___updateBlendFactors_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { outValue = setRenderToBackBuffer_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"setEnableErrorChecking") ) { outValue = setEnableErrorChecking_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { outValue = setStencilReferenceValue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__updateBlendFactorsTEMP") ) { outValue = _hx___updateBlendFactorsTEMP_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__updateScissorRectangle") ) { outValue = _hx___updateScissorRectangle_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__updateBackbufferViewport") ) { outValue = _hx___updateBackbufferViewport_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__updateDepthAndStencilState") ) { outValue = _hx___updateDepthAndStencilState_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { outValue = setProgramConstantsFromMatrix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { outValue = setProgramConstantsFromVector_dyn(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__updateBackbufferViewportTEMP") ) { outValue = _hx___updateBackbufferViewportTEMP_dyn(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { outValue = setProgramConstantsFromByteArray_dyn(); return true; }
	}
	return false;
}

bool GLContext3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=ioValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=ioValue.Cast<  ::openfl::display3D::Context3D >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLContext3D_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GLContext3D_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(void *) &GLContext3D_obj::context,HX_HCSTRING("context","\xef","\x95","\x77","\x19")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(void *) &GLContext3D_obj::gl,HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GLContext3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLContext3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GLContext3D_obj::context,"context");
	HX_MARK_MEMBER_NAME(GLContext3D_obj::gl,"gl");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLContext3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLContext3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GLContext3D_obj::context,"context");
	HX_VISIT_MEMBER_NAME(GLContext3D_obj::gl,"gl");
};

#endif

hx::Class GLContext3D_obj::__mClass;

static ::String GLContext3D_obj_sStaticFields[] = {
	HX_HCSTRING("context","\xef","\x95","\x77","\x19"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("setBlendFactors","\x35","\x4b","\xcd","\xf5"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setCulling","\xee","\x06","\x67","\xa6"),
	HX_HCSTRING("setDepthTest","\xf3","\xe2","\xcc","\xc7"),
	HX_HCSTRING("setEnableErrorChecking","\xfd","\x25","\xdc","\xc5"),
	HX_HCSTRING("setProgram","\x02","\x6f","\xd8","\x46"),
	HX_HCSTRING("setProgramConstantsFromByteArray","\x3a","\x1f","\x12","\xd4"),
	HX_HCSTRING("setProgramConstantsFromMatrix","\xd8","\xd0","\x45","\xbe"),
	HX_HCSTRING("setProgramConstantsFromVector","\x5a","\x4b","\xdb","\x99"),
	HX_HCSTRING("setRenderToBackBuffer","\x9a","\x84","\xfb","\xad"),
	HX_HCSTRING("setRenderToTexture","\xe8","\x2c","\x92","\x46"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("setScissorRectangle","\x35","\x04","\x2c","\x03"),
	HX_HCSTRING("setStencilActions","\xa3","\xec","\xa6","\x2c"),
	HX_HCSTRING("setStencilReferenceValue","\xc0","\xdf","\xa3","\x11"),
	HX_HCSTRING("setTextureAt","\xac","\xee","\x98","\xd3"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("__flushSamplerState","\xad","\xd1","\x48","\x4d"),
	HX_HCSTRING("__getGLCompareMode","\x4d","\xad","\x57","\x0d"),
	HX_HCSTRING("__getGLTriangleFace","\x40","\x95","\x87","\xc3"),
	HX_HCSTRING("__getGLStencilAction","\xb7","\xa4","\x86","\x0d"),
	HX_HCSTRING("__hasGLExtension","\xa0","\xfe","\x45","\x9c"),
	HX_HCSTRING("__setViewport","\x08","\x57","\x7e","\x15"),
	HX_HCSTRING("__updateDepthAndStencilState","\xf2","\x9d","\xe7","\xb2"),
	HX_HCSTRING("__updateBlendFactorsTEMP","\x50","\x28","\xf1","\xa5"),
	HX_HCSTRING("__updateBlendFactors","\x3c","\x4f","\x58","\x2e"),
	HX_HCSTRING("__updateScissorRectangle","\xbc","\x17","\x57","\x7f"),
	HX_HCSTRING("__updateBackbufferViewportTEMP","\x8a","\x87","\xfb","\xad"),
	HX_HCSTRING("__updateBackbufferViewport","\x76","\x09","\xc0","\x09"),
	::String(null())
};

void GLContext3D_obj::__register()
{
	hx::Object *dummy = new GLContext3D_obj;
	GLContext3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.opengl.GLContext3D","\x4b","\x37","\x5a","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLContext3D_obj::__GetStatic;
	__mClass->mSetStaticField = &GLContext3D_obj::__SetStatic;
	__mClass->mMarkFunc = GLContext3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLContext3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLContext3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLContext3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLContext3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLContext3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace opengl
