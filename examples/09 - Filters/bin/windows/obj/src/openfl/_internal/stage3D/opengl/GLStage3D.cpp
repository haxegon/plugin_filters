// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLStage3D
#include <openfl/_internal/stage3D/opengl/GLStage3D.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_aa6154e001ea54c5_21_render,"openfl._internal.stage3D.opengl.GLStage3D","render",0x1308fc2a,"openfl._internal.stage3D.opengl.GLStage3D.render","openfl/_internal/stage3D/opengl/GLStage3D.hx",21,0x8ea52802)
namespace openfl{
namespace _internal{
namespace stage3D{
namespace opengl{

void GLStage3D_obj::__construct() { }

Dynamic GLStage3D_obj::__CreateEmpty() { return new GLStage3D_obj; }

void *GLStage3D_obj::_hx_vtable = 0;

Dynamic GLStage3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLStage3D_obj > _hx_result = new GLStage3D_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLStage3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x69241f38;
}

void GLStage3D_obj::render( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_aa6154e001ea54c5_21_render)
HXLINE(  23)		if (hx::IsNotNull( stage3D->context3D )) {
HXLINE(  25)			renderSession->blendModeManager->setBlendMode(null());
HXLINE(  27)			if (hx::IsNotNull( renderSession->shaderManager->currentShader )) {
HXLINE(  29)				renderSession->shaderManager->setShader(null());
HXLINE(  31)				if (hx::IsNotNull( stage3D->context3D->_hx___program )) {
HXLINE(  33)					stage3D->context3D->_hx___program->_hx___use();
            				}
            			}
            		}
HXLINE(  41)		if (::openfl::_internal::stage3D::GLUtils_obj::debug) {
HXLINE(  43)			renderSession->gl->getError();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLStage3D_obj,render,(void))


GLStage3D_obj::GLStage3D_obj()
{
}

bool GLStage3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLStage3D_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLStage3D_obj_sStaticStorageInfo = 0;
#endif

static void GLStage3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLStage3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLStage3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLStage3D_obj::__mClass,"__mClass");
};

#endif

hx::Class GLStage3D_obj::__mClass;

static ::String GLStage3D_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null())
};

void GLStage3D_obj::__register()
{
	hx::Object *dummy = new GLStage3D_obj;
	GLStage3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.opengl.GLStage3D","\x1a","\xfd","\x64","\xc9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLStage3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLStage3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLStage3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLStage3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLStage3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLStage3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLStage3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace opengl
