// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6ecdd980159839d3_19_new,"openfl._internal.renderer.AbstractShaderManager","new",0xdae95c9d,"openfl._internal.renderer.AbstractShaderManager.new","openfl/_internal/renderer/AbstractShaderManager.hx",19,0x593d46f2)
HX_LOCAL_STACK_FRAME(_hx_pos_6ecdd980159839d3_28_initShader,"openfl._internal.renderer.AbstractShaderManager","initShader",0x2adf3fb8,"openfl._internal.renderer.AbstractShaderManager.initShader","openfl/_internal/renderer/AbstractShaderManager.hx",28,0x593d46f2)
HX_LOCAL_STACK_FRAME(_hx_pos_6ecdd980159839d3_33_setShader,"openfl._internal.renderer.AbstractShaderManager","setShader",0x9aac0c64,"openfl._internal.renderer.AbstractShaderManager.setShader","openfl/_internal/renderer/AbstractShaderManager.hx",33,0x593d46f2)
HX_LOCAL_STACK_FRAME(_hx_pos_6ecdd980159839d3_40_updateShader,"openfl._internal.renderer.AbstractShaderManager","updateShader",0x52fbea31,"openfl._internal.renderer.AbstractShaderManager.updateShader","openfl/_internal/renderer/AbstractShaderManager.hx",40,0x593d46f2)
namespace openfl{
namespace _internal{
namespace renderer{

void AbstractShaderManager_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6ecdd980159839d3_19_new)
            	}

Dynamic AbstractShaderManager_obj::__CreateEmpty() { return new AbstractShaderManager_obj; }

void *AbstractShaderManager_obj::_hx_vtable = 0;

Dynamic AbstractShaderManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AbstractShaderManager_obj > _hx_result = new AbstractShaderManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AbstractShaderManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x493c4937;
}

 ::openfl::display::Shader AbstractShaderManager_obj::initShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_6ecdd980159839d3_28_initShader)
HXDLIN(  28)		return shader;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractShaderManager_obj,initShader,return )

void AbstractShaderManager_obj::setShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_6ecdd980159839d3_33_setShader)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractShaderManager_obj,setShader,(void))

void AbstractShaderManager_obj::updateShader( ::openfl::display::Shader shader){
            	HX_STACKFRAME(&_hx_pos_6ecdd980159839d3_40_updateShader)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractShaderManager_obj,updateShader,(void))


hx::ObjectPtr< AbstractShaderManager_obj > AbstractShaderManager_obj::__new() {
	hx::ObjectPtr< AbstractShaderManager_obj > __this = new AbstractShaderManager_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< AbstractShaderManager_obj > AbstractShaderManager_obj::__alloc(hx::Ctx *_hx_ctx) {
	AbstractShaderManager_obj *__this = (AbstractShaderManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AbstractShaderManager_obj), true, "openfl._internal.renderer.AbstractShaderManager"));
	*(void **)__this = AbstractShaderManager_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AbstractShaderManager_obj::AbstractShaderManager_obj()
{
}

void AbstractShaderManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AbstractShaderManager);
	HX_MARK_MEMBER_NAME(currentShader,"currentShader");
	HX_MARK_MEMBER_NAME(defaultShader,"defaultShader");
	HX_MARK_END_CLASS();
}

void AbstractShaderManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentShader,"currentShader");
	HX_VISIT_MEMBER_NAME(defaultShader,"defaultShader");
}

hx::Val AbstractShaderManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"setShader") ) { return hx::Val( setShader_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initShader") ) { return hx::Val( initShader_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateShader") ) { return hx::Val( updateShader_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentShader") ) { return hx::Val( currentShader ); }
		if (HX_FIELD_EQ(inName,"defaultShader") ) { return hx::Val( defaultShader ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AbstractShaderManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"currentShader") ) { currentShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultShader") ) { defaultShader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AbstractShaderManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentShader","\x3e","\x40","\x7d","\x00"));
	outFields->push(HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AbstractShaderManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(AbstractShaderManager_obj,currentShader),HX_HCSTRING("currentShader","\x3e","\x40","\x7d","\x00")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(AbstractShaderManager_obj,defaultShader),HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AbstractShaderManager_obj_sStaticStorageInfo = 0;
#endif

static ::String AbstractShaderManager_obj_sMemberFields[] = {
	HX_HCSTRING("currentShader","\x3e","\x40","\x7d","\x00"),
	HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17"),
	HX_HCSTRING("initShader","\x55","\x1a","\x66","\x21"),
	HX_HCSTRING("setShader","\x67","\x34","\xc8","\x7c"),
	HX_HCSTRING("updateShader","\x0e","\x66","\xe4","\x1c"),
	::String(null()) };

static void AbstractShaderManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AbstractShaderManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AbstractShaderManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AbstractShaderManager_obj::__mClass,"__mClass");
};

#endif

hx::Class AbstractShaderManager_obj::__mClass;

void AbstractShaderManager_obj::__register()
{
	hx::Object *dummy = new AbstractShaderManager_obj;
	AbstractShaderManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.AbstractShaderManager","\x2b","\xca","\x45","\x02");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AbstractShaderManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AbstractShaderManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AbstractShaderManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AbstractShaderManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AbstractShaderManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AbstractShaderManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
