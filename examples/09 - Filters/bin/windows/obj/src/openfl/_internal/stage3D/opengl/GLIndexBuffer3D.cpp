// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferIO
#include <lime/utils/ArrayBufferIO.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLIndexBuffer3D
#include <openfl/_internal/stage3D/opengl/GLIndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3496192daacd51b8_25_create,"openfl._internal.stage3D.opengl.GLIndexBuffer3D","create",0xb4eb541c,"openfl._internal.stage3D.opengl.GLIndexBuffer3D.create","openfl/_internal/stage3D/opengl/GLIndexBuffer3D.hx",25,0xb4e2d8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_3496192daacd51b8_42_dispose,"openfl._internal.stage3D.opengl.GLIndexBuffer3D","dispose",0x42e00f7f,"openfl._internal.stage3D.opengl.GLIndexBuffer3D.dispose","openfl/_internal/stage3D/opengl/GLIndexBuffer3D.hx",42,0xb4e2d8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_3496192daacd51b8_55_uploadFromByteArray,"openfl._internal.stage3D.opengl.GLIndexBuffer3D","uploadFromByteArray",0xd43976c6,"openfl._internal.stage3D.opengl.GLIndexBuffer3D.uploadFromByteArray","openfl/_internal/stage3D/opengl/GLIndexBuffer3D.hx",55,0xb4e2d8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_3496192daacd51b8_64_uploadFromTypedArray,"openfl._internal.stage3D.opengl.GLIndexBuffer3D","uploadFromTypedArray",0x466921da,"openfl._internal.stage3D.opengl.GLIndexBuffer3D.uploadFromTypedArray","openfl/_internal/stage3D/opengl/GLIndexBuffer3D.hx",64,0xb4e2d8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_3496192daacd51b8_89_uploadFromVector,"openfl._internal.stage3D.opengl.GLIndexBuffer3D","uploadFromVector",0xa61f044e,"openfl._internal.stage3D.opengl.GLIndexBuffer3D.uploadFromVector","openfl/_internal/stage3D/opengl/GLIndexBuffer3D.hx",89,0xb4e2d8ce)
namespace openfl{
namespace _internal{
namespace stage3D{
namespace opengl{

void GLIndexBuffer3D_obj::__construct() { }

Dynamic GLIndexBuffer3D_obj::__CreateEmpty() { return new GLIndexBuffer3D_obj; }

void *GLIndexBuffer3D_obj::_hx_vtable = 0;

Dynamic GLIndexBuffer3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLIndexBuffer3D_obj > _hx_result = new GLIndexBuffer3D_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLIndexBuffer3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6224da08;
}

void GLIndexBuffer3D_obj::create( ::openfl::display3D::IndexBuffer3D indexBuffer, ::openfl::_internal::renderer::RenderSession renderSession, ::Dynamic bufferUsage){
            	HX_STACKFRAME(&_hx_pos_3496192daacd51b8_25_create)
HXLINE(  27)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE(  29)		indexBuffer->_hx___elementType = gl->UNSIGNED_SHORT;
HXLINE(  31)		indexBuffer->_hx___id = gl->createBuffer();
HXLINE(  32)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  34)		int _hx_tmp;
HXDLIN(  34)		if (hx::IsEq( bufferUsage,(int)0 )) {
HXLINE(  34)			_hx_tmp = gl->DYNAMIC_DRAW;
            		}
            		else {
HXLINE(  34)			_hx_tmp = gl->STATIC_DRAW;
            		}
HXDLIN(  34)		indexBuffer->_hx___usage = _hx_tmp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLIndexBuffer3D_obj,create,(void))

void GLIndexBuffer3D_obj::dispose( ::openfl::display3D::IndexBuffer3D indexBuffer, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_3496192daacd51b8_42_dispose)
HXLINE(  44)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE(  46)		gl->deleteBuffer(indexBuffer->_hx___id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLIndexBuffer3D_obj,dispose,(void))

void GLIndexBuffer3D_obj::uploadFromByteArray( ::openfl::display3D::IndexBuffer3D indexBuffer, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::utils::ByteArrayData data,int byteArrayOffset,int startOffset,int count){
            	HX_GC_STACKFRAME(&_hx_pos_3496192daacd51b8_55_uploadFromByteArray)
HXLINE(  57)		int offset = (byteArrayOffset + (startOffset * (int)2));
HXLINE(  59)		 ::haxe::io::Bytes buffer = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN(  59)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  59)		if (hx::IsNotNull( buffer )) {
HXLINE(  59)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN(  59)			int in_byteOffset = offset;
HXDLIN(  59)			if ((in_byteOffset < (int)0)) {
HXLINE(  59)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  59)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE(  59)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  59)			int bufferByteLength = buffer->length;
HXDLIN(  59)			int elementSize = _this->bytesPerElement;
HXDLIN(  59)			int newByteLength = bufferByteLength;
HXDLIN(  59)			if (hx::IsNull( count )) {
HXLINE(  59)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  59)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  59)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  59)				if ((newByteLength < (int)0)) {
HXLINE(  59)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE(  59)				newByteLength = (count * _this->bytesPerElement);
HXDLIN(  59)				int newRange = (in_byteOffset + newByteLength);
HXDLIN(  59)				if ((newRange > bufferByteLength)) {
HXLINE(  59)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  59)			_this->buffer = buffer;
HXDLIN(  59)			_this->byteOffset = in_byteOffset;
HXDLIN(  59)			_this->byteLength = newByteLength;
HXDLIN(  59)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(  59)			this1 = _this;
            		}
            		else {
HXLINE(  59)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            		}
HXDLIN(  59)		::openfl::_internal::stage3D::opengl::GLIndexBuffer3D_obj::uploadFromTypedArray(indexBuffer,renderSession,this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GLIndexBuffer3D_obj,uploadFromByteArray,(void))

void GLIndexBuffer3D_obj::uploadFromTypedArray( ::openfl::display3D::IndexBuffer3D indexBuffer, ::openfl::_internal::renderer::RenderSession renderSession, ::lime::utils::ArrayBufferView data){
            	HX_STACKFRAME(&_hx_pos_3496192daacd51b8_64_uploadFromTypedArray)
HXLINE(  66)		if (hx::IsNull( data )) {
HXLINE(  66)			return;
            		}
HXLINE(  67)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE(  69)		gl->bindBuffer(gl->ELEMENT_ARRAY_BUFFER,indexBuffer->_hx___id);
HXLINE(  70)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  75)		int gl1 = gl->ELEMENT_ARRAY_BUFFER;
HXDLIN(  75)		int data1 = data->byteLength;
HXDLIN(  75)		gl->bufferData(gl1,data1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(data),indexBuffer->_hx___usage);
HXLINE(  77)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLIndexBuffer3D_obj,uploadFromTypedArray,(void))

void GLIndexBuffer3D_obj::uploadFromVector( ::openfl::display3D::IndexBuffer3D indexBuffer, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::_Vector::AbstractVector data,int startOffset,int count){
            	HX_GC_STACKFRAME(&_hx_pos_3496192daacd51b8_89_uploadFromVector)
HXLINE(  93)		if (hx::IsNull( data )) {
HXLINE(  93)			return;
            		}
HXLINE(  94)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE(  96)		int length = (startOffset + count);
HXLINE(  97)		 ::lime::utils::ArrayBufferView existingInt16Array = indexBuffer->_hx___tempInt16Array;
HXLINE(  99)		bool _hx_tmp;
HXDLIN(  99)		if (hx::IsNotNull( indexBuffer->_hx___tempInt16Array )) {
HXLINE(  99)			_hx_tmp = (indexBuffer->_hx___tempInt16Array->length < count);
            		}
            		else {
HXLINE(  99)			_hx_tmp = true;
            		}
HXDLIN(  99)		if (_hx_tmp) {
HXLINE( 101)			 ::lime::utils::ArrayBufferView this1;
HXDLIN( 101)			if (hx::IsNotNull( count )) {
HXLINE( 101)				this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,count,(int)2);
            			}
            			else {
HXLINE( 101)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            			}
HXDLIN( 101)			indexBuffer->_hx___tempInt16Array = this1;
HXLINE( 103)			if (hx::IsNotNull( existingInt16Array )) {
HXLINE( 105)				 ::lime::utils::ArrayBufferView _this = indexBuffer->_hx___tempInt16Array;
HXDLIN( 105)				int offset = (int)0;
HXDLIN( 105)				if (hx::IsNotNull( existingInt16Array )) {
HXLINE( 105)					 ::haxe::io::Bytes _this1 = _this->buffer;
HXDLIN( 105)					_this1->blit((offset * _this->bytesPerElement),existingInt16Array->buffer,existingInt16Array->byteOffset,existingInt16Array->byteLength);
            				}
            				else {
HXLINE( 105)					HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            				}
            			}
            		}
HXLINE( 111)		{
HXLINE( 111)			int _g1 = startOffset;
HXDLIN( 111)			int _g = length;
HXDLIN( 111)			while((_g1 < _g)){
HXLINE( 111)				_g1 = (_g1 + (int)1);
HXDLIN( 111)				int i = (_g1 - (int)1);
HXLINE( 113)				{
HXLINE( 113)					 ::lime::utils::ArrayBufferView this2 = indexBuffer->_hx___tempInt16Array;
HXDLIN( 113)					int val = ( (int)(::openfl::_Vector::IVector_obj::get(data->data,i)) );
HXDLIN( 113)					 ::haxe::io::Bytes this3 = this2->buffer;
HXDLIN( 113)					int this4 = this2->byteOffset;
HXDLIN( 113)					::lime::utils::ArrayBufferIO_obj::setInt16(this3,(this4 + ((i - startOffset) * (int)2)),val);
            				}
            			}
            		}
HXLINE( 117)		::openfl::_internal::stage3D::opengl::GLIndexBuffer3D_obj::uploadFromTypedArray(indexBuffer,renderSession,indexBuffer->_hx___tempInt16Array);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GLIndexBuffer3D_obj,uploadFromVector,(void))


GLIndexBuffer3D_obj::GLIndexBuffer3D_obj()
{
}

bool GLIndexBuffer3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { outValue = dispose_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uploadFromVector") ) { outValue = uploadFromVector_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { outValue = uploadFromByteArray_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uploadFromTypedArray") ) { outValue = uploadFromTypedArray_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLIndexBuffer3D_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLIndexBuffer3D_obj_sStaticStorageInfo = 0;
#endif

static void GLIndexBuffer3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLIndexBuffer3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLIndexBuffer3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLIndexBuffer3D_obj::__mClass,"__mClass");
};

#endif

hx::Class GLIndexBuffer3D_obj::__mClass;

static ::String GLIndexBuffer3D_obj_sStaticFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("uploadFromByteArray","\xe6","\x17","\x1b","\xee"),
	HX_HCSTRING("uploadFromTypedArray","\xba","\x7c","\xf4","\xd1"),
	HX_HCSTRING("uploadFromVector","\x2e","\x6f","\x6b","\xa8"),
	::String(null())
};

void GLIndexBuffer3D_obj::__register()
{
	hx::Object *dummy = new GLIndexBuffer3D_obj;
	GLIndexBuffer3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.opengl.GLIndexBuffer3D","\x4e","\x0f","\xce","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLIndexBuffer3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLIndexBuffer3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLIndexBuffer3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLIndexBuffer3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLIndexBuffer3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLIndexBuffer3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLIndexBuffer3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace opengl
