// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasBlendModeManager
#include <openfl/_internal/renderer/canvas/CanvasBlendModeManager.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c7a24f9ee118dbe_16_new,"openfl._internal.renderer.canvas.CanvasBlendModeManager","new",0x2958411e,"openfl._internal.renderer.canvas.CanvasBlendModeManager.new","openfl/_internal/renderer/canvas/CanvasBlendModeManager.hx",16,0xdf30aa70)
HX_LOCAL_STACK_FRAME(_hx_pos_1c7a24f9ee118dbe_25_setBlendMode,"openfl._internal.renderer.canvas.CanvasBlendModeManager","setBlendMode",0x12ba2bd4,"openfl._internal.renderer.canvas.CanvasBlendModeManager.setBlendMode","openfl/_internal/renderer/canvas/CanvasBlendModeManager.hx",25,0xdf30aa70)
namespace openfl{
namespace _internal{
namespace renderer{
namespace canvas{

void CanvasBlendModeManager_obj::__construct( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_1c7a24f9ee118dbe_16_new)
HXLINE(  18)		super::__construct();
HXLINE(  20)		this->renderSession = renderSession;
            	}

Dynamic CanvasBlendModeManager_obj::__CreateEmpty() { return new CanvasBlendModeManager_obj; }

void *CanvasBlendModeManager_obj::_hx_vtable = 0;

Dynamic CanvasBlendModeManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CanvasBlendModeManager_obj > _hx_result = new CanvasBlendModeManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CanvasBlendModeManager_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0310e86a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0310e86a;
	} else {
		return inClassId==(int)0x346de538;
	}
}

void CanvasBlendModeManager_obj::setBlendMode( ::Dynamic blendMode){
            	HX_STACKFRAME(&_hx_pos_1c7a24f9ee118dbe_25_setBlendMode)
HXLINE(  27)		if (hx::IsEq( this->currentBlendMode,blendMode )) {
HXLINE(  27)			return;
            		}
HXLINE(  29)		this->currentBlendMode = blendMode;
HXLINE(  31)		 ::Dynamic _hx_switch_0 = blendMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(  35)			this->renderSession->context->globalCompositeOperation = HX_("lighter",c3,4a,e3,19);
HXDLIN(  35)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(  39)			this->renderSession->context->globalCompositeOperation = HX_("destination-in",84,83,55,b2);
HXDLIN(  39)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(  43)			this->renderSession->context->globalCompositeOperation = HX_("darken",5f,36,3a,21);
HXDLIN(  43)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(  47)			this->renderSession->context->globalCompositeOperation = HX_("difference",fd,9b,91,46);
HXDLIN(  47)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(  51)			this->renderSession->context->globalCompositeOperation = HX_("destination-out",0f,24,82,58);
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(  55)			this->renderSession->context->globalCompositeOperation = HX_("hard-light",b4,7e,9e,35);
HXDLIN(  55)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(  63)			this->renderSession->context->globalCompositeOperation = HX_("source-over",46,01,99,ce);
HXDLIN(  63)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)8) ){
HXLINE(  67)			this->renderSession->context->globalCompositeOperation = HX_("lighten",bf,4a,e3,19);
HXDLIN(  67)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)9) ){
HXLINE(  71)			this->renderSession->context->globalCompositeOperation = HX_("multiply",24,e2,8c,9a);
HXDLIN(  71)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)11) ){
HXLINE(  75)			this->renderSession->context->globalCompositeOperation = HX_("overlay",90,43,10,a9);
HXDLIN(  75)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)12) ){
HXLINE(  79)			this->renderSession->context->globalCompositeOperation = HX_("screen",6c,3b,5d,47);
HXDLIN(  79)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  91)			this->renderSession->context->globalCompositeOperation = HX_("source-over",46,01,99,ce);
            		}
            		_hx_goto_1:;
            	}



hx::ObjectPtr< CanvasBlendModeManager_obj > CanvasBlendModeManager_obj::__new( ::openfl::_internal::renderer::RenderSession renderSession) {
	hx::ObjectPtr< CanvasBlendModeManager_obj > __this = new CanvasBlendModeManager_obj();
	__this->__construct(renderSession);
	return __this;
}

hx::ObjectPtr< CanvasBlendModeManager_obj > CanvasBlendModeManager_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::_internal::renderer::RenderSession renderSession) {
	CanvasBlendModeManager_obj *__this = (CanvasBlendModeManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CanvasBlendModeManager_obj), true, "openfl._internal.renderer.canvas.CanvasBlendModeManager"));
	*(void **)__this = CanvasBlendModeManager_obj::_hx_vtable;
	__this->__construct(renderSession);
	return __this;
}

CanvasBlendModeManager_obj::CanvasBlendModeManager_obj()
{
}

void CanvasBlendModeManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CanvasBlendModeManager);
	HX_MARK_MEMBER_NAME(currentBlendMode,"currentBlendMode");
	HX_MARK_MEMBER_NAME(renderSession,"renderSession");
	HX_MARK_END_CLASS();
}

void CanvasBlendModeManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentBlendMode,"currentBlendMode");
	HX_VISIT_MEMBER_NAME(renderSession,"renderSession");
}

hx::Val CanvasBlendModeManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"setBlendMode") ) { return hx::Val( setBlendMode_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderSession") ) { return hx::Val( renderSession ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentBlendMode") ) { return hx::Val( currentBlendMode ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CanvasBlendModeManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"renderSession") ) { renderSession=inValue.Cast<  ::openfl::_internal::renderer::RenderSession >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentBlendMode") ) { currentBlendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CanvasBlendModeManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff"));
	outFields->push(HX_HCSTRING("renderSession","\xa0","\x8a","\x85","\x8f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CanvasBlendModeManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(CanvasBlendModeManager_obj,currentBlendMode),HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff")},
	{hx::fsObject /*::openfl::_internal::renderer::RenderSession*/ ,(int)offsetof(CanvasBlendModeManager_obj,renderSession),HX_HCSTRING("renderSession","\xa0","\x8a","\x85","\x8f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CanvasBlendModeManager_obj_sStaticStorageInfo = 0;
#endif

static ::String CanvasBlendModeManager_obj_sMemberFields[] = {
	HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff"),
	HX_HCSTRING("renderSession","\xa0","\x8a","\x85","\x8f"),
	HX_HCSTRING("setBlendMode","\x52","\xa4","\x87","\x30"),
	::String(null()) };

static void CanvasBlendModeManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CanvasBlendModeManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CanvasBlendModeManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CanvasBlendModeManager_obj::__mClass,"__mClass");
};

#endif

hx::Class CanvasBlendModeManager_obj::__mClass;

void CanvasBlendModeManager_obj::__register()
{
	hx::Object *dummy = new CanvasBlendModeManager_obj;
	CanvasBlendModeManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.canvas.CanvasBlendModeManager","\x2c","\x1a","\xe6","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CanvasBlendModeManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CanvasBlendModeManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CanvasBlendModeManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CanvasBlendModeManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CanvasBlendModeManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CanvasBlendModeManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace canvas
