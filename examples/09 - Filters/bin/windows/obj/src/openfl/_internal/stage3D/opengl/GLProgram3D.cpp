// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils__DataPointer_DataPointer_Impl_
#include <lime/utils/_DataPointer/DataPointer_Impl_.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_opengl_GLProgram3D
#include <openfl/_internal/stage3D/opengl/GLProgram3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Uniform
#include <openfl/display3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D_UniformMap
#include <openfl/display3D/UniformMap.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_35_dispose,"openfl._internal.stage3D.opengl.GLProgram3D","dispose",0x3b9f1d51,"openfl._internal.stage3D.opengl.GLProgram3D.dispose","openfl/_internal/stage3D/opengl/GLProgram3D.hx",35,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_45_flushUniform,"openfl._internal.stage3D.opengl.GLProgram3D","flushUniform",0xe207c4de,"openfl._internal.stage3D.opengl.GLProgram3D.flushUniform","openfl/_internal/stage3D/opengl/GLProgram3D.hx",45,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_65_setPositionScale,"openfl._internal.stage3D.opengl.GLProgram3D","setPositionScale",0x9d716d2d,"openfl._internal.stage3D.opengl.GLProgram3D.setPositionScale","openfl/_internal/stage3D/opengl/GLProgram3D.hx",65,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_74_upload,"openfl._internal.stage3D.opengl.GLProgram3D","upload",0xb766c98f,"openfl._internal.stage3D.opengl.GLProgram3D.upload","openfl/_internal/stage3D/opengl/GLProgram3D.hx",74,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_96_use,"openfl._internal.stage3D.opengl.GLProgram3D","use",0xe3cf07f9,"openfl._internal.stage3D.opengl.GLProgram3D.use","openfl/_internal/stage3D/opengl/GLProgram3D.hx",96,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_156___buildUniformList,"openfl._internal.stage3D.opengl.GLProgram3D","__buildUniformList",0xfd9632d2,"openfl._internal.stage3D.opengl.GLProgram3D.__buildUniformList","openfl/_internal/stage3D/opengl/GLProgram3D.hx",156,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_259___deleteShaders,"openfl._internal.stage3D.opengl.GLProgram3D","__deleteShaders",0x2febec55,"openfl._internal.stage3D.opengl.GLProgram3D.__deleteShaders","openfl/_internal/stage3D/opengl/GLProgram3D.hx",259,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_305___getUniformRegisters,"openfl._internal.stage3D.opengl.GLProgram3D","__getUniformRegisters",0x92cc02a4,"openfl._internal.stage3D.opengl.GLProgram3D.__getUniformRegisters","openfl/_internal/stage3D/opengl/GLProgram3D.hx",305,0xab62753c)
HX_LOCAL_STACK_FRAME(_hx_pos_5a33cf2639b8d4bd_314___uploadFromGLSL,"openfl._internal.stage3D.opengl.GLProgram3D","__uploadFromGLSL",0x077273b7,"openfl._internal.stage3D.opengl.GLProgram3D.__uploadFromGLSL","openfl/_internal/stage3D/opengl/GLProgram3D.hx",314,0xab62753c)
namespace openfl{
namespace _internal{
namespace stage3D{
namespace opengl{

void GLProgram3D_obj::__construct() { }

Dynamic GLProgram3D_obj::__CreateEmpty() { return new GLProgram3D_obj; }

void *GLProgram3D_obj::_hx_vtable = 0;

Dynamic GLProgram3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLProgram3D_obj > _hx_result = new GLProgram3D_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GLProgram3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x078460be;
}

 ::openfl::display3D::Program3D GLProgram3D_obj::program;

 ::openfl::_internal::renderer::RenderSession GLProgram3D_obj::renderSession;

void GLProgram3D_obj::dispose( ::openfl::display3D::Program3D program, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_35_dispose)
HXLINE(  37)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program = program;
HXLINE(  38)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderSession = renderSession;
HXLINE(  40)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::_hx___deleteShaders();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLProgram3D_obj,dispose,(void))

void GLProgram3D_obj::flushUniform( ::openfl::display3D::Uniform uniform, ::lime::_backend::native::NativeGLRenderContext gl){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_45_flushUniform)
HXLINE(  47)		int index = (uniform->regIndex * (int)4);
HXLINE(  48)		{
HXLINE(  48)			int _g = uniform->type;
HXDLIN(  48)			switch((int)(_g)){
            				case (int)35664: {
HXLINE(  53)					int uniform1 = uniform->location;
HXDLIN(  53)					int uniform2 = uniform->regCount;
HXDLIN(  53)					int size = (uniform->regCount * (int)2);
HXDLIN(  53)					 ::lime::utils::BytePointerData uniform3 = uniform->regDataPointer;
HXDLIN(  53)					 ::lime::utils::ArrayBufferView uniform4 = uniform->regData;
HXDLIN(  53)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform3,null(),uniform4,null(),(index * (int)4));
HXDLIN(  53)					gl->uniform2fv(uniform1,uniform2,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35665: {
HXLINE(  54)					int uniform5 = uniform->location;
HXDLIN(  54)					int uniform6 = uniform->regCount;
HXDLIN(  54)					int size1 = (uniform->regCount * (int)3);
HXDLIN(  54)					 ::lime::utils::BytePointerData uniform7 = uniform->regDataPointer;
HXDLIN(  54)					 ::lime::utils::ArrayBufferView uniform8 = uniform->regData;
HXDLIN(  54)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform7,null(),uniform8,null(),(index * (int)4));
HXDLIN(  54)					gl->uniform3fv(uniform5,uniform6,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35666: {
HXLINE(  55)					int uniform9 = uniform->location;
HXDLIN(  55)					int uniform10 = uniform->regCount;
HXDLIN(  55)					int size2 = (uniform->regCount * (int)4);
HXDLIN(  55)					 ::lime::utils::BytePointerData uniform11 = uniform->regDataPointer;
HXDLIN(  55)					 ::lime::utils::ArrayBufferView uniform12 = uniform->regData;
HXDLIN(  55)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform11,null(),uniform12,null(),(index * (int)4));
HXDLIN(  55)					gl->uniform4fv(uniform9,uniform10,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35674: {
HXLINE(  50)					int uniform13 = uniform->location;
HXDLIN(  50)					int uniform14 = uniform->size;
HXDLIN(  50)					int size3 = ((uniform->size * (int)2) * (int)2);
HXDLIN(  50)					 ::lime::utils::BytePointerData uniform15 = uniform->regDataPointer;
HXDLIN(  50)					 ::lime::utils::ArrayBufferView uniform16 = uniform->regData;
HXDLIN(  50)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform15,null(),uniform16,null(),(index * (int)4));
HXDLIN(  50)					gl->uniformMatrix2fv(uniform13,uniform14,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35675: {
HXLINE(  51)					int uniform17 = uniform->location;
HXDLIN(  51)					int uniform18 = uniform->size;
HXDLIN(  51)					int size4 = ((uniform->size * (int)3) * (int)3);
HXDLIN(  51)					 ::lime::utils::BytePointerData uniform19 = uniform->regDataPointer;
HXDLIN(  51)					 ::lime::utils::ArrayBufferView uniform20 = uniform->regData;
HXDLIN(  51)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform19,null(),uniform20,null(),(index * (int)4));
HXDLIN(  51)					gl->uniformMatrix3fv(uniform17,uniform18,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				case (int)35676: {
HXLINE(  52)					int uniform21 = uniform->location;
HXDLIN(  52)					int uniform22 = uniform->size;
HXDLIN(  52)					int size5 = ((uniform->size * (int)4) * (int)4);
HXDLIN(  52)					 ::lime::utils::BytePointerData uniform23 = uniform->regDataPointer;
HXDLIN(  52)					 ::lime::utils::ArrayBufferView uniform24 = uniform->regData;
HXDLIN(  52)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform23,null(),uniform24,null(),(index * (int)4));
HXDLIN(  52)					gl->uniformMatrix4fv(uniform21,uniform22,false,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            				break;
            				default:{
HXLINE(  56)					int uniform25 = uniform->location;
HXDLIN(  56)					int uniform26 = uniform->regCount;
HXDLIN(  56)					int size6 = (uniform->regCount * (int)4);
HXDLIN(  56)					 ::lime::utils::BytePointerData uniform27 = uniform->regDataPointer;
HXDLIN(  56)					 ::lime::utils::ArrayBufferView uniform28 = uniform->regData;
HXDLIN(  56)					::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform27,null(),uniform28,null(),(index * (int)4));
HXDLIN(  56)					gl->uniform4fv(uniform25,uniform26,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromBytesPointer(uniform->regDataPointer));
            				}
            			}
            		}
HXLINE(  60)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLProgram3D_obj,flushUniform,(void))

void GLProgram3D_obj::setPositionScale( ::openfl::display3D::Program3D program, ::openfl::_internal::renderer::RenderSession renderSession, ::lime::utils::ArrayBufferView positionScale){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_65_setPositionScale)
HXLINE(  67)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE(  68)		int program1 = program->_hx___positionScale->location;
HXDLIN(  68)		gl->uniform4fv(program1,(int)1,::lime::utils::_DataPointer::DataPointer_Impl__obj::fromArrayBufferView(positionScale));
HXLINE(  69)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLProgram3D_obj,setPositionScale,(void))

void GLProgram3D_obj::upload( ::openfl::display3D::Program3D program, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::utils::ByteArrayData vertexProgram, ::openfl::utils::ByteArrayData fragmentProgram){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_74_upload)
HXLINE(  76)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program = program;
HXLINE(  77)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderSession = renderSession;
HXLINE(  80)		::Array< ::Dynamic> samplerStates = ::Array_obj< ::Dynamic>::__new();
HXLINE(  82)		::String glslVertex = ::openfl::_internal::stage3D::AGALConverter_obj::convertToGLSL(vertexProgram,null());
HXLINE(  83)		::String glslFragment = ::openfl::_internal::stage3D::AGALConverter_obj::convertToGLSL(fragmentProgram,samplerStates);
HXLINE(  85)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::_hx___uploadFromGLSL(glslVertex,glslFragment);
HXLINE(  87)		{
HXLINE(  87)			int _g1 = (int)0;
HXDLIN(  87)			int _g = samplerStates->length;
HXDLIN(  87)			while((_g1 < _g)){
HXLINE(  87)				_g1 = (_g1 + (int)1);
HXDLIN(  87)				int i = (_g1 - (int)1);
HXLINE(  89)				{
HXLINE(  89)					::Dynamic this1 = program->_hx___samplerStates->data;
HXDLIN(  89)					::openfl::_Vector::IVector_obj::set(this1,i,samplerStates->__get(i).StaticCast<  ::openfl::_internal::stage3D::SamplerState >());
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GLProgram3D_obj,upload,(void))

void GLProgram3D_obj::use( ::openfl::display3D::Program3D program, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_96_use)
HXLINE(  98)		 ::lime::_backend::native::NativeGLRenderContext gl = renderSession->gl;
HXLINE( 100)		gl->useProgram(program->_hx___programID);
HXLINE( 101)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 103)		program->_hx___vertexUniformMap->markAllDirty();
HXLINE( 104)		program->_hx___fragmentUniformMap->markAllDirty();
HXLINE( 106)		{
HXLINE( 106)			 ::_List::ListNode _g_head = program->_hx___samplerUniforms->h;
HXDLIN( 106)			while(hx::IsNotNull( _g_head )){
HXLINE( 106)				 ::openfl::display3D::Uniform val = ( ( ::openfl::display3D::Uniform)(_g_head->item) );
HXDLIN( 106)				_g_head = _g_head->next;
HXDLIN( 106)				 ::openfl::display3D::Uniform sampler = val;
HXLINE( 108)				if ((sampler->regCount == (int)1)) {
HXLINE( 110)					gl->uniform1i(sampler->location,sampler->regIndex);
HXLINE( 111)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
            				else {
HXLINE( 115)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("!!! TODO: uniform location on webgl",0c,47,d9,53)));
            				}
            			}
            		}
HXLINE( 129)		{
HXLINE( 129)			 ::_List::ListNode _g_head1 = program->_hx___alphaSamplerUniforms->h;
HXDLIN( 129)			while(hx::IsNotNull( _g_head1 )){
HXLINE( 129)				 ::openfl::display3D::Uniform val1 = ( ( ::openfl::display3D::Uniform)(_g_head1->item) );
HXDLIN( 129)				_g_head1 = _g_head1->next;
HXDLIN( 129)				 ::openfl::display3D::Uniform sampler1 = val1;
HXLINE( 131)				if ((sampler1->regCount == (int)1)) {
HXLINE( 133)					gl->uniform1i(sampler1->location,sampler1->regIndex);
HXLINE( 134)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
            				else {
HXLINE( 138)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("!!! TODO: uniform location on webgl",0c,47,d9,53)));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLProgram3D_obj,use,(void))

void GLProgram3D_obj::_hx___buildUniformList(){
            	HX_GC_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_156___buildUniformList)
HXLINE( 158)		 ::lime::_backend::native::NativeGLRenderContext gl = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderSession->gl;
HXLINE( 160)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___uniforms->clear();
HXLINE( 161)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___samplerUniforms->clear();
HXLINE( 162)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___alphaSamplerUniforms->clear();
HXLINE( 164)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___samplerUsageMask = (int)0;
HXLINE( 166)		int numActive = (int)0;
HXLINE( 167)		numActive = ( (int)(gl->getProgramParameter(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,gl->ACTIVE_UNIFORMS)) );
HXLINE( 168)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 170)		 ::List vertexUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE( 171)		 ::List fragmentUniforms =  ::List_obj::__alloc( HX_CTX );
HXLINE( 173)		{
HXLINE( 173)			int _g1 = (int)0;
HXDLIN( 173)			int _g = numActive;
HXDLIN( 173)			while((_g1 < _g)){
HXLINE( 173)				_g1 = (_g1 + (int)1);
HXDLIN( 173)				int i = (_g1 - (int)1);
HXLINE( 175)				 ::Dynamic info = gl->getActiveUniform(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,i);
HXLINE( 176)				::String name = ( (::String)(info->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 177)				int size = ( (int)(info->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) );
HXLINE( 178)				int uniformType = ( (int)(info->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXLINE( 179)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 181)				 ::openfl::display3D::Uniform uniform =  ::openfl::display3D::Uniform_obj::__alloc( HX_CTX ,gl);
HXLINE( 182)				uniform->name = name;
HXLINE( 183)				uniform->size = size;
HXLINE( 184)				uniform->type = uniformType;
HXLINE( 186)				uniform->location = gl->getUniformLocation(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,uniform->name);
HXLINE( 187)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 189)				int indexBracket = uniform->name.indexOf(HX_("[",5b,00,00,00),null());
HXLINE( 191)				if ((indexBracket >= (int)0)) {
HXLINE( 193)					uniform->name = uniform->name.substring((int)0,indexBracket);
            				}
HXLINE( 197)				{
HXLINE( 197)					int _g2 = uniform->type;
HXDLIN( 197)					switch((int)(_g2)){
            						case (int)35674: {
HXLINE( 199)							uniform->regCount = (int)2;
            						}
            						break;
            						case (int)35675: {
HXLINE( 200)							uniform->regCount = (int)3;
            						}
            						break;
            						case (int)35676: {
HXLINE( 201)							uniform->regCount = (int)4;
            						}
            						break;
            						default:{
HXLINE( 202)							uniform->regCount = (int)1;
            						}
            					}
            				}
HXLINE( 206)				 ::openfl::display3D::Uniform uniform1 = uniform;
HXDLIN( 206)				uniform1->regCount = (uniform1->regCount * uniform->size);
HXLINE( 208)				::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___uniforms->add(uniform);
HXLINE( 210)				if ((uniform->name == HX_("vcPositionScale",b4,c9,c0,1f))) {
HXLINE( 212)					::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___positionScale = uniform;
            				}
            				else {
HXLINE( 214)					if (::StringTools_obj::startsWith(uniform->name,HX_("vc",2d,67,00,00))) {
HXLINE( 216)						uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)2,null()));
HXLINE( 217)						uniform->regData = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___context->_hx___vertexConstants;
HXLINE( 218)						vertexUniforms->add(uniform);
            					}
            					else {
HXLINE( 220)						if (::StringTools_obj::startsWith(uniform->name,HX_("fc",3d,59,00,00))) {
HXLINE( 222)							uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)2,null()));
HXLINE( 223)							uniform->regData = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___context->_hx___fragmentConstants;
HXLINE( 224)							fragmentUniforms->add(uniform);
            						}
            						else {
HXLINE( 226)							bool _hx_tmp;
HXDLIN( 226)							if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 226)								_hx_tmp = !(::StringTools_obj::endsWith(uniform->name,HX_("_alpha",9f,ee,7d,1d)));
            							}
            							else {
HXLINE( 226)								_hx_tmp = false;
            							}
HXDLIN( 226)							if (_hx_tmp) {
HXLINE( 228)								uniform->regIndex = ::Std_obj::parseInt(uniform->name.substring((int)7,null()));
HXLINE( 229)								::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___samplerUniforms->add(uniform);
HXLINE( 231)								{
HXLINE( 231)									int _g4 = (int)0;
HXDLIN( 231)									int _g3 = uniform->regCount;
HXDLIN( 231)									while((_g4 < _g3)){
HXLINE( 231)										_g4 = (_g4 + (int)1);
HXDLIN( 231)										int reg = (_g4 - (int)1);
HXLINE( 233)										 ::openfl::display3D::Program3D _hx_tmp1 = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program;
HXDLIN( 233)										_hx_tmp1->_hx___samplerUsageMask = ((int)_hx_tmp1->_hx___samplerUsageMask | (int)((int)(int)1 << (int)(uniform->regIndex + reg)));
            									}
            								}
            							}
            							else {
HXLINE( 237)								bool _hx_tmp2;
HXDLIN( 237)								if (::StringTools_obj::startsWith(uniform->name,HX_("sampler",08,c5,c9,83))) {
HXLINE( 237)									_hx_tmp2 = ::StringTools_obj::endsWith(uniform->name,HX_("_alpha",9f,ee,7d,1d));
            								}
            								else {
HXLINE( 237)									_hx_tmp2 = false;
            								}
HXDLIN( 237)								if (_hx_tmp2) {
HXLINE( 239)									int len = (uniform->name.indexOf(HX_("_",5f,00,00,00),null()) - (int)7);
HXLINE( 240)									::String uniform2 = uniform->name;
HXDLIN( 240)									uniform->regIndex = (::Std_obj::parseInt(uniform2.substring((int)7,((int)7 + len))) + (int)4);
HXLINE( 241)									::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___alphaSamplerUniforms->add(uniform);
            								}
            							}
            						}
            					}
            				}
HXLINE( 245)				if ((::lime::utils::Log_obj::level == (int)5)) {
HXLINE( 247)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 247)					_hx_tmp3((((((((((HX_("",00,00,00,00) + i) + HX_(" name:",6f,1b,f0,61)) + uniform->name) + HX_(" type:",20,fc,36,e6)) + uniform->type) + HX_(" size:",39,94,44,48)) + uniform->size) + HX_(" location:",45,fc,a8,c1)) + uniform->location),hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),247,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__buildUniformList",44,16,c1,02)));
            				}
            			}
            		}
HXLINE( 253)		::Array< ::Dynamic> _hx_tmp4 = ::Lambda_obj::array(vertexUniforms);
HXDLIN( 253)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexUniformMap =  ::openfl::display3D::UniformMap_obj::__alloc( HX_CTX ,_hx_tmp4);
HXLINE( 254)		::Array< ::Dynamic> _hx_tmp5 = ::Lambda_obj::array(fragmentUniforms);
HXDLIN( 254)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentUniformMap =  ::openfl::display3D::UniformMap_obj::__alloc( HX_CTX ,_hx_tmp5);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLProgram3D_obj,_hx___buildUniformList,(void))

void GLProgram3D_obj::_hx___deleteShaders(){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_259___deleteShaders)
HXLINE( 261)		 ::lime::_backend::native::NativeGLRenderContext gl = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderSession->gl;
HXLINE( 263)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID )) {
HXLINE( 267)			::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID = null();
            		}
HXLINE( 271)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID )) {
HXLINE( 273)			gl->deleteShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID);
HXLINE( 274)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 275)			::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID = null();
            		}
HXLINE( 279)		if (hx::IsNotNull( ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID )) {
HXLINE( 281)			gl->deleteShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID);
HXLINE( 282)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 283)			::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID = null();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(GLProgram3D_obj,_hx___deleteShaders,(void))

 ::lime::utils::BytePointerData GLProgram3D_obj::_hx___getUniformRegisters( ::openfl::display3D::Uniform uniform,int index,int size){
            	HX_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_305___getUniformRegisters)
HXLINE( 307)		 ::lime::utils::BytePointerData uniform1 = uniform->regDataPointer;
HXDLIN( 307)		 ::lime::utils::ArrayBufferView uniform2 = uniform->regData;
HXDLIN( 307)		::lime::utils::_BytePointer::BytePointer_Impl__obj::set(uniform1,null(),uniform2,null(),(index * (int)4));
HXLINE( 308)		return uniform->regDataPointer;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GLProgram3D_obj,_hx___getUniformRegisters,return )

void GLProgram3D_obj::_hx___uploadFromGLSL(::String vertexShaderSource,::String fragmentShaderSource){
            	HX_GC_STACKFRAME(&_hx_pos_5a33cf2639b8d4bd_314___uploadFromGLSL)
HXLINE( 316)		 ::lime::_backend::native::NativeGLRenderContext gl = ::openfl::_internal::stage3D::opengl::GLProgram3D_obj::renderSession->gl;
HXLINE( 318)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::_hx___deleteShaders();
HXLINE( 320)		if ((::lime::utils::Log_obj::level == (int)5)) {
HXLINE( 322)			::lime::utils::Log_obj::info(vertexShaderSource,hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),322,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
HXLINE( 323)			::lime::utils::Log_obj::info(fragmentShaderSource,hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),323,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
HXLINE( 327)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexSource = vertexShaderSource;
HXLINE( 328)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentSource = fragmentShaderSource;
HXLINE( 330)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID = gl->createShader(gl->VERTEX_SHADER);
HXLINE( 331)		gl->shaderSource(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID,vertexShaderSource);
HXLINE( 332)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 334)		gl->compileShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID);
HXLINE( 335)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 337)		int shaderCompiled = ( (int)(gl->getShaderParameter(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID,gl->COMPILE_STATUS)) );
HXLINE( 339)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 341)		if ((shaderCompiled == (int)0)) {
HXLINE( 343)			::String vertexInfoLog = gl->getShaderInfoLog(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID);
HXLINE( 345)			bool _hx_tmp;
HXDLIN( 345)			if (hx::IsNotNull( vertexInfoLog )) {
HXLINE( 345)				_hx_tmp = (vertexInfoLog.length != (int)0);
            			}
            			else {
HXLINE( 345)				_hx_tmp = false;
            			}
HXDLIN( 345)			if (_hx_tmp) {
HXLINE( 347)				 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 347)				_hx_tmp1((HX_("vertex: ",0a,af,80,67) + vertexInfoLog),hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),347,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
            			}
HXLINE( 351)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("Error compiling vertex shader: ",1f,7c,b1,3d) + vertexInfoLog),null()));
            		}
HXLINE( 355)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID = gl->createShader(gl->FRAGMENT_SHADER);
HXLINE( 356)		gl->shaderSource(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID,fragmentShaderSource);
HXLINE( 357)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 359)		gl->compileShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID);
HXLINE( 360)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 362)		int fragmentCompiled = ( (int)(gl->getShaderParameter(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID,gl->COMPILE_STATUS)) );
HXLINE( 364)		if ((fragmentCompiled == (int)0)) {
HXLINE( 366)			::String fragmentInfoLog = gl->getShaderInfoLog(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID);
HXLINE( 368)			bool _hx_tmp2;
HXDLIN( 368)			if (hx::IsNotNull( fragmentInfoLog )) {
HXLINE( 368)				_hx_tmp2 = (fragmentInfoLog.length != (int)0);
            			}
            			else {
HXLINE( 368)				_hx_tmp2 = false;
            			}
HXDLIN( 368)			if (_hx_tmp2) {
HXLINE( 370)				 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 370)				_hx_tmp3((HX_("fragment: ",76,26,d9,f9) + fragmentInfoLog),hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),370,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
            			}
HXLINE( 374)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("Error compiling fragment shader: ",33,70,4d,6d) + fragmentInfoLog),null()));
            		}
HXLINE( 378)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID = gl->createProgram();
HXLINE( 379)		gl->attachShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___vertexShaderID);
HXLINE( 380)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 382)		gl->attachShader(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___fragmentShaderID);
HXLINE( 383)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 385)		{
HXLINE( 385)			int _g = (int)0;
HXDLIN( 385)			while((_g < (int)16)){
HXLINE( 385)				_g = (_g + (int)1);
HXDLIN( 385)				int i = (_g - (int)1);
HXLINE( 387)				::String name = (HX_("va",2b,67,00,00) + i);
HXLINE( 389)				if ((vertexShaderSource.indexOf((HX_(" ",20,00,00,00) + name),null()) != (int)-1)) {
HXLINE( 391)					gl->bindAttribLocation(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID,i,name);
            				}
            			}
            		}
HXLINE( 397)		gl->linkProgram(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID);
HXLINE( 399)		::String infoLog = gl->getProgramInfoLog(::openfl::_internal::stage3D::opengl::GLProgram3D_obj::program->_hx___programID);
HXLINE( 401)		bool _hx_tmp4;
HXDLIN( 401)		if (hx::IsNotNull( infoLog )) {
HXLINE( 401)			_hx_tmp4 = (infoLog.length != (int)0);
            		}
            		else {
HXLINE( 401)			_hx_tmp4 = false;
            		}
HXDLIN( 401)		if (_hx_tmp4) {
HXLINE( 403)			 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 403)			_hx_tmp5((HX_("program: ",2a,26,c4,dc) + infoLog),hx::SourceInfo(HX_("GLProgram3D.hx",6e,1f,05,3b),403,HX_("openfl._internal.stage3D.opengl.GLProgram3D",20,fb,21,a0),HX_("__uploadFromGLSL",a9,36,31,0d)));
            		}
HXLINE( 407)		::openfl::_internal::stage3D::opengl::GLProgram3D_obj::_hx___buildUniformList();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GLProgram3D_obj,_hx___uploadFromGLSL,(void))


GLProgram3D_obj::GLProgram3D_obj()
{
}

bool GLProgram3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"use") ) { outValue = use_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"upload") ) { outValue = upload_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { outValue = ( program ); return true; }
		if (HX_FIELD_EQ(inName,"dispose") ) { outValue = dispose_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"flushUniform") ) { outValue = flushUniform_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderSession") ) { outValue = ( renderSession ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__deleteShaders") ) { outValue = _hx___deleteShaders_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setPositionScale") ) { outValue = setPositionScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__uploadFromGLSL") ) { outValue = _hx___uploadFromGLSL_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__buildUniformList") ) { outValue = _hx___buildUniformList_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__getUniformRegisters") ) { outValue = _hx___getUniformRegisters_dyn(); return true; }
	}
	return false;
}

bool GLProgram3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { program=ioValue.Cast<  ::openfl::display3D::Program3D >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderSession") ) { renderSession=ioValue.Cast<  ::openfl::_internal::renderer::RenderSession >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLProgram3D_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GLProgram3D_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(void *) &GLProgram3D_obj::program,HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3")},
	{hx::fsObject /*::openfl::_internal::renderer::RenderSession*/ ,(void *) &GLProgram3D_obj::renderSession,HX_HCSTRING("renderSession","\xa0","\x8a","\x85","\x8f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GLProgram3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLProgram3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GLProgram3D_obj::program,"program");
	HX_MARK_MEMBER_NAME(GLProgram3D_obj::renderSession,"renderSession");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLProgram3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLProgram3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GLProgram3D_obj::program,"program");
	HX_VISIT_MEMBER_NAME(GLProgram3D_obj::renderSession,"renderSession");
};

#endif

hx::Class GLProgram3D_obj::__mClass;

static ::String GLProgram3D_obj_sStaticFields[] = {
	HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"),
	HX_HCSTRING("renderSession","\xa0","\x8a","\x85","\x8f"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("flushUniform","\xd0","\xa6","\xc9","\xf3"),
	HX_HCSTRING("setPositionScale","\x1f","\x30","\x30","\xa3"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	HX_HCSTRING("use","\x47","\x2c","\x59","\x00"),
	HX_HCSTRING("__buildUniformList","\x44","\x16","\xc1","\x02"),
	HX_HCSTRING("__deleteShaders","\xa3","\x4d","\xc2","\x45"),
	HX_HCSTRING("__getUniformRegisters","\x72","\x52","\xab","\xfa"),
	HX_HCSTRING("__uploadFromGLSL","\xa9","\x36","\x31","\x0d"),
	::String(null())
};

void GLProgram3D_obj::__register()
{
	hx::Object *dummy = new GLProgram3D_obj;
	GLProgram3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.opengl.GLProgram3D","\x20","\xfb","\x21","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GLProgram3D_obj::__GetStatic;
	__mClass->mSetStaticField = &GLProgram3D_obj::__SetStatic;
	__mClass->mMarkFunc = GLProgram3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GLProgram3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GLProgram3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLProgram3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLProgram3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLProgram3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace opengl
