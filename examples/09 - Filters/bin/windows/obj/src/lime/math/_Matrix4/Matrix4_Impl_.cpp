// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_17__new,"lime.math._Matrix4.Matrix4_Impl_","_new",0x84b003e9,"lime.math._Matrix4.Matrix4_Impl_._new","lime/math/Matrix4.hx",17,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_32_append,"lime.math._Matrix4.Matrix4_Impl_","append",0x0e638262,"lime.math._Matrix4.Matrix4_Impl_.append","lime/math/Matrix4.hx",32,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_66_appendRotation,"lime.math._Matrix4.Matrix4_Impl_","appendRotation",0xe357adc0,"lime.math._Matrix4.Matrix4_Impl_.appendRotation","lime/math/Matrix4.hx",66,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_84_appendScale,"lime.math._Matrix4.Matrix4_Impl_","appendScale",0x8a9ad8c8,"lime.math._Matrix4.Matrix4_Impl_.appendScale","lime/math/Matrix4.hx",84,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_89_appendTranslation,"lime.math._Matrix4.Matrix4_Impl_","appendTranslation",0xe6447daf,"lime.math._Matrix4.Matrix4_Impl_.appendTranslation","lime/math/Matrix4.hx",89,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_100_clone,"lime.math._Matrix4.Matrix4_Impl_","clone",0xe1a2dbd5,"lime.math._Matrix4.Matrix4_Impl_.clone","lime/math/Matrix4.hx",100,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_107_copyColumnFrom,"lime.math._Matrix4.Matrix4_Impl_","copyColumnFrom",0x5224fffd,"lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom","lime/math/Matrix4.hx",107,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_148_copyColumnTo,"lime.math._Matrix4.Matrix4_Impl_","copyColumnTo",0xcc64e54e,"lime.math._Matrix4.Matrix4_Impl_.copyColumnTo","lime/math/Matrix4.hx",148,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_189_copyFrom,"lime.math._Matrix4.Matrix4_Impl_","copyFrom",0xc27fde47,"lime.math._Matrix4.Matrix4_Impl_.copyFrom","lime/math/Matrix4.hx",189,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_194_copythisFrom,"lime.math._Matrix4.Matrix4_Impl_","copythisFrom",0x28530e25,"lime.math._Matrix4.Matrix4_Impl_.copythisFrom","lime/math/Matrix4.hx",194,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_209_copythisTo,"lime.math._Matrix4.Matrix4_Impl_","copythisTo",0xe75f9976,"lime.math._Matrix4.Matrix4_Impl_.copythisTo","lime/math/Matrix4.hx",209,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_226_copyRowFrom,"lime.math._Matrix4.Matrix4_Impl_","copyRowFrom",0xc4e0b7e7,"lime.math._Matrix4.Matrix4_Impl_.copyRowFrom","lime/math/Matrix4.hx",226,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_265_create2D,"lime.math._Matrix4.Matrix4_Impl_","create2D",0x26131c56,"lime.math._Matrix4.Matrix4_Impl_.create2D","lime/math/Matrix4.hx",265,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_281_createABCD,"lime.math._Matrix4.Matrix4_Impl_","createABCD",0x303c4746,"lime.math._Matrix4.Matrix4_Impl_.createABCD","lime/math/Matrix4.hx",281,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_310_createOrtho,"lime.math._Matrix4.Matrix4_Impl_","createOrtho",0x33fdc114,"lime.math._Matrix4.Matrix4_Impl_.createOrtho","lime/math/Matrix4.hx",310,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_328_copyRowTo,"lime.math._Matrix4.Matrix4_Impl_","copyRowTo",0x543beeb8,"lime.math._Matrix4.Matrix4_Impl_.copyRowTo","lime/math/Matrix4.hx",328,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_369_copyToMatrix4,"lime.math._Matrix4.Matrix4_Impl_","copyToMatrix4",0x1032009b,"lime.math._Matrix4.Matrix4_Impl_.copyToMatrix4","lime/math/Matrix4.hx",369,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_474_deltaTransformVector,"lime.math._Matrix4.Matrix4_Impl_","deltaTransformVector",0x66f080bf,"lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector","lime/math/Matrix4.hx",474,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_487_identity,"lime.math._Matrix4.Matrix4_Impl_","identity",0xb34e17c6,"lime.math._Matrix4.Matrix4_Impl_.identity","lime/math/Matrix4.hx",487,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_509_interpolate,"lime.math._Matrix4.Matrix4_Impl_","interpolate",0xf4884739,"lime.math._Matrix4.Matrix4_Impl_.interpolate","lime/math/Matrix4.hx",509,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_526_interpolateTo,"lime.math._Matrix4.Matrix4_Impl_","interpolateTo",0x5c939114,"lime.math._Matrix4.Matrix4_Impl_.interpolateTo","lime/math/Matrix4.hx",526,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_535_invert,"lime.math._Matrix4.Matrix4_Impl_","invert",0x1e68879e,"lime.math._Matrix4.Matrix4_Impl_.invert","lime/math/Matrix4.hx",535,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_573_pointAt,"lime.math._Matrix4.Matrix4_Impl_","pointAt",0x903e77db,"lime.math._Matrix4.Matrix4_Impl_.pointAt","lime/math/Matrix4.hx",573,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_640_prepend,"lime.math._Matrix4.Matrix4_Impl_","prepend",0x76fd6d86,"lime.math._Matrix4.Matrix4_Impl_.prepend","lime/math/Matrix4.hx",640,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_674_prependRotation,"lime.math._Matrix4.Matrix4_Impl_","prependRotation",0x52475ce4,"lime.math._Matrix4.Matrix4_Impl_.prependRotation","lime/math/Matrix4.hx",674,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_692_prependScale,"lime.math._Matrix4.Matrix4_Impl_","prependScale",0x9a060b24,"lime.math._Matrix4.Matrix4_Impl_.prependScale","lime/math/Matrix4.hx",692,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_697_prependTranslation,"lime.math._Matrix4.Matrix4_Impl_","prependTranslation",0xfad7dd0b,"lime.math._Matrix4.Matrix4_Impl_.prependTranslation","lime/math/Matrix4.hx",697,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_790_transformVector,"lime.math._Matrix4.Matrix4_Impl_","transformVector",0x3cbf39c7,"lime.math._Matrix4.Matrix4_Impl_.transformVector","lime/math/Matrix4.hx",790,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_803_transformVectors,"lime.math._Matrix4.Matrix4_Impl_","transformVectors",0xea9354cc,"lime.math._Matrix4.Matrix4_Impl_.transformVectors","lime/math/Matrix4.hx",803,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_825_transpose,"lime.math._Matrix4.Matrix4_Impl_","transpose",0x2d08b4f1,"lime.math._Matrix4.Matrix4_Impl_.transpose","lime/math/Matrix4.hx",825,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_837___getAxisRotation,"lime.math._Matrix4.Matrix4_Impl_","__getAxisRotation",0x8b4b420d,"lime.math._Matrix4.Matrix4_Impl_.__getAxisRotation","lime/math/Matrix4.hx",837,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_869___swap,"lime.math._Matrix4.Matrix4_Impl_","__swap",0x79e62e3b,"lime.math._Matrix4.Matrix4_Impl_.__swap","lime/math/Matrix4.hx",869,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_887_get_determinant,"lime.math._Matrix4.Matrix4_Impl_","get_determinant",0x5d0323a4,"lime.math._Matrix4.Matrix4_Impl_.get_determinant","lime/math/Matrix4.hx",887,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_899_get_position,"lime.math._Matrix4.Matrix4_Impl_","get_position",0x55830b3a,"lime.math._Matrix4.Matrix4_Impl_.get_position","lime/math/Matrix4.hx",899,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_904_set_position,"lime.math._Matrix4.Matrix4_Impl_","set_position",0x6a7c2eae,"lime.math._Matrix4.Matrix4_Impl_.set_position","lime/math/Matrix4.hx",904,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_916_get,"lime.math._Matrix4.Matrix4_Impl_","get",0x10b0bb0e,"lime.math._Matrix4.Matrix4_Impl_.get","lime/math/Matrix4.hx",916,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_921_set,"lime.math._Matrix4.Matrix4_Impl_","set",0x10b9d61a,"lime.math._Matrix4.Matrix4_Impl_.set","lime/math/Matrix4.hx",921,0xeb65dbd8)
HX_LOCAL_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_11_boot,"lime.math._Matrix4.Matrix4_Impl_","boot",0x86ac72ba,"lime.math._Matrix4.Matrix4_Impl_.boot","lime/math/Matrix4.hx",11,0xeb65dbd8)
static const Float _hx_array_data_cbf9fee6_43[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
namespace lime{
namespace math{
namespace _Matrix4{

void Matrix4_Impl__obj::__construct() { }

Dynamic Matrix4_Impl__obj::__CreateEmpty() { return new Matrix4_Impl__obj; }

void *Matrix4_Impl__obj::_hx_vtable = 0;

Dynamic Matrix4_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix4_Impl__obj > _hx_result = new Matrix4_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Matrix4_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71ea7962;
}

::Array< Float > Matrix4_Impl__obj::_hx___identity;

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::_new( ::lime::utils::ArrayBufferView data){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_17__new)
HXDLIN(  17)		 ::lime::utils::ArrayBufferView this1;
HXLINE(  19)		bool _hx_tmp;
HXDLIN(  19)		if (hx::IsNotNull( data )) {
HXLINE(  19)			_hx_tmp = (data->length == (int)16);
            		}
            		else {
HXLINE(  19)			_hx_tmp = false;
            		}
HXDLIN(  19)		if (_hx_tmp) {
HXLINE(  21)			this1 = data;
            		}
            		else {
HXLINE(  25)			::cpp::VirtualArray array = ::lime::math::_Matrix4::Matrix4_Impl__obj::_hx___identity;
HXDLIN(  25)			 ::lime::utils::ArrayBufferView this2;
HXDLIN(  25)			if (hx::IsNotNull( array )) {
HXLINE(  25)				 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN(  25)				_this->byteOffset = (int)0;
HXDLIN(  25)				_this->length = array->get_length();
HXDLIN(  25)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  25)				 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  25)				_this->buffer = this3;
HXDLIN(  25)				_this->copyFromArray(array,null());
HXDLIN(  25)				this2 = _this;
            			}
            			else {
HXLINE(  25)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN(  25)			this1 = this2;
            		}
HXLINE(  17)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,_new,return )

void Matrix4_Impl__obj::append( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView lhs){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_32_append)
HXLINE(  34)		Float m111 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  34)		Float m121 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN(  34)		Float m131 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN(  34)		Float m141 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN(  34)		Float m112 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN(  34)		Float m122 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN(  34)		Float m132 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN(  34)		Float m142 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN(  34)		Float m113 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN(  34)		Float m123 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN(  34)		Float m133 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN(  34)		Float m143 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN(  34)		Float m114 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN(  34)		Float m124 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN(  34)		Float m134 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN(  34)		Float m144 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXDLIN(  34)		Float m211 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)0);
HXDLIN(  34)		Float m221 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)4);
HXDLIN(  34)		Float m231 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)8);
HXDLIN(  34)		Float m241 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)12);
HXDLIN(  34)		Float m212 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)1);
HXDLIN(  34)		Float m222 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)5);
HXDLIN(  34)		Float m232 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)9);
HXDLIN(  34)		Float m242 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)13);
HXDLIN(  34)		Float m213 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)2);
HXDLIN(  34)		Float m223 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)6);
HXDLIN(  34)		Float m233 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)10);
HXDLIN(  34)		Float m243 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)14);
HXDLIN(  34)		Float m214 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)3);
HXDLIN(  34)		Float m224 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)7);
HXDLIN(  34)		Float m234 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)11);
HXDLIN(  34)		Float m244 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)15);
HXLINE(  43)		{
HXLINE(  43)			Float val = ((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241));
HXDLIN(  43)			::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            		}
HXLINE(  44)		{
HXLINE(  44)			Float val1 = ((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242));
HXDLIN(  44)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val1);
            		}
HXLINE(  45)		{
HXLINE(  45)			Float val2 = ((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243));
HXDLIN(  45)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val2);
            		}
HXLINE(  46)		{
HXLINE(  46)			Float val3 = ((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244));
HXDLIN(  46)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val3);
            		}
HXLINE(  48)		{
HXLINE(  48)			Float val4 = ((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241));
HXDLIN(  48)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val4);
            		}
HXLINE(  49)		{
HXLINE(  49)			Float val5 = ((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242));
HXDLIN(  49)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            		}
HXLINE(  50)		{
HXLINE(  50)			Float val6 = ((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243));
HXDLIN(  50)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val6);
            		}
HXLINE(  51)		{
HXLINE(  51)			Float val7 = ((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244));
HXDLIN(  51)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val7);
            		}
HXLINE(  53)		{
HXLINE(  53)			Float val8 = ((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241));
HXDLIN(  53)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val8);
            		}
HXLINE(  54)		{
HXLINE(  54)			Float val9 = ((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242));
HXDLIN(  54)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val9);
            		}
HXLINE(  55)		{
HXLINE(  55)			Float val10 = ((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243));
HXDLIN(  55)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            		}
HXLINE(  56)		{
HXLINE(  56)			Float val11 = ((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244));
HXDLIN(  56)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            		}
HXLINE(  58)		{
HXLINE(  58)			Float val12 = ((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241));
HXDLIN(  58)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val12);
            		}
HXLINE(  59)		{
HXLINE(  59)			Float val13 = ((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242));
HXDLIN(  59)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val13);
            		}
HXLINE(  60)		{
HXLINE(  60)			Float val14 = ((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243));
HXDLIN(  60)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val14);
            		}
HXLINE(  61)		{
HXLINE(  61)			Float val15 = ((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244));
HXDLIN(  61)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,append,(void))

void Matrix4_Impl__obj::appendRotation( ::lime::utils::ArrayBufferView this1,Float degrees, ::lime::math::Vector4 axis, ::lime::math::Vector4 pivotPoint){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_66_appendRotation)
HXLINE(  68)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_hx___getAxisRotation(this1,axis->x,axis->y,axis->z,degrees);
HXLINE(  70)		if (hx::IsNotNull( pivotPoint )) {
HXLINE(  72)			 ::lime::math::Vector4 p = pivotPoint;
HXLINE(  73)			::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(m,p->x,p->y,p->z);
            		}
HXLINE(  77)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendRotation,(void))

void Matrix4_Impl__obj::appendScale( ::lime::utils::ArrayBufferView this1,Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_84_appendScale)
HXDLIN(  84)		::cpp::VirtualArray array = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN(  84)		 ::lime::utils::ArrayBufferView this2;
HXDLIN(  84)		if (hx::IsNotNull( array )) {
HXDLIN(  84)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN(  84)			_this->byteOffset = (int)0;
HXDLIN(  84)			_this->length = array->get_length();
HXDLIN(  84)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  84)			 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  84)			_this->buffer = this3;
HXDLIN(  84)			_this->copyFromArray(array,null());
HXDLIN(  84)			this2 = _this;
            		}
            		else {
HXDLIN(  84)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  84)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this1,::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendScale,(void))

void Matrix4_Impl__obj::appendTranslation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_89_appendTranslation)
HXLINE(  91)		{
HXLINE(  91)			Float val = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)) + x);
HXDLIN(  91)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val);
            		}
HXLINE(  92)		{
HXLINE(  92)			Float val1 = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)) + y);
HXDLIN(  92)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val1);
            		}
HXLINE(  93)		{
HXLINE(  93)			Float val2 = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)) + z);
HXDLIN(  93)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val2);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendTranslation,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::clone( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_100_clone)
HXDLIN( 100)		 ::lime::utils::ArrayBufferView this2;
HXDLIN( 100)		if (hx::IsNotNull( this1 )) {
HXDLIN( 100)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 100)			 ::haxe::io::Bytes srcData = this1->buffer;
HXDLIN( 100)			int srcLength = this1->length;
HXDLIN( 100)			int srcByteOffset = this1->byteOffset;
HXDLIN( 100)			int srcElementSize = this1->bytesPerElement;
HXDLIN( 100)			int elementSize = _this->bytesPerElement;
HXDLIN( 100)			if ((this1->type == _this->type)) {
HXDLIN( 100)				int srcLength1 = srcData->length;
HXDLIN( 100)				int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 100)				 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 100)				_this->buffer = this3;
HXDLIN( 100)				_this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            			}
            			else {
HXDLIN( 100)				HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            			}
HXDLIN( 100)			_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 100)			_this->byteOffset = (int)0;
HXDLIN( 100)			_this->length = srcLength;
HXDLIN( 100)			this2 = _this;
            		}
            		else {
HXDLIN( 100)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 100)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,clone,return )

void Matrix4_Impl__obj::copyColumnFrom( ::lime::utils::ArrayBufferView this1,int column, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_107_copyColumnFrom)
HXDLIN( 107)		switch((int)(column)){
            			case (int)0: {
HXLINE( 111)				{
HXLINE( 111)					Float val = vector->x;
HXDLIN( 111)					::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            				}
HXLINE( 112)				{
HXLINE( 112)					Float val1 = vector->y;
HXDLIN( 112)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val1);
            				}
HXLINE( 113)				{
HXLINE( 113)					Float val2 = vector->z;
HXDLIN( 113)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val2);
            				}
HXLINE( 114)				{
HXLINE( 114)					Float val3 = vector->w;
HXDLIN( 114)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val3);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 118)				{
HXLINE( 118)					Float val4 = vector->x;
HXDLIN( 118)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val4);
            				}
HXLINE( 119)				{
HXLINE( 119)					Float val5 = vector->y;
HXDLIN( 119)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            				}
HXLINE( 120)				{
HXLINE( 120)					Float val6 = vector->z;
HXDLIN( 120)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val6);
            				}
HXLINE( 121)				{
HXLINE( 121)					Float val7 = vector->w;
HXDLIN( 121)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val7);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 125)				{
HXLINE( 125)					Float val8 = vector->x;
HXDLIN( 125)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val8);
            				}
HXLINE( 126)				{
HXLINE( 126)					Float val9 = vector->y;
HXDLIN( 126)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val9);
            				}
HXLINE( 127)				{
HXLINE( 127)					Float val10 = vector->z;
HXDLIN( 127)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            				}
HXLINE( 128)				{
HXLINE( 128)					Float val11 = vector->w;
HXDLIN( 128)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 132)				{
HXLINE( 132)					Float val12 = vector->x;
HXDLIN( 132)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val12);
            				}
HXLINE( 133)				{
HXLINE( 133)					Float val13 = vector->y;
HXDLIN( 133)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val13);
            				}
HXLINE( 134)				{
HXLINE( 134)					Float val14 = vector->z;
HXDLIN( 134)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val14);
            				}
HXLINE( 135)				{
HXLINE( 135)					Float val15 = vector->w;
HXDLIN( 135)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            				}
            			}
            			break;
            			default:{
HXLINE( 139)				::lime::utils::Log_obj::error(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)),hx::SourceInfo(HX_("Matrix4.hx",eb,49,5a,69),139,HX_("lime.math._Matrix4.Matrix4_Impl_",e6,fe,f9,cb),HX_("copyColumnFrom",75,97,b5,3a)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyColumnFrom,(void))

void Matrix4_Impl__obj::copyColumnTo( ::lime::utils::ArrayBufferView this1,int column, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_148_copyColumnTo)
HXDLIN( 148)		switch((int)(column)){
            			case (int)0: {
HXLINE( 152)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXLINE( 153)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXLINE( 154)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXLINE( 155)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
            			}
            			break;
            			case (int)1: {
HXLINE( 159)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXLINE( 160)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXLINE( 161)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE( 162)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
            			}
            			break;
            			case (int)2: {
HXLINE( 166)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXLINE( 167)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXLINE( 168)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 169)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
            			}
            			break;
            			case (int)3: {
HXLINE( 173)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXLINE( 174)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXLINE( 175)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 176)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
            			}
            			break;
            			default:{
HXLINE( 180)				::lime::utils::Log_obj::error(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)),hx::SourceInfo(HX_("Matrix4.hx",eb,49,5a,69),180,HX_("lime.math._Matrix4.Matrix4_Impl_",e6,fe,f9,cb),HX_("copyColumnTo",c6,2e,f6,f6)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyColumnTo,(void))

void Matrix4_Impl__obj::copyFrom( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView other){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_189_copyFrom)
HXDLIN( 189)		int offset = (int)0;
HXDLIN( 189)		if (hx::IsNotNull( other )) {
HXDLIN( 189)			 ::haxe::io::Bytes this2 = this1->buffer;
HXDLIN( 189)			this2->blit((offset * this1->bytesPerElement),other->buffer,other->byteOffset,other->byteLength);
            		}
            		else {
HXDLIN( 189)			HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,copyFrom,(void))

void Matrix4_Impl__obj::copythisFrom( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView array,hx::Null< int >  __o_index,hx::Null< bool >  __o_transposeValues){
int index = __o_index.Default(0);
bool transposeValues = __o_transposeValues.Default(false);
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_194_copythisFrom)
HXLINE( 196)		if (transposeValues) {
HXLINE( 197)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
HXLINE( 199)		int l = (array->length - index);
HXLINE( 200)		{
HXLINE( 200)			int _g1 = (int)0;
HXDLIN( 200)			int _g = l;
HXDLIN( 200)			while((_g1 < _g)){
HXLINE( 200)				_g1 = (_g1 + (int)1);
HXDLIN( 200)				int c = (_g1 - (int)1);
HXLINE( 201)				{
HXLINE( 201)					int array1 = array->byteOffset;
HXDLIN( 201)					Float val = ::__hxcpp_memory_get_float(array->buffer->b,(array1 + ((c + index) * (int)4)));
HXDLIN( 201)					{
HXLINE( 201)						int this2 = this1->byteOffset;
HXDLIN( 201)						::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (c * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE( 203)		if (transposeValues) {
HXLINE( 204)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,copythisFrom,(void))

void Matrix4_Impl__obj::copythisTo( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView array,hx::Null< int >  __o_index,hx::Null< bool >  __o_transposeValues){
int index = __o_index.Default(0);
bool transposeValues = __o_transposeValues.Default(false);
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_209_copythisTo)
HXLINE( 211)		if (transposeValues) {
HXLINE( 212)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
HXLINE( 214)		int l = this1->length;
HXLINE( 215)		{
HXLINE( 215)			int _g1 = (int)0;
HXDLIN( 215)			int _g = l;
HXDLIN( 215)			while((_g1 < _g)){
HXLINE( 215)				_g1 = (_g1 + (int)1);
HXDLIN( 215)				int c = (_g1 - (int)1);
HXLINE( 216)				{
HXLINE( 216)					int this2 = this1->byteOffset;
HXDLIN( 216)					Float val = ::__hxcpp_memory_get_float(this1->buffer->b,(this2 + (c * (int)4)));
HXDLIN( 216)					{
HXLINE( 216)						int array1 = array->byteOffset;
HXDLIN( 216)						::__hxcpp_memory_set_float(array->buffer->b,(array1 + ((c + index) * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE( 218)		if (transposeValues) {
HXLINE( 219)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,copythisTo,(void))

void Matrix4_Impl__obj::copyRowFrom( ::lime::utils::ArrayBufferView this1,int row, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_226_copyRowFrom)
HXDLIN( 226)		switch((int)(row)){
            			case (int)0: {
HXLINE( 230)				{
HXLINE( 230)					Float val = vector->x;
HXDLIN( 230)					::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            				}
HXLINE( 231)				{
HXLINE( 231)					Float val1 = vector->y;
HXDLIN( 231)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val1);
            				}
HXLINE( 232)				{
HXLINE( 232)					Float val2 = vector->z;
HXDLIN( 232)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val2);
            				}
HXLINE( 233)				{
HXLINE( 233)					Float val3 = vector->w;
HXDLIN( 233)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val3);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 237)				{
HXLINE( 237)					Float val4 = vector->x;
HXDLIN( 237)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val4);
            				}
HXLINE( 238)				{
HXLINE( 238)					Float val5 = vector->y;
HXDLIN( 238)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            				}
HXLINE( 239)				{
HXLINE( 239)					Float val6 = vector->z;
HXDLIN( 239)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val6);
            				}
HXLINE( 240)				{
HXLINE( 240)					Float val7 = vector->w;
HXDLIN( 240)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val7);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 244)				{
HXLINE( 244)					Float val8 = vector->x;
HXDLIN( 244)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val8);
            				}
HXLINE( 245)				{
HXLINE( 245)					Float val9 = vector->y;
HXDLIN( 245)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val9);
            				}
HXLINE( 246)				{
HXLINE( 246)					Float val10 = vector->z;
HXDLIN( 246)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            				}
HXLINE( 247)				{
HXLINE( 247)					Float val11 = vector->w;
HXDLIN( 247)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val11);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 251)				{
HXLINE( 251)					Float val12 = vector->x;
HXDLIN( 251)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val12);
            				}
HXLINE( 252)				{
HXLINE( 252)					Float val13 = vector->y;
HXDLIN( 252)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val13);
            				}
HXLINE( 253)				{
HXLINE( 253)					Float val14 = vector->z;
HXDLIN( 253)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val14);
            				}
HXLINE( 254)				{
HXLINE( 254)					Float val15 = vector->w;
HXDLIN( 254)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            				}
            			}
            			break;
            			default:{
HXLINE( 258)				::lime::utils::Log_obj::error(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)),hx::SourceInfo(HX_("Matrix4.hx",eb,49,5a,69),258,HX_("lime.math._Matrix4.Matrix4_Impl_",e6,fe,f9,cb),HX_("copyRowFrom",6f,45,8b,ef)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyRowFrom,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::create2D(Float x,Float y,hx::Null< Float >  __o_scale,hx::Null< Float >  __o_rotation){
Float scale = __o_scale.Default(1);
Float rotation = __o_rotation.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_265_create2D)
HXLINE( 267)		Float theta = ((Float)(rotation * ::Math_obj::PI) / (Float)((Float)180.0));
HXLINE( 268)		Float c = ::Math_obj::cos(theta);
HXLINE( 269)		Float s = ::Math_obj::sin(theta);
HXLINE( 271)		::cpp::VirtualArray array = ::Array_obj< Float >::__new(16)->init(0,(c * scale))->init(1,(-(s) * scale))->init(2,(int)0)->init(3,(int)0)->init(4,(s * scale))->init(5,(c * scale))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,x)->init(13,y)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 271)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 271)		if (hx::IsNotNull( array )) {
HXLINE( 271)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 271)			_this->byteOffset = (int)0;
HXDLIN( 271)			_this->length = array->get_length();
HXDLIN( 271)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 271)			 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 271)			_this->buffer = this2;
HXDLIN( 271)			_this->copyFromArray(array,null());
HXDLIN( 271)			this1 = _this;
            		}
            		else {
HXLINE( 271)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 271)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,create2D,return )

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::createABCD(Float a,Float b,Float c,Float d,Float tx,Float ty, ::lime::utils::ArrayBufferView matrix){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_281_createABCD)
HXLINE( 283)		if (hx::IsNull( matrix )) {
HXLINE( 283)			matrix = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
            		}
HXLINE( 285)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)0,a);
HXLINE( 286)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)1,b);
HXLINE( 287)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)2,(int)0);
HXLINE( 288)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)3,(int)0);
HXLINE( 290)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)4,c);
HXLINE( 291)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)5,d);
HXLINE( 292)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)6,(int)0);
HXLINE( 293)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)7,(int)0);
HXLINE( 295)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)8,(int)0);
HXLINE( 296)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)9,(int)0);
HXLINE( 297)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)10,(int)1);
HXLINE( 298)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)11,(int)0);
HXLINE( 300)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)12,tx);
HXLINE( 301)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)13,ty);
HXLINE( 302)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)14,(int)0);
HXLINE( 303)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(matrix,(int)15,(int)1);
HXLINE( 305)		return matrix;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Matrix4_Impl__obj,createABCD,return )

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::createOrtho(Float x0,Float x1,Float y0,Float y1,Float zNear,Float zFar){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_310_createOrtho)
HXLINE( 312)		Float sx = ((Float)((Float)1.0) / (Float)(x1 - x0));
HXLINE( 313)		Float sy = ((Float)((Float)1.0) / (Float)(y1 - y0));
HXLINE( 314)		Float sz = ((Float)((Float)1.0) / (Float)(zFar - zNear));
HXLINE( 316)		::cpp::VirtualArray array = ::Array_obj< Float >::__new(16)->init(0,(((Float)2.0) * sx))->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(((Float)2.0) * sy))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(((Float)-2.0) * sz))->init(11,(int)0)->init(12,(-((x0 + x1)) * sx))->init(13,(-((y0 + y1)) * sy))->init(14,(-((zNear + zFar)) * sz))->init(15,(int)1);
HXDLIN( 316)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 316)		if (hx::IsNotNull( array )) {
HXLINE( 316)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 316)			_this->byteOffset = (int)0;
HXDLIN( 316)			_this->length = array->get_length();
HXDLIN( 316)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 316)			 ::haxe::io::Bytes this2 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 316)			_this->buffer = this2;
HXDLIN( 316)			_this->copyFromArray(array,null());
HXDLIN( 316)			this1 = _this;
            		}
            		else {
HXLINE( 316)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 316)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix4_Impl__obj,createOrtho,return )

void Matrix4_Impl__obj::copyRowTo( ::lime::utils::ArrayBufferView this1,int row, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_328_copyRowTo)
HXDLIN( 328)		switch((int)(row)){
            			case (int)0: {
HXLINE( 332)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXLINE( 333)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXLINE( 334)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXLINE( 335)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
            			}
            			break;
            			case (int)1: {
HXLINE( 339)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXLINE( 340)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXLINE( 341)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXLINE( 342)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
            			}
            			break;
            			case (int)2: {
HXLINE( 346)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXLINE( 347)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE( 348)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 349)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
            			}
            			break;
            			case (int)3: {
HXLINE( 353)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXLINE( 354)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXLINE( 355)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXLINE( 356)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
            			}
            			break;
            			default:{
HXLINE( 360)				::lime::utils::Log_obj::error(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)),hx::SourceInfo(HX_("Matrix4.hx",eb,49,5a,69),360,HX_("lime.math._Matrix4.Matrix4_Impl_",e6,fe,f9,cb),HX_("copyRowTo",40,8a,62,73)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyRowTo,(void))

void Matrix4_Impl__obj::copyToMatrix4( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView other){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_369_copyToMatrix4)
HXDLIN( 369)		 ::lime::utils::ArrayBufferView _this = other;
HXDLIN( 369)		int offset = (int)0;
HXDLIN( 369)		if (hx::IsNotNull( this1 )) {
HXDLIN( 369)			 ::haxe::io::Bytes _this1 = _this->buffer;
HXDLIN( 369)			_this1->blit((offset * _this->bytesPerElement),this1->buffer,this1->byteOffset,this1->byteLength);
            		}
            		else {
HXDLIN( 369)			HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,copyToMatrix4,(void))

 ::lime::math::Vector4 Matrix4_Impl__obj::deltaTransformVector( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 v){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_474_deltaTransformVector)
HXLINE( 476)		Float x = v->x;
HXDLIN( 476)		Float y = v->y;
HXDLIN( 476)		Float z = v->z;
HXLINE( 479)		Float _hx_tmp = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 479)		Float _hx_tmp1 = (_hx_tmp + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 479)		Float _hx_tmp2 = (_hx_tmp1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 479)		Float _hx_tmp3 = (_hx_tmp2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12)));
HXLINE( 480)		Float _hx_tmp4 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 480)		Float _hx_tmp5 = (_hx_tmp4 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 480)		Float _hx_tmp6 = (_hx_tmp5 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 480)		Float _hx_tmp7 = (_hx_tmp6 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28)));
HXLINE( 481)		Float _hx_tmp8 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 481)		Float _hx_tmp9 = (_hx_tmp8 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 481)		Float _hx_tmp10 = (_hx_tmp9 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXLINE( 478)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp7,(_hx_tmp10 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44))),(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,deltaTransformVector,return )

void Matrix4_Impl__obj::identity( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_487_identity)
HXLINE( 489)		::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,(int)1);
HXLINE( 490)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),(int)0);
HXLINE( 491)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),(int)0);
HXLINE( 492)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),(int)0);
HXLINE( 493)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),(int)0);
HXLINE( 494)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),(int)1);
HXLINE( 495)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),(int)0);
HXLINE( 496)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),(int)0);
HXLINE( 497)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),(int)0);
HXLINE( 498)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),(int)0);
HXLINE( 499)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),(int)1);
HXLINE( 500)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),(int)0);
HXLINE( 501)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),(int)0);
HXLINE( 502)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),(int)0);
HXLINE( 503)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),(int)0);
HXLINE( 504)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,identity,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::interpolate( ::lime::utils::ArrayBufferView thisMat, ::lime::utils::ArrayBufferView toMat,Float percent){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_509_interpolate)
HXLINE( 511)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 513)		{
HXLINE( 513)			int _g = (int)0;
HXDLIN( 513)			while((_g < (int)16)){
HXLINE( 513)				_g = (_g + (int)1);
HXDLIN( 513)				int i = (_g - (int)1);
HXLINE( 515)				Float _hx_tmp = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(thisMat,i);
HXDLIN( 515)				Float _hx_tmp1 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(toMat,i);
HXDLIN( 515)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,i,(_hx_tmp + ((_hx_tmp1 - ::lime::math::_Matrix4::Matrix4_Impl__obj::get(thisMat,i)) * percent)));
            			}
            		}
HXLINE( 519)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,interpolate,return )

void Matrix4_Impl__obj::interpolateTo( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView toMat,Float percent){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_526_interpolateTo)
HXDLIN( 526)		int _g = (int)0;
HXDLIN( 526)		while((_g < (int)16)){
HXDLIN( 526)			_g = (_g + (int)1);
HXDLIN( 526)			int i = (_g - (int)1);
HXLINE( 528)			{
HXLINE( 528)				int this2 = this1->byteOffset;
HXDLIN( 528)				Float val = ::__hxcpp_memory_get_float(this1->buffer->b,(this2 + (i * (int)4)));
HXDLIN( 528)				Float val1 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(toMat,i);
HXDLIN( 528)				int this3 = this1->byteOffset;
HXDLIN( 528)				Float val2 = (val + ((val1 - ::__hxcpp_memory_get_float(this1->buffer->b,(this3 + (i * (int)4)))) * percent));
HXDLIN( 528)				{
HXLINE( 528)					int this4 = this1->byteOffset;
HXDLIN( 528)					::__hxcpp_memory_set_float(this1->buffer->b,(this4 + (i * (int)4)),val2);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,interpolateTo,(void))

bool Matrix4_Impl__obj::invert( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_535_invert)
HXLINE( 537)		Float d = ::lime::math::_Matrix4::Matrix4_Impl__obj::get_determinant(this1);
HXLINE( 538)		bool invertable = (::Math_obj::abs(d) > ((Float)0.00000000001));
HXLINE( 540)		if (invertable) {
HXLINE( 542)			d = ((Float)(int)1 / (Float)d);
HXLINE( 544)			Float m11 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 544)			Float m21 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 544)			Float m31 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 544)			Float m41 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXLINE( 545)			Float m12 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN( 545)			Float m22 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN( 545)			Float m32 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN( 545)			Float m42 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXLINE( 546)			Float m13 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 546)			Float m23 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 546)			Float m33 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN( 546)			Float m43 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 547)			Float m14 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN( 547)			Float m24 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN( 547)			Float m34 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN( 547)			Float m44 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXLINE( 549)			{
HXLINE( 549)				Float val = (d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24)))));
HXDLIN( 549)				::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            			}
HXLINE( 550)			{
HXLINE( 550)				Float val1 = (-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14)))));
HXDLIN( 550)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val1);
            			}
HXLINE( 551)			{
HXLINE( 551)				Float val2 = (d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14)))));
HXDLIN( 551)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val2);
            			}
HXLINE( 552)			{
HXLINE( 552)				Float val3 = (-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14)))));
HXDLIN( 552)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val3);
            			}
HXLINE( 553)			{
HXLINE( 553)				Float val4 = (-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24)))));
HXDLIN( 553)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val4);
            			}
HXLINE( 554)			{
HXLINE( 554)				Float val5 = (d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14)))));
HXDLIN( 554)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            			}
HXLINE( 555)			{
HXLINE( 555)				Float val6 = (-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14)))));
HXDLIN( 555)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val6);
            			}
HXLINE( 556)			{
HXLINE( 556)				Float val7 = (d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14)))));
HXDLIN( 556)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val7);
            			}
HXLINE( 557)			{
HXLINE( 557)				Float val8 = (d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24)))));
HXDLIN( 557)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val8);
            			}
HXLINE( 558)			{
HXLINE( 558)				Float val9 = (-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14)))));
HXDLIN( 558)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val9);
            			}
HXLINE( 559)			{
HXLINE( 559)				Float val10 = (d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14)))));
HXDLIN( 559)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            			}
HXLINE( 560)			{
HXLINE( 560)				Float val11 = (-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14)))));
HXDLIN( 560)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            			}
HXLINE( 561)			{
HXLINE( 561)				Float val12 = (-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23)))));
HXDLIN( 561)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val12);
            			}
HXLINE( 562)			{
HXLINE( 562)				Float val13 = (d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13)))));
HXDLIN( 562)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val13);
            			}
HXLINE( 563)			{
HXLINE( 563)				Float val14 = (-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13)))));
HXDLIN( 563)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val14);
            			}
HXLINE( 564)			{
HXLINE( 564)				Float val15 = (d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13)))));
HXDLIN( 564)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            			}
            		}
HXLINE( 568)		return invertable;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,invert,return )

void Matrix4_Impl__obj::pointAt( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 pos, ::lime::math::Vector4 at, ::lime::math::Vector4 up){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_573_pointAt)
HXLINE( 575)		if (hx::IsNull( at )) {
HXLINE( 577)			at =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)-1,null());
            		}
HXLINE( 581)		if (hx::IsNull( up )) {
HXLINE( 583)			up =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)-1,(int)0,null());
            		}
HXLINE( 587)		Float dir = (at->x - pos->x);
HXDLIN( 587)		Float dir1 = (at->y - pos->y);
HXDLIN( 587)		 ::lime::math::Vector4 dir2 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,dir,dir1,(at->z - pos->z),null());
HXLINE( 588)		 ::lime::math::Vector4 vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,up->x,up->y,up->z,up->w);
HXLINE( 589)		 ::lime::math::Vector4 right;
HXLINE( 591)		{
HXLINE( 591)			Float l = (dir2->x * dir2->x);
HXDLIN( 591)			Float l1 = (l + (dir2->y * dir2->y));
HXDLIN( 591)			Float l2 = ::Math_obj::sqrt((l1 + (dir2->z * dir2->z)));
HXDLIN( 591)			if ((l2 != (int)0)) {
HXLINE( 591)				 ::lime::math::Vector4 dir3 = dir2;
HXDLIN( 591)				dir3->x = ((Float)dir3->x / (Float)l2);
HXDLIN( 591)				 ::lime::math::Vector4 dir4 = dir2;
HXDLIN( 591)				dir4->y = ((Float)dir4->y / (Float)l2);
HXDLIN( 591)				 ::lime::math::Vector4 dir5 = dir2;
HXDLIN( 591)				dir5->z = ((Float)dir5->z / (Float)l2);
            			}
            		}
HXLINE( 592)		{
HXLINE( 592)			Float l3 = (vup->x * vup->x);
HXDLIN( 592)			Float l4 = (l3 + (vup->y * vup->y));
HXDLIN( 592)			Float l5 = ::Math_obj::sqrt((l4 + (vup->z * vup->z)));
HXDLIN( 592)			if ((l5 != (int)0)) {
HXLINE( 592)				 ::lime::math::Vector4 vup1 = vup;
HXDLIN( 592)				vup1->x = ((Float)vup1->x / (Float)l5);
HXDLIN( 592)				 ::lime::math::Vector4 vup2 = vup;
HXDLIN( 592)				vup2->y = ((Float)vup2->y / (Float)l5);
HXDLIN( 592)				 ::lime::math::Vector4 vup3 = vup;
HXDLIN( 592)				vup3->z = ((Float)vup3->z / (Float)l5);
            			}
            		}
HXLINE( 594)		 ::lime::math::Vector4 dir21 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,dir2->x,dir2->y,dir2->z,dir2->w);
HXLINE( 595)		{
HXLINE( 595)			Float s = (vup->x * dir2->x);
HXDLIN( 595)			Float s1 = (s + (vup->y * dir2->y));
HXDLIN( 595)			Float s2 = (s1 + (vup->z * dir2->z));
HXDLIN( 595)			 ::lime::math::Vector4 dir22 = dir21;
HXDLIN( 595)			dir22->x = (dir22->x * s2);
HXDLIN( 595)			 ::lime::math::Vector4 dir23 = dir21;
HXDLIN( 595)			dir23->y = (dir23->y * s2);
HXDLIN( 595)			 ::lime::math::Vector4 dir24 = dir21;
HXDLIN( 595)			dir24->z = (dir24->z * s2);
            		}
HXLINE( 597)		Float vup4 = (vup->x - dir21->x);
HXDLIN( 597)		Float vup5 = (vup->y - dir21->y);
HXDLIN( 597)		vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,vup4,vup5,(vup->z - dir21->z),null());
HXLINE( 599)		Float _hx_tmp = (vup->x * vup->x);
HXDLIN( 599)		Float _hx_tmp1 = (_hx_tmp + (vup->y * vup->y));
HXDLIN( 599)		if ((::Math_obj::sqrt((_hx_tmp1 + (vup->z * vup->z))) > (int)0)) {
HXLINE( 601)			Float l6 = (vup->x * vup->x);
HXDLIN( 601)			Float l7 = (l6 + (vup->y * vup->y));
HXDLIN( 601)			Float l8 = ::Math_obj::sqrt((l7 + (vup->z * vup->z)));
HXDLIN( 601)			if ((l8 != (int)0)) {
HXLINE( 601)				 ::lime::math::Vector4 vup6 = vup;
HXDLIN( 601)				vup6->x = ((Float)vup6->x / (Float)l8);
HXDLIN( 601)				 ::lime::math::Vector4 vup7 = vup;
HXDLIN( 601)				vup7->y = ((Float)vup7->y / (Float)l8);
HXDLIN( 601)				 ::lime::math::Vector4 vup8 = vup;
HXDLIN( 601)				vup8->z = ((Float)vup8->z / (Float)l8);
            			}
            		}
            		else {
HXLINE( 605)			if ((dir2->x != (int)0)) {
HXLINE( 607)				vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,-(dir2->y),dir2->x,(int)0,null());
            			}
            			else {
HXLINE( 611)				vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null());
            			}
            		}
HXLINE( 617)		Float right1 = (vup->y * dir2->z);
HXDLIN( 617)		Float right2 = (right1 - (vup->z * dir2->y));
HXDLIN( 617)		Float right3 = (vup->z * dir2->x);
HXDLIN( 617)		Float right4 = (right3 - (vup->x * dir2->z));
HXDLIN( 617)		Float right5 = (vup->x * dir2->y);
HXDLIN( 617)		right =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,right2,right4,(right5 - (vup->y * dir2->x)),(int)1);
HXLINE( 618)		{
HXLINE( 618)			Float l9 = (right->x * right->x);
HXDLIN( 618)			Float l10 = (l9 + (right->y * right->y));
HXDLIN( 618)			Float l11 = ::Math_obj::sqrt((l10 + (right->z * right->z)));
HXDLIN( 618)			if ((l11 != (int)0)) {
HXLINE( 618)				 ::lime::math::Vector4 right6 = right;
HXDLIN( 618)				right6->x = ((Float)right6->x / (Float)l11);
HXDLIN( 618)				 ::lime::math::Vector4 right7 = right;
HXDLIN( 618)				right7->y = ((Float)right7->y / (Float)l11);
HXDLIN( 618)				 ::lime::math::Vector4 right8 = right;
HXDLIN( 618)				right8->z = ((Float)right8->z / (Float)l11);
            			}
            		}
HXLINE( 620)		{
HXLINE( 620)			Float val = right->x;
HXDLIN( 620)			::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            		}
HXLINE( 621)		{
HXLINE( 621)			Float val1 = right->y;
HXDLIN( 621)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val1);
            		}
HXLINE( 622)		{
HXLINE( 622)			Float val2 = right->z;
HXDLIN( 622)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val2);
            		}
HXLINE( 623)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),((Float)0.0));
HXLINE( 624)		{
HXLINE( 624)			Float val3 = vup->x;
HXDLIN( 624)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val3);
            		}
HXLINE( 625)		{
HXLINE( 625)			Float val4 = vup->y;
HXDLIN( 625)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val4);
            		}
HXLINE( 626)		{
HXLINE( 626)			Float val5 = vup->z;
HXDLIN( 626)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val5);
            		}
HXLINE( 627)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),((Float)0.0));
HXLINE( 628)		{
HXLINE( 628)			Float val6 = dir2->x;
HXDLIN( 628)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val6);
            		}
HXLINE( 629)		{
HXLINE( 629)			Float val7 = dir2->y;
HXDLIN( 629)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val7);
            		}
HXLINE( 630)		{
HXLINE( 630)			Float val8 = dir2->z;
HXDLIN( 630)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val8);
            		}
HXLINE( 631)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),((Float)0.0));
HXLINE( 632)		{
HXLINE( 632)			Float val9 = pos->x;
HXDLIN( 632)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val9);
            		}
HXLINE( 633)		{
HXLINE( 633)			Float val10 = pos->y;
HXDLIN( 633)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val10);
            		}
HXLINE( 634)		{
HXLINE( 634)			Float val11 = pos->z;
HXDLIN( 634)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            		}
HXLINE( 635)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,pointAt,(void))

void Matrix4_Impl__obj::prepend( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView rhs){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_640_prepend)
HXLINE( 642)		Float m111 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)0);
HXDLIN( 642)		Float m121 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)4);
HXDLIN( 642)		Float m131 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)8);
HXDLIN( 642)		Float m141 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)12);
HXDLIN( 642)		Float m112 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)1);
HXDLIN( 642)		Float m122 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)5);
HXDLIN( 642)		Float m132 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)9);
HXDLIN( 642)		Float m142 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)13);
HXDLIN( 642)		Float m113 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)2);
HXDLIN( 642)		Float m123 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)6);
HXDLIN( 642)		Float m133 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)10);
HXDLIN( 642)		Float m143 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)14);
HXDLIN( 642)		Float m114 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)3);
HXDLIN( 642)		Float m124 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)7);
HXDLIN( 642)		Float m134 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)11);
HXDLIN( 642)		Float m144 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)15);
HXDLIN( 642)		Float m211 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 642)		Float m221 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 642)		Float m231 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 642)		Float m241 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 642)		Float m212 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN( 642)		Float m222 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN( 642)		Float m232 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN( 642)		Float m242 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN( 642)		Float m213 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 642)		Float m223 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 642)		Float m233 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN( 642)		Float m243 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN( 642)		Float m214 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN( 642)		Float m224 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN( 642)		Float m234 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN( 642)		Float m244 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXLINE( 651)		{
HXLINE( 651)			Float val = ((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241));
HXDLIN( 651)			::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,val);
            		}
HXLINE( 652)		{
HXLINE( 652)			Float val1 = ((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242));
HXDLIN( 652)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val1);
            		}
HXLINE( 653)		{
HXLINE( 653)			Float val2 = ((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243));
HXDLIN( 653)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val2);
            		}
HXLINE( 654)		{
HXLINE( 654)			Float val3 = ((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244));
HXDLIN( 654)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val3);
            		}
HXLINE( 656)		{
HXLINE( 656)			Float val4 = ((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241));
HXDLIN( 656)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val4);
            		}
HXLINE( 657)		{
HXLINE( 657)			Float val5 = ((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242));
HXDLIN( 657)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),val5);
            		}
HXLINE( 658)		{
HXLINE( 658)			Float val6 = ((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243));
HXDLIN( 658)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val6);
            		}
HXLINE( 659)		{
HXLINE( 659)			Float val7 = ((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244));
HXDLIN( 659)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val7);
            		}
HXLINE( 661)		{
HXLINE( 661)			Float val8 = ((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241));
HXDLIN( 661)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val8);
            		}
HXLINE( 662)		{
HXLINE( 662)			Float val9 = ((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242));
HXDLIN( 662)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val9);
            		}
HXLINE( 663)		{
HXLINE( 663)			Float val10 = ((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243));
HXDLIN( 663)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),val10);
            		}
HXLINE( 664)		{
HXLINE( 664)			Float val11 = ((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244));
HXDLIN( 664)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val11);
            		}
HXLINE( 666)		{
HXLINE( 666)			Float val12 = ((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241));
HXDLIN( 666)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val12);
            		}
HXLINE( 667)		{
HXLINE( 667)			Float val13 = ((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242));
HXDLIN( 667)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val13);
            		}
HXLINE( 668)		{
HXLINE( 668)			Float val14 = ((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243));
HXDLIN( 668)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val14);
            		}
HXLINE( 669)		{
HXLINE( 669)			Float val15 = ((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244));
HXDLIN( 669)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),val15);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,prepend,(void))

void Matrix4_Impl__obj::prependRotation( ::lime::utils::ArrayBufferView this1,Float degrees, ::lime::math::Vector4 axis, ::lime::math::Vector4 pivotPoint){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_674_prependRotation)
HXLINE( 676)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_hx___getAxisRotation(this1,axis->x,axis->y,axis->z,degrees);
HXLINE( 678)		if (hx::IsNotNull( pivotPoint )) {
HXLINE( 680)			 ::lime::math::Vector4 p = pivotPoint;
HXLINE( 681)			::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(m,p->x,p->y,p->z);
            		}
HXLINE( 685)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependRotation,(void))

void Matrix4_Impl__obj::prependScale( ::lime::utils::ArrayBufferView this1,Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_692_prependScale)
HXDLIN( 692)		::cpp::VirtualArray array = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 692)		 ::lime::utils::ArrayBufferView this2;
HXDLIN( 692)		if (hx::IsNotNull( array )) {
HXDLIN( 692)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 692)			_this->byteOffset = (int)0;
HXDLIN( 692)			_this->length = array->get_length();
HXDLIN( 692)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 692)			 ::haxe::io::Bytes this3 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 692)			_this->buffer = this3;
HXDLIN( 692)			_this->copyFromArray(array,null());
HXDLIN( 692)			this2 = _this;
            		}
            		else {
HXDLIN( 692)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 692)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependScale,(void))

void Matrix4_Impl__obj::prependTranslation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_697_prependTranslation)
HXLINE( 699)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 700)		::lime::math::_Matrix4::Matrix4_Impl__obj::set_position(m, ::lime::math::Vector4_obj::__alloc( HX_CTX ,x,y,z,null()));
HXLINE( 701)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependTranslation,(void))

 ::lime::math::Vector4 Matrix4_Impl__obj::transformVector( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 v){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_790_transformVector)
HXLINE( 792)		Float x = v->x;
HXDLIN( 792)		Float y = v->y;
HXDLIN( 792)		Float z = v->z;
HXLINE( 795)		Float _hx_tmp = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 795)		Float _hx_tmp1 = (_hx_tmp + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 795)		Float _hx_tmp2 = (_hx_tmp1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 795)		Float _hx_tmp3 = (_hx_tmp2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)));
HXLINE( 796)		Float _hx_tmp4 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 796)		Float _hx_tmp5 = (_hx_tmp4 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 796)		Float _hx_tmp6 = (_hx_tmp5 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 796)		Float _hx_tmp7 = (_hx_tmp6 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXLINE( 797)		Float _hx_tmp8 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 797)		Float _hx_tmp9 = (_hx_tmp8 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 797)		Float _hx_tmp10 = (_hx_tmp9 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXDLIN( 797)		Float _hx_tmp11 = (_hx_tmp10 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)));
HXLINE( 798)		Float _hx_tmp12 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12)));
HXDLIN( 798)		Float _hx_tmp13 = (_hx_tmp12 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))));
HXDLIN( 798)		Float _hx_tmp14 = (_hx_tmp13 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44))));
HXLINE( 794)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp7,_hx_tmp11,(_hx_tmp14 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,transformVector,return )

void Matrix4_Impl__obj::transformVectors( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView ain, ::lime::utils::ArrayBufferView aout){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_803_transformVectors)
HXLINE( 805)		int i = (int)0;
HXLINE( 806)		Float x;
HXDLIN( 806)		Float y;
HXDLIN( 806)		Float z;
HXLINE( 808)		while(((i + (int)3) <= ain->length)){
HXLINE( 810)			int ain1 = ain->byteOffset;
HXDLIN( 810)			x = ::__hxcpp_memory_get_float(ain->buffer->b,(ain1 + (i * (int)4)));
HXLINE( 811)			int ain2 = ain->byteOffset;
HXDLIN( 811)			y = ::__hxcpp_memory_get_float(ain->buffer->b,(ain2 + ((i + (int)1) * (int)4)));
HXLINE( 812)			int ain3 = ain->byteOffset;
HXDLIN( 812)			z = ::__hxcpp_memory_get_float(ain->buffer->b,(ain3 + ((i + (int)2) * (int)4)));
HXLINE( 814)			{
HXLINE( 814)				Float val = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 814)				Float val1 = (val + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 814)				Float val2 = (val1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 814)				Float val3 = (val2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)));
HXDLIN( 814)				{
HXLINE( 814)					int aout1 = aout->byteOffset;
HXDLIN( 814)					::__hxcpp_memory_set_float(aout->buffer->b,(aout1 + (i * (int)4)),val3);
            				}
            			}
HXLINE( 815)			{
HXLINE( 815)				Float val4 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 815)				Float val5 = (val4 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 815)				Float val6 = (val5 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 815)				Float val7 = (val6 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 815)				{
HXLINE( 815)					int aout2 = aout->byteOffset;
HXDLIN( 815)					::__hxcpp_memory_set_float(aout->buffer->b,(aout2 + ((i + (int)1) * (int)4)),val7);
            				}
            			}
HXLINE( 816)			{
HXLINE( 816)				Float val8 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 816)				Float val9 = (val8 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 816)				Float val10 = (val9 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXDLIN( 816)				Float val11 = (val10 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)));
HXDLIN( 816)				{
HXLINE( 816)					int aout3 = aout->byteOffset;
HXDLIN( 816)					::__hxcpp_memory_set_float(aout->buffer->b,(aout3 + ((i + (int)2) * (int)4)),val11);
            				}
            			}
HXLINE( 818)			i = (i + (int)3);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,transformVectors,(void))

void Matrix4_Impl__obj::transpose( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_825_transpose)
HXLINE( 827)		{
HXLINE( 827)			Float temp = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN( 827)			{
HXLINE( 827)				Float val = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 827)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val);
            			}
HXDLIN( 827)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),temp);
            		}
HXLINE( 828)		{
HXLINE( 828)			Float temp1 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 828)			{
HXLINE( 828)				Float val1 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 828)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val1);
            			}
HXDLIN( 828)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),temp1);
            		}
HXLINE( 829)		{
HXLINE( 829)			Float temp2 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN( 829)			{
HXLINE( 829)				Float val2 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 829)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val2);
            			}
HXDLIN( 829)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),temp2);
            		}
HXLINE( 830)		{
HXLINE( 830)			Float temp3 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 830)			{
HXLINE( 830)				Float val3 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN( 830)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val3);
            			}
HXDLIN( 830)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),temp3);
            		}
HXLINE( 831)		{
HXLINE( 831)			Float temp4 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN( 831)			{
HXLINE( 831)				Float val4 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN( 831)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val4);
            			}
HXDLIN( 831)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),temp4);
            		}
HXLINE( 832)		{
HXLINE( 832)			Float temp5 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN( 832)			{
HXLINE( 832)				Float val5 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN( 832)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val5);
            			}
HXDLIN( 832)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),temp5);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,transpose,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::_hx___getAxisRotation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z,Float degrees){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_837___getAxisRotation)
HXLINE( 839)		 ::lime::utils::ArrayBufferView m = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 841)		 ::lime::math::Vector4 a1 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,x,y,z,null());
HXLINE( 842)		Float rad = (-(degrees) * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 843)		Float c = ::Math_obj::cos(rad);
HXLINE( 844)		Float s = ::Math_obj::sin(rad);
HXLINE( 845)		Float t = (((Float)1.0) - c);
HXLINE( 847)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)0,(c + ((a1->x * a1->x) * t)));
HXLINE( 848)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)5,(c + ((a1->y * a1->y) * t)));
HXLINE( 849)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)10,(c + ((a1->z * a1->z) * t)));
HXLINE( 851)		Float tmp1 = ((a1->x * a1->y) * t);
HXLINE( 852)		Float tmp2 = (a1->z * s);
HXLINE( 853)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)4,(tmp1 + tmp2));
HXLINE( 854)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)1,(tmp1 - tmp2));
HXLINE( 855)		tmp1 = ((a1->x * a1->z) * t);
HXLINE( 856)		tmp2 = (a1->y * s);
HXLINE( 857)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)8,(tmp1 - tmp2));
HXLINE( 858)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)2,(tmp1 + tmp2));
HXLINE( 859)		tmp1 = ((a1->y * a1->z) * t);
HXLINE( 860)		tmp2 = (a1->x * s);
HXLINE( 861)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)9,(tmp1 + tmp2));
HXLINE( 862)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)6,(tmp1 - tmp2));
HXLINE( 864)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Matrix4_Impl__obj,_hx___getAxisRotation,return )

void Matrix4_Impl__obj::_hx___swap( ::lime::utils::ArrayBufferView this1,int a,int b){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_869___swap)
HXLINE( 871)		int this2 = this1->byteOffset;
HXDLIN( 871)		Float temp = ::__hxcpp_memory_get_float(this1->buffer->b,(this2 + (a * (int)4)));
HXLINE( 872)		{
HXLINE( 872)			int this3 = this1->byteOffset;
HXDLIN( 872)			Float val = ::__hxcpp_memory_get_float(this1->buffer->b,(this3 + (b * (int)4)));
HXDLIN( 872)			{
HXLINE( 872)				int this4 = this1->byteOffset;
HXDLIN( 872)				::__hxcpp_memory_set_float(this1->buffer->b,(this4 + (a * (int)4)),val);
            			}
            		}
HXLINE( 873)		{
HXLINE( 873)			int this5 = this1->byteOffset;
HXDLIN( 873)			::__hxcpp_memory_set_float(this1->buffer->b,(this5 + (b * (int)4)),temp);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,_hx___swap,(void))

Float Matrix4_Impl__obj::get_determinant( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_887_get_determinant)
HXDLIN( 887)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 887)		Float _hx_tmp1 = (_hx_tmp * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20)));
HXDLIN( 887)		Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 887)		Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN( 887)		Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN( 887)		Float _hx_tmp5 = (_hx_tmp4 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN( 887)		Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN( 887)		Float _hx_tmp7 = (_hx_tmp3 * (_hx_tmp5 - (_hx_tmp6 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)))));
HXLINE( 888)		Float _hx_tmp8 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 888)		Float _hx_tmp9 = (_hx_tmp8 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36)));
HXDLIN( 888)		Float _hx_tmp10 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 888)		Float _hx_tmp11 = (_hx_tmp9 - (_hx_tmp10 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN( 888)		Float _hx_tmp12 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 888)		Float _hx_tmp13 = (_hx_tmp12 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN( 888)		Float _hx_tmp14 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 887)		Float _hx_tmp15 = (_hx_tmp7 - (_hx_tmp11 * (_hx_tmp13 - (_hx_tmp14 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))))));
HXLINE( 889)		Float _hx_tmp16 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 889)		Float _hx_tmp17 = (_hx_tmp16 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 889)		Float _hx_tmp18 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 889)		Float _hx_tmp19 = (_hx_tmp17 - (_hx_tmp18 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN( 889)		Float _hx_tmp20 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 889)		Float _hx_tmp21 = (_hx_tmp20 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)));
HXDLIN( 889)		Float _hx_tmp22 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 887)		Float _hx_tmp23 = (_hx_tmp15 + (_hx_tmp19 * (_hx_tmp21 - (_hx_tmp22 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))))));
HXLINE( 890)		Float _hx_tmp24 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 890)		Float _hx_tmp25 = (_hx_tmp24 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36)));
HXDLIN( 890)		Float _hx_tmp26 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 890)		Float _hx_tmp27 = (_hx_tmp25 - (_hx_tmp26 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 890)		Float _hx_tmp28 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 890)		Float _hx_tmp29 = (_hx_tmp28 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN( 890)		Float _hx_tmp30 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 887)		Float _hx_tmp31 = (_hx_tmp23 + (_hx_tmp27 * (_hx_tmp29 - (_hx_tmp30 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
HXLINE( 891)		Float _hx_tmp32 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 891)		Float _hx_tmp33 = (_hx_tmp32 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 891)		Float _hx_tmp34 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 891)		Float _hx_tmp35 = (_hx_tmp33 - (_hx_tmp34 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 891)		Float _hx_tmp36 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 891)		Float _hx_tmp37 = (_hx_tmp36 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)));
HXDLIN( 891)		Float _hx_tmp38 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 887)		Float _hx_tmp39 = (_hx_tmp31 - (_hx_tmp35 * (_hx_tmp37 - (_hx_tmp38 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
HXLINE( 892)		Float _hx_tmp40 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 892)		Float _hx_tmp41 = (_hx_tmp40 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 892)		Float _hx_tmp42 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 892)		Float _hx_tmp43 = (_hx_tmp41 - (_hx_tmp42 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 892)		Float _hx_tmp44 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 892)		Float _hx_tmp45 = (_hx_tmp44 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28)));
HXDLIN( 892)		Float _hx_tmp46 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE( 887)		return (_hx_tmp39 + (_hx_tmp43 * (_hx_tmp45 - (_hx_tmp46 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,get_determinant,return )

 ::lime::math::Vector4 Matrix4_Impl__obj::get_position( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_899_get_position)
HXDLIN( 899)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 899)		Float _hx_tmp1 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN( 899)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,get_position,return )

 ::lime::math::Vector4 Matrix4_Impl__obj::set_position( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 val){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_904_set_position)
HXLINE( 906)		{
HXLINE( 906)			Float val1 = val->x;
HXDLIN( 906)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val1);
            		}
HXLINE( 907)		{
HXLINE( 907)			Float val2 = val->y;
HXDLIN( 907)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val2);
            		}
HXLINE( 908)		{
HXLINE( 908)			Float val3 = val->z;
HXDLIN( 908)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val3);
            		}
HXLINE( 909)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,set_position,return )

Float Matrix4_Impl__obj::get( ::lime::utils::ArrayBufferView this1,int index){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_916_get)
HXDLIN( 916)		int this2 = this1->byteOffset;
HXDLIN( 916)		return ::__hxcpp_memory_get_float(this1->buffer->b,(this2 + (index * (int)4)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,get,return )

Float Matrix4_Impl__obj::set( ::lime::utils::ArrayBufferView this1,int index,Float value){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_921_set)
HXLINE( 923)		{
HXLINE( 923)			int this2 = this1->byteOffset;
HXDLIN( 923)			::__hxcpp_memory_set_float(this1->buffer->b,(this2 + (index * (int)4)),value);
            		}
HXLINE( 924)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,set,return )


Matrix4_Impl__obj::Matrix4_Impl__obj()
{
}

bool Matrix4_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { outValue = append_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__swap") ) { outValue = _hx___swap_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointAt") ) { outValue = pointAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prepend") ) { outValue = prepend_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { outValue = copyFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"identity") ) { outValue = identity_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { outValue = copyRowTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transpose") ) { outValue = transpose_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copythisTo") ) { outValue = copythisTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createABCD") ) { outValue = createABCD_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"appendScale") ) { outValue = appendScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { outValue = copyRowFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { outValue = copyColumnTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copythisFrom") ) { outValue = copythisFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prependScale") ) { outValue = prependScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_position") ) { outValue = get_position_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_position") ) { outValue = set_position_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyToMatrix4") ) { outValue = copyToMatrix4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { outValue = interpolateTo_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { outValue = appendRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { outValue = copyColumnFrom_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"prependRotation") ) { outValue = prependRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transformVector") ) { outValue = transformVector_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { outValue = get_determinant_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { outValue = transformVectors_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { outValue = appendTranslation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__getAxisRotation") ) { outValue = _hx___getAxisRotation_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { outValue = prependTranslation_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { outValue = deltaTransformVector_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Matrix4_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Matrix4_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(void *) &Matrix4_Impl__obj::_hx___identity,HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Matrix4_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix4_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix4_Impl__obj::_hx___identity,"__identity");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix4_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix4_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix4_Impl__obj::_hx___identity,"__identity");
};

#endif

hx::Class Matrix4_Impl__obj::__mClass;

static ::String Matrix4_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("appendRotation","\x38","\x45","\xe8","\xcb"),
	HX_HCSTRING("appendScale","\x50","\x66","\x45","\xb5"),
	HX_HCSTRING("appendTranslation","\x37","\xe1","\x3d","\xd6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copythisFrom","\x9d","\x57","\xe4","\x52"),
	HX_HCSTRING("copythisTo","\xee","\x14","\x01","\x0a"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("create2D","\xce","\x49","\xf4","\x2b"),
	HX_HCSTRING("createABCD","\xbe","\xc2","\xdd","\x52"),
	HX_HCSTRING("createOrtho","\x9c","\x4e","\xa8","\x5e"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("copyToMatrix4","\x23","\x00","\xc1","\x24"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("interpolateTo","\x9c","\x90","\x22","\x71"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("pointAt","\x63","\xa1","\x21","\x51"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformVectors","\x44","\xba","\x12","\x8a"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("__getAxisRotation","\x95","\xa5","\x44","\x7b"),
	HX_HCSTRING("__swap","\xb3","\x8d","\x56","\xfb"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null())
};

void Matrix4_Impl__obj::__register()
{
	hx::Object *dummy = new Matrix4_Impl__obj;
	Matrix4_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math._Matrix4.Matrix4_Impl_","\xe6","\xfe","\xf9","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix4_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix4_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix4_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Matrix4_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix4_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix4_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix4_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix4_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_11_boot)
HXDLIN(  11)		_hx___identity = ::Array_obj< Float >::fromData( _hx_array_data_cbf9fee6_43,16);
            	}
}

} // end namespace lime
} // end namespace math
} // end namespace _Matrix4
