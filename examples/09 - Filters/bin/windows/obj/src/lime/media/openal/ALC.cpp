// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_media_openal_ALC
#include <lime/media/openal/ALC.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_44_closeDevice,"lime.media.openal.ALC","closeDevice",0x299f7402,"lime.media.openal.ALC.closeDevice","lime/media/openal/ALC.hx",44,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_52_createContext,"lime.media.openal.ALC","createContext",0xb9806ce7,"lime.media.openal.ALC.createContext","lime/media/openal/ALC.hx",52,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_72_destroyContext,"lime.media.openal.ALC","destroyContext",0x9b5c4701,"lime.media.openal.ALC.destroyContext","lime/media/openal/ALC.hx",72,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_78_getContextsDevice,"lime.media.openal.ALC","getContextsDevice",0x197cc724,"lime.media.openal.ALC.getContextsDevice","lime/media/openal/ALC.hx",78,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_95_getCurrentContext,"lime.media.openal.ALC","getCurrentContext",0x166a9280,"lime.media.openal.ALC.getCurrentContext","lime/media/openal/ALC.hx",95,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_115_getError,"lime.media.openal.ALC","getError",0xb0a3653e,"lime.media.openal.ALC.getError","lime/media/openal/ALC.hx",115,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_125_getErrorString,"lime.media.openal.ALC","getErrorString",0x9cb484af,"lime.media.openal.ALC.getErrorString","lime/media/openal/ALC.hx",125,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_142_getIntegerv,"lime.media.openal.ALC","getIntegerv",0x44f57d42,"lime.media.openal.ALC.getIntegerv","lime/media/openal/ALC.hx",142,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_153_getString,"lime.media.openal.ALC","getString",0x9e1cd69b,"lime.media.openal.ALC.getString","lime/media/openal/ALC.hx",153,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_164_makeContextCurrent,"lime.media.openal.ALC","makeContextCurrent",0x65611584,"lime.media.openal.ALC.makeContextCurrent","lime/media/openal/ALC.hx",164,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_172_openDevice,"lime.media.openal.ALC","openDevice",0x31de24ec,"lime.media.openal.ALC.openDevice","lime/media/openal/ALC.hx",172,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_192_pauseDevice,"lime.media.openal.ALC","pauseDevice",0x636035c0,"lime.media.openal.ALC.pauseDevice","lime/media/openal/ALC.hx",192,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_201_processContext,"lime.media.openal.ALC","processContext",0xe14e9a2c,"lime.media.openal.ALC.processContext","lime/media/openal/ALC.hx",201,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_210_resumeDevice,"lime.media.openal.ALC","resumeDevice",0x6ff2aa0f,"lime.media.openal.ALC.resumeDevice","lime/media/openal/ALC.hx",210,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_219_suspendContext,"lime.media.openal.ALC","suspendContext",0x143578bf,"lime.media.openal.ALC.suspendContext","lime/media/openal/ALC.hx",219,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_18_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",18,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_19_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",19,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_20_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",20,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_21_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",21,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_22_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",22,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_23_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",23,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_24_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",24,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_25_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",25,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_26_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",26,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_27_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",27,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_28_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",28,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_29_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",29,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_30_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",30,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_31_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",31,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_32_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",32,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_33_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",33,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_34_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",34,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_35_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",35,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_36_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",36,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_37_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",37,0x4354dabb)
HX_LOCAL_STACK_FRAME(_hx_pos_3ab4d7f5cd522c83_38_boot,"lime.media.openal.ALC","boot",0x83dfa81e,"lime.media.openal.ALC.boot","lime/media/openal/ALC.hx",38,0x4354dabb)
namespace lime{
namespace media{
namespace openal{

void ALC_obj::__construct() { }

Dynamic ALC_obj::__CreateEmpty() { return new ALC_obj; }

void *ALC_obj::_hx_vtable = 0;

Dynamic ALC_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ALC_obj > _hx_result = new ALC_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ALC_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6d89df14;
}

int ALC_obj::FALSE;

int ALC_obj::TRUE;

int ALC_obj::FREQUENCY;

int ALC_obj::REFRESH;

int ALC_obj::SYNC;

int ALC_obj::MONO_SOURCES;

int ALC_obj::STEREO_SOURCES;

int ALC_obj::NO_ERROR;

int ALC_obj::INVALID_DEVICE;

int ALC_obj::INVALID_CONTEXT;

int ALC_obj::INVALID_ENUM;

int ALC_obj::INVALID_VALUE;

int ALC_obj::OUT_OF_MEMORY;

int ALC_obj::ATTRIBUTES_SIZE;

int ALC_obj::ALL_ATTRIBUTES;

int ALC_obj::DEFAULT_DEVICE_SPECIFIER;

int ALC_obj::DEVICE_SPECIFIER;

int ALC_obj::EXTENSIONS;

int ALC_obj::ENUMERATE_ALL_EXT;

int ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER;

int ALC_obj::ALL_DEVICES_SPECIFIER;

bool ALC_obj::closeDevice( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_44_closeDevice)
HXDLIN(  44)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_close_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,closeDevice,return )

 ::Dynamic ALC_obj::createContext( ::Dynamic device,::Array< int > attrlist){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_52_createContext)
HXLINE(  55)		 ::Dynamic handle = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_create_context(hx::DynamicPtr(device),hx::DynamicPtr(attrlist))) );
HXLINE(  57)		if (hx::IsNotNull( handle )) {
HXLINE(  59)			 ::Dynamic this1 = handle;
HXDLIN(  59)			return this1;
            		}
HXLINE(  64)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,createContext,return )

void ALC_obj::destroyContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_72_destroyContext)
HXDLIN(  72)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_destroy_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,destroyContext,(void))

 ::Dynamic ALC_obj::getContextsDevice( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_78_getContextsDevice)
HXLINE(  81)		 ::Dynamic handle = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_get_contexts_device(hx::DynamicPtr(context))) );
HXLINE(  83)		if (hx::IsNotNull( handle )) {
HXLINE(  85)			 ::Dynamic this1 = handle;
HXDLIN(  85)			return this1;
            		}
HXLINE(  90)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getContextsDevice,return )

 ::Dynamic ALC_obj::getCurrentContext(){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_95_getCurrentContext)
HXLINE(  98)		 ::Dynamic handle = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_get_current_context()) );
HXLINE( 100)		if (hx::IsNotNull( handle )) {
HXLINE( 102)			 ::Dynamic this1 = handle;
HXDLIN( 102)			return this1;
            		}
HXLINE( 107)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ALC_obj,getCurrentContext,return )

int ALC_obj::getError( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_115_getError)
HXDLIN( 115)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_get_error(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getError,return )

::String ALC_obj::getErrorString( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_125_getErrorString)
HXDLIN( 125)		int _g = ::lime::media::openal::ALC_obj::getError(device);
HXDLIN( 125)		switch((int)(_g)){
            			case (int)40961: {
HXLINE( 127)				return HX_("INVALID_DEVICE: Invalid device (or no device?)",8d,16,8a,9d);
            			}
            			break;
            			case (int)40962: {
HXLINE( 128)				return HX_("INVALID_CONTEXT: Invalid context (or no context?)",56,39,91,8b);
            			}
            			break;
            			case (int)40963: {
HXLINE( 129)				return HX_("INVALID_ENUM: Invalid enum value",0a,d7,df,59);
            			}
            			break;
            			case (int)40964: {
HXLINE( 130)				return HX_("INVALID_VALUE: Invalid param value",a6,0e,30,55);
            			}
            			break;
            			case (int)40965: {
HXLINE( 131)				return HX_("OUT_OF_MEMORY: OpenAL has run out of memory",b0,dd,fb,0a);
            			}
            			break;
            			default:{
HXLINE( 132)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE( 125)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getErrorString,return )

::Array< int > ALC_obj::getIntegerv( ::Dynamic device,int param,int size){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_142_getIntegerv)
HXDLIN( 142)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_get_integerv(hx::DynamicPtr(device),param,size)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ALC_obj,getIntegerv,return )

::String ALC_obj::getString( ::Dynamic device,int param){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_153_getString)
HXDLIN( 153)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_get_string(hx::DynamicPtr(device),param)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,getString,return )

bool ALC_obj::makeContextCurrent( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_164_makeContextCurrent)
HXDLIN( 164)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_make_context_current(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,makeContextCurrent,return )

 ::Dynamic ALC_obj::openDevice(::String deviceName){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_172_openDevice)
HXLINE( 175)		 ::Dynamic handle = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_open_device(deviceName)) );
HXLINE( 177)		if (hx::IsNotNull( handle )) {
HXLINE( 179)			 ::Dynamic this1 = handle;
HXDLIN( 179)			return this1;
            		}
HXLINE( 184)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,openDevice,return )

void ALC_obj::pauseDevice( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_192_pauseDevice)
HXDLIN( 192)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_pause_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,pauseDevice,(void))

void ALC_obj::processContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_201_processContext)
HXDLIN( 201)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_process_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,processContext,(void))

void ALC_obj::resumeDevice( ::Dynamic device){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_210_resumeDevice)
HXDLIN( 210)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_resume_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,resumeDevice,(void))

void ALC_obj::suspendContext( ::Dynamic context){
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_219_suspendContext)
HXDLIN( 219)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_alc_suspend_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,suspendContext,(void))


ALC_obj::ALC_obj()
{
}

bool ALC_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"getError") ) { outValue = getError_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getString") ) { outValue = getString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"openDevice") ) { outValue = openDevice_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"closeDevice") ) { outValue = closeDevice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getIntegerv") ) { outValue = getIntegerv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseDevice") ) { outValue = pauseDevice_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resumeDevice") ) { outValue = resumeDevice_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createContext") ) { outValue = createContext_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"destroyContext") ) { outValue = destroyContext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getErrorString") ) { outValue = getErrorString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"processContext") ) { outValue = processContext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"suspendContext") ) { outValue = suspendContext_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getContextsDevice") ) { outValue = getContextsDevice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getCurrentContext") ) { outValue = getCurrentContext_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"makeContextCurrent") ) { outValue = makeContextCurrent_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ALC_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ALC_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ALC_obj::FALSE,HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79")},
	{hx::fsInt,(void *) &ALC_obj::TRUE,HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37")},
	{hx::fsInt,(void *) &ALC_obj::FREQUENCY,HX_HCSTRING("FREQUENCY","\x7c","\xf2","\x42","\xb7")},
	{hx::fsInt,(void *) &ALC_obj::REFRESH,HX_HCSTRING("REFRESH","\xbb","\xad","\xf4","\x6c")},
	{hx::fsInt,(void *) &ALC_obj::SYNC,HX_HCSTRING("SYNC","\x5b","\x82","\x20","\x37")},
	{hx::fsInt,(void *) &ALC_obj::MONO_SOURCES,HX_HCSTRING("MONO_SOURCES","\xbc","\x3b","\x3c","\xad")},
	{hx::fsInt,(void *) &ALC_obj::STEREO_SOURCES,HX_HCSTRING("STEREO_SOURCES","\xd1","\x0f","\x99","\x60")},
	{hx::fsInt,(void *) &ALC_obj::NO_ERROR,HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_DEVICE,HX_HCSTRING("INVALID_DEVICE","\x3e","\x84","\xa5","\x93")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_CONTEXT,HX_HCSTRING("INVALID_CONTEXT","\x27","\xa1","\x3c","\xdf")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_ENUM,HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_VALUE,HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0")},
	{hx::fsInt,(void *) &ALC_obj::OUT_OF_MEMORY,HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1")},
	{hx::fsInt,(void *) &ALC_obj::ATTRIBUTES_SIZE,HX_HCSTRING("ATTRIBUTES_SIZE","\x69","\x7c","\x9f","\x17")},
	{hx::fsInt,(void *) &ALC_obj::ALL_ATTRIBUTES,HX_HCSTRING("ALL_ATTRIBUTES","\x95","\xe2","\x00","\x04")},
	{hx::fsInt,(void *) &ALC_obj::DEFAULT_DEVICE_SPECIFIER,HX_HCSTRING("DEFAULT_DEVICE_SPECIFIER","\x93","\xa5","\xbc","\xd9")},
	{hx::fsInt,(void *) &ALC_obj::DEVICE_SPECIFIER,HX_HCSTRING("DEVICE_SPECIFIER","\xf5","\xa8","\x61","\x21")},
	{hx::fsInt,(void *) &ALC_obj::EXTENSIONS,HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b")},
	{hx::fsInt,(void *) &ALC_obj::ENUMERATE_ALL_EXT,HX_HCSTRING("ENUMERATE_ALL_EXT","\x88","\xff","\x7d","\xb7")},
	{hx::fsInt,(void *) &ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,HX_HCSTRING("DEFAULT_ALL_DEVICES_SPECIFIER","\xc0","\xd6","\x77","\xd2")},
	{hx::fsInt,(void *) &ALC_obj::ALL_DEVICES_SPECIFIER,HX_HCSTRING("ALL_DEVICES_SPECIFIER","\x1e","\x50","\xc1","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ALC_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ALC_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ALC_obj::FALSE,"FALSE");
	HX_MARK_MEMBER_NAME(ALC_obj::TRUE,"TRUE");
	HX_MARK_MEMBER_NAME(ALC_obj::FREQUENCY,"FREQUENCY");
	HX_MARK_MEMBER_NAME(ALC_obj::REFRESH,"REFRESH");
	HX_MARK_MEMBER_NAME(ALC_obj::SYNC,"SYNC");
	HX_MARK_MEMBER_NAME(ALC_obj::MONO_SOURCES,"MONO_SOURCES");
	HX_MARK_MEMBER_NAME(ALC_obj::STEREO_SOURCES,"STEREO_SOURCES");
	HX_MARK_MEMBER_NAME(ALC_obj::NO_ERROR,"NO_ERROR");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_MARK_MEMBER_NAME(ALC_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_MARK_MEMBER_NAME(ALC_obj::ATTRIBUTES_SIZE,"ATTRIBUTES_SIZE");
	HX_MARK_MEMBER_NAME(ALC_obj::ALL_ATTRIBUTES,"ALL_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(ALC_obj::DEFAULT_DEVICE_SPECIFIER,"DEFAULT_DEVICE_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::DEVICE_SPECIFIER,"DEVICE_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::EXTENSIONS,"EXTENSIONS");
	HX_MARK_MEMBER_NAME(ALC_obj::ENUMERATE_ALL_EXT,"ENUMERATE_ALL_EXT");
	HX_MARK_MEMBER_NAME(ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,"DEFAULT_ALL_DEVICES_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::ALL_DEVICES_SPECIFIER,"ALL_DEVICES_SPECIFIER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ALC_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ALC_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ALC_obj::FALSE,"FALSE");
	HX_VISIT_MEMBER_NAME(ALC_obj::TRUE,"TRUE");
	HX_VISIT_MEMBER_NAME(ALC_obj::FREQUENCY,"FREQUENCY");
	HX_VISIT_MEMBER_NAME(ALC_obj::REFRESH,"REFRESH");
	HX_VISIT_MEMBER_NAME(ALC_obj::SYNC,"SYNC");
	HX_VISIT_MEMBER_NAME(ALC_obj::MONO_SOURCES,"MONO_SOURCES");
	HX_VISIT_MEMBER_NAME(ALC_obj::STEREO_SOURCES,"STEREO_SOURCES");
	HX_VISIT_MEMBER_NAME(ALC_obj::NO_ERROR,"NO_ERROR");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_VISIT_MEMBER_NAME(ALC_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_VISIT_MEMBER_NAME(ALC_obj::ATTRIBUTES_SIZE,"ATTRIBUTES_SIZE");
	HX_VISIT_MEMBER_NAME(ALC_obj::ALL_ATTRIBUTES,"ALL_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEFAULT_DEVICE_SPECIFIER,"DEFAULT_DEVICE_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEVICE_SPECIFIER,"DEVICE_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::EXTENSIONS,"EXTENSIONS");
	HX_VISIT_MEMBER_NAME(ALC_obj::ENUMERATE_ALL_EXT,"ENUMERATE_ALL_EXT");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,"DEFAULT_ALL_DEVICES_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::ALL_DEVICES_SPECIFIER,"ALL_DEVICES_SPECIFIER");
};

#endif

hx::Class ALC_obj::__mClass;

static ::String ALC_obj_sStaticFields[] = {
	HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79"),
	HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37"),
	HX_HCSTRING("FREQUENCY","\x7c","\xf2","\x42","\xb7"),
	HX_HCSTRING("REFRESH","\xbb","\xad","\xf4","\x6c"),
	HX_HCSTRING("SYNC","\x5b","\x82","\x20","\x37"),
	HX_HCSTRING("MONO_SOURCES","\xbc","\x3b","\x3c","\xad"),
	HX_HCSTRING("STEREO_SOURCES","\xd1","\x0f","\x99","\x60"),
	HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f"),
	HX_HCSTRING("INVALID_DEVICE","\x3e","\x84","\xa5","\x93"),
	HX_HCSTRING("INVALID_CONTEXT","\x27","\xa1","\x3c","\xdf"),
	HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13"),
	HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0"),
	HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1"),
	HX_HCSTRING("ATTRIBUTES_SIZE","\x69","\x7c","\x9f","\x17"),
	HX_HCSTRING("ALL_ATTRIBUTES","\x95","\xe2","\x00","\x04"),
	HX_HCSTRING("DEFAULT_DEVICE_SPECIFIER","\x93","\xa5","\xbc","\xd9"),
	HX_HCSTRING("DEVICE_SPECIFIER","\xf5","\xa8","\x61","\x21"),
	HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b"),
	HX_HCSTRING("ENUMERATE_ALL_EXT","\x88","\xff","\x7d","\xb7"),
	HX_HCSTRING("DEFAULT_ALL_DEVICES_SPECIFIER","\xc0","\xd6","\x77","\xd2"),
	HX_HCSTRING("ALL_DEVICES_SPECIFIER","\x1e","\x50","\xc1","\xf5"),
	HX_HCSTRING("closeDevice","\x6e","\x02","\xc8","\x2b"),
	HX_HCSTRING("createContext","\x53","\x6e","\xba","\x01"),
	HX_HCSTRING("destroyContext","\x15","\x84","\xe3","\x85"),
	HX_HCSTRING("getContextsDevice","\x90","\xee","\x91","\x9c"),
	HX_HCSTRING("getCurrentContext","\xec","\xb9","\x7f","\x99"),
	HX_HCSTRING("getError","\x52","\xdb","\x00","\xd3"),
	HX_HCSTRING("getErrorString","\xc3","\xc1","\x3b","\x87"),
	HX_HCSTRING("getIntegerv","\xae","\x0b","\x1e","\x47"),
	HX_HCSTRING("getString","\x07","\xb2","\x86","\x8d"),
	HX_HCSTRING("makeContextCurrent","\x98","\x6c","\xce","\x94"),
	HX_HCSTRING("openDevice","\x00","\x48","\x14","\xbf"),
	HX_HCSTRING("pauseDevice","\x2c","\xc4","\x88","\x65"),
	HX_HCSTRING("processContext","\x40","\xd7","\xd5","\xcb"),
	HX_HCSTRING("resumeDevice","\x23","\xba","\x46","\x51"),
	HX_HCSTRING("suspendContext","\xd3","\xb5","\xbc","\xfe"),
	::String(null())
};

void ALC_obj::__register()
{
	hx::Object *dummy = new ALC_obj;
	ALC_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.media.openal.ALC","\x02","\xc4","\xda","\x62");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ALC_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ALC_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ALC_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ALC_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ALC_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ALC_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ALC_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ALC_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_18_boot)
HXDLIN(  18)		FALSE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_19_boot)
HXDLIN(  19)		TRUE = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_20_boot)
HXDLIN(  20)		FREQUENCY = (int)4103;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_21_boot)
HXDLIN(  21)		REFRESH = (int)4104;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_22_boot)
HXDLIN(  22)		SYNC = (int)4105;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_23_boot)
HXDLIN(  23)		MONO_SOURCES = (int)4112;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_24_boot)
HXDLIN(  24)		STEREO_SOURCES = (int)4113;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_25_boot)
HXDLIN(  25)		NO_ERROR = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_26_boot)
HXDLIN(  26)		INVALID_DEVICE = (int)40961;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_27_boot)
HXDLIN(  27)		INVALID_CONTEXT = (int)40962;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_28_boot)
HXDLIN(  28)		INVALID_ENUM = (int)40963;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_29_boot)
HXDLIN(  29)		INVALID_VALUE = (int)40964;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_30_boot)
HXDLIN(  30)		OUT_OF_MEMORY = (int)40965;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_31_boot)
HXDLIN(  31)		ATTRIBUTES_SIZE = (int)4098;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_32_boot)
HXDLIN(  32)		ALL_ATTRIBUTES = (int)4099;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_33_boot)
HXDLIN(  33)		DEFAULT_DEVICE_SPECIFIER = (int)4100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_34_boot)
HXDLIN(  34)		DEVICE_SPECIFIER = (int)4101;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_35_boot)
HXDLIN(  35)		EXTENSIONS = (int)4102;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_36_boot)
HXDLIN(  36)		ENUMERATE_ALL_EXT = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_37_boot)
HXDLIN(  37)		DEFAULT_ALL_DEVICES_SPECIFIER = (int)4114;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ab4d7f5cd522c83_38_boot)
HXDLIN(  38)		ALL_DEVICES_SPECIFIER = (int)4115;
            	}
}

} // end namespace lime
} // end namespace media
} // end namespace openal
