// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_35_get_altKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_altKey",0x98ede94d,"lime.ui._KeyModifier.KeyModifier_Impl_.get_altKey","lime/ui/KeyModifier.hx",35,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_40_set_altKey,"lime.ui._KeyModifier.KeyModifier_Impl_","set_altKey",0x9c6b87c1,"lime.ui._KeyModifier.KeyModifier_Impl_.set_altKey","lime/ui/KeyModifier.hx",40,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_59_get_capsLock,"lime.ui._KeyModifier.KeyModifier_Impl_","get_capsLock",0x26398dc3,"lime.ui._KeyModifier.KeyModifier_Impl_.get_capsLock","lime/ui/KeyModifier.hx",59,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_64_set_capsLock,"lime.ui._KeyModifier.KeyModifier_Impl_","set_capsLock",0x3b32b137,"lime.ui._KeyModifier.KeyModifier_Impl_.set_capsLock","lime/ui/KeyModifier.hx",64,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_83_get_ctrlKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_ctrlKey",0xac33207d,"lime.ui._KeyModifier.KeyModifier_Impl_.get_ctrlKey","lime/ui/KeyModifier.hx",83,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_88_set_ctrlKey,"lime.ui._KeyModifier.KeyModifier_Impl_","set_ctrlKey",0xb6a02789,"lime.ui._KeyModifier.KeyModifier_Impl_.set_ctrlKey","lime/ui/KeyModifier.hx",88,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_107_get_metaKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_metaKey",0x6c372aa3,"lime.ui._KeyModifier.KeyModifier_Impl_.get_metaKey","lime/ui/KeyModifier.hx",107,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_112_set_metaKey,"lime.ui._KeyModifier.KeyModifier_Impl_","set_metaKey",0x76a431af,"lime.ui._KeyModifier.KeyModifier_Impl_.set_metaKey","lime/ui/KeyModifier.hx",112,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_131_get_numLock,"lime.ui._KeyModifier.KeyModifier_Impl_","get_numLock",0xe5ee2c1a,"lime.ui._KeyModifier.KeyModifier_Impl_.get_numLock","lime/ui/KeyModifier.hx",131,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_136_set_numLock,"lime.ui._KeyModifier.KeyModifier_Impl_","set_numLock",0xf05b3326,"lime.ui._KeyModifier.KeyModifier_Impl_.set_numLock","lime/ui/KeyModifier.hx",136,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_155_get_shiftKey,"lime.ui._KeyModifier.KeyModifier_Impl_","get_shiftKey",0xae171754,"lime.ui._KeyModifier.KeyModifier_Impl_.get_shiftKey","lime/ui/KeyModifier.hx",155,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_160_set_shiftKey,"lime.ui._KeyModifier.KeyModifier_Impl_","set_shiftKey",0xc3103ac8,"lime.ui._KeyModifier.KeyModifier_Impl_.set_shiftKey","lime/ui/KeyModifier.hx",160,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_7_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",7,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_8_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",8,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_9_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",9,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_10_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",10,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_11_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",11,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_12_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",12,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_13_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",13,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_14_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",14,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_15_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",15,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_16_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",16,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_17_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",17,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_18_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",18,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_20_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",20,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_21_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",21,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_22_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",22,0xae70b869)
HX_LOCAL_STACK_FRAME(_hx_pos_a615467931d54dbe_23_boot,"lime.ui._KeyModifier.KeyModifier_Impl_","boot",0x357a9740,"lime.ui._KeyModifier.KeyModifier_Impl_.boot","lime/ui/KeyModifier.hx",23,0xae70b869)
namespace lime{
namespace ui{
namespace _KeyModifier{

void KeyModifier_Impl__obj::__construct() { }

Dynamic KeyModifier_Impl__obj::__CreateEmpty() { return new KeyModifier_Impl__obj; }

void *KeyModifier_Impl__obj::_hx_vtable = 0;

Dynamic KeyModifier_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KeyModifier_Impl__obj > _hx_result = new KeyModifier_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyModifier_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55d77d36;
}

int KeyModifier_Impl__obj::NONE;

int KeyModifier_Impl__obj::LEFT_SHIFT;

int KeyModifier_Impl__obj::RIGHT_SHIFT;

int KeyModifier_Impl__obj::LEFT_CTRL;

int KeyModifier_Impl__obj::RIGHT_CTRL;

int KeyModifier_Impl__obj::LEFT_ALT;

int KeyModifier_Impl__obj::RIGHT_ALT;

int KeyModifier_Impl__obj::LEFT_META;

int KeyModifier_Impl__obj::RIGHT_META;

int KeyModifier_Impl__obj::NUM_LOCK;

int KeyModifier_Impl__obj::CAPS_LOCK;

int KeyModifier_Impl__obj::MODE;

int KeyModifier_Impl__obj::CTRL;

int KeyModifier_Impl__obj::SHIFT;

int KeyModifier_Impl__obj::ALT;

int KeyModifier_Impl__obj::META;

bool KeyModifier_Impl__obj::get_altKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_35_get_altKey)
HXDLIN(  35)		if ((((int)this1 & (int)(int)256) <= (int)0)) {
HXDLIN(  35)			return (((int)this1 & (int)(int)512) > (int)0);
            		}
            		else {
HXDLIN(  35)			return true;
            		}
HXDLIN(  35)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_altKey,return )

bool KeyModifier_Impl__obj::set_altKey(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_40_set_altKey)
HXLINE(  42)		if (value) {
HXLINE(  44)			this1 = ((int)this1 | (int)(int)768);
            		}
            		else {
HXLINE(  48)			this1 = ((int)this1 & (int)((int)268435455 - (int)768));
            		}
HXLINE(  52)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_altKey,return )

bool KeyModifier_Impl__obj::get_capsLock(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_59_get_capsLock)
HXDLIN(  59)		if ((((int)this1 & (int)(int)8192) <= (int)0)) {
HXDLIN(  59)			return (((int)this1 & (int)(int)8192) > (int)0);
            		}
            		else {
HXDLIN(  59)			return true;
            		}
HXDLIN(  59)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_capsLock,return )

bool KeyModifier_Impl__obj::set_capsLock(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_64_set_capsLock)
HXLINE(  66)		if (value) {
HXLINE(  68)			this1 = ((int)this1 | (int)(int)8192);
            		}
            		else {
HXLINE(  72)			this1 = ((int)this1 & (int)((int)268435455 - (int)8192));
            		}
HXLINE(  76)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_capsLock,return )

bool KeyModifier_Impl__obj::get_ctrlKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_83_get_ctrlKey)
HXDLIN(  83)		if ((((int)this1 & (int)(int)64) <= (int)0)) {
HXDLIN(  83)			return (((int)this1 & (int)(int)128) > (int)0);
            		}
            		else {
HXDLIN(  83)			return true;
            		}
HXDLIN(  83)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_ctrlKey,return )

bool KeyModifier_Impl__obj::set_ctrlKey(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_88_set_ctrlKey)
HXLINE(  90)		if (value) {
HXLINE(  92)			this1 = ((int)this1 | (int)(int)192);
            		}
            		else {
HXLINE(  96)			this1 = ((int)this1 & (int)((int)268435455 - (int)192));
            		}
HXLINE( 100)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_ctrlKey,return )

bool KeyModifier_Impl__obj::get_metaKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_107_get_metaKey)
HXDLIN( 107)		if ((((int)this1 & (int)(int)1024) <= (int)0)) {
HXDLIN( 107)			return (((int)this1 & (int)(int)2048) > (int)0);
            		}
            		else {
HXDLIN( 107)			return true;
            		}
HXDLIN( 107)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_metaKey,return )

bool KeyModifier_Impl__obj::set_metaKey(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_112_set_metaKey)
HXLINE( 114)		if (value) {
HXLINE( 116)			this1 = ((int)this1 | (int)(int)3072);
            		}
            		else {
HXLINE( 120)			this1 = ((int)this1 & (int)((int)268435455 - (int)3072));
            		}
HXLINE( 124)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_metaKey,return )

bool KeyModifier_Impl__obj::get_numLock(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_131_get_numLock)
HXDLIN( 131)		if ((((int)this1 & (int)(int)4096) <= (int)0)) {
HXDLIN( 131)			return (((int)this1 & (int)(int)4096) > (int)0);
            		}
            		else {
HXDLIN( 131)			return true;
            		}
HXDLIN( 131)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_numLock,return )

bool KeyModifier_Impl__obj::set_numLock(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_136_set_numLock)
HXLINE( 138)		if (value) {
HXLINE( 140)			this1 = ((int)this1 | (int)(int)4096);
            		}
            		else {
HXLINE( 144)			this1 = ((int)this1 & (int)((int)268435455 - (int)4096));
            		}
HXLINE( 148)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_numLock,return )

bool KeyModifier_Impl__obj::get_shiftKey(int this1){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_155_get_shiftKey)
HXDLIN( 155)		if ((((int)this1 & (int)(int)1) <= (int)0)) {
HXDLIN( 155)			return (((int)this1 & (int)(int)2) > (int)0);
            		}
            		else {
HXDLIN( 155)			return true;
            		}
HXDLIN( 155)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyModifier_Impl__obj,get_shiftKey,return )

bool KeyModifier_Impl__obj::set_shiftKey(int this1,bool value){
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_160_set_shiftKey)
HXLINE( 162)		if (value) {
HXLINE( 164)			this1 = ((int)this1 | (int)(int)3);
            		}
            		else {
HXLINE( 168)			this1 = ((int)this1 & (int)((int)268435455 - (int)3));
            		}
HXLINE( 172)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(KeyModifier_Impl__obj,set_shiftKey,return )


KeyModifier_Impl__obj::KeyModifier_Impl__obj()
{
}

bool KeyModifier_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"get_altKey") ) { outValue = get_altKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_altKey") ) { outValue = set_altKey_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_ctrlKey") ) { outValue = get_ctrlKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_ctrlKey") ) { outValue = set_ctrlKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_metaKey") ) { outValue = get_metaKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_metaKey") ) { outValue = set_metaKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_numLock") ) { outValue = get_numLock_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_numLock") ) { outValue = set_numLock_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_capsLock") ) { outValue = get_capsLock_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_capsLock") ) { outValue = set_capsLock_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_shiftKey") ) { outValue = get_shiftKey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_shiftKey") ) { outValue = set_shiftKey_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *KeyModifier_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo KeyModifier_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::NONE,HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::LEFT_SHIFT,HX_HCSTRING("LEFT_SHIFT","\xea","\x7a","\xfb","\x2f")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::RIGHT_SHIFT,HX_HCSTRING("RIGHT_SHIFT","\x5f","\x24","\xa2","\x4e")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::LEFT_CTRL,HX_HCSTRING("LEFT_CTRL","\x23","\x23","\xb7","\xde")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::RIGHT_CTRL,HX_HCSTRING("RIGHT_CTRL","\x4e","\x1f","\x4d","\xc3")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::LEFT_ALT,HX_HCSTRING("LEFT_ALT","\x91","\xb9","\xe3","\xc9")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::RIGHT_ALT,HX_HCSTRING("RIGHT_ALT","\xc6","\xab","\x81","\xcf")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::LEFT_META,HX_HCSTRING("LEFT_META","\x3d","\xe5","\x47","\xe5")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::RIGHT_META,HX_HCSTRING("RIGHT_META","\x68","\xe1","\xdd","\xc9")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::NUM_LOCK,HX_HCSTRING("NUM_LOCK","\xe4","\x7b","\x03","\xeb")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::CAPS_LOCK,HX_HCSTRING("CAPS_LOCK","\x09","\x04","\xdb","\xce")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::MODE,HX_HCSTRING("MODE","\x63","\x9b","\x21","\x33")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::CTRL,HX_HCSTRING("CTRL","\xab","\x50","\x89","\x2c")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::SHIFT,HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::ALT,HX_HCSTRING("ALT","\x09","\x95","\x31","\x00")},
	{hx::fsInt,(void *) &KeyModifier_Impl__obj::META,HX_HCSTRING("META","\xc5","\x12","\x1a","\x33")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void KeyModifier_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_SHIFT,"LEFT_SHIFT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_SHIFT,"RIGHT_SHIFT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_CTRL,"LEFT_CTRL");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_CTRL,"RIGHT_CTRL");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_ALT,"LEFT_ALT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_ALT,"RIGHT_ALT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_META,"LEFT_META");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_META,"RIGHT_META");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::NUM_LOCK,"NUM_LOCK");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::CAPS_LOCK,"CAPS_LOCK");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::MODE,"MODE");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::CTRL,"CTRL");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::SHIFT,"SHIFT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::ALT,"ALT");
	HX_MARK_MEMBER_NAME(KeyModifier_Impl__obj::META,"META");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyModifier_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_SHIFT,"LEFT_SHIFT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_SHIFT,"RIGHT_SHIFT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_CTRL,"LEFT_CTRL");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_CTRL,"RIGHT_CTRL");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_ALT,"LEFT_ALT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_ALT,"RIGHT_ALT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::LEFT_META,"LEFT_META");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::RIGHT_META,"RIGHT_META");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::NUM_LOCK,"NUM_LOCK");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::CAPS_LOCK,"CAPS_LOCK");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::MODE,"MODE");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::CTRL,"CTRL");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::SHIFT,"SHIFT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::ALT,"ALT");
	HX_VISIT_MEMBER_NAME(KeyModifier_Impl__obj::META,"META");
};

#endif

hx::Class KeyModifier_Impl__obj::__mClass;

static ::String KeyModifier_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),
	HX_HCSTRING("LEFT_SHIFT","\xea","\x7a","\xfb","\x2f"),
	HX_HCSTRING("RIGHT_SHIFT","\x5f","\x24","\xa2","\x4e"),
	HX_HCSTRING("LEFT_CTRL","\x23","\x23","\xb7","\xde"),
	HX_HCSTRING("RIGHT_CTRL","\x4e","\x1f","\x4d","\xc3"),
	HX_HCSTRING("LEFT_ALT","\x91","\xb9","\xe3","\xc9"),
	HX_HCSTRING("RIGHT_ALT","\xc6","\xab","\x81","\xcf"),
	HX_HCSTRING("LEFT_META","\x3d","\xe5","\x47","\xe5"),
	HX_HCSTRING("RIGHT_META","\x68","\xe1","\xdd","\xc9"),
	HX_HCSTRING("NUM_LOCK","\xe4","\x7b","\x03","\xeb"),
	HX_HCSTRING("CAPS_LOCK","\x09","\x04","\xdb","\xce"),
	HX_HCSTRING("MODE","\x63","\x9b","\x21","\x33"),
	HX_HCSTRING("CTRL","\xab","\x50","\x89","\x2c"),
	HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa"),
	HX_HCSTRING("ALT","\x09","\x95","\x31","\x00"),
	HX_HCSTRING("META","\xc5","\x12","\x1a","\x33"),
	HX_HCSTRING("get_altKey","\xbf","\x17","\x52","\x35"),
	HX_HCSTRING("set_altKey","\x33","\xb6","\xcf","\x38"),
	HX_HCSTRING("get_capsLock","\xb5","\xbc","\xdb","\xc6"),
	HX_HCSTRING("set_capsLock","\x29","\xe0","\xd4","\xdb"),
	HX_HCSTRING("get_ctrlKey","\xcb","\x95","\x77","\xe7"),
	HX_HCSTRING("set_ctrlKey","\xd7","\x9c","\xe4","\xf1"),
	HX_HCSTRING("get_metaKey","\xf1","\x9f","\x7b","\xa7"),
	HX_HCSTRING("set_metaKey","\xfd","\xa6","\xe8","\xb1"),
	HX_HCSTRING("get_numLock","\x68","\xa1","\x32","\x21"),
	HX_HCSTRING("set_numLock","\x74","\xa8","\x9f","\x2b"),
	HX_HCSTRING("get_shiftKey","\x46","\x46","\xb9","\x4e"),
	HX_HCSTRING("set_shiftKey","\xba","\x69","\xb2","\x63"),
	::String(null())
};

void KeyModifier_Impl__obj::__register()
{
	hx::Object *dummy = new KeyModifier_Impl__obj;
	KeyModifier_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.ui._KeyModifier.KeyModifier_Impl_","\x20","\x28","\xaa","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyModifier_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = KeyModifier_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(KeyModifier_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< KeyModifier_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyModifier_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyModifier_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyModifier_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void KeyModifier_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_7_boot)
HXDLIN(   7)		NONE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_8_boot)
HXDLIN(   8)		LEFT_SHIFT = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_9_boot)
HXDLIN(   9)		RIGHT_SHIFT = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_10_boot)
HXDLIN(  10)		LEFT_CTRL = (int)64;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_11_boot)
HXDLIN(  11)		RIGHT_CTRL = (int)128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_12_boot)
HXDLIN(  12)		LEFT_ALT = (int)256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_13_boot)
HXDLIN(  13)		RIGHT_ALT = (int)512;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_14_boot)
HXDLIN(  14)		LEFT_META = (int)1024;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_15_boot)
HXDLIN(  15)		RIGHT_META = (int)2048;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_16_boot)
HXDLIN(  16)		NUM_LOCK = (int)4096;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_17_boot)
HXDLIN(  17)		CAPS_LOCK = (int)8192;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_18_boot)
HXDLIN(  18)		MODE = (int)16384;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_20_boot)
HXDLIN(  20)		CTRL = (int)192;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_21_boot)
HXDLIN(  21)		SHIFT = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_22_boot)
HXDLIN(  22)		ALT = (int)768;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a615467931d54dbe_23_boot)
HXDLIN(  23)		META = (int)3072;
            	}
}

} // end namespace lime
} // end namespace ui
} // end namespace _KeyModifier
