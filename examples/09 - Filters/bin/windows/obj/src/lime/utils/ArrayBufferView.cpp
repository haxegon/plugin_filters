// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferIO
#include <lime/utils/ArrayBufferIO.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_244a612994c6bd06_14_new,"lime.utils.ArrayBufferView","new",0xa2471efa,"lime.utils.ArrayBufferView.new","lime/utils/ArrayBufferView.hx",14,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Int16Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Int16Array",0xca4c1d7d,"lime.utils.ArrayBufferView.subarray_lime_utils_Int16Array","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_UInt16Array,"lime.utils.ArrayBufferView","subarray_lime_utils_UInt16Array",0x1214e722,"lime.utils.ArrayBufferView.subarray_lime_utils_UInt16Array","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Float64Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Float64Array",0x2bc0d377,"lime.utils.ArrayBufferView.subarray_lime_utils_Float64Array","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Int8Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Int8Array",0x5ec0bd58,"lime.utils.ArrayBufferView.subarray_lime_utils_Int8Array","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_UInt8ClampedArray,"lime.utils.ArrayBufferView","subarray_lime_utils_UInt8ClampedArray",0x0c7948a5,"lime.utils.ArrayBufferView.subarray_lime_utils_UInt8ClampedArray","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Int32Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Int32Array",0x84099983,"lime.utils.ArrayBufferView.subarray_lime_utils_Int32Array","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_UInt32Array,"lime.utils.ArrayBufferView","subarray_lime_utils_UInt32Array",0xcbd26328,"lime.utils.ArrayBufferView.subarray_lime_utils_UInt32Array","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Float32Array,"lime.utils.ArrayBufferView","subarray_lime_utils_Float32Array",0xe249b676,"lime.utils.ArrayBufferView.subarray_lime_utils_Float32Array","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_165_subarray_lime_utils_UInt8Array,"lime.utils.ArrayBufferView","subarray_lime_utils_UInt8Array",0xa88baf53,"lime.utils.ArrayBufferView.subarray_lime_utils_UInt8Array","lime/utils/ArrayBufferView.hx",165,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_53_initTypedArray,"lime.utils.ArrayBufferView","initTypedArray",0x0a95c3a5,"lime.utils.ArrayBufferView.initTypedArray","lime/utils/ArrayBufferView.hx",53,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_80_initBuffer,"lime.utils.ArrayBufferView","initBuffer",0x6e6530d6,"lime.utils.ArrayBufferView.initBuffer","lime/utils/ArrayBufferView.hx",80,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_117_initArray,"lime.utils.ArrayBufferView","initArray",0xe96cc683,"lime.utils.ArrayBufferView.initArray","lime/utils/ArrayBufferView.hx",117,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_137_set,"lime.utils.ArrayBufferView","set",0xa24aea3c,"lime.utils.ArrayBufferView.set","lime/utils/ArrayBufferView.hx",137,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_151_cloneBuffer,"lime.utils.ArrayBufferView","cloneBuffer",0x2d1320d7,"lime.utils.ArrayBufferView.cloneBuffer","lime/utils/ArrayBufferView.hx",151,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_213_bytesForType,"lime.utils.ArrayBufferView","bytesForType",0x22197f5e,"lime.utils.ArrayBufferView.bytesForType","lime/utils/ArrayBufferView.hx",213,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_248_toString,"lime.utils.ArrayBufferView","toString",0x0eb653d2,"lime.utils.ArrayBufferView.toString","lime/utils/ArrayBufferView.hx",248,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_271_toByteLength,"lime.utils.ArrayBufferView","toByteLength",0x7dea5d8f,"lime.utils.ArrayBufferView.toByteLength","lime/utils/ArrayBufferView.hx",271,0xb543acf8)
HX_LOCAL_STACK_FRAME(_hx_pos_244a612994c6bd06_278_copyFromArray,"lime.utils.ArrayBufferView","copyFromArray",0x360b3074,"lime.utils.ArrayBufferView.copyFromArray","lime/utils/ArrayBufferView.hx",278,0xb543acf8)
namespace lime{
namespace utils{

void ArrayBufferView_obj::__construct( ::Dynamic elements,int in_type){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_14_new)
HXLINE(  23)		this->bytesPerElement = (int)0;
HXLINE(  16)		this->type = (int)0;
HXLINE(  29)		this->type = in_type;
HXLINE(  30)		int _hx_tmp;
HXDLIN(  30)		switch((int)(this->type)){
            			case (int)1: {
HXLINE(  30)				_hx_tmp = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  30)				_hx_tmp = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  30)				_hx_tmp = (int)4;
            			}
            			break;
            			case (int)4: {
HXLINE(  30)				_hx_tmp = (int)1;
            			}
            			break;
            			case (int)5: {
HXLINE(  30)				_hx_tmp = (int)1;
            			}
            			break;
            			case (int)6: {
HXLINE(  30)				_hx_tmp = (int)2;
            			}
            			break;
            			case (int)7: {
HXLINE(  30)				_hx_tmp = (int)4;
            			}
            			break;
            			case (int)8: {
HXLINE(  30)				_hx_tmp = (int)4;
            			}
            			break;
            			case (int)9: {
HXLINE(  30)				_hx_tmp = (int)8;
            			}
            			break;
            			default:{
HXLINE(  30)				_hx_tmp = (int)1;
            			}
            		}
HXDLIN(  30)		this->bytesPerElement = _hx_tmp;
HXLINE(  34)		bool _hx_tmp1;
HXDLIN(  34)		if (hx::IsNotNull( elements )) {
HXLINE(  34)			_hx_tmp1 = hx::IsNotEq( elements,(int)0 );
            		}
            		else {
HXLINE(  34)			_hx_tmp1 = false;
            		}
HXDLIN(  34)		if (_hx_tmp1) {
HXLINE(  36)			if (hx::IsLess( elements,(int)0 )) {
HXLINE(  36)				elements = (int)0;
            			}
HXLINE(  40)			this->byteOffset = (int)0;
HXLINE(  41)			this->byteLength = (elements * this->bytesPerElement);
HXLINE(  42)			 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(this->byteLength);
HXDLIN(  42)			this->buffer = this1;
HXLINE(  43)			this->length = elements;
            		}
            	}

Dynamic ArrayBufferView_obj::__CreateEmpty() { return new ArrayBufferView_obj; }

void *ArrayBufferView_obj::_hx_vtable = 0;

Dynamic ArrayBufferView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayBufferView_obj > _hx_result = new ArrayBufferView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ArrayBufferView_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x340d6186;
}

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Int16Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Int16Array)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Int16Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_UInt16Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_UInt16Array)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_UInt16Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Float64Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Float64Array)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Float64Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Int8Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Int8Array)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Int8Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_UInt8ClampedArray(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_UInt8ClampedArray)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_UInt8ClampedArray,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Int32Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Int32Array)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Int32Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_UInt32Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_UInt32Array)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_UInt32Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_Float32Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_Float32Array)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_Float32Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::subarray_lime_utils_UInt8Array(int begin, ::Dynamic end){
            	HX_GC_STACKFRAME(&_hx_pos_244a612994c6bd06_165_subarray_lime_utils_UInt8Array)
HXLINE( 167)		if (hx::IsNull( end )) {
HXLINE( 167)			end = this->length;
            		}
HXLINE( 168)		int len = (end - begin);
HXLINE( 169)		int byte_offset = ((begin * this->bytesPerElement) + this->byteOffset);
HXLINE( 171)		 ::lime::utils::ArrayBufferView view;
HXLINE( 172)		int _g = this->type;
HXDLIN( 172)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 202)				HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            			}
            			break;
            			case (int)1: {
HXLINE( 175)				 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 175)				 ::lime::utils::ArrayBufferView this1;
HXDLIN( 175)				if (hx::IsNotNull( buffer )) {
HXLINE( 175)					 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)1);
HXDLIN( 175)					int in_byteOffset = byte_offset;
HXDLIN( 175)					if ((in_byteOffset < (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 175)					int bufferByteLength = buffer->length;
HXDLIN( 175)					int elementSize = _this->bytesPerElement;
HXDLIN( 175)					int newByteLength = bufferByteLength;
HXDLIN( 175)					if (hx::IsNull( len )) {
HXLINE( 175)						newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 175)						if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 175)						if ((newByteLength < (int)0)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 175)						newByteLength = (len * _this->bytesPerElement);
HXDLIN( 175)						int newRange = (in_byteOffset + newByteLength);
HXDLIN( 175)						if ((newRange > bufferByteLength)) {
HXLINE( 175)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 175)					_this->buffer = buffer;
HXDLIN( 175)					_this->byteOffset = in_byteOffset;
HXDLIN( 175)					_this->byteLength = newByteLength;
HXDLIN( 175)					_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 175)					this1 = _this;
            				}
            				else {
HXLINE( 175)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            				}
HXLINE( 171)				view = this1;
            			}
            			break;
            			case (int)2: {
HXLINE( 178)				 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 178)				 ::lime::utils::ArrayBufferView this2;
HXDLIN( 178)				if (hx::IsNotNull( buffer1 )) {
HXLINE( 178)					 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)2);
HXDLIN( 178)					int in_byteOffset1 = byte_offset;
HXDLIN( 178)					if ((in_byteOffset1 < (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					if ((hx::Mod(in_byteOffset1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 178)					int bufferByteLength1 = buffer1->length;
HXDLIN( 178)					int elementSize1 = _this1->bytesPerElement;
HXDLIN( 178)					int newByteLength1 = bufferByteLength1;
HXDLIN( 178)					if (hx::IsNull( len )) {
HXLINE( 178)						newByteLength1 = (bufferByteLength1 - in_byteOffset1);
HXDLIN( 178)						if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 178)						if ((newByteLength1 < (int)0)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 178)						newByteLength1 = (len * _this1->bytesPerElement);
HXDLIN( 178)						int newRange1 = (in_byteOffset1 + newByteLength1);
HXDLIN( 178)						if ((newRange1 > bufferByteLength1)) {
HXLINE( 178)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 178)					_this1->buffer = buffer1;
HXDLIN( 178)					_this1->byteOffset = in_byteOffset1;
HXDLIN( 178)					_this1->byteLength = newByteLength1;
HXDLIN( 178)					_this1->length = ::Std_obj::_hx_int(((Float)newByteLength1 / (Float)_this1->bytesPerElement));
HXDLIN( 178)					this2 = _this1;
            				}
            				else {
HXLINE( 178)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            				}
HXLINE( 171)				view = this2;
            			}
            			break;
            			case (int)3: {
HXLINE( 181)				 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 181)				 ::lime::utils::ArrayBufferView this3;
HXDLIN( 181)				if (hx::IsNotNull( buffer2 )) {
HXLINE( 181)					 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)3);
HXDLIN( 181)					int in_byteOffset2 = byte_offset;
HXDLIN( 181)					if ((in_byteOffset2 < (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					if ((hx::Mod(in_byteOffset2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 181)					int bufferByteLength2 = buffer2->length;
HXDLIN( 181)					int elementSize2 = _this2->bytesPerElement;
HXDLIN( 181)					int newByteLength2 = bufferByteLength2;
HXDLIN( 181)					if (hx::IsNull( len )) {
HXLINE( 181)						newByteLength2 = (bufferByteLength2 - in_byteOffset2);
HXDLIN( 181)						if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 181)						if ((newByteLength2 < (int)0)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 181)						newByteLength2 = (len * _this2->bytesPerElement);
HXDLIN( 181)						int newRange2 = (in_byteOffset2 + newByteLength2);
HXDLIN( 181)						if ((newRange2 > bufferByteLength2)) {
HXLINE( 181)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 181)					_this2->buffer = buffer2;
HXDLIN( 181)					_this2->byteOffset = in_byteOffset2;
HXDLIN( 181)					_this2->byteLength = newByteLength2;
HXDLIN( 181)					_this2->length = ::Std_obj::_hx_int(((Float)newByteLength2 / (Float)_this2->bytesPerElement));
HXDLIN( 181)					this3 = _this2;
            				}
            				else {
HXLINE( 181)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            				}
HXLINE( 171)				view = this3;
            			}
            			break;
            			case (int)4: {
HXLINE( 184)				 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 184)				 ::lime::utils::ArrayBufferView this4;
HXDLIN( 184)				if (hx::IsNotNull( buffer3 )) {
HXLINE( 184)					 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 184)					int in_byteOffset3 = byte_offset;
HXDLIN( 184)					if ((in_byteOffset3 < (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					if ((hx::Mod(in_byteOffset3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 184)					int bufferByteLength3 = buffer3->length;
HXDLIN( 184)					int elementSize3 = _this3->bytesPerElement;
HXDLIN( 184)					int newByteLength3 = bufferByteLength3;
HXDLIN( 184)					if (hx::IsNull( len )) {
HXLINE( 184)						newByteLength3 = (bufferByteLength3 - in_byteOffset3);
HXDLIN( 184)						if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 184)						if ((newByteLength3 < (int)0)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 184)						newByteLength3 = (len * _this3->bytesPerElement);
HXDLIN( 184)						int newRange3 = (in_byteOffset3 + newByteLength3);
HXDLIN( 184)						if ((newRange3 > bufferByteLength3)) {
HXLINE( 184)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 184)					_this3->buffer = buffer3;
HXDLIN( 184)					_this3->byteOffset = in_byteOffset3;
HXDLIN( 184)					_this3->byteLength = newByteLength3;
HXDLIN( 184)					_this3->length = ::Std_obj::_hx_int(((Float)newByteLength3 / (Float)_this3->bytesPerElement));
HXDLIN( 184)					this4 = _this3;
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            				}
HXLINE( 171)				view = this4;
            			}
            			break;
            			case (int)5: {
HXLINE( 187)				 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 187)				 ::lime::utils::ArrayBufferView this5;
HXDLIN( 187)				if (hx::IsNotNull( buffer4 )) {
HXLINE( 187)					 ::lime::utils::ArrayBufferView _this4 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)5);
HXDLIN( 187)					int in_byteOffset4 = byte_offset;
HXDLIN( 187)					if ((in_byteOffset4 < (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					if ((hx::Mod(in_byteOffset4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 187)					int bufferByteLength4 = buffer4->length;
HXDLIN( 187)					int elementSize4 = _this4->bytesPerElement;
HXDLIN( 187)					int newByteLength4 = bufferByteLength4;
HXDLIN( 187)					if (hx::IsNull( len )) {
HXLINE( 187)						newByteLength4 = (bufferByteLength4 - in_byteOffset4);
HXDLIN( 187)						if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 187)						if ((newByteLength4 < (int)0)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 187)						newByteLength4 = (len * _this4->bytesPerElement);
HXDLIN( 187)						int newRange4 = (in_byteOffset4 + newByteLength4);
HXDLIN( 187)						if ((newRange4 > bufferByteLength4)) {
HXLINE( 187)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 187)					_this4->buffer = buffer4;
HXDLIN( 187)					_this4->byteOffset = in_byteOffset4;
HXDLIN( 187)					_this4->byteLength = newByteLength4;
HXDLIN( 187)					_this4->length = ::Std_obj::_hx_int(((Float)newByteLength4 / (Float)_this4->bytesPerElement));
HXDLIN( 187)					this5 = _this4;
            				}
            				else {
HXLINE( 187)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8ClampedArray",8d,06,77,13));
            				}
HXLINE( 171)				view = this5;
            			}
            			break;
            			case (int)6: {
HXLINE( 190)				 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 190)				 ::lime::utils::ArrayBufferView this6;
HXDLIN( 190)				if (hx::IsNotNull( buffer5 )) {
HXLINE( 190)					 ::lime::utils::ArrayBufferView _this5 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)6);
HXDLIN( 190)					int in_byteOffset5 = byte_offset;
HXDLIN( 190)					if ((in_byteOffset5 < (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					if ((hx::Mod(in_byteOffset5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 190)					int bufferByteLength5 = buffer5->length;
HXDLIN( 190)					int elementSize5 = _this5->bytesPerElement;
HXDLIN( 190)					int newByteLength5 = bufferByteLength5;
HXDLIN( 190)					if (hx::IsNull( len )) {
HXLINE( 190)						newByteLength5 = (bufferByteLength5 - in_byteOffset5);
HXDLIN( 190)						if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 190)						if ((newByteLength5 < (int)0)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 190)						newByteLength5 = (len * _this5->bytesPerElement);
HXDLIN( 190)						int newRange5 = (in_byteOffset5 + newByteLength5);
HXDLIN( 190)						if ((newRange5 > bufferByteLength5)) {
HXLINE( 190)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 190)					_this5->buffer = buffer5;
HXDLIN( 190)					_this5->byteOffset = in_byteOffset5;
HXDLIN( 190)					_this5->byteLength = newByteLength5;
HXDLIN( 190)					_this5->length = ::Std_obj::_hx_int(((Float)newByteLength5 / (Float)_this5->bytesPerElement));
HXDLIN( 190)					this6 = _this5;
            				}
            				else {
HXLINE( 190)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt16Array",0a,c7,2d,d5));
            				}
HXLINE( 171)				view = this6;
            			}
            			break;
            			case (int)7: {
HXLINE( 193)				 ::haxe::io::Bytes buffer6 = this->buffer;
HXDLIN( 193)				 ::lime::utils::ArrayBufferView this7;
HXDLIN( 193)				if (hx::IsNotNull( buffer6 )) {
HXLINE( 193)					 ::lime::utils::ArrayBufferView _this6 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)7);
HXDLIN( 193)					int in_byteOffset6 = byte_offset;
HXDLIN( 193)					if ((in_byteOffset6 < (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					if ((hx::Mod(in_byteOffset6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 193)					int bufferByteLength6 = buffer6->length;
HXDLIN( 193)					int elementSize6 = _this6->bytesPerElement;
HXDLIN( 193)					int newByteLength6 = bufferByteLength6;
HXDLIN( 193)					if (hx::IsNull( len )) {
HXLINE( 193)						newByteLength6 = (bufferByteLength6 - in_byteOffset6);
HXDLIN( 193)						if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 193)						if ((newByteLength6 < (int)0)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 193)						newByteLength6 = (len * _this6->bytesPerElement);
HXDLIN( 193)						int newRange6 = (in_byteOffset6 + newByteLength6);
HXDLIN( 193)						if ((newRange6 > bufferByteLength6)) {
HXLINE( 193)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 193)					_this6->buffer = buffer6;
HXDLIN( 193)					_this6->byteOffset = in_byteOffset6;
HXDLIN( 193)					_this6->byteLength = newByteLength6;
HXDLIN( 193)					_this6->length = ::Std_obj::_hx_int(((Float)newByteLength6 / (Float)_this6->bytesPerElement));
HXDLIN( 193)					this7 = _this6;
            				}
            				else {
HXLINE( 193)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt32Array",10,43,eb,8e));
            				}
HXLINE( 171)				view = this7;
            			}
            			break;
            			case (int)8: {
HXLINE( 196)				 ::haxe::io::Bytes buffer7 = this->buffer;
HXDLIN( 196)				 ::lime::utils::ArrayBufferView this8;
HXDLIN( 196)				if (hx::IsNotNull( buffer7 )) {
HXLINE( 196)					 ::lime::utils::ArrayBufferView _this7 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 196)					int in_byteOffset7 = byte_offset;
HXDLIN( 196)					if ((in_byteOffset7 < (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					if ((hx::Mod(in_byteOffset7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 196)					int bufferByteLength7 = buffer7->length;
HXDLIN( 196)					int elementSize7 = _this7->bytesPerElement;
HXDLIN( 196)					int newByteLength7 = bufferByteLength7;
HXDLIN( 196)					if (hx::IsNull( len )) {
HXLINE( 196)						newByteLength7 = (bufferByteLength7 - in_byteOffset7);
HXDLIN( 196)						if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 196)						if ((newByteLength7 < (int)0)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 196)						newByteLength7 = (len * _this7->bytesPerElement);
HXDLIN( 196)						int newRange7 = (in_byteOffset7 + newByteLength7);
HXDLIN( 196)						if ((newRange7 > bufferByteLength7)) {
HXLINE( 196)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 196)					_this7->buffer = buffer7;
HXDLIN( 196)					_this7->byteOffset = in_byteOffset7;
HXDLIN( 196)					_this7->byteLength = newByteLength7;
HXDLIN( 196)					_this7->length = ::Std_obj::_hx_int(((Float)newByteLength7 / (Float)_this7->bytesPerElement));
HXDLIN( 196)					this8 = _this7;
            				}
            				else {
HXLINE( 196)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXLINE( 171)				view = this8;
            			}
            			break;
            			case (int)9: {
HXLINE( 199)				 ::haxe::io::Bytes buffer8 = this->buffer;
HXDLIN( 199)				 ::lime::utils::ArrayBufferView this9;
HXDLIN( 199)				if (hx::IsNotNull( buffer8 )) {
HXLINE( 199)					 ::lime::utils::ArrayBufferView _this8 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)9);
HXDLIN( 199)					int in_byteOffset8 = byte_offset;
HXDLIN( 199)					if ((in_byteOffset8 < (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					if ((hx::Mod(in_byteOffset8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 199)					int bufferByteLength8 = buffer8->length;
HXDLIN( 199)					int elementSize8 = _this8->bytesPerElement;
HXDLIN( 199)					int newByteLength8 = bufferByteLength8;
HXDLIN( 199)					if (hx::IsNull( len )) {
HXLINE( 199)						newByteLength8 = (bufferByteLength8 - in_byteOffset8);
HXDLIN( 199)						if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
HXDLIN( 199)						if ((newByteLength8 < (int)0)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
            					else {
HXLINE( 199)						newByteLength8 = (len * _this8->bytesPerElement);
HXDLIN( 199)						int newRange8 = (in_byteOffset8 + newByteLength8);
HXDLIN( 199)						if ((newRange8 > bufferByteLength8)) {
HXLINE( 199)							HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            						}
            					}
HXDLIN( 199)					_this8->buffer = buffer8;
HXDLIN( 199)					_this8->byteOffset = in_byteOffset8;
HXDLIN( 199)					_this8->byteLength = newByteLength8;
HXDLIN( 199)					_this8->length = ::Std_obj::_hx_int(((Float)newByteLength8 / (Float)_this8->bytesPerElement));
HXDLIN( 199)					this9 = _this8;
            				}
            				else {
HXLINE( 199)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            				}
HXLINE( 171)				view = this9;
            			}
            			break;
            		}
HXLINE( 205)		return view;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,subarray_lime_utils_UInt8Array,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::initTypedArray( ::lime::utils::ArrayBufferView view){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_53_initTypedArray)
HXLINE(  55)		 ::haxe::io::Bytes srcData = view->buffer;
HXLINE(  56)		int srcLength = view->length;
HXLINE(  57)		int srcByteOffset = view->byteOffset;
HXLINE(  58)		int srcElementSize = view->bytesPerElement;
HXLINE(  59)		int elementSize = this->bytesPerElement;
HXLINE(  63)		if ((view->type == this->type)) {
HXLINE(  64)			int srcLength1 = srcData->length;
HXDLIN(  64)			int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN(  64)			 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  64)			this->buffer = this1;
HXDLIN(  64)			this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            		}
            		else {
HXLINE(  67)			HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            		}
HXLINE(  70)		this->byteLength = (this->bytesPerElement * srcLength);
HXLINE(  71)		this->byteOffset = (int)0;
HXLINE(  72)		this->length = srcLength;
HXLINE(  74)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayBufferView_obj,initTypedArray,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::initBuffer( ::haxe::io::Bytes in_buffer,hx::Null< int >  __o_in_byteOffset, ::Dynamic len){
int in_byteOffset = __o_in_byteOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_80_initBuffer)
HXLINE(  82)		if ((in_byteOffset < (int)0)) {
HXLINE(  82)			HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            		}
HXLINE(  83)		if ((hx::Mod(in_byteOffset,this->bytesPerElement) != (int)0)) {
HXLINE(  83)			HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            		}
HXLINE(  85)		int bufferByteLength = in_buffer->length;
HXLINE(  86)		int elementSize = this->bytesPerElement;
HXLINE(  87)		int newByteLength = bufferByteLength;
HXLINE(  89)		if (hx::IsNull( len )) {
HXLINE(  91)			newByteLength = (bufferByteLength - in_byteOffset);
HXLINE(  93)			if ((hx::Mod(bufferByteLength,this->bytesPerElement) != (int)0)) {
HXLINE(  93)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXLINE(  94)			if ((newByteLength < (int)0)) {
HXLINE(  94)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
            		}
            		else {
HXLINE(  98)			newByteLength = (len * this->bytesPerElement);
HXLINE( 100)			int newRange = (in_byteOffset + newByteLength);
HXLINE( 101)			if ((newRange > bufferByteLength)) {
HXLINE( 101)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
            		}
HXLINE( 105)		this->buffer = in_buffer;
HXLINE( 106)		this->byteOffset = in_byteOffset;
HXLINE( 107)		this->byteLength = newByteLength;
HXLINE( 108)		this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)this->bytesPerElement));
HXLINE( 110)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ArrayBufferView_obj,initBuffer,return )

 ::lime::utils::ArrayBufferView ArrayBufferView_obj::initArray(::cpp::VirtualArray array){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_117_initArray)
HXLINE( 119)		this->byteOffset = (int)0;
HXLINE( 120)		this->length = array->get_length();
HXLINE( 121)		this->byteLength = (this->length * this->bytesPerElement);
HXLINE( 123)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(this->byteLength);
HXDLIN( 123)		this->buffer = this1;
HXLINE( 124)		this->copyFromArray(array,null());
HXLINE( 126)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayBufferView_obj,initArray,return )

void ArrayBufferView_obj::set( ::lime::utils::ArrayBufferView view,::cpp::VirtualArray array,hx::Null< int >  __o_offset){
int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_137_set)
HXDLIN( 137)		bool _hx_tmp;
HXDLIN( 137)		if (hx::IsNotNull( view )) {
HXDLIN( 137)			_hx_tmp = hx::IsNull( array );
            		}
            		else {
HXDLIN( 137)			_hx_tmp = false;
            		}
HXDLIN( 137)		if (_hx_tmp) {
HXLINE( 138)			 ::haxe::io::Bytes _hx_tmp1 = this->buffer;
HXDLIN( 138)			_hx_tmp1->blit((offset * this->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            		}
            		else {
HXLINE( 139)			bool _hx_tmp2;
HXDLIN( 139)			if (hx::IsNotNull( array )) {
HXLINE( 139)				_hx_tmp2 = hx::IsNull( view );
            			}
            			else {
HXLINE( 139)				_hx_tmp2 = false;
            			}
HXDLIN( 139)			if (_hx_tmp2) {
HXLINE( 140)				this->copyFromArray(array,offset);
            			}
            			else {
HXLINE( 142)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(ArrayBufferView_obj,set,(void))

void ArrayBufferView_obj::cloneBuffer( ::haxe::io::Bytes src,hx::Null< int >  __o_srcByteOffset){
int srcByteOffset = __o_srcByteOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_151_cloneBuffer)
HXLINE( 153)		int srcLength = src->length;
HXLINE( 154)		int cloneLength = (srcLength - srcByteOffset);
HXLINE( 156)		 ::haxe::io::Bytes this1 = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 156)		this->buffer = this1;
HXLINE( 157)		this->buffer->blit((int)0,src,srcByteOffset,cloneLength);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,cloneBuffer,(void))

int ArrayBufferView_obj::bytesForType(int type){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_213_bytesForType)
HXDLIN( 213)		switch((int)(type)){
            			case (int)1: {
HXLINE( 216)				return (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 225)				return (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE( 231)				return (int)4;
            			}
            			break;
            			case (int)4: {
HXLINE( 219)				return (int)1;
            			}
            			break;
            			case (int)5: {
HXLINE( 222)				return (int)1;
            			}
            			break;
            			case (int)6: {
HXLINE( 228)				return (int)2;
            			}
            			break;
            			case (int)7: {
HXLINE( 234)				return (int)4;
            			}
            			break;
            			case (int)8: {
HXLINE( 237)				return (int)4;
            			}
            			break;
            			case (int)9: {
HXLINE( 240)				return (int)8;
            			}
            			break;
            			default:{
HXLINE( 242)				return (int)1;
            			}
            		}
HXLINE( 213)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayBufferView_obj,bytesForType,return )

::String ArrayBufferView_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_248_toString)
HXLINE( 250)		::String name;
HXLINE( 251)		int _g = this->type;
HXDLIN( 251)		switch((int)(_g)){
            			case (int)1: {
HXLINE( 250)				name = HX_("Int8Array",50,dc,f6,ae);
            			}
            			break;
            			case (int)2: {
HXLINE( 250)				name = HX_("Int16Array",85,17,71,a9);
            			}
            			break;
            			case (int)3: {
HXLINE( 250)				name = HX_("Int32Array",8b,93,2e,63);
            			}
            			break;
            			case (int)4: {
HXLINE( 250)				name = HX_("UInt8Array",5b,a9,b0,87);
            			}
            			break;
            			case (int)5: {
HXLINE( 250)				name = HX_("UInt8ClampedArray",9d,1f,db,26);
            			}
            			break;
            			case (int)6: {
HXLINE( 250)				name = HX_("UInt16Array",1a,b4,4a,73);
            			}
            			break;
            			case (int)7: {
HXLINE( 250)				name = HX_("UInt32Array",20,30,08,2d);
            			}
            			break;
            			case (int)8: {
HXLINE( 250)				name = HX_("Float32Array",7e,42,27,90);
            			}
            			break;
            			case (int)9: {
HXLINE( 250)				name = HX_("Float64Array",7f,5f,9e,d9);
            			}
            			break;
            			default:{
HXLINE( 250)				name = HX_("ArrayBufferView",5e,6e,84,fd);
            			}
            		}
HXLINE( 264)		return (name + ((((HX_(" [byteLength:",11,d6,a9,ca) + this->byteLength) + HX_(", length:",a0,04,67,ef)) + this->length) + HX_("]",5d,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ArrayBufferView_obj,toString,return )

int ArrayBufferView_obj::toByteLength(int elemCount){
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_271_toByteLength)
HXDLIN( 271)		return (elemCount * this->bytesPerElement);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArrayBufferView_obj,toByteLength,return )

void ArrayBufferView_obj::copyFromArray(::Array< Float > array,hx::Null< int >  __o_offset){
int offset = __o_offset.Default(0);
            	HX_STACKFRAME(&_hx_pos_244a612994c6bd06_278_copyFromArray)
HXLINE( 281)		int i = (int)0;
HXDLIN( 281)		int len = array->length;
HXLINE( 283)		{
HXLINE( 283)			int _g = this->type;
HXDLIN( 283)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 391)					HX_STACK_DO_THROW(HX_("copyFromArray on a base type ArrayBuffer",e8,01,1a,e2));
            				}
            				break;
            				case (int)1: {
HXLINE( 285)					while((i < len)){
HXLINE( 286)						int pos = ((offset + i) * this->bytesPerElement);
HXLINE( 292)						{
HXLINE( 292)							 ::haxe::io::Bytes buffer = this->buffer;
HXDLIN( 292)							int value = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 292)							::__hxcpp_memory_set_byte(buffer->b,pos,value);
            						}
HXLINE( 295)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 298)					while((i < len)){
HXLINE( 299)						int pos1 = ((offset + i) * this->bytesPerElement);
HXLINE( 305)						 ::haxe::io::Bytes _hx_tmp = this->buffer;
HXDLIN( 305)						::lime::utils::ArrayBufferIO_obj::setInt16(_hx_tmp,pos1,::Std_obj::_hx_int(array->__get(i)));
HXLINE( 308)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 311)					while((i < len)){
HXLINE( 312)						int pos2 = ((offset + i) * this->bytesPerElement);
HXLINE( 318)						{
HXLINE( 318)							 ::haxe::io::Bytes buffer1 = this->buffer;
HXDLIN( 318)							int value1 = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 318)							::__hxcpp_memory_set_i32(buffer1->b,pos2,value1);
            						}
HXLINE( 321)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 324)					while((i < len)){
HXLINE( 325)						int pos3 = ((offset + i) * this->bytesPerElement);
HXLINE( 331)						{
HXLINE( 331)							 ::haxe::io::Bytes buffer2 = this->buffer;
HXDLIN( 331)							int value2 = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 331)							::__hxcpp_memory_set_byte(buffer2->b,pos3,value2);
            						}
HXLINE( 334)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE( 363)					while((i < len)){
HXLINE( 364)						int pos4 = ((offset + i) * this->bytesPerElement);
HXLINE( 370)						{
HXLINE( 370)							 ::haxe::io::Bytes buffer3 = this->buffer;
HXDLIN( 370)							{
HXLINE( 370)								int _hx_int = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 370)								Float _out;
HXDLIN( 370)								if ((_hx_int < (int)0)) {
HXLINE( 370)									_out = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE( 370)									_out = (_hx_int + ((Float)0.0));
            								}
HXDLIN( 370)								int _out1 = ::Std_obj::_hx_int(_out);
HXDLIN( 370)								if ((_out1 > (int)255)) {
HXLINE( 370)									_out1 = (int)255;
            								}
            								else {
HXLINE( 370)									_out1 = _out1;
            								}
HXDLIN( 370)								int value3;
HXDLIN( 370)								if ((_out1 < (int)0)) {
HXLINE( 370)									value3 = (int)0;
            								}
            								else {
HXLINE( 370)									value3 = _out1;
            								}
HXDLIN( 370)								::__hxcpp_memory_set_byte(buffer3->b,pos4,value3);
            							}
            						}
HXLINE( 373)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 337)					while((i < len)){
HXLINE( 338)						int pos5 = ((offset + i) * this->bytesPerElement);
HXLINE( 344)						{
HXLINE( 344)							 ::haxe::io::Bytes buffer4 = this->buffer;
HXDLIN( 344)							int value4 = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 344)							::__hxcpp_memory_set_ui16(buffer4->b,pos5,value4);
            						}
HXLINE( 347)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 350)					while((i < len)){
HXLINE( 351)						int pos6 = ((offset + i) * this->bytesPerElement);
HXLINE( 357)						{
HXLINE( 357)							 ::haxe::io::Bytes buffer5 = this->buffer;
HXDLIN( 357)							int value5 = ::Std_obj::_hx_int(array->__get(i));
HXDLIN( 357)							::__hxcpp_memory_set_ui32(buffer5->b,pos6,value5);
            						}
HXLINE( 360)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 376)					while((i < len)){
HXLINE( 377)						int pos7 = ((offset + i) * this->bytesPerElement);
HXLINE( 378)						{
HXLINE( 378)							::Array< unsigned char > buffer6 = this->buffer->b;
HXDLIN( 378)							::__hxcpp_memory_set_float(buffer6,pos7,array->__get(i));
            						}
HXLINE( 380)						i = (i + (int)1);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE( 383)					while((i < len)){
HXLINE( 384)						int pos8 = ((offset + i) * this->bytesPerElement);
HXLINE( 385)						{
HXLINE( 385)							::Array< unsigned char > buffer7 = this->buffer->b;
HXDLIN( 385)							::__hxcpp_memory_set_double(buffer7,pos8,array->__get(i));
            						}
HXLINE( 387)						i = (i + (int)1);
            					}
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ArrayBufferView_obj,copyFromArray,(void))


hx::ObjectPtr< ArrayBufferView_obj > ArrayBufferView_obj::__new( ::Dynamic elements,int in_type) {
	hx::ObjectPtr< ArrayBufferView_obj > __this = new ArrayBufferView_obj();
	__this->__construct(elements,in_type);
	return __this;
}

hx::ObjectPtr< ArrayBufferView_obj > ArrayBufferView_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic elements,int in_type) {
	ArrayBufferView_obj *__this = (ArrayBufferView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ArrayBufferView_obj), true, "lime.utils.ArrayBufferView"));
	*(void **)__this = ArrayBufferView_obj::_hx_vtable;
	__this->__construct(elements,in_type);
	return __this;
}

ArrayBufferView_obj::ArrayBufferView_obj()
{
}

void ArrayBufferView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayBufferView);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(byteOffset,"byteOffset");
	HX_MARK_MEMBER_NAME(byteLength,"byteLength");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(bytesPerElement,"bytesPerElement");
	HX_MARK_END_CLASS();
}

void ArrayBufferView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(byteOffset,"byteOffset");
	HX_VISIT_MEMBER_NAME(byteLength,"byteLength");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(bytesPerElement,"bytesPerElement");
}

hx::Val ArrayBufferView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"initArray") ) { return hx::Val( initArray_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { return hx::Val( byteOffset ); }
		if (HX_FIELD_EQ(inName,"byteLength") ) { return hx::Val( byteLength ); }
		if (HX_FIELD_EQ(inName,"initBuffer") ) { return hx::Val( initBuffer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cloneBuffer") ) { return hx::Val( cloneBuffer_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bytesForType") ) { return hx::Val( bytesForType_dyn() ); }
		if (HX_FIELD_EQ(inName,"toByteLength") ) { return hx::Val( toByteLength_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyFromArray") ) { return hx::Val( copyFromArray_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"initTypedArray") ) { return hx::Val( initTypedArray_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bytesPerElement") ) { return hx::Val( bytesPerElement ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Int8Array") ) { return hx::Val( subarray_lime_utils_Int8Array_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Int16Array") ) { return hx::Val( subarray_lime_utils_Int16Array_dyn() ); }
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Int32Array") ) { return hx::Val( subarray_lime_utils_Int32Array_dyn() ); }
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_UInt8Array") ) { return hx::Val( subarray_lime_utils_UInt8Array_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_UInt16Array") ) { return hx::Val( subarray_lime_utils_UInt16Array_dyn() ); }
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_UInt32Array") ) { return hx::Val( subarray_lime_utils_UInt32Array_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Float64Array") ) { return hx::Val( subarray_lime_utils_Float64Array_dyn() ); }
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_Float32Array") ) { return hx::Val( subarray_lime_utils_Float32Array_dyn() ); }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"subarray_lime_utils_UInt8ClampedArray") ) { return hx::Val( subarray_lime_utils_UInt8ClampedArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ArrayBufferView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"byteOffset") ) { byteOffset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byteLength") ) { byteLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bytesPerElement") ) { bytesPerElement=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayBufferView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38"));
	outFields->push(HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("bytesPerElement","\xaa","\x67","\x89","\x18"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ArrayBufferView_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(ArrayBufferView_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,byteOffset),HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38")},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,byteLength),HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77")},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(ArrayBufferView_obj,bytesPerElement),HX_HCSTRING("bytesPerElement","\xaa","\x67","\x89","\x18")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ArrayBufferView_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayBufferView_obj_sMemberFields[] = {
	HX_HCSTRING("subarray_lime_utils_Int16Array","\xd7","\x8d","\x80","\xc2"),
	HX_HCSTRING("subarray_lime_utils_UInt16Array","\x88","\xc5","\xc2","\x47"),
	HX_HCSTRING("subarray_lime_utils_Float64Array","\x51","\x8e","\x35","\xee"),
	HX_HCSTRING("subarray_lime_utils_Int8Array","\x3e","\x16","\xba","\x20"),
	HX_HCSTRING("subarray_lime_utils_UInt8ClampedArray","\x8b","\xf7","\x6e","\x70"),
	HX_HCSTRING("subarray_lime_utils_Int32Array","\xdd","\x09","\x3e","\x7c"),
	HX_HCSTRING("subarray_lime_utils_UInt32Array","\x8e","\x41","\x80","\x01"),
	HX_HCSTRING("subarray_lime_utils_Float32Array","\x50","\x71","\xbe","\xa4"),
	HX_HCSTRING("subarray_lime_utils_UInt8Array","\xad","\x1f","\xc0","\xa0"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("byteOffset","\xbb","\x20","\x44","\x38"),
	HX_HCSTRING("byteLength","\x0e","\x1e","\x0c","\x77"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("bytesPerElement","\xaa","\x67","\x89","\x18"),
	HX_HCSTRING("initTypedArray","\xff","\x5f","\x1a","\x1d"),
	HX_HCSTRING("initBuffer","\x30","\x18","\xda","\xd4"),
	HX_HCSTRING("initArray","\x69","\x88","\x21","\x41"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("cloneBuffer","\x3d","\xa8","\xe8","\x6c"),
	HX_HCSTRING("bytesForType","\x38","\x71","\x1a","\xbd"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toByteLength","\x69","\x4f","\xeb","\x18"),
	HX_HCSTRING("copyFromArray","\x5a","\xdd","\xdd","\x3b"),
	::String(null()) };

static void ArrayBufferView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayBufferView_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayBufferView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayBufferView_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayBufferView_obj::__mClass;

void ArrayBufferView_obj::__register()
{
	hx::Object *dummy = new ArrayBufferView_obj;
	ArrayBufferView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.utils.ArrayBufferView","\x08","\xda","\x61","\xc9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayBufferView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ArrayBufferView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ArrayBufferView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayBufferView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayBufferView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayBufferView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace utils
