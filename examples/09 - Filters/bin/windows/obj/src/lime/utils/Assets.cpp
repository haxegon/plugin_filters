// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app_Preloader
#include <lime/app/Preloader.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_AssetCache
#include <lime/utils/AssetCache.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_55_exists,"lime.utils.Assets","exists",0x1d422f71,"lime.utils.Assets.exists","lime/utils/Assets.hx",55,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_86_getAsset,"lime.utils.Assets","getAsset",0x8d49da4f,"lime.utils.Assets.getAsset","lime/utils/Assets.hx",86,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_191_getAudioBuffer,"lime.utils.Assets","getAudioBuffer",0x84c07015,"lime.utils.Assets.getAudioBuffer","lime/utils/Assets.hx",191,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_204_getBytes,"lime.utils.Assets","getBytes",0x24a878ca,"lime.utils.Assets.getBytes","lime/utils/Assets.hx",204,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_217_getFont,"lime.utils.Assets","getFont",0x6eb05e50,"lime.utils.Assets.getFont","lime/utils/Assets.hx",217,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_231_getImage,"lime.utils.Assets","getImage",0x24798fba,"lime.utils.Assets.getImage","lime/utils/Assets.hx",231,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_236_getLibrary,"lime.utils.Assets","getLibrary",0xdfc4ad1a,"lime.utils.Assets.getLibrary","lime/utils/Assets.hx",236,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_255_getPath,"lime.utils.Assets","getPath",0x7541e626,"lime.utils.Assets.getPath","lime/utils/Assets.hx",255,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_294_getText,"lime.utils.Assets","getText",0x77e9cd2e,"lime.utils.Assets.getText","lime/utils/Assets.hx",294,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_299_hasLibrary,"lime.utils.Assets","hasLibrary",0x1b170ed6,"lime.utils.Assets.hasLibrary","lime/utils/Assets.hx",299,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_312_isLocal,"lime.utils.Assets","isLocal",0x6de3bdec,"lime.utils.Assets.isLocal","lime/utils/Assets.hx",312,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_338_isValidAudio,"lime.utils.Assets","isValidAudio",0xfba1fa19,"lime.utils.Assets.isValidAudio","lime/utils/Assets.hx",338,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_347_isValidImage,"lime.utils.Assets","isValidImage",0x918aa09e,"lime.utils.Assets.isValidImage","lime/utils/Assets.hx",347,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_352_list,"lime.utils.Assets","list",0x96ec2eb3,"lime.utils.Assets.list","lime/utils/Assets.hx",352,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_373_loadAsset,"lime.utils.Assets","loadAsset",0x8c6c0f75,"lime.utils.Assets.loadAsset","lime/utils/Assets.hx",373,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_437_loadAsset,"lime.utils.Assets","loadAsset",0x8c6c0f75,"lime.utils.Assets.loadAsset","lime/utils/Assets.hx",437,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_466_loadAudioBuffer,"lime.utils.Assets","loadAudioBuffer",0xa72805bb,"lime.utils.Assets.loadAudioBuffer","lime/utils/Assets.hx",466,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_473_loadBytes,"lime.utils.Assets","loadBytes",0x23caadf0,"lime.utils.Assets.loadBytes","lime/utils/Assets.hx",473,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_480_loadFont,"lime.utils.Assets","loadFont",0xbb998fea,"lime.utils.Assets.loadFont","lime/utils/Assets.hx",480,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_487_loadImage,"lime.utils.Assets","loadImage",0x239bc4e0,"lime.utils.Assets.loadImage","lime/utils/Assets.hx",487,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_520_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",520,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_545_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",545,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_492_loadLibrary,"lime.utils.Assets","loadLibrary",0x93baf7c0,"lime.utils.Assets.loadLibrary","lime/utils/Assets.hx",492,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_558_loadText,"lime.utils.Assets","loadText",0xc4d2fec8,"lime.utils.Assets.loadText","lime/utils/Assets.hx",558,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_563_registerLibrary,"lime.utils.Assets","registerLibrary",0xb6301ea3,"lime.utils.Assets.registerLibrary","lime/utils/Assets.hx",563,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_590_unloadLibrary,"lime.utils.Assets","unloadLibrary",0xc816d6c7,"lime.utils.Assets.unloadLibrary","lime/utils/Assets.hx",590,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_611___libraryNotFound,"lime.utils.Assets","__libraryNotFound",0x7dfa37b5,"lime.utils.Assets.__libraryNotFound","lime/utils/Assets.hx",611,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_639_library_onChange,"lime.utils.Assets","library_onChange",0x3a89dec8,"lime.utils.Assets.library_onChange","lime/utils/Assets.hx",639,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_47_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",47,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_48_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",48,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_51_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",51,0x95055f23)
HX_LOCAL_STACK_FRAME(_hx_pos_df5754140b017d9f_52_boot,"lime.utils.Assets","boot",0x90549687,"lime.utils.Assets.boot","lime/utils/Assets.hx",52,0x95055f23)
namespace lime{
namespace utils{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b49805f;
}

 ::lime::utils::AssetCache Assets_obj::cache;

 ::lime::app::_Event_Void_Void Assets_obj::onChange;

::String Assets_obj::defaultRootPath;

 ::haxe::ds::StringMap Assets_obj::libraries;

 ::haxe::ds::StringMap Assets_obj::libraryPaths;

bool Assets_obj::exists(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_55_exists)
HXLINE(  59)		if (hx::IsNull( type )) {
HXLINE(  61)			type = HX_("BINARY",01,68,8e,9f);
            		}
HXLINE(  65)		::String symbol_symbolName;
HXDLIN(  65)		::String symbol_libraryName;
HXDLIN(  65)		 ::lime::utils::AssetLibrary symbol_library;
HXDLIN(  65)		int colonIndex = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(  65)		symbol_libraryName = id.substring((int)0,colonIndex);
HXDLIN(  65)		symbol_symbolName = id.substring((colonIndex + (int)1),null());
HXDLIN(  65)		symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE(  67)		if (hx::IsNotNull( symbol_library )) {
HXLINE(  69)			return symbol_library->exists(symbol_symbolName,type);
            		}
HXLINE(  75)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::Dynamic Assets_obj::getAsset(::String id,::String type,bool useCache){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_86_getAsset)
HXLINE(  90)		bool _hx_tmp;
HXDLIN(  90)		if (useCache) {
HXLINE(  90)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE(  90)			_hx_tmp = false;
            		}
HXDLIN(  90)		if (_hx_tmp) {
HXLINE(  92)			::String _hx_switch_0 = type;
            			if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ||  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE(  96)				useCache = false;
HXDLIN(  96)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE( 100)				 ::Dynamic font = ::haxe::IMap_obj::get(::lime::utils::Assets_obj::cache->font,id);
HXLINE( 102)				if (hx::IsNotNull( font )) {
HXLINE( 104)					return font;
            				}
HXLINE(  98)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE( 110)				 ::lime::graphics::Image image = ( ( ::lime::graphics::Image)(::haxe::IMap_obj::get(::lime::utils::Assets_obj::cache->image,id)) );
HXLINE( 112)				if (::lime::utils::Assets_obj::isValidImage(image)) {
HXLINE( 114)					return image;
            				}
HXLINE( 108)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 120)				 ::lime::media::AudioBuffer audio = ( ( ::lime::media::AudioBuffer)(::haxe::IMap_obj::get(::lime::utils::Assets_obj::cache->audio,id)) );
HXLINE( 122)				if (::lime::utils::Assets_obj::isValidAudio(audio)) {
HXLINE( 124)					return audio;
            				}
HXLINE( 118)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 130)				HX_STACK_DO_THROW((HX_("Not sure how to get template: ",a1,19,8c,ad) + id));
HXDLIN( 130)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE( 134)				return null();
            			}
            			_hx_goto_1:;
            		}
HXLINE( 140)		::String symbol_symbolName;
HXDLIN( 140)		::String symbol_libraryName;
HXDLIN( 140)		 ::lime::utils::AssetLibrary symbol_library;
HXDLIN( 140)		int colonIndex = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 140)		symbol_libraryName = id.substring((int)0,colonIndex);
HXDLIN( 140)		symbol_symbolName = id.substring((colonIndex + (int)1),null());
HXDLIN( 140)		symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 142)		if (hx::IsNotNull( symbol_library )) {
HXLINE( 144)			if (symbol_library->exists(symbol_symbolName,type)) {
HXLINE( 146)				if (symbol_library->isLocal(symbol_symbolName,type)) {
HXLINE( 148)					 ::Dynamic asset = symbol_library->getAsset(symbol_symbolName,type);
HXLINE( 150)					bool _hx_tmp1;
HXDLIN( 150)					if (useCache) {
HXLINE( 150)						_hx_tmp1 = ::lime::utils::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 150)						_hx_tmp1 = false;
            					}
HXDLIN( 150)					if (_hx_tmp1) {
HXLINE( 152)						::lime::utils::Assets_obj::cache->set(id,type,asset);
            					}
HXLINE( 156)					return asset;
            				}
            				else {
HXLINE( 160)					::lime::utils::Log_obj::error((((type + HX_(" asset \"",d2,25,2a,5d)) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),160,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            				}
            			}
            			else {
HXLINE( 166)				::lime::utils::Log_obj::error(((((HX_("There is no ",e5,bb,ab,c5) + type) + HX_(" asset with an ID of \"",95,f2,3a,0d)) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),166,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            			}
            		}
            		else {
HXLINE( 172)			::String _hx_tmp2 = ::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName);
HXDLIN( 172)			::lime::utils::Log_obj::error(_hx_tmp2,hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),172,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getAsset",7a,79,10,86)));
            		}
HXLINE( 178)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,getAsset,return )

 ::lime::media::AudioBuffer Assets_obj::getAudioBuffer(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_191_getAudioBuffer)
HXDLIN( 191)		return ( ( ::lime::media::AudioBuffer)(::lime::utils::Assets_obj::getAsset(id,HX_("SOUND",af,c4,ba,fe),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getAudioBuffer,return )

 ::haxe::io::Bytes Assets_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_204_getBytes)
HXDLIN( 204)		return ( ( ::haxe::io::Bytes)(::lime::utils::Assets_obj::getAsset(id,HX_("BINARY",01,68,8e,9f),false)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

 ::lime::text::Font Assets_obj::getFont(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_217_getFont)
HXDLIN( 217)		return ( ( ::lime::text::Font)(::lime::utils::Assets_obj::getAsset(id,HX_("FONT",cf,25,81,2e),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

 ::lime::graphics::Image Assets_obj::getImage(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_231_getImage)
HXDLIN( 231)		return ( ( ::lime::graphics::Image)(::lime::utils::Assets_obj::getAsset(id,HX_("IMAGE",3b,57,57,3b),useCache)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getImage,return )

 ::lime::utils::AssetLibrary Assets_obj::getLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_236_getLibrary)
HXLINE( 238)		bool _hx_tmp;
HXDLIN( 238)		if (hx::IsNotNull( name )) {
HXLINE( 238)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 238)			_hx_tmp = true;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 240)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 244)		return ::lime::utils::Assets_obj::libraries->get(name).StaticCast<  ::lime::utils::AssetLibrary >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLibrary,return )

::String Assets_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_255_getPath)
HXLINE( 259)		::String symbol_symbolName;
HXDLIN( 259)		::String symbol_libraryName;
HXDLIN( 259)		 ::lime::utils::AssetLibrary symbol_library;
HXDLIN( 259)		int colonIndex = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 259)		symbol_libraryName = id.substring((int)0,colonIndex);
HXDLIN( 259)		symbol_symbolName = id.substring((colonIndex + (int)1),null());
HXDLIN( 259)		symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 261)		if (hx::IsNotNull( symbol_library )) {
HXLINE( 263)			if (symbol_library->exists(symbol_symbolName,null())) {
HXLINE( 265)				return symbol_library->getPath(symbol_symbolName);
            			}
            			else {
HXLINE( 269)				::lime::utils::Log_obj::error(((HX_("There is no asset with an ID of \"",b0,92,42,96) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),269,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getPath",5b,95,d4,1c)));
            			}
            		}
            		else {
HXLINE( 275)			::String _hx_tmp = ::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName);
HXDLIN( 275)			::lime::utils::Log_obj::error(_hx_tmp,hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),275,HX_("lime.utils.Assets",39,6e,7e,b0),HX_("getPath",5b,95,d4,1c)));
            		}
HXLINE( 281)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

::String Assets_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_294_getText)
HXDLIN( 294)		return ( (::String)(::lime::utils::Assets_obj::getAsset(id,HX_("TEXT",ad,94,ba,37),false)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

bool Assets_obj::hasLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_299_hasLibrary)
HXLINE( 301)		bool _hx_tmp;
HXDLIN( 301)		if (hx::IsNotNull( name )) {
HXLINE( 301)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 301)			_hx_tmp = true;
            		}
HXDLIN( 301)		if (_hx_tmp) {
HXLINE( 303)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 307)		return ::lime::utils::Assets_obj::libraries->exists(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasLibrary,return )

bool Assets_obj::isLocal(::String id,::String type,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_312_isLocal)
HXLINE( 316)		bool _hx_tmp;
HXDLIN( 316)		if (useCache) {
HXLINE( 316)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 316)			_hx_tmp = false;
            		}
HXDLIN( 316)		if (_hx_tmp) {
HXLINE( 318)			if (::lime::utils::Assets_obj::cache->exists(id,type)) {
HXLINE( 318)				return true;
            			}
            		}
HXLINE( 322)		::String symbol_symbolName;
HXDLIN( 322)		::String symbol_libraryName;
HXDLIN( 322)		 ::lime::utils::AssetLibrary symbol_library;
HXDLIN( 322)		int colonIndex = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 322)		symbol_libraryName = id.substring((int)0,colonIndex);
HXDLIN( 322)		symbol_symbolName = id.substring((colonIndex + (int)1),null());
HXDLIN( 322)		symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 323)		if (hx::IsNotNull( symbol_library )) {
HXLINE( 323)			return symbol_library->isLocal(symbol_symbolName,type);
            		}
            		else {
HXLINE( 323)			return false;
            		}
HXDLIN( 323)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,isLocal,return )

bool Assets_obj::isValidAudio( ::lime::media::AudioBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_338_isValidAudio)
HXDLIN( 338)		return hx::IsNotNull( buffer );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidAudio,return )

bool Assets_obj::isValidImage( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_347_isValidImage)
HXDLIN( 347)		if (hx::IsNotNull( image )) {
HXDLIN( 347)			return hx::IsNotNull( image->buffer );
            		}
            		else {
HXDLIN( 347)			return false;
            		}
HXDLIN( 347)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidImage,return )

::Array< ::String > Assets_obj::list(::String type){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_352_list)
HXLINE( 354)		::Array< ::String > items = ::Array_obj< ::String >::__new(0);
HXLINE( 356)		{
HXLINE( 356)			 ::Dynamic library = ::lime::utils::Assets_obj::libraries->iterator();
HXDLIN( 356)			while(( (bool)(library->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 356)				 ::lime::utils::AssetLibrary library1 = ( ( ::lime::utils::AssetLibrary)(library->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 358)				::Array< ::String > libraryItems = library1->list(type);
HXLINE( 360)				if (hx::IsNotNull( libraryItems )) {
HXLINE( 362)					items = items->concat(libraryItems);
            				}
            			}
            		}
HXLINE( 368)		return items;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

 ::lime::app::Future Assets_obj::loadAsset(::String id,::String type,bool useCache){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_373_loadAsset)
HXLINE( 377)		bool _hx_tmp;
HXDLIN( 377)		if (useCache) {
HXLINE( 377)			_hx_tmp = ::lime::utils::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 377)			_hx_tmp = false;
            		}
HXDLIN( 377)		if (_hx_tmp) {
HXLINE( 379)			::String _hx_switch_0 = type;
            			if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ||  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE( 383)				useCache = false;
HXDLIN( 383)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE( 387)				 ::Dynamic font = ::haxe::IMap_obj::get(::lime::utils::Assets_obj::cache->font,id);
HXLINE( 389)				if (hx::IsNotNull( font )) {
HXLINE( 391)					return ::lime::app::Future_obj::withValue(font);
            				}
HXLINE( 385)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE( 397)				 ::lime::graphics::Image image = ( ( ::lime::graphics::Image)(::haxe::IMap_obj::get(::lime::utils::Assets_obj::cache->image,id)) );
HXLINE( 399)				if (::lime::utils::Assets_obj::isValidImage(image)) {
HXLINE( 401)					return ::lime::app::Future_obj::withValue(image);
            				}
HXLINE( 395)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 407)				 ::lime::media::AudioBuffer audio = ( ( ::lime::media::AudioBuffer)(::haxe::IMap_obj::get(::lime::utils::Assets_obj::cache->audio,id)) );
HXLINE( 409)				if (::lime::utils::Assets_obj::isValidAudio(audio)) {
HXLINE( 411)					return ::lime::app::Future_obj::withValue(audio);
            				}
HXLINE( 405)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 417)				HX_STACK_DO_THROW((HX_("Not sure how to get template: ",a1,19,8c,ad) + id));
HXDLIN( 417)				goto _hx_goto_16;
            			}
            			/* default */{
HXLINE( 421)				return null();
            			}
            			_hx_goto_16:;
            		}
HXLINE( 427)		::String symbol_symbolName;
HXDLIN( 427)		::String symbol_libraryName;
HXDLIN( 427)		 ::lime::utils::AssetLibrary symbol_library;
HXDLIN( 427)		int colonIndex = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 427)		symbol_libraryName = id.substring((int)0,colonIndex);
HXDLIN( 427)		symbol_symbolName = id.substring((colonIndex + (int)1),null());
HXDLIN( 427)		symbol_library = ::lime::utils::Assets_obj::getLibrary(symbol_libraryName);
HXLINE( 429)		if (hx::IsNotNull( symbol_library )) {
HXLINE( 431)			if (symbol_library->exists(symbol_symbolName,type)) {
HXLINE( 433)				 ::lime::app::Future future = symbol_library->loadAsset(symbol_symbolName,type);
HXLINE( 435)				bool _hx_tmp1;
HXDLIN( 435)				if (useCache) {
HXLINE( 435)					_hx_tmp1 = ::lime::utils::Assets_obj::cache->enabled;
            				}
            				else {
HXLINE( 435)					_hx_tmp1 = false;
            				}
HXDLIN( 435)				if (_hx_tmp1) {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id,::String,type) HXARGC(1)
            					void _hx_run( ::Dynamic asset){
            						HX_STACKFRAME(&_hx_pos_df5754140b017d9f_437_loadAsset)
HXLINE( 437)						::lime::utils::Assets_obj::cache->set(id,type,asset);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 437)					future->onComplete( ::Dynamic(new _hx_Closure_0(id,type)));
            				}
HXLINE( 441)				return future;
            			}
            			else {
HXLINE( 445)				return ::lime::app::Future_obj::withError(((((HX_("There is no ",e5,bb,ab,c5) + type) + HX_(" asset with an ID of \"",95,f2,3a,0d)) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 451)			return ::lime::app::Future_obj::withError(::lime::utils::Assets_obj::_hx___libraryNotFound(symbol_libraryName));
            		}
HXLINE( 429)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,loadAsset,return )

 ::lime::app::Future Assets_obj::loadAudioBuffer(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_466_loadAudioBuffer)
HXDLIN( 466)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("SOUND",af,c4,ba,fe),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadAudioBuffer,return )

 ::lime::app::Future Assets_obj::loadBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_473_loadBytes)
HXDLIN( 473)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("BINARY",01,68,8e,9f),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadBytes,return )

 ::lime::app::Future Assets_obj::loadFont(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_480_loadFont)
HXDLIN( 480)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("FONT",cf,25,81,2e),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadFont,return )

 ::lime::app::Future Assets_obj::loadImage(::String id,hx::Null< bool >  __o_useCache){
bool useCache = __o_useCache.Default(true);
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_487_loadImage)
HXDLIN( 487)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("IMAGE",3b,57,57,3b),useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadImage,return )

 ::lime::app::Future Assets_obj::loadLibrary(::String id){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            		void _hx_run( ::lime::utils::AssetManifest manifest){
            			HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_520_loadLibrary)
HXLINE( 522)			if (hx::IsNull( manifest )) {
HXLINE( 524)				promise->error(((HX_("Cannot parse asset manifest for library \"",cf,1e,cc,48) + id) + HX_("\"",22,00,00,00)));
HXLINE( 525)				return;
            			}
HXLINE( 529)			 ::lime::utils::AssetLibrary library1 = ::lime::utils::AssetLibrary_obj::fromManifest(manifest);
HXLINE( 531)			if (hx::IsNull( library1 )) {
HXLINE( 533)				promise->error(((HX_("Cannot open library \"",44,cc,55,e7) + id) + HX_("\"",22,00,00,00)));
            			}
            			else {
HXLINE( 537)				::lime::utils::Assets_obj::libraries->set(id,library1);
HXLINE( 538)				library1->onChange->add(::lime::utils::Assets_obj::onChange->dispatch_dyn(),null(),null());
HXLINE( 539)				 ::lime::app::Future _hx_tmp = library1->load();
HXDLIN( 539)				promise->completeWith(_hx_tmp);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::String,id, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_545_loadLibrary)
HXLINE( 545)			promise->error(((HX_("There is no asset library with an ID of \"",8b,06,e2,9a) + id) + HX_("\"",22,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_492_loadLibrary)
HXLINE( 494)		 ::lime::app::Promise_lime_utils_AssetLibrary promise =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__alloc( HX_CTX );
HXLINE( 498)		 ::lime::utils::AssetLibrary library = ::lime::utils::Assets_obj::getLibrary(id);
HXLINE( 500)		if (hx::IsNotNull( library )) {
HXLINE( 502)			return library->load();
            		}
HXLINE( 506)		::String path = id;
HXLINE( 507)		::String rootPath = null();
HXLINE( 509)		if (::lime::utils::Assets_obj::libraryPaths->exists(id)) {
HXLINE( 511)			path = ( (::String)(::lime::utils::Assets_obj::libraryPaths->get(id)) );
HXLINE( 512)			rootPath = ::lime::utils::Assets_obj::defaultRootPath;
            		}
            		else {
HXLINE( 514)			if (::StringTools_obj::endsWith(path,HX_(".bundle",30,4a,b8,4e))) {
HXLINE( 516)				path = (path + HX_("/library.json",2a,a7,07,47));
            			}
            		}
HXLINE( 520)		::lime::utils::AssetManifest_obj::loadFromFile(path,rootPath)->onComplete( ::Dynamic(new _hx_Closure_0(id,promise)))->onError( ::Dynamic(new _hx_Closure_1(id,promise)));
HXLINE( 551)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadLibrary,return )

 ::lime::app::Future Assets_obj::loadText(::String id){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_558_loadText)
HXDLIN( 558)		return ::lime::utils::Assets_obj::loadAsset(id,HX_("TEXT",ad,94,ba,37),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadText,return )

void Assets_obj::registerLibrary(::String name, ::lime::utils::AssetLibrary library){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_563_registerLibrary)
HXLINE( 565)		if (::lime::utils::Assets_obj::libraries->exists(name)) {
HXLINE( 567)			if (hx::IsEq( ::lime::utils::Assets_obj::libraries->get(name).StaticCast<  ::lime::utils::AssetLibrary >(),library )) {
HXLINE( 569)				return;
            			}
            			else {
HXLINE( 573)				::lime::utils::Assets_obj::unloadLibrary(name);
            			}
            		}
HXLINE( 579)		if (hx::IsNotNull( library )) {
HXLINE( 581)			library->onChange->add(::lime::utils::Assets_obj::library_onChange_dyn(),null(),null());
            		}
HXLINE( 585)		::lime::utils::Assets_obj::libraries->set(name,library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,registerLibrary,(void))

void Assets_obj::unloadLibrary(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_590_unloadLibrary)
HXLINE( 594)		 ::lime::utils::AssetLibrary library = ::lime::utils::Assets_obj::libraries->get(name).StaticCast<  ::lime::utils::AssetLibrary >();
HXLINE( 596)		if (hx::IsNotNull( library )) {
HXLINE( 598)			 ::lime::utils::AssetCache _hx_tmp = ::lime::utils::Assets_obj::cache;
HXDLIN( 598)			_hx_tmp->clear((name + HX_(":",3a,00,00,00)));
HXLINE( 599)			library->onChange->remove(::lime::utils::Assets_obj::library_onChange_dyn());
HXLINE( 600)			library->unload();
            		}
HXLINE( 604)		::lime::utils::Assets_obj::libraries->remove(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,unloadLibrary,(void))

::String Assets_obj::_hx___libraryNotFound(::String name){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_611___libraryNotFound)
HXLINE( 613)		bool _hx_tmp;
HXDLIN( 613)		if (hx::IsNotNull( name )) {
HXLINE( 613)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 613)			_hx_tmp = true;
            		}
HXDLIN( 613)		if (_hx_tmp) {
HXLINE( 615)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 619)		bool _hx_tmp1;
HXDLIN( 619)		bool _hx_tmp2;
HXDLIN( 619)		if (hx::IsNotNull( ::lime::app::Application_obj::current )) {
HXLINE( 619)			_hx_tmp2 = hx::IsNotNull( ::lime::app::Application_obj::current->_hx___preloader );
            		}
            		else {
HXLINE( 619)			_hx_tmp2 = false;
            		}
HXDLIN( 619)		if (_hx_tmp2) {
HXLINE( 619)			_hx_tmp1 = !(::lime::app::Application_obj::current->_hx___preloader->complete);
            		}
            		else {
HXLINE( 619)			_hx_tmp1 = false;
            		}
HXDLIN( 619)		if (_hx_tmp1) {
HXLINE( 621)			return ((HX_("There is no asset library named \"",a1,83,5f,51) + name) + HX_("\", or it is not yet preloaded",db,ac,d4,2f));
            		}
            		else {
HXLINE( 625)			return ((HX_("There is no asset library named \"",a1,83,5f,51) + name) + HX_("\"",22,00,00,00));
            		}
HXLINE( 619)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,_hx___libraryNotFound,return )

void Assets_obj::library_onChange(){
            	HX_STACKFRAME(&_hx_pos_df5754140b017d9f_639_library_onChange)
HXLINE( 641)		::lime::utils::Assets_obj::cache->clear(null());
HXLINE( 642)		::lime::utils::Assets_obj::onChange->dispatch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,library_onChange,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = ( cache ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { outValue = ( onChange ); return true; }
		if (HX_FIELD_EQ(inName,"getAsset") ) { outValue = getAsset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFont") ) { outValue = loadFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { outValue = ( libraries ); return true; }
		if (HX_FIELD_EQ(inName,"loadAsset") ) { outValue = loadAsset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadImage") ) { outValue = loadImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasLibrary") ) { outValue = hasLibrary_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"libraryPaths") ) { outValue = ( libraryPaths ); return true; }
		if (HX_FIELD_EQ(inName,"isValidAudio") ) { outValue = isValidAudio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidImage") ) { outValue = isValidImage_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unloadLibrary") ) { outValue = unloadLibrary_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAudioBuffer") ) { outValue = getAudioBuffer_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultRootPath") ) { outValue = ( defaultRootPath ); return true; }
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { outValue = loadAudioBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerLibrary") ) { outValue = registerLibrary_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"library_onChange") ) { outValue = library_onChange_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__libraryNotFound") ) { outValue = _hx___libraryNotFound_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast<  ::lime::utils::AssetCache >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=ioValue.Cast<  ::lime::app::_Event_Void_Void >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { libraries=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"libraryPaths") ) { libraryPaths=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultRootPath") ) { defaultRootPath=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::utils::AssetCache*/ ,(void *) &Assets_obj::cache,HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*::lime::app::_Event_Void_Void*/ ,(void *) &Assets_obj::onChange,HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97")},
	{hx::fsString,(void *) &Assets_obj::defaultRootPath,HX_HCSTRING("defaultRootPath","\xc8","\x76","\x96","\x0a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Assets_obj::libraries,HX_HCSTRING("libraries","\x19","\x50","\xf8","\x18")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Assets_obj::libraryPaths,HX_HCSTRING("libraryPaths","\x33","\x26","\x5e","\x06")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_MARK_MEMBER_NAME(Assets_obj::defaultRootPath,"defaultRootPath");
	HX_MARK_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_MARK_MEMBER_NAME(Assets_obj::libraryPaths,"libraryPaths");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_VISIT_MEMBER_NAME(Assets_obj::defaultRootPath,"defaultRootPath");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraryPaths,"libraryPaths");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97"),
	HX_HCSTRING("defaultRootPath","\xc8","\x76","\x96","\x0a"),
	HX_HCSTRING("libraries","\x19","\x50","\xf8","\x18"),
	HX_HCSTRING("libraryPaths","\x33","\x26","\x5e","\x06"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getAsset","\x7a","\x79","\x10","\x86"),
	HX_HCSTRING("getAudioBuffer","\x80","\x41","\xe3","\x26"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getLibrary","\x05","\xad","\xd1","\x8e"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("hasLibrary","\xc1","\x0e","\x24","\xca"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("isValidAudio","\xc4","\x0a","\xdf","\x47"),
	HX_HCSTRING("isValidImage","\x49","\xb1","\xc7","\xdd"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadAsset","\xea","\xb5","\x70","\x41"),
	HX_HCSTRING("loadAudioBuffer","\xf0","\x71","\x7c","\xe3"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadImage","\x55","\x6b","\xa0","\xd8"),
	HX_HCSTRING("loadLibrary","\x75","\xe5","\x0d","\x10"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("registerLibrary","\xd8","\x8a","\x84","\xf2"),
	HX_HCSTRING("unloadLibrary","\xbc","\x5b","\x48","\x31"),
	HX_HCSTRING("__libraryNotFound","\x2a","\xdb","\x69","\xc9"),
	HX_HCSTRING("library_onChange","\xf3","\x20","\x14","\xc8"),
	::String(null())
};

void Assets_obj::__register()
{
	hx::Object *dummy = new Assets_obj;
	Assets_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.utils.Assets","\x39","\x6e","\x7e","\xb0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_47_boot)
HXDLIN(  47)		cache =  ::lime::utils::AssetCache_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_48_boot)
HXDLIN(  48)		onChange =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_51_boot)
HXDLIN(  51)		libraries =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_df5754140b017d9f_52_boot)
HXDLIN(  52)		libraryPaths =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace lime
} // end namespace utils
