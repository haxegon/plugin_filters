// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_lime_text_unifill_CodePointIter
#include <lime/text/unifill/CodePointIter.h>
#endif
#ifndef INCLUDED_lime_text_unifill__Utf8_Utf8_Impl_
#include <lime/text/unifill/_Utf8/Utf8_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_473079a63c41ab74_3_new,"lime.text.unifill.CodePointIter","new",0x07684a6a,"lime.text.unifill.CodePointIter.new","lime/text/unifill/CodePointIter.hx",3,0x2d77bea7)
HX_LOCAL_STACK_FRAME(_hx_pos_473079a63c41ab74_16_hasNext,"lime.text.unifill.CodePointIter","hasNext",0xde21ec77,"lime.text.unifill.CodePointIter.hasNext","lime/text/unifill/CodePointIter.hx",16,0x2d77bea7)
HX_LOCAL_STACK_FRAME(_hx_pos_473079a63c41ab74_20_next,"lime.text.unifill.CodePointIter","next",0x73d8d3a9,"lime.text.unifill.CodePointIter.next","lime/text/unifill/CodePointIter.hx",20,0x2d77bea7)
namespace lime{
namespace text{
namespace unifill{

void CodePointIter_obj::__construct(::String s){
            	HX_STACKFRAME(&_hx_pos_473079a63c41ab74_3_new)
HXLINE(  19)		this->i = (int)0;
HXLINE(  10)		this->string = s;
HXLINE(  11)		this->index = (int)0;
HXLINE(  12)		this->endIndex = s.length;
            	}

Dynamic CodePointIter_obj::__CreateEmpty() { return new CodePointIter_obj; }

void *CodePointIter_obj::_hx_vtable = 0;

Dynamic CodePointIter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CodePointIter_obj > _hx_result = new CodePointIter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CodePointIter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x149eee72;
}

bool CodePointIter_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_473079a63c41ab74_16_hasNext)
HXDLIN(  16)		return (this->index < this->endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CodePointIter_obj,hasNext,return )

int CodePointIter_obj::next(){
            	HX_STACKFRAME(&_hx_pos_473079a63c41ab74_20_next)
HXLINE(  21)		this->i = this->index;
HXLINE(  22)		 ::lime::text::unifill::CodePointIter _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  22)		int _hx_tmp1 = _hx_tmp->index;
HXDLIN(  22)		::String this1 = this->string;
HXDLIN(  22)		::String this2 = this1;
HXDLIN(  22)		int c = this2.cca(this->index);
HXDLIN(  22)		int _hx_tmp2;
HXDLIN(  22)		if ((c < (int)192)) {
HXLINE(  22)			_hx_tmp2 = (int)1;
            		}
            		else {
HXLINE(  22)			if ((c < (int)224)) {
HXLINE(  22)				_hx_tmp2 = (int)2;
            			}
            			else {
HXLINE(  22)				if ((c < (int)240)) {
HXLINE(  22)					_hx_tmp2 = (int)3;
            				}
            				else {
HXLINE(  22)					if ((c < (int)248)) {
HXLINE(  22)						_hx_tmp2 = (int)4;
            					}
            					else {
HXLINE(  22)						_hx_tmp2 = (int)1;
            					}
            				}
            			}
            		}
HXDLIN(  22)		_hx_tmp->index = (_hx_tmp1 + _hx_tmp2);
HXLINE(  23)		::String this3 = this->string;
HXDLIN(  23)		::String this4 = this3;
HXDLIN(  23)		return ::lime::text::unifill::_Utf8::Utf8_Impl__obj::codePointAt(this4,this->i);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CodePointIter_obj,next,return )


hx::ObjectPtr< CodePointIter_obj > CodePointIter_obj::__new(::String s) {
	hx::ObjectPtr< CodePointIter_obj > __this = new CodePointIter_obj();
	__this->__construct(s);
	return __this;
}

hx::ObjectPtr< CodePointIter_obj > CodePointIter_obj::__alloc(hx::Ctx *_hx_ctx,::String s) {
	CodePointIter_obj *__this = (CodePointIter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CodePointIter_obj), true, "lime.text.unifill.CodePointIter"));
	*(void **)__this = CodePointIter_obj::_hx_vtable;
	__this->__construct(s);
	return __this;
}

CodePointIter_obj::CodePointIter_obj()
{
}

void CodePointIter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CodePointIter);
	HX_MARK_MEMBER_NAME(string,"string");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(endIndex,"endIndex");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_END_CLASS();
}

void CodePointIter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(string,"string");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(endIndex,"endIndex");
	HX_VISIT_MEMBER_NAME(i,"i");
}

hx::Val CodePointIter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"string") ) { return hx::Val( string ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"endIndex") ) { return hx::Val( endIndex ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CodePointIter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"string") ) { string=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"endIndex") ) { endIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CodePointIter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("string","\xd1","\x28","\x30","\x11"));
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("endIndex","\x37","\x2d","\x12","\xbc"));
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CodePointIter_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(CodePointIter_obj,string),HX_HCSTRING("string","\xd1","\x28","\x30","\x11")},
	{hx::fsInt,(int)offsetof(CodePointIter_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsInt,(int)offsetof(CodePointIter_obj,endIndex),HX_HCSTRING("endIndex","\x37","\x2d","\x12","\xbc")},
	{hx::fsInt,(int)offsetof(CodePointIter_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CodePointIter_obj_sStaticStorageInfo = 0;
#endif

static ::String CodePointIter_obj_sMemberFields[] = {
	HX_HCSTRING("string","\xd1","\x28","\x30","\x11"),
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("endIndex","\x37","\x2d","\x12","\xbc"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	::String(null()) };

static void CodePointIter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CodePointIter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CodePointIter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CodePointIter_obj::__mClass,"__mClass");
};

#endif

hx::Class CodePointIter_obj::__mClass;

void CodePointIter_obj::__register()
{
	hx::Object *dummy = new CodePointIter_obj;
	CodePointIter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text.unifill.CodePointIter","\x78","\x8d","\xcc","\xfa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CodePointIter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CodePointIter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CodePointIter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CodePointIter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CodePointIter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CodePointIter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
} // end namespace unifill
