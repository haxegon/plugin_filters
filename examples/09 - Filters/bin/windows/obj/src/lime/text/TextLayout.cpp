// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphPosition
#include <lime/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text_TextLayout
#include <lime/text/TextLayout.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8c74d3457815e486_39_new,"lime.text.TextLayout","new",0xa8c39291,"lime.text.TextLayout.new","lime/text/TextLayout.hx",39,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_57___position,"lime.text.TextLayout","__position",0x6ec769b8,"lime.text.TextLayout.__position","lime/text/TextLayout.hx",57,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_118_get_positions,"lime.text.TextLayout","get_positions",0xf2be90f2,"lime.text.TextLayout.get_positions","lime/text/TextLayout.hx",118,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_134_get_direction,"lime.text.TextLayout","get_direction",0x32acff87,"lime.text.TextLayout.get_direction","lime/text/TextLayout.hx",134,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_139_set_direction,"lime.text.TextLayout","set_direction",0x77b2e193,"lime.text.TextLayout.set_direction","lime/text/TextLayout.hx",139,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_156_set_font,"lime.text.TextLayout","set_font",0xaa861efb,"lime.text.TextLayout.set_font","lime/text/TextLayout.hx",156,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_167_get_glyphs,"lime.text.TextLayout","get_glyphs",0x9f74beff,"lime.text.TextLayout.get_glyphs","lime/text/TextLayout.hx",167,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_184_get_language,"lime.text.TextLayout","get_language",0xbdf42410,"lime.text.TextLayout.get_language","lime/text/TextLayout.hx",184,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_189_set_language,"lime.text.TextLayout","set_language",0xd2ed4784,"lime.text.TextLayout.set_language","lime/text/TextLayout.hx",189,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_208_get_script,"lime.text.TextLayout","get_script",0x387c13c3,"lime.text.TextLayout.get_script","lime/text/TextLayout.hx",208,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_213_set_script,"lime.text.TextLayout","set_script",0x3bf9b237,"lime.text.TextLayout.set_script","lime/text/TextLayout.hx",213,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_230_set_size,"lime.text.TextLayout","set_size",0xb31961ed,"lime.text.TextLayout.set_size","lime/text/TextLayout.hx",230,0x8df0119f)
HX_LOCAL_STACK_FRAME(_hx_pos_8c74d3457815e486_241_set_text,"lime.text.TextLayout","set_text",0xb3bf8dd9,"lime.text.TextLayout.set_text","lime/text/TextLayout.hx",241,0x8df0119f)
namespace lime{
namespace text{

void TextLayout_obj::__construct(::String __o_text, ::lime::text::Font font,hx::Null< int >  __o_size,hx::Null< int >  __o_direction,::String __o_script,::String __o_language){
::String text = __o_text.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
int size = __o_size.Default(12);
int direction = __o_direction.Default(4);
::String script = __o_script.Default(HX_HCSTRING("Zyyy","\x7f","\x6e","\xd9","\x3b"));
::String language = __o_language.Default(HX_HCSTRING("en","\x69","\x58","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_39_new)
HXLINE(  41)		this->set_text(text);
HXLINE(  42)		this->set_font(font);
HXLINE(  43)		this->set_size(size);
HXLINE(  44)		this->_hx___direction = direction;
HXLINE(  45)		this->_hx___script = script;
HXLINE(  46)		this->_hx___language = language;
HXLINE(  48)		this->positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  49)		this->_hx___dirty = true;
HXLINE(  52)		this->_hx___handle = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_text_layout_create(this->_hx___direction,this->_hx___script,this->_hx___language)) );
            	}

Dynamic TextLayout_obj::__CreateEmpty() { return new TextLayout_obj; }

void *TextLayout_obj::_hx_vtable = 0;

Dynamic TextLayout_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextLayout_obj > _hx_result = new TextLayout_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool TextLayout_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20e72559;
}

void TextLayout_obj::_hx___position(){
            	HX_GC_STACKFRAME(&_hx_pos_8c74d3457815e486_57___position)
HXLINE(  59)		this->positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  63)		bool _hx_tmp;
HXDLIN(  63)		bool _hx_tmp1;
HXDLIN(  63)		bool _hx_tmp2;
HXDLIN(  63)		bool _hx_tmp3;
HXDLIN(  63)		if (hx::IsNotNull( this->_hx___handle )) {
HXLINE(  63)			_hx_tmp3 = hx::IsNotNull( this->text );
            		}
            		else {
HXLINE(  63)			_hx_tmp3 = false;
            		}
HXDLIN(  63)		if (_hx_tmp3) {
HXLINE(  63)			_hx_tmp2 = (this->text != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  63)			_hx_tmp2 = false;
            		}
HXDLIN(  63)		if (_hx_tmp2) {
HXLINE(  63)			_hx_tmp1 = hx::IsNotNull( this->font );
            		}
            		else {
HXLINE(  63)			_hx_tmp1 = false;
            		}
HXDLIN(  63)		if (_hx_tmp1) {
HXLINE(  63)			_hx_tmp = hx::IsNotNull( this->font->src );
            		}
            		else {
HXLINE(  63)			_hx_tmp = false;
            		}
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  65)			if (hx::IsNull( this->_hx___buffer )) {
HXLINE(  67)				this->_hx___buffer = ::haxe::io::Bytes_obj::alloc((this->text.length * (int)5));
            			}
HXLINE(  72)			 ::Dynamic data = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_text_layout_position(hx::DynamicPtr(this->_hx___handle),hx::DynamicPtr(this->font->src),this->size,this->text,hx::DynamicPtr(this->_hx___buffer))) );
HXLINE(  73)			int position = (int)0;
HXLINE(  75)			if ((this->_hx___buffer->length > (int)4)) {
HXLINE(  77)				 ::haxe::io::Bytes _this = this->_hx___buffer;
HXDLIN(  77)				int _this1 = _this->b->__get(position);
HXDLIN(  77)				::Array< unsigned char > _this2 = _this->b;
HXDLIN(  77)				int count = ((int)_this1 | (int)((int)_this2->__get((position + (int)1)) << (int)(int)8));
HXDLIN(  77)				::Array< unsigned char > _this3 = _this->b;
HXDLIN(  77)				int count1 = ((int)count | (int)((int)_this3->__get((position + (int)2)) << (int)(int)16));
HXDLIN(  77)				::Array< unsigned char > _this4 = _this->b;
HXDLIN(  77)				int count2 = ((int)count1 | (int)((int)_this4->__get((position + (int)3)) << (int)(int)24));
HXDLIN(  77)				position = (position + (int)4);
HXLINE(  78)				int codepoint;
HXDLIN(  78)				int index;
HXDLIN(  78)				Float advanceX;
HXDLIN(  78)				Float advanceY;
HXDLIN(  78)				Float offsetX;
HXDLIN(  78)				Float offsetY;
HXLINE(  79)				int lastIndex = (int)-1;
HXLINE(  81)				{
HXLINE(  81)					int _g1 = (int)0;
HXDLIN(  81)					int _g = count2;
HXDLIN(  81)					while((_g1 < _g)){
HXLINE(  81)						_g1 = (_g1 + (int)1);
HXDLIN(  81)						int i = (_g1 - (int)1);
HXLINE(  83)						 ::haxe::io::Bytes _this5 = this->_hx___buffer;
HXDLIN(  83)						int _this6 = _this5->b->__get(position);
HXDLIN(  83)						::Array< unsigned char > _this7 = _this5->b;
HXDLIN(  83)						int codepoint1 = ((int)_this6 | (int)((int)_this7->__get((position + (int)1)) << (int)(int)8));
HXDLIN(  83)						::Array< unsigned char > _this8 = _this5->b;
HXDLIN(  83)						int codepoint2 = ((int)codepoint1 | (int)((int)_this8->__get((position + (int)2)) << (int)(int)16));
HXDLIN(  83)						::Array< unsigned char > _this9 = _this5->b;
HXDLIN(  83)						codepoint = ((int)codepoint2 | (int)((int)_this9->__get((position + (int)3)) << (int)(int)24));
HXDLIN(  83)						position = (position + (int)4);
HXLINE(  84)						 ::haxe::io::Bytes _this10 = this->_hx___buffer;
HXDLIN(  84)						int _this11 = _this10->b->__get(position);
HXDLIN(  84)						::Array< unsigned char > _this12 = _this10->b;
HXDLIN(  84)						int index1 = ((int)_this11 | (int)((int)_this12->__get((position + (int)1)) << (int)(int)8));
HXDLIN(  84)						::Array< unsigned char > _this13 = _this10->b;
HXDLIN(  84)						int index2 = ((int)index1 | (int)((int)_this13->__get((position + (int)2)) << (int)(int)16));
HXDLIN(  84)						::Array< unsigned char > _this14 = _this10->b;
HXDLIN(  84)						index = ((int)index2 | (int)((int)_this14->__get((position + (int)3)) << (int)(int)24));
HXDLIN(  84)						position = (position + (int)4);
HXLINE(  85)						 ::haxe::io::Bytes _this15 = this->_hx___buffer;
HXDLIN(  85)						bool advanceX1;
HXDLIN(  85)						if ((position >= (int)0)) {
HXLINE(  85)							advanceX1 = ((position + (int)4) > _this15->length);
            						}
            						else {
HXLINE(  85)							advanceX1 = true;
            						}
HXDLIN(  85)						if (advanceX1) {
HXLINE(  85)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  85)						advanceX = ::__hxcpp_memory_get_float(_this15->b,position);
HXDLIN(  85)						position = (position + (int)4);
HXLINE(  86)						 ::haxe::io::Bytes _this16 = this->_hx___buffer;
HXDLIN(  86)						bool advanceY1;
HXDLIN(  86)						if ((position >= (int)0)) {
HXLINE(  86)							advanceY1 = ((position + (int)4) > _this16->length);
            						}
            						else {
HXLINE(  86)							advanceY1 = true;
            						}
HXDLIN(  86)						if (advanceY1) {
HXLINE(  86)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  86)						advanceY = ::__hxcpp_memory_get_float(_this16->b,position);
HXDLIN(  86)						position = (position + (int)4);
HXLINE(  87)						 ::haxe::io::Bytes _this17 = this->_hx___buffer;
HXDLIN(  87)						bool offsetX1;
HXDLIN(  87)						if ((position >= (int)0)) {
HXLINE(  87)							offsetX1 = ((position + (int)4) > _this17->length);
            						}
            						else {
HXLINE(  87)							offsetX1 = true;
            						}
HXDLIN(  87)						if (offsetX1) {
HXLINE(  87)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  87)						offsetX = ::__hxcpp_memory_get_float(_this17->b,position);
HXDLIN(  87)						position = (position + (int)4);
HXLINE(  88)						 ::haxe::io::Bytes _this18 = this->_hx___buffer;
HXDLIN(  88)						bool offsetY1;
HXDLIN(  88)						if ((position >= (int)0)) {
HXLINE(  88)							offsetY1 = ((position + (int)4) > _this18->length);
            						}
            						else {
HXLINE(  88)							offsetY1 = true;
            						}
HXDLIN(  88)						if (offsetY1) {
HXLINE(  88)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  88)						offsetY = ::__hxcpp_memory_get_float(_this18->b,position);
HXDLIN(  88)						position = (position + (int)4);
HXLINE(  90)						{
HXLINE(  90)							int _g3 = (lastIndex + (int)1);
HXDLIN(  90)							int _g2 = index;
HXDLIN(  90)							while((_g3 < _g2)){
HXLINE(  90)								_g3 = (_g3 + (int)1);
HXDLIN(  90)								int j = (_g3 - (int)1);
HXLINE(  94)								::Array< ::Dynamic> _hx_tmp4 = this->get_positions();
HXDLIN(  94)								 ::lime::math::Vector2 _hx_tmp5 =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXDLIN(  94)								_hx_tmp4->push( ::lime::text::GlyphPosition_obj::__alloc( HX_CTX ,(int)0,_hx_tmp5, ::lime::math::Vector2_obj::__alloc( HX_CTX ,(int)0,(int)0)));
            							}
            						}
HXLINE(  98)						::Array< ::Dynamic> _hx_tmp6 = this->get_positions();
HXDLIN(  98)						 ::lime::math::Vector2 _hx_tmp7 =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,advanceX,advanceY);
HXDLIN(  98)						_hx_tmp6->push( ::lime::text::GlyphPosition_obj::__alloc( HX_CTX ,codepoint,_hx_tmp7, ::lime::math::Vector2_obj::__alloc( HX_CTX ,offsetX,offsetY)));
HXLINE(  99)						lastIndex = index;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,_hx___position,(void))

::Array< ::Dynamic> TextLayout_obj::get_positions(){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_118_get_positions)
HXLINE( 120)		if (this->_hx___dirty) {
HXLINE( 122)			this->_hx___dirty = false;
HXLINE( 123)			this->_hx___position();
            		}
HXLINE( 127)		return this->positions;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_positions,return )

int TextLayout_obj::get_direction(){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_134_get_direction)
HXDLIN( 134)		return this->_hx___direction;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_direction,return )

int TextLayout_obj::set_direction(int value){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_139_set_direction)
HXLINE( 141)		if ((value == this->_hx___direction)) {
HXLINE( 141)			return value;
            		}
HXLINE( 143)		this->_hx___direction = value;
HXLINE( 146)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_text_layout_set_direction(hx::DynamicPtr(this->_hx___handle),value);
HXLINE( 149)		this->_hx___dirty = true;
HXLINE( 151)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_direction,return )

 ::lime::text::Font TextLayout_obj::set_font( ::lime::text::Font value){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_156_set_font)
HXLINE( 158)		if (hx::IsEq( value,this->font )) {
HXLINE( 158)			return value;
            		}
HXLINE( 160)		this->font = value;
HXLINE( 161)		this->_hx___dirty = true;
HXLINE( 162)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_font,return )

::Array< int > TextLayout_obj::get_glyphs(){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_167_get_glyphs)
HXLINE( 169)		::Array< int > glyphs = ::Array_obj< int >::__new(0);
HXLINE( 171)		{
HXLINE( 171)			int _g = (int)0;
HXDLIN( 171)			::Array< ::Dynamic> _g1 = this->get_positions();
HXDLIN( 171)			while((_g < _g1->length)){
HXLINE( 171)				 ::lime::text::GlyphPosition position = _g1->__get(_g).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 171)				_g = (_g + (int)1);
HXLINE( 173)				glyphs->push(position->glyph);
            			}
            		}
HXLINE( 177)		return glyphs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_glyphs,return )

::String TextLayout_obj::get_language(){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_184_get_language)
HXDLIN( 184)		return this->_hx___language;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_language,return )

::String TextLayout_obj::set_language(::String value){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_189_set_language)
HXLINE( 191)		if ((value == this->_hx___language)) {
HXLINE( 191)			return value;
            		}
HXLINE( 193)		this->_hx___language = value;
HXLINE( 196)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_text_layout_set_language(hx::DynamicPtr(this->_hx___handle),value);
HXLINE( 199)		this->_hx___dirty = true;
HXLINE( 201)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_language,return )

::String TextLayout_obj::get_script(){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_208_get_script)
HXDLIN( 208)		return this->_hx___script;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextLayout_obj,get_script,return )

::String TextLayout_obj::set_script(::String value){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_213_set_script)
HXLINE( 215)		if ((value == this->_hx___script)) {
HXLINE( 215)			return value;
            		}
HXLINE( 217)		this->_hx___script = value;
HXLINE( 220)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_text_layout_set_script(hx::DynamicPtr(this->_hx___handle),value);
HXLINE( 223)		this->_hx___dirty = true;
HXLINE( 225)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_script,return )

int TextLayout_obj::set_size(int value){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_230_set_size)
HXLINE( 232)		if ((value == this->size)) {
HXLINE( 232)			return value;
            		}
HXLINE( 234)		this->size = value;
HXLINE( 235)		this->_hx___dirty = true;
HXLINE( 236)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_size,return )

::String TextLayout_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_8c74d3457815e486_241_set_text)
HXLINE( 243)		if ((value == this->text)) {
HXLINE( 243)			return value;
            		}
HXLINE( 245)		this->text = value;
HXLINE( 246)		this->_hx___dirty = true;
HXLINE( 247)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextLayout_obj,set_text,return )


hx::ObjectPtr< TextLayout_obj > TextLayout_obj::__new(::String __o_text, ::lime::text::Font font,hx::Null< int >  __o_size,hx::Null< int >  __o_direction,::String __o_script,::String __o_language) {
	hx::ObjectPtr< TextLayout_obj > __this = new TextLayout_obj();
	__this->__construct(__o_text,font,__o_size,__o_direction,__o_script,__o_language);
	return __this;
}

hx::ObjectPtr< TextLayout_obj > TextLayout_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_text, ::lime::text::Font font,hx::Null< int >  __o_size,hx::Null< int >  __o_direction,::String __o_script,::String __o_language) {
	TextLayout_obj *__this = (TextLayout_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextLayout_obj), true, "lime.text.TextLayout"));
	*(void **)__this = TextLayout_obj::_hx_vtable;
	__this->__construct(__o_text,font,__o_size,__o_direction,__o_script,__o_language);
	return __this;
}

TextLayout_obj::TextLayout_obj()
{
}

void TextLayout_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextLayout);
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(glyphs,"glyphs");
	HX_MARK_MEMBER_NAME(positions,"positions");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___direction,"__direction");
	HX_MARK_MEMBER_NAME(_hx___handle,"__handle");
	HX_MARK_MEMBER_NAME(_hx___language,"__language");
	HX_MARK_MEMBER_NAME(_hx___script,"__script");
	HX_MARK_END_CLASS();
}

void TextLayout_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(glyphs,"glyphs");
	HX_VISIT_MEMBER_NAME(positions,"positions");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___direction,"__direction");
	HX_VISIT_MEMBER_NAME(_hx___handle,"__handle");
	HX_VISIT_MEMBER_NAME(_hx___language,"__language");
	HX_VISIT_MEMBER_NAME(_hx___script,"__script");
}

hx::Val TextLayout_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"glyphs") ) { return hx::Val( inCallProp == hx::paccAlways ? get_glyphs() : glyphs ); }
		if (HX_FIELD_EQ(inName,"script") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_script() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_language() ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"__handle") ) { return hx::Val( _hx___handle ); }
		if (HX_FIELD_EQ(inName,"__script") ) { return hx::Val( _hx___script ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_direction() ); }
		if (HX_FIELD_EQ(inName,"positions") ) { return hx::Val( inCallProp == hx::paccAlways ? get_positions() : positions ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__language") ) { return hx::Val( _hx___language ); }
		if (HX_FIELD_EQ(inName,"__position") ) { return hx::Val( _hx___position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_glyphs") ) { return hx::Val( get_glyphs_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_script") ) { return hx::Val( get_script_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_script") ) { return hx::Val( set_script_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__direction") ) { return hx::Val( _hx___direction ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_language") ) { return hx::Val( get_language_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_language") ) { return hx::Val( set_language_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_positions") ) { return hx::Val( get_positions_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_direction") ) { return hx::Val( get_direction_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_direction") ) { return hx::Val( set_direction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextLayout_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_font(inValue.Cast<  ::lime::text::Font >()) );font=inValue.Cast<  ::lime::text::Font >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast< int >()) );size=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"glyphs") ) { glyphs=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"script") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_script(inValue.Cast< ::String >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_language(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__handle") ) { _hx___handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__script") ) { _hx___script=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_direction(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"positions") ) { positions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__language") ) { _hx___language=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__direction") ) { _hx___direction=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextLayout_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("direction","\x3f","\x62","\x40","\x10"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae"));
	outFields->push(HX_HCSTRING("language","\x58","\x80","\x11","\x7a"));
	outFields->push(HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0"));
	outFields->push(HX_HCSTRING("script","\x0b","\x4e","\x60","\x47"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__direction","\x1f","\xab","\x6c","\x3e"));
	outFields->push(HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60"));
	outFields->push(HX_HCSTRING("__language","\x78","\xf3","\x49","\x1d"));
	outFields->push(HX_HCSTRING("__script","\x2b","\xb9","\x8f","\xef"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextLayout_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::text::Font*/ ,(int)offsetof(TextLayout_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(TextLayout_obj,glyphs),HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TextLayout_obj,positions),HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0")},
	{hx::fsInt,(int)offsetof(TextLayout_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsString,(int)offsetof(TextLayout_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsBool,(int)offsetof(TextLayout_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(TextLayout_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsInt,(int)offsetof(TextLayout_obj,_hx___direction),HX_HCSTRING("__direction","\x1f","\xab","\x6c","\x3e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextLayout_obj,_hx___handle),HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60")},
	{hx::fsString,(int)offsetof(TextLayout_obj,_hx___language),HX_HCSTRING("__language","\x78","\xf3","\x49","\x1d")},
	{hx::fsString,(int)offsetof(TextLayout_obj,_hx___script),HX_HCSTRING("__script","\x2b","\xb9","\x8f","\xef")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String TextLayout_obj_sMemberFields[] = {
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("glyphs","\x47","\xf9","\x58","\xae"),
	HX_HCSTRING("positions","\xaa","\xf3","\x51","\xd0"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__direction","\x1f","\xab","\x6c","\x3e"),
	HX_HCSTRING("__handle","\xc8","\xee","\x2c","\x60"),
	HX_HCSTRING("__language","\x78","\xf3","\x49","\x1d"),
	HX_HCSTRING("__script","\x2b","\xb9","\x8f","\xef"),
	HX_HCSTRING("__position","\xc9","\x13","\x33","\x6e"),
	HX_HCSTRING("get_positions","\x81","\xc7","\xb5","\x91"),
	HX_HCSTRING("get_direction","\x16","\x36","\xa4","\xd1"),
	HX_HCSTRING("set_direction","\x22","\x18","\xaa","\x16"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("get_glyphs","\x10","\x69","\xe0","\x9e"),
	HX_HCSTRING("get_language","\x61","\x34","\x2b","\x2f"),
	HX_HCSTRING("set_language","\xd5","\x57","\x24","\x44"),
	HX_HCSTRING("get_script","\xd4","\xbd","\xe7","\x37"),
	HX_HCSTRING("set_script","\x48","\x5c","\x65","\x3b"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void TextLayout_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextLayout_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextLayout_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextLayout_obj::__mClass,"__mClass");
};

#endif

hx::Class TextLayout_obj::__mClass;

void TextLayout_obj::__register()
{
	hx::Object *dummy = new TextLayout_obj;
	TextLayout_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text.TextLayout","\x1f","\xf6","\xe8","\x09");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextLayout_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextLayout_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextLayout_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextLayout_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextLayout_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
