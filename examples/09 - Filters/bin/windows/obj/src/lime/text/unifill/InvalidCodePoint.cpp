// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_lime_text_unifill_Exception
#include <lime/text/unifill/Exception.h>
#endif
#ifndef INCLUDED_lime_text_unifill_InvalidCodePoint
#include <lime/text/unifill/InvalidCodePoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fba5c367fe37cebd_13_new,"lime.text.unifill.InvalidCodePoint","new",0x3a1e6ba1,"lime.text.unifill.InvalidCodePoint.new","lime/text/unifill/Exception.hx",13,0xf9ad4373)
HX_LOCAL_STACK_FRAME(_hx_pos_fba5c367fe37cebd_18_toString,"lime.text.unifill.InvalidCodePoint","toString",0x9084c9cb,"lime.text.unifill.InvalidCodePoint.toString","lime/text/unifill/Exception.hx",18,0xf9ad4373)
namespace lime{
namespace text{
namespace unifill{

void InvalidCodePoint_obj::__construct(int code){
            	HX_STACKFRAME(&_hx_pos_fba5c367fe37cebd_13_new)
HXLINE(  14)		super::__construct();
HXLINE(  15)		this->code = code;
            	}

Dynamic InvalidCodePoint_obj::__CreateEmpty() { return new InvalidCodePoint_obj; }

void *InvalidCodePoint_obj::_hx_vtable = 0;

Dynamic InvalidCodePoint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InvalidCodePoint_obj > _hx_result = new InvalidCodePoint_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InvalidCodePoint_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4ee379de) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4ee379de;
	} else {
		return inClassId==(int)0x5bd2f43d;
	}
}

::String InvalidCodePoint_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_fba5c367fe37cebd_18_toString)
HXDLIN(  18)		return ((HX_("InvalidCodePoint(code: ",af,16,52,d2) + this->code) + HX_(")",29,00,00,00));
            	}



InvalidCodePoint_obj::InvalidCodePoint_obj()
{
}

hx::Val InvalidCodePoint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InvalidCodePoint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InvalidCodePoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo InvalidCodePoint_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(InvalidCodePoint_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InvalidCodePoint_obj_sStaticStorageInfo = 0;
#endif

static ::String InvalidCodePoint_obj_sMemberFields[] = {
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void InvalidCodePoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InvalidCodePoint_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InvalidCodePoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InvalidCodePoint_obj::__mClass,"__mClass");
};

#endif

hx::Class InvalidCodePoint_obj::__mClass;

void InvalidCodePoint_obj::__register()
{
	hx::Object *dummy = new InvalidCodePoint_obj;
	InvalidCodePoint_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text.unifill.InvalidCodePoint","\x2f","\x07","\x7e","\x26");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InvalidCodePoint_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InvalidCodePoint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InvalidCodePoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InvalidCodePoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InvalidCodePoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InvalidCodePoint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
} // end namespace unifill
