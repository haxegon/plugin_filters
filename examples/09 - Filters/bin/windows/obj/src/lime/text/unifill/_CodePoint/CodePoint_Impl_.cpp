// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_lime_text_unifill_Exception
#include <lime/text/unifill/Exception.h>
#endif
#ifndef INCLUDED_lime_text_unifill_InvalidCodePoint
#include <lime/text/unifill/InvalidCodePoint.h>
#endif
#ifndef INCLUDED_lime_text_unifill__CodePoint_CodePoint_Impl_
#include <lime/text/unifill/_CodePoint/CodePoint_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_6_fromInt,"lime.text.unifill._CodePoint.CodePoint_Impl_","fromInt",0x2c05e9d3,"lime.text.unifill._CodePoint.CodePoint_Impl_.fromInt","lime/text/unifill/CodePoint.hx",6,0x28fe385f)
HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_15_cons,"lime.text.unifill._CodePoint.CodePoint_Impl_","cons",0x6d7c6503,"lime.text.unifill._CodePoint.CodePoint_Impl_.cons","lime/text/unifill/CodePoint.hx",15,0x28fe385f)
HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_19_snoc,"lime.text.unifill._CodePoint.CodePoint_Impl_","snoc",0x780f0d81,"lime.text.unifill._CodePoint.CodePoint_Impl_.snoc","lime/text/unifill/CodePoint.hx",19,0x28fe385f)
HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_23_addInt,"lime.text.unifill._CodePoint.CodePoint_Impl_","addInt",0xe84730e0,"lime.text.unifill._CodePoint.CodePoint_Impl_.addInt","lime/text/unifill/CodePoint.hx",23,0x28fe385f)
HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_27_sub,"lime.text.unifill._CodePoint.CodePoint_Impl_","sub",0xa14186ae,"lime.text.unifill._CodePoint.CodePoint_Impl_.sub","lime/text/unifill/CodePoint.hx",27,0x28fe385f)
HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_31_subInt,"lime.text.unifill._CodePoint.CodePoint_Impl_","subInt",0xe3311ee1,"lime.text.unifill._CodePoint.CodePoint_Impl_.subInt","lime/text/unifill/CodePoint.hx",31,0x28fe385f)
HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_40__new,"lime.text.unifill._CodePoint.CodePoint_Impl_","_new",0x6ad6c073,"lime.text.unifill._CodePoint.CodePoint_Impl_._new","lime/text/unifill/CodePoint.hx",40,0x28fe385f)
HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_46_toString,"lime.text.unifill._CodePoint.CodePoint_Impl_","toString",0xee0e6cbe,"lime.text.unifill._CodePoint.CodePoint_Impl_.toString","lime/text/unifill/CodePoint.hx",46,0x28fe385f)
HX_LOCAL_STACK_FRAME(_hx_pos_8340bc94989a30f7_50_toInt,"lime.text.unifill._CodePoint.CodePoint_Impl_","toInt",0x290fc2e2,"lime.text.unifill._CodePoint.CodePoint_Impl_.toInt","lime/text/unifill/CodePoint.hx",50,0x28fe385f)
namespace lime{
namespace text{
namespace unifill{
namespace _CodePoint{

void CodePoint_Impl__obj::__construct() { }

Dynamic CodePoint_Impl__obj::__CreateEmpty() { return new CodePoint_Impl__obj; }

void *CodePoint_Impl__obj::_hx_vtable = 0;

Dynamic CodePoint_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CodePoint_Impl__obj > _hx_result = new CodePoint_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CodePoint_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00caaf1e;
}

int CodePoint_Impl__obj::fromInt(int code){
            	HX_GC_STACKFRAME(&_hx_pos_8340bc94989a30f7_6_fromInt)
HXLINE(   7)		bool _hx_tmp;
HXDLIN(   7)		bool _hx_tmp1;
HXDLIN(   7)		bool _hx_tmp2;
HXDLIN(   7)		if (((int)0 <= code)) {
HXLINE(   7)			_hx_tmp2 = (code <= (int)1114111);
            		}
            		else {
HXLINE(   7)			_hx_tmp2 = false;
            		}
HXDLIN(   7)		if (_hx_tmp2) {
HXLINE(   7)			bool _hx_tmp3;
HXDLIN(   7)			if (((int)55296 <= code)) {
HXLINE(   7)				_hx_tmp3 = (code <= (int)56319);
            			}
            			else {
HXLINE(   7)				_hx_tmp3 = false;
            			}
HXDLIN(   7)			_hx_tmp1 = !(_hx_tmp3);
            		}
            		else {
HXLINE(   7)			_hx_tmp1 = false;
            		}
HXDLIN(   7)		if (_hx_tmp1) {
HXLINE(   7)			bool _hx_tmp4;
HXDLIN(   7)			if (((int)56320 <= code)) {
HXLINE(   7)				_hx_tmp4 = (code <= (int)57343);
            			}
            			else {
HXLINE(   7)				_hx_tmp4 = false;
            			}
HXDLIN(   7)			_hx_tmp = !(_hx_tmp4);
            		}
            		else {
HXLINE(   7)			_hx_tmp = false;
            		}
HXDLIN(   7)		if (!(_hx_tmp)) {
HXLINE(   8)			HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,code));
            		}
HXLINE(  10)		int this1 = code;
HXDLIN(  10)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CodePoint_Impl__obj,fromInt,return )

::String CodePoint_Impl__obj::cons(int a,::String b){
            	HX_GC_STACKFRAME(&_hx_pos_8340bc94989a30f7_15_cons)
HXDLIN(  15)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN(  15)		if ((a <= (int)127)) {
HXDLIN(  15)			buf->b->push(a);
            		}
            		else {
HXDLIN(  15)			if ((a <= (int)2047)) {
HXDLIN(  15)				::Array< unsigned char > buf1 = buf->b;
HXDLIN(  15)				buf1->push(((int)(int)192 | (int)((int)a >> (int)(int)6)));
HXDLIN(  15)				::Array< unsigned char > buf2 = buf->b;
HXDLIN(  15)				buf2->push(((int)(int)128 | (int)((int)a & (int)(int)63)));
            			}
            			else {
HXDLIN(  15)				if ((a <= (int)65535)) {
HXDLIN(  15)					::Array< unsigned char > buf3 = buf->b;
HXDLIN(  15)					buf3->push(((int)(int)224 | (int)((int)a >> (int)(int)12)));
HXDLIN(  15)					::Array< unsigned char > buf4 = buf->b;
HXDLIN(  15)					buf4->push(((int)(int)128 | (int)((int)((int)a >> (int)(int)6) & (int)(int)63)));
HXDLIN(  15)					::Array< unsigned char > buf5 = buf->b;
HXDLIN(  15)					buf5->push(((int)(int)128 | (int)((int)a & (int)(int)63)));
            				}
            				else {
HXDLIN(  15)					if ((a <= (int)1114111)) {
HXDLIN(  15)						::Array< unsigned char > buf6 = buf->b;
HXDLIN(  15)						buf6->push(((int)(int)240 | (int)((int)a >> (int)(int)18)));
HXDLIN(  15)						::Array< unsigned char > buf7 = buf->b;
HXDLIN(  15)						buf7->push(((int)(int)128 | (int)((int)((int)a >> (int)(int)12) & (int)(int)63)));
HXDLIN(  15)						::Array< unsigned char > buf8 = buf->b;
HXDLIN(  15)						buf8->push(((int)(int)128 | (int)((int)((int)a >> (int)(int)6) & (int)(int)63)));
HXDLIN(  15)						::Array< unsigned char > buf9 = buf->b;
HXDLIN(  15)						buf9->push(((int)(int)128 | (int)((int)a & (int)(int)63)));
            					}
            					else {
HXDLIN(  15)						HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,a));
            					}
            				}
            			}
            		}
HXDLIN(  15)		::String this1 = buf->getBytes()->toString();
HXDLIN(  15)		::String this2 = this1;
HXDLIN(  15)		return (this2 + b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CodePoint_Impl__obj,cons,return )

::String CodePoint_Impl__obj::snoc(::String a,int b){
            	HX_GC_STACKFRAME(&_hx_pos_8340bc94989a30f7_19_snoc)
HXDLIN(  19)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN(  19)		if ((b <= (int)127)) {
HXDLIN(  19)			buf->b->push(b);
            		}
            		else {
HXDLIN(  19)			if ((b <= (int)2047)) {
HXDLIN(  19)				::Array< unsigned char > buf1 = buf->b;
HXDLIN(  19)				buf1->push(((int)(int)192 | (int)((int)b >> (int)(int)6)));
HXDLIN(  19)				::Array< unsigned char > buf2 = buf->b;
HXDLIN(  19)				buf2->push(((int)(int)128 | (int)((int)b & (int)(int)63)));
            			}
            			else {
HXDLIN(  19)				if ((b <= (int)65535)) {
HXDLIN(  19)					::Array< unsigned char > buf3 = buf->b;
HXDLIN(  19)					buf3->push(((int)(int)224 | (int)((int)b >> (int)(int)12)));
HXDLIN(  19)					::Array< unsigned char > buf4 = buf->b;
HXDLIN(  19)					buf4->push(((int)(int)128 | (int)((int)((int)b >> (int)(int)6) & (int)(int)63)));
HXDLIN(  19)					::Array< unsigned char > buf5 = buf->b;
HXDLIN(  19)					buf5->push(((int)(int)128 | (int)((int)b & (int)(int)63)));
            				}
            				else {
HXDLIN(  19)					if ((b <= (int)1114111)) {
HXDLIN(  19)						::Array< unsigned char > buf6 = buf->b;
HXDLIN(  19)						buf6->push(((int)(int)240 | (int)((int)b >> (int)(int)18)));
HXDLIN(  19)						::Array< unsigned char > buf7 = buf->b;
HXDLIN(  19)						buf7->push(((int)(int)128 | (int)((int)((int)b >> (int)(int)12) & (int)(int)63)));
HXDLIN(  19)						::Array< unsigned char > buf8 = buf->b;
HXDLIN(  19)						buf8->push(((int)(int)128 | (int)((int)((int)b >> (int)(int)6) & (int)(int)63)));
HXDLIN(  19)						::Array< unsigned char > buf9 = buf->b;
HXDLIN(  19)						buf9->push(((int)(int)128 | (int)((int)b & (int)(int)63)));
            					}
            					else {
HXDLIN(  19)						HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,b));
            					}
            				}
            			}
            		}
HXDLIN(  19)		::String this1 = buf->getBytes()->toString();
HXDLIN(  19)		::String this2 = this1;
HXDLIN(  19)		return (a + this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CodePoint_Impl__obj,snoc,return )

int CodePoint_Impl__obj::addInt(int a,int b){
            	HX_GC_STACKFRAME(&_hx_pos_8340bc94989a30f7_23_addInt)
HXDLIN(  23)		int code = (a + b);
HXDLIN(  23)		bool _hx_tmp;
HXDLIN(  23)		bool _hx_tmp1;
HXDLIN(  23)		bool _hx_tmp2;
HXDLIN(  23)		if (((int)0 <= code)) {
HXDLIN(  23)			_hx_tmp2 = (code <= (int)1114111);
            		}
            		else {
HXDLIN(  23)			_hx_tmp2 = false;
            		}
HXDLIN(  23)		if (_hx_tmp2) {
HXDLIN(  23)			bool _hx_tmp3;
HXDLIN(  23)			if (((int)55296 <= code)) {
HXDLIN(  23)				_hx_tmp3 = (code <= (int)56319);
            			}
            			else {
HXDLIN(  23)				_hx_tmp3 = false;
            			}
HXDLIN(  23)			_hx_tmp1 = !(_hx_tmp3);
            		}
            		else {
HXDLIN(  23)			_hx_tmp1 = false;
            		}
HXDLIN(  23)		if (_hx_tmp1) {
HXDLIN(  23)			bool _hx_tmp4;
HXDLIN(  23)			if (((int)56320 <= code)) {
HXDLIN(  23)				_hx_tmp4 = (code <= (int)57343);
            			}
            			else {
HXDLIN(  23)				_hx_tmp4 = false;
            			}
HXDLIN(  23)			_hx_tmp = !(_hx_tmp4);
            		}
            		else {
HXDLIN(  23)			_hx_tmp = false;
            		}
HXDLIN(  23)		if (!(_hx_tmp)) {
HXDLIN(  23)			HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,code));
            		}
HXDLIN(  23)		int this1 = code;
HXDLIN(  23)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CodePoint_Impl__obj,addInt,return )

int CodePoint_Impl__obj::sub(int a,int b){
            	HX_STACKFRAME(&_hx_pos_8340bc94989a30f7_27_sub)
HXDLIN(  27)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CodePoint_Impl__obj,sub,return )

int CodePoint_Impl__obj::subInt(int a,int b){
            	HX_GC_STACKFRAME(&_hx_pos_8340bc94989a30f7_31_subInt)
HXDLIN(  31)		int code = (a - b);
HXDLIN(  31)		bool _hx_tmp;
HXDLIN(  31)		bool _hx_tmp1;
HXDLIN(  31)		bool _hx_tmp2;
HXDLIN(  31)		if (((int)0 <= code)) {
HXDLIN(  31)			_hx_tmp2 = (code <= (int)1114111);
            		}
            		else {
HXDLIN(  31)			_hx_tmp2 = false;
            		}
HXDLIN(  31)		if (_hx_tmp2) {
HXDLIN(  31)			bool _hx_tmp3;
HXDLIN(  31)			if (((int)55296 <= code)) {
HXDLIN(  31)				_hx_tmp3 = (code <= (int)56319);
            			}
            			else {
HXDLIN(  31)				_hx_tmp3 = false;
            			}
HXDLIN(  31)			_hx_tmp1 = !(_hx_tmp3);
            		}
            		else {
HXDLIN(  31)			_hx_tmp1 = false;
            		}
HXDLIN(  31)		if (_hx_tmp1) {
HXDLIN(  31)			bool _hx_tmp4;
HXDLIN(  31)			if (((int)56320 <= code)) {
HXDLIN(  31)				_hx_tmp4 = (code <= (int)57343);
            			}
            			else {
HXDLIN(  31)				_hx_tmp4 = false;
            			}
HXDLIN(  31)			_hx_tmp = !(_hx_tmp4);
            		}
            		else {
HXDLIN(  31)			_hx_tmp = false;
            		}
HXDLIN(  31)		if (!(_hx_tmp)) {
HXDLIN(  31)			HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,code));
            		}
HXDLIN(  31)		int this1 = code;
HXDLIN(  31)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CodePoint_Impl__obj,subInt,return )

int CodePoint_Impl__obj::_new(int code){
            	HX_STACKFRAME(&_hx_pos_8340bc94989a30f7_40__new)
HXDLIN(  40)		int this1 = code;
HXDLIN(  40)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CodePoint_Impl__obj,_new,return )

::String CodePoint_Impl__obj::toString(int this1){
            	HX_GC_STACKFRAME(&_hx_pos_8340bc94989a30f7_46_toString)
HXDLIN(  46)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN(  46)		if ((this1 <= (int)127)) {
HXDLIN(  46)			buf->b->push(this1);
            		}
            		else {
HXDLIN(  46)			if ((this1 <= (int)2047)) {
HXDLIN(  46)				::Array< unsigned char > buf1 = buf->b;
HXDLIN(  46)				buf1->push(((int)(int)192 | (int)((int)this1 >> (int)(int)6)));
HXDLIN(  46)				::Array< unsigned char > buf2 = buf->b;
HXDLIN(  46)				buf2->push(((int)(int)128 | (int)((int)this1 & (int)(int)63)));
            			}
            			else {
HXDLIN(  46)				if ((this1 <= (int)65535)) {
HXDLIN(  46)					::Array< unsigned char > buf3 = buf->b;
HXDLIN(  46)					buf3->push(((int)(int)224 | (int)((int)this1 >> (int)(int)12)));
HXDLIN(  46)					::Array< unsigned char > buf4 = buf->b;
HXDLIN(  46)					buf4->push(((int)(int)128 | (int)((int)((int)this1 >> (int)(int)6) & (int)(int)63)));
HXDLIN(  46)					::Array< unsigned char > buf5 = buf->b;
HXDLIN(  46)					buf5->push(((int)(int)128 | (int)((int)this1 & (int)(int)63)));
            				}
            				else {
HXDLIN(  46)					if ((this1 <= (int)1114111)) {
HXDLIN(  46)						::Array< unsigned char > buf6 = buf->b;
HXDLIN(  46)						buf6->push(((int)(int)240 | (int)((int)this1 >> (int)(int)18)));
HXDLIN(  46)						::Array< unsigned char > buf7 = buf->b;
HXDLIN(  46)						buf7->push(((int)(int)128 | (int)((int)((int)this1 >> (int)(int)12) & (int)(int)63)));
HXDLIN(  46)						::Array< unsigned char > buf8 = buf->b;
HXDLIN(  46)						buf8->push(((int)(int)128 | (int)((int)((int)this1 >> (int)(int)6) & (int)(int)63)));
HXDLIN(  46)						::Array< unsigned char > buf9 = buf->b;
HXDLIN(  46)						buf9->push(((int)(int)128 | (int)((int)this1 & (int)(int)63)));
            					}
            					else {
HXDLIN(  46)						HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,this1));
            					}
            				}
            			}
            		}
HXDLIN(  46)		::String this2 = buf->getBytes()->toString();
HXDLIN(  46)		::String this3 = this2;
HXDLIN(  46)		return this3;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CodePoint_Impl__obj,toString,return )

int CodePoint_Impl__obj::toInt(int this1){
            	HX_STACKFRAME(&_hx_pos_8340bc94989a30f7_50_toInt)
HXDLIN(  50)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CodePoint_Impl__obj,toInt,return )


CodePoint_Impl__obj::CodePoint_Impl__obj()
{
}

bool CodePoint_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"sub") ) { outValue = sub_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"cons") ) { outValue = cons_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snoc") ) { outValue = snoc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"addInt") ) { outValue = addInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subInt") ) { outValue = subInt_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CodePoint_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CodePoint_Impl__obj_sStaticStorageInfo = 0;
#endif

static void CodePoint_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CodePoint_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CodePoint_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CodePoint_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class CodePoint_Impl__obj::__mClass;

static ::String CodePoint_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("fromInt","\xa5","\xdd","\xfa","\x57"),
	HX_HCSTRING("cons","\xf1","\xb9","\xc4","\x41"),
	HX_HCSTRING("snoc","\x6f","\x62","\x57","\x4c"),
	HX_HCSTRING("addInt","\x4e","\x1d","\x01","\x9f"),
	HX_HCSTRING("sub","\x80","\xa9","\x57","\x00"),
	HX_HCSTRING("subInt","\x4f","\x0b","\xeb","\x99"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	::String(null())
};

void CodePoint_Impl__obj::__register()
{
	hx::Object *dummy = new CodePoint_Impl__obj;
	CodePoint_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text.unifill._CodePoint.CodePoint_Impl_","\x9c","\x8e","\xa0","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CodePoint_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CodePoint_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CodePoint_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CodePoint_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CodePoint_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CodePoint_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CodePoint_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
} // end namespace unifill
} // end namespace _CodePoint
