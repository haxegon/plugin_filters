// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_5f5af744d9ff5693
#define INCLUDED_5f5af744d9ff5693
#include "cpp/Pointer.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_Utf8Ext
#include <lime/text/_UTF8String/Utf8Ext.h>
#endif
#ifndef INCLUDED_lime_text_unifill_Exception
#include <lime/text/unifill/Exception.h>
#endif
#ifndef INCLUDED_lime_text_unifill_InvalidCodePoint
#include <lime/text/unifill/InvalidCodePoint.h>
#endif
#ifndef INCLUDED_lime_text_unifill_Unifill
#include <lime/text/unifill/Unifill.h>
#endif
#ifndef INCLUDED_lime_text_unifill__Utf8_Utf8_Impl_
#include <lime/text/unifill/_Utf8/Utf8_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_26__new,"lime.text._UTF8String.UTF8String_Impl_","_new",0x0867e058,"lime.text._UTF8String.UTF8String_Impl_._new","lime/text/UTF8String.hx",26,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_41_charAt,"lime.text._UTF8String.UTF8String_Impl_","charAt",0xfcc03020,"lime.text._UTF8String.UTF8String_Impl_.charAt","lime/text/UTF8String.hx",41,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_55_charCodeAt,"lime.text._UTF8String.UTF8String_Impl_","charCodeAt",0x3386c52d,"lime.text._UTF8String.UTF8String_Impl_.charCodeAt","lime/text/UTF8String.hx",55,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_71_fromCharCode,"lime.text._UTF8String.UTF8String_Impl_","fromCharCode",0x914a54a4,"lime.text._UTF8String.UTF8String_Impl_.fromCharCode","lime/text/UTF8String.hx",71,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_82_fromCharCodes,"lime.text._UTF8String.UTF8String_Impl_","fromCharCodes",0x8fbfbb4f,"lime.text._UTF8String.UTF8String_Impl_.fromCharCodes","lime/text/UTF8String.hx",82,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_110_indexOf,"lime.text._UTF8String.UTF8String_Impl_","indexOf",0x3cd47232,"lime.text._UTF8String.UTF8String_Impl_.indexOf","lime/text/UTF8String.hx",110,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_128_lastIndexOf,"lime.text._UTF8String.UTF8String_Impl_","lastIndexOf",0x02db8efc,"lime.text._UTF8String.UTF8String_Impl_.lastIndexOf","lime/text/UTF8String.hx",128,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_155_split,"lime.text._UTF8String.UTF8String_Impl_","split",0xd7d7b803,"lime.text._UTF8String.UTF8String_Impl_.split","lime/text/UTF8String.hx",155,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_177_substr,"lime.text._UTF8String.UTF8String_Impl_","substr",0xdf55a5e8,"lime.text._UTF8String.UTF8String_Impl_.substr","lime/text/UTF8String.hx",177,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_197_substring,"lime.text._UTF8String.UTF8String_Impl_","substring",0x4da907fa,"lime.text._UTF8String.UTF8String_Impl_.substring","lime/text/UTF8String.hx",197,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_207_toLowerCase,"lime.text._UTF8String.UTF8String_Impl_","toLowerCase",0x25d4de3f,"lime.text._UTF8String.UTF8String_Impl_.toLowerCase","lime/text/UTF8String.hx",207,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_242_toString,"lime.text._UTF8String.UTF8String_Impl_","toString",0x6edde323,"lime.text._UTF8String.UTF8String_Impl_.toString","lime/text/UTF8String.hx",242,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_252_toUpperCase,"lime.text._UTF8String.UTF8String_Impl_","toUpperCase",0xa66dc220,"lime.text._UTF8String.UTF8String_Impl_.toUpperCase","lime/text/UTF8String.hx",252,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_282_equals,"lime.text._UTF8String.UTF8String_Impl_","equals",0x053da4f6,"lime.text._UTF8String.UTF8String_Impl_.equals","lime/text/UTF8String.hx",282,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_290_lt,"lime.text._UTF8String.UTF8String_Impl_","lt",0xf7edadbf,"lime.text._UTF8String.UTF8String_Impl_.lt","lime/text/UTF8String.hx",290,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_299_gt,"lime.text._UTF8String.UTF8String_Impl_","gt",0xf7eda964,"lime.text._UTF8String.UTF8String_Impl_.gt","lime/text/UTF8String.hx",299,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_308_lteq,"lime.text._UTF8String.UTF8String_Impl_","lteq",0x110433eb,"lime.text._UTF8String.UTF8String_Impl_.lteq","lime/text/UTF8String.hx",308,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_317_gteq,"lime.text._UTF8String.UTF8String_Impl_","gteq",0x0db622d0,"lime.text._UTF8String.UTF8String_Impl_.gteq","lime/text/UTF8String.hx",317,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_326_plus,"lime.text._UTF8String.UTF8String_Impl_","plus",0x13a30a51,"lime.text._UTF8String.UTF8String_Impl_.plus","lime/text/UTF8String.hx",326,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_342_fromDynamic,"lime.text._UTF8String.UTF8String_Impl_","fromDynamic",0x3bc6951e,"lime.text._UTF8String.UTF8String_Impl_.fromDynamic","lime/text/UTF8String.hx",342,0xa2cd54d4)
HX_LOCAL_STACK_FRAME(_hx_pos_980e6fae9dc7df30_356_get_length,"lime.text._UTF8String.UTF8String_Impl_","get_length",0x8dc0e2e6,"lime.text._UTF8String.UTF8String_Impl_.get_length","lime/text/UTF8String.hx",356,0xa2cd54d4)
namespace lime{
namespace text{
namespace _UTF8String{

void UTF8String_Impl__obj::__construct() { }

Dynamic UTF8String_Impl__obj::__CreateEmpty() { return new UTF8String_Impl__obj; }

void *UTF8String_Impl__obj::_hx_vtable = 0;

Dynamic UTF8String_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UTF8String_Impl__obj > _hx_result = new UTF8String_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool UTF8String_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x611dfa9d;
}

 ::haxe::ds::IntMap UTF8String_Impl__obj::lowercaseMap;

 ::haxe::ds::IntMap UTF8String_Impl__obj::uppercaseMap;

::String UTF8String_Impl__obj::_new(::String str){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_26__new)
HXDLIN(  26)		::String this1 = ::String(str);
HXDLIN(  26)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UTF8String_Impl__obj,_new,return )

::String UTF8String_Impl__obj::charAt(::String this1,int index){
            	HX_GC_STACKFRAME(&_hx_pos_980e6fae9dc7df30_41_charAt)
HXDLIN(  41)		int codePoint = ::haxe::Utf8_obj::charCodeAt(this1,index);
HXDLIN(  41)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN(  41)		if ((codePoint <= (int)127)) {
HXDLIN(  41)			buf->b->push(codePoint);
            		}
            		else {
HXDLIN(  41)			if ((codePoint <= (int)2047)) {
HXDLIN(  41)				::Array< unsigned char > buf1 = buf->b;
HXDLIN(  41)				buf1->push(((int)(int)192 | (int)((int)codePoint >> (int)(int)6)));
HXDLIN(  41)				::Array< unsigned char > buf2 = buf->b;
HXDLIN(  41)				buf2->push(((int)(int)128 | (int)((int)codePoint & (int)(int)63)));
            			}
            			else {
HXDLIN(  41)				if ((codePoint <= (int)65535)) {
HXDLIN(  41)					::Array< unsigned char > buf3 = buf->b;
HXDLIN(  41)					buf3->push(((int)(int)224 | (int)((int)codePoint >> (int)(int)12)));
HXDLIN(  41)					::Array< unsigned char > buf4 = buf->b;
HXDLIN(  41)					buf4->push(((int)(int)128 | (int)((int)((int)codePoint >> (int)(int)6) & (int)(int)63)));
HXDLIN(  41)					::Array< unsigned char > buf5 = buf->b;
HXDLIN(  41)					buf5->push(((int)(int)128 | (int)((int)codePoint & (int)(int)63)));
            				}
            				else {
HXDLIN(  41)					if ((codePoint <= (int)1114111)) {
HXDLIN(  41)						::Array< unsigned char > buf6 = buf->b;
HXDLIN(  41)						buf6->push(((int)(int)240 | (int)((int)codePoint >> (int)(int)18)));
HXDLIN(  41)						::Array< unsigned char > buf7 = buf->b;
HXDLIN(  41)						buf7->push(((int)(int)128 | (int)((int)((int)codePoint >> (int)(int)12) & (int)(int)63)));
HXDLIN(  41)						::Array< unsigned char > buf8 = buf->b;
HXDLIN(  41)						buf8->push(((int)(int)128 | (int)((int)((int)codePoint >> (int)(int)6) & (int)(int)63)));
HXDLIN(  41)						::Array< unsigned char > buf9 = buf->b;
HXDLIN(  41)						buf9->push(((int)(int)128 | (int)((int)codePoint & (int)(int)63)));
            					}
            					else {
HXDLIN(  41)						HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,codePoint));
            					}
            				}
            			}
            		}
HXDLIN(  41)		::String this2 = buf->getBytes()->toString();
HXDLIN(  41)		::String this3 = this2;
HXDLIN(  41)		return this3;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,charAt,return )

 ::Dynamic UTF8String_Impl__obj::charCodeAt(::String this1,int index){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_55_charCodeAt)
HXLINE(  57)		bool _hx_tmp;
HXDLIN(  57)		if ((index >= (int)0)) {
HXLINE(  57)			::String this2 = this1;
HXDLIN(  57)			::String this3 = this2;
HXDLIN(  57)			_hx_tmp = (index >= ::lime::text::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this3,(int)0,this1.length));
            		}
            		else {
HXLINE(  57)			_hx_tmp = true;
            		}
HXDLIN(  57)		if (_hx_tmp) {
HXLINE(  57)			return null();
            		}
HXLINE(  58)		return ::haxe::Utf8_obj::charCodeAt(this1,index);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,charCodeAt,return )

::String UTF8String_Impl__obj::fromCharCode(int code){
            	HX_GC_STACKFRAME(&_hx_pos_980e6fae9dc7df30_71_fromCharCode)
HXDLIN(  71)		bool _hx_tmp;
HXDLIN(  71)		bool _hx_tmp1;
HXDLIN(  71)		bool _hx_tmp2;
HXDLIN(  71)		if (((int)0 <= code)) {
HXDLIN(  71)			_hx_tmp2 = (code <= (int)1114111);
            		}
            		else {
HXDLIN(  71)			_hx_tmp2 = false;
            		}
HXDLIN(  71)		if (_hx_tmp2) {
HXDLIN(  71)			bool _hx_tmp3;
HXDLIN(  71)			if (((int)55296 <= code)) {
HXDLIN(  71)				_hx_tmp3 = (code <= (int)56319);
            			}
            			else {
HXDLIN(  71)				_hx_tmp3 = false;
            			}
HXDLIN(  71)			_hx_tmp1 = !(_hx_tmp3);
            		}
            		else {
HXDLIN(  71)			_hx_tmp1 = false;
            		}
HXDLIN(  71)		if (_hx_tmp1) {
HXDLIN(  71)			bool _hx_tmp4;
HXDLIN(  71)			if (((int)56320 <= code)) {
HXDLIN(  71)				_hx_tmp4 = (code <= (int)57343);
            			}
            			else {
HXDLIN(  71)				_hx_tmp4 = false;
            			}
HXDLIN(  71)			_hx_tmp = !(_hx_tmp4);
            		}
            		else {
HXDLIN(  71)			_hx_tmp = false;
            		}
HXDLIN(  71)		if (!(_hx_tmp)) {
HXDLIN(  71)			HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,code));
            		}
HXDLIN(  71)		int this1 = code;
HXDLIN(  71)		int this2 = this1;
HXDLIN(  71)		 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN(  71)		if ((this2 <= (int)127)) {
HXDLIN(  71)			buf->b->push(this2);
            		}
            		else {
HXDLIN(  71)			if ((this2 <= (int)2047)) {
HXDLIN(  71)				::Array< unsigned char > buf1 = buf->b;
HXDLIN(  71)				buf1->push(((int)(int)192 | (int)((int)this2 >> (int)(int)6)));
HXDLIN(  71)				::Array< unsigned char > buf2 = buf->b;
HXDLIN(  71)				buf2->push(((int)(int)128 | (int)((int)this2 & (int)(int)63)));
            			}
            			else {
HXDLIN(  71)				if ((this2 <= (int)65535)) {
HXDLIN(  71)					::Array< unsigned char > buf3 = buf->b;
HXDLIN(  71)					buf3->push(((int)(int)224 | (int)((int)this2 >> (int)(int)12)));
HXDLIN(  71)					::Array< unsigned char > buf4 = buf->b;
HXDLIN(  71)					buf4->push(((int)(int)128 | (int)((int)((int)this2 >> (int)(int)6) & (int)(int)63)));
HXDLIN(  71)					::Array< unsigned char > buf5 = buf->b;
HXDLIN(  71)					buf5->push(((int)(int)128 | (int)((int)this2 & (int)(int)63)));
            				}
            				else {
HXDLIN(  71)					if ((this2 <= (int)1114111)) {
HXDLIN(  71)						::Array< unsigned char > buf6 = buf->b;
HXDLIN(  71)						buf6->push(((int)(int)240 | (int)((int)this2 >> (int)(int)18)));
HXDLIN(  71)						::Array< unsigned char > buf7 = buf->b;
HXDLIN(  71)						buf7->push(((int)(int)128 | (int)((int)((int)this2 >> (int)(int)12) & (int)(int)63)));
HXDLIN(  71)						::Array< unsigned char > buf8 = buf->b;
HXDLIN(  71)						buf8->push(((int)(int)128 | (int)((int)((int)this2 >> (int)(int)6) & (int)(int)63)));
HXDLIN(  71)						::Array< unsigned char > buf9 = buf->b;
HXDLIN(  71)						buf9->push(((int)(int)128 | (int)((int)this2 & (int)(int)63)));
            					}
            					else {
HXDLIN(  71)						HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,this2));
            					}
            				}
            			}
            		}
HXDLIN(  71)		::String this3 = buf->getBytes()->toString();
HXDLIN(  71)		::String this4 = this3;
HXDLIN(  71)		return this4;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UTF8String_Impl__obj,fromCharCode,return )

::String UTF8String_Impl__obj::fromCharCodes(::Array< int > codes){
            	HX_GC_STACKFRAME(&_hx_pos_980e6fae9dc7df30_82_fromCharCodes)
HXLINE(  84)		::String s = HX_("",00,00,00,00);
HXLINE(  86)		{
HXLINE(  86)			int _g = (int)0;
HXDLIN(  86)			while((_g < codes->length)){
HXLINE(  86)				int code = codes->__get(_g);
HXDLIN(  86)				_g = (_g + (int)1);
HXLINE(  88)				bool s1;
HXDLIN(  88)				bool s2;
HXDLIN(  88)				bool s3;
HXDLIN(  88)				if (((int)0 <= code)) {
HXLINE(  88)					s3 = (code <= (int)1114111);
            				}
            				else {
HXLINE(  88)					s3 = false;
            				}
HXDLIN(  88)				if (s3) {
HXLINE(  88)					bool s4;
HXDLIN(  88)					if (((int)55296 <= code)) {
HXLINE(  88)						s4 = (code <= (int)56319);
            					}
            					else {
HXLINE(  88)						s4 = false;
            					}
HXDLIN(  88)					s2 = !(s4);
            				}
            				else {
HXLINE(  88)					s2 = false;
            				}
HXDLIN(  88)				if (s2) {
HXLINE(  88)					bool s5;
HXDLIN(  88)					if (((int)56320 <= code)) {
HXLINE(  88)						s5 = (code <= (int)57343);
            					}
            					else {
HXLINE(  88)						s5 = false;
            					}
HXDLIN(  88)					s1 = !(s5);
            				}
            				else {
HXLINE(  88)					s1 = false;
            				}
HXDLIN(  88)				if (!(s1)) {
HXLINE(  88)					HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,code));
            				}
HXDLIN(  88)				int this1 = code;
HXDLIN(  88)				int b = this1;
HXDLIN(  88)				 ::haxe::io::BytesBuffer buf =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXDLIN(  88)				if ((b <= (int)127)) {
HXLINE(  88)					buf->b->push(b);
            				}
            				else {
HXLINE(  88)					if ((b <= (int)2047)) {
HXLINE(  88)						::Array< unsigned char > buf1 = buf->b;
HXDLIN(  88)						buf1->push(((int)(int)192 | (int)((int)b >> (int)(int)6)));
HXDLIN(  88)						::Array< unsigned char > buf2 = buf->b;
HXDLIN(  88)						buf2->push(((int)(int)128 | (int)((int)b & (int)(int)63)));
            					}
            					else {
HXLINE(  88)						if ((b <= (int)65535)) {
HXLINE(  88)							::Array< unsigned char > buf3 = buf->b;
HXDLIN(  88)							buf3->push(((int)(int)224 | (int)((int)b >> (int)(int)12)));
HXDLIN(  88)							::Array< unsigned char > buf4 = buf->b;
HXDLIN(  88)							buf4->push(((int)(int)128 | (int)((int)((int)b >> (int)(int)6) & (int)(int)63)));
HXDLIN(  88)							::Array< unsigned char > buf5 = buf->b;
HXDLIN(  88)							buf5->push(((int)(int)128 | (int)((int)b & (int)(int)63)));
            						}
            						else {
HXLINE(  88)							if ((b <= (int)1114111)) {
HXLINE(  88)								::Array< unsigned char > buf6 = buf->b;
HXDLIN(  88)								buf6->push(((int)(int)240 | (int)((int)b >> (int)(int)18)));
HXDLIN(  88)								::Array< unsigned char > buf7 = buf->b;
HXDLIN(  88)								buf7->push(((int)(int)128 | (int)((int)((int)b >> (int)(int)12) & (int)(int)63)));
HXDLIN(  88)								::Array< unsigned char > buf8 = buf->b;
HXDLIN(  88)								buf8->push(((int)(int)128 | (int)((int)((int)b >> (int)(int)6) & (int)(int)63)));
HXDLIN(  88)								::Array< unsigned char > buf9 = buf->b;
HXDLIN(  88)								buf9->push(((int)(int)128 | (int)((int)b & (int)(int)63)));
            							}
            							else {
HXLINE(  88)								HX_STACK_DO_THROW( ::lime::text::unifill::InvalidCodePoint_obj::__alloc( HX_CTX ,b));
            							}
            						}
            					}
            				}
HXDLIN(  88)				::String this2 = buf->getBytes()->toString();
HXDLIN(  88)				::String this3 = this2;
HXDLIN(  88)				s = (s + this3);
            			}
            		}
HXLINE(  92)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UTF8String_Impl__obj,fromCharCodes,return )

int UTF8String_Impl__obj::indexOf(::String this1,::String str,hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_110_indexOf)
HXDLIN( 110)		::String this2 = this1;
HXDLIN( 110)		::String this3 = this2;
HXDLIN( 110)		::String this4 = this3;
HXDLIN( 110)		int index;
HXDLIN( 110)		if ((startIndex >= (int)0)) {
HXDLIN( 110)			int index1 = (int)0;
HXDLIN( 110)			int len = this4.length;
HXDLIN( 110)			int i = (int)0;
HXDLIN( 110)			while(true){
HXDLIN( 110)				bool index2;
HXDLIN( 110)				if ((i < startIndex)) {
HXDLIN( 110)					index2 = (index1 < len);
            				}
            				else {
HXDLIN( 110)					index2 = false;
            				}
HXDLIN( 110)				if (!(index2)) {
HXDLIN( 110)					goto _hx_goto_6;
            				}
HXDLIN( 110)				int c = this4.cca(index1);
HXDLIN( 110)				int index3;
HXDLIN( 110)				if ((c < (int)192)) {
HXDLIN( 110)					index3 = (int)1;
            				}
            				else {
HXDLIN( 110)					if ((c < (int)224)) {
HXDLIN( 110)						index3 = (int)2;
            					}
            					else {
HXDLIN( 110)						if ((c < (int)240)) {
HXDLIN( 110)							index3 = (int)3;
            						}
            						else {
HXDLIN( 110)							if ((c < (int)248)) {
HXDLIN( 110)								index3 = (int)4;
            							}
            							else {
HXDLIN( 110)								index3 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN( 110)				index1 = (index1 + index3);
HXDLIN( 110)				i = (i + (int)1);
            			}
            			_hx_goto_6:;
HXDLIN( 110)			index = index1;
            		}
            		else {
HXDLIN( 110)			int index4 = (int)0;
HXDLIN( 110)			int count = (int)0;
HXDLIN( 110)			while(true){
HXDLIN( 110)				bool index5;
HXDLIN( 110)				if ((count < -(startIndex))) {
HXDLIN( 110)					index5 = ((int)0 < index4);
            				}
            				else {
HXDLIN( 110)					index5 = false;
            				}
HXDLIN( 110)				if (!(index5)) {
HXDLIN( 110)					goto _hx_goto_7;
            				}
HXDLIN( 110)				::String this5 = this4;
HXDLIN( 110)				::String this6 = this5;
HXDLIN( 110)				int c1 = this6.cca((index4 - (int)1));
HXDLIN( 110)				int index6;
HXDLIN( 110)				bool index7;
HXDLIN( 110)				if ((c1 >= (int)128)) {
HXDLIN( 110)					index7 = (c1 >= (int)192);
            				}
            				else {
HXDLIN( 110)					index7 = true;
            				}
HXDLIN( 110)				if (index7) {
HXDLIN( 110)					index6 = (int)1;
            				}
            				else {
HXDLIN( 110)					::String this7 = this5;
HXDLIN( 110)					if ((((int)this7.cca((index4 - (int)2)) & (int)(int)224) == (int)192)) {
HXDLIN( 110)						index6 = (int)2;
            					}
            					else {
HXDLIN( 110)						::String this8 = this5;
HXDLIN( 110)						if ((((int)this8.cca((index4 - (int)3)) & (int)(int)240) == (int)224)) {
HXDLIN( 110)							index6 = (int)3;
            						}
            						else {
HXDLIN( 110)							::String this9 = this5;
HXDLIN( 110)							if ((((int)this9.cca((index4 - (int)4)) & (int)(int)248) == (int)240)) {
HXDLIN( 110)								index6 = (int)4;
            							}
            							else {
HXDLIN( 110)								index6 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN( 110)				index4 = (index4 - index6);
HXDLIN( 110)				count = (count + (int)1);
            			}
            			_hx_goto_7:;
HXDLIN( 110)			index = index4;
            		}
HXDLIN( 110)		int index8 = this1.indexOf(str,index);
HXDLIN( 110)		if ((index8 >= (int)0)) {
HXDLIN( 110)			::String this10 = this1;
HXDLIN( 110)			::String this11 = this10;
HXDLIN( 110)			return ::lime::text::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this11,(int)0,index8);
            		}
            		else {
HXDLIN( 110)			return (int)-1;
            		}
HXDLIN( 110)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UTF8String_Impl__obj,indexOf,return )

int UTF8String_Impl__obj::lastIndexOf(::String this1,::String str, ::Dynamic startIndex){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_128_lastIndexOf)
HXDLIN( 128)		 ::Dynamic startIndex1 = startIndex;
HXDLIN( 128)		if (hx::IsNull( startIndex1 )) {
HXDLIN( 128)			startIndex1 = (this1.length - (int)1);
            		}
HXDLIN( 128)		int codePointOffset = startIndex1;
HXDLIN( 128)		::String this2 = this1;
HXDLIN( 128)		::String this3 = this2;
HXDLIN( 128)		::String this4 = this3;
HXDLIN( 128)		int index;
HXDLIN( 128)		if ((codePointOffset >= (int)0)) {
HXDLIN( 128)			int index1 = (int)0;
HXDLIN( 128)			int len = this4.length;
HXDLIN( 128)			int i = (int)0;
HXDLIN( 128)			while(true){
HXDLIN( 128)				bool index2;
HXDLIN( 128)				if ((i < codePointOffset)) {
HXDLIN( 128)					index2 = (index1 < len);
            				}
            				else {
HXDLIN( 128)					index2 = false;
            				}
HXDLIN( 128)				if (!(index2)) {
HXDLIN( 128)					goto _hx_goto_9;
            				}
HXDLIN( 128)				int c = this4.cca(index1);
HXDLIN( 128)				int index3;
HXDLIN( 128)				if ((c < (int)192)) {
HXDLIN( 128)					index3 = (int)1;
            				}
            				else {
HXDLIN( 128)					if ((c < (int)224)) {
HXDLIN( 128)						index3 = (int)2;
            					}
            					else {
HXDLIN( 128)						if ((c < (int)240)) {
HXDLIN( 128)							index3 = (int)3;
            						}
            						else {
HXDLIN( 128)							if ((c < (int)248)) {
HXDLIN( 128)								index3 = (int)4;
            							}
            							else {
HXDLIN( 128)								index3 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN( 128)				index1 = (index1 + index3);
HXDLIN( 128)				i = (i + (int)1);
            			}
            			_hx_goto_9:;
HXDLIN( 128)			index = index1;
            		}
            		else {
HXDLIN( 128)			int index4 = (int)0;
HXDLIN( 128)			int count = (int)0;
HXDLIN( 128)			while(true){
HXDLIN( 128)				bool index5;
HXDLIN( 128)				if ((count < -(codePointOffset))) {
HXDLIN( 128)					index5 = ((int)0 < index4);
            				}
            				else {
HXDLIN( 128)					index5 = false;
            				}
HXDLIN( 128)				if (!(index5)) {
HXDLIN( 128)					goto _hx_goto_10;
            				}
HXDLIN( 128)				::String this5 = this4;
HXDLIN( 128)				::String this6 = this5;
HXDLIN( 128)				int c1 = this6.cca((index4 - (int)1));
HXDLIN( 128)				int index6;
HXDLIN( 128)				bool index7;
HXDLIN( 128)				if ((c1 >= (int)128)) {
HXDLIN( 128)					index7 = (c1 >= (int)192);
            				}
            				else {
HXDLIN( 128)					index7 = true;
            				}
HXDLIN( 128)				if (index7) {
HXDLIN( 128)					index6 = (int)1;
            				}
            				else {
HXDLIN( 128)					::String this7 = this5;
HXDLIN( 128)					if ((((int)this7.cca((index4 - (int)2)) & (int)(int)224) == (int)192)) {
HXDLIN( 128)						index6 = (int)2;
            					}
            					else {
HXDLIN( 128)						::String this8 = this5;
HXDLIN( 128)						if ((((int)this8.cca((index4 - (int)3)) & (int)(int)240) == (int)224)) {
HXDLIN( 128)							index6 = (int)3;
            						}
            						else {
HXDLIN( 128)							::String this9 = this5;
HXDLIN( 128)							if ((((int)this9.cca((index4 - (int)4)) & (int)(int)248) == (int)240)) {
HXDLIN( 128)								index6 = (int)4;
            							}
            							else {
HXDLIN( 128)								index6 = (int)1;
            							}
            						}
            					}
            				}
HXDLIN( 128)				index4 = (index4 - index6);
HXDLIN( 128)				count = (count + (int)1);
            			}
            			_hx_goto_10:;
HXDLIN( 128)			index = index4;
            		}
HXDLIN( 128)		int index8 = this1.lastIndexOf(str,index);
HXDLIN( 128)		if ((index8 >= (int)0)) {
HXDLIN( 128)			::String this10 = this1;
HXDLIN( 128)			::String this11 = this10;
HXDLIN( 128)			return ::lime::text::unifill::_Utf8::Utf8_Impl__obj::codePointCount(this11,(int)0,index8);
            		}
            		else {
HXDLIN( 128)			return (int)-1;
            		}
HXDLIN( 128)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UTF8String_Impl__obj,lastIndexOf,return )

::Array< ::String > UTF8String_Impl__obj::split(::String this1,::String delimiter){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_155_split)
HXDLIN( 155)		if ((delimiter.length == (int)0)) {
HXDLIN( 155)			::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 155)			{
HXDLIN( 155)				::String _g1_string;
HXDLIN( 155)				int _g1_index;
HXDLIN( 155)				int _g1_i;
HXDLIN( 155)				int _g1_endIndex;
HXDLIN( 155)				_g1_i = (int)0;
HXDLIN( 155)				_g1_string = this1;
HXDLIN( 155)				_g1_index = (int)0;
HXDLIN( 155)				_g1_endIndex = this1.length;
HXDLIN( 155)				while((_g1_index < _g1_endIndex)){
HXDLIN( 155)					_g1_i = _g1_index;
HXDLIN( 155)					::String this2 = _g1_string;
HXDLIN( 155)					::String this3 = this2;
HXDLIN( 155)					int c = this3.cca(_g1_index);
HXDLIN( 155)					int _g1_index1;
HXDLIN( 155)					if ((c < (int)192)) {
HXDLIN( 155)						_g1_index1 = (int)1;
            					}
            					else {
HXDLIN( 155)						if ((c < (int)224)) {
HXDLIN( 155)							_g1_index1 = (int)2;
            						}
            						else {
HXDLIN( 155)							if ((c < (int)240)) {
HXDLIN( 155)								_g1_index1 = (int)3;
            							}
            							else {
HXDLIN( 155)								if ((c < (int)248)) {
HXDLIN( 155)									_g1_index1 = (int)4;
            								}
            								else {
HXDLIN( 155)									_g1_index1 = (int)1;
            								}
            							}
            						}
            					}
HXDLIN( 155)					_g1_index = (_g1_index + _g1_index1);
HXDLIN( 155)					int i = _g1_i;
HXDLIN( 155)					::String this4 = this1;
HXDLIN( 155)					::String this5 = this4;
HXDLIN( 155)					::String this6 = this5;
HXDLIN( 155)					int c1 = this6.cca(i);
HXDLIN( 155)					 ::Dynamic len;
HXDLIN( 155)					if ((c1 < (int)192)) {
HXDLIN( 155)						len = (int)1;
            					}
            					else {
HXDLIN( 155)						if ((c1 < (int)224)) {
HXDLIN( 155)							len = (int)2;
            						}
            						else {
HXDLIN( 155)							if ((c1 < (int)240)) {
HXDLIN( 155)								len = (int)3;
            							}
            							else {
HXDLIN( 155)								if ((c1 < (int)248)) {
HXDLIN( 155)									len = (int)4;
            								}
            								else {
HXDLIN( 155)									len = (int)1;
            								}
            							}
            						}
            					}
HXDLIN( 155)					::String this7 = this6.substr(i,len);
HXDLIN( 155)					::String this8 = this7;
HXDLIN( 155)					_g->push(this8);
            				}
            			}
HXDLIN( 155)			return _g;
            		}
            		else {
HXDLIN( 155)			return this1.split(delimiter);
            		}
HXDLIN( 155)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,split,return )

::String UTF8String_Impl__obj::substr(::String this1,int pos, ::Dynamic len){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_177_substr)
HXDLIN( 177)		return ::haxe::Utf8_obj::sub(this1,pos,len);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UTF8String_Impl__obj,substr,return )

::String UTF8String_Impl__obj::substring(::String this1,int startIndex, ::Dynamic endIndex){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_197_substring)
HXDLIN( 197)		int si;
HXDLIN( 197)		if ((startIndex < (int)0)) {
HXDLIN( 197)			si = (int)0;
            		}
            		else {
HXDLIN( 197)			::String this2 = this1;
HXDLIN( 197)			::String this3 = this2;
HXDLIN( 197)			::String this4 = this3;
HXDLIN( 197)			if ((startIndex >= (int)0)) {
HXDLIN( 197)				int index = (int)0;
HXDLIN( 197)				int len = this4.length;
HXDLIN( 197)				int i = (int)0;
HXDLIN( 197)				while(true){
HXDLIN( 197)					bool si1;
HXDLIN( 197)					if ((i < startIndex)) {
HXDLIN( 197)						si1 = (index < len);
            					}
            					else {
HXDLIN( 197)						si1 = false;
            					}
HXDLIN( 197)					if (!(si1)) {
HXDLIN( 197)						goto _hx_goto_15;
            					}
HXDLIN( 197)					int c = this4.cca(index);
HXDLIN( 197)					int index1;
HXDLIN( 197)					if ((c < (int)192)) {
HXDLIN( 197)						index1 = (int)1;
            					}
            					else {
HXDLIN( 197)						if ((c < (int)224)) {
HXDLIN( 197)							index1 = (int)2;
            						}
            						else {
HXDLIN( 197)							if ((c < (int)240)) {
HXDLIN( 197)								index1 = (int)3;
            							}
            							else {
HXDLIN( 197)								if ((c < (int)248)) {
HXDLIN( 197)									index1 = (int)4;
            								}
            								else {
HXDLIN( 197)									index1 = (int)1;
            								}
            							}
            						}
            					}
HXDLIN( 197)					index = (index + index1);
HXDLIN( 197)					i = (i + (int)1);
            				}
            				_hx_goto_15:;
HXDLIN( 197)				si = index;
            			}
            			else {
HXDLIN( 197)				int index2 = (int)0;
HXDLIN( 197)				int count = (int)0;
HXDLIN( 197)				while(true){
HXDLIN( 197)					bool si2;
HXDLIN( 197)					if ((count < -(startIndex))) {
HXDLIN( 197)						si2 = ((int)0 < index2);
            					}
            					else {
HXDLIN( 197)						si2 = false;
            					}
HXDLIN( 197)					if (!(si2)) {
HXDLIN( 197)						goto _hx_goto_16;
            					}
HXDLIN( 197)					::String this5 = this4;
HXDLIN( 197)					::String this6 = this5;
HXDLIN( 197)					int c1 = this6.cca((index2 - (int)1));
HXDLIN( 197)					int index3;
HXDLIN( 197)					bool index4;
HXDLIN( 197)					if ((c1 >= (int)128)) {
HXDLIN( 197)						index4 = (c1 >= (int)192);
            					}
            					else {
HXDLIN( 197)						index4 = true;
            					}
HXDLIN( 197)					if (index4) {
HXDLIN( 197)						index3 = (int)1;
            					}
            					else {
HXDLIN( 197)						::String this7 = this5;
HXDLIN( 197)						if ((((int)this7.cca((index2 - (int)2)) & (int)(int)224) == (int)192)) {
HXDLIN( 197)							index3 = (int)2;
            						}
            						else {
HXDLIN( 197)							::String this8 = this5;
HXDLIN( 197)							if ((((int)this8.cca((index2 - (int)3)) & (int)(int)240) == (int)224)) {
HXDLIN( 197)								index3 = (int)3;
            							}
            							else {
HXDLIN( 197)								::String this9 = this5;
HXDLIN( 197)								if ((((int)this9.cca((index2 - (int)4)) & (int)(int)248) == (int)240)) {
HXDLIN( 197)									index3 = (int)4;
            								}
            								else {
HXDLIN( 197)									index3 = (int)1;
            								}
            							}
            						}
            					}
HXDLIN( 197)					index2 = (index2 - index3);
HXDLIN( 197)					count = (count + (int)1);
            				}
            				_hx_goto_16:;
HXDLIN( 197)				si = index2;
            			}
            		}
HXDLIN( 197)		int ei;
HXDLIN( 197)		if (hx::IsNull( endIndex )) {
HXDLIN( 197)			ei = this1.length;
            		}
            		else {
HXDLIN( 197)			if (hx::IsLess( endIndex,(int)0 )) {
HXDLIN( 197)				ei = (int)0;
            			}
            			else {
HXDLIN( 197)				int codePointOffset = endIndex;
HXDLIN( 197)				::String this10 = this1;
HXDLIN( 197)				::String this11 = this10;
HXDLIN( 197)				::String this12 = this11;
HXDLIN( 197)				if ((codePointOffset >= (int)0)) {
HXDLIN( 197)					int index5 = (int)0;
HXDLIN( 197)					int len1 = this12.length;
HXDLIN( 197)					int i1 = (int)0;
HXDLIN( 197)					while(true){
HXDLIN( 197)						bool ei1;
HXDLIN( 197)						if ((i1 < codePointOffset)) {
HXDLIN( 197)							ei1 = (index5 < len1);
            						}
            						else {
HXDLIN( 197)							ei1 = false;
            						}
HXDLIN( 197)						if (!(ei1)) {
HXDLIN( 197)							goto _hx_goto_17;
            						}
HXDLIN( 197)						int c2 = this12.cca(index5);
HXDLIN( 197)						int index6;
HXDLIN( 197)						if ((c2 < (int)192)) {
HXDLIN( 197)							index6 = (int)1;
            						}
            						else {
HXDLIN( 197)							if ((c2 < (int)224)) {
HXDLIN( 197)								index6 = (int)2;
            							}
            							else {
HXDLIN( 197)								if ((c2 < (int)240)) {
HXDLIN( 197)									index6 = (int)3;
            								}
            								else {
HXDLIN( 197)									if ((c2 < (int)248)) {
HXDLIN( 197)										index6 = (int)4;
            									}
            									else {
HXDLIN( 197)										index6 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN( 197)						index5 = (index5 + index6);
HXDLIN( 197)						i1 = (i1 + (int)1);
            					}
            					_hx_goto_17:;
HXDLIN( 197)					ei = index5;
            				}
            				else {
HXDLIN( 197)					int index7 = (int)0;
HXDLIN( 197)					int count1 = (int)0;
HXDLIN( 197)					while(true){
HXDLIN( 197)						bool ei2;
HXDLIN( 197)						if ((count1 < -(codePointOffset))) {
HXDLIN( 197)							ei2 = ((int)0 < index7);
            						}
            						else {
HXDLIN( 197)							ei2 = false;
            						}
HXDLIN( 197)						if (!(ei2)) {
HXDLIN( 197)							goto _hx_goto_18;
            						}
HXDLIN( 197)						::String this13 = this12;
HXDLIN( 197)						::String this14 = this13;
HXDLIN( 197)						int c11 = this14.cca((index7 - (int)1));
HXDLIN( 197)						int index8;
HXDLIN( 197)						bool index9;
HXDLIN( 197)						if ((c11 >= (int)128)) {
HXDLIN( 197)							index9 = (c11 >= (int)192);
            						}
            						else {
HXDLIN( 197)							index9 = true;
            						}
HXDLIN( 197)						if (index9) {
HXDLIN( 197)							index8 = (int)1;
            						}
            						else {
HXDLIN( 197)							::String this15 = this13;
HXDLIN( 197)							if ((((int)this15.cca((index7 - (int)2)) & (int)(int)224) == (int)192)) {
HXDLIN( 197)								index8 = (int)2;
            							}
            							else {
HXDLIN( 197)								::String this16 = this13;
HXDLIN( 197)								if ((((int)this16.cca((index7 - (int)3)) & (int)(int)240) == (int)224)) {
HXDLIN( 197)									index8 = (int)3;
            								}
            								else {
HXDLIN( 197)									::String this17 = this13;
HXDLIN( 197)									if ((((int)this17.cca((index7 - (int)4)) & (int)(int)248) == (int)240)) {
HXDLIN( 197)										index8 = (int)4;
            									}
            									else {
HXDLIN( 197)										index8 = (int)1;
            									}
            								}
            							}
            						}
HXDLIN( 197)						index7 = (index7 - index8);
HXDLIN( 197)						count1 = (count1 + (int)1);
            					}
            					_hx_goto_18:;
HXDLIN( 197)					ei = index7;
            				}
            			}
            		}
HXDLIN( 197)		return this1.substring(si,ei);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UTF8String_Impl__obj,substring,return )

::String UTF8String_Impl__obj::toLowerCase(::String this1){
            	HX_GC_STACKFRAME(&_hx_pos_980e6fae9dc7df30_207_toLowerCase)
HXLINE( 211)		if (hx::IsNull( ::lime::text::_UTF8String::UTF8String_Impl__obj::lowercaseMap )) {
HXLINE( 213)			::lime::text::_UTF8String::UTF8String_Impl__obj::lowercaseMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 214)			::lime::text::_UTF8String::Utf8Ext_obj::fillUpperToLowerMap(::lime::text::_UTF8String::UTF8String_Impl__obj::uppercaseMap);
            		}
HXLINE( 218)		 ::haxe::Utf8 r =  ::haxe::Utf8_obj::__alloc( HX_CTX ,null());
HXLINE( 220)		{
HXLINE( 220)			::cpp::Pointer< char > src = cpp::Pointer_obj::fromPointer(this1.__s);
HXDLIN( 220)			::cpp::Pointer< char > end = src->add(this1.length);
HXDLIN( 220)			while(true){
HXLINE( 220)				::cpp::Pointer< char > tmp = end;
HXDLIN( 220)				if (!(src->lt(tmp))) {
HXLINE( 220)					goto _hx_goto_20;
            				}
HXLINE( 222)				int v = _hx_utf8_decode_advance(src->ptr);
HXDLIN( 222)				int _hx_tmp;
HXDLIN( 222)				if (::lime::text::_UTF8String::UTF8String_Impl__obj::lowercaseMap->exists(v)) {
HXLINE( 222)					_hx_tmp = ( (int)(::lime::text::_UTF8String::UTF8String_Impl__obj::lowercaseMap->get(v)) );
            				}
            				else {
HXLINE( 222)					_hx_tmp = v;
            				}
HXDLIN( 222)				r->addChar(_hx_tmp);
            			}
            			_hx_goto_20:;
            		}
HXLINE( 226)		return r->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UTF8String_Impl__obj,toLowerCase,return )

::String UTF8String_Impl__obj::toString(::String this1){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_242_toString)
HXDLIN( 242)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UTF8String_Impl__obj,toString,return )

::String UTF8String_Impl__obj::toUpperCase(::String this1){
            	HX_GC_STACKFRAME(&_hx_pos_980e6fae9dc7df30_252_toUpperCase)
HXLINE( 256)		if (hx::IsNull( ::lime::text::_UTF8String::UTF8String_Impl__obj::uppercaseMap )) {
HXLINE( 258)			::lime::text::_UTF8String::UTF8String_Impl__obj::uppercaseMap =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 259)			::lime::text::_UTF8String::Utf8Ext_obj::fillLowerToUpperMap(::lime::text::_UTF8String::UTF8String_Impl__obj::uppercaseMap);
            		}
HXLINE( 263)		 ::haxe::Utf8 r =  ::haxe::Utf8_obj::__alloc( HX_CTX ,null());
HXLINE( 265)		{
HXLINE( 265)			::cpp::Pointer< char > src = cpp::Pointer_obj::fromPointer(this1.__s);
HXDLIN( 265)			::cpp::Pointer< char > end = src->add(this1.length);
HXDLIN( 265)			while(true){
HXLINE( 265)				::cpp::Pointer< char > tmp = end;
HXDLIN( 265)				if (!(src->lt(tmp))) {
HXLINE( 265)					goto _hx_goto_23;
            				}
HXLINE( 267)				int v = _hx_utf8_decode_advance(src->ptr);
HXDLIN( 267)				int _hx_tmp;
HXDLIN( 267)				if (::lime::text::_UTF8String::UTF8String_Impl__obj::uppercaseMap->exists(v)) {
HXLINE( 267)					_hx_tmp = ( (int)(::lime::text::_UTF8String::UTF8String_Impl__obj::uppercaseMap->get(v)) );
            				}
            				else {
HXLINE( 267)					_hx_tmp = v;
            				}
HXDLIN( 267)				r->addChar(_hx_tmp);
            			}
            			_hx_goto_23:;
            		}
HXLINE( 271)		return r->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UTF8String_Impl__obj,toUpperCase,return )

bool UTF8String_Impl__obj::equals(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_282_equals)
HXLINE( 284)		bool _hx_tmp;
HXDLIN( 284)		if (hx::IsNotNull( a )) {
HXLINE( 284)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE( 284)			_hx_tmp = true;
            		}
HXDLIN( 284)		if (_hx_tmp) {
HXLINE( 284)			return (a == b);
            		}
HXLINE( 285)		return (::lime::text::unifill::Unifill_obj::uCompare(a,b) == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,equals,return )

bool UTF8String_Impl__obj::lt(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_290_lt)
HXLINE( 292)		if (hx::IsNull( b )) {
HXLINE( 292)			return false;
            		}
HXLINE( 293)		if (hx::IsNull( a )) {
HXLINE( 293)			return true;
            		}
HXLINE( 294)		return (::lime::text::unifill::Unifill_obj::uCompare(a,b) == (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,lt,return )

bool UTF8String_Impl__obj::gt(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_299_gt)
HXLINE( 301)		if (hx::IsNull( a )) {
HXLINE( 301)			return false;
            		}
HXLINE( 302)		if (hx::IsNull( b )) {
HXLINE( 302)			return true;
            		}
HXLINE( 303)		return (::lime::text::unifill::Unifill_obj::uCompare(a,b) == (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,gt,return )

bool UTF8String_Impl__obj::lteq(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_308_lteq)
HXLINE( 310)		if (hx::IsNull( b )) {
HXLINE( 310)			return hx::IsNull( a );
            		}
HXLINE( 311)		if (hx::IsNull( a )) {
HXLINE( 311)			return true;
            		}
HXLINE( 312)		return (::lime::text::unifill::Unifill_obj::uCompare(a,b) != (int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,lteq,return )

bool UTF8String_Impl__obj::gteq(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_317_gteq)
HXLINE( 319)		if (hx::IsNull( a )) {
HXLINE( 319)			return hx::IsNull( b );
            		}
HXLINE( 320)		if (hx::IsNull( b )) {
HXLINE( 320)			return true;
            		}
HXLINE( 321)		return (::lime::text::unifill::Unifill_obj::uCompare(a,b) != (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,gteq,return )

::String UTF8String_Impl__obj::plus(::String a,::String b){
            	HX_GC_STACKFRAME(&_hx_pos_980e6fae9dc7df30_326_plus)
HXLINE( 328)		bool _hx_tmp;
HXDLIN( 328)		if (hx::IsNull( a )) {
HXLINE( 328)			_hx_tmp = hx::IsNull( b );
            		}
            		else {
HXLINE( 328)			_hx_tmp = false;
            		}
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 328)			return null();
            		}
HXLINE( 329)		if (hx::IsNull( a )) {
HXLINE( 329)			return b;
            		}
HXLINE( 330)		if (hx::IsNull( b )) {
HXLINE( 330)			return a;
            		}
HXLINE( 332)		 ::StringBuf sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 333)		{
HXLINE( 333)			::String x = ::lime::text::_UTF8String::UTF8String_Impl__obj::toString(a);
HXDLIN( 333)			if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 333)				sb->flush();
            			}
HXDLIN( 333)			if (hx::IsNull( sb->b )) {
HXLINE( 333)				sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE( 333)				::Array< ::String > sb1 = sb->b;
HXDLIN( 333)				sb1->push(::Std_obj::string(x));
            			}
            		}
HXLINE( 334)		{
HXLINE( 334)			::String x1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::toString(b);
HXDLIN( 334)			if (hx::IsNotNull( sb->charBuf )) {
HXLINE( 334)				sb->flush();
            			}
HXDLIN( 334)			if (hx::IsNull( sb->b )) {
HXLINE( 334)				sb->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 334)				::Array< ::String > sb2 = sb->b;
HXDLIN( 334)				sb2->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 335)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UTF8String_Impl__obj,plus,return )

::String UTF8String_Impl__obj::fromDynamic( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_342_fromDynamic)
HXDLIN( 342)		return ::Std_obj::string(value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UTF8String_Impl__obj,fromDynamic,return )

int UTF8String_Impl__obj::get_length(::String this1){
            	HX_STACKFRAME(&_hx_pos_980e6fae9dc7df30_356_get_length)
HXDLIN( 356)		if (hx::IsNull( this1 )) {
HXDLIN( 356)			return (int)0;
            		}
            		else {
HXDLIN( 356)			return ::haxe::Utf8_obj::length(this1);
            		}
HXDLIN( 356)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UTF8String_Impl__obj,get_length,return )


UTF8String_Impl__obj::UTF8String_Impl__obj()
{
}

bool UTF8String_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"lt") ) { outValue = lt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gt") ) { outValue = gt_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lteq") ) { outValue = lteq_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gteq") ) { outValue = gteq_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"plus") ) { outValue = plus_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"charAt") ) { outValue = charAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substr") ) { outValue = substr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indexOf") ) { outValue = indexOf_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"substring") ) { outValue = substring_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"charCodeAt") ) { outValue = charCodeAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { outValue = lastIndexOf_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerCase") ) { outValue = toLowerCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUpperCase") ) { outValue = toUpperCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromDynamic") ) { outValue = fromDynamic_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromCharCode") ) { outValue = fromCharCode_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromCharCodes") ) { outValue = fromCharCodes_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *UTF8String_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo UTF8String_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &UTF8String_Impl__obj::lowercaseMap,HX_HCSTRING("lowercaseMap","\xeb","\xa9","\x02","\x09")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &UTF8String_Impl__obj::uppercaseMap,HX_HCSTRING("uppercaseMap","\xaa","\xa8","\x92","\x97")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void UTF8String_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UTF8String_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(UTF8String_Impl__obj::lowercaseMap,"lowercaseMap");
	HX_MARK_MEMBER_NAME(UTF8String_Impl__obj::uppercaseMap,"uppercaseMap");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UTF8String_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UTF8String_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(UTF8String_Impl__obj::lowercaseMap,"lowercaseMap");
	HX_VISIT_MEMBER_NAME(UTF8String_Impl__obj::uppercaseMap,"uppercaseMap");
};

#endif

hx::Class UTF8String_Impl__obj::__mClass;

static ::String UTF8String_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("lowercaseMap","\xeb","\xa9","\x02","\x09"),
	HX_HCSTRING("uppercaseMap","\xaa","\xa8","\x92","\x97"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("charAt","\x69","\x79","\x75","\xb7"),
	HX_HCSTRING("charCodeAt","\xf6","\xe6","\x54","\x35"),
	HX_HCSTRING("fromCharCode","\xad","\x3a","\x3b","\x3c"),
	HX_HCSTRING("fromCharCodes","\x26","\x1d","\x98","\x77"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("lastIndexOf","\x13","\xfd","\x6a","\x95"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("substr","\x31","\xef","\x0a","\x9a"),
	HX_HCSTRING("substring","\x51","\xf2","\xe7","\xe2"),
	HX_HCSTRING("toLowerCase","\x56","\x4c","\x64","\xb8"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toUpperCase","\x37","\x30","\xfd","\x38"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("lt","\x88","\x5e","\x00","\x00"),
	HX_HCSTRING("gt","\x2d","\x5a","\x00","\x00"),
	HX_HCSTRING("lteq","\xf4","\x68","\xbb","\x47"),
	HX_HCSTRING("gteq","\xd9","\x57","\x6d","\x44"),
	HX_HCSTRING("plus","\x5a","\x3f","\x5a","\x4a"),
	HX_HCSTRING("fromDynamic","\x35","\x03","\x56","\xce"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	::String(null())
};

void UTF8String_Impl__obj::__register()
{
	hx::Object *dummy = new UTF8String_Impl__obj;
	UTF8String_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text._UTF8String.UTF8String_Impl_","\xd7","\x78","\x0d","\x6e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UTF8String_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UTF8String_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UTF8String_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< UTF8String_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UTF8String_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UTF8String_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UTF8String_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
} // end namespace _UTF8String
