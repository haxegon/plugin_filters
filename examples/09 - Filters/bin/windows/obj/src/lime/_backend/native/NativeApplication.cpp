// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeApplication
#include <lime/_backend/native/NativeApplication.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeRenderer
#include <lime/_backend/native/NativeRenderer.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_ApplicationEventInfo
#include <lime/_backend/native/_NativeApplication/ApplicationEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_ClipboardEventInfo
#include <lime/_backend/native/_NativeApplication/ClipboardEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_DropEventInfo
#include <lime/_backend/native/_NativeApplication/DropEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_GamepadEventInfo
#include <lime/_backend/native/_NativeApplication/GamepadEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_JoystickEventInfo
#include <lime/_backend/native/_NativeApplication/JoystickEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_KeyEventInfo
#include <lime/_backend/native/_NativeApplication/KeyEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_MouseEventInfo
#include <lime/_backend/native/_NativeApplication/MouseEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_RenderEventInfo
#include <lime/_backend/native/_NativeApplication/RenderEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_SensorEventInfo
#include <lime/_backend/native/_NativeApplication/SensorEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_TextEventInfo
#include <lime/_backend/native/_NativeApplication/TextEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_TouchEventInfo
#include <lime/_backend/native/_NativeApplication/TouchEventInfo.h>
#endif
#ifndef INCLUDED_lime__backend_native__NativeApplication_WindowEventInfo
#include <lime/_backend/native/_NativeApplication/WindowEventInfo.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Float_Void
#include <lime/app/_Event_Float_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Int_Void
#include <lime/app/_Event_Float_Float_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Void
#include <lime/app/_Event_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Float_Float_Void
#include <lime/app/_Event_Int_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Float_Void
#include <lime/app/_Event_Int_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Int_Void
#include <lime/app/_Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_lime_ui_JoystickHatPosition_Void
#include <lime/app/_Event_Int_lime_ui_JoystickHatPosition_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Int_Int_Void
#include <lime/app/_Event_String_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_graphics_RenderContext_Void
#include <lime/app/_Event_lime_graphics_RenderContext_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadAxis_Float_Void
#include <lime/app/_Event_lime_ui_GamepadAxis_Float_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_GamepadButton_Void
#include <lime/app/_Event_lime_ui_GamepadButton_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_Touch_Void
#include <lime/app/_Event_lime_ui_Touch_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Renderer
#include <lime/graphics/Renderer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_media_AudioContext
#include <lime/media/AudioContext.h>
#endif
#ifndef INCLUDED_lime_media_AudioManager
#include <lime/media/AudioManager.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_system_Sensor
#include <lime/system/Sensor.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_ui_Gamepad
#include <lime/ui/Gamepad.h>
#endif
#ifndef INCLUDED_lime_ui_Joystick
#include <lime/ui/Joystick.h>
#endif
#ifndef INCLUDED_lime_ui_Touch
#include <lime/ui/Touch.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_50_new,"lime._backend.native.NativeApplication","new",0xf81a1e94,"lime._backend.native.NativeApplication.new","lime/_backend/native/NativeApplication.hx",50,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_830ace8b4bfd5f15_78___init__,"::lime::_backend::native::NativeApplication_obj","__init__",0x21624c8e,"::lime::_backend::native::NativeApplication_obj.__init__","lime/_backend/native/NativeApplication.hx",78,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_107_create,"lime._backend.native.NativeApplication","create",0xd50cf148,"lime._backend.native.NativeApplication.create","lime/_backend/native/NativeApplication.hx",107,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_113_exec,"lime._backend.native.NativeApplication","exec",0x18dc12dd,"lime._backend.native.NativeApplication.exec","lime/_backend/native/NativeApplication.hx",113,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_176_exit,"lime._backend.native.NativeApplication","exit",0x18dc166a,"lime._backend.native.NativeApplication.exit","lime/_backend/native/NativeApplication.hx",176,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_189_getFrameRate,"lime._backend.native.NativeApplication","getFrameRate",0xe79bf983,"lime._backend.native.NativeApplication.getFrameRate","lime/_backend/native/NativeApplication.hx",189,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_196_handleApplicationEvent,"lime._backend.native.NativeApplication","handleApplicationEvent",0x44389cbe,"lime._backend.native.NativeApplication.handleApplicationEvent","lime/_backend/native/NativeApplication.hx",196,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_214_handleClipboardEvent,"lime._backend.native.NativeApplication","handleClipboardEvent",0x7b0d8f78,"lime._backend.native.NativeApplication.handleClipboardEvent","lime/_backend/native/NativeApplication.hx",214,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_221_handleDropEvent,"lime._backend.native.NativeApplication","handleDropEvent",0xe00568d7,"lime._backend.native.NativeApplication.handleDropEvent","lime/_backend/native/NativeApplication.hx",221,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_232_handleGamepadEvent,"lime._backend.native.NativeApplication","handleGamepadEvent",0x54f9e7cd,"lime._backend.native.NativeApplication.handleGamepadEvent","lime/_backend/native/NativeApplication.hx",232,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_264_handleJoystickEvent,"lime._backend.native.NativeApplication","handleJoystickEvent",0xefd0c72a,"lime._backend.native.NativeApplication.handleJoystickEvent","lime/_backend/native/NativeApplication.hx",264,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_304_handleKeyEvent,"lime._backend.native.NativeApplication","handleKeyEvent",0xe8484c0f,"lime._backend.native.NativeApplication.handleKeyEvent","lime/_backend/native/NativeApplication.hx",304,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_404_handleMouseEvent,"lime._backend.native.NativeApplication","handleMouseEvent",0xe26e46c9,"lime._backend.native.NativeApplication.handleMouseEvent","lime/_backend/native/NativeApplication.hx",404,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_440_handleRenderEvent,"lime._backend.native.NativeApplication","handleRenderEvent",0xf3931b50,"lime._backend.native.NativeApplication.handleRenderEvent","lime/_backend/native/NativeApplication.hx",440,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_507_handleSensorEvent,"lime._backend.native.NativeApplication","handleSensorEvent",0x6e3cd9ec,"lime._backend.native.NativeApplication.handleSensorEvent","lime/_backend/native/NativeApplication.hx",507,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_520_handleTextEvent,"lime._backend.native.NativeApplication","handleTextEvent",0x373acb99,"lime._backend.native.NativeApplication.handleTextEvent","lime/_backend/native/NativeApplication.hx",520,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_547_handleTouchEvent,"lime._backend.native.NativeApplication","handleTouchEvent",0xbe3236ef,"lime._backend.native.NativeApplication.handleTouchEvent","lime/_backend/native/NativeApplication.hx",547,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_615_handleWindowEvent,"lime._backend.native.NativeApplication","handleWindowEvent",0x18b48476,"lime._backend.native.NativeApplication.handleWindowEvent","lime/_backend/native/NativeApplication.hx",615,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_685_setFrameRate,"lime._backend.native.NativeApplication","setFrameRate",0xfc951cf7,"lime._backend.native.NativeApplication.setFrameRate","lime/_backend/native/NativeApplication.hx",685,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_698_updateTimer,"lime._backend.native.NativeApplication","updateTimer",0x8a9bcb30,"lime._backend.native.NativeApplication.updateTimer","lime/_backend/native/NativeApplication.hx",698,0xb13849fd)
HX_LOCAL_STACK_FRAME(_hx_pos_2f2697aaa7d6e1ad_727_updateTimer,"lime._backend.native.NativeApplication","updateTimer",0x8a9bcb30,"lime._backend.native.NativeApplication.updateTimer","lime/_backend/native/NativeApplication.hx",727,0xb13849fd)
namespace lime{
namespace _backend{
namespace native{

void NativeApplication_obj::__construct( ::lime::app::Application parent){
            	HX_GC_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_50_new)
HXLINE(  66)		this->windowEventInfo =  ::lime::_backend::native::_NativeApplication::WindowEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  65)		this->unusedTouchesPool =  ::List_obj::__alloc( HX_CTX );
HXLINE(  64)		this->touchEventInfo =  ::lime::_backend::native::_NativeApplication::TouchEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  63)		this->textEventInfo =  ::lime::_backend::native::_NativeApplication::TextEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  62)		this->sensorEventInfo =  ::lime::_backend::native::_NativeApplication::SensorEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  61)		this->renderEventInfo =  ::lime::_backend::native::_NativeApplication::RenderEventInfo_obj::__alloc( HX_CTX ,(int)0,null());
HXLINE(  60)		this->mouseEventInfo =  ::lime::_backend::native::_NativeApplication::MouseEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE(  59)		this->keyEventInfo =  ::lime::_backend::native::_NativeApplication::KeyEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  58)		this->joystickEventInfo =  ::lime::_backend::native::_NativeApplication::JoystickEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  57)		this->gamepadEventInfo =  ::lime::_backend::native::_NativeApplication::GamepadEventInfo_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  56)		this->dropEventInfo =  ::lime::_backend::native::_NativeApplication::DropEventInfo_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  55)		this->currentTouches =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  54)		this->clipboardEventInfo =  ::lime::_backend::native::_NativeApplication::ClipboardEventInfo_obj::__alloc( HX_CTX ,null());
HXLINE(  53)		this->applicationEventInfo =  ::lime::_backend::native::_NativeApplication::ApplicationEventInfo_obj::__alloc( HX_CTX ,(int)0,null());
HXLINE(  86)		this->parent = parent;
HXLINE(  87)		this->frameRate = (int)60;
HXLINE(  88)		this->toggleFullscreen = true;
HXLINE(  95)		::lime::media::AudioManager_obj::init(null());
            	}

Dynamic NativeApplication_obj::__CreateEmpty() { return new NativeApplication_obj; }

void *NativeApplication_obj::_hx_vtable = 0;

Dynamic NativeApplication_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeApplication_obj > _hx_result = new NativeApplication_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NativeApplication_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b552ab8;
}

void NativeApplication_obj::__init__(){
            	HX_STACKFRAME(&_hx_pos_830ace8b4bfd5f15_78___init__)
HXDLIN(  78)		 ::Dynamic init = hx::ClassOf< ::lime::_backend::native::NativeCFFI >();
            	}


void NativeApplication_obj::create( ::Dynamic config){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_107_create)
HXDLIN( 107)		this->handle = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_application_create(hx::DynamicPtr( ::Dynamic(hx::Anon_obj::Create(0))))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,create,(void))

int NativeApplication_obj::exec(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_113_exec)
HXLINE( 118)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_application_event_manager_register(hx::DynamicPtr(this->handleApplicationEvent_dyn()),hx::DynamicPtr(this->applicationEventInfo));
HXLINE( 119)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_clipboard_event_manager_register(hx::DynamicPtr(this->handleClipboardEvent_dyn()),hx::DynamicPtr(this->clipboardEventInfo));
HXLINE( 120)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_drop_event_manager_register(hx::DynamicPtr(this->handleDropEvent_dyn()),hx::DynamicPtr(this->dropEventInfo));
HXLINE( 121)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gamepad_event_manager_register(hx::DynamicPtr(this->handleGamepadEvent_dyn()),hx::DynamicPtr(this->gamepadEventInfo));
HXLINE( 122)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_joystick_event_manager_register(hx::DynamicPtr(this->handleJoystickEvent_dyn()),hx::DynamicPtr(this->joystickEventInfo));
HXLINE( 123)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_key_event_manager_register(hx::DynamicPtr(this->handleKeyEvent_dyn()),hx::DynamicPtr(this->keyEventInfo));
HXLINE( 124)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_mouse_event_manager_register(hx::DynamicPtr(this->handleMouseEvent_dyn()),hx::DynamicPtr(this->mouseEventInfo));
HXLINE( 125)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_render_event_manager_register(hx::DynamicPtr(this->handleRenderEvent_dyn()),hx::DynamicPtr(this->renderEventInfo));
HXLINE( 126)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_text_event_manager_register(hx::DynamicPtr(this->handleTextEvent_dyn()),hx::DynamicPtr(this->textEventInfo));
HXLINE( 127)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_touch_event_manager_register(hx::DynamicPtr(this->handleTouchEvent_dyn()),hx::DynamicPtr(this->touchEventInfo));
HXLINE( 128)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_window_event_manager_register(hx::DynamicPtr(this->handleWindowEvent_dyn()),hx::DynamicPtr(this->windowEventInfo));
HXLINE( 160)		int result = ::lime::_backend::native::NativeCFFI_obj::cffi_lime_application_exec(hx::DynamicPtr(this->handle));
HXLINE( 163)		this->parent->onExit->dispatch(result);
HXLINE( 166)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,exec,return )

void NativeApplication_obj::exit(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_176_exit)
HXLINE( 178)		::lime::media::AudioManager_obj::shutdown();
HXLINE( 181)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_application_quit(hx::DynamicPtr(this->handle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,exit,(void))

Float NativeApplication_obj::getFrameRate(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_189_getFrameRate)
HXDLIN( 189)		return this->frameRate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,getFrameRate,return )

void NativeApplication_obj::handleApplicationEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_196_handleApplicationEvent)
HXDLIN( 196)		int _g = this->applicationEventInfo->type;
HXDLIN( 196)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 200)				this->updateTimer();
HXLINE( 201)				this->parent->onUpdate->dispatch(this->applicationEventInfo->deltaTime);
            			}
            			break;
            			case (int)1: {
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleApplicationEvent,(void))

void NativeApplication_obj::handleClipboardEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_214_handleClipboardEvent)
HXDLIN( 214)		::lime::_hx_system::Clipboard_obj::_hx___update();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleClipboardEvent,(void))

void NativeApplication_obj::handleDropEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_221_handleDropEvent)
HXDLIN( 221)		int _g = (int)0;
HXDLIN( 221)		::Array< ::Dynamic> _g1 = this->parent->_hx___windows;
HXDLIN( 221)		while((_g < _g1->length)){
HXDLIN( 221)			 ::lime::ui::Window window = _g1->__get(_g).StaticCast<  ::lime::ui::Window >();
HXDLIN( 221)			_g = (_g + (int)1);
HXLINE( 223)			window->onDropFile->dispatch(this->dropEventInfo->file);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleDropEvent,(void))

void NativeApplication_obj::handleGamepadEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_232_handleGamepadEvent)
HXDLIN( 232)		int _g = this->gamepadEventInfo->type;
HXDLIN( 232)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 236)				 ::lime::ui::Gamepad gamepad = ( ( ::lime::ui::Gamepad)(::haxe::IMap_obj::get(::lime::ui::Gamepad_obj::devices,this->gamepadEventInfo->id)) );
HXLINE( 237)				if (hx::IsNotNull( gamepad )) {
HXLINE( 237)					gamepad->onAxisMove->dispatch(this->gamepadEventInfo->axis,this->gamepadEventInfo->value);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 241)				 ::lime::ui::Gamepad gamepad1 = ( ( ::lime::ui::Gamepad)(::haxe::IMap_obj::get(::lime::ui::Gamepad_obj::devices,this->gamepadEventInfo->id)) );
HXLINE( 242)				if (hx::IsNotNull( gamepad1 )) {
HXLINE( 242)					gamepad1->onButtonDown->dispatch(this->gamepadEventInfo->button);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 246)				 ::lime::ui::Gamepad gamepad2 = ( ( ::lime::ui::Gamepad)(::haxe::IMap_obj::get(::lime::ui::Gamepad_obj::devices,this->gamepadEventInfo->id)) );
HXLINE( 247)				if (hx::IsNotNull( gamepad2 )) {
HXLINE( 247)					gamepad2->onButtonUp->dispatch(this->gamepadEventInfo->button);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 251)				::lime::ui::Gamepad_obj::_hx___connect(this->gamepadEventInfo->id);
            			}
            			break;
            			case (int)4: {
HXLINE( 255)				::lime::ui::Gamepad_obj::_hx___disconnect(this->gamepadEventInfo->id);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleGamepadEvent,(void))

void NativeApplication_obj::handleJoystickEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_264_handleJoystickEvent)
HXDLIN( 264)		int _g = this->joystickEventInfo->type;
HXDLIN( 264)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 268)				 ::lime::ui::Joystick joystick = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 269)				if (hx::IsNotNull( joystick )) {
HXLINE( 269)					joystick->onAxisMove->dispatch(this->joystickEventInfo->index,this->joystickEventInfo->x);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 273)				 ::lime::ui::Joystick joystick1 = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 274)				if (hx::IsNotNull( joystick1 )) {
HXLINE( 274)					joystick1->onHatMove->dispatch(this->joystickEventInfo->index,this->joystickEventInfo->value);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 278)				 ::lime::ui::Joystick joystick2 = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 279)				if (hx::IsNotNull( joystick2 )) {
HXLINE( 279)					joystick2->onTrackballMove->dispatch(this->joystickEventInfo->index,this->joystickEventInfo->x,this->joystickEventInfo->y);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 283)				 ::lime::ui::Joystick joystick3 = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 284)				if (hx::IsNotNull( joystick3 )) {
HXLINE( 284)					joystick3->onButtonDown->dispatch(this->joystickEventInfo->index);
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 288)				 ::lime::ui::Joystick joystick4 = ( ( ::lime::ui::Joystick)(::haxe::IMap_obj::get(::lime::ui::Joystick_obj::devices,this->joystickEventInfo->id)) );
HXLINE( 289)				if (hx::IsNotNull( joystick4 )) {
HXLINE( 289)					joystick4->onButtonUp->dispatch(this->joystickEventInfo->index);
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 293)				::lime::ui::Joystick_obj::_hx___connect(this->joystickEventInfo->id);
            			}
            			break;
            			case (int)6: {
HXLINE( 297)				::lime::ui::Joystick_obj::_hx___disconnect(this->joystickEventInfo->id);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleJoystickEvent,(void))

void NativeApplication_obj::handleKeyEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_304_handleKeyEvent)
HXLINE( 306)		 ::lime::ui::Window window = this->parent->windowByID->get(this->keyEventInfo->windowID).StaticCast<  ::lime::ui::Window >();
HXLINE( 308)		if (hx::IsNotNull( window )) {
HXLINE( 310)			int type = this->keyEventInfo->type;
HXLINE( 311)			int keyCode = this->keyEventInfo->keyCode;
HXLINE( 312)			int modifier = this->keyEventInfo->modifier;
HXLINE( 314)			switch((int)(type)){
            				case (int)0: {
HXLINE( 318)					window->onKeyDown->dispatch(keyCode,modifier);
            				}
            				break;
            				case (int)1: {
HXLINE( 322)					window->onKeyUp->dispatch(keyCode,modifier);
            				}
            				break;
            			}
HXLINE( 328)			if ((keyCode == (int)13)) {
HXLINE( 330)				if ((type == (int)0)) {
HXLINE( 332)					bool _hx_tmp;
HXDLIN( 332)					bool _hx_tmp1;
HXDLIN( 332)					if (this->toggleFullscreen) {
HXLINE( 332)						_hx_tmp1 = ::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_altKey(modifier);
            					}
            					else {
HXLINE( 332)						_hx_tmp1 = false;
            					}
HXDLIN( 332)					if (_hx_tmp1) {
HXLINE( 332)						bool _hx_tmp2;
HXDLIN( 332)						if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier))) {
HXLINE( 332)							_hx_tmp2 = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier));
            						}
            						else {
HXLINE( 332)							_hx_tmp2 = false;
            						}
HXDLIN( 332)						if (_hx_tmp2) {
HXLINE( 332)							_hx_tmp = !(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier));
            						}
            						else {
HXLINE( 332)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 332)						_hx_tmp = false;
            					}
HXDLIN( 332)					if (_hx_tmp) {
HXLINE( 334)						this->toggleFullscreen = false;
HXLINE( 336)						if (!(window->onKeyDown->canceled)) {
HXLINE( 338)							window->set_fullscreen(!(window->_hx___fullscreen));
            						}
            					}
            				}
            				else {
HXLINE( 346)					this->toggleFullscreen = true;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleKeyEvent,(void))

void NativeApplication_obj::handleMouseEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_404_handleMouseEvent)
HXLINE( 406)		 ::lime::ui::Window window = this->parent->windowByID->get(this->mouseEventInfo->windowID).StaticCast<  ::lime::ui::Window >();
HXLINE( 408)		if (hx::IsNotNull( window )) {
HXLINE( 410)			int _g = this->mouseEventInfo->type;
HXDLIN( 410)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 414)					window->onMouseDown->dispatch(this->mouseEventInfo->x,this->mouseEventInfo->y,this->mouseEventInfo->button);
            				}
            				break;
            				case (int)1: {
HXLINE( 418)					window->onMouseUp->dispatch(this->mouseEventInfo->x,this->mouseEventInfo->y,this->mouseEventInfo->button);
            				}
            				break;
            				case (int)2: {
HXLINE( 422)					window->onMouseMove->dispatch(this->mouseEventInfo->x,this->mouseEventInfo->y);
HXLINE( 423)					window->onMouseMoveRelative->dispatch(this->mouseEventInfo->movementX,this->mouseEventInfo->movementY);
            				}
            				break;
            				case (int)3: {
HXLINE( 427)					window->onMouseWheel->dispatch(this->mouseEventInfo->x,this->mouseEventInfo->y);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleMouseEvent,(void))

void NativeApplication_obj::handleRenderEvent(){
            	HX_GC_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_440_handleRenderEvent)
HXDLIN( 440)		int _g = (int)0;
HXDLIN( 440)		::Array< ::Dynamic> _g1 = this->parent->_hx___renderers;
HXDLIN( 440)		while((_g < _g1->length)){
HXDLIN( 440)			 ::lime::graphics::Renderer renderer = _g1->__get(_g).StaticCast<  ::lime::graphics::Renderer >();
HXDLIN( 440)			_g = (_g + (int)1);
HXLINE( 442)			if (hx::IsNull( renderer )) {
HXLINE( 442)				continue;
            			}
HXLINE( 444)			this->parent->renderer = renderer;
HXLINE( 446)			{
HXLINE( 446)				int _g2 = this->renderEventInfo->type;
HXDLIN( 446)				switch((int)(_g2)){
            					case (int)0: {
HXLINE( 450)						if (hx::IsNotNull( renderer->context )) {
HXLINE( 452)							renderer->render();
HXLINE( 453)							renderer->onRender->dispatch();
HXLINE( 455)							if (!(renderer->onRender->canceled)) {
HXLINE( 457)								renderer->flip();
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 465)						bool _hx_tmp;
HXDLIN( 465)						if (renderer->backend->useHardware) {
HXLINE( 465)							_hx_tmp = hx::IsNotNull( renderer->context );
            						}
            						else {
HXLINE( 465)							_hx_tmp = false;
            						}
HXDLIN( 465)						if (_hx_tmp) {
HXLINE( 467)							{
HXLINE( 467)								 ::lime::graphics::RenderContext _g21 = renderer->context;
HXDLIN( 467)								if ((_hx_getEnumValueIndex(_g21) == (int)0)) {
HXLINE( 469)									 ::lime::_backend::native::NativeGLRenderContext gl = _g21->_hx_getObject(0).StaticCast<  ::lime::_backend::native::NativeGLRenderContext >();
HXDLIN( 469)									{
HXLINE( 472)										gl->_hx___contextLost();
HXLINE( 473)										if (hx::IsEq( ::lime::graphics::opengl::GL_obj::context,gl )) {
HXLINE( 473)											::lime::graphics::opengl::GL_obj::context = null();
            										}
            									}
            								}
            							}
HXLINE( 480)							renderer->context = null();
HXLINE( 481)							renderer->onContextLost->dispatch();
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 487)						if (renderer->backend->useHardware) {
HXLINE( 492)							::lime::graphics::opengl::GL_obj::context =  ::lime::_backend::native::NativeGLRenderContext_obj::__alloc( HX_CTX );
HXLINE( 493)							renderer->context = ::lime::graphics::RenderContext_obj::OPENGL(::lime::graphics::opengl::GL_obj::context);
HXLINE( 496)							renderer->onContextRestored->dispatch(renderer->context);
            						}
            					}
            					break;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleRenderEvent,(void))

void NativeApplication_obj::handleSensorEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_507_handleSensorEvent)
HXLINE( 509)		 ::lime::_hx_system::Sensor sensor = ::lime::_hx_system::Sensor_obj::sensorByID->get(this->sensorEventInfo->id).StaticCast<  ::lime::_hx_system::Sensor >();
HXLINE( 511)		if (hx::IsNotNull( sensor )) {
HXLINE( 513)			sensor->onUpdate->dispatch(this->sensorEventInfo->x,this->sensorEventInfo->y,this->sensorEventInfo->z);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleSensorEvent,(void))

void NativeApplication_obj::handleTextEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_520_handleTextEvent)
HXLINE( 522)		 ::lime::ui::Window window = this->parent->windowByID->get(this->textEventInfo->windowID).StaticCast<  ::lime::ui::Window >();
HXLINE( 524)		if (hx::IsNotNull( window )) {
HXLINE( 526)			int _g = this->textEventInfo->type;
HXDLIN( 526)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 530)					window->onTextInput->dispatch(this->textEventInfo->text);
            				}
            				break;
            				case (int)1: {
HXLINE( 534)					window->onTextEdit->dispatch(this->textEventInfo->text,this->textEventInfo->start,this->textEventInfo->length);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleTextEvent,(void))

void NativeApplication_obj::handleTouchEvent(){
            	HX_GC_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_547_handleTouchEvent)
HXDLIN( 547)		int _g = this->touchEventInfo->type;
HXDLIN( 547)		switch((int)(_g)){
            			case (int)0: {
HXLINE( 551)				 ::lime::ui::Touch touch = this->unusedTouchesPool->pop().StaticCast<  ::lime::ui::Touch >();
HXLINE( 553)				if (hx::IsNull( touch )) {
HXLINE( 555)					touch =  ::lime::ui::Touch_obj::__alloc( HX_CTX ,this->touchEventInfo->x,this->touchEventInfo->y,this->touchEventInfo->id,this->touchEventInfo->dx,this->touchEventInfo->dy,this->touchEventInfo->pressure,this->touchEventInfo->device);
            				}
            				else {
HXLINE( 559)					touch->x = this->touchEventInfo->x;
HXLINE( 560)					touch->y = this->touchEventInfo->y;
HXLINE( 561)					touch->id = this->touchEventInfo->id;
HXLINE( 562)					touch->dx = this->touchEventInfo->dx;
HXLINE( 563)					touch->dy = this->touchEventInfo->dy;
HXLINE( 564)					touch->pressure = this->touchEventInfo->pressure;
HXLINE( 565)					touch->device = this->touchEventInfo->device;
            				}
HXLINE( 569)				::haxe::IMap_obj::set(this->currentTouches,touch->id,touch);
HXLINE( 571)				::lime::ui::Touch_obj::onStart->dispatch(touch);
            			}
            			break;
            			case (int)1: {
HXLINE( 575)				 ::lime::ui::Touch touch1 = ( ( ::lime::ui::Touch)(::haxe::IMap_obj::get(this->currentTouches,this->touchEventInfo->id)) );
HXLINE( 577)				if (hx::IsNotNull( touch1 )) {
HXLINE( 579)					touch1->x = this->touchEventInfo->x;
HXLINE( 580)					touch1->y = this->touchEventInfo->y;
HXLINE( 581)					touch1->dx = this->touchEventInfo->dx;
HXLINE( 582)					touch1->dy = this->touchEventInfo->dy;
HXLINE( 583)					touch1->pressure = this->touchEventInfo->pressure;
HXLINE( 585)					::lime::ui::Touch_obj::onEnd->dispatch(touch1);
HXLINE( 587)					::haxe::IMap_obj::remove(this->currentTouches,this->touchEventInfo->id);
HXLINE( 588)					this->unusedTouchesPool->add(touch1);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 594)				 ::lime::ui::Touch touch2 = ( ( ::lime::ui::Touch)(::haxe::IMap_obj::get(this->currentTouches,this->touchEventInfo->id)) );
HXLINE( 596)				if (hx::IsNotNull( touch2 )) {
HXLINE( 598)					touch2->x = this->touchEventInfo->x;
HXLINE( 599)					touch2->y = this->touchEventInfo->y;
HXLINE( 600)					touch2->dx = this->touchEventInfo->dx;
HXLINE( 601)					touch2->dy = this->touchEventInfo->dy;
HXLINE( 602)					touch2->pressure = this->touchEventInfo->pressure;
HXLINE( 604)					::lime::ui::Touch_obj::onMove->dispatch(touch2);
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleTouchEvent,(void))

void NativeApplication_obj::handleWindowEvent(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_615_handleWindowEvent)
HXLINE( 617)		 ::lime::ui::Window window = this->parent->windowByID->get(this->windowEventInfo->windowID).StaticCast<  ::lime::ui::Window >();
HXLINE( 619)		if (hx::IsNotNull( window )) {
HXLINE( 621)			int _g = this->windowEventInfo->type;
HXDLIN( 621)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 625)					window->onActivate->dispatch();
HXLINE( 627)					::lime::media::AudioManager_obj::resume();
            				}
            				break;
            				case (int)1: {
HXLINE( 631)					window->close();
            				}
            				break;
            				case (int)2: {
HXLINE( 635)					window->onDeactivate->dispatch();
HXLINE( 637)					::lime::media::AudioManager_obj::suspend();
            				}
            				break;
            				case (int)3: {
HXLINE( 641)					window->onEnter->dispatch();
            				}
            				break;
            				case (int)4: {
HXLINE( 645)					window->onFocusIn->dispatch();
            				}
            				break;
            				case (int)5: {
HXLINE( 649)					window->onFocusOut->dispatch();
            				}
            				break;
            				case (int)6: {
HXLINE( 653)					window->onLeave->dispatch();
            				}
            				break;
            				case (int)7: {
HXLINE( 657)					window->_hx___minimized = true;
HXLINE( 658)					window->onMinimize->dispatch();
            				}
            				break;
            				case (int)8: {
HXLINE( 662)					window->_hx___x = this->windowEventInfo->x;
HXLINE( 663)					window->_hx___y = this->windowEventInfo->y;
HXLINE( 664)					window->onMove->dispatch(this->windowEventInfo->x,this->windowEventInfo->y);
            				}
            				break;
            				case (int)9: {
HXLINE( 668)					window->_hx___width = this->windowEventInfo->width;
HXLINE( 669)					window->_hx___height = this->windowEventInfo->height;
HXLINE( 670)					window->onResize->dispatch(this->windowEventInfo->width,this->windowEventInfo->height);
            				}
            				break;
            				case (int)10: {
HXLINE( 674)					window->_hx___fullscreen = false;
HXLINE( 675)					window->_hx___minimized = false;
HXLINE( 676)					window->onRestore->dispatch();
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,handleWindowEvent,(void))

Float NativeApplication_obj::setFrameRate(Float value){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_685_setFrameRate)
HXLINE( 688)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_application_set_frame_rate(hx::DynamicPtr(this->handle),value);
HXLINE( 690)		return (this->frameRate = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeApplication_obj,setFrameRate,return )

void NativeApplication_obj::updateTimer(){
            	HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_698_updateTimer)
HXDLIN( 698)		if ((::haxe::Timer_obj::sRunningTimers->length > (int)0)) {
HXLINE( 700)			int currentTime = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 701)			bool foundNull = false;
HXLINE( 702)			 ::haxe::Timer timer;
HXLINE( 704)			{
HXLINE( 704)				int _g1 = (int)0;
HXDLIN( 704)				int _g = ::haxe::Timer_obj::sRunningTimers->length;
HXDLIN( 704)				while((_g1 < _g)){
HXLINE( 704)					_g1 = (_g1 + (int)1);
HXDLIN( 704)					int i = (_g1 - (int)1);
HXLINE( 706)					timer = ::haxe::Timer_obj::sRunningTimers->__get(i).StaticCast<  ::haxe::Timer >();
HXLINE( 708)					if (hx::IsNotNull( timer )) {
HXLINE( 710)						if ((currentTime >= timer->mFireAt)) {
HXLINE( 712)							 ::haxe::Timer timer1 = timer;
HXDLIN( 712)							timer1->mFireAt = (timer1->mFireAt + timer->mTime);
HXLINE( 713)							timer->run();
            						}
            					}
            					else {
HXLINE( 719)						foundNull = true;
            					}
            				}
            			}
HXLINE( 725)			if (foundNull) {
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				bool _hx_run( ::haxe::Timer val){
            					HX_STACKFRAME(&_hx_pos_2f2697aaa7d6e1ad_727_updateTimer)
HXLINE( 727)					return hx::IsNotNull( val );
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 727)				::haxe::Timer_obj::sRunningTimers = ::haxe::Timer_obj::sRunningTimers->filter( ::Dynamic(new _hx_Closure_0()));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeApplication_obj,updateTimer,(void))


hx::ObjectPtr< NativeApplication_obj > NativeApplication_obj::__new( ::lime::app::Application parent) {
	hx::ObjectPtr< NativeApplication_obj > __this = new NativeApplication_obj();
	__this->__construct(parent);
	return __this;
}

hx::ObjectPtr< NativeApplication_obj > NativeApplication_obj::__alloc(hx::Ctx *_hx_ctx, ::lime::app::Application parent) {
	NativeApplication_obj *__this = (NativeApplication_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NativeApplication_obj), true, "lime._backend.native.NativeApplication"));
	*(void **)__this = NativeApplication_obj::_hx_vtable;
	__this->__construct(parent);
	return __this;
}

NativeApplication_obj::NativeApplication_obj()
{
}

void NativeApplication_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeApplication);
	HX_MARK_MEMBER_NAME(applicationEventInfo,"applicationEventInfo");
	HX_MARK_MEMBER_NAME(clipboardEventInfo,"clipboardEventInfo");
	HX_MARK_MEMBER_NAME(currentTouches,"currentTouches");
	HX_MARK_MEMBER_NAME(dropEventInfo,"dropEventInfo");
	HX_MARK_MEMBER_NAME(gamepadEventInfo,"gamepadEventInfo");
	HX_MARK_MEMBER_NAME(joystickEventInfo,"joystickEventInfo");
	HX_MARK_MEMBER_NAME(keyEventInfo,"keyEventInfo");
	HX_MARK_MEMBER_NAME(mouseEventInfo,"mouseEventInfo");
	HX_MARK_MEMBER_NAME(renderEventInfo,"renderEventInfo");
	HX_MARK_MEMBER_NAME(sensorEventInfo,"sensorEventInfo");
	HX_MARK_MEMBER_NAME(textEventInfo,"textEventInfo");
	HX_MARK_MEMBER_NAME(touchEventInfo,"touchEventInfo");
	HX_MARK_MEMBER_NAME(unusedTouchesPool,"unusedTouchesPool");
	HX_MARK_MEMBER_NAME(windowEventInfo,"windowEventInfo");
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(toggleFullscreen,"toggleFullscreen");
	HX_MARK_END_CLASS();
}

void NativeApplication_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(applicationEventInfo,"applicationEventInfo");
	HX_VISIT_MEMBER_NAME(clipboardEventInfo,"clipboardEventInfo");
	HX_VISIT_MEMBER_NAME(currentTouches,"currentTouches");
	HX_VISIT_MEMBER_NAME(dropEventInfo,"dropEventInfo");
	HX_VISIT_MEMBER_NAME(gamepadEventInfo,"gamepadEventInfo");
	HX_VISIT_MEMBER_NAME(joystickEventInfo,"joystickEventInfo");
	HX_VISIT_MEMBER_NAME(keyEventInfo,"keyEventInfo");
	HX_VISIT_MEMBER_NAME(mouseEventInfo,"mouseEventInfo");
	HX_VISIT_MEMBER_NAME(renderEventInfo,"renderEventInfo");
	HX_VISIT_MEMBER_NAME(sensorEventInfo,"sensorEventInfo");
	HX_VISIT_MEMBER_NAME(textEventInfo,"textEventInfo");
	HX_VISIT_MEMBER_NAME(touchEventInfo,"touchEventInfo");
	HX_VISIT_MEMBER_NAME(unusedTouchesPool,"unusedTouchesPool");
	HX_VISIT_MEMBER_NAME(windowEventInfo,"windowEventInfo");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(toggleFullscreen,"toggleFullscreen");
}

hx::Val NativeApplication_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"exec") ) { return hx::Val( exec_dyn() ); }
		if (HX_FIELD_EQ(inName,"exit") ) { return hx::Val( exit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateTimer") ) { return hx::Val( updateTimer_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"keyEventInfo") ) { return hx::Val( keyEventInfo ); }
		if (HX_FIELD_EQ(inName,"getFrameRate") ) { return hx::Val( getFrameRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrameRate") ) { return hx::Val( setFrameRate_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dropEventInfo") ) { return hx::Val( dropEventInfo ); }
		if (HX_FIELD_EQ(inName,"textEventInfo") ) { return hx::Val( textEventInfo ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentTouches") ) { return hx::Val( currentTouches ); }
		if (HX_FIELD_EQ(inName,"mouseEventInfo") ) { return hx::Val( mouseEventInfo ); }
		if (HX_FIELD_EQ(inName,"touchEventInfo") ) { return hx::Val( touchEventInfo ); }
		if (HX_FIELD_EQ(inName,"handleKeyEvent") ) { return hx::Val( handleKeyEvent_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"renderEventInfo") ) { return hx::Val( renderEventInfo ); }
		if (HX_FIELD_EQ(inName,"sensorEventInfo") ) { return hx::Val( sensorEventInfo ); }
		if (HX_FIELD_EQ(inName,"windowEventInfo") ) { return hx::Val( windowEventInfo ); }
		if (HX_FIELD_EQ(inName,"handleDropEvent") ) { return hx::Val( handleDropEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleTextEvent") ) { return hx::Val( handleTextEvent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gamepadEventInfo") ) { return hx::Val( gamepadEventInfo ); }
		if (HX_FIELD_EQ(inName,"toggleFullscreen") ) { return hx::Val( toggleFullscreen ); }
		if (HX_FIELD_EQ(inName,"handleMouseEvent") ) { return hx::Val( handleMouseEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleTouchEvent") ) { return hx::Val( handleTouchEvent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"joystickEventInfo") ) { return hx::Val( joystickEventInfo ); }
		if (HX_FIELD_EQ(inName,"unusedTouchesPool") ) { return hx::Val( unusedTouchesPool ); }
		if (HX_FIELD_EQ(inName,"handleRenderEvent") ) { return hx::Val( handleRenderEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleSensorEvent") ) { return hx::Val( handleSensorEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"handleWindowEvent") ) { return hx::Val( handleWindowEvent_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"clipboardEventInfo") ) { return hx::Val( clipboardEventInfo ); }
		if (HX_FIELD_EQ(inName,"handleGamepadEvent") ) { return hx::Val( handleGamepadEvent_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"handleJoystickEvent") ) { return hx::Val( handleJoystickEvent_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"applicationEventInfo") ) { return hx::Val( applicationEventInfo ); }
		if (HX_FIELD_EQ(inName,"handleClipboardEvent") ) { return hx::Val( handleClipboardEvent_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"handleApplicationEvent") ) { return hx::Val( handleApplicationEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NativeApplication_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::lime::app::Application >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"keyEventInfo") ) { keyEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::KeyEventInfo >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dropEventInfo") ) { dropEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::DropEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textEventInfo") ) { textEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::TextEventInfo >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentTouches") ) { currentTouches=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseEventInfo") ) { mouseEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::MouseEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchEventInfo") ) { touchEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::TouchEventInfo >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"renderEventInfo") ) { renderEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::RenderEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sensorEventInfo") ) { sensorEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::SensorEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowEventInfo") ) { windowEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::WindowEventInfo >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gamepadEventInfo") ) { gamepadEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::GamepadEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toggleFullscreen") ) { toggleFullscreen=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"joystickEventInfo") ) { joystickEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::JoystickEventInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unusedTouchesPool") ) { unusedTouchesPool=inValue.Cast<  ::List >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"clipboardEventInfo") ) { clipboardEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::ClipboardEventInfo >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"applicationEventInfo") ) { applicationEventInfo=inValue.Cast<  ::lime::_backend::native::_NativeApplication::ApplicationEventInfo >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeApplication_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("applicationEventInfo","\x38","\x8c","\xf4","\x09"));
	outFields->push(HX_HCSTRING("clipboardEventInfo","\xf2","\x50","\x6f","\x01"));
	outFields->push(HX_HCSTRING("currentTouches","\xb4","\x92","\x8c","\xe6"));
	outFields->push(HX_HCSTRING("dropEventInfo","\x79","\xeb","\x0f","\x1e"));
	outFields->push(HX_HCSTRING("gamepadEventInfo","\xc7","\xa4","\x2e","\x4c"));
	outFields->push(HX_HCSTRING("joystickEventInfo","\x4c","\x49","\x1d","\xd4"));
	outFields->push(HX_HCSTRING("keyEventInfo","\x09","\xec","\x90","\xcc"));
	outFields->push(HX_HCSTRING("mouseEventInfo","\xc3","\x9e","\xa6","\x86"));
	outFields->push(HX_HCSTRING("renderEventInfo","\x72","\x9b","\x70","\xdd"));
	outFields->push(HX_HCSTRING("sensorEventInfo","\x0e","\xd8","\x53","\x55"));
	outFields->push(HX_HCSTRING("textEventInfo","\x3b","\xd7","\x5a","\xac"));
	outFields->push(HX_HCSTRING("touchEventInfo","\xe9","\x99","\x5c","\x0c"));
	outFields->push(HX_HCSTRING("unusedTouchesPool","\xf3","\xcf","\xdf","\x11"));
	outFields->push(HX_HCSTRING("windowEventInfo","\x98","\x8f","\x34","\x9b"));
	outFields->push(HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"));
	outFields->push(HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("toggleFullscreen","\xef","\xbe","\x03","\xc4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeApplication_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::ApplicationEventInfo*/ ,(int)offsetof(NativeApplication_obj,applicationEventInfo),HX_HCSTRING("applicationEventInfo","\x38","\x8c","\xf4","\x09")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::ClipboardEventInfo*/ ,(int)offsetof(NativeApplication_obj,clipboardEventInfo),HX_HCSTRING("clipboardEventInfo","\xf2","\x50","\x6f","\x01")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(NativeApplication_obj,currentTouches),HX_HCSTRING("currentTouches","\xb4","\x92","\x8c","\xe6")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::DropEventInfo*/ ,(int)offsetof(NativeApplication_obj,dropEventInfo),HX_HCSTRING("dropEventInfo","\x79","\xeb","\x0f","\x1e")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::GamepadEventInfo*/ ,(int)offsetof(NativeApplication_obj,gamepadEventInfo),HX_HCSTRING("gamepadEventInfo","\xc7","\xa4","\x2e","\x4c")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::JoystickEventInfo*/ ,(int)offsetof(NativeApplication_obj,joystickEventInfo),HX_HCSTRING("joystickEventInfo","\x4c","\x49","\x1d","\xd4")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::KeyEventInfo*/ ,(int)offsetof(NativeApplication_obj,keyEventInfo),HX_HCSTRING("keyEventInfo","\x09","\xec","\x90","\xcc")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::MouseEventInfo*/ ,(int)offsetof(NativeApplication_obj,mouseEventInfo),HX_HCSTRING("mouseEventInfo","\xc3","\x9e","\xa6","\x86")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::RenderEventInfo*/ ,(int)offsetof(NativeApplication_obj,renderEventInfo),HX_HCSTRING("renderEventInfo","\x72","\x9b","\x70","\xdd")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::SensorEventInfo*/ ,(int)offsetof(NativeApplication_obj,sensorEventInfo),HX_HCSTRING("sensorEventInfo","\x0e","\xd8","\x53","\x55")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::TextEventInfo*/ ,(int)offsetof(NativeApplication_obj,textEventInfo),HX_HCSTRING("textEventInfo","\x3b","\xd7","\x5a","\xac")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::TouchEventInfo*/ ,(int)offsetof(NativeApplication_obj,touchEventInfo),HX_HCSTRING("touchEventInfo","\xe9","\x99","\x5c","\x0c")},
	{hx::fsObject /*::List*/ ,(int)offsetof(NativeApplication_obj,unusedTouchesPool),HX_HCSTRING("unusedTouchesPool","\xf3","\xcf","\xdf","\x11")},
	{hx::fsObject /*::lime::_backend::native::_NativeApplication::WindowEventInfo*/ ,(int)offsetof(NativeApplication_obj,windowEventInfo),HX_HCSTRING("windowEventInfo","\x98","\x8f","\x34","\x9b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeApplication_obj,handle),HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7")},
	{hx::fsFloat,(int)offsetof(NativeApplication_obj,frameRate),HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39")},
	{hx::fsObject /*::lime::app::Application*/ ,(int)offsetof(NativeApplication_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsBool,(int)offsetof(NativeApplication_obj,toggleFullscreen),HX_HCSTRING("toggleFullscreen","\xef","\xbe","\x03","\xc4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NativeApplication_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeApplication_obj_sMemberFields[] = {
	HX_HCSTRING("applicationEventInfo","\x38","\x8c","\xf4","\x09"),
	HX_HCSTRING("clipboardEventInfo","\xf2","\x50","\x6f","\x01"),
	HX_HCSTRING("currentTouches","\xb4","\x92","\x8c","\xe6"),
	HX_HCSTRING("dropEventInfo","\x79","\xeb","\x0f","\x1e"),
	HX_HCSTRING("gamepadEventInfo","\xc7","\xa4","\x2e","\x4c"),
	HX_HCSTRING("joystickEventInfo","\x4c","\x49","\x1d","\xd4"),
	HX_HCSTRING("keyEventInfo","\x09","\xec","\x90","\xcc"),
	HX_HCSTRING("mouseEventInfo","\xc3","\x9e","\xa6","\x86"),
	HX_HCSTRING("renderEventInfo","\x72","\x9b","\x70","\xdd"),
	HX_HCSTRING("sensorEventInfo","\x0e","\xd8","\x53","\x55"),
	HX_HCSTRING("textEventInfo","\x3b","\xd7","\x5a","\xac"),
	HX_HCSTRING("touchEventInfo","\xe9","\x99","\x5c","\x0c"),
	HX_HCSTRING("unusedTouchesPool","\xf3","\xcf","\xdf","\x11"),
	HX_HCSTRING("windowEventInfo","\x98","\x8f","\x34","\x9b"),
	HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"),
	HX_HCSTRING("frameRate","\xad","\x11","\x25","\x39"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("toggleFullscreen","\xef","\xbe","\x03","\xc4"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("exec","\x91","\xf3","\x1d","\x43"),
	HX_HCSTRING("exit","\x1e","\xf7","\x1d","\x43"),
	HX_HCSTRING("getFrameRate","\x37","\xae","\x7b","\x48"),
	HX_HCSTRING("handleApplicationEvent","\x72","\xba","\xa4","\x11"),
	HX_HCSTRING("handleClipboardEvent","\x2c","\x18","\x7f","\x62"),
	HX_HCSTRING("handleDropEvent","\xa3","\x9c","\xe8","\x85"),
	HX_HCSTRING("handleGamepadEvent","\x81","\x1b","\xb0","\x7b"),
	HX_HCSTRING("handleJoystickEvent","\xf6","\xd0","\x87","\xa8"),
	HX_HCSTRING("handleKeyEvent","\xc3","\x95","\x05","\x08"),
	HX_HCSTRING("handleMouseEvent","\x7d","\x65","\x58","\x63"),
	HX_HCSTRING("handleRenderEvent","\x1c","\xda","\x83","\x3f"),
	HX_HCSTRING("handleSensorEvent","\xb8","\x98","\x2d","\xba"),
	HX_HCSTRING("handleTextEvent","\x65","\xff","\x1d","\xdd"),
	HX_HCSTRING("handleTouchEvent","\xa3","\x55","\x1c","\x3f"),
	HX_HCSTRING("handleWindowEvent","\x42","\x43","\xa5","\x64"),
	HX_HCSTRING("setFrameRate","\xab","\xd1","\x74","\x5d"),
	HX_HCSTRING("updateTimer","\xfc","\x28","\xce","\xf5"),
	::String(null()) };

static void NativeApplication_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeApplication_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeApplication_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeApplication_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeApplication_obj::__mClass;

void NativeApplication_obj::__register()
{
	hx::Object *dummy = new NativeApplication_obj;
	NativeApplication_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._backend.native.NativeApplication","\xa2","\x84","\xe2","\x94");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeApplication_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeApplication_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeApplication_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeApplication_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeApplication_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeApplication_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NativeApplication_obj::__boot()
{
}

} // end namespace lime
} // end namespace _backend
} // end namespace native
