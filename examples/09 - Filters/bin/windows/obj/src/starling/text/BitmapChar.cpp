// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_text_BitmapChar
#include <starling/text/BitmapChar.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f2041bfce8b13bac_32_new,"starling.text.BitmapChar","new",0x0959b1f2,"starling.text.BitmapChar.new","starling/text/BitmapChar.hx",32,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_43_addKerning,"starling.text.BitmapChar","addKerning",0x5e6f3b59,"starling.text.BitmapChar.addKerning","starling/text/BitmapChar.hx",43,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_53_getKerning,"starling.text.BitmapChar","getKerning",0x46469584,"starling.text.BitmapChar.getKerning","starling/text/BitmapChar.hx",53,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_60_createImage,"starling.text.BitmapChar","createImage",0x77e11a51,"starling.text.BitmapChar.createImage","starling/text/BitmapChar.hx",60,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_65_get_charID,"starling.text.BitmapChar","get_charID",0xeeaa44a8,"starling.text.BitmapChar.get_charID","starling/text/BitmapChar.hx",65,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_69_get_xOffset,"starling.text.BitmapChar","get_xOffset",0x29dad9d4,"starling.text.BitmapChar.get_xOffset","starling/text/BitmapChar.hx",69,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_73_get_yOffset,"starling.text.BitmapChar","get_yOffset",0x53705095,"starling.text.BitmapChar.get_yOffset","starling/text/BitmapChar.hx",73,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_77_get_xAdvance,"starling.text.BitmapChar","get_xAdvance",0x8d4abf21,"starling.text.BitmapChar.get_xAdvance","starling/text/BitmapChar.hx",77,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_81_get_texture,"starling.text.BitmapChar","get_texture",0xb5d7ec84,"starling.text.BitmapChar.get_texture","starling/text/BitmapChar.hx",81,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_85_get_width,"starling.text.BitmapChar","get_width",0x3d6e6d6f,"starling.text.BitmapChar.get_width","starling/text/BitmapChar.hx",85,0x1a6cb95e)
HX_LOCAL_STACK_FRAME(_hx_pos_f2041bfce8b13bac_89_get_height,"starling.text.BitmapChar","get_height",0x3980cc5e,"starling.text.BitmapChar.get_height","starling/text/BitmapChar.hx",89,0x1a6cb95e)
namespace starling{
namespace text{

void BitmapChar_obj::__construct(int id, ::starling::textures::Texture texture,Float xOffset,Float yOffset,Float xAdvance){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_32_new)
HXLINE(  33)		this->_hx___charID = id;
HXLINE(  34)		this->_hx___texture = texture;
HXLINE(  35)		this->_hx___xOffset = xOffset;
HXLINE(  36)		this->_hx___yOffset = yOffset;
HXLINE(  37)		this->_hx___xAdvance = xAdvance;
HXLINE(  38)		this->_hx___kernings = null();
            	}

Dynamic BitmapChar_obj::__CreateEmpty() { return new BitmapChar_obj; }

void *BitmapChar_obj::_hx_vtable = 0;

Dynamic BitmapChar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapChar_obj > _hx_result = new BitmapChar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool BitmapChar_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0f2052fa;
}

void BitmapChar_obj::addKerning(int charID,Float amount){
            	HX_GC_STACKFRAME(&_hx_pos_f2041bfce8b13bac_43_addKerning)
HXLINE(  44)		if (hx::IsNull( this->_hx___kernings )) {
HXLINE(  45)			this->_hx___kernings =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            		}
HXLINE(  47)		this->_hx___kernings->set(charID,amount);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapChar_obj,addKerning,(void))

Float BitmapChar_obj::getKerning(int charID){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_53_getKerning)
HXDLIN(  53)		bool _hx_tmp;
HXDLIN(  53)		if (hx::IsNotNull( this->_hx___kernings )) {
HXDLIN(  53)			_hx_tmp = hx::IsNull( this->_hx___kernings->get(charID) );
            		}
            		else {
HXDLIN(  53)			_hx_tmp = true;
            		}
HXDLIN(  53)		if (_hx_tmp) {
HXDLIN(  53)			return ((Float)0.0);
            		}
            		else {
HXLINE(  54)			return ( (Float)(this->_hx___kernings->get(charID)) );
            		}
HXLINE(  53)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapChar_obj,getKerning,return )

 ::starling::display::Image BitmapChar_obj::createImage(){
            	HX_GC_STACKFRAME(&_hx_pos_f2041bfce8b13bac_60_createImage)
HXDLIN(  60)		return  ::starling::display::Image_obj::__alloc( HX_CTX ,this->_hx___texture);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapChar_obj,createImage,return )

int BitmapChar_obj::get_charID(){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_65_get_charID)
HXDLIN(  65)		return this->_hx___charID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapChar_obj,get_charID,return )

Float BitmapChar_obj::get_xOffset(){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_69_get_xOffset)
HXDLIN(  69)		return this->_hx___xOffset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapChar_obj,get_xOffset,return )

Float BitmapChar_obj::get_yOffset(){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_73_get_yOffset)
HXDLIN(  73)		return this->_hx___yOffset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapChar_obj,get_yOffset,return )

Float BitmapChar_obj::get_xAdvance(){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_77_get_xAdvance)
HXDLIN(  77)		return this->_hx___xAdvance;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapChar_obj,get_xAdvance,return )

 ::starling::textures::Texture BitmapChar_obj::get_texture(){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_81_get_texture)
HXDLIN(  81)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapChar_obj,get_texture,return )

Float BitmapChar_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_85_get_width)
HXDLIN(  85)		return this->_hx___texture->get_width();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapChar_obj,get_width,return )

Float BitmapChar_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_f2041bfce8b13bac_89_get_height)
HXDLIN(  89)		return this->_hx___texture->get_height();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapChar_obj,get_height,return )


hx::ObjectPtr< BitmapChar_obj > BitmapChar_obj::__new(int id, ::starling::textures::Texture texture,Float xOffset,Float yOffset,Float xAdvance) {
	hx::ObjectPtr< BitmapChar_obj > __this = new BitmapChar_obj();
	__this->__construct(id,texture,xOffset,yOffset,xAdvance);
	return __this;
}

hx::ObjectPtr< BitmapChar_obj > BitmapChar_obj::__alloc(hx::Ctx *_hx_ctx,int id, ::starling::textures::Texture texture,Float xOffset,Float yOffset,Float xAdvance) {
	BitmapChar_obj *__this = (BitmapChar_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapChar_obj), true, "starling.text.BitmapChar"));
	*(void **)__this = BitmapChar_obj::_hx_vtable;
	__this->__construct(id,texture,xOffset,yOffset,xAdvance);
	return __this;
}

BitmapChar_obj::BitmapChar_obj()
{
}

void BitmapChar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapChar);
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___charID,"__charID");
	HX_MARK_MEMBER_NAME(_hx___xOffset,"__xOffset");
	HX_MARK_MEMBER_NAME(_hx___yOffset,"__yOffset");
	HX_MARK_MEMBER_NAME(_hx___xAdvance,"__xAdvance");
	HX_MARK_MEMBER_NAME(_hx___kernings,"__kernings");
	HX_MARK_END_CLASS();
}

void BitmapChar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___charID,"__charID");
	HX_VISIT_MEMBER_NAME(_hx___xOffset,"__xOffset");
	HX_VISIT_MEMBER_NAME(_hx___yOffset,"__yOffset");
	HX_VISIT_MEMBER_NAME(_hx___xAdvance,"__xAdvance");
	HX_VISIT_MEMBER_NAME(_hx___kernings,"__kernings");
}

hx::Val BitmapChar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"charID") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_charID() ); }
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xOffset") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_xOffset() ); }
		if (HX_FIELD_EQ(inName,"yOffset") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_yOffset() ); }
		if (HX_FIELD_EQ(inName,"texture") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_texture() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__charID") ) { return hx::Val( _hx___charID ); }
		if (HX_FIELD_EQ(inName,"xAdvance") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_xAdvance() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"__xOffset") ) { return hx::Val( _hx___xOffset ); }
		if (HX_FIELD_EQ(inName,"__yOffset") ) { return hx::Val( _hx___yOffset ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__xAdvance") ) { return hx::Val( _hx___xAdvance ); }
		if (HX_FIELD_EQ(inName,"__kernings") ) { return hx::Val( _hx___kernings ); }
		if (HX_FIELD_EQ(inName,"addKerning") ) { return hx::Val( addKerning_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKerning") ) { return hx::Val( getKerning_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_charID") ) { return hx::Val( get_charID_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createImage") ) { return hx::Val( createImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_xOffset") ) { return hx::Val( get_xOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_yOffset") ) { return hx::Val( get_yOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_texture") ) { return hx::Val( get_texture_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_xAdvance") ) { return hx::Val( get_xAdvance_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BitmapChar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__charID") ) { _hx___charID=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__xOffset") ) { _hx___xOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__yOffset") ) { _hx___yOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__xAdvance") ) { _hx___xAdvance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__kernings") ) { _hx___kernings=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapChar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__charID","\x51","\xeb","\xa4","\x5f"));
	outFields->push(HX_HCSTRING("__xOffset","\x0b","\x07","\x32","\x94"));
	outFields->push(HX_HCSTRING("__yOffset","\xcc","\x7d","\xc7","\xbd"));
	outFields->push(HX_HCSTRING("__xAdvance","\x0a","\x22","\x3b","\x2f"));
	outFields->push(HX_HCSTRING("__kernings","\x47","\x2b","\xc4","\x23"));
	outFields->push(HX_HCSTRING("charID","\x31","\x80","\x75","\xb7"));
	outFields->push(HX_HCSTRING("xOffset","\x2b","\xb6","\xe3","\x12"));
	outFields->push(HX_HCSTRING("yOffset","\xec","\x2c","\x79","\x3c"));
	outFields->push(HX_HCSTRING("xAdvance","\xea","\xae","\x02","\x8c"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapChar_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(BitmapChar_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsInt,(int)offsetof(BitmapChar_obj,_hx___charID),HX_HCSTRING("__charID","\x51","\xeb","\xa4","\x5f")},
	{hx::fsFloat,(int)offsetof(BitmapChar_obj,_hx___xOffset),HX_HCSTRING("__xOffset","\x0b","\x07","\x32","\x94")},
	{hx::fsFloat,(int)offsetof(BitmapChar_obj,_hx___yOffset),HX_HCSTRING("__yOffset","\xcc","\x7d","\xc7","\xbd")},
	{hx::fsFloat,(int)offsetof(BitmapChar_obj,_hx___xAdvance),HX_HCSTRING("__xAdvance","\x0a","\x22","\x3b","\x2f")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(BitmapChar_obj,_hx___kernings),HX_HCSTRING("__kernings","\x47","\x2b","\xc4","\x23")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BitmapChar_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapChar_obj_sMemberFields[] = {
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__charID","\x51","\xeb","\xa4","\x5f"),
	HX_HCSTRING("__xOffset","\x0b","\x07","\x32","\x94"),
	HX_HCSTRING("__yOffset","\xcc","\x7d","\xc7","\xbd"),
	HX_HCSTRING("__xAdvance","\x0a","\x22","\x3b","\x2f"),
	HX_HCSTRING("__kernings","\x47","\x2b","\xc4","\x23"),
	HX_HCSTRING("addKerning","\xab","\xe6","\xc1","\x17"),
	HX_HCSTRING("getKerning","\xd6","\x40","\x99","\xff"),
	HX_HCSTRING("createImage","\xbf","\x56","\xe4","\xe6"),
	HX_HCSTRING("get_charID","\xfa","\xef","\xfc","\xa7"),
	HX_HCSTRING("get_xOffset","\x42","\x16","\xde","\x98"),
	HX_HCSTRING("get_yOffset","\x03","\x8d","\x73","\xc2"),
	HX_HCSTRING("get_xAdvance","\xf3","\x62","\x1c","\x41"),
	HX_HCSTRING("get_texture","\xf2","\x28","\xdb","\x24"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	::String(null()) };

static void BitmapChar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapChar_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapChar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapChar_obj::__mClass,"__mClass");
};

#endif

hx::Class BitmapChar_obj::__mClass;

void BitmapChar_obj::__register()
{
	hx::Object *dummy = new BitmapChar_obj;
	BitmapChar_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.text.BitmapChar","\x00","\x91","\x01","\x3c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BitmapChar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapChar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapChar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapChar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapChar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapChar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace text
