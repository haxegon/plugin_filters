// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MeshBatch
#include <starling/display/MeshBatch.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_text_BitmapDataEx
#include <starling/text/BitmapDataEx.h>
#endif
#ifndef INCLUDED_starling_text_ITextCompositor
#include <starling/text/ITextCompositor.h>
#endif
#ifndef INCLUDED_starling_text_TextFormat
#include <starling/text/TextFormat.h>
#endif
#ifndef INCLUDED_starling_text_TextOptions
#include <starling/text/TextOptions.h>
#endif
#ifndef INCLUDED_starling_text_TrueTypeCompositor
#include <starling/text/TrueTypeCompositor.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MeshSubset
#include <starling/utils/MeshSubset.h>
#endif
#ifndef INCLUDED_starling_utils_SystemUtil
#include <starling/utils/SystemUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_91de92a7e0dad791_42_new,"starling.text.TrueTypeCompositor","new",0xcd8b7316,"starling.text.TrueTypeCompositor.new","starling/text/TrueTypeCompositor.hx",42,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_46_dispose,"starling.text.TrueTypeCompositor","dispose",0xa4eab655,"starling.text.TrueTypeCompositor.dispose","starling/text/TrueTypeCompositor.hx",46,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_60_fillMeshBatch,"starling.text.TrueTypeCompositor","fillMeshBatch",0x3d19fdc0,"starling.text.TrueTypeCompositor.fillMeshBatch","starling/text/TrueTypeCompositor.hx",60,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_51_fillMeshBatch,"starling.text.TrueTypeCompositor","fillMeshBatch",0x3d19fdc0,"starling.text.TrueTypeCompositor.fillMeshBatch","starling/text/TrueTypeCompositor.hx",51,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_88_clearMeshBatch,"starling.text.TrueTypeCompositor","clearMeshBatch",0x657fd44a,"starling.text.TrueTypeCompositor.clearMeshBatch","starling/text/TrueTypeCompositor.hx",88,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_99_renderText,"starling.text.TrueTypeCompositor","renderText",0xd7c1872d,"starling.text.TrueTypeCompositor.renderText","starling/text/TrueTypeCompositor.hx",99,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_184_autoScaleNativeTextField,"starling.text.TrueTypeCompositor","autoScaleNativeTextField",0xaced2f65,"starling.text.TrueTypeCompositor.autoScaleNativeTextField","starling/text/TrueTypeCompositor.hx",184,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_35_boot,"starling.text.TrueTypeCompositor","boot",0x049240bc,"starling.text.TrueTypeCompositor.boot","starling/text/TrueTypeCompositor.hx",35,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_36_boot,"starling.text.TrueTypeCompositor","boot",0x049240bc,"starling.text.TrueTypeCompositor.boot","starling/text/TrueTypeCompositor.hx",36,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_37_boot,"starling.text.TrueTypeCompositor","boot",0x049240bc,"starling.text.TrueTypeCompositor.boot","starling/text/TrueTypeCompositor.hx",37,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_91de92a7e0dad791_38_boot,"starling.text.TrueTypeCompositor","boot",0x049240bc,"starling.text.TrueTypeCompositor.boot","starling/text/TrueTypeCompositor.hx",38,0xcf1508ba)
namespace starling{
namespace text{

void TrueTypeCompositor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_91de92a7e0dad791_42_new)
            	}

Dynamic TrueTypeCompositor_obj::__CreateEmpty() { return new TrueTypeCompositor_obj; }

void *TrueTypeCompositor_obj::_hx_vtable = 0;

Dynamic TrueTypeCompositor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TrueTypeCompositor_obj > _hx_result = new TrueTypeCompositor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TrueTypeCompositor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1ea7104a;
}

static ::starling::text::ITextCompositor_obj _hx_starling_text_TrueTypeCompositor__hx_starling_text_ITextCompositor= {
	( void (hx::Object::*)( ::starling::display::MeshBatch,Float,Float,::String, ::starling::text::TextFormat, ::starling::text::TextOptions))&::starling::text::TrueTypeCompositor_obj::fillMeshBatch,
	( void (hx::Object::*)( ::starling::display::MeshBatch))&::starling::text::TrueTypeCompositor_obj::clearMeshBatch,
	( void (hx::Object::*)())&::starling::text::TrueTypeCompositor_obj::dispose,
};

void *TrueTypeCompositor_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x09b413e2: return &_hx_starling_text_TrueTypeCompositor__hx_starling_text_ITextCompositor;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void TrueTypeCompositor_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_91de92a7e0dad791_46_dispose)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TrueTypeCompositor_obj,dispose,(void))

void TrueTypeCompositor_obj::fillMeshBatch( ::starling::display::MeshBatch meshBatch,Float width,Float height,::String text, ::starling::text::TextFormat format, ::starling::text::TextOptions options){
            		HX_BEGIN_LOCAL_FUNC_S7(hx::LocalFunc,_hx_Closure_0, ::starling::text::TrueTypeCompositor,_gthis,::Array< ::Dynamic>,bitmapData, ::starling::text::TextOptions,options,Float,height,::String,text, ::starling::text::TextFormat,format,Float,width) HXARGC(1)
            		void _hx_run( ::starling::textures::ConcreteTexture textureRoot){
            			HX_STACKFRAME(&_hx_pos_91de92a7e0dad791_60_fillMeshBatch)
HXLINE(  61)			 ::starling::text::BitmapDataEx _hx_tmp1 = _gthis->renderText(width,height,text,format,options);
HXDLIN(  61)			bitmapData[(int)0] = _hx_tmp1;
HXLINE(  62)			textureRoot->uploadBitmapData(bitmapData->__get((int)0).StaticCast<  ::starling::text::BitmapDataEx >(),null());
HXLINE(  63)			bitmapData->__get((int)0).StaticCast<  ::starling::text::BitmapDataEx >()->dispose();
HXLINE(  64)			bitmapData[(int)0] = null();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_91de92a7e0dad791_51_fillMeshBatch)
HXLINE(  49)		 ::starling::text::TrueTypeCompositor _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  52)		bool _hx_tmp;
HXDLIN(  52)		if (hx::IsNotNull( text )) {
HXLINE(  52)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  52)			_hx_tmp = true;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  52)			return;
            		}
HXLINE(  54)		 ::starling::textures::Texture texture;
HXLINE(  55)		::String textureFormat = options->get_textureFormat();
HXLINE(  56)		::Array< ::Dynamic> bitmapData = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->renderText(width,height,text,format,options));
HXLINE(  58)		 ::starling::text::BitmapDataEx bitmapData1 = bitmapData->__get((int)0).StaticCast<  ::starling::text::BitmapDataEx >();
HXDLIN(  58)		Float texture1 = bitmapData->__get((int)0).StaticCast<  ::starling::text::BitmapDataEx >()->get_scale();
HXDLIN(  58)		texture = ::starling::textures::Texture_obj::fromBitmapData(bitmapData1,false,false,texture1,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(textureFormat),null(),null());
HXLINE(  59)		texture->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_0(_gthis,bitmapData,options,height,text,format,width)));
HXLINE(  67)		bitmapData->__get((int)0).StaticCast<  ::starling::text::BitmapDataEx >()->dispose();
HXLINE(  68)		bitmapData[(int)0] = null();
HXLINE(  70)		::starling::text::TrueTypeCompositor_obj::sHelperQuad->set_texture(texture);
HXLINE(  71)		::starling::text::TrueTypeCompositor_obj::sHelperQuad->readjustSize(null(),null());
HXLINE(  73)		if ((format->get_horizontalAlign() == HX_("left",07,08,b0,47))) {
HXLINE(  73)			::starling::text::TrueTypeCompositor_obj::sHelperQuad->set_x((int)0);
            		}
            		else {
HXLINE(  74)			if ((format->get_horizontalAlign() == HX_("center",d5,25,db,05))) {
HXLINE(  74)				 ::starling::display::Quad _hx_tmp2 = ::starling::text::TrueTypeCompositor_obj::sHelperQuad;
HXDLIN(  74)				Float _hx_tmp3 = texture->get_width();
HXDLIN(  74)				_hx_tmp2->set_x(::Std_obj::_hx_int(((Float)(width - _hx_tmp3) / (Float)(int)2)));
            			}
            			else {
HXLINE(  75)				 ::starling::display::Quad _hx_tmp4 = ::starling::text::TrueTypeCompositor_obj::sHelperQuad;
HXDLIN(  75)				Float _hx_tmp5 = texture->get_width();
HXDLIN(  75)				_hx_tmp4->set_x((width - _hx_tmp5));
            			}
            		}
HXLINE(  77)		if ((format->get_verticalAlign() == HX_("top",95,66,58,00))) {
HXLINE(  77)			::starling::text::TrueTypeCompositor_obj::sHelperQuad->set_y((int)0);
            		}
            		else {
HXLINE(  78)			if ((format->get_verticalAlign() == HX_("center",d5,25,db,05))) {
HXLINE(  78)				 ::starling::display::Quad _hx_tmp6 = ::starling::text::TrueTypeCompositor_obj::sHelperQuad;
HXDLIN(  78)				Float _hx_tmp7 = texture->get_height();
HXDLIN(  78)				_hx_tmp6->set_y(::Std_obj::_hx_int(((Float)(height - _hx_tmp7) / (Float)(int)2)));
            			}
            			else {
HXLINE(  79)				 ::starling::display::Quad _hx_tmp8 = ::starling::text::TrueTypeCompositor_obj::sHelperQuad;
HXDLIN(  79)				Float _hx_tmp9 = texture->get_height();
HXDLIN(  79)				_hx_tmp8->set_y((height - _hx_tmp9));
            			}
            		}
HXLINE(  81)		meshBatch->addMesh(::starling::text::TrueTypeCompositor_obj::sHelperQuad,null(),null(),null(),null());
HXLINE(  83)		::starling::text::TrueTypeCompositor_obj::sHelperQuad->set_texture(null());
            	}


HX_DEFINE_DYNAMIC_FUNC6(TrueTypeCompositor_obj,fillMeshBatch,(void))

void TrueTypeCompositor_obj::clearMeshBatch( ::starling::display::MeshBatch meshBatch){
            	HX_STACKFRAME(&_hx_pos_91de92a7e0dad791_88_clearMeshBatch)
HXLINE(  89)		meshBatch->clear();
HXLINE(  90)		if (hx::IsNotNull( meshBatch->get_texture() )) {
HXLINE(  92)			meshBatch->get_texture()->dispose();
HXLINE(  93)			meshBatch->set_texture(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TrueTypeCompositor_obj,clearMeshBatch,(void))

 ::starling::text::BitmapDataEx TrueTypeCompositor_obj::renderText(Float width,Float height,::String text, ::starling::text::TextFormat format, ::starling::text::TextOptions options){
            	HX_GC_STACKFRAME(&_hx_pos_91de92a7e0dad791_99_renderText)
HXLINE( 100)		Float scale = options->get_textureScale();
HXLINE( 101)		Float scaledWidth = (width * scale);
HXLINE( 102)		Float scaledHeight = (height * scale);
HXLINE( 103)		::String hAlign = format->get_horizontalAlign();
HXLINE( 105)		format->toNativeFormat(::starling::text::TrueTypeCompositor_obj::sNativeFormat);
HXLINE( 107)		 ::Dynamic _hx_tmp;
HXDLIN( 107)		if (hx::IsNull( ::starling::text::TrueTypeCompositor_obj::sNativeFormat->size )) {
HXLINE( 107)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 107)			_hx_tmp = ::starling::text::TrueTypeCompositor_obj::sNativeFormat->size;
            		}
HXDLIN( 107)		::starling::text::TrueTypeCompositor_obj::sNativeFormat->size = ::Std_obj::_hx_int((_hx_tmp * scale));
HXLINE( 108)		 ::openfl::text::TextField _hx_tmp1 = ::starling::text::TrueTypeCompositor_obj::sNativeTextField;
HXDLIN( 108)		::String _hx_tmp2 = format->get_font();
HXDLIN( 108)		bool _hx_tmp3 = format->get_bold();
HXDLIN( 108)		_hx_tmp1->set_embedFonts(::starling::utils::SystemUtil_obj::isEmbeddedFont(_hx_tmp2,_hx_tmp3,format->get_italic(),null()));
HXLINE( 112)		::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_defaultTextFormat(::starling::text::TrueTypeCompositor_obj::sNativeFormat);
HXLINE( 116)		::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_width(scaledWidth);
HXLINE( 117)		::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_height(scaledHeight);
HXLINE( 118)		::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_antiAliasType((int)0);
HXLINE( 119)		::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_selectable(false);
HXLINE( 120)		::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_multiline(true);
HXLINE( 121)		 ::openfl::text::TextField _hx_tmp4 = ::starling::text::TrueTypeCompositor_obj::sNativeTextField;
HXDLIN( 121)		_hx_tmp4->set_wordWrap(options->get_wordWrap());
HXLINE( 123)		if (options->get_isHtmlText()) {
HXLINE( 123)			::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_htmlText(text);
            		}
            		else {
HXLINE( 124)			::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_text(text);
            		}
HXLINE( 126)		if (options->get_autoScale()) {
HXLINE( 127)			 ::openfl::text::TextField _hx_tmp5 = ::starling::text::TrueTypeCompositor_obj::sNativeTextField;
HXDLIN( 127)			this->autoScaleNativeTextField(_hx_tmp5,text,options->get_isHtmlText());
            		}
HXLINE( 129)		int minTextureSize = (int)1;
HXLINE( 130)		int maxTextureSize = ::starling::textures::Texture_obj::get_maxSize();
HXLINE( 131)		Float paddingX = (options->get_padding() * scale);
HXLINE( 132)		Float paddingY = (options->get_padding() * scale);
HXLINE( 133)		Float textWidth = (::starling::text::TrueTypeCompositor_obj::sNativeTextField->get_textWidth() + (int)4);
HXLINE( 134)		Float textHeight = (::starling::text::TrueTypeCompositor_obj::sNativeTextField->get_textHeight() + (int)4);
HXLINE( 135)		int bitmapWidth = ::Math_obj::ceil(textWidth);
HXDLIN( 135)		int bitmapWidth1 = ::Std_obj::_hx_int((bitmapWidth + ((int)2 * paddingX)));
HXLINE( 136)		int bitmapHeight = ::Math_obj::ceil(textHeight);
HXDLIN( 136)		int bitmapHeight1 = ::Std_obj::_hx_int((bitmapHeight + ((int)2 * paddingY)));
HXLINE( 139)		if ((bitmapWidth1 > scaledWidth)) {
HXLINE( 141)			paddingX = ::starling::utils::MathUtil_obj::max((int)0,((Float)(scaledWidth - textWidth) / (Float)(int)2));
HXLINE( 142)			bitmapWidth1 = ::Math_obj::ceil(scaledWidth);
            		}
HXLINE( 144)		if ((bitmapHeight1 > scaledHeight)) {
HXLINE( 146)			paddingY = ::starling::utils::MathUtil_obj::max((int)0,((Float)(scaledHeight - textHeight) / (Float)(int)2));
HXLINE( 147)			bitmapHeight1 = ::Math_obj::ceil(scaledHeight);
            		}
HXLINE( 151)		if (options->get_isHtmlText()) {
HXLINE( 151)			bitmapWidth1 = ::Std_obj::_hx_int(scaledWidth);
HXDLIN( 151)			textWidth = bitmapWidth1;
            		}
HXLINE( 154)		if ((bitmapWidth1 < minTextureSize)) {
HXLINE( 154)			bitmapWidth1 = (int)1;
            		}
HXLINE( 155)		if ((bitmapHeight1 < minTextureSize)) {
HXLINE( 155)			bitmapHeight1 = (int)1;
            		}
HXLINE( 156)		bool _hx_tmp6;
HXDLIN( 156)		if ((bitmapHeight1 <= maxTextureSize)) {
HXLINE( 156)			_hx_tmp6 = (bitmapWidth1 > maxTextureSize);
            		}
            		else {
HXLINE( 156)			_hx_tmp6 = true;
            		}
HXDLIN( 156)		if (_hx_tmp6) {
HXLINE( 158)			{
HXLINE( 158)				 ::starling::text::TextOptions _g = options;
HXDLIN( 158)				Float _hx_tmp7 = _g->get_textureScale();
HXDLIN( 158)				_g->set_textureScale((_hx_tmp7 * ((Float)maxTextureSize / (Float)::Math_obj::max(bitmapWidth1,bitmapHeight1))));
            			}
HXLINE( 159)			return this->renderText(width,height,text,format,options);
            		}
            		else {
HXLINE( 163)			Float offsetX = -(paddingX);
HXLINE( 164)			Float offsetY = -(paddingY);
HXLINE( 166)			if (!(options->get_isHtmlText())) {
HXLINE( 168)				if ((hAlign == HX_("right",dc,0b,64,e9))) {
HXLINE( 168)					offsetX = ((scaledWidth - textWidth) - paddingX);
            				}
            				else {
HXLINE( 169)					if ((hAlign == HX_("center",d5,25,db,05))) {
HXLINE( 169)						offsetX = (((Float)(scaledWidth - textWidth) / (Float)((Float)2.0)) - paddingX);
            					}
            				}
            			}
HXLINE( 173)			 ::starling::text::BitmapDataEx bitmapData =  ::starling::text::BitmapDataEx_obj::__alloc( HX_CTX ,bitmapWidth1,bitmapHeight1,null(),null());
HXLINE( 174)			::starling::text::TrueTypeCompositor_obj::sHelperMatrix->setTo((int)1,(int)0,(int)0,(int)1,-(offsetX),-(offsetY));
HXLINE( 175)			bitmapData->draw(::starling::text::TrueTypeCompositor_obj::sNativeTextField,::starling::text::TrueTypeCompositor_obj::sHelperMatrix,null(),null(),null(),null());
HXLINE( 176)			bitmapData->set_scale(scale);
HXLINE( 177)			::starling::text::TrueTypeCompositor_obj::sNativeTextField->set_text(HX_("",00,00,00,00));
HXLINE( 178)			return bitmapData;
            		}
HXLINE( 156)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC5(TrueTypeCompositor_obj,renderText,return )

void TrueTypeCompositor_obj::autoScaleNativeTextField( ::openfl::text::TextField textField,::String text,bool isHtmlText){
            	HX_STACKFRAME(&_hx_pos_91de92a7e0dad791_184_autoScaleNativeTextField)
HXLINE( 185)		 ::openfl::text::TextFormat textFormat = textField->get_defaultTextFormat();
HXLINE( 186)		int maxTextWidth = (::Std_obj::_hx_int(textField->get_width()) - (int)4);
HXLINE( 187)		int maxTextHeight = (::Std_obj::_hx_int(textField->get_height()) - (int)4);
HXLINE( 188)		Float size;
HXDLIN( 188)		if (hx::IsNull( textFormat->size )) {
HXLINE( 188)			size = (int)0;
            		}
            		else {
HXLINE( 188)			size = textFormat->size;
            		}
HXLINE( 190)		while(true){
HXLINE( 190)			bool _hx_tmp;
HXDLIN( 190)			if (!((textField->get_textWidth() > maxTextWidth))) {
HXLINE( 190)				_hx_tmp = (textField->get_textHeight() > maxTextHeight);
            			}
            			else {
HXLINE( 190)				_hx_tmp = true;
            			}
HXDLIN( 190)			if (!(_hx_tmp)) {
HXLINE( 190)				goto _hx_goto_6;
            			}
HXLINE( 192)			if ((size <= (int)4)) {
HXLINE( 192)				goto _hx_goto_6;
            			}
HXLINE( 194)			size = (size - (int)1);
HXDLIN( 194)			textFormat->size = ::Std_obj::_hx_int((size + (int)1));
HXLINE( 195)			textField->set_defaultTextFormat(textFormat);
HXLINE( 197)			if (isHtmlText) {
HXLINE( 197)				textField->set_htmlText(text);
            			}
            			else {
HXLINE( 198)				textField->set_text(text);
            			}
            		}
            		_hx_goto_6:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TrueTypeCompositor_obj,autoScaleNativeTextField,(void))

 ::openfl::geom::Matrix TrueTypeCompositor_obj::sHelperMatrix;

 ::starling::display::Quad TrueTypeCompositor_obj::sHelperQuad;

 ::openfl::text::TextField TrueTypeCompositor_obj::sNativeTextField;

 ::openfl::text::TextFormat TrueTypeCompositor_obj::sNativeFormat;


hx::ObjectPtr< TrueTypeCompositor_obj > TrueTypeCompositor_obj::__new() {
	hx::ObjectPtr< TrueTypeCompositor_obj > __this = new TrueTypeCompositor_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TrueTypeCompositor_obj > TrueTypeCompositor_obj::__alloc(hx::Ctx *_hx_ctx) {
	TrueTypeCompositor_obj *__this = (TrueTypeCompositor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TrueTypeCompositor_obj), false, "starling.text.TrueTypeCompositor"));
	*(void **)__this = TrueTypeCompositor_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TrueTypeCompositor_obj::TrueTypeCompositor_obj()
{
}

hx::Val TrueTypeCompositor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderText") ) { return hx::Val( renderText_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fillMeshBatch") ) { return hx::Val( fillMeshBatch_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"clearMeshBatch") ) { return hx::Val( clearMeshBatch_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"autoScaleNativeTextField") ) { return hx::Val( autoScaleNativeTextField_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TrueTypeCompositor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sHelperQuad") ) { outValue = ( sHelperQuad ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sHelperMatrix") ) { outValue = ( sHelperMatrix ); return true; }
		if (HX_FIELD_EQ(inName,"sNativeFormat") ) { outValue = ( sNativeFormat ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sNativeTextField") ) { outValue = ( sNativeTextField ); return true; }
	}
	return false;
}

bool TrueTypeCompositor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sHelperQuad") ) { sHelperQuad=ioValue.Cast<  ::starling::display::Quad >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sHelperMatrix") ) { sHelperMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		if (HX_FIELD_EQ(inName,"sNativeFormat") ) { sNativeFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sNativeTextField") ) { sNativeTextField=ioValue.Cast<  ::openfl::text::TextField >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TrueTypeCompositor_obj_sMemberStorageInfo = 0;
static hx::StaticInfo TrueTypeCompositor_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &TrueTypeCompositor_obj::sHelperMatrix,HX_HCSTRING("sHelperMatrix","\x62","\x9b","\xea","\x19")},
	{hx::fsObject /*::starling::display::Quad*/ ,(void *) &TrueTypeCompositor_obj::sHelperQuad,HX_HCSTRING("sHelperQuad","\xa8","\x63","\x63","\xc0")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(void *) &TrueTypeCompositor_obj::sNativeTextField,HX_HCSTRING("sNativeTextField","\x03","\x51","\xf1","\xb4")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TrueTypeCompositor_obj::sNativeFormat,HX_HCSTRING("sNativeFormat","\x41","\x45","\x30","\xd0")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TrueTypeCompositor_obj_sMemberFields[] = {
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("fillMeshBatch","\x8a","\x9b","\x23","\xc7"),
	HX_HCSTRING("clearMeshBatch","\x40","\x47","\xe0","\xa3"),
	HX_HCSTRING("renderText","\x23","\xc7","\x03","\xea"),
	HX_HCSTRING("autoScaleNativeTextField","\xdb","\x31","\xcb","\x84"),
	::String(null()) };

static void TrueTypeCompositor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TrueTypeCompositor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TrueTypeCompositor_obj::sHelperMatrix,"sHelperMatrix");
	HX_MARK_MEMBER_NAME(TrueTypeCompositor_obj::sHelperQuad,"sHelperQuad");
	HX_MARK_MEMBER_NAME(TrueTypeCompositor_obj::sNativeTextField,"sNativeTextField");
	HX_MARK_MEMBER_NAME(TrueTypeCompositor_obj::sNativeFormat,"sNativeFormat");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TrueTypeCompositor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TrueTypeCompositor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TrueTypeCompositor_obj::sHelperMatrix,"sHelperMatrix");
	HX_VISIT_MEMBER_NAME(TrueTypeCompositor_obj::sHelperQuad,"sHelperQuad");
	HX_VISIT_MEMBER_NAME(TrueTypeCompositor_obj::sNativeTextField,"sNativeTextField");
	HX_VISIT_MEMBER_NAME(TrueTypeCompositor_obj::sNativeFormat,"sNativeFormat");
};

#endif

hx::Class TrueTypeCompositor_obj::__mClass;

static ::String TrueTypeCompositor_obj_sStaticFields[] = {
	HX_HCSTRING("sHelperMatrix","\x62","\x9b","\xea","\x19"),
	HX_HCSTRING("sHelperQuad","\xa8","\x63","\x63","\xc0"),
	HX_HCSTRING("sNativeTextField","\x03","\x51","\xf1","\xb4"),
	HX_HCSTRING("sNativeFormat","\x41","\x45","\x30","\xd0"),
	::String(null())
};

void TrueTypeCompositor_obj::__register()
{
	hx::Object *dummy = new TrueTypeCompositor_obj;
	TrueTypeCompositor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.text.TrueTypeCompositor","\x24","\xf0","\x2a","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TrueTypeCompositor_obj::__GetStatic;
	__mClass->mSetStaticField = &TrueTypeCompositor_obj::__SetStatic;
	__mClass->mMarkFunc = TrueTypeCompositor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TrueTypeCompositor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TrueTypeCompositor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TrueTypeCompositor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TrueTypeCompositor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrueTypeCompositor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrueTypeCompositor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TrueTypeCompositor_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_91de92a7e0dad791_35_boot)
HXDLIN(  35)		sHelperMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_91de92a7e0dad791_36_boot)
HXDLIN(  36)		sHelperQuad =  ::starling::display::Quad_obj::__alloc( HX_CTX ,(int)100,(int)100,null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_91de92a7e0dad791_37_boot)
HXDLIN(  37)		sNativeTextField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_91de92a7e0dad791_38_boot)
HXDLIN(  38)		sNativeFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}
}

} // end namespace starling
} // end namespace text
