// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_starling_text_BitmapDataEx
#include <starling/text/BitmapDataEx.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0662b58adf5ce720_203_new,"starling.text.BitmapDataEx","new",0x9ff7a259,"starling.text.BitmapDataEx.new","starling/text/TrueTypeCompositor.hx",203,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_0662b58adf5ce720_213_get_scale,"starling.text.BitmapDataEx","get_scale",0xb0af3d9a,"starling.text.BitmapDataEx.get_scale","starling/text/TrueTypeCompositor.hx",213,0xcf1508ba)
HX_LOCAL_STACK_FRAME(_hx_pos_0662b58adf5ce720_214_set_scale,"starling.text.BitmapDataEx","set_scale",0x940029a6,"starling.text.BitmapDataEx.set_scale","starling/text/TrueTypeCompositor.hx",214,0xcf1508ba)
namespace starling{
namespace text{

void BitmapDataEx_obj::__construct(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor){
bool transparent = __o_transparent.Default(true);
int fillColor = __o_fillColor.Default(0);
            	HX_STACKFRAME(&_hx_pos_0662b58adf5ce720_203_new)
HXLINE( 205)		this->_scale = ((Float)1.0);
HXLINE( 209)		super::__construct(width,height,transparent,fillColor);
            	}

Dynamic BitmapDataEx_obj::__CreateEmpty() { return new BitmapDataEx_obj; }

void *BitmapDataEx_obj::_hx_vtable = 0;

Dynamic BitmapDataEx_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapDataEx_obj > _hx_result = new BitmapDataEx_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool BitmapDataEx_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x108144c5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x108144c5;
	} else {
		return inClassId==(int)0x28c743a7;
	}
}

Float BitmapDataEx_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_0662b58adf5ce720_213_get_scale)
HXDLIN( 213)		return this->_scale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapDataEx_obj,get_scale,return )

Float BitmapDataEx_obj::set_scale(Float value){
            	HX_STACKFRAME(&_hx_pos_0662b58adf5ce720_214_set_scale)
HXDLIN( 214)		return (this->_scale = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapDataEx_obj,set_scale,return )


hx::ObjectPtr< BitmapDataEx_obj > BitmapDataEx_obj::__new(int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	hx::ObjectPtr< BitmapDataEx_obj > __this = new BitmapDataEx_obj();
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

hx::ObjectPtr< BitmapDataEx_obj > BitmapDataEx_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< bool >  __o_transparent,hx::Null< int >  __o_fillColor) {
	BitmapDataEx_obj *__this = (BitmapDataEx_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapDataEx_obj), true, "starling.text.BitmapDataEx"));
	*(void **)__this = BitmapDataEx_obj::_hx_vtable;
	__this->__construct(width,height,__o_transparent,__o_fillColor);
	return __this;
}

BitmapDataEx_obj::BitmapDataEx_obj()
{
}

hx::Val BitmapDataEx_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scale() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_scale") ) { return hx::Val( _scale ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BitmapDataEx_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_scale") ) { _scale=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapDataEx_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapDataEx_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BitmapDataEx_obj,_scale),HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BitmapDataEx_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapDataEx_obj_sMemberFields[] = {
	HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	::String(null()) };

static void BitmapDataEx_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapDataEx_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapDataEx_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapDataEx_obj::__mClass,"__mClass");
};

#endif

hx::Class BitmapDataEx_obj::__mClass;

void BitmapDataEx_obj::__register()
{
	hx::Object *dummy = new BitmapDataEx_obj;
	BitmapDataEx_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.text.BitmapDataEx","\xe7","\x81","\x57","\xd7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BitmapDataEx_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapDataEx_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapDataEx_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapDataEx_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapDataEx_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapDataEx_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace text
