// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_text_TextField
#include <starling/text/TextField.h>
#endif
#ifndef INCLUDED_starling_text_TextOptions
#include <starling/text/TextOptions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_45_new,"starling.text.TextOptions","new",0x3e3e1728,"starling.text.TextOptions.new","starling/text/TextOptions.hx",45,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_58_copyFrom,"starling.text.TextOptions","copyFrom",0xccd92ff7,"starling.text.TextOptions.copyFrom","starling/text/TextOptions.hx",58,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_75_clone,"starling.text.TextOptions","clone",0x8a829c25,"starling.text.TextOptions.clone","starling/text/TextOptions.hx",75,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_85_get_wordWrap,"starling.text.TextOptions","get_wordWrap",0x01bf68f5,"starling.text.TextOptions.get_wordWrap","starling/text/TextOptions.hx",85,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_86_set_wordWrap,"starling.text.TextOptions","set_wordWrap",0x16b88c69,"starling.text.TextOptions.set_wordWrap","starling/text/TextOptions.hx",86,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_100_get_autoSize,"starling.text.TextOptions","get_autoSize",0x305de411,"starling.text.TextOptions.get_autoSize","starling/text/TextOptions.hx",100,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_101_set_autoSize,"starling.text.TextOptions","set_autoSize",0x45570785,"starling.text.TextOptions.set_autoSize","starling/text/TextOptions.hx",101,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_113_get_autoScale,"starling.text.TextOptions","get_autoScale",0x1dbf713a,"starling.text.TextOptions.get_autoScale","starling/text/TextOptions.hx",113,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_114_set_autoScale,"starling.text.TextOptions","set_autoScale",0x62c55346,"starling.text.TextOptions.set_autoScale","starling/text/TextOptions.hx",114,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_127_get_isHtmlText,"starling.text.TextOptions","get_isHtmlText",0xccb9d843,"starling.text.TextOptions.get_isHtmlText","starling/text/TextOptions.hx",127,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_128_set_isHtmlText,"starling.text.TextOptions","set_isHtmlText",0xecd9c0b7,"starling.text.TextOptions.set_isHtmlText","starling/text/TextOptions.hx",128,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_151_get_textureScale,"starling.text.TextOptions","get_textureScale",0xca188470,"starling.text.TextOptions.get_textureScale","starling/text/TextOptions.hx",151,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_152_set_textureScale,"starling.text.TextOptions","set_textureScale",0x205a71e4,"starling.text.TextOptions.set_textureScale","starling/text/TextOptions.hx",152,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_157_get_textureFormat,"starling.text.TextOptions","get_textureFormat",0xccc40291,"starling.text.TextOptions.get_textureFormat","starling/text/TextOptions.hx",157,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_158_set_textureFormat,"starling.text.TextOptions","set_textureFormat",0xf031da9d,"starling.text.TextOptions.set_textureFormat","starling/text/TextOptions.hx",158,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_171_get_padding,"starling.text.TextOptions","get_padding",0x5db208b0,"starling.text.TextOptions.get_padding","starling/text/TextOptions.hx",171,0x3acb49a8)
HX_LOCAL_STACK_FRAME(_hx_pos_3c21cd54e9f131bf_173_set_padding,"starling.text.TextOptions","set_padding",0x681f0fbc,"starling.text.TextOptions.set_padding","starling/text/TextOptions.hx",173,0x3acb49a8)
namespace starling{
namespace text{

void TextOptions_obj::__construct(hx::Null< bool >  __o_wordWrap,hx::Null< bool >  __o_autoScale){
bool wordWrap = __o_wordWrap.Default(true);
bool autoScale = __o_autoScale.Default(false);
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_45_new)
HXLINE(  46)		super::__construct();
HXLINE(  47)		this->_hx___wordWrap = wordWrap;
HXLINE(  48)		this->_hx___autoScale = autoScale;
HXLINE(  49)		this->_hx___autoSize = HX_("none",b8,12,0a,49);
HXLINE(  50)		Float _hx_tmp;
HXDLIN(  50)		if (hx::IsNotNull( ::starling::core::Starling_obj::get_current() )) {
HXLINE(  50)			_hx_tmp = ::starling::core::Starling_obj::get_current()->get_contentScaleFactor();
            		}
            		else {
HXLINE(  50)			_hx_tmp = (int)1;
            		}
HXDLIN(  50)		this->_hx___textureScale = _hx_tmp;
HXLINE(  51)		this->_hx___textureFormat = ::starling::text::TextField_obj::get_defaultTextureFormat();
HXLINE(  52)		this->_hx___isHtmlText = false;
HXLINE(  53)		this->_hx___padding = ((Float)0.0);
            	}

Dynamic TextOptions_obj::__CreateEmpty() { return new TextOptions_obj; }

void *TextOptions_obj::_hx_vtable = 0;

Dynamic TextOptions_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextOptions_obj > _hx_result = new TextOptions_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TextOptions_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
	} else {
		return inClassId==(int)0x629c9bfc;
	}
}

void TextOptions_obj::copyFrom( ::starling::text::TextOptions options){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_58_copyFrom)
HXLINE(  59)		this->_hx___wordWrap = options->_hx___wordWrap;
HXLINE(  60)		this->_hx___autoScale = options->_hx___autoScale;
HXLINE(  61)		this->_hx___autoSize = options->_hx___autoSize;
HXLINE(  62)		this->_hx___isHtmlText = options->_hx___isHtmlText;
HXLINE(  63)		this->_hx___textureScale = options->_hx___textureScale;
HXLINE(  64)		this->_hx___textureFormat = options->_hx___textureFormat;
HXLINE(  68)		this->_hx___padding = options->_hx___padding;
HXLINE(  70)		this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextOptions_obj,copyFrom,(void))

 ::starling::text::TextOptions TextOptions_obj::clone(){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_75_clone)
HXLINE(  76)		hx::Class actualClass = ::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this));
HXLINE(  77)		 ::starling::text::TextOptions clone = ( ( ::starling::text::TextOptions)(::Type_obj::createInstance(actualClass,::cpp::VirtualArray_obj::__new(0))) );
HXLINE(  78)		clone->copyFrom(hx::ObjectPtr<OBJ_>(this));
HXLINE(  79)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextOptions_obj,clone,return )

bool TextOptions_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_85_get_wordWrap)
HXDLIN(  85)		return this->_hx___wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextOptions_obj,get_wordWrap,return )

bool TextOptions_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_86_set_wordWrap)
HXLINE(  87)		if ((this->_hx___wordWrap != value)) {
HXLINE(  89)			this->_hx___wordWrap = value;
HXLINE(  90)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE(  92)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextOptions_obj,set_wordWrap,return )

::String TextOptions_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_100_get_autoSize)
HXDLIN( 100)		return this->_hx___autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextOptions_obj,get_autoSize,return )

::String TextOptions_obj::set_autoSize(::String value){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_101_set_autoSize)
HXLINE( 102)		if ((this->_hx___autoSize != value)) {
HXLINE( 104)			this->_hx___autoSize = value;
HXLINE( 105)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 107)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextOptions_obj,set_autoSize,return )

bool TextOptions_obj::get_autoScale(){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_113_get_autoScale)
HXDLIN( 113)		return this->_hx___autoScale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextOptions_obj,get_autoScale,return )

bool TextOptions_obj::set_autoScale(bool value){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_114_set_autoScale)
HXLINE( 115)		if ((this->_hx___autoScale != value)) {
HXLINE( 117)			this->_hx___autoScale = value;
HXLINE( 118)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 120)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextOptions_obj,set_autoScale,return )

bool TextOptions_obj::get_isHtmlText(){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_127_get_isHtmlText)
HXDLIN( 127)		return this->_hx___isHtmlText;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextOptions_obj,get_isHtmlText,return )

bool TextOptions_obj::set_isHtmlText(bool value){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_128_set_isHtmlText)
HXLINE( 129)		if ((this->_hx___isHtmlText != value)) {
HXLINE( 131)			this->_hx___isHtmlText = value;
HXLINE( 132)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 134)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextOptions_obj,set_isHtmlText,return )

Float TextOptions_obj::get_textureScale(){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_151_get_textureScale)
HXDLIN( 151)		return this->_hx___textureScale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextOptions_obj,get_textureScale,return )

Float TextOptions_obj::set_textureScale(Float value){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_152_set_textureScale)
HXDLIN( 152)		return (this->_hx___textureScale = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextOptions_obj,set_textureScale,return )

::String TextOptions_obj::get_textureFormat(){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_157_get_textureFormat)
HXDLIN( 157)		return this->_hx___textureFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextOptions_obj,get_textureFormat,return )

::String TextOptions_obj::set_textureFormat(::String value){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_158_set_textureFormat)
HXLINE( 159)		if ((this->_hx___textureFormat != value)) {
HXLINE( 161)			this->_hx___textureFormat = value;
HXLINE( 162)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 164)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextOptions_obj,set_textureFormat,return )

Float TextOptions_obj::get_padding(){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_171_get_padding)
HXDLIN( 171)		return this->_hx___padding;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextOptions_obj,get_padding,return )

Float TextOptions_obj::set_padding(Float value){
            	HX_STACKFRAME(&_hx_pos_3c21cd54e9f131bf_173_set_padding)
HXLINE( 174)		if ((value < (int)0)) {
HXLINE( 174)			value = (int)0;
            		}
HXLINE( 175)		if ((this->_hx___padding != value)) {
HXLINE( 177)			this->_hx___padding = value;
HXLINE( 178)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 180)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextOptions_obj,set_padding,return )


hx::ObjectPtr< TextOptions_obj > TextOptions_obj::__new(hx::Null< bool >  __o_wordWrap,hx::Null< bool >  __o_autoScale) {
	hx::ObjectPtr< TextOptions_obj > __this = new TextOptions_obj();
	__this->__construct(__o_wordWrap,__o_autoScale);
	return __this;
}

hx::ObjectPtr< TextOptions_obj > TextOptions_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< bool >  __o_wordWrap,hx::Null< bool >  __o_autoScale) {
	TextOptions_obj *__this = (TextOptions_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextOptions_obj), true, "starling.text.TextOptions"));
	*(void **)__this = TextOptions_obj::_hx_vtable;
	__this->__construct(__o_wordWrap,__o_autoScale);
	return __this;
}

TextOptions_obj::TextOptions_obj()
{
}

void TextOptions_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextOptions);
	HX_MARK_MEMBER_NAME(_hx___wordWrap,"__wordWrap");
	HX_MARK_MEMBER_NAME(_hx___autoScale,"__autoScale");
	HX_MARK_MEMBER_NAME(_hx___autoSize,"__autoSize");
	HX_MARK_MEMBER_NAME(_hx___isHtmlText,"__isHtmlText");
	HX_MARK_MEMBER_NAME(_hx___textureScale,"__textureScale");
	HX_MARK_MEMBER_NAME(_hx___textureFormat,"__textureFormat");
	HX_MARK_MEMBER_NAME(_hx___padding,"__padding");
	 ::starling::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextOptions_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___wordWrap,"__wordWrap");
	HX_VISIT_MEMBER_NAME(_hx___autoScale,"__autoScale");
	HX_VISIT_MEMBER_NAME(_hx___autoSize,"__autoSize");
	HX_VISIT_MEMBER_NAME(_hx___isHtmlText,"__isHtmlText");
	HX_VISIT_MEMBER_NAME(_hx___textureScale,"__textureScale");
	HX_VISIT_MEMBER_NAME(_hx___textureFormat,"__textureFormat");
	HX_VISIT_MEMBER_NAME(_hx___padding,"__padding");
	 ::starling::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextOptions_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_padding() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_wordWrap() ); }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoSize() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__padding") ) { return hx::Val( _hx___padding ); }
		if (HX_FIELD_EQ(inName,"autoScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_autoScale() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__wordWrap") ) { return hx::Val( _hx___wordWrap ); }
		if (HX_FIELD_EQ(inName,"__autoSize") ) { return hx::Val( _hx___autoSize ); }
		if (HX_FIELD_EQ(inName,"isHtmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isHtmlText() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__autoScale") ) { return hx::Val( _hx___autoScale ); }
		if (HX_FIELD_EQ(inName,"get_padding") ) { return hx::Val( get_padding_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_padding") ) { return hx::Val( set_padding_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__isHtmlText") ) { return hx::Val( _hx___isHtmlText ); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"textureScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureScale() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_autoScale") ) { return hx::Val( get_autoScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_autoScale") ) { return hx::Val( set_autoScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"textureFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureFormat() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureScale") ) { return hx::Val( _hx___textureScale ); }
		if (HX_FIELD_EQ(inName,"get_isHtmlText") ) { return hx::Val( get_isHtmlText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_isHtmlText") ) { return hx::Val( set_isHtmlText_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { return hx::Val( _hx___textureFormat ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_textureScale") ) { return hx::Val( get_textureScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureScale") ) { return hx::Val( set_textureScale_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_textureFormat") ) { return hx::Val( get_textureFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureFormat") ) { return hx::Val( set_textureFormat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextOptions_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_padding(inValue.Cast< Float >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue.Cast< ::String >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__padding") ) { _hx___padding=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoScale(inValue.Cast< bool >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__wordWrap") ) { _hx___wordWrap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__autoSize") ) { _hx___autoSize=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isHtmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_isHtmlText(inValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__autoScale") ) { _hx___autoScale=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__isHtmlText") ) { _hx___isHtmlText=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureScale(inValue.Cast< Float >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureFormat(inValue.Cast< ::String >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureScale") ) { _hx___textureScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureFormat") ) { _hx___textureFormat=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextOptions_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__wordWrap","\xd4","\x87","\x13","\xa4"));
	outFields->push(HX_HCSTRING("__autoScale","\x7b","\x55","\x06","\x85"));
	outFields->push(HX_HCSTRING("__autoSize","\xf0","\x02","\xb2","\xd2"));
	outFields->push(HX_HCSTRING("__isHtmlText","\xe2","\xac","\x7a","\xc3"));
	outFields->push(HX_HCSTRING("__textureScale","\xcf","\xfe","\x2e","\x92"));
	outFields->push(HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18"));
	outFields->push(HX_HCSTRING("__padding","\xb1","\xaa","\xcb","\x51"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("autoScale","\x9b","\x0c","\xda","\x56"));
	outFields->push(HX_HCSTRING("isHtmlText","\xc2","\x31","\xe7","\x8a"));
	outFields->push(HX_HCSTRING("textureScale","\xaf","\x7b","\x6e","\x71"));
	outFields->push(HX_HCSTRING("textureFormat","\x72","\x62","\xa6","\x90"));
	outFields->push(HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextOptions_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(TextOptions_obj,_hx___wordWrap),HX_HCSTRING("__wordWrap","\xd4","\x87","\x13","\xa4")},
	{hx::fsBool,(int)offsetof(TextOptions_obj,_hx___autoScale),HX_HCSTRING("__autoScale","\x7b","\x55","\x06","\x85")},
	{hx::fsString,(int)offsetof(TextOptions_obj,_hx___autoSize),HX_HCSTRING("__autoSize","\xf0","\x02","\xb2","\xd2")},
	{hx::fsBool,(int)offsetof(TextOptions_obj,_hx___isHtmlText),HX_HCSTRING("__isHtmlText","\xe2","\xac","\x7a","\xc3")},
	{hx::fsFloat,(int)offsetof(TextOptions_obj,_hx___textureScale),HX_HCSTRING("__textureScale","\xcf","\xfe","\x2e","\x92")},
	{hx::fsString,(int)offsetof(TextOptions_obj,_hx___textureFormat),HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18")},
	{hx::fsFloat,(int)offsetof(TextOptions_obj,_hx___padding),HX_HCSTRING("__padding","\xb1","\xaa","\xcb","\x51")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextOptions_obj_sStaticStorageInfo = 0;
#endif

static ::String TextOptions_obj_sMemberFields[] = {
	HX_HCSTRING("__wordWrap","\xd4","\x87","\x13","\xa4"),
	HX_HCSTRING("__autoScale","\x7b","\x55","\x06","\x85"),
	HX_HCSTRING("__autoSize","\xf0","\x02","\xb2","\xd2"),
	HX_HCSTRING("__isHtmlText","\xe2","\xac","\x7a","\xc3"),
	HX_HCSTRING("__textureScale","\xcf","\xfe","\x2e","\x92"),
	HX_HCSTRING("__textureFormat","\x52","\x9b","\x58","\x18"),
	HX_HCSTRING("__padding","\xb1","\xaa","\xcb","\x51"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_autoScale","\x72","\xe0","\x3d","\x18"),
	HX_HCSTRING("set_autoScale","\x7e","\xc2","\x43","\x5d"),
	HX_HCSTRING("get_isHtmlText","\x0b","\xba","\xdc","\x00"),
	HX_HCSTRING("set_isHtmlText","\x7f","\xa2","\xfc","\x20"),
	HX_HCSTRING("get_textureScale","\x38","\x68","\x0d","\x76"),
	HX_HCSTRING("set_textureScale","\xac","\x55","\x4f","\xcc"),
	HX_HCSTRING("get_textureFormat","\xc9","\x6d","\x16","\x97"),
	HX_HCSTRING("set_textureFormat","\xd5","\x45","\x84","\xba"),
	HX_HCSTRING("get_padding","\xe8","\xb9","\x77","\x56"),
	HX_HCSTRING("set_padding","\xf4","\xc0","\xe4","\x60"),
	::String(null()) };

static void TextOptions_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextOptions_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextOptions_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextOptions_obj::__mClass,"__mClass");
};

#endif

hx::Class TextOptions_obj::__mClass;

void TextOptions_obj::__register()
{
	hx::Object *dummy = new TextOptions_obj;
	TextOptions_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.text.TextOptions","\x36","\xa3","\xd1","\x7a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextOptions_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextOptions_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextOptions_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextOptions_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextOptions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextOptions_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace text
