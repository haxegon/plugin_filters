// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_display_Disk
#include <starling/display/Disk.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Ring
#include <starling/display/Ring.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_841c93b1fc69448d_16_new,"starling.display.Disk","new",0x58392101,"starling.display.Disk.new","starling/display/Disk.hx",16,0xfc3054cd)
namespace starling{
namespace display{

void Disk_obj::__construct(Float xoff,Float yoff,Float radius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle){
int color = __o_color.Default(16777215);
Float alpha = __o_alpha.Default(((Float)1.0));
int nsides = __o_nsides.Default(-1);
            	HX_STACKFRAME(&_hx_pos_841c93b1fc69448d_16_new)
HXDLIN(  16)		super::__construct(xoff,yoff,(int)0,radius,color,alpha,nsides,startangle);
            	}

Dynamic Disk_obj::__CreateEmpty() { return new Disk_obj; }

void *Disk_obj::_hx_vtable = 0;

Dynamic Disk_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Disk_obj > _hx_result = new Disk_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Disk_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x36fbd777) {
		if (inClassId<=(int)0x31a4bcfa) {
			if (inClassId<=(int)0x25137bc0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
			} else {
				return inClassId==(int)0x31a4bcfa;
			}
		} else {
			return inClassId==(int)0x36fbd777;
		}
	} else {
		if (inClassId<=(int)0x478fd1bb) {
			return inClassId==(int)0x403ccfca || inClassId==(int)0x478fd1bb;
		} else {
			return inClassId==(int)0x6dea180f;
		}
	}
}


hx::ObjectPtr< Disk_obj > Disk_obj::__new(Float xoff,Float yoff,Float radius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle) {
	hx::ObjectPtr< Disk_obj > __this = new Disk_obj();
	__this->__construct(xoff,yoff,radius,__o_color,__o_alpha,__o_nsides,startangle);
	return __this;
}

hx::ObjectPtr< Disk_obj > Disk_obj::__alloc(hx::Ctx *_hx_ctx,Float xoff,Float yoff,Float radius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle) {
	Disk_obj *__this = (Disk_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Disk_obj), true, "starling.display.Disk"));
	*(void **)__this = Disk_obj::_hx_vtable;
	__this->__construct(xoff,yoff,radius,__o_color,__o_alpha,__o_nsides,startangle);
	return __this;
}

Disk_obj::Disk_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Disk_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Disk_obj_sStaticStorageInfo = 0;
#endif

static void Disk_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Disk_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Disk_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Disk_obj::__mClass,"__mClass");
};

#endif

hx::Class Disk_obj::__mClass;

void Disk_obj::__register()
{
	hx::Object *dummy = new Disk_obj;
	Disk_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.Disk","\x8f","\x8c","\xfa","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Disk_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Disk_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Disk_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Disk_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Disk_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace display
