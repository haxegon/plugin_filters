// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_TextureSetupSettings
#include <starling/display/TextureSetupSettings.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8c43af1d6b0256b0_570_new,"starling.display.TextureSetupSettings","new",0x40860849,"starling.display.TextureSetupSettings.new","starling/display/Image.hx",570,0x1693cf77)
namespace starling{
namespace display{

void TextureSetupSettings_obj::__construct( ::Dynamic onAssign, ::Dynamic onRelease){
            	HX_STACKFRAME(&_hx_pos_8c43af1d6b0256b0_570_new)
HXLINE( 571)		this->onAssign = onAssign;
HXLINE( 572)		this->onRelease = onRelease;
            	}

Dynamic TextureSetupSettings_obj::__CreateEmpty() { return new TextureSetupSettings_obj; }

void *TextureSetupSettings_obj::_hx_vtable = 0;

Dynamic TextureSetupSettings_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextureSetupSettings_obj > _hx_result = new TextureSetupSettings_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TextureSetupSettings_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1ba0d2f7;
}


hx::ObjectPtr< TextureSetupSettings_obj > TextureSetupSettings_obj::__new( ::Dynamic onAssign, ::Dynamic onRelease) {
	hx::ObjectPtr< TextureSetupSettings_obj > __this = new TextureSetupSettings_obj();
	__this->__construct(onAssign,onRelease);
	return __this;
}

hx::ObjectPtr< TextureSetupSettings_obj > TextureSetupSettings_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic onAssign, ::Dynamic onRelease) {
	TextureSetupSettings_obj *__this = (TextureSetupSettings_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextureSetupSettings_obj), true, "starling.display.TextureSetupSettings"));
	*(void **)__this = TextureSetupSettings_obj::_hx_vtable;
	__this->__construct(onAssign,onRelease);
	return __this;
}

TextureSetupSettings_obj::TextureSetupSettings_obj()
{
}

void TextureSetupSettings_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextureSetupSettings);
	HX_MARK_MEMBER_NAME(onAssign,"onAssign");
	HX_MARK_MEMBER_NAME(onRelease,"onRelease");
	HX_MARK_END_CLASS();
}

void TextureSetupSettings_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onAssign,"onAssign");
	HX_VISIT_MEMBER_NAME(onRelease,"onRelease");
}

hx::Val TextureSetupSettings_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"onAssign") ) { return hx::Val( onAssign ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onRelease") ) { return hx::Val( onRelease ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextureSetupSettings_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"onAssign") ) { onAssign=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onRelease") ) { onRelease=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextureSetupSettings_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextureSetupSettings_obj,onAssign),HX_HCSTRING("onAssign","\xae","\x3c","\xb3","\x2b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextureSetupSettings_obj,onRelease),HX_HCSTRING("onRelease","\x68","\x3e","\x98","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextureSetupSettings_obj_sStaticStorageInfo = 0;
#endif

static ::String TextureSetupSettings_obj_sMemberFields[] = {
	HX_HCSTRING("onAssign","\xae","\x3c","\xb3","\x2b"),
	HX_HCSTRING("onRelease","\x68","\x3e","\x98","\x30"),
	::String(null()) };

static void TextureSetupSettings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextureSetupSettings_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextureSetupSettings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextureSetupSettings_obj::__mClass,"__mClass");
};

#endif

hx::Class TextureSetupSettings_obj::__mClass;

void TextureSetupSettings_obj::__register()
{
	hx::Object *dummy = new TextureSetupSettings_obj;
	TextureSetupSettings_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.TextureSetupSettings","\xd7","\x2f","\x60","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextureSetupSettings_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextureSetupSettings_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextureSetupSettings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextureSetupSettings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureSetupSettings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureSetupSettings_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace display
