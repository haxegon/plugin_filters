// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_RangeError
#include <openfl/errors/RangeError.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_filters_FragmentFilter
#include <starling/filters/FragmentFilter.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f39a17184c682513_83_new,"starling.display.DisplayObjectContainer","new",0xa2ccaa04,"starling.display.DisplayObjectContainer.new","starling/display/DisplayObjectContainer.hx",83,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_91_dispose,"starling.display.DisplayObjectContainer","dispose",0x5b5cfc43,"starling.display.DisplayObjectContainer.dispose","starling/display/DisplayObjectContainer.hx",91,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_107_addChild,"starling.display.DisplayObjectContainer","addChild",0x2d728397,"starling.display.DisplayObjectContainer.addChild","starling/display/DisplayObjectContainer.hx",107,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_112_addChildAt,"starling.display.DisplayObjectContainer","addChildAt",0x51cc106a,"starling.display.DisplayObjectContainer.addChildAt","starling/display/DisplayObjectContainer.hx",112,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_150_removeChild,"starling.display.DisplayObjectContainer","removeChild",0xe30ea45c,"starling.display.DisplayObjectContainer.removeChild","starling/display/DisplayObjectContainer.hx",150,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_160_removeChildAt,"starling.display.DisplayObjectContainer","removeChildAt",0xbf45ac6f,"starling.display.DisplayObjectContainer.removeChildAt","starling/display/DisplayObjectContainer.hx",160,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_190_removeChildren,"starling.display.DisplayObjectContainer","removeChildren",0x9dd6567f,"starling.display.DisplayObjectContainer.removeChildren","starling/display/DisplayObjectContainer.hx",190,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_205_getChildAt,"starling.display.DisplayObjectContainer","getChildAt",0x39a36a95,"starling.display.DisplayObjectContainer.getChildAt","starling/display/DisplayObjectContainer.hx",205,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_219_getChildByName,"starling.display.DisplayObjectContainer","getChildByName",0x0689ba64,"starling.display.DisplayObjectContainer.getChildByName","starling/display/DisplayObjectContainer.hx",219,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_230_getChildIndex,"starling.display.DisplayObjectContainer","getChildIndex",0x38e136b0,"starling.display.DisplayObjectContainer.getChildIndex","starling/display/DisplayObjectContainer.hx",230,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_235_setChildIndex,"starling.display.DisplayObjectContainer","setChildIndex",0x7de718bc,"starling.display.DisplayObjectContainer.setChildIndex","starling/display/DisplayObjectContainer.hx",235,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_247_swapChildren,"starling.display.DisplayObjectContainer","swapChildren",0x7e2c1cce,"starling.display.DisplayObjectContainer.swapChildren","starling/display/DisplayObjectContainer.hx",247,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_256_swapChildrenAt,"starling.display.DisplayObjectContainer","swapChildrenAt",0x7707a561,"starling.display.DisplayObjectContainer.swapChildrenAt","starling/display/DisplayObjectContainer.hx",256,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_267_sortChildren,"starling.display.DisplayObjectContainer","sortChildren",0x87f05c99,"starling.display.DisplayObjectContainer.sortChildren","starling/display/DisplayObjectContainer.hx",267,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_276_contains,"starling.display.DisplayObjectContainer","contains",0x9ad70dfb,"starling.display.DisplayObjectContainer.contains","starling/display/DisplayObjectContainer.hx",276,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_289_getBounds,"starling.display.DisplayObjectContainer","getBounds",0x0455bc4f,"starling.display.DisplayObjectContainer.getBounds","starling/display/DisplayObjectContainer.hx",289,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_328_hitTest,"starling.display.DisplayObjectContainer","hitTest",0x828fdbe9,"starling.display.DisplayObjectContainer.hitTest","starling/display/DisplayObjectContainer.hx",328,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_361_render,"starling.display.DisplayObjectContainer","render",0x19653032,"starling.display.DisplayObjectContainer.render","starling/display/DisplayObjectContainer.hx",361,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_424_broadcastEvent,"starling.display.DisplayObjectContainer","broadcastEvent",0xc47b1235,"starling.display.DisplayObjectContainer.broadcastEvent","starling/display/DisplayObjectContainer.hx",424,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_446_broadcastEventWith,"starling.display.DisplayObjectContainer","broadcastEventWith",0x127a72db,"starling.display.DisplayObjectContainer.broadcastEventWith","starling/display/DisplayObjectContainer.hx",446,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_454_get_numChildren,"starling.display.DisplayObjectContainer","get_numChildren",0x6d8ce0e0,"starling.display.DisplayObjectContainer.get_numChildren","starling/display/DisplayObjectContainer.hx",454,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_461_get_touchGroup,"starling.display.DisplayObjectContainer","get_touchGroup",0x6c912025,"starling.display.DisplayObjectContainer.get_touchGroup","starling/display/DisplayObjectContainer.hx",461,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_462_set_touchGroup,"starling.display.DisplayObjectContainer","set_touchGroup",0x8cb10899,"starling.display.DisplayObjectContainer.set_touchGroup","starling/display/DisplayObjectContainer.hx",462,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_514___getChildEventListeners,"starling.display.DisplayObjectContainer","__getChildEventListeners",0x732f44c7,"starling.display.DisplayObjectContainer.__getChildEventListeners","starling/display/DisplayObjectContainer.hx",514,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_473_mergeSort,"starling.display.DisplayObjectContainer","mergeSort",0x958d5eda,"starling.display.DisplayObjectContainer.mergeSort","starling/display/DisplayObjectContainer.hx",473,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_73_boot,"starling.display.DisplayObjectContainer","boot",0xc8611a0e,"starling.display.DisplayObjectContainer.boot","starling/display/DisplayObjectContainer.hx",73,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_74_boot,"starling.display.DisplayObjectContainer","boot",0xc8611a0e,"starling.display.DisplayObjectContainer.boot","starling/display/DisplayObjectContainer.hx",74,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_75_boot,"starling.display.DisplayObjectContainer","boot",0xc8611a0e,"starling.display.DisplayObjectContainer.boot","starling/display/DisplayObjectContainer.hx",75,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_76_boot,"starling.display.DisplayObjectContainer","boot",0xc8611a0e,"starling.display.DisplayObjectContainer.boot","starling/display/DisplayObjectContainer.hx",76,0x1ad9c4aa)
HX_LOCAL_STACK_FRAME(_hx_pos_f39a17184c682513_77_boot,"starling.display.DisplayObjectContainer","boot",0xc8611a0e,"starling.display.DisplayObjectContainer.boot","starling/display/DisplayObjectContainer.hx",77,0x1ad9c4aa)
namespace starling{
namespace display{

void DisplayObjectContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_83_new)
HXLINE(  84)		super::__construct();
HXLINE(  86)		int length = null();
HXDLIN(  86)		bool fixed = null();
HXDLIN(  86)		this->_hx___children =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            	}

Dynamic DisplayObjectContainer_obj::__CreateEmpty() { return new DisplayObjectContainer_obj; }

void *DisplayObjectContainer_obj::_hx_vtable = 0;

Dynamic DisplayObjectContainer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObjectContainer_obj > _hx_result = new DisplayObjectContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DisplayObjectContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x31a4bcfa) {
		if (inClassId<=(int)0x25137bc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
		} else {
			return inClassId==(int)0x31a4bcfa;
		}
	} else {
		return inClassId==(int)0x6dea180f;
	}
}

void DisplayObjectContainer_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_91_dispose)
HXLINE(  92)		int i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data) - (int)1);
HXLINE(  93)		while((i >= (int)0)){
HXLINE(  95)			( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,i)) )->dispose();
HXLINE(  96)			i = (i - (int)1);
            		}
HXLINE(  99)		this->super::dispose();
            	}


 ::starling::display::DisplayObject DisplayObjectContainer_obj::addChild( ::starling::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_107_addChild)
HXDLIN( 107)		return this->addChildAt(child,::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,addChild,return )

 ::starling::display::DisplayObject DisplayObjectContainer_obj::addChildAt( ::starling::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_112_addChildAt)
HXLINE( 113)		int numChildren = ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
HXLINE( 115)		bool _hx_tmp;
HXDLIN( 115)		if ((index >= (int)0)) {
HXLINE( 115)			_hx_tmp = (index <= numChildren);
            		}
            		else {
HXLINE( 115)			_hx_tmp = false;
            		}
HXDLIN( 115)		if (_hx_tmp) {
HXLINE( 117)			this->setRequiresRedraw();
HXLINE( 119)			if (hx::IsEq( child->get_parent(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 121)				this->setChildIndex(child,index);
            			}
            			else {
HXLINE( 125)				::openfl::_Vector::IVector_obj::insertAt(this->_hx___children->data,index,child);
HXLINE( 127)				child->removeFromParent(null());
HXLINE( 128)				child->_hx___setParent(hx::ObjectPtr<OBJ_>(this));
HXLINE( 129)				child->dispatchEventWith(HX_("added",c0,d4,43,1c),true,null());
HXLINE( 131)				if (hx::IsNotNull( this->get_stage() )) {
HXLINE( 133)					 ::starling::display::DisplayObjectContainer container;
HXDLIN( 133)					if (::Std_obj::is(child,hx::ClassOf< ::starling::display::DisplayObjectContainer >())) {
HXLINE( 133)						container = ( ( ::starling::display::DisplayObjectContainer)(child) );
            					}
            					else {
HXLINE( 133)						container = null();
            					}
HXLINE( 134)					if (hx::IsNotNull( container )) {
HXLINE( 134)						container->broadcastEventWith(HX_("addedToStage",63,22,55,0c),null());
            					}
            					else {
HXLINE( 135)						child->dispatchEventWith(HX_("addedToStage",63,22,55,0c),null(),null());
            					}
            				}
            			}
HXLINE( 139)			return child;
            		}
            		else {
HXLINE( 143)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("Invalid child index",c5,0a,1e,ba)));
            		}
HXLINE( 115)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,addChildAt,return )

 ::starling::display::DisplayObject DisplayObjectContainer_obj::removeChild( ::starling::display::DisplayObject child,hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(false);
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_150_removeChild)
HXLINE( 151)		int childIndex = this->getChildIndex(child);
HXLINE( 152)		if ((childIndex != (int)-1)) {
HXLINE( 152)			return this->removeChildAt(childIndex,dispose);
            		}
            		else {
HXLINE( 153)			return null();
            		}
HXLINE( 152)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChild,return )

 ::starling::display::DisplayObject DisplayObjectContainer_obj::removeChildAt(int index,hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_160_removeChildAt)
HXDLIN( 160)		bool _hx_tmp;
HXDLIN( 160)		if ((index >= (int)0)) {
HXDLIN( 160)			_hx_tmp = (index < ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data));
            		}
            		else {
HXDLIN( 160)			_hx_tmp = false;
            		}
HXDLIN( 160)		if (_hx_tmp) {
HXLINE( 162)			this->setRequiresRedraw();
HXLINE( 164)			 ::starling::display::DisplayObject child = ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,index)) );
HXLINE( 165)			child->dispatchEventWith(HX_("removed",a0,1f,00,f3),true,null());
HXLINE( 167)			if (hx::IsNotNull( this->get_stage() )) {
HXLINE( 169)				 ::starling::display::DisplayObjectContainer container;
HXDLIN( 169)				if (::Std_obj::is(child,hx::ClassOf< ::starling::display::DisplayObjectContainer >())) {
HXLINE( 169)					container = ( ( ::starling::display::DisplayObjectContainer)(child) );
            				}
            				else {
HXLINE( 169)					container = null();
            				}
HXLINE( 170)				if (hx::IsNotNull( container )) {
HXLINE( 170)					container->broadcastEventWith(HX_("removedFromStage",34,21,76,ba),null());
            				}
            				else {
HXLINE( 171)					child->dispatchEventWith(HX_("removedFromStage",34,21,76,ba),null(),null());
            				}
            			}
HXLINE( 174)			child->_hx___setParent(null());
HXLINE( 175)			index = ::openfl::_Vector::IVector_obj::indexOf(this->_hx___children->data,child,(int)0);
HXLINE( 176)			if ((index >= (int)0)) {
HXLINE( 176)				::openfl::_Vector::IVector_obj::removeAt(this->_hx___children->data,index);
            			}
HXLINE( 177)			if (dispose) {
HXLINE( 177)				child->dispose();
            			}
HXLINE( 179)			return child;
            		}
            		else {
HXLINE( 183)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("Invalid child index",c5,0a,1e,ba)));
            		}
HXLINE( 160)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,removeChildAt,return )

void DisplayObjectContainer_obj::removeChildren(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex,hx::Null< bool >  __o_dispose){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(-1);
bool dispose = __o_dispose.Default(false);
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_190_removeChildren)
HXLINE( 191)		bool _hx_tmp;
HXDLIN( 191)		if ((endIndex >= (int)0)) {
HXLINE( 191)			_hx_tmp = (endIndex >= this->get_numChildren());
            		}
            		else {
HXLINE( 191)			_hx_tmp = true;
            		}
HXDLIN( 191)		if (_hx_tmp) {
HXLINE( 192)			endIndex = (this->get_numChildren() - (int)1);
            		}
HXLINE( 194)		int i = beginIndex;
HXLINE( 195)		while((i <= endIndex)){
HXLINE( 197)			this->removeChildAt(beginIndex,dispose);
HXLINE( 198)			i = (i + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObjectContainer_obj,removeChildren,(void))

 ::starling::display::DisplayObject DisplayObjectContainer_obj::getChildAt(int index){
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_205_getChildAt)
HXLINE( 206)		int numChildren = ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
HXLINE( 208)		if ((index < (int)0)) {
HXLINE( 209)			index = (numChildren + index);
            		}
HXLINE( 211)		bool _hx_tmp;
HXDLIN( 211)		if ((index >= (int)0)) {
HXLINE( 211)			_hx_tmp = (index < numChildren);
            		}
            		else {
HXLINE( 211)			_hx_tmp = false;
            		}
HXDLIN( 211)		if (_hx_tmp) {
HXLINE( 212)			return ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,index)) );
            		}
            		else {
HXLINE( 214)			HX_STACK_DO_THROW( ::openfl::errors::RangeError_obj::__alloc( HX_CTX ,HX_("Invalid child index",c5,0a,1e,ba)));
            		}
HXLINE( 211)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildAt,return )

 ::starling::display::DisplayObject DisplayObjectContainer_obj::getChildByName(::String name){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_219_getChildByName)
HXLINE( 220)		int numChildren = ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
HXLINE( 221)		{
HXLINE( 221)			int _g1 = (int)0;
HXDLIN( 221)			int _g = numChildren;
HXDLIN( 221)			while((_g1 < _g)){
HXLINE( 221)				_g1 = (_g1 + (int)1);
HXDLIN( 221)				int i = (_g1 - (int)1);
HXLINE( 222)				if ((( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,i)) )->get_name() == name)) {
HXLINE( 222)					return ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,i)) );
            				}
            			}
            		}
HXLINE( 224)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildByName,return )

int DisplayObjectContainer_obj::getChildIndex( ::starling::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_230_getChildIndex)
HXDLIN( 230)		return ::openfl::_Vector::IVector_obj::indexOf(this->_hx___children->data,child,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,getChildIndex,return )

void DisplayObjectContainer_obj::setChildIndex( ::starling::display::DisplayObject child,int index){
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_235_setChildIndex)
HXLINE( 236)		int oldIndex = this->getChildIndex(child);
HXLINE( 237)		if ((oldIndex == index)) {
HXLINE( 237)			return;
            		}
HXLINE( 238)		if ((oldIndex == (int)-1)) {
HXLINE( 238)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Not a child of this container",38,2e,05,0a)));
            		}
HXLINE( 240)		::openfl::_Vector::IVector_obj::removeAt(this->_hx___children->data,oldIndex);
HXLINE( 241)		::openfl::_Vector::IVector_obj::insertAt(this->_hx___children->data,index,child);
HXLINE( 242)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,setChildIndex,(void))

void DisplayObjectContainer_obj::swapChildren( ::starling::display::DisplayObject child1, ::starling::display::DisplayObject child2){
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_247_swapChildren)
HXLINE( 248)		int index1 = this->getChildIndex(child1);
HXLINE( 249)		int index2 = this->getChildIndex(child2);
HXLINE( 250)		bool _hx_tmp;
HXDLIN( 250)		if ((index1 != (int)-1)) {
HXLINE( 250)			_hx_tmp = (index2 == (int)-1);
            		}
            		else {
HXLINE( 250)			_hx_tmp = true;
            		}
HXDLIN( 250)		if (_hx_tmp) {
HXLINE( 250)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Not a child of this container",38,2e,05,0a)));
            		}
HXLINE( 251)		this->swapChildrenAt(index1,index2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildren,(void))

void DisplayObjectContainer_obj::swapChildrenAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_256_swapChildrenAt)
HXLINE( 257)		 ::starling::display::DisplayObject child1 = this->getChildAt(index1);
HXLINE( 258)		 ::starling::display::DisplayObject child2 = this->getChildAt(index2);
HXLINE( 259)		::openfl::_Vector::IVector_obj::set(this->_hx___children->data,index1,child2);
HXLINE( 260)		::openfl::_Vector::IVector_obj::set(this->_hx___children->data,index2,child1);
HXLINE( 261)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,swapChildrenAt,(void))

void DisplayObjectContainer_obj::sortChildren( ::Dynamic compareFunction){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_267_sortChildren)
HXLINE( 268)		{
HXLINE( 268)			 ::openfl::_Vector::AbstractVector this1 = ::starling::display::DisplayObjectContainer_obj::sSortBuffer;
HXDLIN( 268)			int value = ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
HXDLIN( 268)			::openfl::_Vector::IVector_obj::set_length(this1->data,value);
            		}
HXLINE( 269)		 ::openfl::_Vector::AbstractVector _hx_tmp = this->_hx___children;
HXDLIN( 269)		int _hx_tmp1 = ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
HXDLIN( 269)		::starling::display::DisplayObjectContainer_obj::mergeSort(_hx_tmp,compareFunction,(int)0,_hx_tmp1,::starling::display::DisplayObjectContainer_obj::sSortBuffer);
HXLINE( 270)		::openfl::_Vector::IVector_obj::set_length(::starling::display::DisplayObjectContainer_obj::sSortBuffer->data,(int)0);
HXLINE( 271)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,sortChildren,(void))

bool DisplayObjectContainer_obj::contains( ::starling::display::DisplayObject child){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_276_contains)
HXLINE( 277)		while(hx::IsNotNull( child )){
HXLINE( 279)			if (hx::IsEq( child,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 279)				return true;
            			}
            			else {
HXLINE( 280)				child = child->get_parent();
            			}
            		}
HXLINE( 282)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,contains,return )

 ::openfl::geom::Rectangle DisplayObjectContainer_obj::getBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out){
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_289_getBounds)
HXLINE( 290)		if (hx::IsNull( out )) {
HXLINE( 290)			out =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 292)		int numChildren = ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
HXLINE( 294)		if ((numChildren == (int)0)) {
HXLINE( 296)			this->getTransformationMatrix(targetSpace,::starling::display::DisplayObjectContainer_obj::sHelperMatrix);
HXLINE( 297)			::starling::utils::MatrixUtil_obj::transformCoords(::starling::display::DisplayObjectContainer_obj::sHelperMatrix,((Float)0.0),((Float)0.0),::starling::display::DisplayObjectContainer_obj::sHelperPoint);
HXLINE( 298)			out->setTo(::starling::display::DisplayObjectContainer_obj::sHelperPoint->x,::starling::display::DisplayObjectContainer_obj::sHelperPoint->y,(int)0,(int)0);
            		}
            		else {
HXLINE( 300)			if ((numChildren == (int)1)) {
HXLINE( 302)				( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,(int)0)) )->getBounds(targetSpace,out);
            			}
            			else {
HXLINE( 306)				Float minX = ((Float)1.79e+308);
HXDLIN( 306)				Float maxX = ((Float)-1.79e+308);
HXLINE( 307)				Float minY = ((Float)1.79e+308);
HXDLIN( 307)				Float maxY = ((Float)-1.79e+308);
HXLINE( 309)				int i = (int)0;
HXLINE( 310)				{
HXLINE( 310)					int _g1 = (int)0;
HXDLIN( 310)					int _g = numChildren;
HXDLIN( 310)					while((_g1 < _g)){
HXLINE( 310)						_g1 = (_g1 + (int)1);
HXDLIN( 310)						int i1 = (_g1 - (int)1);
HXLINE( 312)						( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,i1)) )->getBounds(targetSpace,out);
HXLINE( 314)						if ((minX > out->x)) {
HXLINE( 314)							minX = out->x;
            						}
HXLINE( 315)						if ((maxX < out->get_right())) {
HXLINE( 315)							maxX = out->get_right();
            						}
HXLINE( 316)						if ((minY > out->y)) {
HXLINE( 316)							minY = out->y;
            						}
HXLINE( 317)						if ((maxY < out->get_bottom())) {
HXLINE( 317)							maxY = out->get_bottom();
            						}
            					}
            				}
HXLINE( 320)				out->setTo(minX,minY,(maxX - minX),(maxY - minY));
            			}
            		}
HXLINE( 323)		return out;
            	}


 ::starling::display::DisplayObject DisplayObjectContainer_obj::hitTest( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_328_hitTest)
HXLINE( 329)		bool _hx_tmp;
HXDLIN( 329)		bool _hx_tmp1;
HXDLIN( 329)		if (!(!(this->get_visible()))) {
HXLINE( 329)			_hx_tmp1 = !(this->get_touchable());
            		}
            		else {
HXLINE( 329)			_hx_tmp1 = true;
            		}
HXDLIN( 329)		if (!(_hx_tmp1)) {
HXLINE( 329)			_hx_tmp = !(this->hitTestMask(localPoint));
            		}
            		else {
HXLINE( 329)			_hx_tmp = true;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 329)			return null();
            		}
HXLINE( 331)		 ::starling::display::DisplayObject target = null();
HXLINE( 332)		Float localX = localPoint->x;
HXLINE( 333)		Float localY = localPoint->y;
HXLINE( 334)		int numChildren = ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
HXLINE( 336)		 ::starling::display::DisplayObject child;
HXLINE( 337)		int i = (numChildren - (int)1);
HXLINE( 338)		while((i >= (int)0)){
HXLINE( 340)			child = ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,i)) );
HXLINE( 341)			if (child->get_isMask()) {
HXLINE( 342)				i = (i - (int)1);
HXLINE( 343)				continue;
            			}
HXLINE( 346)			 ::openfl::geom::Matrix _hx_tmp2 = ::starling::display::DisplayObjectContainer_obj::sHelperMatrix;
HXDLIN( 346)			_hx_tmp2->copyFrom(child->get_transformationMatrix());
HXLINE( 347)			::starling::display::DisplayObjectContainer_obj::sHelperMatrix->invert();
HXLINE( 349)			::starling::utils::MatrixUtil_obj::transformCoords(::starling::display::DisplayObjectContainer_obj::sHelperMatrix,localX,localY,::starling::display::DisplayObjectContainer_obj::sHelperPoint);
HXLINE( 350)			target = child->hitTest(::starling::display::DisplayObjectContainer_obj::sHelperPoint);
HXLINE( 352)			if (hx::IsNotNull( target )) {
HXLINE( 352)				if (this->_hx___touchGroup) {
HXLINE( 352)					return hx::ObjectPtr<OBJ_>(this);
            				}
            				else {
HXLINE( 352)					return target;
            				}
            			}
HXLINE( 353)			i = (i - (int)1);
            		}
HXLINE( 356)		return null();
            	}


void DisplayObjectContainer_obj::render( ::starling::rendering::Painter painter){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_361_render)
HXLINE( 362)		int numChildren = ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
HXLINE( 363)		int frameID = painter->get_frameID();
HXLINE( 364)		bool cacheEnabled = (frameID != (int)0);
HXLINE( 365)		bool selfOrParentChanged = (this->_hx___lastParentOrSelfChangeFrameID == frameID);
HXLINE( 367)		painter->pushState(null());
HXLINE( 369)		 ::starling::display::DisplayObject child;
HXDLIN( 369)		 ::starling::filters::FragmentFilter filter;
HXDLIN( 369)		 ::starling::display::DisplayObject mask;
HXLINE( 370)		 ::starling::rendering::BatchToken pushToken;
HXDLIN( 370)		 ::starling::rendering::BatchToken popToken;
HXLINE( 372)		{
HXLINE( 372)			int _g1 = (int)0;
HXDLIN( 372)			int _g = numChildren;
HXDLIN( 372)			while((_g1 < _g)){
HXLINE( 372)				_g1 = (_g1 + (int)1);
HXDLIN( 372)				int i = (_g1 - (int)1);
HXLINE( 374)				child = ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___children->data,i)) );
HXLINE( 376)				if (child->_hx___hasVisibleArea) {
HXLINE( 378)					if ((i != (int)0)) {
HXLINE( 379)						painter->restoreState();
            					}
HXLINE( 381)					if (selfOrParentChanged) {
HXLINE( 382)						child->_hx___lastParentOrSelfChangeFrameID = frameID;
            					}
HXLINE( 384)					bool _hx_tmp;
HXDLIN( 384)					bool _hx_tmp1;
HXDLIN( 384)					bool _hx_tmp2;
HXDLIN( 384)					if ((child->_hx___lastParentOrSelfChangeFrameID != frameID)) {
HXLINE( 384)						_hx_tmp2 = (child->_hx___lastChildChangeFrameID != frameID);
            					}
            					else {
HXLINE( 384)						_hx_tmp2 = false;
            					}
HXDLIN( 384)					if (_hx_tmp2) {
HXLINE( 384)						_hx_tmp1 = (child->_hx___tokenFrameID == (frameID - (int)1));
            					}
            					else {
HXLINE( 384)						_hx_tmp1 = false;
            					}
HXDLIN( 384)					if (_hx_tmp1) {
HXLINE( 384)						_hx_tmp = cacheEnabled;
            					}
            					else {
HXLINE( 384)						_hx_tmp = false;
            					}
HXDLIN( 384)					if (_hx_tmp) {
HXLINE( 388)						painter->fillToken(::starling::display::DisplayObjectContainer_obj::sCacheToken);
HXLINE( 389)						painter->drawFromCache(child->_hx___pushToken,child->_hx___popToken);
HXLINE( 390)						painter->fillToken(child->_hx___popToken);
HXLINE( 392)						child->_hx___pushToken->copyFrom(::starling::display::DisplayObjectContainer_obj::sCacheToken);
            					}
            					else {
HXLINE( 396)						if (cacheEnabled) {
HXLINE( 396)							pushToken = child->_hx___pushToken;
            						}
            						else {
HXLINE( 396)							pushToken = null();
            						}
HXLINE( 397)						if (cacheEnabled) {
HXLINE( 397)							popToken = child->_hx___popToken;
            						}
            						else {
HXLINE( 397)							popToken = null();
            						}
HXLINE( 398)						filter = child->__filter;
HXLINE( 399)						mask = child->_hx___mask;
HXLINE( 401)						painter->fillToken(pushToken);
HXLINE( 402)						 ::openfl::geom::Matrix _hx_tmp3 = child->get_transformationMatrix();
HXDLIN( 402)						Float _hx_tmp4 = child->get_alpha();
HXDLIN( 402)						painter->setStateTo(_hx_tmp3,_hx_tmp4,child->get_blendMode());
HXLINE( 404)						if (hx::IsNotNull( mask )) {
HXLINE( 404)							painter->drawMask(mask,child);
            						}
HXLINE( 406)						if (hx::IsNotNull( filter )) {
HXLINE( 406)							filter->render(painter);
            						}
            						else {
HXLINE( 407)							child->render(painter);
            						}
HXLINE( 409)						if (hx::IsNotNull( mask )) {
HXLINE( 409)							painter->eraseMask(mask,child);
            						}
HXLINE( 411)						painter->fillToken(popToken);
            					}
HXLINE( 414)					if (cacheEnabled) {
HXLINE( 415)						child->_hx___tokenFrameID = frameID;
            					}
            				}
            			}
            		}
HXLINE( 419)		painter->popState(null());
            	}


void DisplayObjectContainer_obj::broadcastEvent( ::starling::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_424_broadcastEvent)
HXLINE( 425)		if (event->bubbles) {
HXLINE( 426)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Broadcast of bubbling events is prohibited",7a,19,6e,d8)));
            		}
HXLINE( 433)		int fromIndex = ::openfl::_Vector::IVector_obj::get_length(::starling::display::DisplayObjectContainer_obj::sBroadcastListeners->data);
HXLINE( 434)		this->_hx___getChildEventListeners(hx::ObjectPtr<OBJ_>(this),event->type,::starling::display::DisplayObjectContainer_obj::sBroadcastListeners);
HXLINE( 435)		int toIndex = ::openfl::_Vector::IVector_obj::get_length(::starling::display::DisplayObjectContainer_obj::sBroadcastListeners->data);
HXLINE( 437)		{
HXLINE( 437)			int _g1 = fromIndex;
HXDLIN( 437)			int _g = toIndex;
HXDLIN( 437)			while((_g1 < _g)){
HXLINE( 437)				_g1 = (_g1 + (int)1);
HXDLIN( 437)				int i = (_g1 - (int)1);
HXLINE( 438)				( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(::starling::display::DisplayObjectContainer_obj::sBroadcastListeners->data,i)) )->dispatchEvent(event);
            			}
            		}
HXLINE( 440)		::openfl::_Vector::IVector_obj::set_length(::starling::display::DisplayObjectContainer_obj::sBroadcastListeners->data,fromIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,broadcastEvent,(void))

void DisplayObjectContainer_obj::broadcastEventWith(::String eventType, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_446_broadcastEventWith)
HXLINE( 447)		 ::starling::events::Event event = ::starling::events::Event_obj::fromPool(eventType,false,data);
HXLINE( 448)		this->broadcastEvent(event);
HXLINE( 449)		::starling::events::Event_obj::toPool(event);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObjectContainer_obj,broadcastEventWith,(void))

int DisplayObjectContainer_obj::get_numChildren(){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_454_get_numChildren)
HXDLIN( 454)		return ::openfl::_Vector::IVector_obj::get_length(this->_hx___children->data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_numChildren,return )

bool DisplayObjectContainer_obj::get_touchGroup(){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_461_get_touchGroup)
HXDLIN( 461)		return this->_hx___touchGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObjectContainer_obj,get_touchGroup,return )

bool DisplayObjectContainer_obj::set_touchGroup(bool value){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_462_set_touchGroup)
HXDLIN( 462)		return (this->_hx___touchGroup = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObjectContainer_obj,set_touchGroup,return )

void DisplayObjectContainer_obj::_hx___getChildEventListeners( ::starling::display::DisplayObject object,::String eventType, ::openfl::_Vector::AbstractVector listeners){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_514___getChildEventListeners)
HXLINE( 515)		 ::starling::display::DisplayObjectContainer container;
HXDLIN( 515)		if (::Std_obj::is(object,hx::ClassOf< ::starling::display::DisplayObjectContainer >())) {
HXLINE( 515)			container = ( ( ::starling::display::DisplayObjectContainer)(object) );
            		}
            		else {
HXLINE( 515)			container = null();
            		}
HXLINE( 517)		if (object->hasEventListener(eventType,null())) {
HXLINE( 518)			int index = ::openfl::_Vector::IVector_obj::get_length(listeners->data);
HXDLIN( 518)			::openfl::_Vector::IVector_obj::set(listeners->data,index,object);
            		}
HXLINE( 520)		if (hx::IsNotNull( container )) {
HXLINE( 522)			 ::openfl::_Vector::AbstractVector children = container->_hx___children;
HXLINE( 523)			int numChildren = ::openfl::_Vector::IVector_obj::get_length(children->data);
HXLINE( 525)			{
HXLINE( 525)				int _g1 = (int)0;
HXDLIN( 525)				int _g = numChildren;
HXDLIN( 525)				while((_g1 < _g)){
HXLINE( 525)					_g1 = (_g1 + (int)1);
HXDLIN( 525)					int i = (_g1 - (int)1);
HXLINE( 526)					this->_hx___getChildEventListeners(( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(children->data,i)) ),eventType,listeners);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObjectContainer_obj,_hx___getChildEventListeners,(void))

 ::openfl::geom::Matrix DisplayObjectContainer_obj::sHelperMatrix;

 ::openfl::geom::Point DisplayObjectContainer_obj::sHelperPoint;

 ::openfl::_Vector::AbstractVector DisplayObjectContainer_obj::sBroadcastListeners;

 ::openfl::_Vector::AbstractVector DisplayObjectContainer_obj::sSortBuffer;

 ::starling::rendering::BatchToken DisplayObjectContainer_obj::sCacheToken;

void DisplayObjectContainer_obj::mergeSort( ::openfl::_Vector::AbstractVector input, ::Dynamic compareFunc,int startIndex,int length, ::openfl::_Vector::AbstractVector buffer){
            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_473_mergeSort)
HXDLIN( 473)		if ((length > (int)1)) {
HXLINE( 475)			int i = (int)0;
HXLINE( 476)			int endIndex = (startIndex + length);
HXLINE( 477)			int halfLength = ::Std_obj::_hx_int(((Float)length / (Float)(int)2));
HXLINE( 478)			int l = startIndex;
HXLINE( 479)			int r = (startIndex + halfLength);
HXLINE( 482)			::starling::display::DisplayObjectContainer_obj::mergeSort(input,compareFunc,startIndex,halfLength,buffer);
HXLINE( 483)			::starling::display::DisplayObjectContainer_obj::mergeSort(input,compareFunc,(startIndex + halfLength),(length - halfLength),buffer);
HXLINE( 486)			{
HXLINE( 486)				int _g1 = (int)0;
HXDLIN( 486)				int _g = length;
HXDLIN( 486)				while((_g1 < _g)){
HXLINE( 486)					_g1 = (_g1 + (int)1);
HXDLIN( 486)					int i1 = (_g1 - (int)1);
HXLINE( 492)					bool _hx_tmp;
HXDLIN( 492)					if ((l < (startIndex + halfLength))) {
HXLINE( 493)						if ((r != endIndex)) {
HXLINE( 493)							 ::starling::display::DisplayObject _hx_tmp1 = ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(input->data,l)) );
HXLINE( 492)							_hx_tmp = (( (int)(compareFunc(_hx_tmp1,( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(input->data,r)) ))) ) <= (int)0);
            						}
            						else {
HXLINE( 492)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 492)						_hx_tmp = false;
            					}
HXDLIN( 492)					if (_hx_tmp) {
HXLINE( 495)						{
HXLINE( 495)							 ::starling::display::DisplayObject value = ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(input->data,l)) );
HXDLIN( 495)							::openfl::_Vector::IVector_obj::set(buffer->data,i1,value);
            						}
HXLINE( 496)						l = (l + (int)1);
            					}
            					else {
HXLINE( 500)						{
HXLINE( 500)							 ::starling::display::DisplayObject value1 = ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(input->data,r)) );
HXDLIN( 500)							::openfl::_Vector::IVector_obj::set(buffer->data,i1,value1);
            						}
HXLINE( 501)						r = (r + (int)1);
            					}
            				}
            			}
HXLINE( 506)			{
HXLINE( 506)				int _g11 = startIndex;
HXDLIN( 506)				int _g2 = endIndex;
HXDLIN( 506)				while((_g11 < _g2)){
HXLINE( 506)					_g11 = (_g11 + (int)1);
HXDLIN( 506)					int i2 = (_g11 - (int)1);
HXLINE( 507)					{
HXLINE( 507)						::Dynamic buffer1 = buffer->data;
HXDLIN( 507)						 ::starling::display::DisplayObject value2 = ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(buffer1,(i2 - startIndex))) );
HXDLIN( 507)						::openfl::_Vector::IVector_obj::set(input->data,i2,value2);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(DisplayObjectContainer_obj,mergeSort,(void))


hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__new() {
	hx::ObjectPtr< DisplayObjectContainer_obj > __this = new DisplayObjectContainer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DisplayObjectContainer_obj > DisplayObjectContainer_obj::__alloc(hx::Ctx *_hx_ctx) {
	DisplayObjectContainer_obj *__this = (DisplayObjectContainer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplayObjectContainer_obj), true, "starling.display.DisplayObjectContainer"));
	*(void **)__this = DisplayObjectContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DisplayObjectContainer_obj::DisplayObjectContainer_obj()
{
}

void DisplayObjectContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObjectContainer);
	HX_MARK_MEMBER_NAME(_hx___children,"__children");
	HX_MARK_MEMBER_NAME(_hx___touchGroup,"__touchGroup");
	 ::starling::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObjectContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___children,"__children");
	HX_VISIT_MEMBER_NAME(_hx___touchGroup,"__touchGroup");
	 ::starling::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObjectContainer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__children") ) { return hx::Val( _hx___children ); }
		if (HX_FIELD_EQ(inName,"addChildAt") ) { return hx::Val( addChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildAt") ) { return hx::Val( getChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchGroup") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_touchGroup() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"numChildren") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numChildren() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__touchGroup") ) { return hx::Val( _hx___touchGroup ); }
		if (HX_FIELD_EQ(inName,"swapChildren") ) { return hx::Val( swapChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortChildren") ) { return hx::Val( sortChildren_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeChildAt") ) { return hx::Val( removeChildAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildIndex") ) { return hx::Val( getChildIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"setChildIndex") ) { return hx::Val( setChildIndex_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"removeChildren") ) { return hx::Val( removeChildren_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChildByName") ) { return hx::Val( getChildByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapChildrenAt") ) { return hx::Val( swapChildrenAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"broadcastEvent") ) { return hx::Val( broadcastEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_touchGroup") ) { return hx::Val( get_touchGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_touchGroup") ) { return hx::Val( set_touchGroup_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_numChildren") ) { return hx::Val( get_numChildren_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"broadcastEventWith") ) { return hx::Val( broadcastEventWith_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__getChildEventListeners") ) { return hx::Val( _hx___getChildEventListeners_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DisplayObjectContainer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"mergeSort") ) { outValue = mergeSort_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sSortBuffer") ) { outValue = ( sSortBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"sCacheToken") ) { outValue = ( sCacheToken ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { outValue = ( sHelperPoint ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sHelperMatrix") ) { outValue = ( sHelperMatrix ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sBroadcastListeners") ) { outValue = ( sBroadcastListeners ); return true; }
	}
	return false;
}

hx::Val DisplayObjectContainer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"__children") ) { _hx___children=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchGroup") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_touchGroup(inValue.Cast< bool >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__touchGroup") ) { _hx___touchGroup=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DisplayObjectContainer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sSortBuffer") ) { sSortBuffer=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		if (HX_FIELD_EQ(inName,"sCacheToken") ) { sCacheToken=ioValue.Cast<  ::starling::rendering::BatchToken >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { sHelperPoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sHelperMatrix") ) { sHelperMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sBroadcastListeners") ) { sBroadcastListeners=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
	}
	return false;
}

void DisplayObjectContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"));
	outFields->push(HX_HCSTRING("__touchGroup","\x20","\x12","\x19","\xcc"));
	outFields->push(HX_HCSTRING("numChildren","\xa5","\x69","\x80","\x5c"));
	outFields->push(HX_HCSTRING("touchGroup","\x00","\x97","\x85","\x93"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObjectContainer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(DisplayObjectContainer_obj,_hx___children),HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13")},
	{hx::fsBool,(int)offsetof(DisplayObjectContainer_obj,_hx___touchGroup),HX_HCSTRING("__touchGroup","\x20","\x12","\x19","\xcc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DisplayObjectContainer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &DisplayObjectContainer_obj::sHelperMatrix,HX_HCSTRING("sHelperMatrix","\x62","\x9b","\xea","\x19")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &DisplayObjectContainer_obj::sHelperPoint,HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &DisplayObjectContainer_obj::sBroadcastListeners,HX_HCSTRING("sBroadcastListeners","\x91","\xf7","\x27","\xae")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &DisplayObjectContainer_obj::sSortBuffer,HX_HCSTRING("sSortBuffer","\x51","\x65","\x15","\x08")},
	{hx::fsObject /*::starling::rendering::BatchToken*/ ,(void *) &DisplayObjectContainer_obj::sCacheToken,HX_HCSTRING("sCacheToken","\xaa","\x1b","\x7f","\x31")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObjectContainer_obj_sMemberFields[] = {
	HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"),
	HX_HCSTRING("__touchGroup","\x20","\x12","\x19","\xcc"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("addChild","\xbb","\xcf","\x16","\xbf"),
	HX_HCSTRING("addChildAt","\x8e","\xad","\x36","\xce"),
	HX_HCSTRING("removeChild","\xb8","\x86","\xed","\x43"),
	HX_HCSTRING("removeChildAt","\xcb","\xdd","\x66","\x3f"),
	HX_HCSTRING("removeChildren","\xa3","\x55","\xc0","\x3a"),
	HX_HCSTRING("getChildAt","\xb9","\x07","\x0e","\xb6"),
	HX_HCSTRING("getChildByName","\x88","\xb9","\x73","\xa3"),
	HX_HCSTRING("getChildIndex","\x0c","\x68","\x02","\xb9"),
	HX_HCSTRING("setChildIndex","\x18","\x4a","\x08","\xfe"),
	HX_HCSTRING("swapChildren","\xf2","\x4a","\x53","\xe0"),
	HX_HCSTRING("swapChildrenAt","\x85","\xa4","\xf1","\x13"),
	HX_HCSTRING("sortChildren","\xbd","\x8a","\x17","\xea"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("broadcastEvent","\x59","\x11","\x65","\x61"),
	HX_HCSTRING("broadcastEventWith","\xff","\xd3","\x3c","\xc0"),
	HX_HCSTRING("get_numChildren","\x3c","\x21","\x62","\x1d"),
	HX_HCSTRING("get_touchGroup","\x49","\x1f","\x7b","\x09"),
	HX_HCSTRING("set_touchGroup","\xbd","\x07","\x9b","\x29"),
	HX_HCSTRING("__getChildEventListeners","\xeb","\x18","\x75","\x59"),
	::String(null()) };

static void DisplayObjectContainer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::sHelperMatrix,"sHelperMatrix");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::sHelperPoint,"sHelperPoint");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::sBroadcastListeners,"sBroadcastListeners");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::sSortBuffer,"sSortBuffer");
	HX_MARK_MEMBER_NAME(DisplayObjectContainer_obj::sCacheToken,"sCacheToken");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObjectContainer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::sHelperMatrix,"sHelperMatrix");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::sHelperPoint,"sHelperPoint");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::sBroadcastListeners,"sBroadcastListeners");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::sSortBuffer,"sSortBuffer");
	HX_VISIT_MEMBER_NAME(DisplayObjectContainer_obj::sCacheToken,"sCacheToken");
};

#endif

hx::Class DisplayObjectContainer_obj::__mClass;

static ::String DisplayObjectContainer_obj_sStaticFields[] = {
	HX_HCSTRING("sHelperMatrix","\x62","\x9b","\xea","\x19"),
	HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff"),
	HX_HCSTRING("sBroadcastListeners","\x91","\xf7","\x27","\xae"),
	HX_HCSTRING("sSortBuffer","\x51","\x65","\x15","\x08"),
	HX_HCSTRING("sCacheToken","\xaa","\x1b","\x7f","\x31"),
	HX_HCSTRING("mergeSort","\x36","\xb2","\xab","\x73"),
	::String(null())
};

void DisplayObjectContainer_obj::__register()
{
	hx::Object *dummy = new DisplayObjectContainer_obj;
	DisplayObjectContainer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.DisplayObjectContainer","\x12","\x98","\xae","\xcf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObjectContainer_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObjectContainer_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObjectContainer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObjectContainer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObjectContainer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObjectContainer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObjectContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObjectContainer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObjectContainer_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_73_boot)
HXDLIN(  73)		sHelperMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_74_boot)
HXDLIN(  74)		sHelperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_75_boot)
HXDLIN(  75)			int length = null();
HXDLIN(  75)			bool fixed = null();
HXDLIN(  75)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_75_boot)
HXDLIN(  75)		sBroadcastListeners =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_76_boot)
HXDLIN(  76)			int length = null();
HXDLIN(  76)			bool fixed = null();
HXDLIN(  76)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f39a17184c682513_76_boot)
HXDLIN(  76)		sSortBuffer =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f39a17184c682513_77_boot)
HXDLIN(  77)		sCacheToken =  ::starling::rendering::BatchToken_obj::__alloc( HX_CTX ,null(),null(),null());
            	}
}

} // end namespace starling
} // end namespace display
