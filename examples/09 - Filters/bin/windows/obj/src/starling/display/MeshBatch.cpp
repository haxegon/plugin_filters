// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MeshBatch
#include <starling/display/MeshBatch.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_Effect
#include <starling/rendering/Effect.h>
#endif
#ifndef INCLUDED_starling_rendering_FilterEffect
#include <starling/rendering/FilterEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_IndexData
#include <starling/rendering/IndexData.h>
#endif
#ifndef INCLUDED_starling_rendering_MeshEffect
#include <starling/rendering/MeshEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexData
#include <starling/rendering/VertexData.h>
#endif
#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MeshSubset
#include <starling/utils/MeshSubset.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cf84af76953d1ee1_62_new,"starling.display.MeshBatch","new",0x96a5028d,"starling.display.MeshBatch.new","starling/display/MeshBatch.hx",62,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_71_dispose,"starling.display.MeshBatch","dispose",0x4026cd4c,"starling.display.MeshBatch.dispose","starling/display/MeshBatch.hx",71,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_79_setVertexDataChanged,"starling.display.MeshBatch","setVertexDataChanged",0xbd85e417,"starling.display.MeshBatch.setVertexDataChanged","starling/display/MeshBatch.hx",79,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_87_setIndexDataChanged,"starling.display.MeshBatch","setIndexDataChanged",0xaf2005e7,"starling.display.MeshBatch.setIndexDataChanged","starling/display/MeshBatch.hx",87,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_94___setVertexAndIndexDataChanged,"starling.display.MeshBatch","__setVertexAndIndexDataChanged",0x179015fc,"starling.display.MeshBatch.__setVertexAndIndexDataChanged","starling/display/MeshBatch.hx",94,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_98___syncVertexBuffer,"starling.display.MeshBatch","__syncVertexBuffer",0xc2162e12,"starling.display.MeshBatch.__syncVertexBuffer","starling/display/MeshBatch.hx",98,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_104___syncIndexBuffer,"starling.display.MeshBatch","__syncIndexBuffer",0xab6572e4,"starling.display.MeshBatch.__syncIndexBuffer","starling/display/MeshBatch.hx",104,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_111_clear,"starling.display.MeshBatch","clear",0xfaff48fa,"starling.display.MeshBatch.clear","starling/display/MeshBatch.hx",111,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_135_addMesh,"starling.display.MeshBatch","addMesh",0x0970d95b,"starling.display.MeshBatch.addMesh","starling/display/MeshBatch.hx",135,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_167_addMeshAt,"starling.display.MeshBatch","addMeshAt",0xea5e5f2e,"starling.display.MeshBatch.addMeshAt","starling/display/MeshBatch.hx",167,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_186___setupFor,"starling.display.MeshBatch","__setupFor",0xf455cd1f,"starling.display.MeshBatch.__setupFor","starling/display/MeshBatch.hx",186,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_211_canAddMesh,"starling.display.MeshBatch","canAddMesh",0x5dd0fff1,"starling.display.MeshBatch.canAddMesh","starling/display/MeshBatch.hx",211,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_225_render,"starling.display.MeshBatch","render",0xa1e21349,"starling.display.MeshBatch.render","starling/display/MeshBatch.hx",225,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_259_setStyle,"starling.display.MeshBatch","setStyle",0x4c7ad8e2,"starling.display.MeshBatch.setStyle","starling/display/MeshBatch.hx",259,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_252_setStyle,"starling.display.MeshBatch","setStyle",0x4c7ad8e2,"starling.display.MeshBatch.setStyle","starling/display/MeshBatch.hx",252,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_268_set_numVertices,"starling.display.MeshBatch","set_numVertices",0x3a0386af,"starling.display.MeshBatch.set_numVertices","starling/display/MeshBatch.hx",268,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_282_set_numIndices,"starling.display.MeshBatch","set_numIndices",0x74e84931,"starling.display.MeshBatch.set_numIndices","starling/display/MeshBatch.hx",282,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_302_get_batchable,"starling.display.MeshBatch","get_batchable",0xdaab1a98,"starling.display.MeshBatch.get_batchable","starling/display/MeshBatch.hx",302,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_304_set_batchable,"starling.display.MeshBatch","set_batchable",0x1fb0fca4,"starling.display.MeshBatch.set_batchable","starling/display/MeshBatch.hx",304,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_50_boot,"starling.display.MeshBatch","boot",0x31d63965,"starling.display.MeshBatch.boot","starling/display/MeshBatch.hx",50,0x9baf3185)
HX_LOCAL_STACK_FRAME(_hx_pos_cf84af76953d1ee1_58_boot,"starling.display.MeshBatch","boot",0x31d63965,"starling.display.MeshBatch.boot","starling/display/MeshBatch.hx",58,0x9baf3185)
namespace starling{
namespace display{

void MeshBatch_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_cf84af76953d1ee1_62_new)
HXLINE(  63)		 ::starling::rendering::VertexData vertexData =  ::starling::rendering::VertexData_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  64)		 ::starling::rendering::IndexData indexData =  ::starling::rendering::IndexData_obj::__alloc( HX_CTX ,null());
HXLINE(  66)		super::__construct(vertexData,indexData,null());
            	}

Dynamic MeshBatch_obj::__CreateEmpty() { return new MeshBatch_obj; }

void *MeshBatch_obj::_hx_vtable = 0;

Dynamic MeshBatch_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MeshBatch_obj > _hx_result = new MeshBatch_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MeshBatch_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3cebba07) {
		if (inClassId<=(int)0x25137bc0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
		} else {
			return inClassId==(int)0x3cebba07;
		}
	} else {
		return inClassId==(int)0x6dea180f || inClassId==(int)0x7db9e433;
	}
}

void MeshBatch_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_71_dispose)
HXLINE(  72)		if (hx::IsNotNull( this->_hx___effect )) {
HXLINE(  72)			this->_hx___effect->dispose();
            		}
HXLINE(  73)		this->super::dispose();
            	}


void MeshBatch_obj::setVertexDataChanged(){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_79_setVertexDataChanged)
HXLINE(  80)		this->_hx___vertexSyncRequired = true;
HXLINE(  81)		this->super::setVertexDataChanged();
            	}


void MeshBatch_obj::setIndexDataChanged(){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_87_setIndexDataChanged)
HXLINE(  88)		this->_hx___indexSyncRequired = true;
HXLINE(  89)		this->super::setIndexDataChanged();
            	}


void MeshBatch_obj::_hx___setVertexAndIndexDataChanged(){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_94___setVertexAndIndexDataChanged)
HXDLIN(  94)		this->_hx___vertexSyncRequired = (this->_hx___indexSyncRequired = true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBatch_obj,_hx___setVertexAndIndexDataChanged,(void))

void MeshBatch_obj::_hx___syncVertexBuffer(){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_98___syncVertexBuffer)
HXLINE(  99)		this->_hx___effect->uploadVertexData(this->_hx___vertexData,null());
HXLINE( 100)		this->_hx___vertexSyncRequired = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBatch_obj,_hx___syncVertexBuffer,(void))

void MeshBatch_obj::_hx___syncIndexBuffer(){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_104___syncIndexBuffer)
HXLINE( 105)		this->_hx___effect->uploadIndexData(this->_hx___indexData,null());
HXLINE( 106)		this->_hx___indexSyncRequired = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBatch_obj,_hx___syncIndexBuffer,(void))

void MeshBatch_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_111_clear)
HXLINE( 112)		if (hx::IsNotNull( this->_hx___parent )) {
HXLINE( 112)			this->setRequiresRedraw();
            		}
HXLINE( 114)		this->_hx___vertexData->set_numVertices((int)0);
HXLINE( 115)		this->_hx___indexData->set_numIndices((int)0);
HXLINE( 116)		this->_hx___vertexSyncRequired = true;
HXLINE( 117)		this->_hx___indexSyncRequired = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBatch_obj,clear,(void))

void MeshBatch_obj::addMesh( ::starling::display::Mesh mesh, ::openfl::geom::Matrix matrix,hx::Null< Float >  __o_alpha, ::starling::utils::MeshSubset subset,hx::Null< bool >  __o_ignoreTransformations){
Float alpha = __o_alpha.Default(((Float)1.0));
bool ignoreTransformations = __o_ignoreTransformations.Default(false);
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_135_addMesh)
HXLINE( 136)		if (ignoreTransformations) {
HXLINE( 136)			matrix = null();
            		}
            		else {
HXLINE( 137)			if (hx::IsNull( matrix )) {
HXLINE( 137)				matrix = mesh->get_transformationMatrix();
            			}
            		}
HXLINE( 138)		if (hx::IsNull( subset )) {
HXLINE( 138)			subset = ::starling::display::MeshBatch_obj::sFullMeshSubset;
            		}
HXLINE( 140)		int targetVertexID = this->_hx___vertexData->get_numVertices();
HXLINE( 141)		int targetIndexID = this->_hx___indexData->get_numIndices();
HXLINE( 142)		 ::starling::styles::MeshStyle meshStyle = mesh->_hx___style;
HXLINE( 144)		if ((targetVertexID == (int)0)) {
HXLINE( 145)			this->_hx___setupFor(mesh);
            		}
HXLINE( 147)		meshStyle->batchVertexData(this->_hx___style,targetVertexID,matrix,subset->vertexID,subset->numVertices);
HXLINE( 148)		 ::starling::styles::MeshStyle _hx_tmp = this->_hx___style;
HXDLIN( 148)		meshStyle->batchIndexData(_hx_tmp,targetIndexID,(targetVertexID - subset->vertexID),subset->indexID,subset->numIndices);
HXLINE( 151)		if ((alpha != ((Float)1.0))) {
HXLINE( 151)			this->_hx___vertexData->scaleAlphas(HX_("color",63,71,5c,4a),alpha,targetVertexID,subset->numVertices);
            		}
HXLINE( 152)		if (hx::IsNotNull( this->_hx___parent )) {
HXLINE( 152)			this->setRequiresRedraw();
            		}
HXLINE( 154)		this->_hx___indexSyncRequired = (this->_hx___vertexSyncRequired = true);
            	}


HX_DEFINE_DYNAMIC_FUNC5(MeshBatch_obj,addMesh,(void))

void MeshBatch_obj::addMeshAt( ::starling::display::Mesh mesh,int indexID,int vertexID){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_167_addMeshAt)
HXLINE( 168)		int numIndices = mesh->get_numIndices();
HXLINE( 169)		int numVertices = mesh->get_numVertices();
HXLINE( 170)		 ::openfl::geom::Matrix matrix = mesh->get_transformationMatrix();
HXLINE( 171)		 ::starling::styles::MeshStyle meshStyle = mesh->_hx___style;
HXLINE( 173)		if ((this->_hx___vertexData->get_numVertices() == (int)0)) {
HXLINE( 174)			this->_hx___setupFor(mesh);
            		}
HXLINE( 176)		meshStyle->batchVertexData(this->_hx___style,vertexID,matrix,(int)0,numVertices);
HXLINE( 177)		meshStyle->batchIndexData(this->_hx___style,indexID,vertexID,(int)0,numIndices);
HXLINE( 179)		if ((this->get_alpha() != ((Float)1.0))) {
HXLINE( 179)			 ::starling::rendering::VertexData _hx_tmp = this->_hx___vertexData;
HXDLIN( 179)			_hx_tmp->scaleAlphas(HX_("color",63,71,5c,4a),this->get_alpha(),vertexID,numVertices);
            		}
HXLINE( 180)		if (hx::IsNotNull( this->_hx___parent )) {
HXLINE( 180)			this->setRequiresRedraw();
            		}
HXLINE( 182)		this->_hx___indexSyncRequired = (this->_hx___vertexSyncRequired = true);
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshBatch_obj,addMeshAt,(void))

void MeshBatch_obj::_hx___setupFor( ::starling::display::Mesh mesh){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_186___setupFor)
HXLINE( 187)		 ::starling::styles::MeshStyle meshStyle = mesh->_hx___style;
HXLINE( 188)		hx::Class meshStyleType = meshStyle->get_type();
HXLINE( 190)		if (hx::IsNotEq( this->_hx___style->get_type(),meshStyleType )) {
HXLINE( 192)			 ::starling::styles::MeshStyle newStyle = ( ( ::starling::styles::MeshStyle)(::Type_obj::createInstance(meshStyleType,::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 193)			newStyle->copyFrom(meshStyle);
HXLINE( 194)			this->setStyle(newStyle,false);
            		}
            		else {
HXLINE( 198)			this->_hx___style->copyFrom(meshStyle);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshBatch_obj,_hx___setupFor,(void))

bool MeshBatch_obj::canAddMesh( ::starling::display::Mesh mesh,hx::Null< int >  __o_numVertices){
int numVertices = __o_numVertices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_211_canAddMesh)
HXLINE( 212)		int currentNumVertices = this->_hx___vertexData->get_numVertices();
HXLINE( 214)		if ((currentNumVertices == (int)0)) {
HXLINE( 214)			return true;
            		}
HXLINE( 215)		if ((numVertices < (int)0)) {
HXLINE( 215)			numVertices = mesh->get_numVertices();
            		}
HXLINE( 216)		if ((numVertices == (int)0)) {
HXLINE( 216)			return true;
            		}
HXLINE( 217)		if (((numVertices + currentNumVertices) > (int)65535)) {
HXLINE( 217)			return false;
            		}
HXLINE( 219)		return this->_hx___style->canBatchWith(mesh->_hx___style);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshBatch_obj,canAddMesh,return )

void MeshBatch_obj::render( ::starling::rendering::Painter painter){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_225_render)
HXLINE( 226)		if ((this->_hx___vertexData->get_numVertices() == (int)0)) {
HXLINE( 226)			return;
            		}
HXLINE( 227)		if (this->_hx___pixelSnapping) {
HXLINE( 228)			 ::openfl::geom::Matrix _hx_tmp = painter->get_state()->get_modelviewMatrix();
HXLINE( 227)			::starling::utils::MatrixUtil_obj::snapToPixels(_hx_tmp,painter->get_pixelSize());
            		}
HXLINE( 230)		if (this->_hx___batchable) {
HXLINE( 232)			painter->batchMesh(hx::ObjectPtr<OBJ_>(this),null());
            		}
            		else {
HXLINE( 236)			painter->finishMeshBatch();
HXLINE( 237)			{
HXLINE( 237)				 ::starling::rendering::Painter _g = painter;
HXDLIN( 237)				_g->set_drawCount((_g->get_drawCount() + (int)1));
            			}
HXLINE( 238)			painter->prepareToDraw();
HXLINE( 239)			painter->excludeFromCache(hx::ObjectPtr<OBJ_>(this));
HXLINE( 241)			if (this->_hx___vertexSyncRequired) {
HXLINE( 241)				this->_hx___syncVertexBuffer();
            			}
HXLINE( 242)			if (this->_hx___indexSyncRequired) {
HXLINE( 242)				this->_hx___syncIndexBuffer();
            			}
HXLINE( 244)			 ::starling::styles::MeshStyle _hx_tmp1 = this->_hx___style;
HXDLIN( 244)			 ::starling::rendering::MeshEffect _hx_tmp2 = this->_hx___effect;
HXDLIN( 244)			_hx_tmp1->updateEffect(_hx_tmp2,painter->get_state());
HXLINE( 245)			 ::starling::rendering::MeshEffect _hx_tmp3 = this->_hx___effect;
HXDLIN( 245)			_hx_tmp3->render((int)0,this->_hx___indexData->get_numTriangles());
            		}
            	}


void MeshBatch_obj::setStyle( ::starling::styles::MeshStyle meshStyle,hx::Null< bool >  __o_mergeWithPredecessor){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::starling::display::MeshBatch,_gthis) HXARGC(1)
            		void _hx_run( ::starling::rendering::Effect effect){
            			HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_259_setStyle)
HXLINE( 259)			_gthis->_hx___setVertexAndIndexDataChanged();
            		}
            		HX_END_LOCAL_FUNC1((void))

bool mergeWithPredecessor = __o_mergeWithPredecessor.Default(true);
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_252_setStyle)
HXLINE( 250)		 ::starling::display::MeshBatch _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 253)		this->super::setStyle(meshStyle,mergeWithPredecessor);
HXLINE( 255)		if (hx::IsNotNull( this->_hx___effect )) {
HXLINE( 256)			this->_hx___effect->dispose();
            		}
HXLINE( 258)		this->_hx___effect = this->get_style()->createEffect();
HXLINE( 259)		this->_hx___effect->set_onRestore( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 261)		this->_hx___setVertexAndIndexDataChanged();
            	}


int MeshBatch_obj::set_numVertices(int value){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_268_set_numVertices)
HXLINE( 269)		if ((this->_hx___vertexData->get_numVertices() != value)) {
HXLINE( 271)			this->_hx___vertexData->set_numVertices(value);
HXLINE( 272)			this->_hx___vertexSyncRequired = true;
HXLINE( 273)			this->setRequiresRedraw();
            		}
HXLINE( 275)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshBatch_obj,set_numVertices,return )

int MeshBatch_obj::set_numIndices(int value){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_282_set_numIndices)
HXLINE( 283)		if ((this->_hx___indexData->get_numIndices() != value)) {
HXLINE( 285)			this->_hx___indexData->set_numIndices(value);
HXLINE( 286)			this->_hx___indexSyncRequired = true;
HXLINE( 287)			this->setRequiresRedraw();
            		}
HXLINE( 289)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshBatch_obj,set_numIndices,return )

bool MeshBatch_obj::get_batchable(){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_302_get_batchable)
HXDLIN( 302)		return this->_hx___batchable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBatch_obj,get_batchable,return )

bool MeshBatch_obj::set_batchable(bool value){
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_304_set_batchable)
HXLINE( 305)		if ((this->_hx___batchable != value)) {
HXLINE( 307)			this->_hx___batchable = value;
HXLINE( 308)			this->setRequiresRedraw();
            		}
HXLINE( 310)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshBatch_obj,set_batchable,return )

int MeshBatch_obj::MAX_NUM_VERTICES;

 ::starling::utils::MeshSubset MeshBatch_obj::sFullMeshSubset;


hx::ObjectPtr< MeshBatch_obj > MeshBatch_obj::__new() {
	hx::ObjectPtr< MeshBatch_obj > __this = new MeshBatch_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MeshBatch_obj > MeshBatch_obj::__alloc(hx::Ctx *_hx_ctx) {
	MeshBatch_obj *__this = (MeshBatch_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MeshBatch_obj), true, "starling.display.MeshBatch"));
	*(void **)__this = MeshBatch_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MeshBatch_obj::MeshBatch_obj()
{
}

void MeshBatch_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MeshBatch);
	HX_MARK_MEMBER_NAME(_hx___effect,"__effect");
	HX_MARK_MEMBER_NAME(_hx___batchable,"__batchable");
	HX_MARK_MEMBER_NAME(_hx___vertexSyncRequired,"__vertexSyncRequired");
	HX_MARK_MEMBER_NAME(_hx___indexSyncRequired,"__indexSyncRequired");
	 ::starling::display::Mesh_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MeshBatch_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___effect,"__effect");
	HX_VISIT_MEMBER_NAME(_hx___batchable,"__batchable");
	HX_VISIT_MEMBER_NAME(_hx___vertexSyncRequired,"__vertexSyncRequired");
	HX_VISIT_MEMBER_NAME(_hx___indexSyncRequired,"__indexSyncRequired");
	 ::starling::display::Mesh_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MeshBatch_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"addMesh") ) { return hx::Val( addMesh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__effect") ) { return hx::Val( _hx___effect ); }
		if (HX_FIELD_EQ(inName,"setStyle") ) { return hx::Val( setStyle_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addMeshAt") ) { return hx::Val( addMeshAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"batchable") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_batchable() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__setupFor") ) { return hx::Val( _hx___setupFor_dyn() ); }
		if (HX_FIELD_EQ(inName,"canAddMesh") ) { return hx::Val( canAddMesh_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__batchable") ) { return hx::Val( _hx___batchable ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_batchable") ) { return hx::Val( get_batchable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_batchable") ) { return hx::Val( set_batchable_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_numIndices") ) { return hx::Val( set_numIndices_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_numVertices") ) { return hx::Val( set_numVertices_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__syncIndexBuffer") ) { return hx::Val( _hx___syncIndexBuffer_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__syncVertexBuffer") ) { return hx::Val( _hx___syncVertexBuffer_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__indexSyncRequired") ) { return hx::Val( _hx___indexSyncRequired ); }
		if (HX_FIELD_EQ(inName,"setIndexDataChanged") ) { return hx::Val( setIndexDataChanged_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__vertexSyncRequired") ) { return hx::Val( _hx___vertexSyncRequired ); }
		if (HX_FIELD_EQ(inName,"setVertexDataChanged") ) { return hx::Val( setVertexDataChanged_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__setVertexAndIndexDataChanged") ) { return hx::Val( _hx___setVertexAndIndexDataChanged_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MeshBatch_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"sFullMeshSubset") ) { outValue = ( sFullMeshSubset ); return true; }
	}
	return false;
}

hx::Val MeshBatch_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__effect") ) { _hx___effect=inValue.Cast<  ::starling::rendering::MeshEffect >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"batchable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_batchable(inValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__batchable") ) { _hx___batchable=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__indexSyncRequired") ) { _hx___indexSyncRequired=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__vertexSyncRequired") ) { _hx___vertexSyncRequired=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MeshBatch_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"sFullMeshSubset") ) { sFullMeshSubset=ioValue.Cast<  ::starling::utils::MeshSubset >(); return true; }
	}
	return false;
}

void MeshBatch_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__effect","\xb1","\xc5","\xd2","\x08"));
	outFields->push(HX_HCSTRING("__batchable","\x34","\x03","\xd7","\x29"));
	outFields->push(HX_HCSTRING("__vertexSyncRequired","\x7e","\xa3","\x29","\xb3"));
	outFields->push(HX_HCSTRING("__indexSyncRequired","\xec","\xbd","\x2a","\xac"));
	outFields->push(HX_HCSTRING("batchable","\x54","\xba","\xaa","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MeshBatch_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::rendering::MeshEffect*/ ,(int)offsetof(MeshBatch_obj,_hx___effect),HX_HCSTRING("__effect","\xb1","\xc5","\xd2","\x08")},
	{hx::fsBool,(int)offsetof(MeshBatch_obj,_hx___batchable),HX_HCSTRING("__batchable","\x34","\x03","\xd7","\x29")},
	{hx::fsBool,(int)offsetof(MeshBatch_obj,_hx___vertexSyncRequired),HX_HCSTRING("__vertexSyncRequired","\x7e","\xa3","\x29","\xb3")},
	{hx::fsBool,(int)offsetof(MeshBatch_obj,_hx___indexSyncRequired),HX_HCSTRING("__indexSyncRequired","\xec","\xbd","\x2a","\xac")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MeshBatch_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &MeshBatch_obj::MAX_NUM_VERTICES,HX_HCSTRING("MAX_NUM_VERTICES","\x4d","\x82","\x27","\x3f")},
	{hx::fsObject /*::starling::utils::MeshSubset*/ ,(void *) &MeshBatch_obj::sFullMeshSubset,HX_HCSTRING("sFullMeshSubset","\x31","\xbe","\xa3","\x98")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MeshBatch_obj_sMemberFields[] = {
	HX_HCSTRING("__effect","\xb1","\xc5","\xd2","\x08"),
	HX_HCSTRING("__batchable","\x34","\x03","\xd7","\x29"),
	HX_HCSTRING("__vertexSyncRequired","\x7e","\xa3","\x29","\xb3"),
	HX_HCSTRING("__indexSyncRequired","\xec","\xbd","\x2a","\xac"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("setVertexDataChanged","\xe4","\x58","\xbe","\xbe"),
	HX_HCSTRING("setIndexDataChanged","\xba","\xe9","\xee","\x02"),
	HX_HCSTRING("__setVertexAndIndexDataChanged","\x09","\x6d","\x7d","\xc9"),
	HX_HCSTRING("__syncVertexBuffer","\x9f","\xe5","\xc7","\x29"),
	HX_HCSTRING("__syncIndexBuffer","\xf7","\xab","\xe5","\xb3"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("addMesh","\xae","\x8c","\x96","\x84"),
	HX_HCSTRING("addMeshAt","\x41","\xcd","\xd5","\xc0"),
	HX_HCSTRING("__setupFor","\xac","\xaf","\x5e","\xc6"),
	HX_HCSTRING("canAddMesh","\x7e","\xe2","\xd9","\x2f"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("setStyle","\x2f","\x0e","\x52","\x92"),
	HX_HCSTRING("set_numVertices","\x02","\x45","\xd9","\x12"),
	HX_HCSTRING("set_numIndices","\x3e","\xf6","\x89","\xa9"),
	HX_HCSTRING("get_batchable","\x2b","\x8e","\x0e","\xbd"),
	HX_HCSTRING("set_batchable","\x37","\x70","\x14","\x02"),
	::String(null()) };

static void MeshBatch_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MeshBatch_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MeshBatch_obj::MAX_NUM_VERTICES,"MAX_NUM_VERTICES");
	HX_MARK_MEMBER_NAME(MeshBatch_obj::sFullMeshSubset,"sFullMeshSubset");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MeshBatch_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MeshBatch_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MeshBatch_obj::MAX_NUM_VERTICES,"MAX_NUM_VERTICES");
	HX_VISIT_MEMBER_NAME(MeshBatch_obj::sFullMeshSubset,"sFullMeshSubset");
};

#endif

hx::Class MeshBatch_obj::__mClass;

static ::String MeshBatch_obj_sStaticFields[] = {
	HX_HCSTRING("MAX_NUM_VERTICES","\x4d","\x82","\x27","\x3f"),
	HX_HCSTRING("sFullMeshSubset","\x31","\xbe","\xa3","\x98"),
	::String(null())
};

void MeshBatch_obj::__register()
{
	hx::Object *dummy = new MeshBatch_obj;
	MeshBatch_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.MeshBatch","\x1b","\xb8","\xdb","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MeshBatch_obj::__GetStatic;
	__mClass->mSetStaticField = &MeshBatch_obj::__SetStatic;
	__mClass->mMarkFunc = MeshBatch_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MeshBatch_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MeshBatch_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MeshBatch_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MeshBatch_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MeshBatch_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MeshBatch_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MeshBatch_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_cf84af76953d1ee1_50_boot)
HXDLIN(  50)		MAX_NUM_VERTICES = (int)65535;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_cf84af76953d1ee1_58_boot)
HXDLIN(  58)		sFullMeshSubset =  ::starling::utils::MeshSubset_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace starling
} // end namespace display
