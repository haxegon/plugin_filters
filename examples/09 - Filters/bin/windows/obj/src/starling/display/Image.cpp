// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_TextureSetupSettings
#include <starling/display/TextureSetupSettings.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_IndexData
#include <starling/rendering/IndexData.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexData
#include <starling/rendering/VertexData.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_Padding
#include <starling/utils/Padding.h>
#endif
#ifndef INCLUDED_starling_utils_Pool
#include <starling/utils/Pool.h>
#endif
#ifndef INCLUDED_starling_utils_RectangleUtil
#include <starling/utils/RectangleUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_084429896d36500d_67_new,"starling.display.Image","new",0xd817cf5b,"starling.display.Image.new","starling/display/Image.hx",67,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_98_get_scale9Grid,"starling.display.Image","get_scale9Grid",0x73a91603,"starling.display.Image.get_scale9Grid","starling/display/Image.hx",98,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_100_set_scale9Grid,"starling.display.Image","set_scale9Grid",0x93c8fe77,"starling.display.Image.set_scale9Grid","starling/display/Image.hx",100,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_143_get_tileGrid,"starling.display.Image","get_tileGrid",0x375b7ac2,"starling.display.Image.get_tileGrid","starling/display/Image.hx",143,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_145_set_tileGrid,"starling.display.Image","set_tileGrid",0x4c549e36,"starling.display.Image.set_tileGrid","starling/display/Image.hx",145,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_163___setupVertices,"starling.display.Image","__setupVertices",0xf26bb3f1,"starling.display.Image.__setupVertices","starling/display/Image.hx",163,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_170_set_scaleX,"starling.display.Image","set_scaleX",0x48789f30,"starling.display.Image.set_scaleX","starling/display/Image.hx",170,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_178_set_scaleY,"starling.display.Image","set_scaleY",0x48789f31,"starling.display.Image.set_scaleY","starling/display/Image.hx",178,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_186_set_texture,"starling.display.Image","set_texture",0x5aec21f9,"starling.display.Image.set_texture","starling/display/Image.hx",186,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_211___setupScale9Grid,"starling.display.Image","__setupScale9Grid",0x4fd732cd,"starling.display.Image.__setupScale9Grid","starling/display/Image.hx",211,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_365___setupScale9GridAttributes,"starling.display.Image","__setupScale9GridAttributes",0x53c84204,"starling.display.Image.__setupScale9GridAttributes","starling/display/Image.hx",365,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_428___setupTileGrid,"starling.display.Image","__setupTileGrid",0x06c7f10c,"starling.display.Image.__setupTileGrid","starling/display/Image.hx",428,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_531_automateSetupForTexture,"starling.display.Image","automateSetupForTexture",0xfff089d6,"starling.display.Image.automateSetupForTexture","starling/display/Image.hx",531,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_542_resetSetupForTexture,"starling.display.Image","resetSetupForTexture",0x466a3345,"starling.display.Image.resetSetupForTexture","starling/display/Image.hx",542,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_550_bindScale9GridToTexture,"starling.display.Image","bindScale9GridToTexture",0x2b36f7c9,"starling.display.Image.bindScale9GridToTexture","starling/display/Image.hx",550,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_551_bindScale9GridToTexture,"starling.display.Image","bindScale9GridToTexture",0x2b36f7c9,"starling.display.Image.bindScale9GridToTexture","starling/display/Image.hx",551,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_549_bindScale9GridToTexture,"starling.display.Image","bindScale9GridToTexture",0x2b36f7c9,"starling.display.Image.bindScale9GridToTexture","starling/display/Image.hx",549,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_559_bindPivotPointToTexture,"starling.display.Image","bindPivotPointToTexture",0xf5a13b50,"starling.display.Image.bindPivotPointToTexture","starling/display/Image.hx",559,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_560_bindPivotPointToTexture,"starling.display.Image","bindPivotPointToTexture",0xf5a13b50,"starling.display.Image.bindPivotPointToTexture","starling/display/Image.hx",560,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_558_bindPivotPointToTexture,"starling.display.Image","bindPivotPointToTexture",0xf5a13b50,"starling.display.Image.bindPivotPointToTexture","starling/display/Image.hx",558,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_53_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",53,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_56_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",56,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_57_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",57,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_58_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",58,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_59_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",59,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_60_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",60,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_61_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",61,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_62_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",62,0x1693cf77)
HX_LOCAL_STACK_FRAME(_hx_pos_084429896d36500d_63_boot,"starling.display.Image","boot",0x34d6a0d7,"starling.display.Image.boot","starling/display/Image.hx",63,0x1693cf77)
namespace starling{
namespace display{

void Image_obj::__construct( ::starling::textures::Texture texture){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_67_new)
HXLINE(  68)		super::__construct((int)100,(int)100,null());
HXLINE(  69)		this->set_texture(texture);
HXLINE(  70)		this->readjustSize(null(),null());
            	}

Dynamic Image_obj::__CreateEmpty() { return new Image_obj; }

void *Image_obj::_hx_vtable = 0;

Dynamic Image_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Image_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f9ca8e1) {
		if (inClassId<=(int)0x3cebba07) {
			if (inClassId<=(int)0x25137bc0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
			} else {
				return inClassId==(int)0x3cebba07;
			}
		} else {
			return inClassId==(int)0x3f9ca8e1;
		}
	} else {
		return inClassId==(int)0x4fcbd265 || inClassId==(int)0x6dea180f;
	}
}

 ::openfl::geom::Rectangle Image_obj::get_scale9Grid(){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_98_get_scale9Grid)
HXDLIN(  98)		return this->_hx___scale9Grid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_scale9Grid,return )

 ::openfl::geom::Rectangle Image_obj::set_scale9Grid( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_100_set_scale9Grid)
HXLINE( 101)		if (hx::IsNotNull( value )) {
HXLINE( 103)			if (hx::IsNull( this->_hx___scale9Grid )) {
HXLINE( 103)				this->_hx___scale9Grid = value->clone();
            			}
            			else {
HXLINE( 104)				this->_hx___scale9Grid->copyFrom(value);
            			}
HXLINE( 106)			this->readjustSize(null(),null());
HXLINE( 107)			this->_hx___tileGrid = null();
            		}
            		else {
HXLINE( 109)			this->_hx___scale9Grid = null();
            		}
HXLINE( 111)		this->_hx___setupVertices();
HXLINE( 113)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_scale9Grid,return )

 ::openfl::geom::Rectangle Image_obj::get_tileGrid(){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_143_get_tileGrid)
HXDLIN( 143)		return this->_hx___tileGrid;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_tileGrid,return )

 ::openfl::geom::Rectangle Image_obj::set_tileGrid( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_145_set_tileGrid)
HXLINE( 146)		if (hx::IsNotNull( value )) {
HXLINE( 148)			if (hx::IsNull( this->_hx___tileGrid )) {
HXLINE( 148)				this->_hx___tileGrid = value->clone();
            			}
            			else {
HXLINE( 149)				this->_hx___tileGrid->copyFrom(value);
            			}
HXLINE( 151)			this->_hx___scale9Grid = null();
            		}
            		else {
HXLINE( 153)			this->_hx___tileGrid = null();
            		}
HXLINE( 155)		this->_hx___setupVertices();
HXLINE( 157)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,set_tileGrid,return )

void Image_obj::_hx___setupVertices(){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_163___setupVertices)
HXDLIN( 163)		bool _hx_tmp;
HXDLIN( 163)		if (hx::IsNotNull( this->get_texture() )) {
HXDLIN( 163)			_hx_tmp = hx::IsNotNull( this->_hx___scale9Grid );
            		}
            		else {
HXDLIN( 163)			_hx_tmp = false;
            		}
HXDLIN( 163)		if (_hx_tmp) {
HXDLIN( 163)			this->_hx___setupScale9Grid();
            		}
            		else {
HXLINE( 164)			bool _hx_tmp1;
HXDLIN( 164)			if (hx::IsNotNull( this->get_texture() )) {
HXLINE( 164)				_hx_tmp1 = hx::IsNotNull( this->_hx___tileGrid );
            			}
            			else {
HXLINE( 164)				_hx_tmp1 = false;
            			}
HXDLIN( 164)			if (_hx_tmp1) {
HXLINE( 164)				this->_hx___setupTileGrid();
            			}
            			else {
HXLINE( 165)				this->super::_hx___setupVertices();
            			}
            		}
            	}


Float Image_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_170_set_scaleX)
HXLINE( 171)		this->super::set_scaleX(value);
HXLINE( 172)		bool _hx_tmp;
HXDLIN( 172)		if (hx::IsNotNull( this->get_texture() )) {
HXLINE( 172)			if (hx::IsNull( this->_hx___scale9Grid )) {
HXLINE( 172)				_hx_tmp = hx::IsNotNull( this->_hx___tileGrid );
            			}
            			else {
HXLINE( 172)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 172)			_hx_tmp = false;
            		}
HXDLIN( 172)		if (_hx_tmp) {
HXLINE( 172)			this->_hx___setupVertices();
            		}
HXLINE( 173)		return value;
            	}


Float Image_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_178_set_scaleY)
HXLINE( 179)		this->super::set_scaleY(value);
HXLINE( 180)		bool _hx_tmp;
HXDLIN( 180)		if (hx::IsNotNull( this->get_texture() )) {
HXLINE( 180)			if (hx::IsNull( this->_hx___scale9Grid )) {
HXLINE( 180)				_hx_tmp = hx::IsNotNull( this->_hx___tileGrid );
            			}
            			else {
HXLINE( 180)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 180)			_hx_tmp = false;
            		}
HXDLIN( 180)		if (_hx_tmp) {
HXLINE( 180)			this->_hx___setupVertices();
            		}
HXLINE( 181)		return value;
            	}


 ::starling::textures::Texture Image_obj::set_texture( ::starling::textures::Texture value){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_186_set_texture)
HXLINE( 187)		if (hx::IsNotEq( value,this->get_texture() )) {
HXLINE( 189)			 ::starling::display::TextureSetupSettings textureSetupSettings = null();
HXLINE( 191)			bool _hx_tmp;
HXDLIN( 191)			if (hx::IsNotNull( this->get_texture() )) {
HXLINE( 191)				::Dynamic this1 = ::starling::display::Image_obj::sSetupFunctions;
HXDLIN( 191)				_hx_tmp = ( ( ::haxe::ds::ObjectMap)(this1) )->exists(this->get_texture());
            			}
            			else {
HXLINE( 191)				_hx_tmp = false;
            			}
HXDLIN( 191)			if (_hx_tmp) {
HXLINE( 193)				::Dynamic this2 = ::starling::display::Image_obj::sSetupFunctions;
HXDLIN( 193)				textureSetupSettings = ( ( ::haxe::ds::ObjectMap)(this2) )->get(this->get_texture()).StaticCast<  ::starling::display::TextureSetupSettings >();
HXLINE( 194)				if (hx::IsNotNull( textureSetupSettings->onRelease )) {
HXLINE( 195)					textureSetupSettings->onRelease(hx::ObjectPtr<OBJ_>(this));
            				}
            			}
HXLINE( 198)			this->super::set_texture(value);
HXLINE( 200)			bool _hx_tmp1;
HXDLIN( 200)			if (hx::IsNotNull( value )) {
HXLINE( 200)				_hx_tmp1 = hx::IsNotNull( textureSetupSettings );
            			}
            			else {
HXLINE( 200)				_hx_tmp1 = false;
            			}
HXDLIN( 200)			if (_hx_tmp1) {
HXLINE( 201)				textureSetupSettings->onAssign(hx::ObjectPtr<OBJ_>(this));
            			}
            			else {
HXLINE( 202)				bool _hx_tmp2;
HXDLIN( 202)				if (hx::IsNotNull( this->_hx___scale9Grid )) {
HXLINE( 202)					_hx_tmp2 = hx::IsNotNull( value );
            				}
            				else {
HXLINE( 202)					_hx_tmp2 = false;
            				}
HXDLIN( 202)				if (_hx_tmp2) {
HXLINE( 203)					this->readjustSize(null(),null());
            				}
            			}
            		}
HXLINE( 205)		return value;
            	}


void Image_obj::_hx___setupScale9Grid(){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_211___setupScale9Grid)
HXLINE( 212)		 ::starling::textures::Texture texture = this->get_texture();
HXLINE( 213)		 ::openfl::geom::Rectangle frame = texture->get_frame();
HXLINE( 214)		Float absScaleX;
HXDLIN( 214)		if ((this->get_scaleX() > (int)0)) {
HXLINE( 214)			absScaleX = this->get_scaleX();
            		}
            		else {
HXLINE( 214)			absScaleX = -(this->get_scaleX());
            		}
HXLINE( 215)		Float absScaleY;
HXDLIN( 215)		if ((this->get_scaleY() > (int)0)) {
HXLINE( 215)			absScaleY = this->get_scaleY();
            		}
            		else {
HXLINE( 215)			absScaleY = -(this->get_scaleY());
            		}
HXLINE( 217)		bool _hx_tmp;
HXDLIN( 217)		if ((absScaleX != ((Float)0.0))) {
HXLINE( 217)			_hx_tmp = (absScaleY == (int)0);
            		}
            		else {
HXLINE( 217)			_hx_tmp = true;
            		}
HXDLIN( 217)		if (_hx_tmp) {
HXLINE( 217)			return;
            		}
HXLINE( 222)		Float _hx_tmp1 = this->_hx___scale9Grid->width;
HXDLIN( 222)		if (::starling::utils::MathUtil_obj::isEquivalent(_hx_tmp1,texture->get_frameWidth(),null())) {
HXLINE( 223)			absScaleY = ((Float)absScaleY / (Float)absScaleX);
            		}
            		else {
HXLINE( 224)			Float _hx_tmp2 = this->_hx___scale9Grid->height;
HXDLIN( 224)			if (::starling::utils::MathUtil_obj::isEquivalent(_hx_tmp2,texture->get_frameHeight(),null())) {
HXLINE( 225)				absScaleX = ((Float)absScaleX / (Float)absScaleY);
            			}
            		}
HXLINE( 227)		Float invScaleX = ((Float)((Float)1.0) / (Float)absScaleX);
HXLINE( 228)		Float invScaleY = ((Float)((Float)1.0) / (Float)absScaleY);
HXLINE( 229)		 ::starling::rendering::VertexData vertexData = this->get_vertexData();
HXLINE( 230)		 ::starling::rendering::IndexData indexData = this->get_indexData();
HXLINE( 231)		int prevNumVertices = vertexData->get_numVertices();
HXLINE( 232)		int numVertices;
HXDLIN( 232)		int numQuads;
HXLINE( 233)		Float correction;
HXLINE( 238)		 ::openfl::geom::Rectangle gridCenter = ::starling::utils::Pool_obj::getRectangle(null(),null(),null(),null());
HXLINE( 239)		 ::openfl::geom::Rectangle textureBounds = ::starling::utils::Pool_obj::getRectangle(null(),null(),null(),null());
HXLINE( 240)		 ::openfl::geom::Rectangle pixelBounds = ::starling::utils::Pool_obj::getRectangle(null(),null(),null(),null());
HXLINE( 241)		 ::openfl::geom::Rectangle intersection = ::starling::utils::Pool_obj::getRectangle(null(),null(),null(),null());
HXLINE( 243)		gridCenter->copyFrom(this->_hx___scale9Grid);
HXLINE( 244)		Float _hx_tmp3 = texture->get_frameWidth();
HXDLIN( 244)		textureBounds->setTo((int)0,(int)0,_hx_tmp3,texture->get_frameHeight());
HXLINE( 246)		if (hx::IsNotNull( frame )) {
HXLINE( 246)			Float _hx_tmp4 = -(frame->x);
HXDLIN( 246)			Float _hx_tmp5 = -(frame->y);
HXDLIN( 246)			Float _hx_tmp6 = texture->get_width();
HXDLIN( 246)			pixelBounds->setTo(_hx_tmp4,_hx_tmp5,_hx_tmp6,texture->get_height());
            		}
            		else {
HXLINE( 247)			pixelBounds->copyFrom(textureBounds);
            		}
HXLINE( 252)		::starling::utils::RectangleUtil_obj::intersect(gridCenter,pixelBounds,intersection);
HXLINE( 254)		{
HXLINE( 254)			 ::openfl::_Vector::AbstractVector this1 = ::starling::display::Image_obj::sBasCols;
HXDLIN( 254)			Float value = ( (Float)(::openfl::_Vector::IVector_obj::set(::starling::display::Image_obj::sBasCols->data,(int)2,(int)0)) );
HXDLIN( 254)			::openfl::_Vector::IVector_obj::set(this1->data,(int)0,value);
            		}
HXLINE( 255)		{
HXLINE( 255)			 ::openfl::_Vector::AbstractVector this2 = ::starling::display::Image_obj::sBasRows;
HXDLIN( 255)			Float value1 = ( (Float)(::openfl::_Vector::IVector_obj::set(::starling::display::Image_obj::sBasRows->data,(int)2,(int)0)) );
HXDLIN( 255)			::openfl::_Vector::IVector_obj::set(this2->data,(int)0,value1);
            		}
HXLINE( 256)		::openfl::_Vector::IVector_obj::set(::starling::display::Image_obj::sBasCols->data,(int)1,intersection->width);
HXLINE( 257)		::openfl::_Vector::IVector_obj::set(::starling::display::Image_obj::sBasRows->data,(int)1,intersection->height);
HXLINE( 259)		if ((pixelBounds->x < gridCenter->x)) {
HXLINE( 260)			::openfl::_Vector::IVector_obj::set(::starling::display::Image_obj::sBasCols->data,(int)0,(gridCenter->x - pixelBounds->x));
            		}
HXLINE( 262)		if ((pixelBounds->y < gridCenter->y)) {
HXLINE( 263)			::openfl::_Vector::IVector_obj::set(::starling::display::Image_obj::sBasRows->data,(int)0,(gridCenter->y - pixelBounds->y));
            		}
HXLINE( 265)		Float _hx_tmp7 = pixelBounds->get_right();
HXDLIN( 265)		if ((_hx_tmp7 > gridCenter->get_right())) {
HXLINE( 266)			 ::openfl::_Vector::AbstractVector this3 = ::starling::display::Image_obj::sBasCols;
HXDLIN( 266)			Float value2 = pixelBounds->get_right();
HXDLIN( 266)			Float value3 = (value2 - gridCenter->get_right());
HXDLIN( 266)			::openfl::_Vector::IVector_obj::set(this3->data,(int)2,value3);
            		}
HXLINE( 268)		Float _hx_tmp8 = pixelBounds->get_bottom();
HXDLIN( 268)		if ((_hx_tmp8 > gridCenter->get_bottom())) {
HXLINE( 269)			 ::openfl::_Vector::AbstractVector this4 = ::starling::display::Image_obj::sBasRows;
HXDLIN( 269)			Float value4 = pixelBounds->get_bottom();
HXDLIN( 269)			Float value5 = (value4 - gridCenter->get_bottom());
HXDLIN( 269)			::openfl::_Vector::IVector_obj::set(this4->data,(int)2,value5);
            		}
HXLINE( 273)		if ((pixelBounds->x < gridCenter->x)) {
HXLINE( 274)			 ::starling::utils::Padding _hx_tmp9 = ::starling::display::Image_obj::sPadding;
HXDLIN( 274)			_hx_tmp9->set_left((pixelBounds->x * invScaleX));
            		}
            		else {
HXLINE( 276)			 ::starling::utils::Padding _hx_tmp10 = ::starling::display::Image_obj::sPadding;
HXDLIN( 276)			_hx_tmp10->set_left((((gridCenter->x * invScaleX) + pixelBounds->x) - gridCenter->x));
            		}
HXLINE( 278)		Float _hx_tmp11 = pixelBounds->get_right();
HXDLIN( 278)		if ((_hx_tmp11 > gridCenter->get_right())) {
HXLINE( 279)			 ::starling::utils::Padding _hx_tmp12 = ::starling::display::Image_obj::sPadding;
HXDLIN( 279)			Float textureBounds1 = textureBounds->width;
HXDLIN( 279)			_hx_tmp12->set_right(((textureBounds1 - pixelBounds->get_right()) * invScaleX));
            		}
            		else {
HXLINE( 281)			 ::starling::utils::Padding _hx_tmp13 = ::starling::display::Image_obj::sPadding;
HXDLIN( 281)			Float textureBounds2 = textureBounds->width;
HXDLIN( 281)			Float _hx_tmp14 = ((textureBounds2 - gridCenter->get_right()) * invScaleX);
HXDLIN( 281)			Float _hx_tmp15 = (_hx_tmp14 + gridCenter->get_right());
HXDLIN( 281)			_hx_tmp13->set_right((_hx_tmp15 - pixelBounds->get_right()));
            		}
HXLINE( 283)		if ((pixelBounds->y < gridCenter->y)) {
HXLINE( 284)			 ::starling::utils::Padding _hx_tmp16 = ::starling::display::Image_obj::sPadding;
HXDLIN( 284)			_hx_tmp16->set_top((pixelBounds->y * invScaleY));
            		}
            		else {
HXLINE( 286)			 ::starling::utils::Padding _hx_tmp17 = ::starling::display::Image_obj::sPadding;
HXDLIN( 286)			_hx_tmp17->set_top((((gridCenter->y * invScaleY) + pixelBounds->y) - gridCenter->y));
            		}
HXLINE( 288)		Float _hx_tmp18 = pixelBounds->get_bottom();
HXDLIN( 288)		if ((_hx_tmp18 > gridCenter->get_bottom())) {
HXLINE( 289)			 ::starling::utils::Padding _hx_tmp19 = ::starling::display::Image_obj::sPadding;
HXDLIN( 289)			Float textureBounds3 = textureBounds->height;
HXDLIN( 289)			_hx_tmp19->set_bottom(((textureBounds3 - pixelBounds->get_bottom()) * invScaleY));
            		}
            		else {
HXLINE( 291)			 ::starling::utils::Padding _hx_tmp20 = ::starling::display::Image_obj::sPadding;
HXDLIN( 291)			Float textureBounds4 = textureBounds->height;
HXDLIN( 291)			Float _hx_tmp21 = ((textureBounds4 - gridCenter->get_bottom()) * invScaleY);
HXDLIN( 291)			Float _hx_tmp22 = (_hx_tmp21 + gridCenter->get_bottom());
HXDLIN( 291)			_hx_tmp20->set_bottom((_hx_tmp22 - pixelBounds->get_bottom()));
            		}
HXLINE( 293)		{
HXLINE( 293)			 ::openfl::_Vector::AbstractVector this5 = ::starling::display::Image_obj::sPosCols;
HXDLIN( 293)			Float value6 = (( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sBasCols->data,(int)0)) ) * invScaleX);
HXDLIN( 293)			::openfl::_Vector::IVector_obj::set(this5->data,(int)0,value6);
            		}
HXLINE( 294)		{
HXLINE( 294)			 ::openfl::_Vector::AbstractVector this6 = ::starling::display::Image_obj::sPosCols;
HXDLIN( 294)			Float value7 = (( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sBasCols->data,(int)2)) ) * invScaleX);
HXDLIN( 294)			::openfl::_Vector::IVector_obj::set(this6->data,(int)2,value7);
            		}
HXLINE( 295)		{
HXLINE( 295)			 ::openfl::_Vector::AbstractVector this7 = ::starling::display::Image_obj::sPosCols;
HXDLIN( 295)			Float textureBounds5 = textureBounds->width;
HXDLIN( 295)			Float value8 = (textureBounds5 - ::starling::display::Image_obj::sPadding->get_left());
HXDLIN( 295)			Float value9 = (value8 - ::starling::display::Image_obj::sPadding->get_right());
HXDLIN( 295)			Float value10 = (value9 - ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sPosCols->data,(int)0)) ));
HXDLIN( 295)			Float value11 = (value10 - ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sPosCols->data,(int)2)) ));
HXDLIN( 295)			::openfl::_Vector::IVector_obj::set(this7->data,(int)1,value11);
            		}
HXLINE( 297)		{
HXLINE( 297)			 ::openfl::_Vector::AbstractVector this8 = ::starling::display::Image_obj::sPosRows;
HXDLIN( 297)			Float value12 = (( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sBasRows->data,(int)0)) ) * invScaleY);
HXDLIN( 297)			::openfl::_Vector::IVector_obj::set(this8->data,(int)0,value12);
            		}
HXLINE( 298)		{
HXLINE( 298)			 ::openfl::_Vector::AbstractVector this9 = ::starling::display::Image_obj::sPosRows;
HXDLIN( 298)			Float value13 = (( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sBasRows->data,(int)2)) ) * invScaleY);
HXDLIN( 298)			::openfl::_Vector::IVector_obj::set(this9->data,(int)2,value13);
            		}
HXLINE( 299)		{
HXLINE( 299)			 ::openfl::_Vector::AbstractVector this10 = ::starling::display::Image_obj::sPosRows;
HXDLIN( 299)			Float textureBounds6 = textureBounds->height;
HXDLIN( 299)			Float value14 = (textureBounds6 - ::starling::display::Image_obj::sPadding->get_top());
HXDLIN( 299)			Float value15 = (value14 - ::starling::display::Image_obj::sPadding->get_bottom());
HXDLIN( 299)			Float value16 = (value15 - ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sPosRows->data,(int)0)) ));
HXDLIN( 299)			Float value17 = (value16 - ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sPosRows->data,(int)2)) ));
HXDLIN( 299)			::openfl::_Vector::IVector_obj::set(this10->data,(int)1,value17);
            		}
HXLINE( 304)		if ((( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sPosCols->data,(int)1)) ) <= (int)0)) {
HXLINE( 306)			Float textureBounds7 = textureBounds->width;
HXDLIN( 306)			correction = (((Float)textureBounds7 / (Float)(textureBounds->width - gridCenter->width)) * absScaleX);
HXLINE( 307)			{
HXLINE( 307)				 ::starling::utils::Padding _g = ::starling::display::Image_obj::sPadding;
HXDLIN( 307)				_g->set_left((_g->get_left() * correction));
            			}
HXLINE( 308)			{
HXLINE( 308)				 ::openfl::_Vector::AbstractVector _g1 = ::starling::display::Image_obj::sPosCols;
HXDLIN( 308)				{
HXLINE( 308)					Float value18 = (( (Float)(::openfl::_Vector::IVector_obj::get(_g1->data,(int)0)) ) * correction);
HXDLIN( 308)					::openfl::_Vector::IVector_obj::set(_g1->data,(int)0,value18);
            				}
            			}
HXLINE( 309)			::openfl::_Vector::IVector_obj::set(::starling::display::Image_obj::sPosCols->data,(int)1,((Float)0.0));
HXLINE( 310)			{
HXLINE( 310)				 ::openfl::_Vector::AbstractVector _g2 = ::starling::display::Image_obj::sPosCols;
HXDLIN( 310)				{
HXLINE( 310)					Float value19 = (( (Float)(::openfl::_Vector::IVector_obj::get(_g2->data,(int)2)) ) * correction);
HXDLIN( 310)					::openfl::_Vector::IVector_obj::set(_g2->data,(int)2,value19);
            				}
            			}
            		}
HXLINE( 313)		if ((( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sPosRows->data,(int)1)) ) <= (int)0)) {
HXLINE( 315)			Float textureBounds8 = textureBounds->height;
HXDLIN( 315)			correction = (((Float)textureBounds8 / (Float)(textureBounds->height - gridCenter->height)) * absScaleY);
HXLINE( 316)			{
HXLINE( 316)				 ::starling::utils::Padding _g3 = ::starling::display::Image_obj::sPadding;
HXDLIN( 316)				_g3->set_top((_g3->get_top() * correction));
            			}
HXLINE( 317)			{
HXLINE( 317)				 ::openfl::_Vector::AbstractVector _g4 = ::starling::display::Image_obj::sPosRows;
HXDLIN( 317)				{
HXLINE( 317)					Float value20 = (( (Float)(::openfl::_Vector::IVector_obj::get(_g4->data,(int)0)) ) * correction);
HXDLIN( 317)					::openfl::_Vector::IVector_obj::set(_g4->data,(int)0,value20);
            				}
            			}
HXLINE( 318)			::openfl::_Vector::IVector_obj::set(::starling::display::Image_obj::sPosRows->data,(int)1,((Float)0.0));
HXLINE( 319)			{
HXLINE( 319)				 ::openfl::_Vector::AbstractVector _g5 = ::starling::display::Image_obj::sPosRows;
HXDLIN( 319)				{
HXLINE( 319)					Float value21 = (( (Float)(::openfl::_Vector::IVector_obj::get(_g5->data,(int)2)) ) * correction);
HXDLIN( 319)					::openfl::_Vector::IVector_obj::set(_g5->data,(int)2,value21);
            				}
            			}
            		}
HXLINE( 324)		{
HXLINE( 324)			 ::openfl::_Vector::AbstractVector this11 = ::starling::display::Image_obj::sTexCols;
HXDLIN( 324)			Float value22 = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sBasCols->data,(int)0)) );
HXDLIN( 324)			::openfl::_Vector::IVector_obj::set(this11->data,(int)0,((Float)value22 / (Float)pixelBounds->width));
            		}
HXLINE( 325)		{
HXLINE( 325)			 ::openfl::_Vector::AbstractVector this12 = ::starling::display::Image_obj::sTexCols;
HXDLIN( 325)			Float value23 = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sBasCols->data,(int)2)) );
HXDLIN( 325)			::openfl::_Vector::IVector_obj::set(this12->data,(int)2,((Float)value23 / (Float)pixelBounds->width));
            		}
HXLINE( 326)		{
HXLINE( 326)			 ::openfl::_Vector::AbstractVector this13 = ::starling::display::Image_obj::sTexCols;
HXDLIN( 326)			Float value24 = (((Float)1.0) - ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sTexCols->data,(int)0)) ));
HXDLIN( 326)			Float value25 = (value24 - ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sTexCols->data,(int)2)) ));
HXDLIN( 326)			::openfl::_Vector::IVector_obj::set(this13->data,(int)1,value25);
            		}
HXLINE( 328)		{
HXLINE( 328)			 ::openfl::_Vector::AbstractVector this14 = ::starling::display::Image_obj::sTexRows;
HXDLIN( 328)			Float value26 = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sBasRows->data,(int)0)) );
HXDLIN( 328)			::openfl::_Vector::IVector_obj::set(this14->data,(int)0,((Float)value26 / (Float)pixelBounds->height));
            		}
HXLINE( 329)		{
HXLINE( 329)			 ::openfl::_Vector::AbstractVector this15 = ::starling::display::Image_obj::sTexRows;
HXDLIN( 329)			Float value27 = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sBasRows->data,(int)2)) );
HXDLIN( 329)			::openfl::_Vector::IVector_obj::set(this15->data,(int)2,((Float)value27 / (Float)pixelBounds->height));
            		}
HXLINE( 330)		{
HXLINE( 330)			 ::openfl::_Vector::AbstractVector this16 = ::starling::display::Image_obj::sTexRows;
HXDLIN( 330)			Float value28 = (((Float)1.0) - ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sTexRows->data,(int)0)) ));
HXDLIN( 330)			Float value29 = (value28 - ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::display::Image_obj::sTexRows->data,(int)2)) ));
HXDLIN( 330)			::openfl::_Vector::IVector_obj::set(this16->data,(int)1,value29);
            		}
HXLINE( 333)		Float numVertices1 = ::starling::display::Image_obj::sPadding->get_left();
HXDLIN( 333)		Float numVertices2 = ::starling::display::Image_obj::sPadding->get_top();
HXLINE( 332)		numVertices = this->_hx___setupScale9GridAttributes(numVertices1,numVertices2,::starling::display::Image_obj::sPosCols,::starling::display::Image_obj::sPosRows,::starling::display::Image_obj::sTexCols,::starling::display::Image_obj::sTexRows);
HXLINE( 337)		numQuads = ::Std_obj::_hx_int(((Float)numVertices / (Float)(int)4));
HXLINE( 338)		vertexData->set_numVertices(numVertices);
HXLINE( 339)		indexData->set_numIndices((int)0);
HXLINE( 341)		{
HXLINE( 341)			int _g11 = (int)0;
HXDLIN( 341)			int _g6 = numQuads;
HXDLIN( 341)			while((_g11 < _g6)){
HXLINE( 341)				_g11 = (_g11 + (int)1);
HXDLIN( 341)				int i = (_g11 - (int)1);
HXLINE( 342)				indexData->addQuad((i * (int)4),((i * (int)4) + (int)1),((i * (int)4) + (int)2),((i * (int)4) + (int)3));
            			}
            		}
HXLINE( 347)		if ((numVertices != prevNumVertices)) {
HXLINE( 349)			int color;
HXDLIN( 349)			if ((prevNumVertices != (int)0)) {
HXLINE( 349)				color = vertexData->getColor((int)0,null());
            			}
            			else {
HXLINE( 349)				color = (int)16777215;
            			}
HXLINE( 350)			Float alpha;
HXDLIN( 350)			if ((prevNumVertices != (int)0)) {
HXLINE( 350)				alpha = vertexData->getAlpha((int)0,null());
            			}
            			else {
HXLINE( 350)				alpha = ((Float)1.0);
            			}
HXLINE( 351)			vertexData->colorize(HX_("color",63,71,5c,4a),color,alpha,null(),null());
            		}
HXLINE( 354)		::starling::utils::Pool_obj::putRectangle(textureBounds);
HXLINE( 355)		::starling::utils::Pool_obj::putRectangle(pixelBounds);
HXLINE( 356)		::starling::utils::Pool_obj::putRectangle(gridCenter);
HXLINE( 357)		::starling::utils::Pool_obj::putRectangle(intersection);
HXLINE( 359)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,_hx___setupScale9Grid,(void))

int Image_obj::_hx___setupScale9GridAttributes(Float startX,Float startY, ::openfl::_Vector::AbstractVector posCols, ::openfl::_Vector::AbstractVector posRows, ::openfl::_Vector::AbstractVector texCols, ::openfl::_Vector::AbstractVector texRows){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_365___setupScale9GridAttributes)
HXLINE( 366)		::String posAttr = HX_("position",a9,a0,fa,ca);
HXLINE( 367)		::String texAttr = HX_("texCoords",65,5d,73,a1);
HXLINE( 369)		int row;
HXDLIN( 369)		int col;
HXLINE( 370)		Float colWidthPos;
HXDLIN( 370)		Float rowHeightPos;
HXLINE( 371)		Float colWidthTex;
HXDLIN( 371)		Float rowHeightTex;
HXLINE( 372)		 ::starling::rendering::VertexData vertexData = this->get_vertexData();
HXLINE( 373)		 ::starling::textures::Texture texture = this->get_texture();
HXLINE( 374)		Float currentX = startX;
HXLINE( 375)		Float currentY = startY;
HXLINE( 376)		Float currentU = ((Float)0.0);
HXLINE( 377)		Float currentV = ((Float)0.0);
HXLINE( 378)		int vertexID = (int)0;
HXLINE( 380)		{
HXLINE( 380)			int _g = (int)0;
HXDLIN( 380)			while((_g < (int)3)){
HXLINE( 380)				_g = (_g + (int)1);
HXDLIN( 380)				int row1 = (_g - (int)1);
HXLINE( 382)				rowHeightPos = ( (Float)(::openfl::_Vector::IVector_obj::get(posRows->data,row1)) );
HXLINE( 383)				rowHeightTex = ( (Float)(::openfl::_Vector::IVector_obj::get(texRows->data,row1)) );
HXLINE( 385)				if ((rowHeightPos > (int)0)) {
HXLINE( 387)					{
HXLINE( 387)						int _g1 = (int)0;
HXDLIN( 387)						while((_g1 < (int)3)){
HXLINE( 387)							_g1 = (_g1 + (int)1);
HXDLIN( 387)							int col1 = (_g1 - (int)1);
HXLINE( 389)							colWidthPos = ( (Float)(::openfl::_Vector::IVector_obj::get(posCols->data,col1)) );
HXLINE( 390)							colWidthTex = ( (Float)(::openfl::_Vector::IVector_obj::get(texCols->data,col1)) );
HXLINE( 392)							if ((colWidthPos > (int)0)) {
HXLINE( 394)								vertexData->setPoint(vertexID,posAttr,currentX,currentY);
HXLINE( 395)								texture->setTexCoords(vertexData,vertexID,texAttr,currentU,currentV);
HXLINE( 396)								vertexID = (vertexID + (int)1);
HXLINE( 398)								vertexData->setPoint(vertexID,posAttr,(currentX + colWidthPos),currentY);
HXLINE( 399)								texture->setTexCoords(vertexData,vertexID,texAttr,(currentU + colWidthTex),currentV);
HXLINE( 400)								vertexID = (vertexID + (int)1);
HXLINE( 402)								vertexData->setPoint(vertexID,posAttr,currentX,(currentY + rowHeightPos));
HXLINE( 403)								texture->setTexCoords(vertexData,vertexID,texAttr,currentU,(currentV + rowHeightTex));
HXLINE( 404)								vertexID = (vertexID + (int)1);
HXLINE( 406)								vertexData->setPoint(vertexID,posAttr,(currentX + colWidthPos),(currentY + rowHeightPos));
HXLINE( 407)								texture->setTexCoords(vertexData,vertexID,texAttr,(currentU + colWidthTex),(currentV + rowHeightTex));
HXLINE( 408)								vertexID = (vertexID + (int)1);
HXLINE( 410)								currentX = (currentX + colWidthPos);
            							}
HXLINE( 413)							currentU = (currentU + colWidthTex);
            						}
            					}
HXLINE( 416)					currentY = (currentY + rowHeightPos);
            				}
HXLINE( 419)				currentX = startX;
HXLINE( 420)				currentU = ((Float)0.0);
HXLINE( 421)				currentV = (currentV + rowHeightTex);
            			}
            		}
HXLINE( 424)		return vertexID;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Image_obj,_hx___setupScale9GridAttributes,return )

void Image_obj::_hx___setupTileGrid(){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_428___setupTileGrid)
HXLINE( 432)		 ::starling::textures::Texture texture = this->get_texture();
HXLINE( 433)		 ::openfl::geom::Rectangle frame = texture->get_frame();
HXLINE( 434)		 ::starling::rendering::VertexData vertexData = this->get_vertexData();
HXLINE( 435)		 ::starling::rendering::IndexData indexData = this->get_indexData();
HXLINE( 436)		 ::openfl::geom::Rectangle bounds = this->getBounds(hx::ObjectPtr<OBJ_>(this),::starling::display::Image_obj::sBounds);
HXLINE( 437)		int prevNumVertices = vertexData->get_numVertices();
HXLINE( 438)		int color;
HXDLIN( 438)		if ((prevNumVertices != (int)0)) {
HXLINE( 438)			color = vertexData->getColor((int)0,null());
            		}
            		else {
HXLINE( 438)			color = (int)16777215;
            		}
HXLINE( 439)		Float alpha;
HXDLIN( 439)		if ((prevNumVertices != (int)0)) {
HXLINE( 439)			alpha = vertexData->getAlpha((int)0,null());
            		}
            		else {
HXLINE( 439)			alpha = ((Float)1.0);
            		}
HXLINE( 440)		Float invScaleX;
HXDLIN( 440)		if ((this->get_scaleX() > (int)0)) {
HXLINE( 440)			invScaleX = ((Float)((Float)1.0) / (Float)this->get_scaleX());
            		}
            		else {
HXLINE( 440)			invScaleX = ((Float)((Float)-1.0) / (Float)this->get_scaleX());
            		}
HXLINE( 441)		Float invScaleY;
HXDLIN( 441)		if ((this->get_scaleY() > (int)0)) {
HXLINE( 441)			invScaleY = ((Float)((Float)1.0) / (Float)this->get_scaleY());
            		}
            		else {
HXLINE( 441)			invScaleY = ((Float)((Float)-1.0) / (Float)this->get_scaleY());
            		}
HXLINE( 442)		Float frameWidth;
HXDLIN( 442)		if ((this->_hx___tileGrid->width > (int)0)) {
HXLINE( 442)			frameWidth = this->_hx___tileGrid->width;
            		}
            		else {
HXLINE( 442)			frameWidth = texture->get_frameWidth();
            		}
HXLINE( 443)		Float frameHeight;
HXDLIN( 443)		if ((this->_hx___tileGrid->height > (int)0)) {
HXLINE( 443)			frameHeight = this->_hx___tileGrid->height;
            		}
            		else {
HXLINE( 443)			frameHeight = texture->get_frameHeight();
            		}
HXLINE( 445)		frameWidth = (frameWidth * invScaleX);
HXLINE( 446)		frameHeight = (frameHeight * invScaleY);
HXLINE( 448)		Float tileX;
HXDLIN( 448)		if (hx::IsNotNull( frame )) {
HXLINE( 448)			Float tileX1 = -(frame->x);
HXDLIN( 448)			tileX = (tileX1 * ((Float)frameWidth / (Float)frame->width));
            		}
            		else {
HXLINE( 448)			tileX = (int)0;
            		}
HXLINE( 449)		Float tileY;
HXDLIN( 449)		if (hx::IsNotNull( frame )) {
HXLINE( 449)			Float tileY1 = -(frame->y);
HXDLIN( 449)			tileY = (tileY1 * ((Float)frameHeight / (Float)frame->height));
            		}
            		else {
HXLINE( 449)			tileY = (int)0;
            		}
HXLINE( 450)		Float tileWidth = texture->get_width();
HXDLIN( 450)		Float tileWidth1 = (tileWidth * ((Float)frameWidth / (Float)texture->get_frameWidth()));
HXLINE( 451)		Float tileHeight = texture->get_height();
HXDLIN( 451)		Float tileHeight1 = (tileHeight * ((Float)frameHeight / (Float)texture->get_frameHeight()));
HXLINE( 452)		Float modX = hx::Mod((this->_hx___tileGrid->x * invScaleX),frameWidth);
HXLINE( 453)		Float modY = hx::Mod((this->_hx___tileGrid->y * invScaleY),frameHeight);
HXLINE( 455)		if ((modX < (int)0)) {
HXLINE( 455)			modX = (modX + frameWidth);
            		}
HXLINE( 456)		if ((modY < (int)0)) {
HXLINE( 456)			modY = (modY + frameHeight);
            		}
HXLINE( 458)		Float startX = (modX + tileX);
HXLINE( 459)		Float startY = (modY + tileY);
HXLINE( 461)		if ((startX > (frameWidth - tileWidth1))) {
HXLINE( 461)			startX = (startX - frameWidth);
            		}
HXLINE( 462)		if ((startY > (frameHeight - tileHeight1))) {
HXLINE( 462)			startY = (startY - frameHeight);
            		}
HXLINE( 464)		Float posLeft;
HXDLIN( 464)		Float posRight;
HXDLIN( 464)		Float posTop;
HXDLIN( 464)		Float posBottom;
HXLINE( 465)		Float texLeft;
HXDLIN( 465)		Float texRight;
HXDLIN( 465)		Float texTop;
HXDLIN( 465)		Float texBottom;
HXLINE( 466)		::String posAttrName = HX_("position",a9,a0,fa,ca);
HXLINE( 467)		::String texAttrName = HX_("texCoords",65,5d,73,a1);
HXLINE( 468)		Float currentX;
HXLINE( 469)		Float currentY = startY;
HXLINE( 470)		int vertexID = (int)0;
HXLINE( 472)		indexData->set_numIndices((int)0);
HXLINE( 474)		while((currentY < bounds->height)){
HXLINE( 476)			currentX = startX;
HXLINE( 478)			while((currentX < bounds->width)){
HXLINE( 480)				indexData->addQuad(vertexID,(vertexID + (int)1),(vertexID + (int)2),(vertexID + (int)3));
HXLINE( 482)				if ((currentX < (int)0)) {
HXLINE( 482)					posLeft = (int)0;
            				}
            				else {
HXLINE( 482)					posLeft = currentX;
            				}
HXLINE( 483)				if ((currentY < (int)0)) {
HXLINE( 483)					posTop = (int)0;
            				}
            				else {
HXLINE( 483)					posTop = currentY;
            				}
HXLINE( 484)				if (((currentX + tileWidth1) > bounds->width)) {
HXLINE( 484)					posRight = bounds->width;
            				}
            				else {
HXLINE( 484)					posRight = (currentX + tileWidth1);
            				}
HXLINE( 485)				if (((currentY + tileHeight1) > bounds->height)) {
HXLINE( 485)					posBottom = bounds->height;
            				}
            				else {
HXLINE( 485)					posBottom = (currentY + tileHeight1);
            				}
HXLINE( 487)				vertexData->setPoint(vertexID,posAttrName,posLeft,posTop);
HXLINE( 488)				vertexData->setPoint((vertexID + (int)1),posAttrName,posRight,posTop);
HXLINE( 489)				vertexData->setPoint((vertexID + (int)2),posAttrName,posLeft,posBottom);
HXLINE( 490)				vertexData->setPoint((vertexID + (int)3),posAttrName,posRight,posBottom);
HXLINE( 492)				texLeft = ((Float)(posLeft - currentX) / (Float)tileWidth1);
HXLINE( 493)				texTop = ((Float)(posTop - currentY) / (Float)tileHeight1);
HXLINE( 494)				texRight = ((Float)(posRight - currentX) / (Float)tileWidth1);
HXLINE( 495)				texBottom = ((Float)(posBottom - currentY) / (Float)tileHeight1);
HXLINE( 497)				texture->setTexCoords(vertexData,vertexID,texAttrName,texLeft,texTop);
HXLINE( 498)				texture->setTexCoords(vertexData,(vertexID + (int)1),texAttrName,texRight,texTop);
HXLINE( 499)				texture->setTexCoords(vertexData,(vertexID + (int)2),texAttrName,texLeft,texBottom);
HXLINE( 500)				texture->setTexCoords(vertexData,(vertexID + (int)3),texAttrName,texRight,texBottom);
HXLINE( 502)				currentX = (currentX + frameWidth);
HXLINE( 503)				vertexID = (vertexID + (int)4);
            			}
HXLINE( 506)			currentY = (currentY + frameHeight);
            		}
HXLINE( 510)		vertexData->set_numVertices(vertexID);
HXLINE( 512)		{
HXLINE( 512)			int _g1 = prevNumVertices;
HXDLIN( 512)			int _g = vertexID;
HXDLIN( 512)			while((_g1 < _g)){
HXLINE( 512)				_g1 = (_g1 + (int)1);
HXDLIN( 512)				int i = (_g1 - (int)1);
HXLINE( 514)				vertexData->setColor(i,HX_("color",63,71,5c,4a),color);
HXLINE( 515)				vertexData->setAlpha(i,HX_("color",63,71,5c,4a),alpha);
            			}
            		}
HXLINE( 518)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,_hx___setupTileGrid,(void))

 ::haxe::ds::ObjectMap Image_obj::sSetupFunctions;

 ::starling::utils::Padding Image_obj::sPadding;

 ::openfl::geom::Rectangle Image_obj::sBounds;

 ::openfl::_Vector::AbstractVector Image_obj::sBasCols;

 ::openfl::_Vector::AbstractVector Image_obj::sBasRows;

 ::openfl::_Vector::AbstractVector Image_obj::sPosCols;

 ::openfl::_Vector::AbstractVector Image_obj::sPosRows;

 ::openfl::_Vector::AbstractVector Image_obj::sTexCols;

 ::openfl::_Vector::AbstractVector Image_obj::sTexRows;

void Image_obj::automateSetupForTexture( ::starling::textures::Texture texture, ::Dynamic onAssign, ::Dynamic onRelease){
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_531_automateSetupForTexture)
HXDLIN( 531)		if (hx::IsNull( texture )) {
HXLINE( 532)			return;
            		}
            		else {
HXLINE( 533)			bool _hx_tmp;
HXDLIN( 533)			if (hx::IsNull( onAssign )) {
HXLINE( 533)				_hx_tmp = hx::IsNull( onRelease );
            			}
            			else {
HXLINE( 533)				_hx_tmp = false;
            			}
HXDLIN( 533)			if (_hx_tmp) {
HXLINE( 534)				::starling::display::Image_obj::sSetupFunctions->remove(texture);
            			}
            			else {
HXLINE( 536)				::Dynamic this1 = ::starling::display::Image_obj::sSetupFunctions;
HXDLIN( 536)				 ::starling::display::TextureSetupSettings v =  ::starling::display::TextureSetupSettings_obj::__alloc( HX_CTX ,onAssign,onRelease);
HXDLIN( 536)				( ( ::haxe::ds::ObjectMap)(this1) )->set(texture,v);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_obj,automateSetupForTexture,(void))

void Image_obj::resetSetupForTexture( ::starling::textures::Texture texture){
            	HX_STACKFRAME(&_hx_pos_084429896d36500d_542_resetSetupForTexture)
HXDLIN( 542)		::starling::display::Image_obj::automateSetupForTexture(texture,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,resetSetupForTexture,(void))

void Image_obj::bindScale9GridToTexture( ::starling::textures::Texture texture, ::openfl::geom::Rectangle scale9Grid){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::geom::Rectangle,scale9Grid) HXARGC(1)
            		void _hx_run( ::starling::display::Image image){
            			HX_STACKFRAME(&_hx_pos_084429896d36500d_550_bindScale9GridToTexture)
HXLINE( 550)			image->set_scale9Grid(scale9Grid);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::starling::display::Image image1){
            			HX_STACKFRAME(&_hx_pos_084429896d36500d_551_bindScale9GridToTexture)
HXLINE( 551)			image1->set_scale9Grid(null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_084429896d36500d_549_bindScale9GridToTexture)
HXDLIN( 549)		::starling::display::Image_obj::automateSetupForTexture(texture, ::Dynamic(new _hx_Closure_0(scale9Grid)), ::Dynamic(new _hx_Closure_1()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,bindScale9GridToTexture,(void))

void Image_obj::bindPivotPointToTexture( ::starling::textures::Texture texture,Float pivotX,Float pivotY){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,Float,pivotX,Float,pivotY) HXARGC(1)
            		void _hx_run( ::starling::display::Image image){
            			HX_STACKFRAME(&_hx_pos_084429896d36500d_559_bindPivotPointToTexture)
HXLINE( 559)			image->set_pivotX(pivotX);
HXDLIN( 559)			image->set_pivotY(pivotY);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::starling::display::Image image1){
            			HX_STACKFRAME(&_hx_pos_084429896d36500d_560_bindPivotPointToTexture)
HXLINE( 560)			image1->set_pivotX(image1->set_pivotY((int)0));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_084429896d36500d_558_bindPivotPointToTexture)
HXDLIN( 558)		::starling::display::Image_obj::automateSetupForTexture(texture, ::Dynamic(new _hx_Closure_0(pivotX,pivotY)), ::Dynamic(new _hx_Closure_1()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Image_obj,bindPivotPointToTexture,(void))


hx::ObjectPtr< Image_obj > Image_obj::__new( ::starling::textures::Texture texture) {
	hx::ObjectPtr< Image_obj > __this = new Image_obj();
	__this->__construct(texture);
	return __this;
}

hx::ObjectPtr< Image_obj > Image_obj::__alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture texture) {
	Image_obj *__this = (Image_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Image_obj), true, "starling.display.Image"));
	*(void **)__this = Image_obj::_hx_vtable;
	__this->__construct(texture);
	return __this;
}

Image_obj::Image_obj()
{
}

void Image_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Image);
	HX_MARK_MEMBER_NAME(_hx___scale9Grid,"__scale9Grid");
	HX_MARK_MEMBER_NAME(_hx___tileGrid,"__tileGrid");
	 ::starling::display::Quad_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Image_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___scale9Grid,"__scale9Grid");
	HX_VISIT_MEMBER_NAME(_hx___tileGrid,"__tileGrid");
	 ::starling::display::Quad_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Image_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"tileGrid") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tileGrid() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__tileGrid") ) { return hx::Val( _hx___tileGrid ); }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scale9Grid() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_texture") ) { return hx::Val( set_texture_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__scale9Grid") ) { return hx::Val( _hx___scale9Grid ); }
		if (HX_FIELD_EQ(inName,"get_tileGrid") ) { return hx::Val( get_tileGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tileGrid") ) { return hx::Val( set_tileGrid_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_scale9Grid") ) { return hx::Val( get_scale9Grid_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale9Grid") ) { return hx::Val( set_scale9Grid_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__setupVertices") ) { return hx::Val( _hx___setupVertices_dyn() ); }
		if (HX_FIELD_EQ(inName,"__setupTileGrid") ) { return hx::Val( _hx___setupTileGrid_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__setupScale9Grid") ) { return hx::Val( _hx___setupScale9Grid_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"__setupScale9GridAttributes") ) { return hx::Val( _hx___setupScale9GridAttributes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Image_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sBounds") ) { outValue = ( sBounds ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sPadding") ) { outValue = ( sPadding ); return true; }
		if (HX_FIELD_EQ(inName,"sBasCols") ) { outValue = ( sBasCols ); return true; }
		if (HX_FIELD_EQ(inName,"sBasRows") ) { outValue = ( sBasRows ); return true; }
		if (HX_FIELD_EQ(inName,"sPosCols") ) { outValue = ( sPosCols ); return true; }
		if (HX_FIELD_EQ(inName,"sPosRows") ) { outValue = ( sPosRows ); return true; }
		if (HX_FIELD_EQ(inName,"sTexCols") ) { outValue = ( sTexCols ); return true; }
		if (HX_FIELD_EQ(inName,"sTexRows") ) { outValue = ( sTexRows ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sSetupFunctions") ) { outValue = ( sSetupFunctions ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"resetSetupForTexture") ) { outValue = resetSetupForTexture_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"automateSetupForTexture") ) { outValue = automateSetupForTexture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bindScale9GridToTexture") ) { outValue = bindScale9GridToTexture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bindPivotPointToTexture") ) { outValue = bindPivotPointToTexture_dyn(); return true; }
	}
	return false;
}

hx::Val Image_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"tileGrid") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tileGrid(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__tileGrid") ) { _hx___tileGrid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale9Grid(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__scale9Grid") ) { _hx___scale9Grid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Image_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sBounds") ) { sBounds=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sPadding") ) { sPadding=ioValue.Cast<  ::starling::utils::Padding >(); return true; }
		if (HX_FIELD_EQ(inName,"sBasCols") ) { sBasCols=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		if (HX_FIELD_EQ(inName,"sBasRows") ) { sBasRows=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		if (HX_FIELD_EQ(inName,"sPosCols") ) { sPosCols=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		if (HX_FIELD_EQ(inName,"sPosRows") ) { sPosRows=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		if (HX_FIELD_EQ(inName,"sTexCols") ) { sTexCols=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		if (HX_FIELD_EQ(inName,"sTexRows") ) { sTexRows=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sSetupFunctions") ) { sSetupFunctions=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

void Image_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__scale9Grid","\xf5","\xcb","\xb5","\xc7"));
	outFields->push(HX_HCSTRING("__tileGrid","\x34","\x70","\xaa","\x21"));
	outFields->push(HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"));
	outFields->push(HX_HCSTRING("tileGrid","\x14","\xfd","\x71","\x7e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Image_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Image_obj,_hx___scale9Grid),HX_HCSTRING("__scale9Grid","\xf5","\xcb","\xb5","\xc7")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Image_obj,_hx___tileGrid),HX_HCSTRING("__tileGrid","\x34","\x70","\xaa","\x21")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Image_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(void *) &Image_obj::sSetupFunctions,HX_HCSTRING("sSetupFunctions","\xf1","\x5b","\xfb","\xb6")},
	{hx::fsObject /*::starling::utils::Padding*/ ,(void *) &Image_obj::sPadding,HX_HCSTRING("sPadding","\x9e","\xc5","\x77","\x4f")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Image_obj::sBounds,HX_HCSTRING("sBounds","\x48","\x53","\xd6","\x48")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &Image_obj::sBasCols,HX_HCSTRING("sBasCols","\xf4","\x7b","\x82","\x96")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &Image_obj::sBasRows,HX_HCSTRING("sBasRows","\xda","\xb8","\x6c","\xa0")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &Image_obj::sPosCols,HX_HCSTRING("sPosCols","\xb4","\x07","\xae","\x75")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &Image_obj::sPosRows,HX_HCSTRING("sPosRows","\x9a","\x44","\x98","\x7f")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &Image_obj::sTexCols,HX_HCSTRING("sTexCols","\x87","\x2d","\x73","\xfd")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &Image_obj::sTexRows,HX_HCSTRING("sTexRows","\x6d","\x6a","\x5d","\x07")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Image_obj_sMemberFields[] = {
	HX_HCSTRING("__scale9Grid","\xf5","\xcb","\xb5","\xc7"),
	HX_HCSTRING("__tileGrid","\x34","\x70","\xaa","\x21"),
	HX_HCSTRING("get_scale9Grid","\x1e","\xd9","\x17","\x05"),
	HX_HCSTRING("set_scale9Grid","\x92","\xc1","\x37","\x25"),
	HX_HCSTRING("get_tileGrid","\x1d","\xb1","\x8b","\x33"),
	HX_HCSTRING("set_tileGrid","\x91","\xd4","\x84","\x48"),
	HX_HCSTRING("__setupVertices","\x76","\xa8","\xe7","\xa1"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("set_texture","\xfe","\x2f","\x48","\x2f"),
	HX_HCSTRING("__setupScale9Grid","\x92","\x12","\x9d","\xcd"),
	HX_HCSTRING("__setupScale9GridAttributes","\x09","\x6a","\x63","\x84"),
	HX_HCSTRING("__setupTileGrid","\x91","\xe5","\x43","\xb6"),
	::String(null()) };

static void Image_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Image_obj::sSetupFunctions,"sSetupFunctions");
	HX_MARK_MEMBER_NAME(Image_obj::sPadding,"sPadding");
	HX_MARK_MEMBER_NAME(Image_obj::sBounds,"sBounds");
	HX_MARK_MEMBER_NAME(Image_obj::sBasCols,"sBasCols");
	HX_MARK_MEMBER_NAME(Image_obj::sBasRows,"sBasRows");
	HX_MARK_MEMBER_NAME(Image_obj::sPosCols,"sPosCols");
	HX_MARK_MEMBER_NAME(Image_obj::sPosRows,"sPosRows");
	HX_MARK_MEMBER_NAME(Image_obj::sTexCols,"sTexCols");
	HX_MARK_MEMBER_NAME(Image_obj::sTexRows,"sTexRows");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Image_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Image_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Image_obj::sSetupFunctions,"sSetupFunctions");
	HX_VISIT_MEMBER_NAME(Image_obj::sPadding,"sPadding");
	HX_VISIT_MEMBER_NAME(Image_obj::sBounds,"sBounds");
	HX_VISIT_MEMBER_NAME(Image_obj::sBasCols,"sBasCols");
	HX_VISIT_MEMBER_NAME(Image_obj::sBasRows,"sBasRows");
	HX_VISIT_MEMBER_NAME(Image_obj::sPosCols,"sPosCols");
	HX_VISIT_MEMBER_NAME(Image_obj::sPosRows,"sPosRows");
	HX_VISIT_MEMBER_NAME(Image_obj::sTexCols,"sTexCols");
	HX_VISIT_MEMBER_NAME(Image_obj::sTexRows,"sTexRows");
};

#endif

hx::Class Image_obj::__mClass;

static ::String Image_obj_sStaticFields[] = {
	HX_HCSTRING("sSetupFunctions","\xf1","\x5b","\xfb","\xb6"),
	HX_HCSTRING("sPadding","\x9e","\xc5","\x77","\x4f"),
	HX_HCSTRING("sBounds","\x48","\x53","\xd6","\x48"),
	HX_HCSTRING("sBasCols","\xf4","\x7b","\x82","\x96"),
	HX_HCSTRING("sBasRows","\xda","\xb8","\x6c","\xa0"),
	HX_HCSTRING("sPosCols","\xb4","\x07","\xae","\x75"),
	HX_HCSTRING("sPosRows","\x9a","\x44","\x98","\x7f"),
	HX_HCSTRING("sTexCols","\x87","\x2d","\x73","\xfd"),
	HX_HCSTRING("sTexRows","\x6d","\x6a","\x5d","\x07"),
	HX_HCSTRING("automateSetupForTexture","\x5b","\x0b","\xec","\xd1"),
	HX_HCSTRING("resetSetupForTexture","\xa0","\xbc","\x90","\xda"),
	HX_HCSTRING("bindScale9GridToTexture","\x4e","\x79","\x32","\xfd"),
	HX_HCSTRING("bindPivotPointToTexture","\xd5","\xbc","\x9c","\xc7"),
	::String(null())
};

void Image_obj::__register()
{
	hx::Object *dummy = new Image_obj;
	Image_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.Image","\xe9","\x85","\xd8","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Image_obj::__GetStatic;
	__mClass->mSetStaticField = &Image_obj::__SetStatic;
	__mClass->mMarkFunc = Image_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Image_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Image_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Image_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Image_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Image_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Image_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Image_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_53_boot)
HXDLIN(  53)		sSetupFunctions =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_56_boot)
HXDLIN(  56)		sPadding =  ::starling::utils::Padding_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_57_boot)
HXDLIN(  57)		sBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_58_boot)
HXDLIN(  58)		sBasCols =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)3,true,null()),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_59_boot)
HXDLIN(  59)		sBasRows =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)3,true,null()),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_60_boot)
HXDLIN(  60)		sPosCols =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)3,true,null()),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_61_boot)
HXDLIN(  61)		sPosRows =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)3,true,null()),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_62_boot)
HXDLIN(  62)		sTexCols =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)3,true,null()),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_084429896d36500d_63_boot)
HXDLIN(  63)		sTexRows =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)3,true,null()),null());
            	}
}

} // end namespace starling
} // end namespace display
