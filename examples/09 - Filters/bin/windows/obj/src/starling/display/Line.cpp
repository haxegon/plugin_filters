// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Line
#include <starling/display/Line.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Poly4
#include <starling/display/Poly4.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_aa0fbfd3d43b361b_23_new,"starling.display.Line","new",0xad9c6918,"starling.display.Line.new","starling/display/Line.hx",23,0x63e3dc96)
HX_LOCAL_STACK_FRAME(_hx_pos_aa0fbfd3d43b361b_67_setPosition,"starling.display.Line","setPosition",0x247f7b23,"starling.display.Line.setPosition","starling/display/Line.hx",67,0x63e3dc96)
namespace starling{
namespace display{

void Line_obj::__construct(Float x1,Float y1,Float x2,Float y2,Float thickness,int color){
            	HX_GC_STACKFRAME(&_hx_pos_aa0fbfd3d43b361b_23_new)
HXLINE(  30)		this->l4 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  29)		this->l3 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  28)		this->l2 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  27)		this->l1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  26)		this->to =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  25)		this->from =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  35)		this->from->setTo(x1,y1);
HXLINE(  36)		this->to->setTo(x2,y2);
HXLINE(  37)		this->thickness = thickness;
HXLINE(  39)		Float dx = (this->to->x - this->from->x);
HXLINE(  40)		Float dy = (this->to->y - this->from->y);
HXLINE(  41)		Float l = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXLINE(  42)		 ::openfl::geom::Point u =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,((Float)dx / (Float)l),((Float)dy / (Float)l));
HXLINE(  43)		 ::openfl::geom::Point v =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,u->y,-(u->x));
HXLINE(  44)		Float halfT = (thickness * ((Float)0.5));
HXLINE(  46)		this->l1 = this->from->clone();
HXLINE(  47)		 ::openfl::geom::Point _hx_tmp = this->l1;
HXDLIN(  47)		Float _hx_tmp1 = (v->x * halfT);
HXDLIN(  47)		_hx_tmp->offset(_hx_tmp1,(v->y * halfT));
HXLINE(  48)		 ::openfl::geom::Point _hx_tmp2 = this->l1;
HXDLIN(  48)		Float _hx_tmp3 = (-(u->x) * halfT);
HXDLIN(  48)		_hx_tmp2->offset(_hx_tmp3,(-(u->y) * halfT));
HXLINE(  50)		this->l2 = this->from->clone();
HXLINE(  51)		 ::openfl::geom::Point _hx_tmp4 = this->l2;
HXDLIN(  51)		Float _hx_tmp5 = (-(v->x) * halfT);
HXDLIN(  51)		_hx_tmp4->offset(_hx_tmp5,(-(v->y) * halfT));
HXLINE(  52)		 ::openfl::geom::Point _hx_tmp6 = this->l2;
HXDLIN(  52)		Float _hx_tmp7 = (-(u->x) * halfT);
HXDLIN(  52)		_hx_tmp6->offset(_hx_tmp7,(-(u->y) * halfT));
HXLINE(  54)		this->l3 = this->to->clone();
HXLINE(  55)		 ::openfl::geom::Point _hx_tmp8 = this->l3;
HXDLIN(  55)		Float _hx_tmp9 = (v->x * halfT);
HXDLIN(  55)		_hx_tmp8->offset(_hx_tmp9,(v->y * halfT));
HXLINE(  56)		 ::openfl::geom::Point _hx_tmp10 = this->l3;
HXDLIN(  56)		Float _hx_tmp11 = (u->x * halfT);
HXDLIN(  56)		_hx_tmp10->offset(_hx_tmp11,(u->y * halfT));
HXLINE(  58)		this->l4 = this->to->clone();
HXLINE(  59)		 ::openfl::geom::Point _hx_tmp12 = this->l4;
HXDLIN(  59)		Float _hx_tmp13 = (-(v->x) * halfT);
HXDLIN(  59)		_hx_tmp12->offset(_hx_tmp13,(-(v->y) * halfT));
HXLINE(  60)		 ::openfl::geom::Point _hx_tmp14 = this->l4;
HXDLIN(  60)		Float _hx_tmp15 = (u->x * halfT);
HXDLIN(  60)		_hx_tmp14->offset(_hx_tmp15,(u->y * halfT));
HXLINE(  62)		super::__construct(this->l1->x,this->l1->y,this->l2->x,this->l2->y,this->l3->x,this->l3->y,this->l4->x,this->l4->y,color);
            	}

Dynamic Line_obj::__CreateEmpty() { return new Line_obj; }

void *Line_obj::_hx_vtable = 0;

Dynamic Line_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Line_obj > _hx_result = new Line_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Line_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3cebba07) {
		if (inClassId<=(int)0x3c45880e) {
			if (inClassId<=(int)0x25137bc0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
			} else {
				return inClassId==(int)0x3c45880e;
			}
		} else {
			return inClassId==(int)0x3cebba07;
		}
	} else {
		if (inClassId<=(int)0x58f4b772) {
			return inClassId==(int)0x3f9ca8e1 || inClassId==(int)0x58f4b772;
		} else {
			return inClassId==(int)0x6dea180f;
		}
	}
}

void Line_obj::setPosition(Float x1,Float y1,Float x2,Float y2){
            	HX_GC_STACKFRAME(&_hx_pos_aa0fbfd3d43b361b_67_setPosition)
HXLINE(  68)		this->from->setTo(x1,y1);
HXLINE(  69)		this->to->setTo(x2,y2);
HXLINE(  71)		Float dx = (this->to->x - this->from->x);
HXLINE(  72)		Float dy = (this->to->y - this->from->y);
HXLINE(  73)		Float l = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXLINE(  74)		 ::openfl::geom::Point u =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,((Float)dx / (Float)l),((Float)dy / (Float)l));
HXLINE(  75)		 ::openfl::geom::Point v =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,u->y,-(u->x));
HXLINE(  76)		Float halfT = (this->thickness * ((Float)0.5));
HXLINE(  78)		this->l1 = this->from->clone();
HXLINE(  79)		 ::openfl::geom::Point _hx_tmp = this->l1;
HXDLIN(  79)		Float _hx_tmp1 = (v->x * halfT);
HXDLIN(  79)		_hx_tmp->offset(_hx_tmp1,(v->y * halfT));
HXLINE(  80)		 ::openfl::geom::Point _hx_tmp2 = this->l1;
HXDLIN(  80)		Float _hx_tmp3 = (-(u->x) * halfT);
HXDLIN(  80)		_hx_tmp2->offset(_hx_tmp3,(-(u->y) * halfT));
HXLINE(  82)		this->l2 = this->from->clone();
HXLINE(  83)		 ::openfl::geom::Point _hx_tmp4 = this->l2;
HXDLIN(  83)		Float _hx_tmp5 = (-(v->x) * halfT);
HXDLIN(  83)		_hx_tmp4->offset(_hx_tmp5,(-(v->y) * halfT));
HXLINE(  84)		 ::openfl::geom::Point _hx_tmp6 = this->l2;
HXDLIN(  84)		Float _hx_tmp7 = (-(u->x) * halfT);
HXDLIN(  84)		_hx_tmp6->offset(_hx_tmp7,(-(u->y) * halfT));
HXLINE(  86)		this->l3 = this->to->clone();
HXLINE(  87)		 ::openfl::geom::Point _hx_tmp8 = this->l3;
HXDLIN(  87)		Float _hx_tmp9 = (v->x * halfT);
HXDLIN(  87)		_hx_tmp8->offset(_hx_tmp9,(v->y * halfT));
HXLINE(  88)		 ::openfl::geom::Point _hx_tmp10 = this->l3;
HXDLIN(  88)		Float _hx_tmp11 = (u->x * halfT);
HXDLIN(  88)		_hx_tmp10->offset(_hx_tmp11,(u->y * halfT));
HXLINE(  90)		this->l4 = this->to->clone();
HXLINE(  91)		 ::openfl::geom::Point _hx_tmp12 = this->l4;
HXDLIN(  91)		Float _hx_tmp13 = (-(v->x) * halfT);
HXDLIN(  91)		_hx_tmp12->offset(_hx_tmp13,(-(v->y) * halfT));
HXLINE(  92)		 ::openfl::geom::Point _hx_tmp14 = this->l4;
HXDLIN(  92)		Float _hx_tmp15 = (u->x * halfT);
HXDLIN(  92)		_hx_tmp14->offset(_hx_tmp15,(u->y * halfT));
HXLINE(  95)		this->setVertexPositions(this->l1->x,this->l1->y,this->l2->x,this->l2->y,this->l3->x,this->l3->y,this->l4->x,this->l4->y);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Line_obj,setPosition,(void))


hx::ObjectPtr< Line_obj > Line_obj::__new(Float x1,Float y1,Float x2,Float y2,Float thickness,int color) {
	hx::ObjectPtr< Line_obj > __this = new Line_obj();
	__this->__construct(x1,y1,x2,y2,thickness,color);
	return __this;
}

hx::ObjectPtr< Line_obj > Line_obj::__alloc(hx::Ctx *_hx_ctx,Float x1,Float y1,Float x2,Float y2,Float thickness,int color) {
	Line_obj *__this = (Line_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Line_obj), true, "starling.display.Line"));
	*(void **)__this = Line_obj::_hx_vtable;
	__this->__construct(x1,y1,x2,y2,thickness,color);
	return __this;
}

Line_obj::Line_obj()
{
}

void Line_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Line);
	HX_MARK_MEMBER_NAME(from,"from");
	HX_MARK_MEMBER_NAME(to,"to");
	HX_MARK_MEMBER_NAME(l1,"l1");
	HX_MARK_MEMBER_NAME(l2,"l2");
	HX_MARK_MEMBER_NAME(l3,"l3");
	HX_MARK_MEMBER_NAME(l4,"l4");
	HX_MARK_MEMBER_NAME(thickness,"thickness");
	 ::starling::display::Poly4_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Line_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(from,"from");
	HX_VISIT_MEMBER_NAME(to,"to");
	HX_VISIT_MEMBER_NAME(l1,"l1");
	HX_VISIT_MEMBER_NAME(l2,"l2");
	HX_VISIT_MEMBER_NAME(l3,"l3");
	HX_VISIT_MEMBER_NAME(l4,"l4");
	HX_VISIT_MEMBER_NAME(thickness,"thickness");
	 ::starling::display::Poly4_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Line_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"to") ) { return hx::Val( to ); }
		if (HX_FIELD_EQ(inName,"l1") ) { return hx::Val( l1 ); }
		if (HX_FIELD_EQ(inName,"l2") ) { return hx::Val( l2 ); }
		if (HX_FIELD_EQ(inName,"l3") ) { return hx::Val( l3 ); }
		if (HX_FIELD_EQ(inName,"l4") ) { return hx::Val( l4 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"from") ) { return hx::Val( from ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thickness") ) { return hx::Val( thickness ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Line_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"to") ) { to=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l1") ) { l1=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l2") ) { l2=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l3") ) { l3=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l4") ) { l4=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"from") ) { from=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thickness") ) { thickness=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Line_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("from","\x6a","\xa5","\xc2","\x43"));
	outFields->push(HX_HCSTRING("to","\x7b","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("l1","\x45","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("l2","\x46","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("l3","\x47","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("l4","\x48","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("thickness","\x74","\xf1","\x66","\x5a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Line_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Line_obj,from),HX_HCSTRING("from","\x6a","\xa5","\xc2","\x43")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Line_obj,to),HX_HCSTRING("to","\x7b","\x65","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Line_obj,l1),HX_HCSTRING("l1","\x45","\x5e","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Line_obj,l2),HX_HCSTRING("l2","\x46","\x5e","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Line_obj,l3),HX_HCSTRING("l3","\x47","\x5e","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Line_obj,l4),HX_HCSTRING("l4","\x48","\x5e","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Line_obj,thickness),HX_HCSTRING("thickness","\x74","\xf1","\x66","\x5a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Line_obj_sStaticStorageInfo = 0;
#endif

static ::String Line_obj_sMemberFields[] = {
	HX_HCSTRING("from","\x6a","\xa5","\xc2","\x43"),
	HX_HCSTRING("to","\x7b","\x65","\x00","\x00"),
	HX_HCSTRING("l1","\x45","\x5e","\x00","\x00"),
	HX_HCSTRING("l2","\x46","\x5e","\x00","\x00"),
	HX_HCSTRING("l3","\x47","\x5e","\x00","\x00"),
	HX_HCSTRING("l4","\x48","\x5e","\x00","\x00"),
	HX_HCSTRING("thickness","\x74","\xf1","\x66","\x5a"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	::String(null()) };

static void Line_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Line_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Line_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Line_obj::__mClass,"__mClass");
};

#endif

hx::Class Line_obj::__mClass;

void Line_obj::__register()
{
	hx::Object *dummy = new Line_obj;
	Line_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.Line","\x26","\x3d","\x44","\xca");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Line_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Line_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Line_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Line_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Line_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Line_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace display
