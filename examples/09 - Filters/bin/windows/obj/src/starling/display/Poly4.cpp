// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Poly4
#include <starling/display/Poly4.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexData
#include <starling/rendering/VertexData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c7b665c08c21724a_36_new,"starling.display.Poly4","new",0xd44cbee8,"starling.display.Poly4.new","starling/display/Poly4.hx",36,0x9cdfd08a)
HX_LOCAL_STACK_FRAME(_hx_pos_c7b665c08c21724a_74_setVertexPositions,"starling.display.Poly4","setVertexPositions",0x4bede89c,"starling.display.Poly4.setVertexPositions","starling/display/Poly4.hx",74,0x9cdfd08a)
HX_LOCAL_STACK_FRAME(_hx_pos_c7b665c08c21724a_101_min4,"starling.display.Poly4","min4",0xee3416da,"starling.display.Poly4.min4","starling/display/Poly4.hx",101,0x9cdfd08a)
HX_LOCAL_STACK_FRAME(_hx_pos_c7b665c08c21724a_105_max4,"starling.display.Poly4","max4",0xee2e0d88,"starling.display.Poly4.max4","starling/display/Poly4.hx",105,0x9cdfd08a)
HX_LOCAL_STACK_FRAME(_hx_pos_c7b665c08c21724a_108_getBounds,"starling.display.Poly4","getBounds",0x0c3a9433,"starling.display.Poly4.getBounds","starling/display/Poly4.hx",108,0x9cdfd08a)
namespace starling{
namespace display{

void Poly4_obj::__construct(hx::Null< Float >  __o_x1,hx::Null< Float >  __o_y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2,hx::Null< Float >  __o_x3,hx::Null< Float >  __o_y3,hx::Null< Float >  __o_x4,hx::Null< Float >  __o_y4,hx::Null< int >  __o_color){
Float x1 = __o_x1.Default(0);
Float y1 = __o_y1.Default(0);
Float x2 = __o_x2.Default(0);
Float y2 = __o_y2.Default(0);
Float x3 = __o_x3.Default(0);
Float y3 = __o_y3.Default(0);
Float x4 = __o_x4.Default(0);
Float y4 = __o_y4.Default(0);
int color = __o_color.Default(16777215);
            	HX_GC_STACKFRAME(&_hx_pos_c7b665c08c21724a_36_new)
HXLINE(  98)		this->_lowerRight =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  45)		this->ymax = ((Float)0);
HXLINE(  44)		this->ymin = ((Float)0);
HXLINE(  43)		this->xmax = ((Float)0);
HXLINE(  42)		this->xmin = ((Float)0);
HXLINE(  41)		this->p4 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  40)		this->p3 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  39)		this->p2 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  38)		this->p1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE(  50)		this->p1->setTo(x1,y1);
HXLINE(  51)		this->p2->setTo(x2,y2);
HXLINE(  52)		this->p3->setTo(x3,y3);
HXLINE(  53)		this->p4->setTo(x4,y4);
HXLINE(  55)		Float _hx_tmp = this->p1->x;
HXDLIN(  55)		Float _hx_tmp1 = this->p2->x;
HXDLIN(  55)		this->xmin = ::Math_obj::min(_hx_tmp,::Math_obj::min(_hx_tmp1,::Math_obj::min(this->p3->x,this->p4->x)));
HXLINE(  56)		Float _hx_tmp2 = this->p1->y;
HXDLIN(  56)		Float _hx_tmp3 = this->p2->y;
HXDLIN(  56)		this->ymin = ::Math_obj::min(_hx_tmp2,::Math_obj::min(_hx_tmp3,::Math_obj::min(this->p3->y,this->p4->y)));
HXLINE(  57)		Float _hx_tmp4 = this->p1->x;
HXDLIN(  57)		Float _hx_tmp5 = this->p2->x;
HXDLIN(  57)		this->xmax = ::Math_obj::max(_hx_tmp4,::Math_obj::max(_hx_tmp5,::Math_obj::max(this->p3->x,this->p4->x)));
HXLINE(  58)		Float _hx_tmp6 = this->p1->y;
HXDLIN(  58)		Float _hx_tmp7 = this->p2->y;
HXDLIN(  58)		this->ymax = ::Math_obj::max(_hx_tmp6,::Math_obj::max(_hx_tmp7,::Math_obj::max(this->p3->y,this->p4->y)));
HXLINE(  59)		Float _hx_tmp8 = (this->xmax - this->xmin);
HXDLIN(  59)		super::__construct(_hx_tmp8,(this->ymax - this->ymin),color);
HXLINE(  61)		 ::starling::rendering::VertexData _hx_tmp11 = this->get_vertexData();
HXDLIN(  61)		Float _hx_tmp21 = (this->p1->x - this->xmin);
HXDLIN(  61)		_hx_tmp11->setPoint((int)0,HX_("position",a9,a0,fa,ca),_hx_tmp21,(this->p1->y - this->ymin));
HXLINE(  62)		 ::starling::rendering::VertexData _hx_tmp31 = this->get_vertexData();
HXDLIN(  62)		Float _hx_tmp41 = (this->p2->x - this->xmin);
HXDLIN(  62)		_hx_tmp31->setPoint((int)1,HX_("position",a9,a0,fa,ca),_hx_tmp41,(this->p2->y - this->ymin));
HXLINE(  63)		 ::starling::rendering::VertexData _hx_tmp51 = this->get_vertexData();
HXDLIN(  63)		Float _hx_tmp61 = (this->p3->x - this->xmin);
HXDLIN(  63)		_hx_tmp51->setPoint((int)2,HX_("position",a9,a0,fa,ca),_hx_tmp61,(this->p3->y - this->ymin));
HXLINE(  64)		 ::starling::rendering::VertexData _hx_tmp71 = this->get_vertexData();
HXDLIN(  64)		Float _hx_tmp81 = (this->p4->x - this->xmin);
HXDLIN(  64)		_hx_tmp71->setPoint((int)3,HX_("position",a9,a0,fa,ca),_hx_tmp81,(this->p4->y - this->ymin));
HXLINE(  66)		this->set_x(this->xmin);
HXLINE(  67)		this->set_y(this->ymin);
HXLINE(  68)		 ::openfl::geom::Point _hx_tmp9 = this->_lowerRight;
HXDLIN(  68)		Float _hx_tmp10 = (this->xmax - this->xmin);
HXDLIN(  68)		_hx_tmp9->setTo(_hx_tmp10,(this->ymax - this->ymin));
            	}

Dynamic Poly4_obj::__CreateEmpty() { return new Poly4_obj; }

void *Poly4_obj::_hx_vtable = 0;

Dynamic Poly4_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Poly4_obj > _hx_result = new Poly4_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool Poly4_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f9ca8e1) {
		if (inClassId<=(int)0x3cebba07) {
			if (inClassId<=(int)0x25137bc0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
			} else {
				return inClassId==(int)0x3cebba07;
			}
		} else {
			return inClassId==(int)0x3f9ca8e1;
		}
	} else {
		return inClassId==(int)0x58f4b772 || inClassId==(int)0x6dea180f;
	}
}

void Poly4_obj::setVertexPositions(hx::Null< Float >  __o_x1,hx::Null< Float >  __o_y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2,hx::Null< Float >  __o_x3,hx::Null< Float >  __o_y3,hx::Null< Float >  __o_x4,hx::Null< Float >  __o_y4){
Float x1 = __o_x1.Default(0);
Float y1 = __o_y1.Default(0);
Float x2 = __o_x2.Default(0);
Float y2 = __o_y2.Default(0);
Float x3 = __o_x3.Default(0);
Float y3 = __o_y3.Default(0);
Float x4 = __o_x4.Default(0);
Float y4 = __o_y4.Default(0);
            	HX_STACKFRAME(&_hx_pos_c7b665c08c21724a_74_setVertexPositions)
HXLINE(  75)		this->p1->setTo(x1,y1);
HXLINE(  76)		this->p2->setTo(x2,y2);
HXLINE(  77)		this->p3->setTo(x3,y3);
HXLINE(  78)		this->p4->setTo(x4,y4);
HXLINE(  80)		this->xmin = ::Math_obj::min(this->p1->x,::Math_obj::min(this->p2->x,::Math_obj::min(this->p3->x,this->p4->x)));
HXLINE(  81)		this->ymin = ::Math_obj::min(this->p1->y,::Math_obj::min(this->p2->y,::Math_obj::min(this->p3->y,this->p4->y)));
HXLINE(  82)		this->xmax = ::Math_obj::max(this->p1->x,::Math_obj::max(this->p2->x,::Math_obj::max(this->p3->x,this->p4->x)));
HXLINE(  83)		this->ymax = ::Math_obj::max(this->p1->y,::Math_obj::max(this->p2->y,::Math_obj::max(this->p3->y,this->p4->y)));
HXLINE(  84)		Float _hx_tmp = (this->xmax - this->xmin);
HXDLIN(  84)		this->readjustSize(_hx_tmp,(this->ymax - this->ymin));
HXLINE(  86)		 ::starling::rendering::VertexData _hx_tmp1 = this->get_vertexData();
HXDLIN(  86)		Float _hx_tmp2 = (this->p1->x - this->xmin);
HXDLIN(  86)		_hx_tmp1->setPoint((int)0,HX_("position",a9,a0,fa,ca),_hx_tmp2,(this->p1->y - this->ymin));
HXLINE(  87)		 ::starling::rendering::VertexData _hx_tmp3 = this->get_vertexData();
HXDLIN(  87)		Float _hx_tmp4 = (this->p2->x - this->xmin);
HXDLIN(  87)		_hx_tmp3->setPoint((int)1,HX_("position",a9,a0,fa,ca),_hx_tmp4,(this->p2->y - this->ymin));
HXLINE(  88)		 ::starling::rendering::VertexData _hx_tmp5 = this->get_vertexData();
HXDLIN(  88)		Float _hx_tmp6 = (this->p3->x - this->xmin);
HXDLIN(  88)		_hx_tmp5->setPoint((int)2,HX_("position",a9,a0,fa,ca),_hx_tmp6,(this->p3->y - this->ymin));
HXLINE(  89)		 ::starling::rendering::VertexData _hx_tmp7 = this->get_vertexData();
HXDLIN(  89)		Float _hx_tmp8 = (this->p4->x - this->xmin);
HXDLIN(  89)		_hx_tmp7->setPoint((int)3,HX_("position",a9,a0,fa,ca),_hx_tmp8,(this->p4->y - this->ymin));
HXLINE(  91)		this->set_x(this->xmin);
HXLINE(  92)		this->set_y(this->ymin);
HXLINE(  93)		 ::openfl::geom::Point _hx_tmp9 = this->_lowerRight;
HXDLIN(  93)		Float _hx_tmp10 = (this->xmax - this->xmin);
HXDLIN(  93)		_hx_tmp9->setTo(_hx_tmp10,(this->ymax - this->ymin));
            	}


HX_DEFINE_DYNAMIC_FUNC8(Poly4_obj,setVertexPositions,(void))

Float Poly4_obj::min4(Float a,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_c7b665c08c21724a_101_min4)
HXDLIN( 101)		return ::Math_obj::min(a,::Math_obj::min(b,::Math_obj::min(c,d)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Poly4_obj,min4,return )

Float Poly4_obj::max4(Float a,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_c7b665c08c21724a_105_max4)
HXDLIN( 105)		return ::Math_obj::max(a,::Math_obj::max(b,::Math_obj::max(c,d)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Poly4_obj,max4,return )

 ::openfl::geom::Rectangle Poly4_obj::getBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle resultRect){
            	HX_GC_STACKFRAME(&_hx_pos_c7b665c08c21724a_108_getBounds)
HXLINE( 109)		if (hx::IsNull( resultRect )) {
HXLINE( 109)			resultRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 111)		if (hx::IsEq( targetSpace,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 113)			resultRect->setTo(((Float)0.0),((Float)0.0),this->_lowerRight->x,this->_lowerRight->y);
            		}
            		else {
HXLINE( 115)			bool _hx_tmp;
HXDLIN( 115)			if (hx::IsEq( targetSpace,this->get_parent() )) {
HXLINE( 115)				_hx_tmp = (this->get_rotation() == ((Float)0.0));
            			}
            			else {
HXLINE( 115)				_hx_tmp = false;
            			}
HXDLIN( 115)			if (_hx_tmp) {
HXLINE( 117)				Float scaleX = this->get_scaleX();
HXLINE( 118)				Float scaleY = this->get_scaleY();
HXLINE( 119)				Float _hx_tmp1 = this->get_x();
HXDLIN( 119)				Float _hx_tmp2 = (_hx_tmp1 - (this->get_pivotX() * scaleX));
HXDLIN( 119)				Float _hx_tmp3 = this->get_y();
HXDLIN( 119)				Float _hx_tmp4 = (_hx_tmp3 - (this->get_pivotY() * scaleY));
HXLINE( 120)				Float _hx_tmp5 = (this->_lowerRight->x * scaleX);
HXLINE( 119)				resultRect->setTo(_hx_tmp2,_hx_tmp4,_hx_tmp5,(this->_lowerRight->y * scaleY));
HXLINE( 121)				if ((scaleX < (int)0)) {
HXLINE( 121)					 ::openfl::geom::Rectangle resultRect1 = resultRect;
HXDLIN( 121)					resultRect1->width = (resultRect1->width * (int)-1);
HXDLIN( 121)					 ::openfl::geom::Rectangle resultRect2 = resultRect;
HXDLIN( 121)					resultRect2->x = (resultRect2->x - resultRect->width);
            				}
HXLINE( 122)				if ((scaleY < (int)0)) {
HXLINE( 122)					 ::openfl::geom::Rectangle resultRect3 = resultRect;
HXDLIN( 122)					resultRect3->height = (resultRect3->height * (int)-1);
HXDLIN( 122)					 ::openfl::geom::Rectangle resultRect4 = resultRect;
HXDLIN( 122)					resultRect4->y = (resultRect4->y - resultRect->height);
            				}
            			}
            			else {
HXLINE( 125)				resultRect = this->super::getBounds(targetSpace,resultRect);
            			}
            		}
HXLINE( 128)		return resultRect;
            	}



hx::ObjectPtr< Poly4_obj > Poly4_obj::__new(hx::Null< Float >  __o_x1,hx::Null< Float >  __o_y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2,hx::Null< Float >  __o_x3,hx::Null< Float >  __o_y3,hx::Null< Float >  __o_x4,hx::Null< Float >  __o_y4,hx::Null< int >  __o_color) {
	hx::ObjectPtr< Poly4_obj > __this = new Poly4_obj();
	__this->__construct(__o_x1,__o_y1,__o_x2,__o_y2,__o_x3,__o_y3,__o_x4,__o_y4,__o_color);
	return __this;
}

hx::ObjectPtr< Poly4_obj > Poly4_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_x1,hx::Null< Float >  __o_y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2,hx::Null< Float >  __o_x3,hx::Null< Float >  __o_y3,hx::Null< Float >  __o_x4,hx::Null< Float >  __o_y4,hx::Null< int >  __o_color) {
	Poly4_obj *__this = (Poly4_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Poly4_obj), true, "starling.display.Poly4"));
	*(void **)__this = Poly4_obj::_hx_vtable;
	__this->__construct(__o_x1,__o_y1,__o_x2,__o_y2,__o_x3,__o_y3,__o_x4,__o_y4,__o_color);
	return __this;
}

Poly4_obj::Poly4_obj()
{
}

void Poly4_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Poly4);
	HX_MARK_MEMBER_NAME(p1,"p1");
	HX_MARK_MEMBER_NAME(p2,"p2");
	HX_MARK_MEMBER_NAME(p3,"p3");
	HX_MARK_MEMBER_NAME(p4,"p4");
	HX_MARK_MEMBER_NAME(xmin,"xmin");
	HX_MARK_MEMBER_NAME(xmax,"xmax");
	HX_MARK_MEMBER_NAME(ymin,"ymin");
	HX_MARK_MEMBER_NAME(ymax,"ymax");
	HX_MARK_MEMBER_NAME(_lowerRight,"_lowerRight");
	 ::starling::display::Quad_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Poly4_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(p1,"p1");
	HX_VISIT_MEMBER_NAME(p2,"p2");
	HX_VISIT_MEMBER_NAME(p3,"p3");
	HX_VISIT_MEMBER_NAME(p4,"p4");
	HX_VISIT_MEMBER_NAME(xmin,"xmin");
	HX_VISIT_MEMBER_NAME(xmax,"xmax");
	HX_VISIT_MEMBER_NAME(ymin,"ymin");
	HX_VISIT_MEMBER_NAME(ymax,"ymax");
	HX_VISIT_MEMBER_NAME(_lowerRight,"_lowerRight");
	 ::starling::display::Quad_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Poly4_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"p1") ) { return hx::Val( p1 ); }
		if (HX_FIELD_EQ(inName,"p2") ) { return hx::Val( p2 ); }
		if (HX_FIELD_EQ(inName,"p3") ) { return hx::Val( p3 ); }
		if (HX_FIELD_EQ(inName,"p4") ) { return hx::Val( p4 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"xmin") ) { return hx::Val( xmin ); }
		if (HX_FIELD_EQ(inName,"xmax") ) { return hx::Val( xmax ); }
		if (HX_FIELD_EQ(inName,"ymin") ) { return hx::Val( ymin ); }
		if (HX_FIELD_EQ(inName,"ymax") ) { return hx::Val( ymax ); }
		if (HX_FIELD_EQ(inName,"min4") ) { return hx::Val( min4_dyn() ); }
		if (HX_FIELD_EQ(inName,"max4") ) { return hx::Val( max4_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_lowerRight") ) { return hx::Val( _lowerRight ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setVertexPositions") ) { return hx::Val( setVertexPositions_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Poly4_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"p1") ) { p1=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p2") ) { p2=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p3") ) { p3=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p4") ) { p4=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"xmin") ) { xmin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xmax") ) { xmax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ymin") ) { ymin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ymax") ) { ymax=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_lowerRight") ) { _lowerRight=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Poly4_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"));
	outFields->push(HX_HCSTRING("p2","\xc2","\x61","\x00","\x00"));
	outFields->push(HX_HCSTRING("p3","\xc3","\x61","\x00","\x00"));
	outFields->push(HX_HCSTRING("p4","\xc4","\x61","\x00","\x00"));
	outFields->push(HX_HCSTRING("xmin","\x1a","\xac","\xa4","\x4f"));
	outFields->push(HX_HCSTRING("xmax","\x2c","\xa5","\xa4","\x4f"));
	outFields->push(HX_HCSTRING("ymin","\xb9","\xe2","\x4d","\x50"));
	outFields->push(HX_HCSTRING("ymax","\xcb","\xdb","\x4d","\x50"));
	outFields->push(HX_HCSTRING("_lowerRight","\x3a","\x6b","\x4c","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Poly4_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Poly4_obj,p1),HX_HCSTRING("p1","\xc1","\x61","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Poly4_obj,p2),HX_HCSTRING("p2","\xc2","\x61","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Poly4_obj,p3),HX_HCSTRING("p3","\xc3","\x61","\x00","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Poly4_obj,p4),HX_HCSTRING("p4","\xc4","\x61","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Poly4_obj,xmin),HX_HCSTRING("xmin","\x1a","\xac","\xa4","\x4f")},
	{hx::fsFloat,(int)offsetof(Poly4_obj,xmax),HX_HCSTRING("xmax","\x2c","\xa5","\xa4","\x4f")},
	{hx::fsFloat,(int)offsetof(Poly4_obj,ymin),HX_HCSTRING("ymin","\xb9","\xe2","\x4d","\x50")},
	{hx::fsFloat,(int)offsetof(Poly4_obj,ymax),HX_HCSTRING("ymax","\xcb","\xdb","\x4d","\x50")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Poly4_obj,_lowerRight),HX_HCSTRING("_lowerRight","\x3a","\x6b","\x4c","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Poly4_obj_sStaticStorageInfo = 0;
#endif

static ::String Poly4_obj_sMemberFields[] = {
	HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"),
	HX_HCSTRING("p2","\xc2","\x61","\x00","\x00"),
	HX_HCSTRING("p3","\xc3","\x61","\x00","\x00"),
	HX_HCSTRING("p4","\xc4","\x61","\x00","\x00"),
	HX_HCSTRING("xmin","\x1a","\xac","\xa4","\x4f"),
	HX_HCSTRING("xmax","\x2c","\xa5","\xa4","\x4f"),
	HX_HCSTRING("ymin","\xb9","\xe2","\x4d","\x50"),
	HX_HCSTRING("ymax","\xcb","\xdb","\x4d","\x50"),
	HX_HCSTRING("setVertexPositions","\x24","\x3e","\x15","\x51"),
	HX_HCSTRING("_lowerRight","\x3a","\x6b","\x4c","\x78"),
	HX_HCSTRING("min4","\x62","\x4e","\x5c","\x48"),
	HX_HCSTRING("max4","\x10","\x45","\x56","\x48"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	::String(null()) };

static void Poly4_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Poly4_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Poly4_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Poly4_obj::__mClass,"__mClass");
};

#endif

hx::Class Poly4_obj::__mClass;

void Poly4_obj::__register()
{
	hx::Object *dummy = new Poly4_obj;
	Poly4_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.Poly4","\xf6","\x6a","\x01","\x83");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Poly4_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Poly4_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Poly4_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Poly4_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Poly4_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Poly4_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace display
