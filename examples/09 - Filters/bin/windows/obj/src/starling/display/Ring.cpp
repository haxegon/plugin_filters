// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Poly4
#include <starling/display/Poly4.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_Ring
#include <starling/display/Ring.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_441a92759781745d_30_new,"starling.display.Ring","new",0x2b983ed4,"starling.display.Ring.new","starling/display/Ring.hx",30,0x5eb7125a)
HX_LOCAL_STACK_FRAME(_hx_pos_441a92759781745d_67_setpolycolor,"starling.display.Ring","setpolycolor",0x3d0fa2c1,"starling.display.Ring.setpolycolor","starling/display/Ring.hx",67,0x5eb7125a)
namespace starling{
namespace display{

void Ring_obj::__construct(Float xoff,Float yoff,Float innerRadius,Float outerRadius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle){
int color = __o_color.Default(16777215);
Float alpha = __o_alpha.Default(((Float)1.0));
int nsides = __o_nsides.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_441a92759781745d_30_new)
HXLINE(  31)		super::__construct();
HXLINE(  32)		this->_polygons = ::Array_obj< ::Dynamic>::__new();
HXLINE(  33)		this->_innerRadius = innerRadius;
HXLINE(  34)		this->_outerRadius = outerRadius;
HXLINE(  35)		this->_outerRadius2 = (outerRadius * outerRadius);
HXLINE(  36)		 ::openfl::geom::Point c0 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  37)		 ::openfl::geom::Point c1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  38)		 ::openfl::geom::Point p0 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  39)		 ::openfl::geom::Point p1 =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  40)		int nParts = ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::round(outerRadius),(int)8));
HXLINE(  41)		if ((nsides > (int)-1)) {
HXLINE(  41)			nParts = nsides;
            		}
HXLINE(  42)		Float angle = (int)0;
HXLINE(  43)		if (hx::IsNotNull( startangle )) {
HXLINE(  43)			angle = startangle;
            		}
HXLINE(  44)		{
HXLINE(  44)			int _g1 = (int)0;
HXDLIN(  44)			int _g = nParts;
HXDLIN(  44)			while((_g1 < _g)){
HXLINE(  44)				_g1 = (_g1 + (int)1);
HXDLIN(  44)				int i = (_g1 - (int)1);
HXLINE(  45)				Float a0 = (angle + ((Float)(((i + ((Float)0.0)) * ((Float)2.0)) * ::Math_obj::PI) / (Float)nParts));
HXLINE(  46)				Float a1 = (angle + ((Float)(((i + ((Float)1.0)) * ((Float)2.0)) * ::Math_obj::PI) / (Float)nParts));
HXLINE(  47)				Float ca0 = ::Math_obj::cos(a0);
HXLINE(  48)				Float sa0 = ::Math_obj::sin(a0);
HXLINE(  49)				Float ca1 = ::Math_obj::cos(a1);
HXLINE(  50)				Float sa1 = ::Math_obj::sin(a1);
HXLINE(  51)				c0->x = (xoff + (outerRadius + (ca0 * innerRadius)));
HXLINE(  52)				c0->y = (yoff + (outerRadius + (sa0 * innerRadius)));
HXLINE(  53)				c1->x = (xoff + (outerRadius + (ca1 * innerRadius)));
HXLINE(  54)				c1->y = (yoff + (outerRadius + (sa1 * innerRadius)));
HXLINE(  55)				p0->x = (xoff + (outerRadius + (ca0 * outerRadius)));
HXLINE(  56)				p0->y = (yoff + (outerRadius + (sa0 * outerRadius)));
HXLINE(  57)				p1->x = (xoff + (outerRadius + (ca1 * outerRadius)));
HXLINE(  58)				p1->y = (yoff + (outerRadius + (sa1 * outerRadius)));
HXLINE(  59)				 ::starling::display::Poly4 q =  ::starling::display::Poly4_obj::__alloc( HX_CTX ,c0->x,c0->y,p0->x,p0->y,c1->x,c1->y,p1->x,p1->y,color);
HXLINE(  60)				if ((alpha != ((Float)1.0))) {
HXLINE(  60)					q->set_alpha(alpha);
            				}
HXLINE(  61)				this->_polygons->push(q);
HXLINE(  62)				this->addChild(q);
            			}
            		}
            	}

Dynamic Ring_obj::__CreateEmpty() { return new Ring_obj; }

void *Ring_obj::_hx_vtable = 0;

Dynamic Ring_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ring_obj > _hx_result = new Ring_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool Ring_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x403ccfca) {
		if (inClassId<=(int)0x31a4bcfa) {
			if (inClassId<=(int)0x25137bc0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
			} else {
				return inClassId==(int)0x31a4bcfa;
			}
		} else {
			return inClassId==(int)0x403ccfca;
		}
	} else {
		return inClassId==(int)0x478fd1bb || inClassId==(int)0x6dea180f;
	}
}

void Ring_obj::setpolycolor(int value){
            	HX_STACKFRAME(&_hx_pos_441a92759781745d_67_setpolycolor)
HXDLIN(  67)		int _g1 = (int)0;
HXDLIN(  67)		int _g = this->_polygons->length;
HXDLIN(  67)		while((_g1 < _g)){
HXDLIN(  67)			_g1 = (_g1 + (int)1);
HXDLIN(  67)			int i = (_g1 - (int)1);
HXLINE(  68)			this->_polygons->__get(i).StaticCast<  ::starling::display::Poly4 >()->set_color(value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Ring_obj,setpolycolor,(void))


hx::ObjectPtr< Ring_obj > Ring_obj::__new(Float xoff,Float yoff,Float innerRadius,Float outerRadius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle) {
	hx::ObjectPtr< Ring_obj > __this = new Ring_obj();
	__this->__construct(xoff,yoff,innerRadius,outerRadius,__o_color,__o_alpha,__o_nsides,startangle);
	return __this;
}

hx::ObjectPtr< Ring_obj > Ring_obj::__alloc(hx::Ctx *_hx_ctx,Float xoff,Float yoff,Float innerRadius,Float outerRadius,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< int >  __o_nsides, ::Dynamic startangle) {
	Ring_obj *__this = (Ring_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Ring_obj), true, "starling.display.Ring"));
	*(void **)__this = Ring_obj::_hx_vtable;
	__this->__construct(xoff,yoff,innerRadius,outerRadius,__o_color,__o_alpha,__o_nsides,startangle);
	return __this;
}

Ring_obj::Ring_obj()
{
}

void Ring_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Ring);
	HX_MARK_MEMBER_NAME(_innerRadius,"_innerRadius");
	HX_MARK_MEMBER_NAME(_outerRadius,"_outerRadius");
	HX_MARK_MEMBER_NAME(_outerRadius2,"_outerRadius2");
	HX_MARK_MEMBER_NAME(_polygons,"_polygons");
	 ::starling::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Ring_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_innerRadius,"_innerRadius");
	HX_VISIT_MEMBER_NAME(_outerRadius,"_outerRadius");
	HX_VISIT_MEMBER_NAME(_outerRadius2,"_outerRadius2");
	HX_VISIT_MEMBER_NAME(_polygons,"_polygons");
	 ::starling::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Ring_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_polygons") ) { return hx::Val( _polygons ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_innerRadius") ) { return hx::Val( _innerRadius ); }
		if (HX_FIELD_EQ(inName,"_outerRadius") ) { return hx::Val( _outerRadius ); }
		if (HX_FIELD_EQ(inName,"setpolycolor") ) { return hx::Val( setpolycolor_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_outerRadius2") ) { return hx::Val( _outerRadius2 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Ring_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_polygons") ) { _polygons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_innerRadius") ) { _innerRadius=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_outerRadius") ) { _outerRadius=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_outerRadius2") ) { _outerRadius2=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ring_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_innerRadius","\x89","\x78","\xff","\x7f"));
	outFields->push(HX_HCSTRING("_outerRadius","\x2e","\xb9","\xe7","\xb8"));
	outFields->push(HX_HCSTRING("_outerRadius2","\x44","\x4f","\xda","\x11"));
	outFields->push(HX_HCSTRING("_polygons","\x18","\x20","\xe7","\x73"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ring_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Ring_obj,_innerRadius),HX_HCSTRING("_innerRadius","\x89","\x78","\xff","\x7f")},
	{hx::fsFloat,(int)offsetof(Ring_obj,_outerRadius),HX_HCSTRING("_outerRadius","\x2e","\xb9","\xe7","\xb8")},
	{hx::fsFloat,(int)offsetof(Ring_obj,_outerRadius2),HX_HCSTRING("_outerRadius2","\x44","\x4f","\xda","\x11")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Ring_obj,_polygons),HX_HCSTRING("_polygons","\x18","\x20","\xe7","\x73")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ring_obj_sStaticStorageInfo = 0;
#endif

static ::String Ring_obj_sMemberFields[] = {
	HX_HCSTRING("_innerRadius","\x89","\x78","\xff","\x7f"),
	HX_HCSTRING("_outerRadius","\x2e","\xb9","\xe7","\xb8"),
	HX_HCSTRING("_outerRadius2","\x44","\x4f","\xda","\x11"),
	HX_HCSTRING("_polygons","\x18","\x20","\xe7","\x73"),
	HX_HCSTRING("setpolycolor","\xb5","\x7f","\x93","\xcf"),
	::String(null()) };

static void Ring_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ring_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ring_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ring_obj::__mClass,"__mClass");
};

#endif

hx::Class Ring_obj::__mClass;

void Ring_obj::__register()
{
	hx::Object *dummy = new Ring_obj;
	Ring_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.Ring","\xe2","\x84","\x3b","\xce");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ring_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ring_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ring_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ring_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ring_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ring_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace display
