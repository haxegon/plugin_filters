// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_EnterFrameEvent
#include <starling/events/EnterFrameEvent.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_filters_FragmentFilter
#include <starling/filters/FragmentFilter.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif
#ifndef INCLUDED_starling_utils_RectangleUtil
#include <starling/utils/RectangleUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9fcdad1eaead5847_78_new,"starling.display.Stage","new",0xa5e7083e,"starling.display.Stage.new","starling/display/Stage.hx",78,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_93_advanceTime,"starling.display.Stage","advanceTime",0x6718af8d,"starling.display.Stage.advanceTime","starling/display/Stage.hx",93,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_101_hitTest,"starling.display.Stage","hitTest",0x2a6edf23,"starling.display.Stage.hitTest","starling/display/Stage.hx",101,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_117_getStageBounds,"starling.display.Stage","getStageBounds",0x129093bf,"starling.display.Stage.getStageBounds","starling/display/Stage.hx",117,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_134_getCameraPosition,"starling.display.Stage","getCameraPosition",0x95550002,"starling.display.Stage.getCameraPosition","starling/display/Stage.hx",134,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_146_addEnterFrameListener,"starling.display.Stage","addEnterFrameListener",0xce5cf768,"starling.display.Stage.addEnterFrameListener","starling/display/Stage.hx",146,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_153_removeEnterFrameListener,"starling.display.Stage","removeEnterFrameListener",0x60bf464f,"starling.display.Stage.removeEnterFrameListener","starling/display/Stage.hx",153,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_162___getChildEventListeners,"starling.display.Stage","__getChildEventListeners",0x56e1004d,"starling.display.Stage.__getChildEventListeners","starling/display/Stage.hx",162,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_177_set_width,"starling.display.Stage","set_width",0xb35070c7,"starling.display.Stage.set_width","starling/display/Stage.hx",177,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_184_set_height,"starling.display.Stage","set_height",0xe961b606,"starling.display.Stage.set_height","starling/display/Stage.hx",184,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_191_set_x,"starling.display.Stage","set_x",0x14e706b9,"starling.display.Stage.set_x","starling/display/Stage.hx",191,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_198_set_y,"starling.display.Stage","set_y",0x14e706ba,"starling.display.Stage.set_y","starling/display/Stage.hx",198,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_205_set_scaleX,"starling.display.Stage","set_scaleX",0x233b98ad,"starling.display.Stage.set_scaleX","starling/display/Stage.hx",205,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_212_set_scaleY,"starling.display.Stage","set_scaleY",0x233b98ae,"starling.display.Stage.set_scaleY","starling/display/Stage.hx",212,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_219_set_rotation,"starling.display.Stage","set_rotation",0x22faf11d,"starling.display.Stage.set_rotation","starling/display/Stage.hx",219,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_226_set_skewX,"starling.display.Stage","set_skewX",0x670950cf,"starling.display.Stage.set_skewX","starling/display/Stage.hx",226,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_233_set_skewY,"starling.display.Stage","set_skewY",0x670950d0,"starling.display.Stage.set_skewY","starling/display/Stage.hx",233,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_240_set_filter,"starling.display.Stage","set_filter",0x6c4acdd7,"starling.display.Stage.set_filter","starling/display/Stage.hx",240,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_246_get_color,"starling.display.Stage","get_color",0x4ff94018,"starling.display.Stage.get_color","starling/display/Stage.hx",246,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_247_set_color,"starling.display.Stage","set_color",0x334a2c24,"starling.display.Stage.set_color","starling/display/Stage.hx",247,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_252_get_stageWidth,"starling.display.Stage","get_stageWidth",0x2583cb93,"starling.display.Stage.get_stageWidth","starling/display/Stage.hx",252,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_254_set_stageWidth,"starling.display.Stage","set_stageWidth",0x45a3b407,"starling.display.Stage.set_stageWidth","starling/display/Stage.hx",254,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_263_get_stageHeight,"starling.display.Stage","get_stageHeight",0x641dcdba,"starling.display.Stage.get_stageHeight","starling/display/Stage.hx",263,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_265_set_stageHeight,"starling.display.Stage","set_stageHeight",0x5fe94ac6,"starling.display.Stage.set_stageHeight","starling/display/Stage.hx",265,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_274_get_starling,"starling.display.Stage","get_starling",0x42dddd33,"starling.display.Stage.get_starling","starling/display/Stage.hx",274,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_289_get_focalLength,"starling.display.Stage","get_focalLength",0x25e3f5a0,"starling.display.Stage.get_focalLength","starling/display/Stage.hx",289,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_293_set_focalLength,"starling.display.Stage","set_focalLength",0x21af72ac,"starling.display.Stage.set_focalLength","starling/display/Stage.hx",293,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_310_get_fieldOfView,"starling.display.Stage","get_fieldOfView",0x29242beb,"starling.display.Stage.get_fieldOfView","starling/display/Stage.hx",310,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_312_set_fieldOfView,"starling.display.Stage","set_fieldOfView",0x24efa8f7,"starling.display.Stage.set_fieldOfView","starling/display/Stage.hx",312,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_323_get_projectionOffset,"starling.display.Stage","get_projectionOffset",0xe3a55ced,"starling.display.Stage.get_projectionOffset","starling/display/Stage.hx",323,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_325_set_projectionOffset,"starling.display.Stage","set_projectionOffset",0xb05d1461,"starling.display.Stage.set_projectionOffset","starling/display/Stage.hx",325,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_341_get_cameraPosition,"starling.display.Stage","get_cameraPosition",0x08878319,"starling.display.Stage.get_cameraPosition","starling/display/Stage.hx",341,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_73_boot,"starling.display.Stage","boot",0x7c592e94,"starling.display.Stage.boot","starling/display/Stage.hx",73,0x75a283f4)
HX_LOCAL_STACK_FRAME(_hx_pos_9fcdad1eaead5847_74_boot,"starling.display.Stage","boot",0x7c592e94,"starling.display.Stage.boot","starling/display/Stage.hx",74,0x75a283f4)
namespace starling{
namespace display{

void Stage_obj::__construct(int width,int height,hx::Null< int >  __o_color){
int color = __o_color.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_78_new)
HXLINE(  79)		super::__construct();
HXLINE(  81)		this->_hx___width = width;
HXLINE(  82)		this->_hx___height = height;
HXLINE(  83)		this->_hx___color = color;
HXLINE(  84)		this->_hx___fieldOfView = ((Float)1.0);
HXLINE(  85)		this->_hx___projectionOffset =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  86)		this->_hx___cameraPosition =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  87)		this->_hx___enterFrameEvent =  ::starling::events::EnterFrameEvent_obj::__alloc( HX_CTX ,HX_("enterFrame",f5,03,50,02),((Float)0.0),null());
HXLINE(  88)		int length = null();
HXDLIN(  88)		bool fixed = null();
HXDLIN(  88)		this->_hx___enterFrameListeners =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            	}

Dynamic Stage_obj::__CreateEmpty() { return new Stage_obj; }

void *Stage_obj::_hx_vtable = 0;

Dynamic Stage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Stage_obj > _hx_result = new Stage_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Stage_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		if (inClassId<=(int)0x166e1dc8) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x166e1dc8;
		} else {
			return inClassId==(int)0x25137bc0;
		}
	} else {
		return inClassId==(int)0x31a4bcfa || inClassId==(int)0x6dea180f;
	}
}

void Stage_obj::advanceTime(Float passedTime){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_93_advanceTime)
HXLINE(  94)		this->_hx___enterFrameEvent->reset(HX_("enterFrame",f5,03,50,02),false,passedTime);
HXLINE(  95)		this->broadcastEvent(this->_hx___enterFrameEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,advanceTime,(void))

 ::starling::display::DisplayObject Stage_obj::hitTest( ::openfl::geom::Point localPoint){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_101_hitTest)
HXLINE( 102)		bool _hx_tmp;
HXDLIN( 102)		if (!(!(this->get_visible()))) {
HXLINE( 102)			_hx_tmp = !(this->get_touchable());
            		}
            		else {
HXLINE( 102)			_hx_tmp = true;
            		}
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 102)			return null();
            		}
HXLINE( 105)		bool _hx_tmp1;
HXDLIN( 105)		bool _hx_tmp2;
HXDLIN( 105)		bool _hx_tmp3;
HXDLIN( 105)		if (!((localPoint->x < (int)0))) {
HXLINE( 105)			_hx_tmp3 = (localPoint->x > this->_hx___width);
            		}
            		else {
HXLINE( 105)			_hx_tmp3 = true;
            		}
HXDLIN( 105)		if (!(_hx_tmp3)) {
HXLINE( 105)			_hx_tmp2 = (localPoint->y < (int)0);
            		}
            		else {
HXLINE( 105)			_hx_tmp2 = true;
            		}
HXDLIN( 105)		if (!(_hx_tmp2)) {
HXLINE( 105)			_hx_tmp1 = (localPoint->y > this->_hx___height);
            		}
            		else {
HXLINE( 105)			_hx_tmp1 = true;
            		}
HXDLIN( 105)		if (_hx_tmp1) {
HXLINE( 107)			return null();
            		}
HXLINE( 110)		 ::starling::display::DisplayObject target = this->super::hitTest(localPoint);
HXLINE( 111)		if (hx::IsNotNull( target )) {
HXLINE( 111)			return target;
            		}
            		else {
HXLINE( 111)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXDLIN( 111)		return null();
            	}


 ::openfl::geom::Rectangle Stage_obj::getStageBounds( ::starling::display::DisplayObject targetSpace, ::openfl::geom::Rectangle out){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_117_getStageBounds)
HXLINE( 118)		if (hx::IsNull( out )) {
HXLINE( 118)			out =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 120)		out->setTo((int)0,(int)0,this->_hx___width,this->_hx___height);
HXLINE( 121)		this->getTransformationMatrix(targetSpace,::starling::display::Stage_obj::sMatrix);
HXLINE( 123)		return ::starling::utils::RectangleUtil_obj::getBounds(out,::starling::display::Stage_obj::sMatrix,out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,getStageBounds,return )

 ::openfl::geom::Vector3D Stage_obj::getCameraPosition( ::starling::display::DisplayObject space, ::openfl::geom::Vector3D out){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_134_getCameraPosition)
HXLINE( 135)		this->getTransformationMatrix3D(space,::starling::display::Stage_obj::sMatrix3D);
HXLINE( 137)		 ::openfl::geom::Matrix3D _hx_tmp = ::starling::display::Stage_obj::sMatrix3D;
HXLINE( 138)		Float _hx_tmp1 = (((Float)this->_hx___width / (Float)(int)2) + this->_hx___projectionOffset->x);
HXDLIN( 138)		Float _hx_tmp2 = (((Float)this->_hx___height / (Float)(int)2) + this->_hx___projectionOffset->y);
HXLINE( 137)		return ::starling::utils::MatrixUtil_obj::transformCoords3D(_hx_tmp,_hx_tmp1,_hx_tmp2,-(this->get_focalLength()),out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Stage_obj,getCameraPosition,return )

void Stage_obj::addEnterFrameListener( ::starling::display::DisplayObject listener){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_146_addEnterFrameListener)
HXLINE( 147)		int index = ::openfl::_Vector::IVector_obj::indexOf(this->_hx___enterFrameListeners->data,listener,(int)0);
HXLINE( 148)		if ((index < (int)0)) {
HXLINE( 148)			 ::openfl::_Vector::AbstractVector this1 = this->_hx___enterFrameListeners;
HXDLIN( 148)			int index1 = ::openfl::_Vector::IVector_obj::get_length(this->_hx___enterFrameListeners->data);
HXDLIN( 148)			::openfl::_Vector::IVector_obj::set(this1->data,index1,listener);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,addEnterFrameListener,(void))

void Stage_obj::removeEnterFrameListener( ::starling::display::DisplayObject listener){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_153_removeEnterFrameListener)
HXLINE( 154)		int index = ::openfl::_Vector::IVector_obj::indexOf(this->_hx___enterFrameListeners->data,listener,(int)0);
HXLINE( 155)		if ((index >= (int)0)) {
HXLINE( 155)			::openfl::_Vector::IVector_obj::removeAt(this->_hx___enterFrameListeners->data,index);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,removeEnterFrameListener,(void))

void Stage_obj::_hx___getChildEventListeners( ::starling::display::DisplayObject object,::String eventType, ::openfl::_Vector::AbstractVector listeners){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_162___getChildEventListeners)
HXDLIN( 162)		bool _hx_tmp;
HXDLIN( 162)		if ((eventType == HX_("enterFrame",f5,03,50,02))) {
HXDLIN( 162)			_hx_tmp = hx::IsEq( object,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXDLIN( 162)			_hx_tmp = false;
            		}
HXDLIN( 162)		if (_hx_tmp) {
HXLINE( 164)			int length = ::openfl::_Vector::IVector_obj::get_length(this->_hx___enterFrameListeners->data);
HXLINE( 165)			{
HXLINE( 165)				int _g1 = (int)0;
HXDLIN( 165)				int _g = length;
HXDLIN( 165)				while((_g1 < _g)){
HXLINE( 165)					_g1 = (_g1 + (int)1);
HXDLIN( 165)					int i = (_g1 - (int)1);
HXLINE( 166)					{
HXLINE( 166)						int index = ::openfl::_Vector::IVector_obj::get_length(listeners->data);
HXDLIN( 166)						 ::starling::display::DisplayObject value = ( ( ::starling::display::DisplayObject)(::openfl::_Vector::IVector_obj::get(this->_hx___enterFrameListeners->data,i)) );
HXDLIN( 166)						::openfl::_Vector::IVector_obj::set(listeners->data,index,value);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 169)			this->super::_hx___getChildEventListeners(object,eventType,listeners);
            		}
            	}


Float Stage_obj::set_width(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_177_set_width)
HXDLIN( 177)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot set width of stage",ea,25,bd,c6)));
HXDLIN( 177)		return ((Float)0.);
            	}


Float Stage_obj::set_height(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_184_set_height)
HXDLIN( 184)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot set height of stage",53,a4,73,0a)));
HXDLIN( 184)		return ((Float)0.);
            	}


Float Stage_obj::set_x(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_191_set_x)
HXDLIN( 191)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot set x-coordinate of stage",cd,e9,44,20)));
HXDLIN( 191)		return ((Float)0.);
            	}


Float Stage_obj::set_y(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_198_set_y)
HXDLIN( 198)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot set y-coordinate of stage",4e,50,f0,51)));
HXDLIN( 198)		return ((Float)0.);
            	}


Float Stage_obj::set_scaleX(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_205_set_scaleX)
HXDLIN( 205)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot scale stage",2b,68,8e,4c)));
HXDLIN( 205)		return ((Float)0.);
            	}


Float Stage_obj::set_scaleY(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_212_set_scaleY)
HXDLIN( 212)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot scale stage",2b,68,8e,4c)));
HXDLIN( 212)		return ((Float)0.);
            	}


Float Stage_obj::set_rotation(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_219_set_rotation)
HXDLIN( 219)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot rotate stage",56,66,a4,86)));
HXDLIN( 219)		return ((Float)0.);
            	}


Float Stage_obj::set_skewX(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_226_set_skewX)
HXDLIN( 226)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot skew stage",05,6f,dc,4f)));
HXDLIN( 226)		return ((Float)0.);
            	}


Float Stage_obj::set_skewY(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_233_set_skewY)
HXDLIN( 233)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot skew stage",05,6f,dc,4f)));
HXDLIN( 233)		return ((Float)0.);
            	}


 ::starling::filters::FragmentFilter Stage_obj::set_filter( ::starling::filters::FragmentFilter value){
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_240_set_filter)
HXDLIN( 240)		HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot add filter to stage. Add it to 'root' instead!",fb,95,ab,80)));
HXDLIN( 240)		return null();
            	}


int Stage_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_246_get_color)
HXDLIN( 246)		return this->_hx___color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_color,return )

int Stage_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_247_set_color)
HXDLIN( 247)		return (this->_hx___color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_color,return )

int Stage_obj::get_stageWidth(){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_252_get_stageWidth)
HXDLIN( 252)		return this->_hx___width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_stageWidth,return )

int Stage_obj::set_stageWidth(int value){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_254_set_stageWidth)
HXLINE( 255)		this->_hx___width = value;
HXLINE( 256)		this->setRequiresRedraw();
HXLINE( 257)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_stageWidth,return )

int Stage_obj::get_stageHeight(){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_263_get_stageHeight)
HXDLIN( 263)		return this->_hx___height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_stageHeight,return )

int Stage_obj::set_stageHeight(int value){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_265_set_stageHeight)
HXLINE( 266)		this->_hx___height = value;
HXLINE( 267)		this->setRequiresRedraw();
HXLINE( 268)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_stageHeight,return )

 ::starling::core::Starling Stage_obj::get_starling(){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_274_get_starling)
HXLINE( 275)		 ::openfl::_Vector::AbstractVector instances = ::starling::core::Starling_obj::get_all();
HXLINE( 276)		int numInstances = ::openfl::_Vector::IVector_obj::get_length(instances->data);
HXLINE( 278)		{
HXLINE( 278)			int _g1 = (int)0;
HXDLIN( 278)			int _g = numInstances;
HXDLIN( 278)			while((_g1 < _g)){
HXLINE( 278)				_g1 = (_g1 + (int)1);
HXDLIN( 278)				int i = (_g1 - (int)1);
HXLINE( 279)				if (hx::IsEq( ( ( ::starling::core::Starling)(::openfl::_Vector::IVector_obj::get(instances->data,i)) )->get_stage(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 279)					return ( ( ::starling::core::Starling)(::openfl::_Vector::IVector_obj::get(instances->data,i)) );
            				}
            			}
            		}
HXLINE( 281)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_starling,return )

Float Stage_obj::get_focalLength(){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_289_get_focalLength)
HXDLIN( 289)		int _hx_tmp = this->_hx___width;
HXDLIN( 289)		return ((Float)_hx_tmp / (Float)((int)2 * ::Math_obj::tan(((Float)this->_hx___fieldOfView / (Float)(int)2))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_focalLength,return )

Float Stage_obj::set_focalLength(Float value){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_293_set_focalLength)
HXLINE( 294)		int _hx_tmp = this->get_stageWidth();
HXDLIN( 294)		this->_hx___fieldOfView = ((int)2 * ::Math_obj::atan(((Float)_hx_tmp / (Float)((int)2 * value))));
HXLINE( 295)		this->setRequiresRedraw();
HXLINE( 296)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_focalLength,return )

Float Stage_obj::get_fieldOfView(){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_310_get_fieldOfView)
HXDLIN( 310)		return this->_hx___fieldOfView;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_fieldOfView,return )

Float Stage_obj::set_fieldOfView(Float value){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_312_set_fieldOfView)
HXLINE( 313)		this->_hx___fieldOfView = value;
HXLINE( 314)		this->setRequiresRedraw();
HXLINE( 315)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_fieldOfView,return )

 ::openfl::geom::Point Stage_obj::get_projectionOffset(){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_323_get_projectionOffset)
HXDLIN( 323)		return this->_hx___projectionOffset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_projectionOffset,return )

 ::openfl::geom::Point Stage_obj::set_projectionOffset( ::openfl::geom::Point value){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_325_set_projectionOffset)
HXLINE( 326)		this->_hx___projectionOffset->setTo(value->x,value->y);
HXLINE( 327)		this->setRequiresRedraw();
HXLINE( 328)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Stage_obj,set_projectionOffset,return )

 ::openfl::geom::Vector3D Stage_obj::get_cameraPosition(){
            	HX_STACKFRAME(&_hx_pos_9fcdad1eaead5847_341_get_cameraPosition)
HXDLIN( 341)		return this->getCameraPosition(null(),this->_hx___cameraPosition);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stage_obj,get_cameraPosition,return )

 ::openfl::geom::Matrix Stage_obj::sMatrix;

 ::openfl::geom::Matrix3D Stage_obj::sMatrix3D;


hx::ObjectPtr< Stage_obj > Stage_obj::__new(int width,int height,hx::Null< int >  __o_color) {
	hx::ObjectPtr< Stage_obj > __this = new Stage_obj();
	__this->__construct(width,height,__o_color);
	return __this;
}

hx::ObjectPtr< Stage_obj > Stage_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height,hx::Null< int >  __o_color) {
	Stage_obj *__this = (Stage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Stage_obj), true, "starling.display.Stage"));
	*(void **)__this = Stage_obj::_hx_vtable;
	__this->__construct(width,height,__o_color);
	return __this;
}

Stage_obj::Stage_obj()
{
}

void Stage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Stage);
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___color,"__color");
	HX_MARK_MEMBER_NAME(_hx___fieldOfView,"__fieldOfView");
	HX_MARK_MEMBER_NAME(_hx___projectionOffset,"__projectionOffset");
	HX_MARK_MEMBER_NAME(_hx___cameraPosition,"__cameraPosition");
	HX_MARK_MEMBER_NAME(_hx___enterFrameEvent,"__enterFrameEvent");
	HX_MARK_MEMBER_NAME(_hx___enterFrameListeners,"__enterFrameListeners");
	 ::starling::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Stage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___color,"__color");
	HX_VISIT_MEMBER_NAME(_hx___fieldOfView,"__fieldOfView");
	HX_VISIT_MEMBER_NAME(_hx___projectionOffset,"__projectionOffset");
	HX_VISIT_MEMBER_NAME(_hx___cameraPosition,"__cameraPosition");
	HX_VISIT_MEMBER_NAME(_hx___enterFrameEvent,"__enterFrameEvent");
	HX_VISIT_MEMBER_NAME(_hx___enterFrameListeners,"__enterFrameListeners");
	 ::starling::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Stage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn() ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"__color") ) { return hx::Val( _hx___color ); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"starling") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_starling() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skewX") ) { return hx::Val( set_skewX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skewY") ) { return hx::Val( set_skewY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_filter") ) { return hx::Val( set_filter_dyn() ); }
		if (HX_FIELD_EQ(inName,"stageWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stageWidth() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"advanceTime") ) { return hx::Val( advanceTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"stageHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stageHeight() ); }
		if (HX_FIELD_EQ(inName,"focalLength") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_focalLength() ); }
		if (HX_FIELD_EQ(inName,"fieldOfView") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_fieldOfView() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_starling") ) { return hx::Val( get_starling_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fieldOfView") ) { return hx::Val( _hx___fieldOfView ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getStageBounds") ) { return hx::Val( getStageBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stageWidth") ) { return hx::Val( get_stageWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stageWidth") ) { return hx::Val( set_stageWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"cameraPosition") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_cameraPosition() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_stageHeight") ) { return hx::Val( get_stageHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_stageHeight") ) { return hx::Val( set_stageHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_focalLength") ) { return hx::Val( get_focalLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_focalLength") ) { return hx::Val( set_focalLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_fieldOfView") ) { return hx::Val( get_fieldOfView_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_fieldOfView") ) { return hx::Val( set_fieldOfView_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__cameraPosition") ) { return hx::Val( _hx___cameraPosition ); }
		if (HX_FIELD_EQ(inName,"projectionOffset") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_projectionOffset() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__enterFrameEvent") ) { return hx::Val( _hx___enterFrameEvent ); }
		if (HX_FIELD_EQ(inName,"getCameraPosition") ) { return hx::Val( getCameraPosition_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__projectionOffset") ) { return hx::Val( _hx___projectionOffset ); }
		if (HX_FIELD_EQ(inName,"get_cameraPosition") ) { return hx::Val( get_cameraPosition_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_projectionOffset") ) { return hx::Val( get_projectionOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_projectionOffset") ) { return hx::Val( set_projectionOffset_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__enterFrameListeners") ) { return hx::Val( _hx___enterFrameListeners ); }
		if (HX_FIELD_EQ(inName,"addEnterFrameListener") ) { return hx::Val( addEnterFrameListener_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"removeEnterFrameListener") ) { return hx::Val( removeEnterFrameListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getChildEventListeners") ) { return hx::Val( _hx___getChildEventListeners_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Stage_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { outValue = ( sMatrix ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { outValue = ( sMatrix3D ); return true; }
	}
	return false;
}

hx::Val Stage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__color") ) { _hx___color=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stageWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_stageWidth(inValue.Cast< int >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stageHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_stageHeight(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"focalLength") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_focalLength(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"fieldOfView") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fieldOfView(inValue.Cast< Float >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__fieldOfView") ) { _hx___fieldOfView=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__cameraPosition") ) { _hx___cameraPosition=inValue.Cast<  ::openfl::geom::Vector3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"projectionOffset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_projectionOffset(inValue.Cast<  ::openfl::geom::Point >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__enterFrameEvent") ) { _hx___enterFrameEvent=inValue.Cast<  ::starling::events::EnterFrameEvent >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__projectionOffset") ) { _hx___projectionOffset=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__enterFrameListeners") ) { _hx___enterFrameListeners=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Stage_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { sMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { sMatrix3D=ioValue.Cast<  ::openfl::geom::Matrix3D >(); return true; }
	}
	return false;
}

void Stage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"));
	outFields->push(HX_HCSTRING("__fieldOfView","\x56","\x28","\xc4","\xa2"));
	outFields->push(HX_HCSTRING("__projectionOffset","\xa2","\x7c","\xc3","\xe0"));
	outFields->push(HX_HCSTRING("__cameraPosition","\x8e","\xdb","\xc6","\xf4"));
	outFields->push(HX_HCSTRING("__enterFrameEvent","\xc5","\xec","\x80","\x2f"));
	outFields->push(HX_HCSTRING("__enterFrameListeners","\xaa","\xbb","\xb1","\x1d"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("stageWidth","\x68","\x0a","\xb3","\x1d"));
	outFields->push(HX_HCSTRING("stageHeight","\x45","\x89","\x45","\x95"));
	outFields->push(HX_HCSTRING("starling","\xc8","\x4c","\x62","\x3d"));
	outFields->push(HX_HCSTRING("focalLength","\x2b","\xb1","\x0b","\x57"));
	outFields->push(HX_HCSTRING("fieldOfView","\x76","\xe7","\x4b","\x5a"));
	outFields->push(HX_HCSTRING("projectionOffset","\x82","\xe9","\x32","\x75"));
	outFields->push(HX_HCSTRING("cameraPosition","\x6e","\x50","\x87","\xc0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Stage_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsInt,(int)offsetof(Stage_obj,_hx___color),HX_HCSTRING("__color","\x43","\xca","\xba","\xb4")},
	{hx::fsFloat,(int)offsetof(Stage_obj,_hx___fieldOfView),HX_HCSTRING("__fieldOfView","\x56","\x28","\xc4","\xa2")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(Stage_obj,_hx___projectionOffset),HX_HCSTRING("__projectionOffset","\xa2","\x7c","\xc3","\xe0")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(int)offsetof(Stage_obj,_hx___cameraPosition),HX_HCSTRING("__cameraPosition","\x8e","\xdb","\xc6","\xf4")},
	{hx::fsObject /*::starling::events::EnterFrameEvent*/ ,(int)offsetof(Stage_obj,_hx___enterFrameEvent),HX_HCSTRING("__enterFrameEvent","\xc5","\xec","\x80","\x2f")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Stage_obj,_hx___enterFrameListeners),HX_HCSTRING("__enterFrameListeners","\xaa","\xbb","\xb1","\x1d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Stage_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Stage_obj::sMatrix,HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e")},
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(void *) &Stage_obj::sMatrix3D,HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Stage_obj_sMemberFields[] = {
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"),
	HX_HCSTRING("__fieldOfView","\x56","\x28","\xc4","\xa2"),
	HX_HCSTRING("__projectionOffset","\xa2","\x7c","\xc3","\xe0"),
	HX_HCSTRING("__cameraPosition","\x8e","\xdb","\xc6","\xf4"),
	HX_HCSTRING("__enterFrameEvent","\xc5","\xec","\x80","\x2f"),
	HX_HCSTRING("__enterFrameListeners","\xaa","\xbb","\xb1","\x1d"),
	HX_HCSTRING("advanceTime","\xaf","\x69","\x9d","\xab"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("getStageBounds","\xdd","\x5a","\xb5","\x80"),
	HX_HCSTRING("getCameraPosition","\xa4","\xff","\xfa","\x32"),
	HX_HCSTRING("addEnterFrameListener","\x0a","\x70","\x58","\x17"),
	HX_HCSTRING("removeEnterFrameListener","\xed","\x5e","\x53","\x63"),
	HX_HCSTRING("__getChildEventListeners","\xeb","\x18","\x75","\x59"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("set_skewX","\x71","\xde","\x15","\xa5"),
	HX_HCSTRING("set_skewY","\x72","\xde","\x15","\xa5"),
	HX_HCSTRING("set_filter","\xf5","\x2d","\x3a","\x79"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_stageWidth","\xb1","\x92","\xa8","\x93"),
	HX_HCSTRING("set_stageWidth","\x25","\x7b","\xc8","\xb3"),
	HX_HCSTRING("get_stageHeight","\xdc","\x40","\x27","\x56"),
	HX_HCSTRING("set_stageHeight","\xe8","\xbd","\xf2","\x51"),
	HX_HCSTRING("get_starling","\xd1","\x00","\x7c","\xf2"),
	HX_HCSTRING("get_focalLength","\xc2","\x68","\xed","\x17"),
	HX_HCSTRING("set_focalLength","\xce","\xe5","\xb8","\x13"),
	HX_HCSTRING("get_fieldOfView","\x0d","\x9f","\x2d","\x1b"),
	HX_HCSTRING("set_fieldOfView","\x19","\x1c","\xf9","\x16"),
	HX_HCSTRING("get_projectionOffset","\x8b","\x4e","\x9d","\x93"),
	HX_HCSTRING("set_projectionOffset","\xff","\x05","\x55","\x60"),
	HX_HCSTRING("get_cameraPosition","\x37","\x31","\x21","\x5c"),
	::String(null()) };

static void Stage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Stage_obj::sMatrix,"sMatrix");
	HX_MARK_MEMBER_NAME(Stage_obj::sMatrix3D,"sMatrix3D");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Stage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Stage_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Stage_obj::sMatrix,"sMatrix");
	HX_VISIT_MEMBER_NAME(Stage_obj::sMatrix3D,"sMatrix3D");
};

#endif

hx::Class Stage_obj::__mClass;

static ::String Stage_obj_sStaticFields[] = {
	HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e"),
	HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03"),
	::String(null())
};

void Stage_obj::__register()
{
	hx::Object *dummy = new Stage_obj;
	Stage_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.display.Stage","\x4c","\xd1","\x7a","\x40");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Stage_obj::__GetStatic;
	__mClass->mSetStaticField = &Stage_obj::__SetStatic;
	__mClass->mMarkFunc = Stage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Stage_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Stage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Stage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Stage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Stage_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_73_boot)
HXDLIN(  73)		sMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_9fcdad1eaead5847_74_boot)
HXDLIN(  74)		sMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            	}
}

} // end namespace starling
} // end namespace display
