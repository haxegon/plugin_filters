// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_starling_geom_ImmutablePolygon
#include <starling/geom/ImmutablePolygon.h>
#endif
#ifndef INCLUDED_starling_geom_Polygon
#include <starling/geom/Polygon.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89ac72ae70d824a3_13_new,"starling.geom.ImmutablePolygon","new",0xde5e4736,"starling.geom.ImmutablePolygon.new","starling/geom/ImmutablePolygon.hx",13,0x2380f09a)
HX_LOCAL_STACK_FRAME(_hx_pos_89ac72ae70d824a3_20_addVertices,"starling.geom.ImmutablePolygon","addVertices",0x2fb03410,"starling.geom.ImmutablePolygon.addVertices","starling/geom/ImmutablePolygon.hx",20,0x2380f09a)
HX_LOCAL_STACK_FRAME(_hx_pos_89ac72ae70d824a3_26_setVertex,"starling.geom.ImmutablePolygon","setVertex",0xaa278bfc,"starling.geom.ImmutablePolygon.setVertex","starling/geom/ImmutablePolygon.hx",26,0x2380f09a)
HX_LOCAL_STACK_FRAME(_hx_pos_89ac72ae70d824a3_32_reverse,"starling.geom.ImmutablePolygon","reverse",0x4639d2f8,"starling.geom.ImmutablePolygon.reverse","starling/geom/ImmutablePolygon.hx",32,0x2380f09a)
HX_LOCAL_STACK_FRAME(_hx_pos_89ac72ae70d824a3_37_set_numVertices,"starling.geom.ImmutablePolygon","set_numVertices",0xe0a5a4d8,"starling.geom.ImmutablePolygon.set_numVertices","starling/geom/ImmutablePolygon.hx",37,0x2380f09a)
HX_LOCAL_STACK_FRAME(_hx_pos_89ac72ae70d824a3_44_getImmutableError,"starling.geom.ImmutablePolygon","getImmutableError",0xec2514b2,"starling.geom.ImmutablePolygon.getImmutableError","starling/geom/ImmutablePolygon.hx",44,0x2380f09a)
namespace starling{
namespace geom{

void ImmutablePolygon_obj::__construct(::cpp::VirtualArray vertices){
            	HX_STACKFRAME(&_hx_pos_89ac72ae70d824a3_13_new)
HXLINE(  14)		super::__construct(vertices);
HXLINE(  15)		this->_hx___frozen = true;
            	}

Dynamic ImmutablePolygon_obj::__CreateEmpty() { return new ImmutablePolygon_obj; }

void *ImmutablePolygon_obj::_hx_vtable = 0;

Dynamic ImmutablePolygon_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImmutablePolygon_obj > _hx_result = new ImmutablePolygon_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ImmutablePolygon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x38db027c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x38db027c;
	} else {
		return inClassId==(int)0x481a82d6;
	}
}

void ImmutablePolygon_obj::addVertices(::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_89ac72ae70d824a3_20_addVertices)
HXDLIN(  20)		if (this->_hx___frozen) {
HXDLIN(  20)			HX_STACK_DO_THROW(this->getImmutableError());
            		}
            		else {
HXLINE(  21)			this->super::addVertices(args);
            		}
            	}


void ImmutablePolygon_obj::setVertex(int index,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_89ac72ae70d824a3_26_setVertex)
HXDLIN(  26)		if (this->_hx___frozen) {
HXDLIN(  26)			HX_STACK_DO_THROW(this->getImmutableError());
            		}
            		else {
HXLINE(  27)			this->super::setVertex(index,x,y);
            		}
            	}


void ImmutablePolygon_obj::reverse(){
            	HX_STACKFRAME(&_hx_pos_89ac72ae70d824a3_32_reverse)
HXDLIN(  32)		if (this->_hx___frozen) {
HXDLIN(  32)			HX_STACK_DO_THROW(this->getImmutableError());
            		}
            		else {
HXLINE(  33)			this->super::reverse();
            		}
            	}


int ImmutablePolygon_obj::set_numVertices(int value){
            	HX_STACKFRAME(&_hx_pos_89ac72ae70d824a3_37_set_numVertices)
HXLINE(  38)		if (this->_hx___frozen) {
HXLINE(  38)			HX_STACK_DO_THROW(this->getImmutableError());
            		}
            		else {
HXLINE(  39)			this->super::reverse();
            		}
HXLINE(  40)		return this->super::get_numVertices();
            	}


 ::openfl::errors::Error ImmutablePolygon_obj::getImmutableError(){
            	HX_GC_STACKFRAME(&_hx_pos_89ac72ae70d824a3_44_getImmutableError)
HXLINE(  45)		::String className = ( (::String)(::Type_obj::getClassName(::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this))).split(HX_(".",2e,00,00,00))->pop()) );
HXLINE(  46)		::String msg = (className + HX_(" cannot be modified. Call 'clone' to create a mutable copy.",0b,5e,7b,67));
HXLINE(  47)		return  ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,msg);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ImmutablePolygon_obj,getImmutableError,return )


hx::ObjectPtr< ImmutablePolygon_obj > ImmutablePolygon_obj::__new(::cpp::VirtualArray vertices) {
	hx::ObjectPtr< ImmutablePolygon_obj > __this = new ImmutablePolygon_obj();
	__this->__construct(vertices);
	return __this;
}

hx::ObjectPtr< ImmutablePolygon_obj > ImmutablePolygon_obj::__alloc(hx::Ctx *_hx_ctx,::cpp::VirtualArray vertices) {
	ImmutablePolygon_obj *__this = (ImmutablePolygon_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ImmutablePolygon_obj), true, "starling.geom.ImmutablePolygon"));
	*(void **)__this = ImmutablePolygon_obj::_hx_vtable;
	__this->__construct(vertices);
	return __this;
}

ImmutablePolygon_obj::ImmutablePolygon_obj()
{
}

hx::Val ImmutablePolygon_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__frozen") ) { return hx::Val( _hx___frozen ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setVertex") ) { return hx::Val( setVertex_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addVertices") ) { return hx::Val( addVertices_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_numVertices") ) { return hx::Val( set_numVertices_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getImmutableError") ) { return hx::Val( getImmutableError_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ImmutablePolygon_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__frozen") ) { _hx___frozen=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ImmutablePolygon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__frozen","\xc0","\xf4","\xff","\x5d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ImmutablePolygon_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(ImmutablePolygon_obj,_hx___frozen),HX_HCSTRING("__frozen","\xc0","\xf4","\xff","\x5d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ImmutablePolygon_obj_sStaticStorageInfo = 0;
#endif

static ::String ImmutablePolygon_obj_sMemberFields[] = {
	HX_HCSTRING("__frozen","\xc0","\xf4","\xff","\x5d"),
	HX_HCSTRING("addVertices","\x3a","\xf7","\x71","\x9b"),
	HX_HCSTRING("setVertex","\xa6","\x50","\xef","\x00"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("set_numVertices","\x02","\x45","\xd9","\x12"),
	HX_HCSTRING("getImmutableError","\x5c","\x93","\xa0","\xca"),
	::String(null()) };

static void ImmutablePolygon_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImmutablePolygon_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImmutablePolygon_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImmutablePolygon_obj::__mClass,"__mClass");
};

#endif

hx::Class ImmutablePolygon_obj::__mClass;

void ImmutablePolygon_obj::__register()
{
	hx::Object *dummy = new ImmutablePolygon_obj;
	ImmutablePolygon_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.geom.ImmutablePolygon","\x44","\x34","\xb9","\xf1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImmutablePolygon_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ImmutablePolygon_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ImmutablePolygon_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImmutablePolygon_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImmutablePolygon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImmutablePolygon_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace geom
