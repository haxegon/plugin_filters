// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_geom_ImmutablePolygon
#include <starling/geom/ImmutablePolygon.h>
#endif
#ifndef INCLUDED_starling_geom_Polygon
#include <starling/geom/Polygon.h>
#endif
#ifndef INCLUDED_starling_geom_Rectangle
#include <starling/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_rendering_IndexData
#include <starling/rendering/IndexData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_54e5eda48bdad362_15_new,"starling.geom.Rectangle","new",0x79404735,"starling.geom.Rectangle.new","starling/geom/Rectangle.hx",15,0x0853c23b)
HX_LOCAL_STACK_FRAME(_hx_pos_54e5eda48bdad362_25_triangulate,"starling.geom.Rectangle","triangulate",0xf7cc3901,"starling.geom.Rectangle.triangulate","starling/geom/Rectangle.hx",25,0x0853c23b)
HX_LOCAL_STACK_FRAME(_hx_pos_54e5eda48bdad362_36_contains,"starling.geom.Rectangle","contains",0x22a6ff2a,"starling.geom.Rectangle.contains","starling/geom/Rectangle.hx",36,0x0853c23b)
HX_LOCAL_STACK_FRAME(_hx_pos_54e5eda48bdad362_42_get_area,"starling.geom.Rectangle","get_area",0xb65aec21,"starling.geom.Rectangle.get_area","starling/geom/Rectangle.hx",42,0x0853c23b)
HX_LOCAL_STACK_FRAME(_hx_pos_54e5eda48bdad362_47_get_isSimple,"starling.geom.Rectangle","get_isSimple",0x20ccda50,"starling.geom.Rectangle.get_isSimple","starling/geom/Rectangle.hx",47,0x0853c23b)
HX_LOCAL_STACK_FRAME(_hx_pos_54e5eda48bdad362_52_get_isConvex,"starling.geom.Rectangle","get_isConvex",0x302c4d85,"starling.geom.Rectangle.get_isConvex","starling/geom/Rectangle.hx",52,0x0853c23b)
namespace starling{
namespace geom{

void Rectangle_obj::__construct(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_54e5eda48bdad362_15_new)
HXLINE(  16)		this->_hx___x = x;
HXLINE(  17)		this->_hx___y = y;
HXLINE(  18)		this->_hx___width = width;
HXLINE(  19)		this->_hx___height = height;
HXLINE(  21)		super::__construct(::cpp::VirtualArray_obj::__new(8)->init(0,x)->init(1,y)->init(2,(x + width))->init(3,y)->init(4,(x + width))->init(5,(y + height))->init(6,x)->init(7,(y + height)));
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x481a82d6) {
		if (inClassId<=(int)0x38db027c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x38db027c;
		} else {
			return inClassId==(int)0x481a82d6;
		}
	} else {
		return inClassId==(int)0x5683eea7;
	}
}

 ::starling::rendering::IndexData Rectangle_obj::triangulate( ::starling::rendering::IndexData indexData,hx::Null< int >  __o_offset){
int offset = __o_offset.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_54e5eda48bdad362_25_triangulate)
HXLINE(  26)		if (hx::IsNull( indexData )) {
HXLINE(  26)			indexData =  ::starling::rendering::IndexData_obj::__alloc( HX_CTX ,(int)6);
            		}
HXLINE(  28)		indexData->addTriangle(offset,(offset + (int)1),(offset + (int)3));
HXLINE(  29)		indexData->addTriangle((offset + (int)1),(offset + (int)2),(offset + (int)3));
HXLINE(  31)		return indexData;
            	}


bool Rectangle_obj::contains(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_54e5eda48bdad362_36_contains)
HXDLIN(  36)		bool _hx_tmp;
HXDLIN(  36)		bool _hx_tmp1;
HXDLIN(  36)		if ((x >= this->_hx___x)) {
HXDLIN(  36)			_hx_tmp1 = (x <= (this->_hx___x + this->_hx___width));
            		}
            		else {
HXDLIN(  36)			_hx_tmp1 = false;
            		}
HXDLIN(  36)		if (_hx_tmp1) {
HXDLIN(  36)			_hx_tmp = (y >= this->_hx___y);
            		}
            		else {
HXDLIN(  36)			_hx_tmp = false;
            		}
HXDLIN(  36)		if (_hx_tmp) {
HXLINE(  37)			return (y <= (this->_hx___y + this->_hx___height));
            		}
            		else {
HXDLIN(  36)			return false;
            		}
HXDLIN(  36)		return false;
            	}


Float Rectangle_obj::get_area(){
            	HX_STACKFRAME(&_hx_pos_54e5eda48bdad362_42_get_area)
HXDLIN(  42)		return (this->_hx___width * this->_hx___height);
            	}


bool Rectangle_obj::get_isSimple(){
            	HX_STACKFRAME(&_hx_pos_54e5eda48bdad362_47_get_isSimple)
HXDLIN(  47)		return true;
            	}


bool Rectangle_obj::get_isConvex(){
            	HX_STACKFRAME(&_hx_pos_54e5eda48bdad362_52_get_isConvex)
HXDLIN(  52)		return true;
            	}



hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new(Float x,Float y,Float width,Float height) {
	hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(x,y,width,height);
	return __this;
}

hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(hx::Ctx *_hx_ctx,Float x,Float y,Float width,Float height) {
	Rectangle_obj *__this = (Rectangle_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), true, "starling.geom.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(x,y,width,height);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

hx::Val Rectangle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__x") ) { return hx::Val( _hx___x ); }
		if (HX_FIELD_EQ(inName,"__y") ) { return hx::Val( _hx___y ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_area") ) { return hx::Val( get_area_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"triangulate") ) { return hx::Val( triangulate_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_isSimple") ) { return hx::Val( get_isSimple_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isConvex") ) { return hx::Val( get_isConvex_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Rectangle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__x") ) { _hx___x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__y") ) { _hx___y=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__x","\x58","\x69","\x48","\x00"));
	outFields->push(HX_HCSTRING("__y","\x59","\x69","\x48","\x00"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Rectangle_obj,_hx___x),HX_HCSTRING("__x","\x58","\x69","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,_hx___y),HX_HCSTRING("__y","\x59","\x69","\x48","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Rectangle_obj_sStaticStorageInfo = 0;
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_HCSTRING("__x","\x58","\x69","\x48","\x00"),
	HX_HCSTRING("__y","\x59","\x69","\x48","\x00"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("triangulate","\x2c","\x65","\x9d","\xe9"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("get_area","\x16","\x47","\x2f","\xc0"),
	HX_HCSTRING("get_isSimple","\xc5","\x53","\x02","\xc6"),
	HX_HCSTRING("get_isConvex","\xfa","\xc6","\x61","\xd5"),
	::String(null()) };

static void Rectangle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rectangle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
};

#endif

hx::Class Rectangle_obj::__mClass;

void Rectangle_obj::__register()
{
	hx::Object *dummy = new Rectangle_obj;
	Rectangle_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.geom.Rectangle","\xc3","\x88","\xfd","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rectangle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rectangle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace geom
