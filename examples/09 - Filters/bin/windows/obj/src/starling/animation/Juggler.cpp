// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_starling_animation_DelayedCall
#include <starling/animation/DelayedCall.h>
#endif
#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
#ifndef INCLUDED_starling_animation_Juggler
#include <starling/animation/Juggler.h>
#endif
#ifndef INCLUDED_starling_animation_Tween
#include <starling/animation/Tween.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_333b763a25aab571_63_new,"starling.animation.Juggler","new",0xf244d850,"starling.animation.Juggler.new","starling/animation/Juggler.hx",63,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_77_add,"starling.animation.Juggler","add",0xf23afa11,"starling.animation.Juggler.add","starling/animation/Juggler.hx",77,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_82_addWithID,"starling.animation.Juggler","addWithID",0x9dba9452,"starling.animation.Juggler.addWithID","starling/animation/Juggler.hx",82,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_98_contains,"starling.animation.Juggler","contains",0x06178c2f,"starling.animation.Juggler.contains","starling/animation/Juggler.hx",98,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_107_remove,"starling.animation.Juggler","remove",0x5e592a54,"starling.animation.Juggler.remove","starling/animation/Juggler.hx",107,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_137_removeByID,"starling.animation.Juggler","removeByID",0x5cdb09e6,"starling.animation.Juggler.removeByID","starling/animation/Juggler.hx",137,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_158_removeTweens,"starling.animation.Juggler","removeTweens",0xaf58891c,"starling.animation.Juggler.removeTweens","starling/animation/Juggler.hx",158,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_177_removeDelayedCalls,"starling.animation.Juggler","removeDelayedCalls",0x13dee487,"starling.animation.Juggler.removeDelayedCalls","starling/animation/Juggler.hx",177,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_197_containsTweens,"starling.animation.Juggler","containsTweens",0xee724137,"starling.animation.Juggler.containsTweens","starling/animation/Juggler.hx",197,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_215_containsDelayedCalls,"starling.animation.Juggler","containsDelayedCalls",0xfbd622e2,"starling.animation.Juggler.containsDelayedCalls","starling/animation/Juggler.hx",215,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_233_purge,"starling.animation.Juggler","purge",0xe0c4ae1b,"starling.animation.Juggler.purge","starling/animation/Juggler.hx",233,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_260_delayCall,"starling.animation.Juggler","delayCall",0xb1ff35b1,"starling.animation.Juggler.delayCall","starling/animation/Juggler.hx",260,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_276_repeatCall,"starling.animation.Juggler","repeatCall",0xa6b6fba9,"starling.animation.Juggler.repeatCall","starling/animation/Juggler.hx",276,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_288_onPooledDelayedCallComplete,"starling.animation.Juggler","onPooledDelayedCallComplete",0xae741e8f,"starling.animation.Juggler.onPooledDelayedCallComplete","starling/animation/Juggler.hx",288,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_324_tween,"starling.animation.Juggler","tween",0x2fa78e5b,"starling.animation.Juggler.tween","starling/animation/Juggler.hx",324,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_350_onPooledTweenComplete,"starling.animation.Juggler","onPooledTweenComplete",0x387c731a,"starling.animation.Juggler.onPooledTweenComplete","starling/animation/Juggler.hx",350,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_355_advanceTime,"starling.animation.Juggler","advanceTime",0xd2bfe19f,"starling.animation.Juggler.advanceTime","starling/animation/Juggler.hx",355,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_399_onRemove,"starling.animation.Juggler","onRemove",0xbdd1c4d3,"starling.animation.Juggler.onRemove","starling/animation/Juggler.hx",399,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_414_get_elapsedTime,"starling.animation.Juggler","get_elapsedTime",0xc70445f0,"starling.animation.Juggler.get_elapsedTime","starling/animation/Juggler.hx",414,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_420_get_timeScale,"starling.animation.Juggler","get_timeScale",0xfdc7cb04,"starling.animation.Juggler.get_timeScale","starling/animation/Juggler.hx",420,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_421_set_timeScale,"starling.animation.Juggler","set_timeScale",0x42cdad10,"starling.animation.Juggler.set_timeScale","starling/animation/Juggler.hx",421,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_425_get_objects,"starling.animation.Juggler","get_objects",0x2f6c40db,"starling.animation.Juggler.get_objects","starling/animation/Juggler.hx",425,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_410_getNextID,"starling.animation.Juggler","getNextID",0x7dca4cb4,"starling.animation.Juggler.getNextID","starling/animation/Juggler.hx",410,0x735672e2)
HX_LOCAL_STACK_FRAME(_hx_pos_333b763a25aab571_58_boot,"starling.animation.Juggler","boot",0x02116e42,"starling.animation.Juggler.boot","starling/animation/Juggler.hx",58,0x735672e2)
namespace starling{
namespace animation{

void Juggler_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_333b763a25aab571_63_new)
HXLINE(  64)		this->_hx___elapsedTime = (int)0;
HXLINE(  65)		this->_hx___timeScale = ((Float)1.0);
HXLINE(  66)		int length = null();
HXDLIN(  66)		bool fixed = null();
HXDLIN(  66)		this->_hx___objects =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE(  67)		this->_hx___objectIDs =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}

Dynamic Juggler_obj::__CreateEmpty() { return new Juggler_obj; }

void *Juggler_obj::_hx_vtable = 0;

Dynamic Juggler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Juggler_obj > _hx_result = new Juggler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Juggler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x579d8a32;
}

static ::starling::animation::IAnimatable_obj _hx_starling_animation_Juggler__hx_starling_animation_IAnimatable= {
	( void (hx::Object::*)(Float))&::starling::animation::Juggler_obj::advanceTime,
};

void *Juggler_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9e9125cb: return &_hx_starling_animation_Juggler__hx_starling_animation_IAnimatable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int Juggler_obj::add(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_77_add)
HXDLIN(  77)		return this->addWithID(object,::starling::animation::Juggler_obj::getNextID());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,add,return )

int Juggler_obj::addWithID(::Dynamic object,int objectID){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_82_addWithID)
HXDLIN(  82)		bool _hx_tmp;
HXDLIN(  82)		if (hx::IsNotNull( object )) {
HXDLIN(  82)			_hx_tmp = !(this->_hx___objectIDs->exists(object));
            		}
            		else {
HXDLIN(  82)			_hx_tmp = false;
            		}
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  84)			 ::starling::events::EventDispatcher dispatcher;
HXDLIN(  84)			if (::Std_obj::is(object,hx::ClassOf< ::starling::events::EventDispatcher >())) {
HXLINE(  84)				dispatcher = ( ( ::starling::events::EventDispatcher)(object) );
            			}
            			else {
HXLINE(  84)				dispatcher = null();
            			}
HXLINE(  85)			if (hx::IsNotNull( dispatcher )) {
HXLINE(  85)				dispatcher->addEventListener(HX_("removeFro__juggler",4f,62,71,55),this->onRemove_dyn());
            			}
HXLINE(  87)			{
HXLINE(  87)				 ::openfl::_Vector::AbstractVector this1 = this->_hx___objects;
HXDLIN(  87)				int index = ::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data);
HXDLIN(  87)				::openfl::_Vector::IVector_obj::set(this1->data,index,object);
            			}
HXLINE(  88)			this->_hx___objectIDs->set(object,objectID);
HXLINE(  90)			return objectID;
            		}
            		else {
HXLINE(  92)			return (int)0;
            		}
HXLINE(  82)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Juggler_obj,addWithID,return )

bool Juggler_obj::contains(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_98_contains)
HXDLIN(  98)		return this->_hx___objectIDs->exists(object);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,contains,return )

int Juggler_obj::remove(::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_107_remove)
HXLINE( 108)		int objectID = (int)0;
HXLINE( 110)		bool _hx_tmp;
HXDLIN( 110)		if (hx::IsNotNull( object )) {
HXLINE( 110)			_hx_tmp = this->_hx___objectIDs->exists(object);
            		}
            		else {
HXLINE( 110)			_hx_tmp = false;
            		}
HXDLIN( 110)		if (_hx_tmp) {
HXLINE( 112)			 ::starling::events::EventDispatcher dispatcher;
HXDLIN( 112)			if (::Std_obj::is(object,hx::ClassOf< ::starling::events::EventDispatcher >())) {
HXLINE( 112)				dispatcher = ( ( ::starling::events::EventDispatcher)(object) );
            			}
            			else {
HXLINE( 112)				dispatcher = null();
            			}
HXLINE( 113)			if (hx::IsNotNull( dispatcher )) {
HXLINE( 113)				dispatcher->removeEventListener(HX_("removeFro__juggler",4f,62,71,55),this->onRemove_dyn());
            			}
HXLINE( 115)			int index = ::openfl::_Vector::IVector_obj::indexOf(this->_hx___objects->data,object,(int)0);
HXLINE( 116)			::openfl::_Vector::IVector_obj::set(this->_hx___objects->data,index,null());
HXLINE( 118)			objectID = ( (int)(this->_hx___objectIDs->get(object)) );
HXLINE( 119)			this->_hx___objectIDs->remove(object);
            		}
HXLINE( 122)		return objectID;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,remove,return )

int Juggler_obj::removeByID(int objectID){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_137_removeByID)
HXLINE( 138)		::Dynamic object;
HXLINE( 139)		int i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data) - (int)1);
HXLINE( 140)		while((i >= (int)0)){
HXLINE( 142)			object = ::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i);
HXLINE( 144)			if ((( (int)(this->_hx___objectIDs->get(object)) ) == objectID)) {
HXLINE( 146)				this->remove(object);
HXLINE( 147)				return objectID;
            			}
HXLINE( 150)			i = (i - (int)1);
            		}
HXLINE( 153)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,removeByID,return )

void Juggler_obj::removeTweens( ::Dynamic target){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_158_removeTweens)
HXLINE( 159)		if (hx::IsNull( target )) {
HXLINE( 159)			return;
            		}
HXLINE( 161)		int i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data) - (int)1);
HXLINE( 162)		while((i >= (int)0)){
HXLINE( 164)			 ::starling::animation::Tween tween;
HXDLIN( 164)			if (::Std_obj::is(::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i),hx::ClassOf< ::starling::animation::Tween >())) {
HXLINE( 164)				tween = ( ( ::starling::animation::Tween)(::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i)) );
            			}
            			else {
HXLINE( 164)				tween = null();
            			}
HXLINE( 165)			bool _hx_tmp;
HXDLIN( 165)			if (hx::IsNotNull( tween )) {
HXLINE( 165)				_hx_tmp = hx::IsEq( tween->get_target(),target );
            			}
            			else {
HXLINE( 165)				_hx_tmp = false;
            			}
HXDLIN( 165)			if (_hx_tmp) {
HXLINE( 167)				tween->removeEventListener(HX_("removeFro__juggler",4f,62,71,55),this->onRemove_dyn());
HXLINE( 168)				::openfl::_Vector::IVector_obj::set(this->_hx___objects->data,i,null());
HXLINE( 169)				this->_hx___objectIDs->remove(tween);
            			}
HXLINE( 171)			i = (i - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,removeTweens,(void))

void Juggler_obj::removeDelayedCalls( ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_177_removeDelayedCalls)
HXLINE( 178)		if (hx::IsNull( callback )) {
HXLINE( 178)			return;
            		}
HXLINE( 180)		 ::starling::animation::DelayedCall delayedCall;
HXLINE( 181)		int i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data) - (int)1);
HXLINE( 182)		while((i >= (int)0)){
HXLINE( 184)			if (::Std_obj::is(::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i),hx::ClassOf< ::starling::animation::DelayedCall >())) {
HXLINE( 184)				delayedCall = ( ( ::starling::animation::DelayedCall)(::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i)) );
            			}
            			else {
HXLINE( 184)				delayedCall = null();
            			}
HXLINE( 185)			bool _hx_tmp;
HXDLIN( 185)			if (hx::IsNotNull( delayedCall )) {
HXLINE( 185)				_hx_tmp = hx::IsEq( delayedCall->_hx___callback,callback );
            			}
            			else {
HXLINE( 185)				_hx_tmp = false;
            			}
HXDLIN( 185)			if (_hx_tmp) {
HXLINE( 187)				delayedCall->removeEventListener(HX_("removeFro__juggler",4f,62,71,55),this->onRemove_dyn());
HXLINE( 188)				::openfl::_Vector::IVector_obj::set(this->_hx___objects->data,i,null());
HXLINE( 189)				this->_hx___objectIDs->remove(delayedCall);
            			}
HXLINE( 191)			i = (i - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,removeDelayedCalls,(void))

bool Juggler_obj::containsTweens( ::Dynamic target){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_197_containsTweens)
HXLINE( 198)		if (hx::IsNull( target )) {
HXLINE( 200)			 ::starling::animation::Tween tween;
HXLINE( 201)			int i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data) - (int)1);
HXLINE( 202)			while((i >= (int)0)){
HXLINE( 204)				if (::Std_obj::is(::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i),hx::ClassOf< ::starling::animation::Tween >())) {
HXLINE( 204)					tween = ( ( ::starling::animation::Tween)(::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i)) );
            				}
            				else {
HXLINE( 204)					tween = null();
            				}
HXLINE( 205)				bool _hx_tmp;
HXDLIN( 205)				if (hx::IsNotNull( tween )) {
HXLINE( 205)					_hx_tmp = hx::IsEq( tween->get_target(),target );
            				}
            				else {
HXLINE( 205)					_hx_tmp = false;
            				}
HXDLIN( 205)				if (_hx_tmp) {
HXLINE( 205)					return true;
            				}
HXLINE( 206)				i = (i - (int)1);
            			}
            		}
HXLINE( 210)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,containsTweens,return )

bool Juggler_obj::containsDelayedCalls( ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_215_containsDelayedCalls)
HXLINE( 216)		if (hx::IsNotNull( callback )) {
HXLINE( 218)			 ::starling::animation::DelayedCall delayedCall;
HXLINE( 219)			int i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data) - (int)1);
HXLINE( 220)			while((i >= (int)0)){
HXLINE( 222)				if (::Std_obj::is(::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i),hx::ClassOf< ::starling::animation::DelayedCall >())) {
HXLINE( 222)					delayedCall = ( ( ::starling::animation::DelayedCall)(::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i)) );
            				}
            				else {
HXLINE( 222)					delayedCall = null();
            				}
HXLINE( 223)				bool _hx_tmp;
HXDLIN( 223)				if (hx::IsNotNull( delayedCall )) {
HXLINE( 223)					_hx_tmp = hx::IsEq( delayedCall->_hx___callback,callback );
            				}
            				else {
HXLINE( 223)					_hx_tmp = false;
            				}
HXDLIN( 223)				if (_hx_tmp) {
HXLINE( 223)					return true;
            				}
HXLINE( 224)				i = (i - (int)1);
            			}
            		}
HXLINE( 228)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,containsDelayedCalls,return )

void Juggler_obj::purge(){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_233_purge)
HXLINE( 239)		::Dynamic object;
HXDLIN( 239)		 ::starling::events::EventDispatcher dispatcher;
HXLINE( 240)		int i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data) - (int)1);
HXLINE( 241)		while((i >= (int)0)){
HXLINE( 243)			object = ::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i);
HXLINE( 244)			if (::Std_obj::is(object,hx::ClassOf< ::starling::events::EventDispatcher >())) {
HXLINE( 244)				dispatcher = ( ( ::starling::events::EventDispatcher)(object) );
            			}
            			else {
HXLINE( 244)				dispatcher = null();
            			}
HXLINE( 245)			if (hx::IsNotNull( dispatcher )) {
HXLINE( 245)				dispatcher->removeEventListener(HX_("removeFro__juggler",4f,62,71,55),this->onRemove_dyn());
            			}
HXLINE( 246)			::openfl::_Vector::IVector_obj::set(this->_hx___objects->data,i,null());
HXLINE( 247)			this->_hx___objectIDs->remove(object);
HXLINE( 248)			i = (i - (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Juggler_obj,purge,(void))

int Juggler_obj::delayCall( ::Dynamic call,Float delay,::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_333b763a25aab571_260_delayCall)
HXLINE( 261)		if (hx::IsNull( call )) {
HXLINE( 261)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("call must not be null",22,1f,c9,ef)));
            		}
HXLINE( 262)		if (hx::IsNull( args )) {
HXLINE( 262)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 264)		 ::starling::animation::DelayedCall delayedCall = ::starling::animation::DelayedCall_obj::fromPool(call,delay,args);
HXLINE( 265)		delayedCall->addEventListener(HX_("removeFro__juggler",4f,62,71,55),this->onPooledDelayedCallComplete_dyn());
HXLINE( 266)		return this->add(delayedCall);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Juggler_obj,delayCall,return )

int Juggler_obj::repeatCall( ::Dynamic call,Float interval,hx::Null< int >  __o_repeatCount,::cpp::VirtualArray args){
int repeatCount = __o_repeatCount.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_333b763a25aab571_276_repeatCall)
HXLINE( 277)		if (hx::IsNull( call )) {
HXLINE( 277)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("call must not be null",22,1f,c9,ef)));
            		}
HXLINE( 278)		if (hx::IsNull( args )) {
HXLINE( 278)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 280)		 ::starling::animation::DelayedCall delayedCall = ::starling::animation::DelayedCall_obj::fromPool(call,interval,args);
HXLINE( 281)		delayedCall->set_repeatCount(repeatCount);
HXLINE( 282)		delayedCall->addEventListener(HX_("removeFro__juggler",4f,62,71,55),this->onPooledDelayedCallComplete_dyn());
HXLINE( 283)		return this->add(delayedCall);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Juggler_obj,repeatCall,return )

void Juggler_obj::onPooledDelayedCallComplete( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_288_onPooledDelayedCallComplete)
HXDLIN( 288)		::starling::animation::DelayedCall_obj::toPool(hx::TCast<  ::starling::animation::DelayedCall >::cast(event->target));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,onPooledDelayedCallComplete,(void))

int Juggler_obj::tween( ::Dynamic target,Float time, ::Dynamic properties){
            	HX_GC_STACKFRAME(&_hx_pos_333b763a25aab571_324_tween)
HXLINE( 325)		if (hx::IsNull( target )) {
HXLINE( 325)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("target must not be null",0f,0b,a1,a7)));
            		}
HXLINE( 327)		 ::starling::animation::Tween tween = ::starling::animation::Tween_obj::fromPool(target,time,null());
HXLINE( 328)		 ::Dynamic value;
HXLINE( 330)		if (hx::IsNull( ::starling::animation::Juggler_obj::sTweenInstanceFields )) {
HXLINE( 330)			::starling::animation::Juggler_obj::sTweenInstanceFields = ::Type_obj::getInstanceFields(hx::ClassOf< ::starling::animation::Tween >());
            		}
HXLINE( 332)		{
HXLINE( 332)			int _g = (int)0;
HXDLIN( 332)			::Array< ::String > _g1 = ::Reflect_obj::fields(properties);
HXDLIN( 332)			while((_g < _g1->length)){
HXLINE( 332)				::String property = _g1->__get(_g);
HXDLIN( 332)				_g = (_g + (int)1);
HXLINE( 334)				value = ::Reflect_obj::field(properties,property);
HXLINE( 336)				::Array< ::String > _hx_tmp = ::starling::animation::Juggler_obj::sTweenInstanceFields;
HXDLIN( 336)				if ((_hx_tmp->indexOf((HX_("set_",7d,92,50,4c) + property),null()) > (int)-1)) {
HXLINE( 337)					::Reflect_obj::setProperty(tween,property,value);
            				}
            				else {
HXLINE( 338)					bool _hx_tmp1;
HXDLIN( 338)					if (!(::Reflect_obj::hasField(target,property))) {
HXLINE( 338)						_hx_tmp1 = hx::IsNotNull( ::Reflect_obj::getProperty(target,property) );
            					}
            					else {
HXLINE( 338)						_hx_tmp1 = true;
            					}
HXDLIN( 338)					if (_hx_tmp1) {
HXLINE( 339)						tween->animate(property,( (Float)(value) ));
            					}
            					else {
HXLINE( 341)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid property: ",e4,b0,8f,af) + property)));
            					}
            				}
            			}
            		}
HXLINE( 344)		tween->addEventListener(HX_("removeFro__juggler",4f,62,71,55),this->onPooledTweenComplete_dyn());
HXLINE( 345)		return this->add(tween);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Juggler_obj,tween,return )

void Juggler_obj::onPooledTweenComplete( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_350_onPooledTweenComplete)
HXDLIN( 350)		::starling::animation::Tween_obj::toPool(hx::TCast<  ::starling::animation::Tween >::cast(event->target));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,onPooledTweenComplete,(void))

void Juggler_obj::advanceTime(Float time){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_355_advanceTime)
HXLINE( 356)		int numObjects = ::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data);
HXLINE( 357)		int currentIndex = (int)0;
HXLINE( 358)		int i = (int)0;
HXLINE( 360)		time = (time * this->_hx___timeScale);
HXLINE( 361)		bool _hx_tmp;
HXDLIN( 361)		if ((numObjects != (int)0)) {
HXLINE( 361)			_hx_tmp = (time == (int)0);
            		}
            		else {
HXLINE( 361)			_hx_tmp = true;
            		}
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 361)			return;
            		}
HXLINE( 362)		 ::starling::animation::Juggler _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 362)		_hx_tmp1->_hx___elapsedTime = (_hx_tmp1->_hx___elapsedTime + time);
HXLINE( 368)		::Dynamic object;
HXLINE( 369)		while((i < numObjects)){
HXLINE( 371)			object = ::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,i);
HXLINE( 372)			if (hx::IsNotNull( object )) {
HXLINE( 375)				if ((currentIndex != i)) {
HXLINE( 377)					::openfl::_Vector::IVector_obj::set(this->_hx___objects->data,currentIndex,object);
HXLINE( 378)					::openfl::_Vector::IVector_obj::set(this->_hx___objects->data,i,null());
            				}
HXLINE( 381)				::starling::animation::IAnimatable_obj::advanceTime(object,time);
HXLINE( 382)				currentIndex = (currentIndex + (int)1);
            			}
HXLINE( 384)			i = (i + (int)1);
            		}
HXLINE( 387)		if ((currentIndex != i)) {
HXLINE( 389)			numObjects = ::openfl::_Vector::IVector_obj::get_length(this->_hx___objects->data);
HXLINE( 391)			while((i < numObjects)){
HXLINE( 392)				 ::openfl::_Vector::AbstractVector this1 = this->_hx___objects;
HXDLIN( 392)				currentIndex = (currentIndex + (int)1);
HXDLIN( 392)				i = (i + (int)1);
HXDLIN( 392)				::Dynamic value = ::openfl::_Vector::IVector_obj::get(this->_hx___objects->data,(i - (int)1));
HXDLIN( 392)				::openfl::_Vector::IVector_obj::set(this1->data,(currentIndex - (int)1),value);
            			}
HXLINE( 394)			::openfl::_Vector::IVector_obj::set_length(this->_hx___objects->data,currentIndex);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,advanceTime,(void))

void Juggler_obj::onRemove( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_399_onRemove)
HXLINE( 400)		int objectID = this->remove(event->target);
HXLINE( 402)		if ((objectID != (int)0)) {
HXLINE( 404)			 ::starling::animation::Tween tween;
HXDLIN( 404)			if (::Std_obj::is(event->target,hx::ClassOf< ::starling::animation::Tween >())) {
HXLINE( 404)				tween = ( ( ::starling::animation::Tween)(event->target) );
            			}
            			else {
HXLINE( 404)				tween = null();
            			}
HXLINE( 405)			bool _hx_tmp;
HXDLIN( 405)			if (hx::IsNotNull( tween )) {
HXLINE( 405)				_hx_tmp = tween->get_isComplete();
            			}
            			else {
HXLINE( 405)				_hx_tmp = false;
            			}
HXDLIN( 405)			if (_hx_tmp) {
HXLINE( 406)				this->addWithID(tween->get_nextTween(),objectID);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,onRemove,(void))

Float Juggler_obj::get_elapsedTime(){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_414_get_elapsedTime)
HXDLIN( 414)		return this->_hx___elapsedTime;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Juggler_obj,get_elapsedTime,return )

Float Juggler_obj::get_timeScale(){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_420_get_timeScale)
HXDLIN( 420)		return this->_hx___timeScale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Juggler_obj,get_timeScale,return )

Float Juggler_obj::set_timeScale(Float value){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_421_set_timeScale)
HXDLIN( 421)		return (this->_hx___timeScale = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Juggler_obj,set_timeScale,return )

 ::openfl::_Vector::AbstractVector Juggler_obj::get_objects(){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_425_get_objects)
HXDLIN( 425)		return this->_hx___objects;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Juggler_obj,get_objects,return )

int Juggler_obj::sCurrentObjectID;

::Array< ::String > Juggler_obj::sTweenInstanceFields;

int Juggler_obj::getNextID(){
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_410_getNextID)
HXDLIN( 410)		return ++::starling::animation::Juggler_obj::sCurrentObjectID;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Juggler_obj,getNextID,return )


hx::ObjectPtr< Juggler_obj > Juggler_obj::__new() {
	hx::ObjectPtr< Juggler_obj > __this = new Juggler_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Juggler_obj > Juggler_obj::__alloc(hx::Ctx *_hx_ctx) {
	Juggler_obj *__this = (Juggler_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Juggler_obj), true, "starling.animation.Juggler"));
	*(void **)__this = Juggler_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Juggler_obj::Juggler_obj()
{
}

void Juggler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Juggler);
	HX_MARK_MEMBER_NAME(_hx___objects,"__objects");
	HX_MARK_MEMBER_NAME(_hx___objectIDs,"__objectIDs");
	HX_MARK_MEMBER_NAME(_hx___elapsedTime,"__elapsedTime");
	HX_MARK_MEMBER_NAME(_hx___timeScale,"__timeScale");
	HX_MARK_END_CLASS();
}

void Juggler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___objects,"__objects");
	HX_VISIT_MEMBER_NAME(_hx___objectIDs,"__objectIDs");
	HX_VISIT_MEMBER_NAME(_hx___elapsedTime,"__elapsedTime");
	HX_VISIT_MEMBER_NAME(_hx___timeScale,"__timeScale");
}

hx::Val Juggler_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"purge") ) { return hx::Val( purge_dyn() ); }
		if (HX_FIELD_EQ(inName,"tween") ) { return hx::Val( tween_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objects") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_objects() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"onRemove") ) { return hx::Val( onRemove_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__objects") ) { return hx::Val( _hx___objects ); }
		if (HX_FIELD_EQ(inName,"addWithID") ) { return hx::Val( addWithID_dyn() ); }
		if (HX_FIELD_EQ(inName,"delayCall") ) { return hx::Val( delayCall_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_timeScale() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeByID") ) { return hx::Val( removeByID_dyn() ); }
		if (HX_FIELD_EQ(inName,"repeatCall") ) { return hx::Val( repeatCall_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__objectIDs") ) { return hx::Val( _hx___objectIDs ); }
		if (HX_FIELD_EQ(inName,"__timeScale") ) { return hx::Val( _hx___timeScale ); }
		if (HX_FIELD_EQ(inName,"advanceTime") ) { return hx::Val( advanceTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"elapsedTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_elapsedTime() ); }
		if (HX_FIELD_EQ(inName,"get_objects") ) { return hx::Val( get_objects_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"removeTweens") ) { return hx::Val( removeTweens_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__elapsedTime") ) { return hx::Val( _hx___elapsedTime ); }
		if (HX_FIELD_EQ(inName,"get_timeScale") ) { return hx::Val( get_timeScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_timeScale") ) { return hx::Val( set_timeScale_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"containsTweens") ) { return hx::Val( containsTweens_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_elapsedTime") ) { return hx::Val( get_elapsedTime_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"removeDelayedCalls") ) { return hx::Val( removeDelayedCalls_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"containsDelayedCalls") ) { return hx::Val( containsDelayedCalls_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"onPooledTweenComplete") ) { return hx::Val( onPooledTweenComplete_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"onPooledDelayedCallComplete") ) { return hx::Val( onPooledDelayedCallComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Juggler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"getNextID") ) { outValue = getNextID_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sCurrentObjectID") ) { outValue = ( sCurrentObjectID ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"sTweenInstanceFields") ) { outValue = ( sTweenInstanceFields ); return true; }
	}
	return false;
}

hx::Val Juggler_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__objects") ) { _hx___objects=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeScale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_timeScale(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__objectIDs") ) { _hx___objectIDs=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__timeScale") ) { _hx___timeScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__elapsedTime") ) { _hx___elapsedTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Juggler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"sCurrentObjectID") ) { sCurrentObjectID=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"sTweenInstanceFields") ) { sTweenInstanceFields=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void Juggler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03"));
	outFields->push(HX_HCSTRING("__objectIDs","\xb9","\xeb","\xa6","\x71"));
	outFields->push(HX_HCSTRING("__elapsedTime","\x49","\x9f","\x45","\x0f"));
	outFields->push(HX_HCSTRING("__timeScale","\x1d","\xec","\xeb","\x5b"));
	outFields->push(HX_HCSTRING("elapsedTime","\x69","\x5e","\xcd","\xc6"));
	outFields->push(HX_HCSTRING("timeScale","\x3d","\xa3","\xbf","\x2d"));
	outFields->push(HX_HCSTRING("objects","\xd4","\x68","\x4f","\x82"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Juggler_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Juggler_obj,_hx___objects),HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(Juggler_obj,_hx___objectIDs),HX_HCSTRING("__objectIDs","\xb9","\xeb","\xa6","\x71")},
	{hx::fsFloat,(int)offsetof(Juggler_obj,_hx___elapsedTime),HX_HCSTRING("__elapsedTime","\x49","\x9f","\x45","\x0f")},
	{hx::fsFloat,(int)offsetof(Juggler_obj,_hx___timeScale),HX_HCSTRING("__timeScale","\x1d","\xec","\xeb","\x5b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Juggler_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Juggler_obj::sCurrentObjectID,HX_HCSTRING("sCurrentObjectID","\x80","\x66","\xac","\x32")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Juggler_obj::sTweenInstanceFields,HX_HCSTRING("sTweenInstanceFields","\x06","\x6f","\xbe","\x9d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Juggler_obj_sMemberFields[] = {
	HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03"),
	HX_HCSTRING("__objectIDs","\xb9","\xeb","\xa6","\x71"),
	HX_HCSTRING("__elapsedTime","\x49","\x9f","\x45","\x0f"),
	HX_HCSTRING("__timeScale","\x1d","\xec","\xeb","\x5b"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addWithID","\x62","\xf8","\xaa","\x0e"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("removeByID","\xd6","\x33","\x42","\xbe"),
	HX_HCSTRING("removeTweens","\x0c","\x0f","\x52","\x98"),
	HX_HCSTRING("removeDelayedCalls","\x77","\x7e","\x69","\x20"),
	HX_HCSTRING("containsTweens","\x27","\x23","\x4d","\x2d"),
	HX_HCSTRING("containsDelayedCalls","\xd2","\x18","\xaf","\x33"),
	HX_HCSTRING("purge","\x2b","\xca","\x8d","\xca"),
	HX_HCSTRING("delayCall","\xc1","\x99","\xef","\x22"),
	HX_HCSTRING("repeatCall","\x99","\x25","\x1e","\x08"),
	HX_HCSTRING("onPooledDelayedCallComplete","\x9f","\xc6","\x1e","\x88"),
	HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"),
	HX_HCSTRING("onPooledTweenComplete","\x2a","\xaf","\x7a","\xde"),
	HX_HCSTRING("advanceTime","\xaf","\x69","\x9d","\xab"),
	HX_HCSTRING("onRemove","\xc3","\x92","\x35","\xe4"),
	HX_HCSTRING("get_elapsedTime","\x00","\x16","\xaf","\x87"),
	HX_HCSTRING("get_timeScale","\x14","\x77","\x23","\xef"),
	HX_HCSTRING("set_timeScale","\x20","\x59","\x29","\x34"),
	HX_HCSTRING("get_objects","\xeb","\xc8","\x49","\x08"),
	::String(null()) };

static void Juggler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Juggler_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Juggler_obj::sCurrentObjectID,"sCurrentObjectID");
	HX_MARK_MEMBER_NAME(Juggler_obj::sTweenInstanceFields,"sTweenInstanceFields");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Juggler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Juggler_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Juggler_obj::sCurrentObjectID,"sCurrentObjectID");
	HX_VISIT_MEMBER_NAME(Juggler_obj::sTweenInstanceFields,"sTweenInstanceFields");
};

#endif

hx::Class Juggler_obj::__mClass;

static ::String Juggler_obj_sStaticFields[] = {
	HX_HCSTRING("sCurrentObjectID","\x80","\x66","\xac","\x32"),
	HX_HCSTRING("sTweenInstanceFields","\x06","\x6f","\xbe","\x9d"),
	HX_HCSTRING("getNextID","\xc4","\xb0","\xba","\xee"),
	::String(null())
};

void Juggler_obj::__register()
{
	hx::Object *dummy = new Juggler_obj;
	Juggler_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.animation.Juggler","\x5e","\xb0","\xc6","\x52");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Juggler_obj::__GetStatic;
	__mClass->mSetStaticField = &Juggler_obj::__SetStatic;
	__mClass->mMarkFunc = Juggler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Juggler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Juggler_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Juggler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Juggler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Juggler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Juggler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Juggler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_333b763a25aab571_58_boot)
HXDLIN(  58)		sCurrentObjectID = (int)0;
            	}
}

} // end namespace starling
} // end namespace animation
