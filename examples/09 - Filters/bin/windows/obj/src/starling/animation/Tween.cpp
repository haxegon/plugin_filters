// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FunctionVector
#include <openfl/_Vector/FunctionVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
#ifndef INCLUDED_starling_animation_Transitions
#include <starling/animation/Transitions.h>
#endif
#ifndef INCLUDED_starling_animation_Tween
#include <starling/animation/Tween.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_utils_Color
#include <starling/utils/Color.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0e250b39ba959d3_89_new,"starling.animation.Tween","new",0x287b182d,"starling.animation.Tween.new","starling/animation/Tween.hx",89,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_96_reset,"starling.animation.Tween","reset",0xdd2adedc,"starling.animation.Tween.reset","starling/animation/Tween.hx",96,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_140_animate,"starling.animation.Tween","animate",0xbe488cee,"starling.animation.Tween.animate","starling/animation/Tween.hx",140,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_154_scaleTo,"starling.animation.Tween","scaleTo",0xa90300f2,"starling.animation.Tween.scaleTo","starling/animation/Tween.hx",154,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_161_moveTo,"starling.animation.Tween","moveTo",0x6c8ca93f,"starling.animation.Tween.moveTo","starling/animation/Tween.hx",161,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_169_fadeTo,"starling.animation.Tween","fadeTo",0x848b2c6a,"starling.animation.Tween.fadeTo","starling/animation/Tween.hx",169,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_177_rotateTo,"starling.animation.Tween","rotateTo",0x40c36dc9,"starling.animation.Tween.rotateTo","starling/animation/Tween.hx",177,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_182_advanceTime,"starling.animation.Tween","advanceTime",0xb234c67c,"starling.animation.Tween.advanceTime","starling/animation/Tween.hx",182,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_278_getUpdateFuncFromProperty,"starling.animation.Tween","getUpdateFuncFromProperty",0xbce1142f,"starling.animation.Tween.getUpdateFuncFromProperty","starling/animation/Tween.hx",278,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_317_updateStandard,"starling.animation.Tween","updateStandard",0x688d0bb9,"starling.animation.Tween.updateStandard","starling/animation/Tween.hx",317,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_325_updateRgb,"starling.animation.Tween","updateRgb",0x82ea5811,"starling.animation.Tween.updateRgb","starling/animation/Tween.hx",325,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_330_updateRad,"starling.animation.Tween","updateRad",0x82ea52d9,"starling.animation.Tween.updateRad","starling/animation/Tween.hx",330,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_335_updateDeg,"starling.animation.Tween","updateDeg",0x82dfb6ca,"starling.animation.Tween.updateDeg","starling/animation/Tween.hx",335,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_339_updateAngle,"starling.animation.Tween","updateAngle",0x0f1209d7,"starling.animation.Tween.updateAngle","starling/animation/Tween.hx",339,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_352_getEndValue,"starling.animation.Tween","getEndValue",0x5c413119,"starling.animation.Tween.getEndValue","starling/animation/Tween.hx",352,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_361_animatesProperty,"starling.animation.Tween","animatesProperty",0xffdd953a,"starling.animation.Tween.animatesProperty","starling/animation/Tween.hx",361,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_368_get_isComplete,"starling.animation.Tween","get_isComplete",0xb9577c5f,"starling.animation.Tween.get_isComplete","starling/animation/Tween.hx",368,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_373_get_target,"starling.animation.Tween","get_target",0x7d395eed,"starling.animation.Tween.get_target","starling/animation/Tween.hx",373,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_377_get_transition,"starling.animation.Tween","get_transition",0x178ff731,"starling.animation.Tween.get_transition","starling/animation/Tween.hx",377,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_379_set_transition,"starling.animation.Tween","set_transition",0x37afdfa5,"starling.animation.Tween.set_transition","starling/animation/Tween.hx",379,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_390_get_transitionFunc,"starling.animation.Tween","get_transitionFunc",0xe997fb15,"starling.animation.Tween.get_transitionFunc","starling/animation/Tween.hx",390,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_392_set_transitionFunc,"starling.animation.Tween","set_transitionFunc",0xc6472d89,"starling.animation.Tween.set_transitionFunc","starling/animation/Tween.hx",392,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_400_get_totalTime,"starling.animation.Tween","get_totalTime",0x8bdd3bd5,"starling.animation.Tween.get_totalTime","starling/animation/Tween.hx",400,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_404_get_currentTime,"starling.animation.Tween","get_currentTime",0xcb0aa3ca,"starling.animation.Tween.get_currentTime","starling/animation/Tween.hx",404,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_408_get_progress,"starling.animation.Tween","get_progress",0xf91e8249,"starling.animation.Tween.get_progress","starling/animation/Tween.hx",408,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_412_get_delay,"starling.animation.Tween","get_delay",0x1ad6d367,"starling.animation.Tween.get_delay","starling/animation/Tween.hx",412,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_414_set_delay,"starling.animation.Tween","set_delay",0xfe27bf73,"starling.animation.Tween.set_delay","starling/animation/Tween.hx",414,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_423_get_repeatCount,"starling.animation.Tween","get_repeatCount",0x61069258,"starling.animation.Tween.get_repeatCount","starling/animation/Tween.hx",423,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_424_set_repeatCount,"starling.animation.Tween","set_repeatCount",0x5cd20f64,"starling.animation.Tween.set_repeatCount","starling/animation/Tween.hx",424,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_428_get_repeatDelay,"starling.animation.Tween","get_repeatDelay",0xedca250c,"starling.animation.Tween.get_repeatDelay","starling/animation/Tween.hx",428,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_429_set_repeatDelay,"starling.animation.Tween","set_repeatDelay",0xe995a218,"starling.animation.Tween.set_repeatDelay","starling/animation/Tween.hx",429,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_434_get_reverse,"starling.animation.Tween","get_reverse",0xa78df606,"starling.animation.Tween.get_reverse","starling/animation/Tween.hx",434,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_435_set_reverse,"starling.animation.Tween","set_reverse",0xb1fafd12,"starling.animation.Tween.set_reverse","starling/animation/Tween.hx",435,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_439_get_roundToInt,"starling.animation.Tween","get_roundToInt",0x7becc4a2,"starling.animation.Tween.get_roundToInt","starling/animation/Tween.hx",439,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_440_set_roundToInt,"starling.animation.Tween","set_roundToInt",0x9c0cad16,"starling.animation.Tween.set_roundToInt","starling/animation/Tween.hx",440,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_444_get_onStart,"starling.animation.Tween","get_onStart",0xa6dacfa7,"starling.animation.Tween.get_onStart","starling/animation/Tween.hx",444,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_445_set_onStart,"starling.animation.Tween","set_onStart",0xb147d6b3,"starling.animation.Tween.set_onStart","starling/animation/Tween.hx",445,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_449_get_onUpdate,"starling.animation.Tween","get_onUpdate",0xd9a60724,"starling.animation.Tween.get_onUpdate","starling/animation/Tween.hx",449,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_450_set_onUpdate,"starling.animation.Tween","set_onUpdate",0xee9f2a98,"starling.animation.Tween.set_onUpdate","starling/animation/Tween.hx",450,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_455_get_onRepeat,"starling.animation.Tween","get_onRepeat",0x591d1876,"starling.animation.Tween.get_onRepeat","starling/animation/Tween.hx",455,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_456_set_onRepeat,"starling.animation.Tween","set_onRepeat",0x6e163bea,"starling.animation.Tween.set_onRepeat","starling/animation/Tween.hx",456,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_460_get_onComplete,"starling.animation.Tween","get_onComplete",0x1c5f3e94,"starling.animation.Tween.get_onComplete","starling/animation/Tween.hx",460,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_461_set_onComplete,"starling.animation.Tween","set_onComplete",0x3c7f2708,"starling.animation.Tween.set_onComplete","starling/animation/Tween.hx",461,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_465_get_onStartArgs,"starling.animation.Tween","get_onStartArgs",0x6126e8a4,"starling.animation.Tween.get_onStartArgs","starling/animation/Tween.hx",465,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_466_set_onStartArgs,"starling.animation.Tween","set_onStartArgs",0x5cf265b0,"starling.animation.Tween.set_onStartArgs","starling/animation/Tween.hx",466,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_470_get_onUpdateArgs,"starling.animation.Tween","get_onUpdateArgs",0x587022a1,"starling.animation.Tween.get_onUpdateArgs","starling/animation/Tween.hx",470,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_471_set_onUpdateArgs,"starling.animation.Tween","set_onUpdateArgs",0xaeb21015,"starling.animation.Tween.set_onUpdateArgs","starling/animation/Tween.hx",471,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_475_get_onRepeatArgs,"starling.animation.Tween","get_onRepeatArgs",0x661f44f3,"starling.animation.Tween.get_onRepeatArgs","starling/animation/Tween.hx",475,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_476_set_onRepeatArgs,"starling.animation.Tween","set_onRepeatArgs",0xbc613267,"starling.animation.Tween.set_onRepeatArgs","starling/animation/Tween.hx",476,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_480_get_onCompleteArgs,"starling.animation.Tween","get_onCompleteArgs",0x7271d211,"starling.animation.Tween.get_onCompleteArgs","starling/animation/Tween.hx",480,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_481_set_onCompleteArgs,"starling.animation.Tween","set_onCompleteArgs",0x4f210485,"starling.animation.Tween.set_onCompleteArgs","starling/animation/Tween.hx",481,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_486_get_nextTween,"starling.animation.Tween","get_nextTween",0xe2db825c,"starling.animation.Tween.get_nextTween","starling/animation/Tween.hx",486,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_487_set_nextTween,"starling.animation.Tween","set_nextTween",0x27e16468,"starling.animation.Tween.set_nextTween","starling/animation/Tween.hx",487,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_298_getPropertyHint,"starling.animation.Tween","getPropertyHint",0xca779d7f,"starling.animation.Tween.getPropertyHint","starling/animation/Tween.hx",298,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_310_getPropertyName,"starling.animation.Tween","getPropertyName",0xce68d243,"starling.animation.Tween.getPropertyName","starling/animation/Tween.hx",310,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_497_fromPool,"starling.animation.Tween","fromPool",0xe068a079,"starling.animation.Tween.fromPool","starling/animation/Tween.hx",497,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_503_toPool,"starling.animation.Tween","toPool",0x1ff5c24a,"starling.animation.Tween.toPool","starling/animation/Tween.hx",503,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_50_boot,"starling.animation.Tween","boot",0x3b530fc5,"starling.animation.Tween.boot","starling/animation/Tween.hx",50,0x8fda4925)
HX_LOCAL_STACK_FRAME(_hx_pos_d0e250b39ba959d3_491_boot,"starling.animation.Tween","boot",0x3b530fc5,"starling.animation.Tween.boot","starling/animation/Tween.hx",491,0x8fda4925)
namespace starling{
namespace animation{

void Tween_obj::__construct( ::Dynamic target,Float time, ::Dynamic __o_transition){
 ::Dynamic transition = __o_transition.Default(HX_HCSTRING("linear","\xe5","\x51","\xa0","\xec"));
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_89_new)
HXLINE(  90)		super::__construct();
HXLINE(  91)		this->reset(target,time,transition);
            	}

Dynamic Tween_obj::__CreateEmpty() { return new Tween_obj; }

void *Tween_obj::_hx_vtable = 0;

Dynamic Tween_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tween_obj > _hx_result = new Tween_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Tween_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
	} else {
		return inClassId==(int)0x71cd7a8f;
	}
}

static ::starling::animation::IAnimatable_obj _hx_starling_animation_Tween__hx_starling_animation_IAnimatable= {
	( void (hx::Object::*)(Float))&::starling::animation::Tween_obj::advanceTime,
};

void *Tween_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9e9125cb: return &_hx_starling_animation_Tween__hx_starling_animation_IAnimatable;
	}
	return super::_hx_getInterface(inHash);
}

 ::starling::animation::Tween Tween_obj::reset( ::Dynamic target,Float time, ::Dynamic __o_transition){
 ::Dynamic transition = __o_transition.Default(HX_HCSTRING("linear","\xe5","\x51","\xa0","\xec"));
            	HX_GC_STACKFRAME(&_hx_pos_d0e250b39ba959d3_96_reset)
HXLINE(  97)		this->_hx___target = target;
HXLINE(  98)		this->_hx___currentTime = ((Float)0.0);
HXLINE(  99)		this->_hx___totalTime = ::Math_obj::max(((Float)0.0001),time);
HXLINE( 100)		this->_hx___progress = ((Float)0.0);
HXLINE( 101)		this->_hx___delay = (this->_hx___repeatDelay = ((Float)0.0));
HXLINE( 102)		this->_hx___onStart = (this->_hx___onUpdate = (this->_hx___onRepeat = (this->_hx___onComplete = null())));
HXLINE( 103)		this->_hx___onStartArgs = (this->_hx___onUpdateArgs = (this->_hx___onRepeatArgs = (this->_hx___onCompleteArgs = null())));
HXLINE( 104)		this->_hx___roundToInt = (this->__reverse = false);
HXLINE( 105)		this->_hx___repeatCount = (int)1;
HXLINE( 106)		this->_hx___currentCycle = (int)-1;
HXLINE( 107)		this->_hx___nextTween = null();
HXLINE( 109)		if (::Std_obj::is(transition,hx::ClassOf< ::String >())) {
HXLINE( 110)			this->set_transition(( (::String)(transition) ));
            		}
            		else {
HXLINE( 111)			if (::Reflect_obj::isFunction(transition)) {
HXLINE( 112)				this->set_transitionFunc(transition);
            			}
            			else {
HXLINE( 114)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Transition must be either a string or a function",ce,60,b4,43)));
            			}
            		}
HXLINE( 116)		if (hx::IsNotNull( this->_hx___properties )) {
HXLINE( 116)			::openfl::_Vector::IVector_obj::set_length(this->_hx___properties->data,(int)0);
            		}
            		else {
HXLINE( 116)			int length = null();
HXDLIN( 116)			bool fixed = null();
HXDLIN( 116)			this->_hx___properties =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
HXLINE( 117)		if (hx::IsNotNull( this->_hx___startValues )) {
HXLINE( 117)			::openfl::_Vector::IVector_obj::set_length(this->_hx___startValues->data,(int)0);
            		}
            		else {
HXLINE( 117)			int length1 = null();
HXDLIN( 117)			bool fixed1 = null();
HXDLIN( 117)			this->_hx___startValues =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length1,fixed1,null()),null());
            		}
HXLINE( 118)		if (hx::IsNotNull( this->_hx___endValues )) {
HXLINE( 118)			::openfl::_Vector::IVector_obj::set_length(this->_hx___endValues->data,(int)0);
            		}
            		else {
HXLINE( 118)			int length2 = null();
HXDLIN( 118)			bool fixed2 = null();
HXDLIN( 118)			this->_hx___endValues =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null()),null());
            		}
HXLINE( 119)		if (hx::IsNotNull( this->_hx___updateFuncs )) {
HXLINE( 119)			::openfl::_Vector::IVector_obj::set_length(this->_hx___updateFuncs->data,(int)0);
            		}
            		else {
HXLINE( 119)			int length3 = null();
HXDLIN( 119)			bool fixed3 = null();
HXDLIN( 119)			this->_hx___updateFuncs =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,length3,fixed3,null()),null());
            		}
HXLINE( 121)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Tween_obj,reset,return )

void Tween_obj::animate(::String property,Float endValue){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_140_animate)
HXLINE( 141)		if (hx::IsNull( this->_hx___target )) {
HXLINE( 141)			return;
            		}
HXLINE( 143)		int pos = ::openfl::_Vector::IVector_obj::get_length(this->_hx___properties->data);
HXLINE( 144)		 ::Dynamic updateFunc = this->getUpdateFuncFromProperty(property);
HXLINE( 146)		{
HXLINE( 146)			 ::openfl::_Vector::AbstractVector this1 = this->_hx___properties;
HXDLIN( 146)			::String value = ::starling::animation::Tween_obj::getPropertyName(property);
HXDLIN( 146)			::openfl::_Vector::IVector_obj::set(this1->data,pos,value);
            		}
HXLINE( 147)		::openfl::_Vector::IVector_obj::set(this->_hx___startValues->data,pos,::Math_obj::NaN);
HXLINE( 148)		::openfl::_Vector::IVector_obj::set(this->_hx___endValues->data,pos,endValue);
HXLINE( 149)		::openfl::_Vector::IVector_obj::set(this->_hx___updateFuncs->data,pos,updateFunc);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tween_obj,animate,(void))

void Tween_obj::scaleTo(Float factor){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_154_scaleTo)
HXLINE( 155)		this->animate(HX_("scaleX",8e,ea,25,3c),factor);
HXLINE( 156)		this->animate(HX_("scaleY",8f,ea,25,3c),factor);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,scaleTo,(void))

void Tween_obj::moveTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_161_moveTo)
HXLINE( 162)		this->animate(HX_("x",78,00,00,00),x);
HXLINE( 163)		this->animate(HX_("y",79,00,00,00),y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tween_obj,moveTo,(void))

void Tween_obj::fadeTo(Float alpha){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_169_fadeTo)
HXDLIN( 169)		this->animate(HX_("alpha",5e,a7,96,21),alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,fadeTo,(void))

void Tween_obj::rotateTo(Float angle,::String __o_type){
::String type = __o_type.Default(HX_HCSTRING("rad","\xd5","\xd5","\x56","\x00"));
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_177_rotateTo)
HXDLIN( 177)		this->animate((HX_("rotation#",25,59,ef,6c) + type),angle);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tween_obj,rotateTo,(void))

void Tween_obj::advanceTime(Float time){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_182_advanceTime)
HXLINE( 183)		bool _hx_tmp;
HXDLIN( 183)		if ((time != (int)0)) {
HXLINE( 183)			if ((this->_hx___repeatCount == (int)1)) {
HXLINE( 183)				_hx_tmp = (this->_hx___currentTime == this->_hx___totalTime);
            			}
            			else {
HXLINE( 183)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 183)			_hx_tmp = true;
            		}
HXDLIN( 183)		if (_hx_tmp) {
HXLINE( 183)			return;
            		}
HXLINE( 185)		int i;
HXLINE( 186)		Float previousTime = this->_hx___currentTime;
HXLINE( 187)		Float restTime = (this->_hx___totalTime - this->_hx___currentTime);
HXLINE( 188)		Float carryOverTime;
HXDLIN( 188)		if ((time > restTime)) {
HXLINE( 188)			carryOverTime = (time - restTime);
            		}
            		else {
HXLINE( 188)			carryOverTime = ((Float)0.0);
            		}
HXLINE( 190)		 ::starling::animation::Tween _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 190)		_hx_tmp1->_hx___currentTime = (_hx_tmp1->_hx___currentTime + time);
HXLINE( 192)		if ((this->_hx___currentTime <= (int)0)) {
HXLINE( 193)			return;
            		}
            		else {
HXLINE( 194)			if ((this->_hx___currentTime > this->_hx___totalTime)) {
HXLINE( 195)				this->_hx___currentTime = this->_hx___totalTime;
            			}
            		}
HXLINE( 197)		bool _hx_tmp2;
HXDLIN( 197)		bool _hx_tmp3;
HXDLIN( 197)		if ((this->_hx___currentCycle < (int)0)) {
HXLINE( 197)			_hx_tmp3 = (previousTime <= (int)0);
            		}
            		else {
HXLINE( 197)			_hx_tmp3 = false;
            		}
HXDLIN( 197)		if (_hx_tmp3) {
HXLINE( 197)			_hx_tmp2 = (this->_hx___currentTime > (int)0);
            		}
            		else {
HXLINE( 197)			_hx_tmp2 = false;
            		}
HXDLIN( 197)		if (_hx_tmp2) {
HXLINE( 199)			this->_hx___currentCycle++;
HXLINE( 200)			if (hx::IsNotNull( this->_hx___onStart )) {
HXLINE( 202)				if (hx::IsNotNull( this->_hx___onStartArgs )) {
HXLINE( 203)					 ::Dynamic _hx_tmp4 = this->_hx___onStart;
HXDLIN( 203)					 ::Dynamic _hx_tmp5 = this->_hx___onStart;
HXDLIN( 203)					::Reflect_obj::callMethod(_hx_tmp4,_hx_tmp5,this->get_onStartArgs());
            				}
            				else {
HXLINE( 205)					this->_hx___onStart();
            				}
            			}
            		}
HXLINE( 210)		Float ratio = ((Float)this->_hx___currentTime / (Float)this->_hx___totalTime);
HXLINE( 211)		bool reversed;
HXDLIN( 211)		if (this->__reverse) {
HXLINE( 211)			reversed = (hx::Mod(this->_hx___currentCycle,(int)2) == (int)1);
            		}
            		else {
HXLINE( 211)			reversed = false;
            		}
HXLINE( 212)		int numProperties = ::openfl::_Vector::IVector_obj::get_length(this->_hx___startValues->data);
HXLINE( 213)		Float _hx_tmp6;
HXDLIN( 213)		if (reversed) {
HXLINE( 213)			 ::Dynamic _hx_tmp7 = this->_hx___transitionFunc;
HXDLIN( 213)			_hx_tmp6 = ( (Float)(_hx_tmp7((((Float)1.0) - ratio))) );
            		}
            		else {
HXLINE( 213)			_hx_tmp6 = ( (Float)(this->_hx___transitionFunc(ratio)) );
            		}
HXDLIN( 213)		this->_hx___progress = _hx_tmp6;
HXLINE( 215)		{
HXLINE( 215)			int _g1 = (int)0;
HXDLIN( 215)			int _g = numProperties;
HXDLIN( 215)			while((_g1 < _g)){
HXLINE( 215)				_g1 = (_g1 + (int)1);
HXDLIN( 215)				int i1 = (_g1 - (int)1);
HXLINE( 217)				Float _hx_tmp8 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___startValues->data,i1)) );
HXDLIN( 217)				if ((_hx_tmp8 != ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___startValues->data,i1)) ))) {
HXLINE( 218)					 ::openfl::_Vector::AbstractVector this1 = this->_hx___startValues;
HXDLIN( 218)					 ::Dynamic value = this->_hx___target;
HXDLIN( 218)					Float value1 = ( (Float)(::Reflect_obj::getProperty(value,( (::String)(::openfl::_Vector::IVector_obj::get(this->_hx___properties->data,i1)) ))) );
HXDLIN( 218)					::openfl::_Vector::IVector_obj::set(this1->data,i1,value1);
            				}
HXLINE( 220)				 ::Dynamic updateFunc = ::openfl::_Vector::IVector_obj::get(this->_hx___updateFuncs->data,i1);
HXLINE( 221)				::String _hx_tmp9 = ( (::String)(::openfl::_Vector::IVector_obj::get(this->_hx___properties->data,i1)) );
HXDLIN( 221)				Float _hx_tmp10 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___startValues->data,i1)) );
HXDLIN( 221)				updateFunc(_hx_tmp9,_hx_tmp10,::openfl::_Vector::IVector_obj::get(this->_hx___endValues->data,i1));
            			}
            		}
HXLINE( 224)		if (hx::IsNotNull( this->_hx___onUpdate )) {
HXLINE( 226)			if (hx::IsNotNull( this->_hx___onUpdateArgs )) {
HXLINE( 227)				::Reflect_obj::callMethod(this->_hx___onUpdate,this->_hx___onUpdate,this->_hx___onUpdateArgs);
            			}
            			else {
HXLINE( 229)				this->_hx___onUpdate();
            			}
            		}
HXLINE( 233)		bool _hx_tmp11;
HXDLIN( 233)		if ((previousTime < this->_hx___totalTime)) {
HXLINE( 233)			_hx_tmp11 = (this->_hx___currentTime >= this->_hx___totalTime);
            		}
            		else {
HXLINE( 233)			_hx_tmp11 = false;
            		}
HXDLIN( 233)		if (_hx_tmp11) {
HXLINE( 235)			bool _hx_tmp12;
HXDLIN( 235)			if ((this->_hx___repeatCount != (int)0)) {
HXLINE( 235)				_hx_tmp12 = (this->_hx___repeatCount > (int)1);
            			}
            			else {
HXLINE( 235)				_hx_tmp12 = true;
            			}
HXDLIN( 235)			if (_hx_tmp12) {
HXLINE( 237)				this->_hx___currentTime = -(this->_hx___repeatDelay);
HXLINE( 238)				this->_hx___currentCycle++;
HXLINE( 239)				if ((this->_hx___repeatCount > (int)1)) {
HXLINE( 239)					this->_hx___repeatCount--;
            				}
HXLINE( 240)				if (hx::IsNotNull( this->_hx___onRepeat )) {
HXLINE( 242)					if (hx::IsNotNull( this->_hx___onRepeatArgs )) {
HXLINE( 243)						::Reflect_obj::callMethod(this->_hx___onRepeat,this->_hx___onRepeat,this->_hx___onRepeatArgs);
            					}
            					else {
HXLINE( 245)						this->_hx___onRepeat();
            					}
            				}
            			}
            			else {
HXLINE( 252)				 ::Dynamic onComplete = this->_hx___onComplete;
HXLINE( 253)				::cpp::VirtualArray onCompleteArgs = this->_hx___onCompleteArgs;
HXLINE( 258)				this->dispatchEventWith(HX_("removeFro__juggler",4f,62,71,55),null(),null());
HXLINE( 259)				if (hx::IsNotNull( onComplete )) {
HXLINE( 261)					if (hx::IsNotNull( onCompleteArgs )) {
HXLINE( 262)						::Reflect_obj::callMethod(onComplete,onComplete,onCompleteArgs);
            					}
            					else {
HXLINE( 264)						onComplete();
            					}
            				}
HXLINE( 267)				if ((this->_hx___currentTime == (int)0)) {
HXLINE( 267)					carryOverTime = (int)0;
            				}
            			}
            		}
HXLINE( 271)		if ((carryOverTime != (int)0)) {
HXLINE( 272)			this->advanceTime(carryOverTime);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,advanceTime,(void))

 ::Dynamic Tween_obj::getUpdateFuncFromProperty(::String property){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_278_getUpdateFuncFromProperty)
HXLINE( 279)		 ::Dynamic updateFunc;
HXLINE( 280)		::String hint = ::starling::animation::Tween_obj::getPropertyHint(property);
HXLINE( 282)		if (hx::IsNull( hint )) {
HXLINE( 284)			updateFunc = this->updateStandard_dyn();
            		}
            		else {
HXLINE( 282)			::String _hx_switch_0 = hint;
            			if (  (_hx_switch_0==HX_("deg",c6,39,4c,00)) ){
HXLINE( 287)				updateFunc = this->updateDeg_dyn();
HXDLIN( 287)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_0==HX_("rad",d5,d5,56,00)) ){
HXLINE( 286)				updateFunc = this->updateRad_dyn();
HXDLIN( 286)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_0==HX_("rgb",0d,db,56,00)) ){
HXLINE( 285)				updateFunc = this->updateRgb_dyn();
HXDLIN( 285)				goto _hx_goto_9;
            			}
            			/* default */{
HXLINE( 289)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 289)				_hx_tmp((HX_("[Starling] Ignoring unknown property hint: ",b7,cb,0d,b7) + hint),hx::SourceInfo(HX_("Tween.hx",53,69,64,eb),289,HX_("starling.animation.Tween",bb,7d,4e,08),HX_("getUpdateFuncFromProperty",a2,ca,21,41)));
HXLINE( 290)				updateFunc = this->updateStandard_dyn();
            			}
            			_hx_goto_9:;
            		}
HXLINE( 293)		return updateFunc;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,getUpdateFuncFromProperty,return )

void Tween_obj::updateStandard(::String property,Float startValue,Float endValue){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_317_updateStandard)
HXLINE( 318)		Float newValue = this->_hx___progress;
HXDLIN( 318)		Float newValue1 = (startValue + (newValue * (endValue - startValue)));
HXLINE( 319)		if (this->_hx___roundToInt) {
HXLINE( 319)			newValue1 = ::Math_obj::round(newValue1);
            		}
HXLINE( 320)		::Reflect_obj::setProperty(this->_hx___target,property,newValue1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Tween_obj,updateStandard,(void))

void Tween_obj::updateRgb(::String property,Float startValue,Float endValue){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_325_updateRgb)
HXDLIN( 325)		 ::Dynamic _hx_tmp = this->_hx___target;
HXDLIN( 325)		int _hx_tmp1 = ::Std_obj::_hx_int(startValue);
HXDLIN( 325)		int _hx_tmp2 = ::Std_obj::_hx_int(endValue);
HXDLIN( 325)		::Reflect_obj::setProperty(_hx_tmp,property,::starling::utils::Color_obj::interpolate(_hx_tmp1,_hx_tmp2,this->_hx___progress));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Tween_obj,updateRgb,(void))

void Tween_obj::updateRad(::String property,Float startValue,Float endValue){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_330_updateRad)
HXDLIN( 330)		this->updateAngle(::Math_obj::PI,property,startValue,endValue);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Tween_obj,updateRad,(void))

void Tween_obj::updateDeg(::String property,Float startValue,Float endValue){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_335_updateDeg)
HXDLIN( 335)		this->updateAngle((int)180,property,startValue,endValue);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Tween_obj,updateDeg,(void))

void Tween_obj::updateAngle(Float pi,::String property,Float startValue,Float endValue){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_339_updateAngle)
HXLINE( 340)		while((::Math_obj::abs((endValue - startValue)) > pi)){
HXLINE( 342)			if ((startValue < endValue)) {
HXLINE( 342)				endValue = (endValue - (((Float)2.0) * pi));
            			}
            			else {
HXLINE( 343)				endValue = (endValue + (((Float)2.0) * pi));
            			}
            		}
HXLINE( 346)		this->updateStandard(property,startValue,endValue);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Tween_obj,updateAngle,(void))

Float Tween_obj::getEndValue(::String property){
            	HX_GC_STACKFRAME(&_hx_pos_d0e250b39ba959d3_352_getEndValue)
HXLINE( 353)		int index = ::openfl::_Vector::IVector_obj::indexOf(this->_hx___properties->data,property,(int)0);
HXLINE( 354)		if ((index == (int)-1)) {
HXLINE( 354)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("The property '",0b,e3,80,a4) + property) + HX_("' is not animated",4d,4b,da,49))));
            		}
            		else {
HXLINE( 355)			return ( (Float)(::openfl::_Vector::IVector_obj::get(this->_hx___endValues->data,index)) );
            		}
HXLINE( 354)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,getEndValue,return )

bool Tween_obj::animatesProperty(::String property){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_361_animatesProperty)
HXDLIN( 361)		return (::openfl::_Vector::IVector_obj::indexOf(this->_hx___properties->data,property,(int)0) != (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,animatesProperty,return )

bool Tween_obj::get_isComplete(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_368_get_isComplete)
HXDLIN( 368)		if ((this->_hx___currentTime >= this->_hx___totalTime)) {
HXDLIN( 368)			return (this->_hx___repeatCount == (int)1);
            		}
            		else {
HXDLIN( 368)			return false;
            		}
HXDLIN( 368)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_isComplete,return )

 ::Dynamic Tween_obj::get_target(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_373_get_target)
HXDLIN( 373)		return this->_hx___target;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_target,return )

::String Tween_obj::get_transition(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_377_get_transition)
HXDLIN( 377)		return this->_hx___transitionName;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_transition,return )

::String Tween_obj::set_transition(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d0e250b39ba959d3_379_set_transition)
HXLINE( 380)		this->_hx___transitionName = value;
HXLINE( 381)		this->_hx___transitionFunc = ::starling::animation::Transitions_obj::getTransition(value);
HXLINE( 383)		if (hx::IsNull( this->_hx___transitionFunc )) {
HXLINE( 384)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid transiton: ",4f,ca,8d,9c) + value)));
            		}
HXLINE( 385)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_transition,return )

 ::Dynamic Tween_obj::get_transitionFunc(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_390_get_transitionFunc)
HXDLIN( 390)		return this->_hx___transitionFunc;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_transitionFunc,return )

 ::Dynamic Tween_obj::set_transitionFunc( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_392_set_transitionFunc)
HXLINE( 393)		this->_hx___transitionName = HX_("custom",b1,87,92,3f);
HXLINE( 394)		this->_hx___transitionFunc = value;
HXLINE( 395)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_transitionFunc,return )

Float Tween_obj::get_totalTime(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_400_get_totalTime)
HXDLIN( 400)		return this->_hx___totalTime;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_totalTime,return )

Float Tween_obj::get_currentTime(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_404_get_currentTime)
HXDLIN( 404)		return this->_hx___currentTime;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_currentTime,return )

Float Tween_obj::get_progress(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_408_get_progress)
HXDLIN( 408)		return this->_hx___progress;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_progress,return )

Float Tween_obj::get_delay(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_412_get_delay)
HXDLIN( 412)		return this->_hx___delay;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_delay,return )

Float Tween_obj::set_delay(Float value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_414_set_delay)
HXLINE( 415)		this->_hx___currentTime = ((this->_hx___currentTime + this->_hx___delay) - value);
HXLINE( 416)		this->_hx___delay = value;
HXLINE( 417)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_delay,return )

int Tween_obj::get_repeatCount(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_423_get_repeatCount)
HXDLIN( 423)		return this->_hx___repeatCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_repeatCount,return )

int Tween_obj::set_repeatCount(int value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_424_set_repeatCount)
HXDLIN( 424)		return (this->_hx___repeatCount = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_repeatCount,return )

Float Tween_obj::get_repeatDelay(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_428_get_repeatDelay)
HXDLIN( 428)		return this->_hx___repeatDelay;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_repeatDelay,return )

Float Tween_obj::set_repeatDelay(Float value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_429_set_repeatDelay)
HXDLIN( 429)		return (this->_hx___repeatDelay = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_repeatDelay,return )

bool Tween_obj::get_reverse(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_434_get_reverse)
HXDLIN( 434)		return this->__reverse;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_reverse,return )

bool Tween_obj::set_reverse(bool value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_435_set_reverse)
HXDLIN( 435)		return (this->__reverse = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_reverse,return )

bool Tween_obj::get_roundToInt(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_439_get_roundToInt)
HXDLIN( 439)		return this->_hx___roundToInt;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_roundToInt,return )

bool Tween_obj::set_roundToInt(bool value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_440_set_roundToInt)
HXDLIN( 440)		return (this->_hx___roundToInt = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_roundToInt,return )

 ::Dynamic Tween_obj::get_onStart(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_444_get_onStart)
HXDLIN( 444)		return this->_hx___onStart;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_onStart,return )

 ::Dynamic Tween_obj::set_onStart( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_445_set_onStart)
HXDLIN( 445)		return (this->_hx___onStart = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_onStart,return )

 ::Dynamic Tween_obj::get_onUpdate(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_449_get_onUpdate)
HXDLIN( 449)		return this->_hx___onUpdate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_onUpdate,return )

 ::Dynamic Tween_obj::set_onUpdate( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_450_set_onUpdate)
HXDLIN( 450)		return (this->_hx___onUpdate = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_onUpdate,return )

 ::Dynamic Tween_obj::get_onRepeat(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_455_get_onRepeat)
HXDLIN( 455)		return this->_hx___onRepeat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_onRepeat,return )

 ::Dynamic Tween_obj::set_onRepeat( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_456_set_onRepeat)
HXDLIN( 456)		return (this->_hx___onRepeat = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_onRepeat,return )

 ::Dynamic Tween_obj::get_onComplete(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_460_get_onComplete)
HXDLIN( 460)		return this->_hx___onComplete;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_onComplete,return )

 ::Dynamic Tween_obj::set_onComplete( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_461_set_onComplete)
HXDLIN( 461)		return (this->_hx___onComplete = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_onComplete,return )

::cpp::VirtualArray Tween_obj::get_onStartArgs(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_465_get_onStartArgs)
HXDLIN( 465)		return this->_hx___onStartArgs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_onStartArgs,return )

::cpp::VirtualArray Tween_obj::set_onStartArgs(::cpp::VirtualArray value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_466_set_onStartArgs)
HXDLIN( 466)		return (this->_hx___onStartArgs = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_onStartArgs,return )

::cpp::VirtualArray Tween_obj::get_onUpdateArgs(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_470_get_onUpdateArgs)
HXDLIN( 470)		return this->_hx___onUpdateArgs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_onUpdateArgs,return )

::cpp::VirtualArray Tween_obj::set_onUpdateArgs(::cpp::VirtualArray value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_471_set_onUpdateArgs)
HXDLIN( 471)		return (this->_hx___onUpdateArgs = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_onUpdateArgs,return )

::cpp::VirtualArray Tween_obj::get_onRepeatArgs(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_475_get_onRepeatArgs)
HXDLIN( 475)		return this->_hx___onRepeatArgs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_onRepeatArgs,return )

::cpp::VirtualArray Tween_obj::set_onRepeatArgs(::cpp::VirtualArray value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_476_set_onRepeatArgs)
HXDLIN( 476)		return (this->_hx___onRepeatArgs = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_onRepeatArgs,return )

::cpp::VirtualArray Tween_obj::get_onCompleteArgs(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_480_get_onCompleteArgs)
HXDLIN( 480)		return this->_hx___onCompleteArgs;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_onCompleteArgs,return )

::cpp::VirtualArray Tween_obj::set_onCompleteArgs(::cpp::VirtualArray value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_481_set_onCompleteArgs)
HXDLIN( 481)		return (this->_hx___onCompleteArgs = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_onCompleteArgs,return )

 ::starling::animation::Tween Tween_obj::get_nextTween(){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_486_get_nextTween)
HXDLIN( 486)		return this->_hx___nextTween;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tween_obj,get_nextTween,return )

 ::starling::animation::Tween Tween_obj::set_nextTween( ::starling::animation::Tween value){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_487_set_nextTween)
HXDLIN( 487)		return (this->_hx___nextTween = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,set_nextTween,return )

::String Tween_obj::HINT_MARKER;

::String Tween_obj::getPropertyHint(::String property){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_298_getPropertyHint)
HXLINE( 300)		bool _hx_tmp;
HXDLIN( 300)		if ((property.indexOf(HX_("color",63,71,5c,4a),null()) == (int)-1)) {
HXLINE( 300)			_hx_tmp = (property.indexOf(HX_("Color",43,e1,89,dd),null()) != (int)-1);
            		}
            		else {
HXLINE( 300)			_hx_tmp = true;
            		}
HXDLIN( 300)		if (_hx_tmp) {
HXLINE( 301)			return HX_("rgb",0d,db,56,00);
            		}
HXLINE( 303)		int hintMarkerIndex = property.indexOf(HX_("#",23,00,00,00),null());
HXLINE( 304)		if ((hintMarkerIndex != (int)-1)) {
HXLINE( 304)			return property.substr((hintMarkerIndex + (int)1),null());
            		}
            		else {
HXLINE( 305)			return null();
            		}
HXLINE( 304)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,getPropertyHint,return )

::String Tween_obj::getPropertyName(::String property){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_310_getPropertyName)
HXLINE( 311)		int hintMarkerIndex = property.indexOf(HX_("#",23,00,00,00),null());
HXLINE( 312)		if ((hintMarkerIndex != (int)-1)) {
HXLINE( 312)			return property.substring((int)0,hintMarkerIndex);
            		}
            		else {
HXLINE( 313)			return property;
            		}
HXLINE( 312)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,getPropertyName,return )

 ::openfl::_Vector::AbstractVector Tween_obj::sTweenPool;

 ::starling::animation::Tween Tween_obj::fromPool( ::Dynamic target,Float time, ::Dynamic __o_transition){
 ::Dynamic transition = __o_transition.Default(HX_HCSTRING("linear","\xe5","\x51","\xa0","\xec"));
            	HX_GC_STACKFRAME(&_hx_pos_d0e250b39ba959d3_497_fromPool)
HXDLIN( 497)		if ((::openfl::_Vector::IVector_obj::get_length(::starling::animation::Tween_obj::sTweenPool->data) != (int)0)) {
HXDLIN( 497)			return ( ( ::starling::animation::Tween)(::openfl::_Vector::IVector_obj::pop(::starling::animation::Tween_obj::sTweenPool->data)) )->reset(target,time,transition);
            		}
            		else {
HXLINE( 498)			return  ::starling::animation::Tween_obj::__alloc( HX_CTX ,target,time,transition);
            		}
HXLINE( 497)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Tween_obj,fromPool,return )

void Tween_obj::toPool( ::starling::animation::Tween tween){
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_503_toPool)
HXLINE( 505)		tween->_hx___onStart = (tween->_hx___onUpdate = (tween->_hx___onRepeat = (tween->_hx___onComplete = null())));
HXLINE( 506)		tween->_hx___onStartArgs = (tween->_hx___onUpdateArgs = (tween->_hx___onRepeatArgs = (tween->_hx___onCompleteArgs = null())));
HXLINE( 507)		tween->_hx___target = null();
HXLINE( 508)		tween->_hx___transitionFunc = null();
HXLINE( 509)		tween->removeEventListeners(null());
HXLINE( 510)		::openfl::_Vector::IVector_obj::push(::starling::animation::Tween_obj::sTweenPool->data,tween);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tween_obj,toPool,(void))


hx::ObjectPtr< Tween_obj > Tween_obj::__new( ::Dynamic target,Float time, ::Dynamic __o_transition) {
	hx::ObjectPtr< Tween_obj > __this = new Tween_obj();
	__this->__construct(target,time,__o_transition);
	return __this;
}

hx::ObjectPtr< Tween_obj > Tween_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic target,Float time, ::Dynamic __o_transition) {
	Tween_obj *__this = (Tween_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tween_obj), true, "starling.animation.Tween"));
	*(void **)__this = Tween_obj::_hx_vtable;
	__this->__construct(target,time,__o_transition);
	return __this;
}

Tween_obj::Tween_obj()
{
}

void Tween_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tween);
	HX_MARK_MEMBER_NAME(_hx___target,"__target");
	HX_MARK_MEMBER_NAME(_hx___transitionFunc,"__transitionFunc");
	HX_MARK_MEMBER_NAME(_hx___transitionName,"__transitionName");
	HX_MARK_MEMBER_NAME(_hx___properties,"__properties");
	HX_MARK_MEMBER_NAME(_hx___startValues,"__startValues");
	HX_MARK_MEMBER_NAME(_hx___endValues,"__endValues");
	HX_MARK_MEMBER_NAME(_hx___updateFuncs,"__updateFuncs");
	HX_MARK_MEMBER_NAME(_hx___onStart,"__onStart");
	HX_MARK_MEMBER_NAME(_hx___onUpdate,"__onUpdate");
	HX_MARK_MEMBER_NAME(_hx___onRepeat,"__onRepeat");
	HX_MARK_MEMBER_NAME(_hx___onComplete,"__onComplete");
	HX_MARK_MEMBER_NAME(_hx___onStartArgs,"__onStartArgs");
	HX_MARK_MEMBER_NAME(_hx___onUpdateArgs,"__onUpdateArgs");
	HX_MARK_MEMBER_NAME(_hx___onRepeatArgs,"__onRepeatArgs");
	HX_MARK_MEMBER_NAME(_hx___onCompleteArgs,"__onCompleteArgs");
	HX_MARK_MEMBER_NAME(_hx___totalTime,"__totalTime");
	HX_MARK_MEMBER_NAME(_hx___currentTime,"__currentTime");
	HX_MARK_MEMBER_NAME(_hx___progress,"__progress");
	HX_MARK_MEMBER_NAME(_hx___delay,"__delay");
	HX_MARK_MEMBER_NAME(_hx___roundToInt,"__roundToInt");
	HX_MARK_MEMBER_NAME(_hx___nextTween,"__nextTween");
	HX_MARK_MEMBER_NAME(_hx___repeatCount,"__repeatCount");
	HX_MARK_MEMBER_NAME(_hx___repeatDelay,"__repeatDelay");
	HX_MARK_MEMBER_NAME(__reverse,"__reverse");
	HX_MARK_MEMBER_NAME(_hx___currentCycle,"__currentCycle");
	 ::starling::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Tween_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___target,"__target");
	HX_VISIT_MEMBER_NAME(_hx___transitionFunc,"__transitionFunc");
	HX_VISIT_MEMBER_NAME(_hx___transitionName,"__transitionName");
	HX_VISIT_MEMBER_NAME(_hx___properties,"__properties");
	HX_VISIT_MEMBER_NAME(_hx___startValues,"__startValues");
	HX_VISIT_MEMBER_NAME(_hx___endValues,"__endValues");
	HX_VISIT_MEMBER_NAME(_hx___updateFuncs,"__updateFuncs");
	HX_VISIT_MEMBER_NAME(_hx___onStart,"__onStart");
	HX_VISIT_MEMBER_NAME(_hx___onUpdate,"__onUpdate");
	HX_VISIT_MEMBER_NAME(_hx___onRepeat,"__onRepeat");
	HX_VISIT_MEMBER_NAME(_hx___onComplete,"__onComplete");
	HX_VISIT_MEMBER_NAME(_hx___onStartArgs,"__onStartArgs");
	HX_VISIT_MEMBER_NAME(_hx___onUpdateArgs,"__onUpdateArgs");
	HX_VISIT_MEMBER_NAME(_hx___onRepeatArgs,"__onRepeatArgs");
	HX_VISIT_MEMBER_NAME(_hx___onCompleteArgs,"__onCompleteArgs");
	HX_VISIT_MEMBER_NAME(_hx___totalTime,"__totalTime");
	HX_VISIT_MEMBER_NAME(_hx___currentTime,"__currentTime");
	HX_VISIT_MEMBER_NAME(_hx___progress,"__progress");
	HX_VISIT_MEMBER_NAME(_hx___delay,"__delay");
	HX_VISIT_MEMBER_NAME(_hx___roundToInt,"__roundToInt");
	HX_VISIT_MEMBER_NAME(_hx___nextTween,"__nextTween");
	HX_VISIT_MEMBER_NAME(_hx___repeatCount,"__repeatCount");
	HX_VISIT_MEMBER_NAME(_hx___repeatDelay,"__repeatDelay");
	HX_VISIT_MEMBER_NAME(__reverse,"__reverse");
	HX_VISIT_MEMBER_NAME(_hx___currentCycle,"__currentCycle");
	 ::starling::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Tween_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"delay") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_delay() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"fadeTo") ) { return hx::Val( fadeTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"target") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_target() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__delay") ) { return hx::Val( _hx___delay ); }
		if (HX_FIELD_EQ(inName,"animate") ) { return hx::Val( animate_dyn() ); }
		if (HX_FIELD_EQ(inName,"scaleTo") ) { return hx::Val( scaleTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_reverse() ); }
		if (HX_FIELD_EQ(inName,"onStart") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onStart() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__target") ) { return hx::Val( _hx___target ); }
		if (HX_FIELD_EQ(inName,"rotateTo") ) { return hx::Val( rotateTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"progress") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_progress() ); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onUpdate() ); }
		if (HX_FIELD_EQ(inName,"onRepeat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onRepeat() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__onStart") ) { return hx::Val( _hx___onStart ); }
		if (HX_FIELD_EQ(inName,"__reverse") ) { return hx::Val( __reverse ); }
		if (HX_FIELD_EQ(inName,"updateRgb") ) { return hx::Val( updateRgb_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateRad") ) { return hx::Val( updateRad_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateDeg") ) { return hx::Val( updateDeg_dyn() ); }
		if (HX_FIELD_EQ(inName,"totalTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_totalTime() ); }
		if (HX_FIELD_EQ(inName,"get_delay") ) { return hx::Val( get_delay_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_delay") ) { return hx::Val( set_delay_dyn() ); }
		if (HX_FIELD_EQ(inName,"nextTween") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_nextTween() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__onUpdate") ) { return hx::Val( _hx___onUpdate ); }
		if (HX_FIELD_EQ(inName,"__onRepeat") ) { return hx::Val( _hx___onRepeat ); }
		if (HX_FIELD_EQ(inName,"__progress") ) { return hx::Val( _hx___progress ); }
		if (HX_FIELD_EQ(inName,"isComplete") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isComplete() ); }
		if (HX_FIELD_EQ(inName,"get_target") ) { return hx::Val( get_target_dyn() ); }
		if (HX_FIELD_EQ(inName,"transition") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transition() ); }
		if (HX_FIELD_EQ(inName,"roundToInt") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_roundToInt() ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onComplete() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__endValues") ) { return hx::Val( _hx___endValues ); }
		if (HX_FIELD_EQ(inName,"__totalTime") ) { return hx::Val( _hx___totalTime ); }
		if (HX_FIELD_EQ(inName,"__nextTween") ) { return hx::Val( _hx___nextTween ); }
		if (HX_FIELD_EQ(inName,"advanceTime") ) { return hx::Val( advanceTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateAngle") ) { return hx::Val( updateAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEndValue") ) { return hx::Val( getEndValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_currentTime() ); }
		if (HX_FIELD_EQ(inName,"repeatCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_repeatCount() ); }
		if (HX_FIELD_EQ(inName,"repeatDelay") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_repeatDelay() ); }
		if (HX_FIELD_EQ(inName,"get_reverse") ) { return hx::Val( get_reverse_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_reverse") ) { return hx::Val( set_reverse_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onStart") ) { return hx::Val( get_onStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onStart") ) { return hx::Val( set_onStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"onStartArgs") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onStartArgs() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__properties") ) { return hx::Val( _hx___properties ); }
		if (HX_FIELD_EQ(inName,"__onComplete") ) { return hx::Val( _hx___onComplete ); }
		if (HX_FIELD_EQ(inName,"__roundToInt") ) { return hx::Val( _hx___roundToInt ); }
		if (HX_FIELD_EQ(inName,"get_progress") ) { return hx::Val( get_progress_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onUpdate") ) { return hx::Val( get_onUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onUpdate") ) { return hx::Val( set_onUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onRepeat") ) { return hx::Val( get_onRepeat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onRepeat") ) { return hx::Val( set_onRepeat_dyn() ); }
		if (HX_FIELD_EQ(inName,"onUpdateArgs") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onUpdateArgs() ); }
		if (HX_FIELD_EQ(inName,"onRepeatArgs") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onRepeatArgs() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__startValues") ) { return hx::Val( _hx___startValues ); }
		if (HX_FIELD_EQ(inName,"__updateFuncs") ) { return hx::Val( _hx___updateFuncs ); }
		if (HX_FIELD_EQ(inName,"__onStartArgs") ) { return hx::Val( _hx___onStartArgs ); }
		if (HX_FIELD_EQ(inName,"__currentTime") ) { return hx::Val( _hx___currentTime ); }
		if (HX_FIELD_EQ(inName,"__repeatCount") ) { return hx::Val( _hx___repeatCount ); }
		if (HX_FIELD_EQ(inName,"__repeatDelay") ) { return hx::Val( _hx___repeatDelay ); }
		if (HX_FIELD_EQ(inName,"get_totalTime") ) { return hx::Val( get_totalTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_nextTween") ) { return hx::Val( get_nextTween_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_nextTween") ) { return hx::Val( set_nextTween_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__onUpdateArgs") ) { return hx::Val( _hx___onUpdateArgs ); }
		if (HX_FIELD_EQ(inName,"__onRepeatArgs") ) { return hx::Val( _hx___onRepeatArgs ); }
		if (HX_FIELD_EQ(inName,"__currentCycle") ) { return hx::Val( _hx___currentCycle ); }
		if (HX_FIELD_EQ(inName,"updateStandard") ) { return hx::Val( updateStandard_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isComplete") ) { return hx::Val( get_isComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_transition") ) { return hx::Val( get_transition_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transition") ) { return hx::Val( set_transition_dyn() ); }
		if (HX_FIELD_EQ(inName,"transitionFunc") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transitionFunc() ); }
		if (HX_FIELD_EQ(inName,"get_roundToInt") ) { return hx::Val( get_roundToInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_roundToInt") ) { return hx::Val( set_roundToInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onComplete") ) { return hx::Val( get_onComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onComplete") ) { return hx::Val( set_onComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"onCompleteArgs") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onCompleteArgs() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_currentTime") ) { return hx::Val( get_currentTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_repeatCount") ) { return hx::Val( get_repeatCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_repeatCount") ) { return hx::Val( set_repeatCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_repeatDelay") ) { return hx::Val( get_repeatDelay_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_repeatDelay") ) { return hx::Val( set_repeatDelay_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onStartArgs") ) { return hx::Val( get_onStartArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onStartArgs") ) { return hx::Val( set_onStartArgs_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transitionFunc") ) { return hx::Val( _hx___transitionFunc ); }
		if (HX_FIELD_EQ(inName,"__transitionName") ) { return hx::Val( _hx___transitionName ); }
		if (HX_FIELD_EQ(inName,"__onCompleteArgs") ) { return hx::Val( _hx___onCompleteArgs ); }
		if (HX_FIELD_EQ(inName,"animatesProperty") ) { return hx::Val( animatesProperty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onUpdateArgs") ) { return hx::Val( get_onUpdateArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onUpdateArgs") ) { return hx::Val( set_onUpdateArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onRepeatArgs") ) { return hx::Val( get_onRepeatArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onRepeatArgs") ) { return hx::Val( set_onRepeatArgs_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_transitionFunc") ) { return hx::Val( get_transitionFunc_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_transitionFunc") ) { return hx::Val( set_transitionFunc_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onCompleteArgs") ) { return hx::Val( get_onCompleteArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onCompleteArgs") ) { return hx::Val( set_onCompleteArgs_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"getUpdateFuncFromProperty") ) { return hx::Val( getUpdateFuncFromProperty_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Tween_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"toPool") ) { outValue = toPool_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromPool") ) { outValue = fromPool_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sTweenPool") ) { outValue = ( sTweenPool ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getPropertyHint") ) { outValue = getPropertyHint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPropertyName") ) { outValue = getPropertyName_dyn(); return true; }
	}
	return false;
}

hx::Val Tween_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_delay(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__delay") ) { _hx___delay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reverse") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_reverse(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"onStart") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onStart(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__target") ) { _hx___target=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onUpdate(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"onRepeat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onRepeat(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__onStart") ) { _hx___onStart=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__reverse") ) { __reverse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextTween") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_nextTween(inValue.Cast<  ::starling::animation::Tween >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__onUpdate") ) { _hx___onUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__onRepeat") ) { _hx___onRepeat=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__progress") ) { _hx___progress=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transition") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transition(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"roundToInt") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_roundToInt(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onComplete(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__endValues") ) { _hx___endValues=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__totalTime") ) { _hx___totalTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__nextTween") ) { _hx___nextTween=inValue.Cast<  ::starling::animation::Tween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"repeatCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_repeatCount(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"repeatDelay") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_repeatDelay(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"onStartArgs") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onStartArgs(inValue.Cast< ::cpp::VirtualArray >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__properties") ) { _hx___properties=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__onComplete") ) { _hx___onComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__roundToInt") ) { _hx___roundToInt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onUpdateArgs") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onUpdateArgs(inValue.Cast< ::cpp::VirtualArray >()) ); }
		if (HX_FIELD_EQ(inName,"onRepeatArgs") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onRepeatArgs(inValue.Cast< ::cpp::VirtualArray >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__startValues") ) { _hx___startValues=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__updateFuncs") ) { _hx___updateFuncs=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__onStartArgs") ) { _hx___onStartArgs=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentTime") ) { _hx___currentTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__repeatCount") ) { _hx___repeatCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__repeatDelay") ) { _hx___repeatDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__onUpdateArgs") ) { _hx___onUpdateArgs=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__onRepeatArgs") ) { _hx___onRepeatArgs=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentCycle") ) { _hx___currentCycle=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transitionFunc") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transitionFunc(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"onCompleteArgs") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onCompleteArgs(inValue.Cast< ::cpp::VirtualArray >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transitionFunc") ) { _hx___transitionFunc=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transitionName") ) { _hx___transitionName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__onCompleteArgs") ) { _hx___onCompleteArgs=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Tween_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"sTweenPool") ) { sTweenPool=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
	}
	return false;
}

void Tween_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__target","\x71","\x5e","\x1c","\x2f"));
	outFields->push(HX_HCSTRING("__transitionName","\xa0","\xa5","\xc6","\x8e"));
	outFields->push(HX_HCSTRING("__properties","\x13","\x77","\xa2","\x99"));
	outFields->push(HX_HCSTRING("__startValues","\xc4","\xa2","\x15","\x10"));
	outFields->push(HX_HCSTRING("__endValues","\xfd","\x9a","\xc5","\xbd"));
	outFields->push(HX_HCSTRING("__updateFuncs","\xc6","\x9a","\x99","\x36"));
	outFields->push(HX_HCSTRING("__onStart","\xa3","\x63","\x97","\x9b"));
	outFields->push(HX_HCSTRING("__onUpdate","\xa8","\xef","\xea","\x09"));
	outFields->push(HX_HCSTRING("__onRepeat","\xfa","\x00","\x62","\x89"));
	outFields->push(HX_HCSTRING("__onComplete","\x18","\x50","\x12","\x96"));
	outFields->push(HX_HCSTRING("__onStartArgs","\xa0","\x2a","\x23","\x64"));
	outFields->push(HX_HCSTRING("__onUpdateArgs","\x25","\x9d","\x2d","\xf2"));
	outFields->push(HX_HCSTRING("__onRepeatArgs","\x77","\xbf","\xdc","\xff"));
	outFields->push(HX_HCSTRING("__onCompleteArgs","\x95","\xf5","\x65","\x12"));
	outFields->push(HX_HCSTRING("__totalTime","\xd1","\xc6","\xe3","\x97"));
	outFields->push(HX_HCSTRING("__currentTime","\xc6","\xe5","\x06","\xce"));
	outFields->push(HX_HCSTRING("__progress","\xcd","\x6a","\x63","\x29"));
	outFields->push(HX_HCSTRING("__delay","\x63","\x30","\x85","\x41"));
	outFields->push(HX_HCSTRING("__roundToInt","\x26","\xd6","\x9f","\xf5"));
	outFields->push(HX_HCSTRING("__nextTween","\x58","\x0d","\xe2","\xee"));
	outFields->push(HX_HCSTRING("__repeatCount","\x54","\xd4","\x02","\x64"));
	outFields->push(HX_HCSTRING("__repeatDelay","\x08","\x67","\xc6","\xf0"));
	outFields->push(HX_HCSTRING("__reverse","\x02","\x8a","\x4a","\x9c"));
	outFields->push(HX_HCSTRING("__currentCycle","\xcd","\x24","\xbe","\xb8"));
	outFields->push(HX_HCSTRING("isComplete","\xc3","\x12","\x77","\xfa"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("transition","\x95","\x8d","\xaf","\x58"));
	outFields->push(HX_HCSTRING("totalTime","\xf1","\x7d","\xb7","\x69"));
	outFields->push(HX_HCSTRING("currentTime","\xe6","\xa4","\x8e","\x85"));
	outFields->push(HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"));
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("repeatCount","\x74","\x93","\x8a","\x1b"));
	outFields->push(HX_HCSTRING("repeatDelay","\x28","\x26","\x4e","\xa8"));
	outFields->push(HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"));
	outFields->push(HX_HCSTRING("roundToInt","\x06","\x5b","\x0c","\xbd"));
	outFields->push(HX_HCSTRING("onStart","\xc3","\x12","\x49","\x1a"));
	outFields->push(HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"));
	outFields->push(HX_HCSTRING("onRepeat","\xda","\x8d","\x29","\xe6"));
	outFields->push(HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"));
	outFields->push(HX_HCSTRING("onStartArgs","\xc0","\xe9","\xaa","\x1b"));
	outFields->push(HX_HCSTRING("onUpdateArgs","\x05","\x1a","\x6d","\xd1"));
	outFields->push(HX_HCSTRING("onRepeatArgs","\x57","\x3c","\x1c","\xdf"));
	outFields->push(HX_HCSTRING("onCompleteArgs","\x75","\x6a","\x26","\xde"));
	outFields->push(HX_HCSTRING("nextTween","\x78","\xc4","\xb5","\xc0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tween_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tween_obj,_hx___target),HX_HCSTRING("__target","\x71","\x5e","\x1c","\x2f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tween_obj,_hx___transitionFunc),HX_HCSTRING("__transitionFunc","\x99","\x1e","\x8c","\x89")},
	{hx::fsString,(int)offsetof(Tween_obj,_hx___transitionName),HX_HCSTRING("__transitionName","\xa0","\xa5","\xc6","\x8e")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Tween_obj,_hx___properties),HX_HCSTRING("__properties","\x13","\x77","\xa2","\x99")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Tween_obj,_hx___startValues),HX_HCSTRING("__startValues","\xc4","\xa2","\x15","\x10")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Tween_obj,_hx___endValues),HX_HCSTRING("__endValues","\xfd","\x9a","\xc5","\xbd")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(Tween_obj,_hx___updateFuncs),HX_HCSTRING("__updateFuncs","\xc6","\x9a","\x99","\x36")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tween_obj,_hx___onStart),HX_HCSTRING("__onStart","\xa3","\x63","\x97","\x9b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tween_obj,_hx___onUpdate),HX_HCSTRING("__onUpdate","\xa8","\xef","\xea","\x09")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tween_obj,_hx___onRepeat),HX_HCSTRING("__onRepeat","\xfa","\x00","\x62","\x89")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Tween_obj,_hx___onComplete),HX_HCSTRING("__onComplete","\x18","\x50","\x12","\x96")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Tween_obj,_hx___onStartArgs),HX_HCSTRING("__onStartArgs","\xa0","\x2a","\x23","\x64")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Tween_obj,_hx___onUpdateArgs),HX_HCSTRING("__onUpdateArgs","\x25","\x9d","\x2d","\xf2")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Tween_obj,_hx___onRepeatArgs),HX_HCSTRING("__onRepeatArgs","\x77","\xbf","\xdc","\xff")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Tween_obj,_hx___onCompleteArgs),HX_HCSTRING("__onCompleteArgs","\x95","\xf5","\x65","\x12")},
	{hx::fsFloat,(int)offsetof(Tween_obj,_hx___totalTime),HX_HCSTRING("__totalTime","\xd1","\xc6","\xe3","\x97")},
	{hx::fsFloat,(int)offsetof(Tween_obj,_hx___currentTime),HX_HCSTRING("__currentTime","\xc6","\xe5","\x06","\xce")},
	{hx::fsFloat,(int)offsetof(Tween_obj,_hx___progress),HX_HCSTRING("__progress","\xcd","\x6a","\x63","\x29")},
	{hx::fsFloat,(int)offsetof(Tween_obj,_hx___delay),HX_HCSTRING("__delay","\x63","\x30","\x85","\x41")},
	{hx::fsBool,(int)offsetof(Tween_obj,_hx___roundToInt),HX_HCSTRING("__roundToInt","\x26","\xd6","\x9f","\xf5")},
	{hx::fsObject /*::starling::animation::Tween*/ ,(int)offsetof(Tween_obj,_hx___nextTween),HX_HCSTRING("__nextTween","\x58","\x0d","\xe2","\xee")},
	{hx::fsInt,(int)offsetof(Tween_obj,_hx___repeatCount),HX_HCSTRING("__repeatCount","\x54","\xd4","\x02","\x64")},
	{hx::fsFloat,(int)offsetof(Tween_obj,_hx___repeatDelay),HX_HCSTRING("__repeatDelay","\x08","\x67","\xc6","\xf0")},
	{hx::fsBool,(int)offsetof(Tween_obj,__reverse),HX_HCSTRING("__reverse","\x02","\x8a","\x4a","\x9c")},
	{hx::fsInt,(int)offsetof(Tween_obj,_hx___currentCycle),HX_HCSTRING("__currentCycle","\xcd","\x24","\xbe","\xb8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Tween_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Tween_obj::HINT_MARKER,HX_HCSTRING("HINT_MARKER","\xb2","\xfc","\x4f","\xf9")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &Tween_obj::sTweenPool,HX_HCSTRING("sTweenPool","\xf4","\x21","\x6a","\x84")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Tween_obj_sMemberFields[] = {
	HX_HCSTRING("__target","\x71","\x5e","\x1c","\x2f"),
	HX_HCSTRING("__transitionFunc","\x99","\x1e","\x8c","\x89"),
	HX_HCSTRING("__transitionName","\xa0","\xa5","\xc6","\x8e"),
	HX_HCSTRING("__properties","\x13","\x77","\xa2","\x99"),
	HX_HCSTRING("__startValues","\xc4","\xa2","\x15","\x10"),
	HX_HCSTRING("__endValues","\xfd","\x9a","\xc5","\xbd"),
	HX_HCSTRING("__updateFuncs","\xc6","\x9a","\x99","\x36"),
	HX_HCSTRING("__onStart","\xa3","\x63","\x97","\x9b"),
	HX_HCSTRING("__onUpdate","\xa8","\xef","\xea","\x09"),
	HX_HCSTRING("__onRepeat","\xfa","\x00","\x62","\x89"),
	HX_HCSTRING("__onComplete","\x18","\x50","\x12","\x96"),
	HX_HCSTRING("__onStartArgs","\xa0","\x2a","\x23","\x64"),
	HX_HCSTRING("__onUpdateArgs","\x25","\x9d","\x2d","\xf2"),
	HX_HCSTRING("__onRepeatArgs","\x77","\xbf","\xdc","\xff"),
	HX_HCSTRING("__onCompleteArgs","\x95","\xf5","\x65","\x12"),
	HX_HCSTRING("__totalTime","\xd1","\xc6","\xe3","\x97"),
	HX_HCSTRING("__currentTime","\xc6","\xe5","\x06","\xce"),
	HX_HCSTRING("__progress","\xcd","\x6a","\x63","\x29"),
	HX_HCSTRING("__delay","\x63","\x30","\x85","\x41"),
	HX_HCSTRING("__roundToInt","\x26","\xd6","\x9f","\xf5"),
	HX_HCSTRING("__nextTween","\x58","\x0d","\xe2","\xee"),
	HX_HCSTRING("__repeatCount","\x54","\xd4","\x02","\x64"),
	HX_HCSTRING("__repeatDelay","\x08","\x67","\xc6","\xf0"),
	HX_HCSTRING("__reverse","\x02","\x8a","\x4a","\x9c"),
	HX_HCSTRING("__currentCycle","\xcd","\x24","\xbe","\xb8"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("animate","\xa1","\xda","\x4c","\x7a"),
	HX_HCSTRING("scaleTo","\xa5","\x4e","\x07","\x65"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("fadeTo","\x17","\x56","\xab","\xe4"),
	HX_HCSTRING("rotateTo","\xb6","\x1c","\x83","\x08"),
	HX_HCSTRING("advanceTime","\xaf","\x69","\x9d","\xab"),
	HX_HCSTRING("getUpdateFuncFromProperty","\xa2","\xca","\x21","\x41"),
	HX_HCSTRING("updateStandard","\x66","\x2a","\xa2","\x1f"),
	HX_HCSTRING("updateRgb","\x84","\xb8","\xe3","\x82"),
	HX_HCSTRING("updateRad","\x4c","\xb3","\xe3","\x82"),
	HX_HCSTRING("updateDeg","\x3d","\x17","\xd9","\x82"),
	HX_HCSTRING("updateAngle","\x0a","\xad","\x7a","\x08"),
	HX_HCSTRING("getEndValue","\x4c","\xd4","\xa9","\x55"),
	HX_HCSTRING("animatesProperty","\x27","\x79","\x79","\x7d"),
	HX_HCSTRING("get_isComplete","\x0c","\x9b","\x6c","\x70"),
	HX_HCSTRING("get_target","\x1a","\x63","\x74","\x77"),
	HX_HCSTRING("get_transition","\xde","\x15","\xa5","\xce"),
	HX_HCSTRING("set_transition","\x52","\xfe","\xc4","\xee"),
	HX_HCSTRING("get_transitionFunc","\x42","\x74","\xe6","\xf0"),
	HX_HCSTRING("set_transitionFunc","\xb6","\xa6","\x95","\xcd"),
	HX_HCSTRING("get_totalTime","\xc8","\x51","\x1b","\x2b"),
	HX_HCSTRING("get_currentTime","\x7d","\x5c","\x70","\x46"),
	HX_HCSTRING("get_progress","\xb6","\xab","\x44","\x3b"),
	HX_HCSTRING("get_delay","\xda","\x33","\xd0","\x1a"),
	HX_HCSTRING("set_delay","\xe6","\x1f","\x21","\xfe"),
	HX_HCSTRING("get_repeatCount","\x0b","\x4b","\x6c","\xdc"),
	HX_HCSTRING("set_repeatCount","\x17","\xc8","\x37","\xd8"),
	HX_HCSTRING("get_repeatDelay","\xbf","\xdd","\x2f","\x69"),
	HX_HCSTRING("set_repeatDelay","\xcb","\x5a","\xfb","\x64"),
	HX_HCSTRING("get_reverse","\x39","\x99","\xf6","\xa0"),
	HX_HCSTRING("set_reverse","\x45","\xa0","\x63","\xab"),
	HX_HCSTRING("get_roundToInt","\x4f","\xe3","\x01","\x33"),
	HX_HCSTRING("set_roundToInt","\xc3","\xcb","\x21","\x53"),
	HX_HCSTRING("get_onStart","\xda","\x72","\x43","\xa0"),
	HX_HCSTRING("set_onStart","\xe6","\x79","\xb0","\xaa"),
	HX_HCSTRING("get_onUpdate","\x91","\x30","\xcc","\x1b"),
	HX_HCSTRING("set_onUpdate","\x05","\x54","\xc5","\x30"),
	HX_HCSTRING("get_onRepeat","\xe3","\x41","\x43","\x9b"),
	HX_HCSTRING("set_onRepeat","\x57","\x65","\x3c","\xb0"),
	HX_HCSTRING("get_onComplete","\x41","\x5d","\x74","\xd3"),
	HX_HCSTRING("set_onComplete","\xb5","\x45","\x94","\xf3"),
	HX_HCSTRING("get_onStartArgs","\x57","\xa1","\x8c","\xdc"),
	HX_HCSTRING("set_onStartArgs","\x63","\x1e","\x58","\xd8"),
	HX_HCSTRING("get_onUpdateArgs","\x8e","\x06","\x0c","\xd6"),
	HX_HCSTRING("set_onUpdateArgs","\x02","\xf4","\x4d","\x2c"),
	HX_HCSTRING("get_onRepeatArgs","\xe0","\x28","\xbb","\xe3"),
	HX_HCSTRING("set_onRepeatArgs","\x54","\x16","\xfd","\x39"),
	HX_HCSTRING("get_onCompleteArgs","\x3e","\x4b","\xc0","\x79"),
	HX_HCSTRING("set_onCompleteArgs","\xb2","\x7d","\x6f","\x56"),
	HX_HCSTRING("get_nextTween","\x4f","\x98","\x19","\x82"),
	HX_HCSTRING("set_nextTween","\x5b","\x7a","\x1f","\xc7"),
	::String(null()) };

static void Tween_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tween_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Tween_obj::HINT_MARKER,"HINT_MARKER");
	HX_MARK_MEMBER_NAME(Tween_obj::sTweenPool,"sTweenPool");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tween_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tween_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Tween_obj::HINT_MARKER,"HINT_MARKER");
	HX_VISIT_MEMBER_NAME(Tween_obj::sTweenPool,"sTweenPool");
};

#endif

hx::Class Tween_obj::__mClass;

static ::String Tween_obj_sStaticFields[] = {
	HX_HCSTRING("HINT_MARKER","\xb2","\xfc","\x4f","\xf9"),
	HX_HCSTRING("getPropertyHint","\x32","\x56","\xdd","\x45"),
	HX_HCSTRING("getPropertyName","\xf6","\x8a","\xce","\x49"),
	HX_HCSTRING("sTweenPool","\xf4","\x21","\x6a","\x84"),
	HX_HCSTRING("fromPool","\x66","\x4f","\x28","\xa8"),
	HX_HCSTRING("toPool","\xf7","\xeb","\x15","\x80"),
	::String(null())
};

void Tween_obj::__register()
{
	hx::Object *dummy = new Tween_obj;
	Tween_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.animation.Tween","\xbb","\x7d","\x4e","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tween_obj::__GetStatic;
	__mClass->mSetStaticField = &Tween_obj::__SetStatic;
	__mClass->mMarkFunc = Tween_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Tween_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tween_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tween_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tween_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tween_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tween_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Tween_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_50_boot)
HXDLIN(  50)		HINT_MARKER = HX_("#",23,00,00,00);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_d0e250b39ba959d3_491_boot)
HXDLIN( 491)			int length = null();
HXDLIN( 491)			bool fixed = null();
HXDLIN( 491)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d0e250b39ba959d3_491_boot)
HXDLIN( 491)		sTweenPool =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace starling
} // end namespace animation
