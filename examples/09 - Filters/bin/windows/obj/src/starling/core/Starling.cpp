// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DProfile_Context3DProfile_Impl_
#include <openfl/display3D/_Context3DProfile/Context3DProfile_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DRenderMode_Context3DRenderMode_Impl_
#include <openfl/display3D/_Context3DRenderMode/Context3DRenderMode_Impl_.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TouchEvent
#include <openfl/events/TouchEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_openfl_system_Capabilities
#include <openfl/system/Capabilities.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif
#ifndef INCLUDED_openfl_ui_Multitouch
#include <openfl/ui/Multitouch.h>
#endif
#ifndef INCLUDED_starling_animation_IAnimatable
#include <starling/animation/IAnimatable.h>
#endif
#ifndef INCLUDED_starling_animation_Juggler
#include <starling/animation/Juggler.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_core_StatsDisplay
#include <starling/core/StatsDisplay.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_events_KeyboardEvent
#include <starling/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_starling_events_ResizeEvent
#include <starling/events/ResizeEvent.h>
#endif
#ifndef INCLUDED_starling_events_TouchProcessor
#include <starling/events/TouchProcessor.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_utils_Color
#include <starling/utils/Color.h>
#endif
#ifndef INCLUDED_starling_utils_RectangleUtil
#include <starling/utils/RectangleUtil.h>
#endif
#ifndef INCLUDED_starling_utils_SystemUtil
#include <starling/utils/SystemUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_37f1f4957768d1d8_272_new,"starling.core.Starling","new",0x2aade923,"starling.core.Starling.new","starling/core/Starling.hx",272,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_340_dispose,"starling.core.Starling","dispose",0xffb5b6e2,"starling.core.Starling.dispose","starling/core/Starling.hx",340,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_369_initialize,"starling.core.Starling","initialize",0x6dc106ed,"starling.core.Starling.initialize","starling/core/Starling.hx",369,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_382_initializeRoot,"starling.core.Starling","initializeRoot",0xf63b9baf,"starling.core.Starling.initializeRoot","starling/core/Starling.hx",382,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_395_nextFrame,"starling.core.Starling","nextFrame",0xc79e1f3d,"starling.core.Starling.nextFrame","starling/core/Starling.hx",395,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_413_advanceTime,"starling.core.Starling","advanceTime",0x0fb27d72,"starling.core.Starling.advanceTime","starling/core/Starling.hx",413,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_431_render,"starling.core.Starling","render",0xad12ee73,"starling.core.Starling.render","starling/core/Starling.hx",431,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_480_updateViewPort,"starling.core.Starling","updateViewPort",0x63a5d3cc,"starling.core.Starling.updateViewPort","starling/core/Starling.hx",480,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_505_updateNativeOverlay,"starling.core.Starling","updateNativeOverlay",0x956b19b3,"starling.core.Starling.updateNativeOverlay","starling/core/Starling.hx",505,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_515_stopWithFatalError,"starling.core.Starling","stopWithFatalError",0x3af0f109,"starling.core.Starling.stopWithFatalError","starling/core/Starling.hx",515,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_546_makeCurrent,"starling.core.Starling","makeCurrent",0x7402d7ae,"starling.core.Starling.makeCurrent","starling/core/Starling.hx",546,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_554_start,"starling.core.Starling","start",0x8baf83e5,"starling.core.Starling.start","starling/core/Starling.hx",554,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_572_stop,"starling.core.Starling","stop",0x30d781df,"starling.core.Starling.stop","starling/core/Starling.hx",572,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_586_setRequiresRedraw,"starling.core.Starling","setRequiresRedraw",0xddeb008a,"starling.core.Starling.setRequiresRedraw","starling/core/Starling.hx",586,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_593_onStage3DError,"starling.core.Starling","onStage3DError",0x8a55be35,"starling.core.Starling.onStage3DError","starling/core/Starling.hx",593,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_604_onContextCreated,"starling.core.Starling","onContextCreated",0x303cea95,"starling.core.Starling.onContextCreated","starling/core/Starling.hx",604,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_613_onContextRestored,"starling.core.Starling","onContextRestored",0xc8c5e009,"starling.core.Starling.onContextRestored","starling/core/Starling.hx",613,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_620_onEnterFrame,"starling.core.Starling","onEnterFrame",0x08efdcd1,"starling.core.Starling.onEnterFrame","starling/core/Starling.hx",620,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_634_onKey,"starling.core.Starling","onKey",0x3a0d2d43,"starling.core.Starling.onKey","starling/core/Starling.hx",634,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_654_onResize,"starling.core.Starling","onResize",0x7fce94d0,"starling.core.Starling.onResize","starling/core/Starling.hx",654,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_649_onResize,"starling.core.Starling","onResize",0x7fce94d0,"starling.core.Starling.onResize","starling/core/Starling.hx",649,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_671_onMouseLeave,"starling.core.Starling","onMouseLeave",0x96c0016e,"starling.core.Starling.onMouseLeave","starling/core/Starling.hx",671,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_675_onTouch,"starling.core.Starling","onTouch",0xeed9ec63,"starling.core.Starling.onTouch","starling/core/Starling.hx",675,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_746_get_touchEventTypes,"starling.core.Starling","get_touchEventTypes",0x462d3878,"starling.core.Starling.get_touchEventTypes","starling/core/Starling.hx",746,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_773_get_mustAlwaysRender,"starling.core.Starling","get_mustAlwaysRender",0x552bd814,"starling.core.Starling.get_mustAlwaysRender","starling/core/Starling.hx",773,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_792_get_isStarted,"starling.core.Starling","get_isStarted",0x5cd144d1,"starling.core.Starling.get_isStarted","starling/core/Starling.hx",792,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_796_get_juggler,"starling.core.Starling","get_juggler",0x7c60dce8,"starling.core.Starling.get_juggler","starling/core/Starling.hx",796,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_801_get_painter,"starling.core.Starling","get_painter",0xa2322765,"starling.core.Starling.get_painter","starling/core/Starling.hx",801,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_805_get_context,"starling.core.Starling","get_context",0x038709c9,"starling.core.Starling.get_context","starling/core/Starling.hx",805,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_810_get_simulateMultitouch,"starling.core.Starling","get_simulateMultitouch",0x15ef6dd0,"starling.core.Starling.get_simulateMultitouch","starling/core/Starling.hx",810,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_813_set_simulateMultitouch,"starling.core.Starling","set_simulateMultitouch",0x499aea44,"starling.core.Starling.set_simulateMultitouch","starling/core/Starling.hx",813,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_823_get_enableErrorChecking,"starling.core.Starling","get_enableErrorChecking",0xdcf40f59,"starling.core.Starling.get_enableErrorChecking","starling/core/Starling.hx",823,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_826_set_enableErrorChecking,"starling.core.Starling","set_enableErrorChecking",0xdf557865,"starling.core.Starling.set_enableErrorChecking","starling/core/Starling.hx",826,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_831_get_antiAliasing,"starling.core.Starling","get_antiAliasing",0x964128fa,"starling.core.Starling.get_antiAliasing","starling/core/Starling.hx",831,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_833_set_antiAliasing,"starling.core.Starling","set_antiAliasing",0xec83166e,"starling.core.Starling.set_antiAliasing","starling/core/Starling.hx",833,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_844_get_viewPort,"starling.core.Starling","get_viewPort",0x6af4636c,"starling.core.Starling.get_viewPort","starling/core/Starling.hx",844,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_845_set_viewPort,"starling.core.Starling","set_viewPort",0x7fed86e0,"starling.core.Starling.set_viewPort","starling/core/Starling.hx",845,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_852_get_contentScaleFactor,"starling.core.Starling","get_contentScaleFactor",0x00bfb8a6,"starling.core.Starling.get_contentScaleFactor","starling/core/Starling.hx",852,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_858_get_nativeOverlay,"starling.core.Starling","get_nativeOverlay",0x550fe613,"starling.core.Starling.get_nativeOverlay","starling/core/Starling.hx",858,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_869_get_showStats,"starling.core.Starling","get_showStats",0xd6277a3c,"starling.core.Starling.get_showStats","starling/core/Starling.hx",869,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_871_set_showStats,"starling.core.Starling","set_showStats",0x1b2d5c48,"starling.core.Starling.set_showStats","starling/core/Starling.hx",871,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_892_showStatsAt,"starling.core.Starling","showStatsAt",0x771d6538,"starling.core.Starling.showStatsAt","starling/core/Starling.hx",892,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_890_showStatsAt,"starling.core.Starling","showStatsAt",0x771d6538,"starling.core.Starling.showStatsAt","starling/core/Starling.hx",890,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_932_get_stage,"starling.core.Starling","get_stage",0xe18a5418,"starling.core.Starling.get_stage","starling/core/Starling.hx",932,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_936_get_stage3D,"starling.core.Starling","get_stage3D",0x17d9b6c9,"starling.core.Starling.get_stage3D","starling/core/Starling.hx",936,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_940_get_nativeStage,"starling.core.Starling","get_nativeStage",0x22a65681,"starling.core.Starling.get_nativeStage","starling/core/Starling.hx",940,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_945_get_root,"starling.core.Starling","get_root",0x630fee08,"starling.core.Starling.get_root","starling/core/Starling.hx",945,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_958_get_rootClass,"starling.core.Starling","get_rootClass",0x24d21d10,"starling.core.Starling.get_rootClass","starling/core/Starling.hx",958,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_960_set_rootClass,"starling.core.Starling","set_rootClass",0x69d7ff1c,"starling.core.Starling.set_rootClass","starling/core/Starling.hx",960,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_976_get_shareContext,"starling.core.Starling","get_shareContext",0x9a9e18b6,"starling.core.Starling.get_shareContext","starling/core/Starling.hx",976,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_978_set_shareContext,"starling.core.Starling","set_shareContext",0xf0e0062a,"starling.core.Starling.set_shareContext","starling/core/Starling.hx",978,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_986_get_profile,"starling.core.Starling","get_profile",0xdd58bd03,"starling.core.Starling.get_profile","starling/core/Starling.hx",986,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_993_get_supportHighResolutions,"starling.core.Starling","get_supportHighResolutions",0x8d54df9c,"starling.core.Starling.get_supportHighResolutions","starling/core/Starling.hx",993,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_995_set_supportHighResolutions,"starling.core.Starling","set_supportHighResolutions",0xece9a610,"starling.core.Starling.set_supportHighResolutions","starling/core/Starling.hx",995,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1016_get_skipUnchangedFrames,"starling.core.Starling","get_skipUnchangedFrames",0xc398c4dc,"starling.core.Starling.get_skipUnchangedFrames","starling/core/Starling.hx",1016,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1018_set_skipUnchangedFrames,"starling.core.Starling","set_skipUnchangedFrames",0xc5fa2de8,"starling.core.Starling.set_skipUnchangedFrames","starling/core/Starling.hx",1018,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1028_get_touchProcessor,"starling.core.Starling","get_touchProcessor",0x4eaa30f9,"starling.core.Starling.get_touchProcessor","starling/core/Starling.hx",1028,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1030_set_touchProcessor,"starling.core.Starling","set_touchProcessor",0x2b59636d,"starling.core.Starling.set_touchProcessor","starling/core/Starling.hx",1030,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1042_get_frameID,"starling.core.Starling","get_frameID",0x32835122,"starling.core.Starling.get_frameID","starling/core/Starling.hx",1042,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1047_get_contextValid,"starling.core.Starling","get_contextValid",0x2bf9c273,"starling.core.Starling.get_contextValid","starling/core/Starling.hx",1047,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1100_isNativeDisplayObjectEmpty,"starling.core.Starling","isNativeDisplayObjectEmpty",0xd3054d4a,"starling.core.Starling.isNativeDisplayObjectEmpty","starling/core/Starling.hx",1100,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1053_get_current,"starling.core.Starling","get_current",0xb5f31013,"starling.core.Starling.get_current","starling/core/Starling.hx",1053,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1057_get_all,"starling.core.Starling","get_all",0x6b27f7fb,"starling.core.Starling.get_all","starling/core/Starling.hx",1057,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1078_get_multitouchEnabled,"starling.core.Starling","get_multitouchEnabled",0x7a6f7ed5,"starling.core.Starling.get_multitouchEnabled","starling/core/Starling.hx",1078,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_1082_set_multitouchEnabled,"starling.core.Starling","set_multitouchEnabled",0xce784ce1,"starling.core.Starling.set_multitouchEnabled","starling/core/Starling.hx",1082,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_211_boot,"starling.core.Starling","boot",0x2597160f,"starling.core.Starling.boot","starling/core/Starling.hx",211,0x01bc0b4d)
HX_LOCAL_STACK_FRAME(_hx_pos_37f1f4957768d1d8_241_boot,"starling.core.Starling","boot",0x2597160f,"starling.core.Starling.boot","starling/core/Starling.hx",241,0x01bc0b4d)
namespace starling{
namespace core{

void Starling_obj::__construct(hx::Class rootClass, ::openfl::display::Stage stage, ::openfl::geom::Rectangle viewPort, ::openfl::display::Stage3D stage3D, ::Dynamic __o_renderMode, ::Dynamic __o_profile){
 ::Dynamic renderMode = __o_renderMode.Default(0);
 ::Dynamic profile = __o_profile.Default(HX_HCSTRING("auto","\x6f","\xdf","\x76","\x40"));
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_272_new)
HXLINE( 273)		super::__construct();
HXLINE( 275)		if (hx::IsNull( stage )) {
HXLINE( 275)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Stage must not be null",22,1d,90,c7)));
            		}
HXLINE( 276)		if (hx::IsNull( viewPort )) {
HXLINE( 276)			viewPort =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,stage->stageWidth,stage->stageHeight);
            		}
HXLINE( 277)		if (hx::IsNull( stage3D )) {
HXLINE( 277)			stage3D = ( ( ::openfl::display::Stage3D)(::openfl::_Vector::IVector_obj::get(stage->stage3Ds->data,(int)0)) );
            		}
HXLINE( 281)		::starling::utils::SystemUtil_obj::initialize();
HXLINE( 282)		::openfl::_Vector::IVector_obj::push(::starling::core::Starling_obj::sAll->data,hx::ObjectPtr<OBJ_>(this));
HXLINE( 283)		this->makeCurrent();
HXLINE( 285)		this->_hx___rootClass = rootClass;
HXLINE( 286)		this->_hx___viewPort = viewPort;
HXLINE( 287)		this->_hx___previousViewPort =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 288)		int _hx_tmp = ::Std_obj::_hx_int(viewPort->width);
HXDLIN( 288)		int _hx_tmp1 = ::Std_obj::_hx_int(viewPort->height);
HXDLIN( 288)		this->_hx___stage =  ::starling::display::Stage_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,stage->get_color());
HXLINE( 289)		this->_hx___nativeOverlay =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 290)		this->_hx___nativeStage = stage;
HXLINE( 291)		this->_hx___nativeStage->addChild(this->_hx___nativeOverlay);
HXLINE( 292)		this->_hx___touchProcessor =  ::starling::events::TouchProcessor_obj::__alloc( HX_CTX ,this->_hx___stage);
HXLINE( 293)		this->_hx___juggler =  ::starling::animation::Juggler_obj::__alloc( HX_CTX );
HXLINE( 294)		this->_hx___antiAliasing = (int)0;
HXLINE( 295)		this->_hx___supportHighResolutions = false;
HXLINE( 296)		this->_hx___painter =  ::starling::rendering::Painter_obj::__alloc( HX_CTX ,stage3D);
HXLINE( 297)		this->_hx___frameTimestamp = ((Float)::openfl::Lib_obj::getTimer() / (Float)((Float)1000.0));
HXLINE( 298)		this->_hx___frameID = (int)1;
HXLINE( 301)		stage->scaleMode = (int)2;
HXLINE( 302)		stage->align = (int)6;
HXLINE( 305)		{
HXLINE( 305)			int _g = (int)0;
HXDLIN( 305)			::Array< ::String > _g1 = this->get_touchEventTypes();
HXDLIN( 305)			while((_g < _g1->length)){
HXLINE( 305)				::String touchEventType = _g1->__get(_g);
HXDLIN( 305)				_g = (_g + (int)1);
HXLINE( 306)				stage->addEventListener(touchEventType,this->onTouch_dyn(),false,(int)0,true);
            			}
            		}
HXLINE( 309)		stage->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),false,(int)0,true);
HXLINE( 310)		stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKey_dyn(),false,(int)0,true);
HXLINE( 311)		stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKey_dyn(),false,(int)0,true);
HXLINE( 312)		stage->addEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),false,(int)0,true);
HXLINE( 313)		stage->addEventListener(HX_("mouseLeave",92,28,20,90),this->onMouseLeave_dyn(),false,(int)0,true);
HXLINE( 315)		stage3D->addEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextCreated_dyn(),false,(int)10,true);
HXLINE( 316)		stage3D->addEventListener(HX_("error",c8,cb,29,73),this->onStage3DError_dyn(),false,(int)10,true);
HXLINE( 318)		int runtimeVersion = (int)26;
HXLINE( 319)		if ((runtimeVersion < (int)19)) {
HXLINE( 321)			::String runtime;
HXDLIN( 321)			if (::starling::utils::SystemUtil_obj::get_isAIR()) {
HXLINE( 321)				runtime = HX_("Adobe AIR",99,14,99,5a);
            			}
            			else {
HXLINE( 321)				runtime = HX_("Flash Player",11,64,51,d2);
            			}
HXLINE( 322)			this->stopWithFatalError((((HX_("Your ",ed,7a,61,88) + runtime) + HX_(" installation is outdated. ",0a,53,80,8b)) + HX_("This software requires at least version 19.",35,fa,97,00)));
            		}
            		else {
HXLINE( 326)			if (this->_hx___painter->get_shareContext()) {
HXLINE( 328)				::haxe::Timer_obj::delay(this->initialize_dyn(),(int)1);
            			}
            			else {
HXLINE( 333)				 ::starling::rendering::Painter _hx_tmp2 = this->_hx___painter;
HXDLIN( 333)				_hx_tmp2->requestContext3D(::openfl::display3D::_Context3DRenderMode::Context3DRenderMode_Impl__obj::toString(renderMode),profile);
            			}
            		}
            	}

Dynamic Starling_obj::__CreateEmpty() { return new Starling_obj; }

void *Starling_obj::_hx_vtable = 0;

Dynamic Starling_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Starling_obj > _hx_result = new Starling_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Starling_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
	} else {
		return inClassId==(int)0x4d43a54f;
	}
}

void Starling_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_340_dispose)
HXLINE( 341)		this->stop(true);
HXLINE( 343)		this->_hx___nativeStage->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn(),false);
HXLINE( 344)		this->_hx___nativeStage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKey_dyn(),false);
HXLINE( 345)		this->_hx___nativeStage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKey_dyn(),false);
HXLINE( 346)		this->_hx___nativeStage->removeEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),false);
HXLINE( 347)		this->_hx___nativeStage->removeEventListener(HX_("mouseLeave",92,28,20,90),this->onMouseLeave_dyn(),false);
HXLINE( 348)		this->_hx___nativeStage->removeChild(this->_hx___nativeOverlay);
HXLINE( 350)		this->get_stage3D()->removeEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextCreated_dyn(),false);
HXLINE( 351)		this->get_stage3D()->removeEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextRestored_dyn(),false);
HXLINE( 352)		this->get_stage3D()->removeEventListener(HX_("error",c8,cb,29,73),this->onStage3DError_dyn(),false);
HXLINE( 354)		{
HXLINE( 354)			int _g = (int)0;
HXDLIN( 354)			::Array< ::String > _g1 = this->get_touchEventTypes();
HXDLIN( 354)			while((_g < _g1->length)){
HXLINE( 354)				::String touchEventType = _g1->__get(_g);
HXDLIN( 354)				_g = (_g + (int)1);
HXLINE( 355)				this->_hx___nativeStage->removeEventListener(touchEventType,this->onTouch_dyn(),false);
            			}
            		}
HXLINE( 357)		if (hx::IsNotNull( this->_hx___touchProcessor )) {
HXLINE( 357)			this->_hx___touchProcessor->dispose();
            		}
HXLINE( 358)		if (hx::IsNotNull( this->_hx___painter )) {
HXLINE( 358)			this->_hx___painter->dispose();
            		}
HXLINE( 359)		if (hx::IsNotNull( this->_hx___stage )) {
HXLINE( 359)			this->_hx___stage->dispose();
            		}
HXLINE( 361)		int index = ::openfl::_Vector::IVector_obj::indexOf(::starling::core::Starling_obj::sAll->data,hx::ObjectPtr<OBJ_>(this),(int)0);
HXLINE( 362)		if ((index != (int)-1)) {
HXLINE( 362)			::openfl::_Vector::IVector_obj::removeAt(::starling::core::Starling_obj::sAll->data,index);
            		}
HXLINE( 363)		if (hx::IsEq( ::starling::core::Starling_obj::sCurrent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 363)			::starling::core::Starling_obj::sCurrent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,dispose,(void))

void Starling_obj::initialize(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_369_initialize)
HXLINE( 370)		this->makeCurrent();
HXLINE( 371)		this->updateViewPort(true);
HXLINE( 374)		this->dispatchEventWith(HX_("context3DCreate",7c,bf,59,7b),false,this->get_context());
HXLINE( 376)		this->initializeRoot();
HXLINE( 377)		this->_hx___frameTimestamp = ((Float)::openfl::Lib_obj::getTimer() / (Float)((Float)1000.0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,initialize,(void))

void Starling_obj::initializeRoot(){
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_382_initializeRoot)
HXDLIN( 382)		bool _hx_tmp;
HXDLIN( 382)		if (hx::IsNull( this->__root )) {
HXDLIN( 382)			_hx_tmp = hx::IsNotNull( this->_hx___rootClass );
            		}
            		else {
HXDLIN( 382)			_hx_tmp = false;
            		}
HXDLIN( 382)		if (_hx_tmp) {
HXLINE( 384)			this->__root = ( ( ::starling::display::DisplayObject)(::Type_obj::createInstance(this->_hx___rootClass,::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 385)			bool _hx_tmp1;
HXDLIN( 385)			if (hx::IsNotNull( this->__root )) {
HXLINE( 385)				_hx_tmp1 = !(::Std_obj::is(this->__root,hx::ClassOf< ::starling::display::DisplayObject >()));
            			}
            			else {
HXLINE( 385)				_hx_tmp1 = true;
            			}
HXDLIN( 385)			if (_hx_tmp1) {
HXLINE( 385)				HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("Invalid root class: ",c9,bf,4a,0b) + ::Std_obj::string(this->_hx___rootClass)),null()));
            			}
HXLINE( 386)			this->_hx___stage->addChildAt(this->__root,(int)0);
HXLINE( 388)			this->dispatchEventWith(HX_("rootCreated",e6,d7,99,03),false,this->__root);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,initializeRoot,(void))

void Starling_obj::nextFrame(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_395_nextFrame)
HXLINE( 396)		Float now = ((Float)::openfl::Lib_obj::getTimer() / (Float)((Float)1000.0));
HXLINE( 397)		Float passedTime = (now - this->_hx___frameTimestamp);
HXLINE( 398)		this->_hx___frameTimestamp = now;
HXLINE( 401)		if ((passedTime > ((Float)1.0))) {
HXLINE( 401)			passedTime = ((Float)1.0);
            		}
HXLINE( 404)		if ((passedTime < ((Float)0.0))) {
HXLINE( 404)			passedTime = ((Float)((Float)1.0) / (Float)this->_hx___nativeStage->get_frameRate());
            		}
HXLINE( 406)		this->advanceTime(passedTime);
HXLINE( 407)		this->render();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,nextFrame,(void))

void Starling_obj::advanceTime(Float passedTime){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_413_advanceTime)
HXLINE( 414)		if (!(this->get_contextValid())) {
HXLINE( 415)			return;
            		}
HXLINE( 417)		this->makeCurrent();
HXLINE( 419)		this->_hx___touchProcessor->advanceTime(passedTime);
HXLINE( 420)		this->_hx___stage->advanceTime(passedTime);
HXLINE( 421)		this->_hx___juggler->advanceTime(passedTime);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,advanceTime,(void))

void Starling_obj::render(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_431_render)
HXLINE( 432)		if (!(this->get_contextValid())) {
HXLINE( 433)			return;
            		}
HXLINE( 435)		this->makeCurrent();
HXLINE( 436)		this->updateViewPort(null());
HXLINE( 438)		bool doRedraw;
HXDLIN( 438)		if (!(this->_hx___stage->get_requiresRedraw())) {
HXLINE( 438)			doRedraw = this->get_mustAlwaysRender();
            		}
            		else {
HXLINE( 438)			doRedraw = true;
            		}
HXLINE( 439)		if (doRedraw) {
HXLINE( 441)			this->dispatchEventWith(HX_("render",56,6b,29,05),null(),null());
HXLINE( 443)			bool shareContext = this->_hx___painter->get_shareContext();
HXLINE( 444)			Float scaleX = this->_hx___viewPort->width;
HXDLIN( 444)			Float scaleX1 = ((Float)scaleX / (Float)this->_hx___stage->get_stageWidth());
HXLINE( 445)			Float scaleY = this->_hx___viewPort->height;
HXDLIN( 445)			Float scaleY1 = ((Float)scaleY / (Float)this->_hx___stage->get_stageHeight());
HXLINE( 446)			int stageColor = this->_hx___stage->get_color();
HXLINE( 448)			this->_hx___painter->nextFrame();
HXLINE( 449)			 ::starling::rendering::Painter _hx_tmp = this->_hx___painter;
HXDLIN( 449)			_hx_tmp->set_pixelSize(((Float)((Float)1.0) / (Float)this->get_contentScaleFactor()));
HXLINE( 450)			 ::starling::rendering::RenderState _hx_tmp1 = this->_hx___painter->get_state();
HXLINE( 451)			Float _hx_tmp2;
HXDLIN( 451)			if ((this->_hx___viewPort->x < (int)0)) {
HXLINE( 451)				_hx_tmp2 = ((Float)-(this->_hx___viewPort->x) / (Float)scaleX1);
            			}
            			else {
HXLINE( 451)				_hx_tmp2 = ((Float)0.0);
            			}
HXLINE( 452)			Float _hx_tmp3;
HXDLIN( 452)			if ((this->_hx___viewPort->y < (int)0)) {
HXLINE( 452)				_hx_tmp3 = ((Float)-(this->_hx___viewPort->y) / (Float)scaleY1);
            			}
            			else {
HXLINE( 452)				_hx_tmp3 = ((Float)0.0);
            			}
HXLINE( 453)			Float _hx_tmp4 = ((Float)this->_hx___clippedViewPort->width / (Float)scaleX1);
HXLINE( 454)			Float _hx_tmp5 = ((Float)this->_hx___clippedViewPort->height / (Float)scaleY1);
HXLINE( 455)			int _hx_tmp6 = this->_hx___stage->get_stageWidth();
HXDLIN( 455)			int _hx_tmp7 = this->_hx___stage->get_stageHeight();
HXLINE( 450)			_hx_tmp1->setProjectionMatrix(_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,this->_hx___stage->get_cameraPosition());
HXLINE( 457)			if (!(shareContext)) {
HXLINE( 458)				 ::starling::rendering::Painter _hx_tmp8 = this->_hx___painter;
HXDLIN( 458)				_hx_tmp8->clear(stageColor,::starling::utils::Color_obj::getAlpha(stageColor));
            			}
HXLINE( 460)			this->_hx___stage->render(this->_hx___painter);
HXLINE( 461)			this->_hx___painter->finishFrame();
HXLINE( 462)			 ::starling::rendering::Painter _hx_tmp9 = this->_hx___painter;
HXDLIN( 462)			_hx_tmp9->set_frameID(++this->_hx___frameID);
HXLINE( 464)			if (!(shareContext)) {
HXLINE( 465)				this->_hx___painter->present();
            			}
            		}
HXLINE( 468)		if (hx::IsNotNull( this->_hx___statsDisplay )) {
HXLINE( 470)			 ::starling::core::StatsDisplay _hx_tmp10 = this->_hx___statsDisplay;
HXDLIN( 470)			_hx_tmp10->set_drawCount(this->_hx___painter->get_drawCount());
HXLINE( 471)			if (!(doRedraw)) {
HXLINE( 471)				this->_hx___statsDisplay->markFrameAsSkipped();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,render,(void))

void Starling_obj::updateViewPort(hx::Null< bool >  __o_forceUpdate){
bool forceUpdate = __o_forceUpdate.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_480_updateViewPort)
HXDLIN( 480)		bool _hx_tmp;
HXDLIN( 480)		if (!(forceUpdate)) {
HXDLIN( 480)			_hx_tmp = !(::starling::utils::RectangleUtil_obj::compare(this->_hx___viewPort,this->_hx___previousViewPort,null()));
            		}
            		else {
HXDLIN( 480)			_hx_tmp = true;
            		}
HXDLIN( 480)		if (_hx_tmp) {
HXLINE( 482)			this->_hx___previousViewPort->setTo(this->_hx___viewPort->x,this->_hx___viewPort->y,this->_hx___viewPort->width,this->_hx___viewPort->height);
HXLINE( 488)			 ::openfl::geom::Rectangle _hx_tmp1 = this->_hx___viewPort;
HXDLIN( 488)			this->_hx___clippedViewPort = _hx_tmp1->intersection( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->_hx___nativeStage->stageWidth,this->_hx___nativeStage->stageHeight));
HXLINE( 491)			if ((this->_hx___clippedViewPort->width < (int)32)) {
HXLINE( 491)				this->_hx___clippedViewPort->width = (int)32;
            			}
HXLINE( 492)			if ((this->_hx___clippedViewPort->height < (int)32)) {
HXLINE( 492)				this->_hx___clippedViewPort->height = (int)32;
            			}
HXLINE( 494)			Float contentScaleFactor;
HXLINE( 495)			if (this->_hx___supportHighResolutions) {
HXLINE( 494)				contentScaleFactor = this->_hx___nativeStage->get_contentsScaleFactor();
            			}
            			else {
HXLINE( 494)				contentScaleFactor = ((Float)1.0);
            			}
HXLINE( 497)			this->_hx___painter->configureBackBuffer(this->_hx___clippedViewPort,contentScaleFactor,this->_hx___antiAliasing,true);
HXLINE( 500)			this->setRequiresRedraw();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,updateViewPort,(void))

void Starling_obj::updateNativeOverlay(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_505_updateNativeOverlay)
HXLINE( 506)		this->_hx___nativeOverlay->set_x(this->_hx___viewPort->x);
HXLINE( 507)		this->_hx___nativeOverlay->set_y(this->_hx___viewPort->y);
HXLINE( 508)		 ::openfl::display::Sprite _hx_tmp = this->_hx___nativeOverlay;
HXDLIN( 508)		Float _hx_tmp1 = this->_hx___viewPort->width;
HXDLIN( 508)		_hx_tmp->set_scaleX(((Float)_hx_tmp1 / (Float)this->_hx___stage->get_stageWidth()));
HXLINE( 509)		 ::openfl::display::Sprite _hx_tmp2 = this->_hx___nativeOverlay;
HXDLIN( 509)		Float _hx_tmp3 = this->_hx___viewPort->height;
HXDLIN( 509)		_hx_tmp2->set_scaleY(((Float)_hx_tmp3 / (Float)this->_hx___stage->get_stageHeight()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,updateNativeOverlay,(void))

void Starling_obj::stopWithFatalError(::String message){
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_515_stopWithFatalError)
HXLINE( 516)		 ::openfl::display::Shape background =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE( 517)		background->get_graphics()->beginFill((int)0,((Float)0.8));
HXLINE( 518)		 ::openfl::display::Graphics _hx_tmp = background->get_graphics();
HXDLIN( 518)		int _hx_tmp1 = this->_hx___stage->get_stageWidth();
HXDLIN( 518)		_hx_tmp->drawRect((int)0,(int)0,_hx_tmp1,this->_hx___stage->get_stageHeight());
HXLINE( 519)		background->get_graphics()->endFill();
HXLINE( 521)		 ::openfl::text::TextField textField =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE( 522)		 ::openfl::text::TextFormat textFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("_sans",32,a0,5e,ff),(int)14,(int)16777215,null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 523)		textFormat->align = (int)0;
HXLINE( 524)		textField->set_defaultTextFormat(textFormat);
HXLINE( 525)		textField->set_wordWrap(true);
HXLINE( 526)		textField->set_width((this->_hx___stage->get_stageWidth() * ((Float)0.75)));
HXLINE( 527)		textField->set_autoSize((int)0);
HXLINE( 528)		textField->set_text(message);
HXLINE( 529)		int _hx_tmp2 = this->_hx___stage->get_stageWidth();
HXDLIN( 529)		textField->set_x(((Float)(_hx_tmp2 - textField->get_width()) / (Float)(int)2));
HXLINE( 530)		int _hx_tmp3 = this->_hx___stage->get_stageHeight();
HXDLIN( 530)		textField->set_y(((Float)(_hx_tmp3 - textField->get_height()) / (Float)(int)2));
HXLINE( 531)		textField->set_background(true);
HXLINE( 532)		textField->set_backgroundColor((int)5570560);
HXLINE( 534)		this->updateNativeOverlay();
HXLINE( 535)		this->get_nativeOverlay()->addChild(background);
HXLINE( 536)		this->get_nativeOverlay()->addChild(textField);
HXLINE( 537)		this->stop(true);
HXLINE( 539)		::haxe::Log_obj::trace(HX_("[Starling]",ba,5e,ec,74), ::Dynamic(hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("starling.core.Starling",b1,1b,5c,f2))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,message))
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("stopWithFatalError",6c,b6,80,72))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("Starling.hx",d6,ba,9d,70))
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),(int)539)));
HXLINE( 540)		this->dispatchEventWith(HX_("fatalError",24,75,84,6c),false,message);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,stopWithFatalError,(void))

void Starling_obj::makeCurrent(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_546_makeCurrent)
HXDLIN( 546)		::starling::core::Starling_obj::sCurrent = hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,makeCurrent,(void))

void Starling_obj::start(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_554_start)
HXLINE( 555)		this->_hx___started = (this->_hx___rendering = true);
HXLINE( 556)		this->_hx___frameTimestamp = ((Float)::openfl::Lib_obj::getTimer() / (Float)((Float)1000.0));
HXLINE( 559)		::haxe::Timer_obj::delay(this->setRequiresRedraw_dyn(),(int)100);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,start,(void))

void Starling_obj::stop(hx::Null< bool >  __o_suspendRendering){
bool suspendRendering = __o_suspendRendering.Default(false);
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_572_stop)
HXLINE( 573)		this->_hx___started = false;
HXLINE( 574)		this->_hx___rendering = !(suspendRendering);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,stop,(void))

void Starling_obj::setRequiresRedraw(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_586_setRequiresRedraw)
HXDLIN( 586)		this->_hx___stage->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,setRequiresRedraw,(void))

void Starling_obj::onStage3DError( ::openfl::events::ErrorEvent event){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_593_onStage3DError)
HXDLIN( 593)		if ((event->errorID == (int)3702)) {
HXLINE( 595)			::String mode;
HXDLIN( 595)			if ((::openfl::_hx_system::Capabilities_obj::playerType == HX_("Desktop",bc,ed,e5,eb))) {
HXLINE( 595)				mode = HX_("renderMode",d9,cd,6a,e5);
            			}
            			else {
HXLINE( 595)				mode = HX_("wmode",5a,db,0f,cd);
            			}
HXLINE( 596)			this->stopWithFatalError(((HX_("Context3D not available! Possible reasons: wrong ",94,ae,05,0a) + mode) + HX_(" or missing device support.",72,2f,ed,1c)));
            		}
            		else {
HXLINE( 600)			this->stopWithFatalError((HX_("Stage3D error: ",1d,16,22,a5) + event->text));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,onStage3DError,(void))

void Starling_obj::onContextCreated( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_604_onContextCreated)
HXLINE( 605)		this->get_stage3D()->removeEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextCreated_dyn(),null());
HXLINE( 606)		this->get_stage3D()->addEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextRestored_dyn(),false,(int)10,true);
HXLINE( 608)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 608)		::String _hx_tmp1 = (HX_("[Starling] Context ready. Display Driver: ",4a,c5,64,ca) + this->get_context()->driverInfo);
HXDLIN( 608)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("Starling.hx",d6,ba,9d,70),608,HX_("starling.core.Starling",b1,1b,5c,f2),HX_("onContextCreated",38,81,ff,c0)));
HXLINE( 609)		this->initialize();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,onContextCreated,(void))

void Starling_obj::onContextRestored( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_613_onContextRestored)
HXLINE( 614)		::haxe::Log_obj::trace(HX_("[Starling] Context restored.",a1,d1,8c,4d),hx::SourceInfo(HX_("Starling.hx",d6,ba,9d,70),614,HX_("starling.core.Starling",b1,1b,5c,f2),HX_("onContextRestored",06,18,47,e2)));
HXLINE( 615)		this->updateViewPort(true);
HXLINE( 616)		this->dispatchEventWith(HX_("context3DCreate",7c,bf,59,7b),false,this->get_context());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,onContextRestored,(void))

void Starling_obj::onEnterFrame( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_620_onEnterFrame)
HXLINE( 624)		if (!(this->_hx___painter->get_shareContext())) {
HXLINE( 626)			if (this->_hx___started) {
HXLINE( 626)				this->nextFrame();
            			}
            			else {
HXLINE( 627)				if (this->_hx___rendering) {
HXLINE( 627)					this->render();
            				}
            			}
            		}
HXLINE( 630)		this->updateNativeOverlay();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,onEnterFrame,(void))

void Starling_obj::onKey( ::openfl::events::KeyboardEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_634_onKey)
HXLINE( 635)		if (!(this->_hx___started)) {
HXLINE( 635)			return;
            		}
HXLINE( 637)		 ::starling::events::KeyboardEvent keyEvent =  ::starling::events::KeyboardEvent_obj::__alloc( HX_CTX ,event->type,event->charCode,event->keyCode,event->keyLocation,event->ctrlKey,event->altKey,event->shiftKey);
HXLINE( 641)		this->makeCurrent();
HXLINE( 642)		this->_hx___stage->dispatchEvent(keyEvent);
HXLINE( 644)		if (keyEvent->isDefaultPrevented()) {
HXLINE( 645)			event->preventDefault();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,onKey,(void))

void Starling_obj::onResize( ::openfl::events::Event event){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0,int,stageWidth, ::starling::core::Starling,_gthis,::Array< ::Dynamic>,dispatchResizeEvent,int,stageHeight) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_654_onResize)
HXLINE( 658)			_gthis->makeCurrent();
HXLINE( 659)			_gthis->removeEventListener(HX_("context3DCreate",7c,bf,59,7b),dispatchResizeEvent->__get((int)0));
HXLINE( 660)			 ::starling::display::Stage _gthis1 = _gthis->_hx___stage;
HXDLIN( 660)			_gthis1->dispatchEvent( ::starling::events::ResizeEvent_obj::__alloc( HX_CTX ,HX_("resize",f4,59,7b,08),stageWidth,stageHeight,null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_649_onResize)
HXLINE( 648)		 ::starling::core::Starling _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 650)		int stageWidth = hx::TCast<  ::openfl::display::Stage >::cast(event->target)->stageWidth;
HXLINE( 651)		int stageHeight = hx::TCast<  ::openfl::display::Stage >::cast(event->target)->stageHeight;
HXLINE( 653)		::Array< ::Dynamic> dispatchResizeEvent = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 653)		dispatchResizeEvent[(int)0] =  ::Dynamic(new _hx_Closure_0(stageWidth,_gthis,dispatchResizeEvent,stageHeight));
HXDLIN( 653)		 ::Dynamic dispatchResizeEvent1 = dispatchResizeEvent->__get((int)0);
HXLINE( 663)		if (this->get_contextValid()) {
HXLINE( 664)			dispatchResizeEvent1();
            		}
            		else {
HXLINE( 666)			this->addEventListener(HX_("context3DCreate",7c,bf,59,7b),dispatchResizeEvent1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,onResize,(void))

void Starling_obj::onMouseLeave( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_671_onMouseLeave)
HXDLIN( 671)		this->_hx___touchProcessor->enqueueMouseLeftStage();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,onMouseLeave,(void))

void Starling_obj::onTouch( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_675_onTouch)
HXLINE( 676)		if (!(this->_hx___started)) {
HXLINE( 676)			return;
            		}
HXLINE( 678)		Float globalX;
HXLINE( 679)		Float globalY;
HXLINE( 680)		int touchID;
HXLINE( 681)		::String phase = null();
HXLINE( 682)		Float pressure = ((Float)1.0);
HXLINE( 683)		Float width = ((Float)1.0);
HXLINE( 684)		Float height = ((Float)1.0);
HXLINE( 687)		if (::Std_obj::is(event,hx::ClassOf< ::openfl::events::MouseEvent >())) {
HXLINE( 689)			 ::openfl::events::MouseEvent mouseEvent = ( ( ::openfl::events::MouseEvent)(event) );
HXLINE( 690)			globalX = mouseEvent->stageX;
HXLINE( 691)			globalY = mouseEvent->stageY;
HXLINE( 692)			touchID = (int)0;
HXLINE( 697)			if ((event->type == HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 697)				this->_hx___leftMouseDown = true;
            			}
            			else {
HXLINE( 698)				if ((event->type == HX_("mouseUp",e0,f3,72,c0))) {
HXLINE( 698)					this->_hx___leftMouseDown = false;
            				}
            			}
            		}
            		else {
HXLINE( 702)			 ::openfl::events::TouchEvent touchEvent = hx::TCast<  ::openfl::events::TouchEvent >::cast(event);
HXLINE( 708)			bool _hx_tmp;
HXDLIN( 708)			if (::openfl::ui::Mouse_obj::supportsCursor) {
HXLINE( 708)				_hx_tmp = touchEvent->isPrimaryTouchPoint;
            			}
            			else {
HXLINE( 708)				_hx_tmp = false;
            			}
HXDLIN( 708)			if (_hx_tmp) {
HXLINE( 708)				return;
            			}
            			else {
HXLINE( 711)				globalX = touchEvent->stageX;
HXLINE( 712)				globalY = touchEvent->stageY;
HXLINE( 713)				touchID = touchEvent->touchPointID;
HXLINE( 714)				pressure = touchEvent->pressure;
HXLINE( 715)				width = touchEvent->sizeX;
HXLINE( 716)				height = touchEvent->sizeY;
            			}
            		}
HXLINE( 721)		{
HXLINE( 721)			::String _g = event->type;
HXDLIN( 721)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("mouseDown",27,b1,c2,ee)) ){
HXLINE( 726)				phase = HX_("began",31,e3,55,b0);
HXDLIN( 726)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_0==HX_("mouseMove",d6,9b,b5,f4)) ){
HXLINE( 729)				if (this->_hx___leftMouseDown) {
HXLINE( 729)					phase = HX_("moved",33,cc,65,0c);
            				}
            				else {
HXLINE( 729)					phase = HX_("hover",bc,e5,64,2b);
            				}
HXDLIN( 729)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_0==HX_("mouseUp",e0,f3,72,c0)) ){
HXLINE( 727)				phase = HX_("ended",fa,48,7a,70);
HXDLIN( 727)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_0==HX_("touchBegin",ea,cd,e6,a9)) ){
HXLINE( 723)				phase = HX_("began",31,e3,55,b0);
HXDLIN( 723)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_0==HX_("touchEnd",5c,c5,09,00)) ){
HXLINE( 725)				phase = HX_("ended",fa,48,7a,70);
HXDLIN( 725)				goto _hx_goto_24;
            			}
            			if (  (_hx_switch_0==HX_("touchMove",70,72,cd,0d)) ){
HXLINE( 724)				phase = HX_("moved",33,cc,65,0c);
HXDLIN( 724)				goto _hx_goto_24;
            			}
            			_hx_goto_24:;
            		}
HXLINE( 733)		int globalX1 = this->_hx___stage->get_stageWidth();
HXDLIN( 733)		globalX = ((Float)(globalX1 * (globalX - this->_hx___viewPort->x)) / (Float)this->_hx___viewPort->width);
HXLINE( 734)		int globalY1 = this->_hx___stage->get_stageHeight();
HXDLIN( 734)		globalY = ((Float)(globalY1 * (globalY - this->_hx___viewPort->y)) / (Float)this->_hx___viewPort->height);
HXLINE( 737)		this->_hx___touchProcessor->enqueue(touchID,phase,globalX,globalY,pressure,width,height);
HXLINE( 740)		bool _hx_tmp1;
HXDLIN( 740)		if ((event->type == HX_("mouseUp",e0,f3,72,c0))) {
HXLINE( 740)			_hx_tmp1 = ::openfl::ui::Mouse_obj::supportsCursor;
            		}
            		else {
HXLINE( 740)			_hx_tmp1 = false;
            		}
HXDLIN( 740)		if (_hx_tmp1) {
HXLINE( 741)			this->_hx___touchProcessor->enqueue(touchID,HX_("hover",bc,e5,64,2b),globalX,globalY,null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,onTouch,(void))

::Array< ::String > Starling_obj::get_touchEventTypes(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_746_get_touchEventTypes)
HXLINE( 747)		::Array< ::String > types = ::Array_obj< ::String >::__new();
HXLINE( 749)		if (::starling::core::Starling_obj::get_multitouchEnabled()) {
HXLINE( 751)			types->push(HX_("touchBegin",ea,cd,e6,a9));
HXLINE( 752)			types->push(HX_("touchMove",70,72,cd,0d));
HXLINE( 753)			types->push(HX_("touchEnd",5c,c5,09,00));
            		}
HXLINE( 756)		bool _hx_tmp;
HXDLIN( 756)		if (!(!(::starling::core::Starling_obj::get_multitouchEnabled()))) {
HXLINE( 756)			_hx_tmp = ::openfl::ui::Mouse_obj::supportsCursor;
            		}
            		else {
HXLINE( 756)			_hx_tmp = true;
            		}
HXDLIN( 756)		if (_hx_tmp) {
HXLINE( 758)			types->push(HX_("mouseDown",27,b1,c2,ee));
HXLINE( 759)			types->push(HX_("mouseMove",d6,9b,b5,f4));
HXLINE( 760)			types->push(HX_("mouseUp",e0,f3,72,c0));
            		}
HXLINE( 763)		return types;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_touchEventTypes,return )

bool Starling_obj::get_mustAlwaysRender(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_773_get_mustAlwaysRender)
HXDLIN( 773)		bool _hx_tmp;
HXDLIN( 773)		bool _hx_tmp1;
HXDLIN( 773)		if (!(!(this->_hx___skipUnchangedFrames))) {
HXDLIN( 773)			_hx_tmp1 = this->_hx___painter->get_shareContext();
            		}
            		else {
HXDLIN( 773)			_hx_tmp1 = true;
            		}
HXDLIN( 773)		if (!(_hx_tmp1)) {
HXDLIN( 773)			_hx_tmp = true;
            		}
            		else {
HXDLIN( 773)			_hx_tmp = true;
            		}
HXDLIN( 773)		if (_hx_tmp) {
HXLINE( 774)			return true;
            		}
            		else {
HXLINE( 775)			bool _hx_tmp2;
HXDLIN( 775)			if (::starling::utils::SystemUtil_obj::get_isDesktop()) {
HXLINE( 775)				_hx_tmp2 = hx::IsNotEq( this->get_profile(),(int)1 );
            			}
            			else {
HXLINE( 775)				_hx_tmp2 = false;
            			}
HXDLIN( 775)			if (_hx_tmp2) {
HXLINE( 776)				return false;
            			}
            			else {
HXLINE( 780)				bool nativeStageEmpty = this->isNativeDisplayObjectEmpty(this->_hx___nativeStage);
HXLINE( 781)				bool mustAlwaysRender;
HXDLIN( 781)				if (!(!(nativeStageEmpty))) {
HXLINE( 781)					mustAlwaysRender = !(this->_hx___nativeStageEmpty);
            				}
            				else {
HXLINE( 781)					mustAlwaysRender = true;
            				}
HXLINE( 782)				this->_hx___nativeStageEmpty = nativeStageEmpty;
HXLINE( 784)				return mustAlwaysRender;
            			}
            		}
HXLINE( 773)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_mustAlwaysRender,return )

bool Starling_obj::get_isStarted(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_792_get_isStarted)
HXDLIN( 792)		return this->_hx___started;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_isStarted,return )

 ::starling::animation::Juggler Starling_obj::get_juggler(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_796_get_juggler)
HXDLIN( 796)		return this->_hx___juggler;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_juggler,return )

 ::starling::rendering::Painter Starling_obj::get_painter(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_801_get_painter)
HXDLIN( 801)		return this->_hx___painter;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_painter,return )

 ::openfl::display3D::Context3D Starling_obj::get_context(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_805_get_context)
HXDLIN( 805)		return this->_hx___painter->get_context();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_context,return )

bool Starling_obj::get_simulateMultitouch(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_810_get_simulateMultitouch)
HXDLIN( 810)		return this->_hx___touchProcessor->get_simulateMultitouch();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_simulateMultitouch,return )

bool Starling_obj::set_simulateMultitouch(bool value){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_813_set_simulateMultitouch)
HXDLIN( 813)		return this->_hx___touchProcessor->set_simulateMultitouch(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_simulateMultitouch,return )

bool Starling_obj::get_enableErrorChecking(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_823_get_enableErrorChecking)
HXDLIN( 823)		return this->_hx___painter->get_enableErrorChecking();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_enableErrorChecking,return )

bool Starling_obj::set_enableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_826_set_enableErrorChecking)
HXDLIN( 826)		return this->_hx___painter->set_enableErrorChecking(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_enableErrorChecking,return )

int Starling_obj::get_antiAliasing(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_831_get_antiAliasing)
HXDLIN( 831)		return this->_hx___antiAliasing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_antiAliasing,return )

int Starling_obj::set_antiAliasing(int value){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_833_set_antiAliasing)
HXLINE( 834)		if ((this->_hx___antiAliasing != value)) {
HXLINE( 836)			this->_hx___antiAliasing = value;
HXLINE( 837)			if (this->get_contextValid()) {
HXLINE( 837)				this->updateViewPort(true);
            			}
            		}
HXLINE( 839)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_antiAliasing,return )

 ::openfl::geom::Rectangle Starling_obj::get_viewPort(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_844_get_viewPort)
HXDLIN( 844)		return this->_hx___viewPort;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_viewPort,return )

 ::openfl::geom::Rectangle Starling_obj::set_viewPort( ::openfl::geom::Rectangle value){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_845_set_viewPort)
HXDLIN( 845)		this->_hx___viewPort->copyFrom(value);
HXDLIN( 845)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_viewPort,return )

Float Starling_obj::get_contentScaleFactor(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_852_get_contentScaleFactor)
HXDLIN( 852)		Float _hx_tmp = this->_hx___viewPort->width;
HXDLIN( 852)		Float _hx_tmp1 = (_hx_tmp * this->_hx___painter->get_backBufferScaleFactor());
HXDLIN( 852)		return ((Float)_hx_tmp1 / (Float)this->_hx___stage->get_stageWidth());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_contentScaleFactor,return )

 ::openfl::display::Sprite Starling_obj::get_nativeOverlay(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_858_get_nativeOverlay)
HXDLIN( 858)		return this->_hx___nativeOverlay;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_nativeOverlay,return )

bool Starling_obj::get_showStats(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_869_get_showStats)
HXDLIN( 869)		return this->_hx___showStats;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_showStats,return )

bool Starling_obj::set_showStats(bool value){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_871_set_showStats)
HXLINE( 872)		this->_hx___showStats = value;
HXLINE( 874)		if (value) {
HXLINE( 876)			if (hx::IsNotNull( this->_hx___statsDisplay )) {
HXLINE( 876)				this->_hx___stage->addChild(this->_hx___statsDisplay);
            			}
            			else {
HXLINE( 877)				this->showStatsAt(null(),null(),null());
            			}
            		}
            		else {
HXLINE( 879)			if (hx::IsNotNull( this->_hx___statsDisplay )) {
HXLINE( 881)				this->_hx___statsDisplay->removeFromParent(null());
            			}
            		}
HXLINE( 884)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_showStats,return )

void Starling_obj::showStatsAt(::String __o_horizontalAlign,::String __o_verticalAlign,hx::Null< Float >  __o_scale){
            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0, ::starling::core::Starling,_gthis,::String,verticalAlign,::Array< ::Dynamic>,onRootCreated,Float,scale,::String,horizontalAlign) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_892_showStatsAt)
HXLINE( 893)			if (_gthis->_hx___showStats) {
HXLINE( 893)				_gthis->showStatsAt(horizontalAlign,verticalAlign,scale);
            			}
HXLINE( 894)			_gthis->removeEventListener(HX_("rootCreated",e6,d7,99,03),onRootCreated->__get((int)0));
            		}
            		HX_END_LOCAL_FUNC0((void))

::String horizontalAlign = __o_horizontalAlign.Default(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
::String verticalAlign = __o_verticalAlign.Default(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
Float scale = __o_scale.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_890_showStatsAt)
HXLINE( 888)		 ::starling::core::Starling _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 891)		::Array< ::Dynamic> onRootCreated = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 891)		onRootCreated[(int)0] =  ::Dynamic(new _hx_Closure_0(_gthis,verticalAlign,onRootCreated,scale,horizontalAlign));
HXDLIN( 891)		 ::Dynamic onRootCreated1 = onRootCreated->__get((int)0);
HXLINE( 897)		this->_hx___showStats = true;
HXLINE( 899)		if (hx::IsNull( this->get_context() )) {
HXLINE( 902)			this->addEventListener(HX_("rootCreated",e6,d7,99,03),onRootCreated1);
            		}
            		else {
HXLINE( 906)			int stageWidth = this->_hx___stage->get_stageWidth();
HXLINE( 907)			int stageHeight = this->_hx___stage->get_stageHeight();
HXLINE( 909)			if (hx::IsNull( this->_hx___statsDisplay )) {
HXLINE( 911)				this->_hx___statsDisplay =  ::starling::core::StatsDisplay_obj::__alloc( HX_CTX );
HXLINE( 912)				this->_hx___statsDisplay->set_touchable(false);
            			}
HXLINE( 915)			this->_hx___stage->addChild(this->_hx___statsDisplay);
HXLINE( 916)			 ::starling::core::StatsDisplay _hx_tmp = this->_hx___statsDisplay;
HXDLIN( 916)			_hx_tmp->set_scaleX(this->_hx___statsDisplay->set_scaleY(scale));
HXLINE( 918)			if ((horizontalAlign == HX_("left",07,08,b0,47))) {
HXLINE( 918)				this->_hx___statsDisplay->set_x((int)0);
            			}
            			else {
HXLINE( 919)				if ((horizontalAlign == HX_("right",dc,0b,64,e9))) {
HXLINE( 919)					 ::starling::core::StatsDisplay _hx_tmp1 = this->_hx___statsDisplay;
HXDLIN( 919)					_hx_tmp1->set_x((stageWidth - this->_hx___statsDisplay->get_width()));
            				}
            				else {
HXLINE( 920)					if ((horizontalAlign == HX_("center",d5,25,db,05))) {
HXLINE( 920)						 ::starling::core::StatsDisplay _hx_tmp2 = this->_hx___statsDisplay;
HXDLIN( 920)						_hx_tmp2->set_x((stageWidth - this->_hx___statsDisplay->get_width()));
            					}
            					else {
HXLINE( 921)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid horizontal alignment: ",36,db,92,72) + horizontalAlign)));
            					}
            				}
            			}
HXLINE( 923)			if ((verticalAlign == HX_("top",95,66,58,00))) {
HXLINE( 923)				this->_hx___statsDisplay->set_y((int)0);
            			}
            			else {
HXLINE( 924)				if ((verticalAlign == HX_("bottom",eb,e6,78,65))) {
HXLINE( 924)					 ::starling::core::StatsDisplay _hx_tmp3 = this->_hx___statsDisplay;
HXDLIN( 924)					_hx_tmp3->set_y((stageHeight - this->_hx___statsDisplay->get_height()));
            				}
            				else {
HXLINE( 925)					if ((verticalAlign == HX_("center",d5,25,db,05))) {
HXLINE( 925)						 ::starling::core::StatsDisplay _hx_tmp4 = this->_hx___statsDisplay;
HXDLIN( 925)						_hx_tmp4->set_y((stageHeight - this->_hx___statsDisplay->get_height()));
            					}
            					else {
HXLINE( 926)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid vertical alignment: ",88,21,97,6a) + verticalAlign)));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Starling_obj,showStatsAt,(void))

 ::starling::display::Stage Starling_obj::get_stage(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_932_get_stage)
HXDLIN( 932)		return this->_hx___stage;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_stage,return )

 ::openfl::display::Stage3D Starling_obj::get_stage3D(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_936_get_stage3D)
HXDLIN( 936)		return this->_hx___painter->get_stage3D();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_stage3D,return )

 ::openfl::display::Stage Starling_obj::get_nativeStage(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_940_get_nativeStage)
HXDLIN( 940)		return this->_hx___nativeStage;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_nativeStage,return )

 ::starling::display::DisplayObject Starling_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_945_get_root)
HXDLIN( 945)		return this->__root;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_root,return )

hx::Class Starling_obj::get_rootClass(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_958_get_rootClass)
HXDLIN( 958)		return this->_hx___rootClass;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_rootClass,return )

hx::Class Starling_obj::set_rootClass(hx::Class value){
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_960_set_rootClass)
HXLINE( 961)		bool _hx_tmp;
HXDLIN( 961)		if (hx::IsNotNull( this->_hx___rootClass )) {
HXLINE( 961)			_hx_tmp = hx::IsNotNull( this->__root );
            		}
            		else {
HXLINE( 961)			_hx_tmp = false;
            		}
HXDLIN( 961)		if (_hx_tmp) {
HXLINE( 962)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Root class may not change after root has been instantiated",50,55,73,de),null()));
            		}
            		else {
HXLINE( 963)			if (hx::IsNull( this->_hx___rootClass )) {
HXLINE( 965)				this->_hx___rootClass = value;
HXLINE( 966)				if (hx::IsNotNull( this->get_context() )) {
HXLINE( 966)					this->initializeRoot();
            				}
            			}
            		}
HXLINE( 968)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_rootClass,return )

bool Starling_obj::get_shareContext(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_976_get_shareContext)
HXDLIN( 976)		return this->_hx___painter->get_shareContext();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_shareContext,return )

bool Starling_obj::set_shareContext(bool value){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_978_set_shareContext)
HXLINE( 979)		if (!(value)) {
HXLINE( 979)			this->_hx___previousViewPort->setEmpty();
            		}
HXLINE( 980)		return this->_hx___painter->set_shareContext(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_shareContext,return )

 ::Dynamic Starling_obj::get_profile(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_986_get_profile)
HXDLIN( 986)		return ::openfl::display3D::_Context3DProfile::Context3DProfile_Impl__obj::fromString(this->_hx___painter->get_profile());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_profile,return )

bool Starling_obj::get_supportHighResolutions(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_993_get_supportHighResolutions)
HXDLIN( 993)		return this->_hx___supportHighResolutions;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_supportHighResolutions,return )

bool Starling_obj::set_supportHighResolutions(bool value){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_995_set_supportHighResolutions)
HXLINE( 996)		if ((this->_hx___supportHighResolutions != value)) {
HXLINE( 998)			this->_hx___supportHighResolutions = value;
HXLINE( 999)			if (this->get_contextValid()) {
HXLINE( 999)				this->updateViewPort(true);
            			}
            		}
HXLINE(1001)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_supportHighResolutions,return )

bool Starling_obj::get_skipUnchangedFrames(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1016_get_skipUnchangedFrames)
HXDLIN(1016)		return this->_hx___skipUnchangedFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_skipUnchangedFrames,return )

bool Starling_obj::set_skipUnchangedFrames(bool value){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1018_set_skipUnchangedFrames)
HXLINE(1019)		this->_hx___skipUnchangedFrames = value;
HXLINE(1020)		this->_hx___nativeStageEmpty = false;
HXLINE(1021)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_skipUnchangedFrames,return )

 ::starling::events::TouchProcessor Starling_obj::get_touchProcessor(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1028_get_touchProcessor)
HXDLIN(1028)		return this->_hx___touchProcessor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_touchProcessor,return )

 ::starling::events::TouchProcessor Starling_obj::set_touchProcessor( ::starling::events::TouchProcessor value){
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1030_set_touchProcessor)
HXLINE(1031)		if (hx::IsNull( value )) {
HXLINE(1031)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("TouchProcessor must not be null",6d,06,ad,66)));
            		}
            		else {
HXLINE(1032)			if (hx::IsNotEq( value,this->_hx___touchProcessor )) {
HXLINE(1034)				this->_hx___touchProcessor->dispose();
HXLINE(1035)				this->_hx___touchProcessor = value;
            			}
            		}
HXLINE(1037)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_touchProcessor,return )

int Starling_obj::get_frameID(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1042_get_frameID)
HXDLIN(1042)		return this->_hx___frameID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_frameID,return )

bool Starling_obj::get_contextValid(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1047_get_contextValid)
HXDLIN(1047)		return this->_hx___painter->get_contextValid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_contextValid,return )

bool Starling_obj::isNativeDisplayObjectEmpty( ::openfl::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1100_isNativeDisplayObjectEmpty)
HXDLIN(1100)		if (hx::IsNull( object )) {
HXDLIN(1100)			return true;
            		}
            		else {
HXLINE(1101)			if (::Std_obj::is(object,hx::ClassOf< ::openfl::display::DisplayObjectContainer >())) {
HXLINE(1103)				 ::openfl::display::DisplayObjectContainer container = ( ( ::openfl::display::DisplayObjectContainer)(object) );
HXLINE(1104)				int numChildren = container->get_numChildren();
HXLINE(1106)				{
HXLINE(1106)					int _g1 = (int)0;
HXDLIN(1106)					int _g = numChildren;
HXDLIN(1106)					while((_g1 < _g)){
HXLINE(1106)						_g1 = (_g1 + (int)1);
HXDLIN(1106)						int i = (_g1 - (int)1);
HXLINE(1108)						if (!(this->isNativeDisplayObjectEmpty(container->getChildAt(i)))) {
HXLINE(1109)							return false;
            						}
            					}
            				}
HXLINE(1112)				return true;
            			}
            			else {
HXLINE(1114)				return !(object->get_visible());
            			}
            		}
HXLINE(1100)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,isNativeDisplayObjectEmpty,return )

::String Starling_obj::VERSION;

 ::starling::core::Starling Starling_obj::sCurrent;

 ::openfl::_Vector::AbstractVector Starling_obj::sAll;

 ::starling::core::Starling Starling_obj::get_current(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1053_get_current)
HXDLIN(1053)		return ::starling::core::Starling_obj::sCurrent;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_current,return )

 ::openfl::_Vector::AbstractVector Starling_obj::get_all(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1057_get_all)
HXDLIN(1057)		return ::starling::core::Starling_obj::sAll;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_all,return )

bool Starling_obj::get_multitouchEnabled(){
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1078_get_multitouchEnabled)
HXDLIN(1078)		return hx::IsEq( ::openfl::ui::Multitouch_obj::inputMode,(int)2 );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Starling_obj,get_multitouchEnabled,return )

bool Starling_obj::set_multitouchEnabled(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_1082_set_multitouchEnabled)
HXLINE(1083)		if (hx::IsNotNull( ::starling::core::Starling_obj::sCurrent )) {
HXLINE(1083)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("'multitouchEnabled' must be set before Starling instance is created",55,c4,af,79)));
            		}
            		else {
HXLINE(1086)			 ::Dynamic _hx_tmp;
HXDLIN(1086)			if (value) {
HXLINE(1086)				_hx_tmp = (int)2;
            			}
            			else {
HXLINE(1086)				_hx_tmp = (int)1;
            			}
HXDLIN(1086)			::openfl::ui::Multitouch_obj::inputMode = _hx_tmp;
            		}
HXLINE(1088)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Starling_obj,set_multitouchEnabled,return )


hx::ObjectPtr< Starling_obj > Starling_obj::__new(hx::Class rootClass, ::openfl::display::Stage stage, ::openfl::geom::Rectangle viewPort, ::openfl::display::Stage3D stage3D, ::Dynamic __o_renderMode, ::Dynamic __o_profile) {
	hx::ObjectPtr< Starling_obj > __this = new Starling_obj();
	__this->__construct(rootClass,stage,viewPort,stage3D,__o_renderMode,__o_profile);
	return __this;
}

hx::ObjectPtr< Starling_obj > Starling_obj::__alloc(hx::Ctx *_hx_ctx,hx::Class rootClass, ::openfl::display::Stage stage, ::openfl::geom::Rectangle viewPort, ::openfl::display::Stage3D stage3D, ::Dynamic __o_renderMode, ::Dynamic __o_profile) {
	Starling_obj *__this = (Starling_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Starling_obj), true, "starling.core.Starling"));
	*(void **)__this = Starling_obj::_hx_vtable;
	__this->__construct(rootClass,stage,viewPort,stage3D,__o_renderMode,__o_profile);
	return __this;
}

Starling_obj::Starling_obj()
{
}

void Starling_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Starling);
	HX_MARK_MEMBER_NAME(_hx___stage,"__stage");
	HX_MARK_MEMBER_NAME(_hx___rootClass,"__rootClass");
	HX_MARK_MEMBER_NAME(__root,"__root");
	HX_MARK_MEMBER_NAME(_hx___juggler,"__juggler");
	HX_MARK_MEMBER_NAME(_hx___painter,"__painter");
	HX_MARK_MEMBER_NAME(_hx___touchProcessor,"__touchProcessor");
	HX_MARK_MEMBER_NAME(_hx___antiAliasing,"__antiAliasing");
	HX_MARK_MEMBER_NAME(_hx___frameTimestamp,"__frameTimestamp");
	HX_MARK_MEMBER_NAME(_hx___frameID,"__frameID");
	HX_MARK_MEMBER_NAME(_hx___leftMouseDown,"__leftMouseDown");
	HX_MARK_MEMBER_NAME(_hx___statsDisplay,"__statsDisplay");
	HX_MARK_MEMBER_NAME(_hx___started,"__started");
	HX_MARK_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_MARK_MEMBER_NAME(_hx___supportHighResolutions,"__supportHighResolutions");
	HX_MARK_MEMBER_NAME(_hx___skipUnchangedFrames,"__skipUnchangedFrames");
	HX_MARK_MEMBER_NAME(_hx___showStats,"__showStats");
	HX_MARK_MEMBER_NAME(_hx___viewPort,"__viewPort");
	HX_MARK_MEMBER_NAME(_hx___previousViewPort,"__previousViewPort");
	HX_MARK_MEMBER_NAME(_hx___clippedViewPort,"__clippedViewPort");
	HX_MARK_MEMBER_NAME(_hx___nativeStage,"__nativeStage");
	HX_MARK_MEMBER_NAME(_hx___nativeStageEmpty,"__nativeStageEmpty");
	HX_MARK_MEMBER_NAME(_hx___nativeOverlay,"__nativeOverlay");
	 ::starling::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Starling_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___stage,"__stage");
	HX_VISIT_MEMBER_NAME(_hx___rootClass,"__rootClass");
	HX_VISIT_MEMBER_NAME(__root,"__root");
	HX_VISIT_MEMBER_NAME(_hx___juggler,"__juggler");
	HX_VISIT_MEMBER_NAME(_hx___painter,"__painter");
	HX_VISIT_MEMBER_NAME(_hx___touchProcessor,"__touchProcessor");
	HX_VISIT_MEMBER_NAME(_hx___antiAliasing,"__antiAliasing");
	HX_VISIT_MEMBER_NAME(_hx___frameTimestamp,"__frameTimestamp");
	HX_VISIT_MEMBER_NAME(_hx___frameID,"__frameID");
	HX_VISIT_MEMBER_NAME(_hx___leftMouseDown,"__leftMouseDown");
	HX_VISIT_MEMBER_NAME(_hx___statsDisplay,"__statsDisplay");
	HX_VISIT_MEMBER_NAME(_hx___started,"__started");
	HX_VISIT_MEMBER_NAME(_hx___rendering,"__rendering");
	HX_VISIT_MEMBER_NAME(_hx___supportHighResolutions,"__supportHighResolutions");
	HX_VISIT_MEMBER_NAME(_hx___skipUnchangedFrames,"__skipUnchangedFrames");
	HX_VISIT_MEMBER_NAME(_hx___showStats,"__showStats");
	HX_VISIT_MEMBER_NAME(_hx___viewPort,"__viewPort");
	HX_VISIT_MEMBER_NAME(_hx___previousViewPort,"__previousViewPort");
	HX_VISIT_MEMBER_NAME(_hx___clippedViewPort,"__clippedViewPort");
	HX_VISIT_MEMBER_NAME(_hx___nativeStage,"__nativeStage");
	HX_VISIT_MEMBER_NAME(_hx___nativeStageEmpty,"__nativeStageEmpty");
	HX_VISIT_MEMBER_NAME(_hx___nativeOverlay,"__nativeOverlay");
	 ::starling::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Starling_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_root() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKey") ) { return hx::Val( onKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"stage") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stage() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__root") ) { return hx::Val( __root ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__stage") ) { return hx::Val( _hx___stage ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTouch") ) { return hx::Val( onTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"juggler") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_juggler() ); }
		if (HX_FIELD_EQ(inName,"painter") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_painter() ); }
		if (HX_FIELD_EQ(inName,"context") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_context() ); }
		if (HX_FIELD_EQ(inName,"stage3D") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stage3D() ); }
		if (HX_FIELD_EQ(inName,"profile") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_profile() ); }
		if (HX_FIELD_EQ(inName,"frameID") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_frameID() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onResize") ) { return hx::Val( onResize_dyn() ); }
		if (HX_FIELD_EQ(inName,"viewPort") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_viewPort() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__juggler") ) { return hx::Val( _hx___juggler ); }
		if (HX_FIELD_EQ(inName,"__painter") ) { return hx::Val( _hx___painter ); }
		if (HX_FIELD_EQ(inName,"__frameID") ) { return hx::Val( _hx___frameID ); }
		if (HX_FIELD_EQ(inName,"__started") ) { return hx::Val( _hx___started ); }
		if (HX_FIELD_EQ(inName,"nextFrame") ) { return hx::Val( nextFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"isStarted") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isStarted() ); }
		if (HX_FIELD_EQ(inName,"showStats") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_showStats() ); }
		if (HX_FIELD_EQ(inName,"get_stage") ) { return hx::Val( get_stage_dyn() ); }
		if (HX_FIELD_EQ(inName,"rootClass") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rootClass() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__viewPort") ) { return hx::Val( _hx___viewPort ); }
		if (HX_FIELD_EQ(inName,"initialize") ) { return hx::Val( initialize_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__rootClass") ) { return hx::Val( _hx___rootClass ); }
		if (HX_FIELD_EQ(inName,"__rendering") ) { return hx::Val( _hx___rendering ); }
		if (HX_FIELD_EQ(inName,"__showStats") ) { return hx::Val( _hx___showStats ); }
		if (HX_FIELD_EQ(inName,"advanceTime") ) { return hx::Val( advanceTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeCurrent") ) { return hx::Val( makeCurrent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_juggler") ) { return hx::Val( get_juggler_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_painter") ) { return hx::Val( get_painter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_context") ) { return hx::Val( get_context_dyn() ); }
		if (HX_FIELD_EQ(inName,"showStatsAt") ) { return hx::Val( showStatsAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stage3D") ) { return hx::Val( get_stage3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"nativeStage") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_nativeStage() ); }
		if (HX_FIELD_EQ(inName,"get_profile") ) { return hx::Val( get_profile_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_frameID") ) { return hx::Val( get_frameID_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return hx::Val( onEnterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseLeave") ) { return hx::Val( onMouseLeave_dyn() ); }
		if (HX_FIELD_EQ(inName,"antiAliasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_antiAliasing() ); }
		if (HX_FIELD_EQ(inName,"get_viewPort") ) { return hx::Val( get_viewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_viewPort") ) { return hx::Val( set_viewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"shareContext") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_shareContext() ); }
		if (HX_FIELD_EQ(inName,"contextValid") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_contextValid() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__nativeStage") ) { return hx::Val( _hx___nativeStage ); }
		if (HX_FIELD_EQ(inName,"get_isStarted") ) { return hx::Val( get_isStarted_dyn() ); }
		if (HX_FIELD_EQ(inName,"nativeOverlay") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_nativeOverlay() ); }
		if (HX_FIELD_EQ(inName,"get_showStats") ) { return hx::Val( get_showStats_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_showStats") ) { return hx::Val( set_showStats_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rootClass") ) { return hx::Val( get_rootClass_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rootClass") ) { return hx::Val( set_rootClass_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__antiAliasing") ) { return hx::Val( _hx___antiAliasing ); }
		if (HX_FIELD_EQ(inName,"__statsDisplay") ) { return hx::Val( _hx___statsDisplay ); }
		if (HX_FIELD_EQ(inName,"initializeRoot") ) { return hx::Val( initializeRoot_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateViewPort") ) { return hx::Val( updateViewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"onStage3DError") ) { return hx::Val( onStage3DError_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchProcessor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_touchProcessor() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__leftMouseDown") ) { return hx::Val( _hx___leftMouseDown ); }
		if (HX_FIELD_EQ(inName,"__nativeOverlay") ) { return hx::Val( _hx___nativeOverlay ); }
		if (HX_FIELD_EQ(inName,"touchEventTypes") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_touchEventTypes() ); }
		if (HX_FIELD_EQ(inName,"get_nativeStage") ) { return hx::Val( get_nativeStage_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__touchProcessor") ) { return hx::Val( _hx___touchProcessor ); }
		if (HX_FIELD_EQ(inName,"__frameTimestamp") ) { return hx::Val( _hx___frameTimestamp ); }
		if (HX_FIELD_EQ(inName,"onContextCreated") ) { return hx::Val( onContextCreated_dyn() ); }
		if (HX_FIELD_EQ(inName,"mustAlwaysRender") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mustAlwaysRender() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasing") ) { return hx::Val( get_antiAliasing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasing") ) { return hx::Val( set_antiAliasing_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_shareContext") ) { return hx::Val( get_shareContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shareContext") ) { return hx::Val( set_shareContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_contextValid") ) { return hx::Val( get_contextValid_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__clippedViewPort") ) { return hx::Val( _hx___clippedViewPort ); }
		if (HX_FIELD_EQ(inName,"setRequiresRedraw") ) { return hx::Val( setRequiresRedraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"onContextRestored") ) { return hx::Val( onContextRestored_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_nativeOverlay") ) { return hx::Val( get_nativeOverlay_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__previousViewPort") ) { return hx::Val( _hx___previousViewPort ); }
		if (HX_FIELD_EQ(inName,"__nativeStageEmpty") ) { return hx::Val( _hx___nativeStageEmpty ); }
		if (HX_FIELD_EQ(inName,"stopWithFatalError") ) { return hx::Val( stopWithFatalError_dyn() ); }
		if (HX_FIELD_EQ(inName,"simulateMultitouch") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_simulateMultitouch() ); }
		if (HX_FIELD_EQ(inName,"contentScaleFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_contentScaleFactor() ); }
		if (HX_FIELD_EQ(inName,"get_touchProcessor") ) { return hx::Val( get_touchProcessor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_touchProcessor") ) { return hx::Val( set_touchProcessor_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateNativeOverlay") ) { return hx::Val( updateNativeOverlay_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_touchEventTypes") ) { return hx::Val( get_touchEventTypes_dyn() ); }
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_enableErrorChecking() ); }
		if (HX_FIELD_EQ(inName,"skipUnchangedFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_skipUnchangedFrames() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_mustAlwaysRender") ) { return hx::Val( get_mustAlwaysRender_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__skipUnchangedFrames") ) { return hx::Val( _hx___skipUnchangedFrames ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_simulateMultitouch") ) { return hx::Val( get_simulateMultitouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_simulateMultitouch") ) { return hx::Val( set_simulateMultitouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_contentScaleFactor") ) { return hx::Val( get_contentScaleFactor_dyn() ); }
		if (HX_FIELD_EQ(inName,"supportHighResolutions") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_supportHighResolutions() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_enableErrorChecking") ) { return hx::Val( get_enableErrorChecking_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_enableErrorChecking") ) { return hx::Val( set_enableErrorChecking_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_skipUnchangedFrames") ) { return hx::Val( get_skipUnchangedFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_skipUnchangedFrames") ) { return hx::Val( set_skipUnchangedFrames_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__supportHighResolutions") ) { return hx::Val( _hx___supportHighResolutions ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"get_supportHighResolutions") ) { return hx::Val( get_supportHighResolutions_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_supportHighResolutions") ) { return hx::Val( set_supportHighResolutions_dyn() ); }
		if (HX_FIELD_EQ(inName,"isNativeDisplayObjectEmpty") ) { return hx::Val( isNativeDisplayObjectEmpty_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Starling_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"all") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_all() ); return true; } }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sAll") ) { outValue = ( sAll ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_current() ); return true; } }
		if (HX_FIELD_EQ(inName,"get_all") ) { outValue = get_all_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sCurrent") ) { outValue = ( sCurrent ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_current") ) { outValue = get_current_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"multitouchEnabled") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_multitouchEnabled() ); return true; } }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_multitouchEnabled") ) { outValue = get_multitouchEnabled_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_multitouchEnabled") ) { outValue = set_multitouchEnabled_dyn(); return true; }
	}
	return false;
}

hx::Val Starling_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__root") ) { __root=inValue.Cast<  ::starling::display::DisplayObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__stage") ) { _hx___stage=inValue.Cast<  ::starling::display::Stage >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"viewPort") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_viewPort(inValue.Cast<  ::openfl::geom::Rectangle >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__juggler") ) { _hx___juggler=inValue.Cast<  ::starling::animation::Juggler >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__painter") ) { _hx___painter=inValue.Cast<  ::starling::rendering::Painter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameID") ) { _hx___frameID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__started") ) { _hx___started=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showStats") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_showStats(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"rootClass") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rootClass(inValue.Cast< hx::Class >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__viewPort") ) { _hx___viewPort=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__rootClass") ) { _hx___rootClass=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rendering") ) { _hx___rendering=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showStats") ) { _hx___showStats=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"antiAliasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasing(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"shareContext") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shareContext(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__nativeStage") ) { _hx___nativeStage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__antiAliasing") ) { _hx___antiAliasing=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__statsDisplay") ) { _hx___statsDisplay=inValue.Cast<  ::starling::core::StatsDisplay >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchProcessor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_touchProcessor(inValue.Cast<  ::starling::events::TouchProcessor >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__leftMouseDown") ) { _hx___leftMouseDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__nativeOverlay") ) { _hx___nativeOverlay=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__touchProcessor") ) { _hx___touchProcessor=inValue.Cast<  ::starling::events::TouchProcessor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameTimestamp") ) { _hx___frameTimestamp=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__clippedViewPort") ) { _hx___clippedViewPort=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__previousViewPort") ) { _hx___previousViewPort=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__nativeStageEmpty") ) { _hx___nativeStageEmpty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"simulateMultitouch") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_simulateMultitouch(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enableErrorChecking(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"skipUnchangedFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_skipUnchangedFrames(inValue.Cast< bool >()) ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__skipUnchangedFrames") ) { _hx___skipUnchangedFrames=inValue.Cast< bool >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"supportHighResolutions") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_supportHighResolutions(inValue.Cast< bool >()) ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__supportHighResolutions") ) { _hx___supportHighResolutions=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Starling_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sAll") ) { sAll=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sCurrent") ) { sCurrent=ioValue.Cast<  ::starling::core::Starling >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"multitouchEnabled") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_multitouchEnabled(ioValue.Cast< bool >()) ); }
	}
	return false;
}

void Starling_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee"));
	outFields->push(HX_HCSTRING("__rootClass","\x96","\xc7","\x46","\x2f"));
	outFields->push(HX_HCSTRING("__root","\x42","\x51","\xa7","\xfa"));
	outFields->push(HX_HCSTRING("__juggler","\xee","\xb9","\x9f","\x13"));
	outFields->push(HX_HCSTRING("__painter","\x6b","\x04","\x71","\x39"));
	outFields->push(HX_HCSTRING("__touchProcessor","\xb3","\xa0","\xdf","\x1e"));
	outFields->push(HX_HCSTRING("__antiAliasing","\x34","\x56","\x25","\x43"));
	outFields->push(HX_HCSTRING("__frameTimestamp","\x09","\xda","\x45","\xc2"));
	outFields->push(HX_HCSTRING("__frameID","\x28","\x2e","\xc2","\xc9"));
	outFields->push(HX_HCSTRING("__leftMouseDown","\x00","\x09","\x60","\xf0"));
	outFields->push(HX_HCSTRING("__statsDisplay","\x03","\xf1","\x66","\xba"));
	outFields->push(HX_HCSTRING("__started","\x21","\x7a","\x69","\xb6"));
	outFields->push(HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb"));
	outFields->push(HX_HCSTRING("__supportHighResolutions","\x56","\x99","\x77","\x0a"));
	outFields->push(HX_HCSTRING("__skipUnchangedFrames","\xe2","\x12","\xb2","\x0e"));
	outFields->push(HX_HCSTRING("__showStats","\xc2","\x24","\x9c","\xe0"));
	outFields->push(HX_HCSTRING("__viewPort","\xa6","\xeb","\xb6","\x2a"));
	outFields->push(HX_HCSTRING("__previousViewPort","\xfd","\x12","\x6b","\xbb"));
	outFields->push(HX_HCSTRING("__clippedViewPort","\x85","\x04","\xa9","\xa7"));
	outFields->push(HX_HCSTRING("__nativeStage","\x87","\x2e","\x7f","\x33"));
	outFields->push(HX_HCSTRING("__nativeStageEmpty","\x86","\x72","\xef","\x27"));
	outFields->push(HX_HCSTRING("__nativeOverlay","\x99","\x4b","\xd3","\xef"));
	outFields->push(HX_HCSTRING("touchEventTypes","\x9e","\x5a","\x5f","\x21"));
	outFields->push(HX_HCSTRING("mustAlwaysRender","\x2e","\x97","\xd7","\x45"));
	outFields->push(HX_HCSTRING("isStarted","\x77","\xa6","\x19","\x39"));
	outFields->push(HX_HCSTRING("juggler","\x0e","\x69","\x51","\x92"));
	outFields->push(HX_HCSTRING("painter","\x8b","\xb3","\x22","\xb8"));
	outFields->push(HX_HCSTRING("context","\xef","\x95","\x77","\x19"));
	outFields->push(HX_HCSTRING("simulateMultitouch","\x6a","\xa7","\x5c","\x58"));
	outFields->push(HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"));
	outFields->push(HX_HCSTRING("antiAliasing","\x14","\xd3","\x64","\x22"));
	outFields->push(HX_HCSTRING("viewPort","\x86","\x78","\x7e","\x87"));
	outFields->push(HX_HCSTRING("contentScaleFactor","\x40","\xf2","\x2c","\x43"));
	outFields->push(HX_HCSTRING("nativeOverlay","\xb9","\x12","\x21","\x68"));
	outFields->push(HX_HCSTRING("showStats","\xe2","\xdb","\x6f","\xb2"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	outFields->push(HX_HCSTRING("stage3D","\xef","\x42","\xca","\x2d"));
	outFields->push(HX_HCSTRING("nativeStage","\xa7","\xed","\x06","\xeb"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("rootClass","\xb6","\x7e","\x1a","\x01"));
	outFields->push(HX_HCSTRING("shareContext","\xd0","\xc2","\xc1","\x26"));
	outFields->push(HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"));
	outFields->push(HX_HCSTRING("supportHighResolutions","\x36","\xee","\x07","\x8d"));
	outFields->push(HX_HCSTRING("skipUnchangedFrames","\x02","\xf2","\xbd","\xa0"));
	outFields->push(HX_HCSTRING("touchProcessor","\x93","\x15","\xa0","\xea"));
	outFields->push(HX_HCSTRING("frameID","\x48","\xdd","\x73","\x48"));
	outFields->push(HX_HCSTRING("contextValid","\x8d","\x6c","\x1d","\xb8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Starling_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::display::Stage*/ ,(int)offsetof(Starling_obj,_hx___stage),HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(Starling_obj,_hx___rootClass),HX_HCSTRING("__rootClass","\x96","\xc7","\x46","\x2f")},
	{hx::fsObject /*::starling::display::DisplayObject*/ ,(int)offsetof(Starling_obj,__root),HX_HCSTRING("__root","\x42","\x51","\xa7","\xfa")},
	{hx::fsObject /*::starling::animation::Juggler*/ ,(int)offsetof(Starling_obj,_hx___juggler),HX_HCSTRING("__juggler","\xee","\xb9","\x9f","\x13")},
	{hx::fsObject /*::starling::rendering::Painter*/ ,(int)offsetof(Starling_obj,_hx___painter),HX_HCSTRING("__painter","\x6b","\x04","\x71","\x39")},
	{hx::fsObject /*::starling::events::TouchProcessor*/ ,(int)offsetof(Starling_obj,_hx___touchProcessor),HX_HCSTRING("__touchProcessor","\xb3","\xa0","\xdf","\x1e")},
	{hx::fsInt,(int)offsetof(Starling_obj,_hx___antiAliasing),HX_HCSTRING("__antiAliasing","\x34","\x56","\x25","\x43")},
	{hx::fsFloat,(int)offsetof(Starling_obj,_hx___frameTimestamp),HX_HCSTRING("__frameTimestamp","\x09","\xda","\x45","\xc2")},
	{hx::fsInt,(int)offsetof(Starling_obj,_hx___frameID),HX_HCSTRING("__frameID","\x28","\x2e","\xc2","\xc9")},
	{hx::fsBool,(int)offsetof(Starling_obj,_hx___leftMouseDown),HX_HCSTRING("__leftMouseDown","\x00","\x09","\x60","\xf0")},
	{hx::fsObject /*::starling::core::StatsDisplay*/ ,(int)offsetof(Starling_obj,_hx___statsDisplay),HX_HCSTRING("__statsDisplay","\x03","\xf1","\x66","\xba")},
	{hx::fsBool,(int)offsetof(Starling_obj,_hx___started),HX_HCSTRING("__started","\x21","\x7a","\x69","\xb6")},
	{hx::fsBool,(int)offsetof(Starling_obj,_hx___rendering),HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb")},
	{hx::fsBool,(int)offsetof(Starling_obj,_hx___supportHighResolutions),HX_HCSTRING("__supportHighResolutions","\x56","\x99","\x77","\x0a")},
	{hx::fsBool,(int)offsetof(Starling_obj,_hx___skipUnchangedFrames),HX_HCSTRING("__skipUnchangedFrames","\xe2","\x12","\xb2","\x0e")},
	{hx::fsBool,(int)offsetof(Starling_obj,_hx___showStats),HX_HCSTRING("__showStats","\xc2","\x24","\x9c","\xe0")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Starling_obj,_hx___viewPort),HX_HCSTRING("__viewPort","\xa6","\xeb","\xb6","\x2a")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Starling_obj,_hx___previousViewPort),HX_HCSTRING("__previousViewPort","\xfd","\x12","\x6b","\xbb")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Starling_obj,_hx___clippedViewPort),HX_HCSTRING("__clippedViewPort","\x85","\x04","\xa9","\xa7")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(int)offsetof(Starling_obj,_hx___nativeStage),HX_HCSTRING("__nativeStage","\x87","\x2e","\x7f","\x33")},
	{hx::fsBool,(int)offsetof(Starling_obj,_hx___nativeStageEmpty),HX_HCSTRING("__nativeStageEmpty","\x86","\x72","\xef","\x27")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Starling_obj,_hx___nativeOverlay),HX_HCSTRING("__nativeOverlay","\x99","\x4b","\xd3","\xef")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Starling_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Starling_obj::VERSION,HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc")},
	{hx::fsObject /*::starling::core::Starling*/ ,(void *) &Starling_obj::sCurrent,HX_HCSTRING("sCurrent","\x06","\x08","\xde","\x4a")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &Starling_obj::sAll,HX_HCSTRING("sAll","\x6e","\x3a","\x35","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Starling_obj_sMemberFields[] = {
	HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee"),
	HX_HCSTRING("__rootClass","\x96","\xc7","\x46","\x2f"),
	HX_HCSTRING("__root","\x42","\x51","\xa7","\xfa"),
	HX_HCSTRING("__juggler","\xee","\xb9","\x9f","\x13"),
	HX_HCSTRING("__painter","\x6b","\x04","\x71","\x39"),
	HX_HCSTRING("__touchProcessor","\xb3","\xa0","\xdf","\x1e"),
	HX_HCSTRING("__antiAliasing","\x34","\x56","\x25","\x43"),
	HX_HCSTRING("__frameTimestamp","\x09","\xda","\x45","\xc2"),
	HX_HCSTRING("__frameID","\x28","\x2e","\xc2","\xc9"),
	HX_HCSTRING("__leftMouseDown","\x00","\x09","\x60","\xf0"),
	HX_HCSTRING("__statsDisplay","\x03","\xf1","\x66","\xba"),
	HX_HCSTRING("__started","\x21","\x7a","\x69","\xb6"),
	HX_HCSTRING("__rendering","\x2c","\x24","\xa0","\xfb"),
	HX_HCSTRING("__supportHighResolutions","\x56","\x99","\x77","\x0a"),
	HX_HCSTRING("__skipUnchangedFrames","\xe2","\x12","\xb2","\x0e"),
	HX_HCSTRING("__showStats","\xc2","\x24","\x9c","\xe0"),
	HX_HCSTRING("__viewPort","\xa6","\xeb","\xb6","\x2a"),
	HX_HCSTRING("__previousViewPort","\xfd","\x12","\x6b","\xbb"),
	HX_HCSTRING("__clippedViewPort","\x85","\x04","\xa9","\xa7"),
	HX_HCSTRING("__nativeStage","\x87","\x2e","\x7f","\x33"),
	HX_HCSTRING("__nativeStageEmpty","\x86","\x72","\xef","\x27"),
	HX_HCSTRING("__nativeOverlay","\x99","\x4b","\xd3","\xef"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("initializeRoot","\x92","\x33","\x3e","\x4f"),
	HX_HCSTRING("nextFrame","\x3a","\x92","\xc8","\xad"),
	HX_HCSTRING("advanceTime","\xaf","\x69","\x9d","\xab"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("updateViewPort","\xaf","\x6b","\xa8","\xbc"),
	HX_HCSTRING("updateNativeOverlay","\xf0","\x0a","\xa8","\xfb"),
	HX_HCSTRING("stopWithFatalError","\x6c","\xb6","\x80","\x72"),
	HX_HCSTRING("makeCurrent","\xeb","\xc3","\xed","\x0f"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("setRequiresRedraw","\x87","\x38","\x6c","\xf7"),
	HX_HCSTRING("onStage3DError","\x18","\x56","\x58","\xe3"),
	HX_HCSTRING("onContextCreated","\x38","\x81","\xff","\xc0"),
	HX_HCSTRING("onContextRestored","\x06","\x18","\x47","\xe2"),
	HX_HCSTRING("onEnterFrame","\xf4","\xa5","\x93","\xda"),
	HX_HCSTRING("onKey","\xc0","\x1d","\x69","\x32"),
	HX_HCSTRING("onResize","\x73","\x50","\x28","\xe8"),
	HX_HCSTRING("onMouseLeave","\x91","\xca","\x63","\x68"),
	HX_HCSTRING("onTouch","\x20","\xb6","\x70","\xaa"),
	HX_HCSTRING("get_touchEventTypes","\xb5","\x29","\x6a","\xac"),
	HX_HCSTRING("get_mustAlwaysRender","\x37","\xfc","\x41","\x64"),
	HX_HCSTRING("get_isStarted","\x4e","\x7a","\x7d","\xfa"),
	HX_HCSTRING("get_juggler","\x25","\xc9","\x4b","\x18"),
	HX_HCSTRING("get_painter","\xa2","\x13","\x1d","\x3e"),
	HX_HCSTRING("get_context","\x06","\xf6","\x71","\x9f"),
	HX_HCSTRING("get_simulateMultitouch","\xb3","\x20","\xf1","\xb1"),
	HX_HCSTRING("set_simulateMultitouch","\x27","\x9d","\x9c","\xe5"),
	HX_HCSTRING("get_enableErrorChecking","\x16","\xe3","\x6e","\xc2"),
	HX_HCSTRING("set_enableErrorChecking","\x22","\x4c","\xd0","\xc4"),
	HX_HCSTRING("get_antiAliasing","\x9d","\xbf","\x03","\x27"),
	HX_HCSTRING("set_antiAliasing","\x11","\xad","\x45","\x7d"),
	HX_HCSTRING("get_viewPort","\x8f","\x2c","\x98","\x3c"),
	HX_HCSTRING("set_viewPort","\x03","\x50","\x91","\x51"),
	HX_HCSTRING("get_contentScaleFactor","\x89","\x6b","\xc1","\x9c"),
	HX_HCSTRING("get_nativeOverlay","\x10","\x1e","\x91","\x6e"),
	HX_HCSTRING("get_showStats","\xb9","\xaf","\xd3","\x73"),
	HX_HCSTRING("set_showStats","\xc5","\x91","\xd9","\xb8"),
	HX_HCSTRING("showStatsAt","\x75","\x51","\x08","\x13"),
	HX_HCSTRING("get_stage","\x15","\xc7","\xb4","\xc7"),
	HX_HCSTRING("get_stage3D","\x06","\xa3","\xc4","\xb3"),
	HX_HCSTRING("get_nativeStage","\x3e","\xa5","\xe8","\xab"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_rootClass","\x8d","\x52","\x7e","\xc2"),
	HX_HCSTRING("set_rootClass","\x99","\x34","\x84","\x07"),
	HX_HCSTRING("get_shareContext","\x59","\xaf","\x60","\x2b"),
	HX_HCSTRING("set_shareContext","\xcd","\x9c","\xa2","\x81"),
	HX_HCSTRING("get_profile","\x40","\xa9","\x43","\x79"),
	HX_HCSTRING("get_supportHighResolutions","\xff","\x3f","\x0d","\xc5"),
	HX_HCSTRING("set_supportHighResolutions","\x73","\x06","\xa2","\x24"),
	HX_HCSTRING("get_skipUnchangedFrames","\x99","\x98","\x13","\xa9"),
	HX_HCSTRING("set_skipUnchangedFrames","\xa5","\x01","\x75","\xab"),
	HX_HCSTRING("get_touchProcessor","\x5c","\xf6","\x39","\x86"),
	HX_HCSTRING("set_touchProcessor","\xd0","\x28","\xe9","\x62"),
	HX_HCSTRING("get_frameID","\x5f","\x3d","\x6e","\xce"),
	HX_HCSTRING("get_contextValid","\x16","\x59","\xbc","\xbc"),
	HX_HCSTRING("isNativeDisplayObjectEmpty","\xad","\xad","\xbd","\x0a"),
	::String(null()) };

static void Starling_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Starling_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Starling_obj::VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(Starling_obj::sCurrent,"sCurrent");
	HX_MARK_MEMBER_NAME(Starling_obj::sAll,"sAll");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Starling_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Starling_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Starling_obj::VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(Starling_obj::sCurrent,"sCurrent");
	HX_VISIT_MEMBER_NAME(Starling_obj::sAll,"sAll");
};

#endif

hx::Class Starling_obj::__mClass;

static ::String Starling_obj_sStaticFields[] = {
	HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"),
	HX_HCSTRING("sCurrent","\x06","\x08","\xde","\x4a"),
	HX_HCSTRING("sAll","\x6e","\x3a","\x35","\x4c"),
	HX_HCSTRING("get_current","\x50","\xfc","\xdd","\x51"),
	HX_HCSTRING("get_all","\xb8","\xc1","\xbe","\x26"),
	HX_HCSTRING("get_multitouchEnabled","\x52","\xf9","\xb8","\x9e"),
	HX_HCSTRING("set_multitouchEnabled","\x5e","\xc7","\xc1","\xf2"),
	::String(null())
};

void Starling_obj::__register()
{
	hx::Object *dummy = new Starling_obj;
	Starling_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.core.Starling","\xb1","\x1b","\x5c","\xf2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Starling_obj::__GetStatic;
	__mClass->mSetStaticField = &Starling_obj::__SetStatic;
	__mClass->mMarkFunc = Starling_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Starling_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Starling_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Starling_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Starling_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Starling_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Starling_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Starling_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_211_boot)
HXDLIN( 211)		VERSION = HX_("2.1.1",78,28,96,e8);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_37f1f4957768d1d8_241_boot)
HXDLIN( 241)			int length = null();
HXDLIN( 241)			bool fixed = null();
HXDLIN( 241)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_37f1f4957768d1d8_241_boot)
HXDLIN( 241)		sAll =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace starling
} // end namespace core
