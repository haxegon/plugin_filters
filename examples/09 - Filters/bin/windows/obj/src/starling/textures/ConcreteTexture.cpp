// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_NetStream
#include <openfl/net/NetStream.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_errors_AbstractMethodError
#include <starling/errors/AbstractMethodError.h>
#endif
#ifndef INCLUDED_starling_errors_NotSupportedError
#include <starling/errors/NotSupportedError.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_Color
#include <starling/utils/Color.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_98d0808d223f8a2b_69_new,"starling.textures.ConcreteTexture","new",0xe9a93c18,"starling.textures.ConcreteTexture.new","starling/textures/ConcreteTexture.hx",69,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_85_dispose,"starling.textures.ConcreteTexture","dispose",0x44ee2857,"starling.textures.ConcreteTexture.dispose","starling/textures/ConcreteTexture.hx",85,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_107_uploadBitmap,"starling.textures.ConcreteTexture","uploadBitmap",0x2daea218,"starling.textures.ConcreteTexture.uploadBitmap","starling/textures/ConcreteTexture.hx",107,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_123_uploadBitmapData,"starling.textures.ConcreteTexture","uploadBitmapData",0x85821062,"starling.textures.ConcreteTexture.uploadBitmapData","starling/textures/ConcreteTexture.hx",123,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_137_uploadAtfData,"starling.textures.ConcreteTexture","uploadAtfData",0xdcc0d994,"starling.textures.ConcreteTexture.uploadAtfData","starling/textures/ConcreteTexture.hx",137,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_143_attachNetStream,"starling.textures.ConcreteTexture","attachNetStream",0xc27b5ff0,"starling.textures.ConcreteTexture.attachNetStream","starling/textures/ConcreteTexture.hx",143,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_157_attachVideo,"starling.textures.ConcreteTexture","attachVideo",0xf655a22e,"starling.textures.ConcreteTexture.attachVideo","starling/textures/ConcreteTexture.hx",157,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_163_onContextCreated,"starling.textures.ConcreteTexture","onContextCreated",0x44f72280,"starling.textures.ConcreteTexture.onContextCreated","starling/textures/ConcreteTexture.hx",163,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_178_createBase,"starling.textures.ConcreteTexture","createBase",0xa0dea475,"starling.textures.ConcreteTexture.createBase","starling/textures/ConcreteTexture.hx",178,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_185_recreateBase,"starling.textures.ConcreteTexture","recreateBase",0x8c4927e8,"starling.textures.ConcreteTexture.recreateBase","starling/textures/ConcreteTexture.hx",185,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_191_clear,"starling.textures.ConcreteTexture","clear",0x42ad3b45,"starling.textures.ConcreteTexture.clear","starling/textures/ConcreteTexture.hx",191,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_215_setDataUploaded,"starling.textures.ConcreteTexture","setDataUploaded",0xe431a364,"starling.textures.ConcreteTexture.setDataUploaded","starling/textures/ConcreteTexture.hx",215,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_222_get_optimizedForRenderTexture,"starling.textures.ConcreteTexture","get_optimizedForRenderTexture",0xb256c5f2,"starling.textures.ConcreteTexture.get_optimizedForRenderTexture","starling/textures/ConcreteTexture.hx",222,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_227_get_isPotTexture,"starling.textures.ConcreteTexture","get_isPotTexture",0x49045621,"starling.textures.ConcreteTexture.get_isPotTexture","starling/textures/ConcreteTexture.hx",227,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_242_get_onRestore,"starling.textures.ConcreteTexture","get_onRestore",0x6005357e,"starling.textures.ConcreteTexture.get_onRestore","starling/textures/ConcreteTexture.hx",242,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_244_set_onRestore,"starling.textures.ConcreteTexture","set_onRestore",0xa50b178a,"starling.textures.ConcreteTexture.set_onRestore","starling/textures/ConcreteTexture.hx",244,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_257_get_base,"starling.textures.ConcreteTexture","get_base",0xa49cbce2,"starling.textures.ConcreteTexture.get_base","starling/textures/ConcreteTexture.hx",257,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_260_get_root,"starling.textures.ConcreteTexture","get_root",0xaf3ac2f3,"starling.textures.ConcreteTexture.get_root","starling/textures/ConcreteTexture.hx",260,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_263_get_format,"starling.textures.ConcreteTexture","get_format",0x3b55fa48,"starling.textures.ConcreteTexture.get_format","starling/textures/ConcreteTexture.hx",263,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_266_get_width,"starling.textures.ConcreteTexture","get_width",0x81311815,"starling.textures.ConcreteTexture.get_width","starling/textures/ConcreteTexture.hx",266,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_269_get_height,"starling.textures.ConcreteTexture","get_height",0x401372f8,"starling.textures.ConcreteTexture.get_height","starling/textures/ConcreteTexture.hx",269,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_272_get_nativeWidth,"starling.textures.ConcreteTexture","get_nativeWidth",0x9de4103e,"starling.textures.ConcreteTexture.get_nativeWidth","starling/textures/ConcreteTexture.hx",272,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_275_get_nativeHeight,"starling.textures.ConcreteTexture","get_nativeHeight",0x3ff99eaf,"starling.textures.ConcreteTexture.get_nativeHeight","starling/textures/ConcreteTexture.hx",275,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_278_get_scale,"starling.textures.ConcreteTexture","get_scale",0x2f9d3099,"starling.textures.ConcreteTexture.get_scale","starling/textures/ConcreteTexture.hx",278,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_281_get_mipMapping,"starling.textures.ConcreteTexture","get_mipMapping",0x53bf736b,"starling.textures.ConcreteTexture.get_mipMapping","starling/textures/ConcreteTexture.hx",281,0x5ad5be38)
HX_LOCAL_STACK_FRAME(_hx_pos_98d0808d223f8a2b_284_get_premultipliedAlpha,"starling.textures.ConcreteTexture","get_premultipliedAlpha",0x7ce0ceb9,"starling.textures.ConcreteTexture.get_premultipliedAlpha","starling/textures/ConcreteTexture.hx",284,0x5ad5be38)
namespace starling{
namespace textures{

void ConcreteTexture_obj::__construct( ::openfl::display3D::textures::TextureBase base,::String format,int width,int height,bool mipMapping,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale){
bool optimizedForRenderTexture = __o_optimizedForRenderTexture.Default(false);
Float scale = __o_scale.Default(1);
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_69_new)
HXLINE(  70)		super::__construct();
HXLINE(  71)		Float _hx_tmp;
HXDLIN(  71)		if ((scale <= (int)0)) {
HXLINE(  71)			_hx_tmp = ((Float)1.0);
            		}
            		else {
HXLINE(  71)			_hx_tmp = scale;
            		}
HXDLIN(  71)		this->_scale = _hx_tmp;
HXLINE(  72)		this->_base = base;
HXLINE(  73)		this->_format = format;
HXLINE(  74)		this->_width = width;
HXLINE(  75)		this->_height = height;
HXLINE(  76)		this->_mipMapping = mipMapping;
HXLINE(  77)		this->_premultipliedAlpha = premultipliedAlpha;
HXLINE(  78)		this->_optimizedForRenderTexture = optimizedForRenderTexture;
HXLINE(  79)		this->_onRestore = null();
HXLINE(  80)		this->_dataUploaded = false;
            	}

Dynamic ConcreteTexture_obj::__CreateEmpty() { return new ConcreteTexture_obj; }

void *ConcreteTexture_obj::_hx_vtable = 0;

Dynamic ConcreteTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ConcreteTexture_obj > _hx_result = new ConcreteTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool ConcreteTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d644757) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0d644757;
	} else {
		return inClassId==(int)0x2b45ed76;
	}
}

void ConcreteTexture_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_85_dispose)
HXLINE(  86)		if (hx::IsNotNull( this->_base )) {
HXLINE(  86)			this->_base->dispose();
            		}
HXLINE(  88)		this->set_onRestore(null());
HXLINE(  89)		this->super::dispose();
            	}


void ConcreteTexture_obj::uploadBitmap( ::openfl::display::Bitmap bitmap, ::Dynamic async){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_107_uploadBitmap)
HXDLIN( 107)		this->uploadBitmapData(bitmap->get_bitmapData(),async);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ConcreteTexture_obj,uploadBitmap,(void))

void ConcreteTexture_obj::uploadBitmapData( ::openfl::display::BitmapData data, ::Dynamic async){
            	HX_GC_STACKFRAME(&_hx_pos_98d0808d223f8a2b_123_uploadBitmapData)
HXDLIN( 123)		HX_STACK_DO_THROW( ::starling::errors::NotSupportedError_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ConcreteTexture_obj,uploadBitmapData,(void))

void ConcreteTexture_obj::uploadAtfData( ::openfl::utils::ByteArrayData data,hx::Null< int >  __o_offset, ::Dynamic async){
int offset = __o_offset.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_98d0808d223f8a2b_137_uploadAtfData)
HXDLIN( 137)		HX_STACK_DO_THROW( ::starling::errors::NotSupportedError_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC3(ConcreteTexture_obj,uploadAtfData,(void))

void ConcreteTexture_obj::attachNetStream( ::openfl::net::NetStream netStream, ::Dynamic onComplete){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_143_attachNetStream)
HXDLIN( 143)		this->attachVideo(HX_("NetStream",9d,5c,f0,f3),netStream,onComplete);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ConcreteTexture_obj,attachNetStream,(void))

void ConcreteTexture_obj::attachVideo(::String type, ::Dynamic attachment, ::Dynamic onComplete){
            	HX_GC_STACKFRAME(&_hx_pos_98d0808d223f8a2b_157_attachVideo)
HXDLIN( 157)		HX_STACK_DO_THROW( ::starling::errors::NotSupportedError_obj::__alloc( HX_CTX ,null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC3(ConcreteTexture_obj,attachVideo,(void))

void ConcreteTexture_obj::onContextCreated(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_163_onContextCreated)
HXLINE( 164)		this->_dataUploaded = false;
HXLINE( 165)		this->_base = this->createBase();
HXLINE( 166)		this->_onRestore(hx::ObjectPtr<OBJ_>(this));
HXLINE( 169)		if (!(this->_dataUploaded)) {
HXLINE( 169)			this->clear(null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteTexture_obj,onContextCreated,(void))

 ::openfl::display3D::textures::TextureBase ConcreteTexture_obj::createBase(){
            	HX_GC_STACKFRAME(&_hx_pos_98d0808d223f8a2b_178_createBase)
HXDLIN( 178)		HX_STACK_DO_THROW( ::starling::errors::AbstractMethodError_obj::__alloc( HX_CTX ,null(),null()));
HXDLIN( 178)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteTexture_obj,createBase,return )

void ConcreteTexture_obj::recreateBase(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_185_recreateBase)
HXDLIN( 185)		this->_base = this->createBase();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteTexture_obj,recreateBase,(void))

void ConcreteTexture_obj::clear(hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha){
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_191_clear)
HXLINE( 192)		bool _hx_tmp;
HXDLIN( 192)		if (this->_premultipliedAlpha) {
HXLINE( 192)			_hx_tmp = (alpha < ((Float)1.0));
            		}
            		else {
HXLINE( 192)			_hx_tmp = false;
            		}
HXDLIN( 192)		if (_hx_tmp) {
HXLINE( 193)			int color1 = ::Std_obj::_hx_int((::starling::utils::Color_obj::getRed(color) * alpha));
HXLINE( 194)			int color2 = ::Std_obj::_hx_int((::starling::utils::Color_obj::getGreen(color) * alpha));
HXLINE( 193)			color = ::starling::utils::Color_obj::rgb(color1,color2,::Std_obj::_hx_int((::starling::utils::Color_obj::getBlue(color) * alpha)));
            		}
HXLINE( 197)		 ::starling::rendering::Painter painter = ::starling::core::Starling_obj::get_current()->get_painter();
HXLINE( 198)		painter->pushState(null());
HXLINE( 199)		painter->get_state()->set_renderTarget(hx::ObjectPtr<OBJ_>(this));
HXLINE( 205)		try {
            			HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE( 205)			painter->clear(color,alpha);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::openfl::errors::Error e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 208)		painter->popState(null());
HXLINE( 209)		this->setDataUploaded();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ConcreteTexture_obj,clear,(void))

void ConcreteTexture_obj::setDataUploaded(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_215_setDataUploaded)
HXDLIN( 215)		this->_dataUploaded = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteTexture_obj,setDataUploaded,(void))

bool ConcreteTexture_obj::get_optimizedForRenderTexture(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_222_get_optimizedForRenderTexture)
HXDLIN( 222)		return this->_optimizedForRenderTexture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteTexture_obj,get_optimizedForRenderTexture,return )

bool ConcreteTexture_obj::get_isPotTexture(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_227_get_isPotTexture)
HXDLIN( 227)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteTexture_obj,get_isPotTexture,return )

 ::Dynamic ConcreteTexture_obj::get_onRestore(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_242_get_onRestore)
HXDLIN( 242)		return this->_onRestore;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteTexture_obj,get_onRestore,return )

 ::Dynamic ConcreteTexture_obj::set_onRestore( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_244_set_onRestore)
HXLINE( 245)		::starling::core::Starling_obj::get_current()->removeEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextCreated_dyn());
HXLINE( 247)		if (hx::IsNotNull( value )) {
HXLINE( 249)			this->_onRestore = value;
HXLINE( 250)			::starling::core::Starling_obj::get_current()->addEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextCreated_dyn());
            		}
            		else {
HXLINE( 252)			this->_onRestore = null();
            		}
HXLINE( 253)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConcreteTexture_obj,set_onRestore,return )

 ::openfl::display3D::textures::TextureBase ConcreteTexture_obj::get_base(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_257_get_base)
HXDLIN( 257)		return this->_base;
            	}


 ::starling::textures::ConcreteTexture ConcreteTexture_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_260_get_root)
HXDLIN( 260)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::Dynamic ConcreteTexture_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_263_get_format)
HXDLIN( 263)		return ::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(this->_format);
            	}


Float ConcreteTexture_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_266_get_width)
HXDLIN( 266)		return ((Float)this->_width / (Float)this->_scale);
            	}


Float ConcreteTexture_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_269_get_height)
HXDLIN( 269)		return ((Float)this->_height / (Float)this->_scale);
            	}


Float ConcreteTexture_obj::get_nativeWidth(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_272_get_nativeWidth)
HXDLIN( 272)		return this->_width;
            	}


Float ConcreteTexture_obj::get_nativeHeight(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_275_get_nativeHeight)
HXDLIN( 275)		return this->_height;
            	}


Float ConcreteTexture_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_278_get_scale)
HXDLIN( 278)		return this->_scale;
            	}


bool ConcreteTexture_obj::get_mipMapping(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_281_get_mipMapping)
HXDLIN( 281)		return this->_mipMapping;
            	}


bool ConcreteTexture_obj::get_premultipliedAlpha(){
            	HX_STACKFRAME(&_hx_pos_98d0808d223f8a2b_284_get_premultipliedAlpha)
HXDLIN( 284)		return this->_premultipliedAlpha;
            	}



hx::ObjectPtr< ConcreteTexture_obj > ConcreteTexture_obj::__new( ::openfl::display3D::textures::TextureBase base,::String format,int width,int height,bool mipMapping,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale) {
	hx::ObjectPtr< ConcreteTexture_obj > __this = new ConcreteTexture_obj();
	__this->__construct(base,format,width,height,mipMapping,premultipliedAlpha,__o_optimizedForRenderTexture,__o_scale);
	return __this;
}

hx::ObjectPtr< ConcreteTexture_obj > ConcreteTexture_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::textures::TextureBase base,::String format,int width,int height,bool mipMapping,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale) {
	ConcreteTexture_obj *__this = (ConcreteTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ConcreteTexture_obj), true, "starling.textures.ConcreteTexture"));
	*(void **)__this = ConcreteTexture_obj::_hx_vtable;
	__this->__construct(base,format,width,height,mipMapping,premultipliedAlpha,__o_optimizedForRenderTexture,__o_scale);
	return __this;
}

ConcreteTexture_obj::ConcreteTexture_obj()
{
}

void ConcreteTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ConcreteTexture);
	HX_MARK_MEMBER_NAME(_base,"_base");
	HX_MARK_MEMBER_NAME(_format,"_format");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_mipMapping,"_mipMapping");
	HX_MARK_MEMBER_NAME(_premultipliedAlpha,"_premultipliedAlpha");
	HX_MARK_MEMBER_NAME(_optimizedForRenderTexture,"_optimizedForRenderTexture");
	HX_MARK_MEMBER_NAME(_scale,"_scale");
	HX_MARK_MEMBER_NAME(_onRestore,"_onRestore");
	HX_MARK_MEMBER_NAME(_dataUploaded,"_dataUploaded");
	HX_MARK_END_CLASS();
}

void ConcreteTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_base,"_base");
	HX_VISIT_MEMBER_NAME(_format,"_format");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_mipMapping,"_mipMapping");
	HX_VISIT_MEMBER_NAME(_premultipliedAlpha,"_premultipliedAlpha");
	HX_VISIT_MEMBER_NAME(_optimizedForRenderTexture,"_optimizedForRenderTexture");
	HX_VISIT_MEMBER_NAME(_scale,"_scale");
	HX_VISIT_MEMBER_NAME(_onRestore,"_onRestore");
	HX_VISIT_MEMBER_NAME(_dataUploaded,"_dataUploaded");
}

hx::Val ConcreteTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_base") ) { return hx::Val( _base ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width ); }
		if (HX_FIELD_EQ(inName,"_scale") ) { return hx::Val( _scale ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { return hx::Val( _format ); }
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_base") ) { return hx::Val( get_base_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onRestore") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onRestore() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_onRestore") ) { return hx::Val( _onRestore ); }
		if (HX_FIELD_EQ(inName,"createBase") ) { return hx::Val( createBase_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_mipMapping") ) { return hx::Val( _mipMapping ); }
		if (HX_FIELD_EQ(inName,"attachVideo") ) { return hx::Val( attachVideo_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"uploadBitmap") ) { return hx::Val( uploadBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"recreateBase") ) { return hx::Val( recreateBase_dyn() ); }
		if (HX_FIELD_EQ(inName,"isPotTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isPotTexture() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_dataUploaded") ) { return hx::Val( _dataUploaded ); }
		if (HX_FIELD_EQ(inName,"uploadAtfData") ) { return hx::Val( uploadAtfData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_onRestore") ) { return hx::Val( get_onRestore_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onRestore") ) { return hx::Val( set_onRestore_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_mipMapping") ) { return hx::Val( get_mipMapping_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"attachNetStream") ) { return hx::Val( attachNetStream_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDataUploaded") ) { return hx::Val( setDataUploaded_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_nativeWidth") ) { return hx::Val( get_nativeWidth_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uploadBitmapData") ) { return hx::Val( uploadBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"onContextCreated") ) { return hx::Val( onContextCreated_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isPotTexture") ) { return hx::Val( get_isPotTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_nativeHeight") ) { return hx::Val( get_nativeHeight_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_premultipliedAlpha") ) { return hx::Val( _premultipliedAlpha ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_premultipliedAlpha") ) { return hx::Val( get_premultipliedAlpha_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"optimizedForRenderTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_optimizedForRenderTexture() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_optimizedForRenderTexture") ) { return hx::Val( _optimizedForRenderTexture ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"get_optimizedForRenderTexture") ) { return hx::Val( get_optimizedForRenderTexture_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ConcreteTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_base") ) { _base=inValue.Cast<  ::openfl::display3D::textures::TextureBase >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scale") ) { _scale=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { _format=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onRestore") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onRestore(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_onRestore") ) { _onRestore=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_mipMapping") ) { _mipMapping=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_dataUploaded") ) { _dataUploaded=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_premultipliedAlpha") ) { _premultipliedAlpha=inValue.Cast< bool >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"_optimizedForRenderTexture") ) { _optimizedForRenderTexture=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ConcreteTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_base","\xf0","\x03","\x22","\xf4"));
	outFields->push(HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"));
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("_mipMapping","\xf9","\x78","\x20","\x4f"));
	outFields->push(HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa"));
	outFields->push(HX_HCSTRING("_optimizedForRenderTexture","\x24","\x30","\x9a","\x19"));
	outFields->push(HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"));
	outFields->push(HX_HCSTRING("_dataUploaded","\xc9","\x43","\x46","\xfc"));
	outFields->push(HX_HCSTRING("optimizedForRenderTexture","\x63","\x62","\x40","\xfa"));
	outFields->push(HX_HCSTRING("isPotTexture","\x50","\xc8","\x6d","\xc0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ConcreteTexture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::textures::TextureBase*/ ,(int)offsetof(ConcreteTexture_obj,_base),HX_HCSTRING("_base","\xf0","\x03","\x22","\xf4")},
	{hx::fsString,(int)offsetof(ConcreteTexture_obj,_format),HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c")},
	{hx::fsInt,(int)offsetof(ConcreteTexture_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsInt,(int)offsetof(ConcreteTexture_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsBool,(int)offsetof(ConcreteTexture_obj,_mipMapping),HX_HCSTRING("_mipMapping","\xf9","\x78","\x20","\x4f")},
	{hx::fsBool,(int)offsetof(ConcreteTexture_obj,_premultipliedAlpha),HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa")},
	{hx::fsBool,(int)offsetof(ConcreteTexture_obj,_optimizedForRenderTexture),HX_HCSTRING("_optimizedForRenderTexture","\x24","\x30","\x9a","\x19")},
	{hx::fsFloat,(int)offsetof(ConcreteTexture_obj,_scale),HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ConcreteTexture_obj,_onRestore),HX_HCSTRING("_onRestore","\xb0","\x9b","\xfd","\x9d")},
	{hx::fsBool,(int)offsetof(ConcreteTexture_obj,_dataUploaded),HX_HCSTRING("_dataUploaded","\xc9","\x43","\x46","\xfc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ConcreteTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String ConcreteTexture_obj_sMemberFields[] = {
	HX_HCSTRING("_base","\xf0","\x03","\x22","\xf4"),
	HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"),
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("_mipMapping","\xf9","\x78","\x20","\x4f"),
	HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa"),
	HX_HCSTRING("_optimizedForRenderTexture","\x24","\x30","\x9a","\x19"),
	HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"),
	HX_HCSTRING("_onRestore","\xb0","\x9b","\xfd","\x9d"),
	HX_HCSTRING("_dataUploaded","\xc9","\x43","\x46","\xfc"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("uploadBitmap","\xd0","\x44","\x03","\x14"),
	HX_HCSTRING("uploadBitmapData","\x1a","\x6f","\x8a","\x01"),
	HX_HCSTRING("uploadAtfData","\xdc","\x97","\x7a","\x80"),
	HX_HCSTRING("attachNetStream","\x38","\x40","\xd7","\x16"),
	HX_HCSTRING("attachVideo","\x76","\xbe","\x99","\xab"),
	HX_HCSTRING("onContextCreated","\x38","\x81","\xff","\xc0"),
	HX_HCSTRING("createBase","\x2d","\xa9","\x9e","\x53"),
	HX_HCSTRING("recreateBase","\xa0","\xca","\x9d","\x72"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("setDataUploaded","\xac","\x83","\x8d","\x38"),
	HX_HCSTRING("get_optimizedForRenderTexture","\x3a","\x94","\x7f","\xe2"),
	HX_HCSTRING("get_isPotTexture","\xd9","\xb4","\x0c","\xc5"),
	HX_HCSTRING("get_onRestore","\xc6","\xf3","\xbe","\x03"),
	HX_HCSTRING("set_onRestore","\xd2","\xd5","\xc4","\x48"),
	HX_HCSTRING("get_base","\x9a","\xa3","\xcb","\xc0"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_nativeWidth","\x86","\xf0","\x3f","\xf2"),
	HX_HCSTRING("get_nativeHeight","\x67","\xfd","\x01","\xbc"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("get_mipMapping","\x23","\x34","\x8c","\xf2"),
	HX_HCSTRING("get_premultipliedAlpha","\x71","\x07","\xf1","\x73"),
	::String(null()) };

static void ConcreteTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ConcreteTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ConcreteTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ConcreteTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class ConcreteTexture_obj::__mClass;

void ConcreteTexture_obj::__register()
{
	hx::Object *dummy = new ConcreteTexture_obj;
	ConcreteTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.textures.ConcreteTexture","\x26","\x90","\xab","\x04");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ConcreteTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ConcreteTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ConcreteTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ConcreteTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConcreteTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConcreteTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace textures
