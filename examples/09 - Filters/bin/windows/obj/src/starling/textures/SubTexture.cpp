// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_SubTexture
#include <starling/textures/SubTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2264be4ccebe9e60_53_new,"starling.textures.SubTexture","new",0x13e2ac9d,"starling.textures.SubTexture.new","starling/textures/SubTexture.hx",53,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_68_setTo,"starling.textures.SubTexture","setTo",0xb45bb73a,"starling.textures.SubTexture.setTo","starling/textures/SubTexture.hx",68,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_97_updateMatrices,"starling.textures.SubTexture","updateMatrices",0x641127a6,"starling.textures.SubTexture.updateMatrices","starling/textures/SubTexture.hx",97,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_125_dispose,"starling.textures.SubTexture","dispose",0xf4eabf5c,"starling.textures.SubTexture.dispose","starling/textures/SubTexture.hx",125,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_132_get_parent,"starling.textures.SubTexture","get_parent",0x734f4a56,"starling.textures.SubTexture.get_parent","starling/textures/SubTexture.hx",132,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_136_get_ownsParent,"starling.textures.SubTexture","get_ownsParent",0x105eefa3,"starling.textures.SubTexture.get_ownsParent","starling/textures/SubTexture.hx",136,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_140_get_rotated,"starling.textures.SubTexture","get_rotated",0x82688afd,"starling.textures.SubTexture.get_rotated","starling/textures/SubTexture.hx",140,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_146_get_region,"starling.textures.SubTexture","get_region",0x865e0620,"starling.textures.SubTexture.get_region","starling/textures/SubTexture.hx",146,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_149_get_transformationMatrix,"starling.textures.SubTexture","get_transformationMatrix",0x65b1df16,"starling.textures.SubTexture.get_transformationMatrix","starling/textures/SubTexture.hx",149,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_152_get_transformationMatrixToRoot,"starling.textures.SubTexture","get_transformationMatrixToRoot",0xbbb820f3,"starling.textures.SubTexture.get_transformationMatrixToRoot","starling/textures/SubTexture.hx",152,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_155_get_base,"starling.textures.SubTexture","get_base",0xf1a44a3d,"starling.textures.SubTexture.get_base","starling/textures/SubTexture.hx",155,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_158_get_root,"starling.textures.SubTexture","get_root",0xfc42504e,"starling.textures.SubTexture.get_root","starling/textures/SubTexture.hx",158,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_161_get_format,"starling.textures.SubTexture","get_format",0x835fd463,"starling.textures.SubTexture.get_format","starling/textures/SubTexture.hx",161,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_164_get_width,"starling.textures.SubTexture","get_width",0x9ac53a5a,"starling.textures.SubTexture.get_width","starling/textures/SubTexture.hx",164,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_167_get_height,"starling.textures.SubTexture","get_height",0x881d4d13,"starling.textures.SubTexture.get_height","starling/textures/SubTexture.hx",167,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_170_get_nativeWidth,"starling.textures.SubTexture","get_nativeWidth",0x2d86b443,"starling.textures.SubTexture.get_nativeWidth","starling/textures/SubTexture.hx",170,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_173_get_nativeHeight,"starling.textures.SubTexture","get_nativeHeight",0x5ea67f0a,"starling.textures.SubTexture.get_nativeHeight","starling/textures/SubTexture.hx",173,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_176_get_mipMapping,"starling.textures.SubTexture","get_mipMapping",0xba8ff706,"starling.textures.SubTexture.get_mipMapping","starling/textures/SubTexture.hx",176,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_179_get_premultipliedAlpha,"starling.textures.SubTexture","get_premultipliedAlpha",0x7496e554,"starling.textures.SubTexture.get_premultipliedAlpha","starling/textures/SubTexture.hx",179,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_182_get_scale,"starling.textures.SubTexture","get_scale",0x493152de,"starling.textures.SubTexture.get_scale","starling/textures/SubTexture.hx",182,0xcf04b193)
HX_LOCAL_STACK_FRAME(_hx_pos_2264be4ccebe9e60_185_get_frame,"starling.textures.SubTexture","get_frame",0xd6e5fc81,"starling.textures.SubTexture.get_frame","starling/textures/SubTexture.hx",185,0xcf04b193)
namespace starling{
namespace textures{

void SubTexture_obj::__construct( ::starling::textures::Texture parent, ::openfl::geom::Rectangle region,hx::Null< bool >  __o_ownsParent, ::openfl::geom::Rectangle frame,hx::Null< bool >  __o_rotated,hx::Null< Float >  __o_scaleModifier){
bool ownsParent = __o_ownsParent.Default(false);
bool rotated = __o_rotated.Default(false);
Float scaleModifier = __o_scaleModifier.Default(1);
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_53_new)
HXLINE(  54)		super::__construct();
HXLINE(  55)		this->setTo(parent,region,ownsParent,frame,rotated,scaleModifier);
            	}

Dynamic SubTexture_obj::__CreateEmpty() { return new SubTexture_obj; }

void *SubTexture_obj::_hx_vtable = 0;

Dynamic SubTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SubTexture_obj > _hx_result = new SubTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool SubTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d644757) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0d644757;
	} else {
		return inClassId==(int)0x22869da3;
	}
}

void SubTexture_obj::setTo( ::starling::textures::Texture parent, ::openfl::geom::Rectangle region,hx::Null< bool >  __o_ownsParent, ::openfl::geom::Rectangle frame,hx::Null< bool >  __o_rotated,hx::Null< Float >  __o_scaleModifier){
bool ownsParent = __o_ownsParent.Default(false);
bool rotated = __o_rotated.Default(false);
Float scaleModifier = __o_scaleModifier.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_2264be4ccebe9e60_68_setTo)
HXLINE(  69)		if (hx::IsNull( this->_region )) {
HXLINE(  69)			this->_region =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE(  70)		if (hx::IsNotNull( region )) {
HXLINE(  70)			this->_region->copyFrom(region);
            		}
            		else {
HXLINE(  71)			 ::openfl::geom::Rectangle _hx_tmp = this->_region;
HXDLIN(  71)			Float _hx_tmp1 = parent->get_width();
HXDLIN(  71)			_hx_tmp->setTo((int)0,(int)0,_hx_tmp1,parent->get_height());
            		}
HXLINE(  73)		if (hx::IsNotNull( frame )) {
HXLINE(  75)			if (hx::IsNotNull( this->_frame )) {
HXLINE(  75)				this->_frame->copyFrom(frame);
            			}
            			else {
HXLINE(  76)				this->_frame = frame->clone();
            			}
            		}
            		else {
HXLINE(  78)			this->_frame = null();
            		}
HXLINE(  80)		this->_parent = parent;
HXLINE(  81)		this->_ownsParent = ownsParent;
HXLINE(  82)		this->_rotated = rotated;
HXLINE(  83)		Float _hx_tmp2;
HXDLIN(  83)		if (rotated) {
HXLINE(  83)			_hx_tmp2 = this->_region->height;
            		}
            		else {
HXLINE(  83)			_hx_tmp2 = this->_region->width;
            		}
HXDLIN(  83)		this->_width = ((Float)_hx_tmp2 / (Float)scaleModifier);
HXLINE(  84)		Float _hx_tmp3;
HXDLIN(  84)		if (rotated) {
HXLINE(  84)			_hx_tmp3 = this->_region->width;
            		}
            		else {
HXLINE(  84)			_hx_tmp3 = this->_region->height;
            		}
HXDLIN(  84)		this->_height = ((Float)_hx_tmp3 / (Float)scaleModifier);
HXLINE(  85)		this->_scale = (this->_parent->get_scale() * scaleModifier);
HXLINE(  87)		bool _hx_tmp4;
HXDLIN(  87)		if (hx::IsNotNull( this->_frame )) {
HXLINE(  87)			bool _hx_tmp5;
HXDLIN(  87)			bool _hx_tmp6;
HXDLIN(  87)			if (!((this->_frame->x > (int)0))) {
HXLINE(  87)				_hx_tmp6 = (this->_frame->y > (int)0);
            			}
            			else {
HXLINE(  87)				_hx_tmp6 = true;
            			}
HXDLIN(  87)			if (!(_hx_tmp6)) {
HXLINE(  88)				Float _hx_tmp7 = this->_frame->get_right();
HXLINE(  87)				_hx_tmp5 = (_hx_tmp7 < this->_width);
            			}
            			else {
HXLINE(  87)				_hx_tmp5 = true;
            			}
HXDLIN(  87)			if (!(_hx_tmp5)) {
HXLINE(  88)				Float _hx_tmp8 = this->_frame->get_bottom();
HXLINE(  87)				_hx_tmp4 = (_hx_tmp8 < this->_height);
            			}
            			else {
HXLINE(  87)				_hx_tmp4 = true;
            			}
            		}
            		else {
HXLINE(  87)			_hx_tmp4 = false;
            		}
HXDLIN(  87)		if (_hx_tmp4) {
HXLINE(  90)			::haxe::Log_obj::trace(HX_("[Starling] Warning: frames inside the texture's region are unsupported.",63,b7,12,23),hx::SourceInfo(HX_("SubTexture.hx",43,12,6d,a6),90,HX_("starling.textures.SubTexture",2b,1a,57,50),HX_("setTo",bd,91,2f,7a)));
            		}
HXLINE(  93)		this->updateMatrices();
            	}


HX_DEFINE_DYNAMIC_FUNC6(SubTexture_obj,setTo,(void))

void SubTexture_obj::updateMatrices(){
            	HX_GC_STACKFRAME(&_hx_pos_2264be4ccebe9e60_97_updateMatrices)
HXLINE(  98)		if (hx::IsNotNull( this->_transformationMatrix )) {
HXLINE(  98)			this->_transformationMatrix->identity();
            		}
            		else {
HXLINE(  99)			this->_transformationMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 101)		if (hx::IsNotNull( this->_transformationMatrixToRoot )) {
HXLINE( 101)			this->_transformationMatrixToRoot->identity();
            		}
            		else {
HXLINE( 102)			this->_transformationMatrixToRoot =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 104)		if (this->_rotated) {
HXLINE( 106)			this->_transformationMatrix->translate((int)0,(int)-1);
HXLINE( 107)			 ::openfl::geom::Matrix _hx_tmp = this->_transformationMatrix;
HXDLIN( 107)			_hx_tmp->rotate(((Float)::Math_obj::PI / (Float)((Float)2.0)));
            		}
HXLINE( 110)		 ::openfl::geom::Matrix _hx_tmp1 = this->_transformationMatrix;
HXDLIN( 110)		Float _hx_tmp2 = this->_region->width;
HXDLIN( 110)		Float _hx_tmp3 = ((Float)_hx_tmp2 / (Float)this->_parent->get_width());
HXLINE( 111)		Float _hx_tmp4 = this->_region->height;
HXLINE( 110)		_hx_tmp1->scale(_hx_tmp3,((Float)_hx_tmp4 / (Float)this->_parent->get_height()));
HXLINE( 112)		 ::openfl::geom::Matrix _hx_tmp5 = this->_transformationMatrix;
HXDLIN( 112)		Float _hx_tmp6 = this->_region->x;
HXDLIN( 112)		Float _hx_tmp7 = ((Float)_hx_tmp6 / (Float)this->_parent->get_width());
HXLINE( 113)		Float _hx_tmp8 = this->_region->y;
HXLINE( 112)		_hx_tmp5->translate(_hx_tmp7,((Float)_hx_tmp8 / (Float)this->_parent->get_height()));
HXLINE( 115)		 ::starling::textures::SubTexture texture = hx::ObjectPtr<OBJ_>(this);
HXLINE( 116)		while(hx::IsNotNull( texture )){
HXLINE( 118)			this->_transformationMatrixToRoot->concat(texture->_transformationMatrix);
HXLINE( 119)			if (::Std_obj::is(texture->get_parent(),hx::ClassOf< ::starling::textures::SubTexture >())) {
HXLINE( 119)				texture = ( ( ::starling::textures::SubTexture)(texture->get_parent()) );
            			}
            			else {
HXLINE( 119)				texture = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubTexture_obj,updateMatrices,(void))

void SubTexture_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_125_dispose)
HXLINE( 126)		if (this->_ownsParent) {
HXLINE( 126)			this->_parent->dispose();
            		}
HXLINE( 127)		this->super::dispose();
            	}


 ::starling::textures::Texture SubTexture_obj::get_parent(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_132_get_parent)
HXDLIN( 132)		return this->_parent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubTexture_obj,get_parent,return )

bool SubTexture_obj::get_ownsParent(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_136_get_ownsParent)
HXDLIN( 136)		return this->_ownsParent;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubTexture_obj,get_ownsParent,return )

bool SubTexture_obj::get_rotated(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_140_get_rotated)
HXDLIN( 140)		return this->_rotated;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubTexture_obj,get_rotated,return )

 ::openfl::geom::Rectangle SubTexture_obj::get_region(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_146_get_region)
HXDLIN( 146)		return this->_region;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SubTexture_obj,get_region,return )

 ::openfl::geom::Matrix SubTexture_obj::get_transformationMatrix(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_149_get_transformationMatrix)
HXDLIN( 149)		return this->_transformationMatrix;
            	}


 ::openfl::geom::Matrix SubTexture_obj::get_transformationMatrixToRoot(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_152_get_transformationMatrixToRoot)
HXDLIN( 152)		return this->_transformationMatrixToRoot;
            	}


 ::openfl::display3D::textures::TextureBase SubTexture_obj::get_base(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_155_get_base)
HXDLIN( 155)		return this->_parent->get_base();
            	}


 ::starling::textures::ConcreteTexture SubTexture_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_158_get_root)
HXDLIN( 158)		return this->_parent->get_root();
            	}


 ::Dynamic SubTexture_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_161_get_format)
HXDLIN( 161)		return this->_parent->get_format();
            	}


Float SubTexture_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_164_get_width)
HXDLIN( 164)		return this->_width;
            	}


Float SubTexture_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_167_get_height)
HXDLIN( 167)		return this->_height;
            	}


Float SubTexture_obj::get_nativeWidth(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_170_get_nativeWidth)
HXDLIN( 170)		return (this->_width * this->_scale);
            	}


Float SubTexture_obj::get_nativeHeight(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_173_get_nativeHeight)
HXDLIN( 173)		return (this->_height * this->_scale);
            	}


bool SubTexture_obj::get_mipMapping(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_176_get_mipMapping)
HXDLIN( 176)		return this->_parent->get_mipMapping();
            	}


bool SubTexture_obj::get_premultipliedAlpha(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_179_get_premultipliedAlpha)
HXDLIN( 179)		return this->_parent->get_premultipliedAlpha();
            	}


Float SubTexture_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_182_get_scale)
HXDLIN( 182)		return this->_scale;
            	}


 ::openfl::geom::Rectangle SubTexture_obj::get_frame(){
            	HX_STACKFRAME(&_hx_pos_2264be4ccebe9e60_185_get_frame)
HXDLIN( 185)		return this->_frame;
            	}



hx::ObjectPtr< SubTexture_obj > SubTexture_obj::__new( ::starling::textures::Texture parent, ::openfl::geom::Rectangle region,hx::Null< bool >  __o_ownsParent, ::openfl::geom::Rectangle frame,hx::Null< bool >  __o_rotated,hx::Null< Float >  __o_scaleModifier) {
	hx::ObjectPtr< SubTexture_obj > __this = new SubTexture_obj();
	__this->__construct(parent,region,__o_ownsParent,frame,__o_rotated,__o_scaleModifier);
	return __this;
}

hx::ObjectPtr< SubTexture_obj > SubTexture_obj::__alloc(hx::Ctx *_hx_ctx, ::starling::textures::Texture parent, ::openfl::geom::Rectangle region,hx::Null< bool >  __o_ownsParent, ::openfl::geom::Rectangle frame,hx::Null< bool >  __o_rotated,hx::Null< Float >  __o_scaleModifier) {
	SubTexture_obj *__this = (SubTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SubTexture_obj), true, "starling.textures.SubTexture"));
	*(void **)__this = SubTexture_obj::_hx_vtable;
	__this->__construct(parent,region,__o_ownsParent,frame,__o_rotated,__o_scaleModifier);
	return __this;
}

SubTexture_obj::SubTexture_obj()
{
}

void SubTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SubTexture);
	HX_MARK_MEMBER_NAME(_parent,"_parent");
	HX_MARK_MEMBER_NAME(_ownsParent,"_ownsParent");
	HX_MARK_MEMBER_NAME(_region,"_region");
	HX_MARK_MEMBER_NAME(_frame,"_frame");
	HX_MARK_MEMBER_NAME(_rotated,"_rotated");
	HX_MARK_MEMBER_NAME(_width,"_width");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_scale,"_scale");
	HX_MARK_MEMBER_NAME(_transformationMatrix,"_transformationMatrix");
	HX_MARK_MEMBER_NAME(_transformationMatrixToRoot,"_transformationMatrixToRoot");
	HX_MARK_END_CLASS();
}

void SubTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_parent,"_parent");
	HX_VISIT_MEMBER_NAME(_ownsParent,"_ownsParent");
	HX_VISIT_MEMBER_NAME(_region,"_region");
	HX_VISIT_MEMBER_NAME(_frame,"_frame");
	HX_VISIT_MEMBER_NAME(_rotated,"_rotated");
	HX_VISIT_MEMBER_NAME(_width,"_width");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_scale,"_scale");
	HX_VISIT_MEMBER_NAME(_transformationMatrix,"_transformationMatrix");
	HX_VISIT_MEMBER_NAME(_transformationMatrixToRoot,"_transformationMatrixToRoot");
}

hx::Val SubTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_frame") ) { return hx::Val( _frame ); }
		if (HX_FIELD_EQ(inName,"_width") ) { return hx::Val( _width ); }
		if (HX_FIELD_EQ(inName,"_scale") ) { return hx::Val( _scale ); }
		if (HX_FIELD_EQ(inName,"parent") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_parent() ); }
		if (HX_FIELD_EQ(inName,"region") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_region() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { return hx::Val( _parent ); }
		if (HX_FIELD_EQ(inName,"_region") ) { return hx::Val( _region ); }
		if (HX_FIELD_EQ(inName,"_height") ) { return hx::Val( _height ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotated") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rotated() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_rotated") ) { return hx::Val( _rotated ); }
		if (HX_FIELD_EQ(inName,"get_base") ) { return hx::Val( get_base_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_frame") ) { return hx::Val( get_frame_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_parent") ) { return hx::Val( get_parent_dyn() ); }
		if (HX_FIELD_EQ(inName,"ownsParent") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_ownsParent() ); }
		if (HX_FIELD_EQ(inName,"get_region") ) { return hx::Val( get_region_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_ownsParent") ) { return hx::Val( _ownsParent ); }
		if (HX_FIELD_EQ(inName,"get_rotated") ) { return hx::Val( get_rotated_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateMatrices") ) { return hx::Val( updateMatrices_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ownsParent") ) { return hx::Val( get_ownsParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mipMapping") ) { return hx::Val( get_mipMapping_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_nativeWidth") ) { return hx::Val( get_nativeWidth_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_nativeHeight") ) { return hx::Val( get_nativeHeight_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_transformationMatrix") ) { return hx::Val( _transformationMatrix ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_premultipliedAlpha") ) { return hx::Val( get_premultipliedAlpha_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"get_transformationMatrix") ) { return hx::Val( get_transformationMatrix_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_transformationMatrixToRoot") ) { return hx::Val( _transformationMatrixToRoot ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"get_transformationMatrixToRoot") ) { return hx::Val( get_transformationMatrixToRoot_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SubTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_frame") ) { _frame=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_width") ) { _width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_scale") ) { _scale=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { _parent=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_region") ) { _region=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_rotated") ) { _rotated=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_ownsParent") ) { _ownsParent=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_transformationMatrix") ) { _transformationMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_transformationMatrixToRoot") ) { _transformationMatrixToRoot=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SubTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_parent","\xc9","\x16","\xf5","\x5b"));
	outFields->push(HX_HCSTRING("_ownsParent","\x96","\x71","\xef","\xa4"));
	outFields->push(HX_HCSTRING("_region","\x93","\xd2","\x03","\x6f"));
	outFields->push(HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02"));
	outFields->push(HX_HCSTRING("_rotated","\x2a","\xa3","\xd5","\x2a"));
	outFields->push(HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"));
	outFields->push(HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"));
	outFields->push(HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"));
	outFields->push(HX_HCSTRING("_transformationMatrix","\xc9","\x6e","\x6d","\xb5"));
	outFields->push(HX_HCSTRING("_transformationMatrixToRoot","\xe6","\xf8","\x8a","\x9a"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("ownsParent","\x77","\xa4","\x65","\xd2"));
	outFields->push(HX_HCSTRING("rotated","\xa9","\x49","\x1d","\xf1"));
	outFields->push(HX_HCSTRING("region","\xf4","\xc0","\x8c","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SubTexture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(SubTexture_obj,_parent),HX_HCSTRING("_parent","\xc9","\x16","\xf5","\x5b")},
	{hx::fsBool,(int)offsetof(SubTexture_obj,_ownsParent),HX_HCSTRING("_ownsParent","\x96","\x71","\xef","\xa4")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(SubTexture_obj,_region),HX_HCSTRING("_region","\x93","\xd2","\x03","\x6f")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(SubTexture_obj,_frame),HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02")},
	{hx::fsBool,(int)offsetof(SubTexture_obj,_rotated),HX_HCSTRING("_rotated","\x2a","\xa3","\xd5","\x2a")},
	{hx::fsFloat,(int)offsetof(SubTexture_obj,_width),HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6")},
	{hx::fsFloat,(int)offsetof(SubTexture_obj,_height),HX_HCSTRING("_height","\x86","\x19","\xc3","\x70")},
	{hx::fsFloat,(int)offsetof(SubTexture_obj,_scale),HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(SubTexture_obj,_transformationMatrix),HX_HCSTRING("_transformationMatrix","\xc9","\x6e","\x6d","\xb5")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(SubTexture_obj,_transformationMatrixToRoot),HX_HCSTRING("_transformationMatrixToRoot","\xe6","\xf8","\x8a","\x9a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SubTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String SubTexture_obj_sMemberFields[] = {
	HX_HCSTRING("_parent","\xc9","\x16","\xf5","\x5b"),
	HX_HCSTRING("_ownsParent","\x96","\x71","\xef","\xa4"),
	HX_HCSTRING("_region","\x93","\xd2","\x03","\x6f"),
	HX_HCSTRING("_frame","\x6e","\xbf","\x6a","\x02"),
	HX_HCSTRING("_rotated","\x2a","\xa3","\xd5","\x2a"),
	HX_HCSTRING("_width","\x47","\xfd","\x49","\xc6"),
	HX_HCSTRING("_height","\x86","\x19","\xc3","\x70"),
	HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"),
	HX_HCSTRING("_transformationMatrix","\xc9","\x6e","\x6d","\xb5"),
	HX_HCSTRING("_transformationMatrixToRoot","\xe6","\xf8","\x8a","\x9a"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("updateMatrices","\xc3","\x64","\x0d","\x9c"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("get_parent","\xf3","\x74","\x05","\xde"),
	HX_HCSTRING("get_ownsParent","\xc0","\x2c","\x5b","\x48"),
	HX_HCSTRING("get_rotated","\xc0","\xa9","\x17","\x77"),
	HX_HCSTRING("get_region","\xbd","\x30","\x14","\xf1"),
	HX_HCSTRING("get_transformationMatrix","\x73","\x82","\x6e","\x89"),
	HX_HCSTRING("get_transformationMatrixToRoot","\x10","\x28","\x5d","\x9a"),
	HX_HCSTRING("get_base","\x9a","\xa3","\xcb","\xc0"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_nativeWidth","\x86","\xf0","\x3f","\xf2"),
	HX_HCSTRING("get_nativeHeight","\x67","\xfd","\x01","\xbc"),
	HX_HCSTRING("get_mipMapping","\x23","\x34","\x8c","\xf2"),
	HX_HCSTRING("get_premultipliedAlpha","\x71","\x07","\xf1","\x73"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("get_frame","\x84","\xd4","\x2c","\x4a"),
	::String(null()) };

static void SubTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SubTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SubTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SubTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class SubTexture_obj::__mClass;

void SubTexture_obj::__register()
{
	hx::Object *dummy = new SubTexture_obj;
	SubTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.textures.SubTexture","\x2b","\x1a","\x57","\x50");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SubTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SubTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SubTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SubTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SubTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SubTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace textures
