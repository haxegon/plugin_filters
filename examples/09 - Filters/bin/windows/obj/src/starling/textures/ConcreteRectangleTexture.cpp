// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteRectangleTexture
#include <starling/textures/ConcreteRectangleTexture.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_53752f3d3b9d3278_39_new,"starling.textures.ConcreteRectangleTexture","new",0x10111d33,"starling.textures.ConcreteRectangleTexture.new","starling/textures/ConcreteRectangleTexture.hx",39,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_45_uploadBitmapData,"starling.textures.ConcreteRectangleTexture","uploadBitmapData",0x09495a67,"starling.textures.ConcreteRectangleTexture.uploadBitmapData","starling/textures/ConcreteRectangleTexture.hx",45,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_56_createBase,"starling.textures.ConcreteRectangleTexture","createBase",0x83f6ecba,"starling.textures.ConcreteRectangleTexture.createBase","starling/textures/ConcreteRectangleTexture.hx",56,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_63_get_rectBase,"starling.textures.ConcreteRectangleTexture","get_rectBase",0x4adc782b,"starling.textures.ConcreteRectangleTexture.get_rectBase","starling/textures/ConcreteRectangleTexture.hx",63,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_70_upload,"starling.textures.ConcreteRectangleTexture","upload",0xf86c030e,"starling.textures.ConcreteRectangleTexture.upload","starling/textures/ConcreteRectangleTexture.hx",70,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_83_uploadAsync,"starling.textures.ConcreteRectangleTexture","uploadAsync",0x6493994e,"starling.textures.ConcreteRectangleTexture.uploadAsync","starling/textures/ConcreteRectangleTexture.hx",83,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_100_uploadAsync,"starling.textures.ConcreteRectangleTexture","uploadAsync",0x6493994e,"starling.textures.ConcreteRectangleTexture.uploadAsync","starling/textures/ConcreteRectangleTexture.hx",100,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_107_onTextureReady,"starling.textures.ConcreteRectangleTexture","onTextureReady",0x4dff3b54,"starling.textures.ConcreteRectangleTexture.onTextureReady","starling/textures/ConcreteRectangleTexture.hx",107,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_118_get_asyncUploadEnabled,"starling.textures.ConcreteRectangleTexture","get_asyncUploadEnabled",0xf390ebfa,"starling.textures.ConcreteRectangleTexture.get_asyncUploadEnabled","starling/textures/ConcreteRectangleTexture.hx",118,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_119_set_asyncUploadEnabled,"starling.textures.ConcreteRectangleTexture","set_asyncUploadEnabled",0x273c686e,"starling.textures.ConcreteRectangleTexture.set_asyncUploadEnabled","starling/textures/ConcreteRectangleTexture.hx",119,0x7b10ddbd)
HX_LOCAL_STACK_FRAME(_hx_pos_53752f3d3b9d3278_31_boot,"starling.textures.ConcreteRectangleTexture","boot",0xf7016fff,"starling.textures.ConcreteRectangleTexture.boot","starling/textures/ConcreteRectangleTexture.hx",31,0x7b10ddbd)
namespace starling{
namespace textures{

void ConcreteRectangleTexture_obj::__construct( ::openfl::display3D::textures::RectangleTexture base,::String format,int width,int height,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale){
bool optimizedForRenderTexture = __o_optimizedForRenderTexture.Default(false);
Float scale = __o_scale.Default(1);
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_39_new)
HXDLIN(  39)		super::__construct(base,format,width,height,false,premultipliedAlpha,optimizedForRenderTexture,scale);
            	}

Dynamic ConcreteRectangleTexture_obj::__CreateEmpty() { return new ConcreteRectangleTexture_obj; }

void *ConcreteRectangleTexture_obj::_hx_vtable = 0;

Dynamic ConcreteRectangleTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ConcreteRectangleTexture_obj > _hx_result = new ConcreteRectangleTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool ConcreteRectangleTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25e78071) {
		if (inClassId<=(int)0x0d644757) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0d644757;
		} else {
			return inClassId==(int)0x25e78071;
		}
	} else {
		return inClassId==(int)0x2b45ed76;
	}
}

void ConcreteRectangleTexture_obj::uploadBitmapData( ::openfl::display::BitmapData data, ::Dynamic async){
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_45_uploadBitmapData)
HXLINE(  46)		if (hx::IsNotNull( async )) {
HXLINE(  47)			this->_textureReadyCallback = async;
            		}
HXLINE(  49)		this->upload(data,hx::IsNotNull( async ));
HXLINE(  50)		this->setDataUploaded();
            	}


 ::openfl::display3D::textures::TextureBase ConcreteRectangleTexture_obj::createBase(){
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_56_createBase)
HXDLIN(  56)		 ::openfl::display3D::Context3D _hx_tmp = ::starling::core::Starling_obj::get_current()->get_context();
HXLINE(  57)		int _hx_tmp1 = ::Std_obj::_hx_int(this->get_nativeWidth());
HXDLIN(  57)		int _hx_tmp2 = ::Std_obj::_hx_int(this->get_nativeHeight());
HXDLIN(  57)		 ::Dynamic _hx_tmp3 = this->get_format();
HXLINE(  56)		return _hx_tmp->createRectangleTexture(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_optimizedForRenderTexture());
            	}


 ::openfl::display3D::textures::RectangleTexture ConcreteRectangleTexture_obj::get_rectBase(){
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_63_get_rectBase)
HXDLIN(  63)		return ( ( ::openfl::display3D::textures::RectangleTexture)(this->get_base()) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteRectangleTexture_obj,get_rectBase,return )

void ConcreteRectangleTexture_obj::upload( ::openfl::display::BitmapData source,bool isAsync){
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_70_upload)
HXDLIN(  70)		if (isAsync) {
HXLINE(  72)			this->uploadAsync(source);
HXLINE(  73)			this->get_base()->addEventListener(HX_("textureReady",88,4d,5a,df),this->onTextureReady_dyn(),null(),null(),null());
HXLINE(  74)			this->get_base()->addEventListener(HX_("error",c8,cb,29,73),this->onTextureReady_dyn(),null(),null(),null());
            		}
            		else {
HXLINE(  78)			this->get_rectBase()->uploadFromBitmapData(source);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ConcreteRectangleTexture_obj,upload,(void))

void ConcreteRectangleTexture_obj::uploadAsync( ::openfl::display::BitmapData source){
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_83_uploadAsync)
HXLINE(  82)		 ::starling::textures::ConcreteRectangleTexture _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  84)		if (::starling::textures::ConcreteRectangleTexture_obj::sAsyncUploadEnabled) {
HXLINE(  86)			 ::Dynamic method = ::Reflect_obj::field(this->get_base(),HX_("uploadFromBitmapDataAsync",f8,f6,6a,07));
HXLINE(  87)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(  87)				::Reflect_obj::callMethod(method,method,::cpp::VirtualArray_obj::__new(1)->init(0,source));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error error = _hx_e;
HXLINE(  90)					bool _hx_tmp;
HXDLIN(  90)					if ((error->errorID != (int)3708)) {
HXLINE(  90)						_hx_tmp = (error->errorID == (int)1069);
            					}
            					else {
HXLINE(  90)						_hx_tmp = true;
            					}
HXDLIN(  90)					if (_hx_tmp) {
HXLINE(  91)						::starling::textures::ConcreteRectangleTexture_obj::sAsyncUploadEnabled = false;
            					}
            					else {
HXLINE(  93)						HX_STACK_DO_THROW(error);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(  97)		if (!(::starling::textures::ConcreteRectangleTexture_obj::sAsyncUploadEnabled)) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::starling::textures::ConcreteRectangleTexture,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_53752f3d3b9d3278_100_uploadAsync)
HXLINE( 100)				 ::openfl::display3D::textures::TextureBase _hx_tmp1 = _gthis->get_base();
HXDLIN( 100)				_hx_tmp1->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("textureReady",88,4d,5a,df),null(),null()));
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  99)			::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_0(_gthis)),(int)1);
HXLINE( 102)			this->get_rectBase()->uploadFromBitmapData(source);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConcreteRectangleTexture_obj,uploadAsync,(void))

void ConcreteRectangleTexture_obj::onTextureReady( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_107_onTextureReady)
HXLINE( 108)		this->get_base()->removeEventListener(HX_("textureReady",88,4d,5a,df),this->onTextureReady_dyn(),null());
HXLINE( 109)		this->get_base()->removeEventListener(HX_("error",c8,cb,29,73),this->onTextureReady_dyn(),null());
HXLINE( 111)		if (hx::IsNotNull( this->_textureReadyCallback )) {
HXLINE( 112)			this->_textureReadyCallback(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 113)		this->_textureReadyCallback = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConcreteRectangleTexture_obj,onTextureReady,(void))

bool ConcreteRectangleTexture_obj::sAsyncUploadEnabled;

bool ConcreteRectangleTexture_obj::get_asyncUploadEnabled(){
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_118_get_asyncUploadEnabled)
HXDLIN( 118)		return ::starling::textures::ConcreteRectangleTexture_obj::sAsyncUploadEnabled;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ConcreteRectangleTexture_obj,get_asyncUploadEnabled,return )

bool ConcreteRectangleTexture_obj::set_asyncUploadEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_119_set_asyncUploadEnabled)
HXDLIN( 119)		return (::starling::textures::ConcreteRectangleTexture_obj::sAsyncUploadEnabled = value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ConcreteRectangleTexture_obj,set_asyncUploadEnabled,return )


hx::ObjectPtr< ConcreteRectangleTexture_obj > ConcreteRectangleTexture_obj::__new( ::openfl::display3D::textures::RectangleTexture base,::String format,int width,int height,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale) {
	hx::ObjectPtr< ConcreteRectangleTexture_obj > __this = new ConcreteRectangleTexture_obj();
	__this->__construct(base,format,width,height,premultipliedAlpha,__o_optimizedForRenderTexture,__o_scale);
	return __this;
}

hx::ObjectPtr< ConcreteRectangleTexture_obj > ConcreteRectangleTexture_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::textures::RectangleTexture base,::String format,int width,int height,bool premultipliedAlpha,hx::Null< bool >  __o_optimizedForRenderTexture,hx::Null< Float >  __o_scale) {
	ConcreteRectangleTexture_obj *__this = (ConcreteRectangleTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ConcreteRectangleTexture_obj), true, "starling.textures.ConcreteRectangleTexture"));
	*(void **)__this = ConcreteRectangleTexture_obj::_hx_vtable;
	__this->__construct(base,format,width,height,premultipliedAlpha,__o_optimizedForRenderTexture,__o_scale);
	return __this;
}

ConcreteRectangleTexture_obj::ConcreteRectangleTexture_obj()
{
}

void ConcreteRectangleTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ConcreteRectangleTexture);
	HX_MARK_MEMBER_NAME(_textureReadyCallback,"_textureReadyCallback");
	 ::starling::textures::ConcreteTexture_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ConcreteRectangleTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_textureReadyCallback,"_textureReadyCallback");
	 ::starling::textures::ConcreteTexture_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ConcreteRectangleTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"upload") ) { return hx::Val( upload_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rectBase") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rectBase() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createBase") ) { return hx::Val( createBase_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"uploadAsync") ) { return hx::Val( uploadAsync_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_rectBase") ) { return hx::Val( get_rectBase_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onTextureReady") ) { return hx::Val( onTextureReady_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uploadBitmapData") ) { return hx::Val( uploadBitmapData_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_textureReadyCallback") ) { return hx::Val( _textureReadyCallback ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ConcreteRectangleTexture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"asyncUploadEnabled") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_asyncUploadEnabled() ); return true; } }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sAsyncUploadEnabled") ) { outValue = ( sAsyncUploadEnabled ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_asyncUploadEnabled") ) { outValue = get_asyncUploadEnabled_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_asyncUploadEnabled") ) { outValue = set_asyncUploadEnabled_dyn(); return true; }
	}
	return false;
}

hx::Val ConcreteRectangleTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 21:
		if (HX_FIELD_EQ(inName,"_textureReadyCallback") ) { _textureReadyCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ConcreteRectangleTexture_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"asyncUploadEnabled") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_asyncUploadEnabled(ioValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sAsyncUploadEnabled") ) { sAsyncUploadEnabled=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void ConcreteRectangleTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("rectBase","\x55","\xc3","\x28","\x6c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ConcreteRectangleTexture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ConcreteRectangleTexture_obj,_textureReadyCallback),HX_HCSTRING("_textureReadyCallback","\x4c","\x75","\x82","\x3d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ConcreteRectangleTexture_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &ConcreteRectangleTexture_obj::sAsyncUploadEnabled,HX_HCSTRING("sAsyncUploadEnabled","\xf7","\xcc","\x28","\x72")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ConcreteRectangleTexture_obj_sMemberFields[] = {
	HX_HCSTRING("_textureReadyCallback","\x4c","\x75","\x82","\x3d"),
	HX_HCSTRING("uploadBitmapData","\x1a","\x6f","\x8a","\x01"),
	HX_HCSTRING("createBase","\x2d","\xa9","\x9e","\x53"),
	HX_HCSTRING("get_rectBase","\x5e","\x77","\x42","\x21"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	HX_HCSTRING("uploadAsync","\x7b","\xc1","\xb0","\x47"),
	HX_HCSTRING("onTextureReady","\x47","\xad","\x49","\x09"),
	::String(null()) };

static void ConcreteRectangleTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ConcreteRectangleTexture_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ConcreteRectangleTexture_obj::sAsyncUploadEnabled,"sAsyncUploadEnabled");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ConcreteRectangleTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ConcreteRectangleTexture_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ConcreteRectangleTexture_obj::sAsyncUploadEnabled,"sAsyncUploadEnabled");
};

#endif

hx::Class ConcreteRectangleTexture_obj::__mClass;

static ::String ConcreteRectangleTexture_obj_sStaticFields[] = {
	HX_HCSTRING("sAsyncUploadEnabled","\xf7","\xcc","\x28","\x72"),
	HX_HCSTRING("get_asyncUploadEnabled","\xed","\x08","\x5b","\xd3"),
	HX_HCSTRING("set_asyncUploadEnabled","\x61","\x85","\x06","\x07"),
	::String(null())
};

void ConcreteRectangleTexture_obj::__register()
{
	hx::Object *dummy = new ConcreteRectangleTexture_obj;
	ConcreteRectangleTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.textures.ConcreteRectangleTexture","\xc1","\x07","\xf0","\xca");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ConcreteRectangleTexture_obj::__GetStatic;
	__mClass->mSetStaticField = &ConcreteRectangleTexture_obj::__SetStatic;
	__mClass->mMarkFunc = ConcreteRectangleTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ConcreteRectangleTexture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ConcreteRectangleTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ConcreteRectangleTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ConcreteRectangleTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConcreteRectangleTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConcreteRectangleTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ConcreteRectangleTexture_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_53752f3d3b9d3278_31_boot)
HXDLIN(  31)		sAsyncUploadEnabled = false;
            	}
}

} // end namespace starling
} // end namespace textures
