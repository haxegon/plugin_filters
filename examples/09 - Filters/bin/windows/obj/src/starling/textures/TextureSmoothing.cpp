// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_textures_TextureSmoothing
#include <starling/textures/TextureSmoothing.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2002d43eb5c43ebb_28_isValid,"starling.textures.TextureSmoothing","isValid",0xd3bc3b4d,"starling.textures.TextureSmoothing.isValid","starling/textures/TextureSmoothing.hx",28,0x4e573275)
HX_LOCAL_STACK_FRAME(_hx_pos_2002d43eb5c43ebb_17_boot,"starling.textures.TextureSmoothing","boot",0x0bd982b7,"starling.textures.TextureSmoothing.boot","starling/textures/TextureSmoothing.hx",17,0x4e573275)
HX_LOCAL_STACK_FRAME(_hx_pos_2002d43eb5c43ebb_20_boot,"starling.textures.TextureSmoothing","boot",0x0bd982b7,"starling.textures.TextureSmoothing.boot","starling/textures/TextureSmoothing.hx",20,0x4e573275)
HX_LOCAL_STACK_FRAME(_hx_pos_2002d43eb5c43ebb_23_boot,"starling.textures.TextureSmoothing","boot",0x0bd982b7,"starling.textures.TextureSmoothing.boot","starling/textures/TextureSmoothing.hx",23,0x4e573275)
namespace starling{
namespace textures{

void TextureSmoothing_obj::__construct() { }

Dynamic TextureSmoothing_obj::__CreateEmpty() { return new TextureSmoothing_obj; }

void *TextureSmoothing_obj::_hx_vtable = 0;

Dynamic TextureSmoothing_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextureSmoothing_obj > _hx_result = new TextureSmoothing_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextureSmoothing_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x21f838b9;
}

::String TextureSmoothing_obj::NONE;

::String TextureSmoothing_obj::BILINEAR;

::String TextureSmoothing_obj::TRILINEAR;

bool TextureSmoothing_obj::isValid(::String smoothing){
            	HX_STACKFRAME(&_hx_pos_2002d43eb5c43ebb_28_isValid)
HXDLIN(  28)		bool _hx_tmp;
HXDLIN(  28)		if ((smoothing != HX_("none",b8,12,0a,49))) {
HXDLIN(  28)			_hx_tmp = (smoothing == HX_("bilinear",ec,b6,3d,e0));
            		}
            		else {
HXDLIN(  28)			_hx_tmp = true;
            		}
HXDLIN(  28)		if (!(_hx_tmp)) {
HXDLIN(  28)			return (smoothing == HX_("trilinear",50,6d,c8,08));
            		}
            		else {
HXDLIN(  28)			return true;
            		}
HXDLIN(  28)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextureSmoothing_obj,isValid,return )


TextureSmoothing_obj::TextureSmoothing_obj()
{
}

bool TextureSmoothing_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"isValid") ) { outValue = isValid_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TextureSmoothing_obj_sMemberStorageInfo = 0;
static hx::StaticInfo TextureSmoothing_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &TextureSmoothing_obj::NONE,HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33")},
	{hx::fsString,(void *) &TextureSmoothing_obj::BILINEAR,HX_HCSTRING("BILINEAR","\xec","\x46","\xc3","\x39")},
	{hx::fsString,(void *) &TextureSmoothing_obj::TRILINEAR,HX_HCSTRING("TRILINEAR","\x30","\xdd","\x20","\x04")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void TextureSmoothing_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextureSmoothing_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextureSmoothing_obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(TextureSmoothing_obj::BILINEAR,"BILINEAR");
	HX_MARK_MEMBER_NAME(TextureSmoothing_obj::TRILINEAR,"TRILINEAR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextureSmoothing_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextureSmoothing_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextureSmoothing_obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(TextureSmoothing_obj::BILINEAR,"BILINEAR");
	HX_VISIT_MEMBER_NAME(TextureSmoothing_obj::TRILINEAR,"TRILINEAR");
};

#endif

hx::Class TextureSmoothing_obj::__mClass;

static ::String TextureSmoothing_obj_sStaticFields[] = {
	HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),
	HX_HCSTRING("BILINEAR","\xec","\x46","\xc3","\x39"),
	HX_HCSTRING("TRILINEAR","\x30","\xdd","\x20","\x04"),
	HX_HCSTRING("isValid","\xb2","\x18","\x3e","\xce"),
	::String(null())
};

void TextureSmoothing_obj::__register()
{
	hx::Object *dummy = new TextureSmoothing_obj;
	TextureSmoothing_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.textures.TextureSmoothing","\x09","\xf0","\x80","\x81");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextureSmoothing_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextureSmoothing_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextureSmoothing_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TextureSmoothing_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextureSmoothing_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureSmoothing_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureSmoothing_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextureSmoothing_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2002d43eb5c43ebb_17_boot)
HXDLIN(  17)		NONE = HX_("none",b8,12,0a,49);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2002d43eb5c43ebb_20_boot)
HXDLIN(  20)		BILINEAR = HX_("bilinear",ec,b6,3d,e0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2002d43eb5c43ebb_23_boot)
HXDLIN(  23)		TRILINEAR = HX_("trilinear",50,6d,c8,08);
            	}
}

} // end namespace starling
} // end namespace textures
