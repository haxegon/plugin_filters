// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_VideoTexture
#include <openfl/display3D/textures/VideoTexture.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_NetStream
#include <openfl/net/NetStream.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteVideoTexture
#include <starling/textures/ConcreteVideoTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4212891468254c9f_34_new,"starling.textures.ConcreteVideoTexture","new",0x969799e7,"starling.textures.ConcreteVideoTexture.new","starling/textures/ConcreteVideoTexture.hx",34,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_40_dispose,"starling.textures.ConcreteVideoTexture","dispose",0x74c119a6,"starling.textures.ConcreteVideoTexture.dispose","starling/textures/ConcreteVideoTexture.hx",40,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_61_createBase,"starling.textures.ConcreteVideoTexture","createBase",0x20f02e86,"starling.textures.ConcreteVideoTexture.createBase","starling/textures/ConcreteVideoTexture.hx",61,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_67_attachVideo,"starling.textures.ConcreteVideoTexture","attachVideo",0x859ce6fd,"starling.textures.ConcreteVideoTexture.attachVideo","starling/textures/ConcreteVideoTexture.hx",67,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_77_onTextureReady,"starling.textures.ConcreteVideoTexture","onTextureReady",0xdceb5320,"starling.textures.ConcreteVideoTexture.onTextureReady","starling/textures/ConcreteVideoTexture.hx",77,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_87_get_nativeWidth,"starling.textures.ConcreteVideoTexture","get_nativeWidth",0x4c0f688d,"starling.textures.ConcreteVideoTexture.get_nativeWidth","starling/textures/ConcreteVideoTexture.hx",87,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_93_get_nativeHeight,"starling.textures.ConcreteVideoTexture","get_nativeHeight",0xf7bb8b80,"starling.textures.ConcreteVideoTexture.get_nativeHeight","starling/textures/ConcreteVideoTexture.hx",93,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_99_get_width,"starling.textures.ConcreteVideoTexture","get_width",0x809e3b24,"starling.textures.ConcreteVideoTexture.get_width","starling/textures/ConcreteVideoTexture.hx",99,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_105_get_height,"starling.textures.ConcreteVideoTexture","get_height",0xc024fd09,"starling.textures.ConcreteVideoTexture.get_height","starling/textures/ConcreteVideoTexture.hx",105,0xfc28e389)
HX_LOCAL_STACK_FRAME(_hx_pos_4212891468254c9f_111_get_videoBase,"starling.textures.ConcreteVideoTexture","get_videoBase",0xe7b0ee4a,"starling.textures.ConcreteVideoTexture.get_videoBase","starling/textures/ConcreteVideoTexture.hx",111,0xfc28e389)
namespace starling{
namespace textures{

void ConcreteVideoTexture_obj::__construct( ::openfl::display3D::textures::VideoTexture base,hx::Null< Float >  __o_scale){
Float scale = __o_scale.Default(1);
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_34_new)
HXDLIN(  34)		super::__construct(base,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString((int)1),base->videoWidth,base->videoHeight,false,false,false,scale);
            	}

Dynamic ConcreteVideoTexture_obj::__CreateEmpty() { return new ConcreteVideoTexture_obj; }

void *ConcreteVideoTexture_obj::_hx_vtable = 0;

Dynamic ConcreteVideoTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ConcreteVideoTexture_obj > _hx_result = new ConcreteVideoTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ConcreteVideoTexture_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x228f8f89) {
		if (inClassId<=(int)0x0d644757) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0d644757;
		} else {
			return inClassId==(int)0x228f8f89;
		}
	} else {
		return inClassId==(int)0x2b45ed76;
	}
}

void ConcreteVideoTexture_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_40_dispose)
HXLINE(  41)		this->get_base()->removeEventListener(HX_("textureReady",88,4d,5a,df),this->onTextureReady_dyn(),null());
HXLINE(  46)		if (!(this->_disposed)) {
HXLINE(  51)			this->get_videoBase()->attachNetStream(null());
HXLINE(  52)			this->_disposed = true;
            		}
HXLINE(  55)		this->super::dispose();
            	}


 ::openfl::display3D::textures::TextureBase ConcreteVideoTexture_obj::createBase(){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_61_createBase)
HXDLIN(  61)		return ::starling::core::Starling_obj::get_current()->get_context()->createVideoTexture();
            	}


void ConcreteVideoTexture_obj::attachVideo(::String type, ::Dynamic attachment, ::Dynamic onComplete){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_67_attachVideo)
HXLINE(  68)		this->_textureReadyCallback = onComplete;
HXLINE(  69)		 ::openfl::display3D::textures::TextureBase method = this->get_base();
HXDLIN(  69)		 ::Dynamic method1 = ::Reflect_obj::field(method,(HX_("attach",c5,fb,0f,e0) + type));
HXLINE(  70)		::Reflect_obj::callMethod(method1,method1,::cpp::VirtualArray_obj::__new(1)->init(0,attachment));
HXLINE(  71)		this->get_base()->addEventListener(HX_("textureReady",88,4d,5a,df),this->onTextureReady_dyn(),null(),null(),null());
HXLINE(  73)		this->setDataUploaded();
            	}


void ConcreteVideoTexture_obj::onTextureReady( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_77_onTextureReady)
HXLINE(  78)		this->get_base()->removeEventListener(HX_("textureReady",88,4d,5a,df),this->onTextureReady_dyn(),null());
HXLINE(  79)		if (hx::IsNotNull( this->_textureReadyCallback )) {
HXLINE(  80)			this->_textureReadyCallback(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  81)		this->_textureReadyCallback = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ConcreteVideoTexture_obj,onTextureReady,(void))

Float ConcreteVideoTexture_obj::get_nativeWidth(){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_87_get_nativeWidth)
HXDLIN(  87)		return this->get_videoBase()->videoWidth;
            	}


Float ConcreteVideoTexture_obj::get_nativeHeight(){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_93_get_nativeHeight)
HXDLIN(  93)		return this->get_videoBase()->videoHeight;
            	}


Float ConcreteVideoTexture_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_99_get_width)
HXDLIN(  99)		Float _hx_tmp = this->get_nativeWidth();
HXDLIN(  99)		return ((Float)_hx_tmp / (Float)this->get_scale());
            	}


Float ConcreteVideoTexture_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_105_get_height)
HXDLIN( 105)		Float _hx_tmp = this->get_nativeHeight();
HXDLIN( 105)		return ((Float)_hx_tmp / (Float)this->get_scale());
            	}


 ::openfl::display3D::textures::VideoTexture ConcreteVideoTexture_obj::get_videoBase(){
            	HX_STACKFRAME(&_hx_pos_4212891468254c9f_111_get_videoBase)
HXDLIN( 111)		return ( ( ::openfl::display3D::textures::VideoTexture)(this->get_base()) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ConcreteVideoTexture_obj,get_videoBase,return )


hx::ObjectPtr< ConcreteVideoTexture_obj > ConcreteVideoTexture_obj::__new( ::openfl::display3D::textures::VideoTexture base,hx::Null< Float >  __o_scale) {
	hx::ObjectPtr< ConcreteVideoTexture_obj > __this = new ConcreteVideoTexture_obj();
	__this->__construct(base,__o_scale);
	return __this;
}

hx::ObjectPtr< ConcreteVideoTexture_obj > ConcreteVideoTexture_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::textures::VideoTexture base,hx::Null< Float >  __o_scale) {
	ConcreteVideoTexture_obj *__this = (ConcreteVideoTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ConcreteVideoTexture_obj), true, "starling.textures.ConcreteVideoTexture"));
	*(void **)__this = ConcreteVideoTexture_obj::_hx_vtable;
	__this->__construct(base,__o_scale);
	return __this;
}

ConcreteVideoTexture_obj::ConcreteVideoTexture_obj()
{
}

void ConcreteVideoTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ConcreteVideoTexture);
	HX_MARK_MEMBER_NAME(_textureReadyCallback,"_textureReadyCallback");
	HX_MARK_MEMBER_NAME(_disposed,"_disposed");
	 ::starling::textures::ConcreteTexture_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ConcreteVideoTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_textureReadyCallback,"_textureReadyCallback");
	HX_VISIT_MEMBER_NAME(_disposed,"_disposed");
	 ::starling::textures::ConcreteTexture_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ConcreteVideoTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_disposed") ) { return hx::Val( _disposed ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"videoBase") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_videoBase() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createBase") ) { return hx::Val( createBase_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"attachVideo") ) { return hx::Val( attachVideo_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_videoBase") ) { return hx::Val( get_videoBase_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onTextureReady") ) { return hx::Val( onTextureReady_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_nativeWidth") ) { return hx::Val( get_nativeWidth_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_nativeHeight") ) { return hx::Val( get_nativeHeight_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_textureReadyCallback") ) { return hx::Val( _textureReadyCallback ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ConcreteVideoTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_disposed") ) { _disposed=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_textureReadyCallback") ) { _textureReadyCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ConcreteVideoTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_disposed","\x44","\x02","\x3a","\x6f"));
	outFields->push(HX_HCSTRING("videoBase","\x2c","\x82","\xc9","\x66"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ConcreteVideoTexture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ConcreteVideoTexture_obj,_textureReadyCallback),HX_HCSTRING("_textureReadyCallback","\x4c","\x75","\x82","\x3d")},
	{hx::fsBool,(int)offsetof(ConcreteVideoTexture_obj,_disposed),HX_HCSTRING("_disposed","\x44","\x02","\x3a","\x6f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ConcreteVideoTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String ConcreteVideoTexture_obj_sMemberFields[] = {
	HX_HCSTRING("_textureReadyCallback","\x4c","\x75","\x82","\x3d"),
	HX_HCSTRING("_disposed","\x44","\x02","\x3a","\x6f"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("createBase","\x2d","\xa9","\x9e","\x53"),
	HX_HCSTRING("attachVideo","\x76","\xbe","\x99","\xab"),
	HX_HCSTRING("onTextureReady","\x47","\xad","\x49","\x09"),
	HX_HCSTRING("get_nativeWidth","\x86","\xf0","\x3f","\xf2"),
	HX_HCSTRING("get_nativeHeight","\x67","\xfd","\x01","\xbc"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_videoBase","\x03","\x56","\x2d","\x28"),
	::String(null()) };

static void ConcreteVideoTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ConcreteVideoTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ConcreteVideoTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ConcreteVideoTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class ConcreteVideoTexture_obj::__mClass;

void ConcreteVideoTexture_obj::__register()
{
	hx::Object *dummy = new ConcreteVideoTexture_obj;
	ConcreteVideoTexture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.textures.ConcreteVideoTexture","\x75","\x1a","\x65","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ConcreteVideoTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ConcreteVideoTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ConcreteVideoTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ConcreteVideoTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConcreteVideoTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConcreteVideoTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace textures
