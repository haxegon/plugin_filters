// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DProfile_Context3DProfile_Impl_
#include <openfl/display3D/_Context3DProfile/Context3DProfile_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_VideoTexture
#include <openfl/display3D/textures/VideoTexture.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_net_NetStream
#include <openfl/net/NetStream.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_errors_MissingContextError
#include <starling/errors/MissingContextError.h>
#endif
#ifndef INCLUDED_starling_errors_NotSupportedError
#include <starling/errors/NotSupportedError.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexData
#include <starling/rendering/VertexData.h>
#endif
#ifndef INCLUDED_starling_textures_AtfData
#include <starling/textures/AtfData.h>
#endif
#ifndef INCLUDED_starling_textures_ConcretePotTexture
#include <starling/textures/ConcretePotTexture.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteRectangleTexture
#include <starling/textures/ConcreteRectangleTexture.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteVideoTexture
#include <starling/textures/ConcreteVideoTexture.h>
#endif
#ifndef INCLUDED_starling_textures_SubTexture
#include <starling/textures/SubTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_textures_TextureOptions
#include <starling/textures/TextureOptions.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif
#ifndef INCLUDED_starling_utils_SystemUtil
#include <starling/utils/SystemUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1d200748468d00c9_138_new,"starling.textures.Texture","new",0x2063625d,"starling.textures.Texture.new","starling/textures/Texture.hx",138,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_147_dispose,"starling.textures.Texture","dispose",0x5559551c,"starling.textures.Texture.dispose","starling/textures/Texture.hx",147,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_607_setupVertexPositions,"starling.textures.Texture","setupVertexPositions",0x1974fb0c,"starling.textures.Texture.setupVertexPositions","starling/textures/Texture.hx",607,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_646_setupTextureCoordinates,"starling.textures.Texture","setupTextureCoordinates",0xc12a1e3a,"starling.textures.Texture.setupTextureCoordinates","starling/textures/Texture.hx",646,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_656_localToGlobal,"starling.textures.Texture","localToGlobal",0x074a1206,"starling.textures.Texture.localToGlobal","starling/textures/Texture.hx",656,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_666_globalToLocal,"starling.textures.Texture","globalToLocal",0x2b0d1f0a,"starling.textures.Texture.globalToLocal","starling/textures/Texture.hx",666,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_684_setTexCoords,"starling.textures.Texture","setTexCoords",0xe351e3c6,"starling.textures.Texture.setTexCoords","starling/textures/Texture.hx",684,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_694_getTexCoords,"starling.textures.Texture","getTexCoords",0xce58c052,"starling.textures.Texture.getTexCoords","starling/textures/Texture.hx",694,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_705_get_frame,"starling.textures.Texture","get_frame",0x20758241,"starling.textures.Texture.get_frame","starling/textures/Texture.hx",705,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_710_get_frameWidth,"starling.textures.Texture","get_frameWidth",0xd715d805,"starling.textures.Texture.get_frameWidth","starling/textures/Texture.hx",710,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_715_get_frameHeight,"starling.textures.Texture","get_frameHeight",0x1256a508,"starling.textures.Texture.get_frameHeight","starling/textures/Texture.hx",715,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_719_get_width,"starling.textures.Texture","get_width",0xe454c01a,"starling.textures.Texture.get_width","starling/textures/Texture.hx",719,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_723_get_height,"starling.textures.Texture","get_height",0x9c22cf53,"starling.textures.Texture.get_height","starling/textures/Texture.hx",723,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_727_get_nativeWidth,"starling.textures.Texture","get_nativeWidth",0x63210a03,"starling.textures.Texture.get_nativeWidth","starling/textures/Texture.hx",727,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_731_get_nativeHeight,"starling.textures.Texture","get_nativeHeight",0x1017314a,"starling.textures.Texture.get_nativeHeight","starling/textures/Texture.hx",731,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_735_get_scale,"starling.textures.Texture","get_scale",0x92c0d89e,"starling.textures.Texture.get_scale","starling/textures/Texture.hx",735,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_739_get_base,"starling.textures.Texture","get_base",0xf1f8bc7d,"starling.textures.Texture.get_base","starling/textures/Texture.hx",739,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_743_get_root,"starling.textures.Texture","get_root",0xfc96c28e,"starling.textures.Texture.get_root","starling/textures/Texture.hx",743,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_747_get_format,"starling.textures.Texture","get_format",0x976556a3,"starling.textures.Texture.get_format","starling/textures/Texture.hx",747,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_751_get_mipMapping,"starling.textures.Texture","get_mipMapping",0xa6239946,"starling.textures.Texture.get_mipMapping","starling/textures/Texture.hx",751,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_755_get_premultipliedAlpha,"starling.textures.Texture","get_premultipliedAlpha",0x2bf6c794,"starling.textures.Texture.get_premultipliedAlpha","starling/textures/Texture.hx",755,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_762_get_transformationMatrix,"starling.textures.Texture","get_transformationMatrix",0x9e7ed156,"starling.textures.Texture.get_transformationMatrix","starling/textures/Texture.hx",762,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_769_get_transformationMatrixToRoot,"starling.textures.Texture","get_transformationMatrixToRoot",0x45244333,"starling.textures.Texture.get_transformationMatrixToRoot","starling/textures/Texture.hx",769,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_159_fromData,"starling.textures.Texture","fromData",0xd15c3d97,"starling.textures.Texture.fromData","starling/textures/Texture.hx",159,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_198_fromTextureBase,"starling.textures.Texture","fromTextureBase",0x970c76bf,"starling.textures.Texture.fromTextureBase","starling/textures/Texture.hx",198,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_242_fromEmbeddedAsset,"starling.textures.Texture","fromEmbeddedAsset",0x74f12ef9,"starling.textures.Texture.fromEmbeddedAsset","starling/textures/Texture.hx",242,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_252_fromEmbeddedAsset,"starling.textures.Texture","fromEmbeddedAsset",0x74f12ef9,"starling.textures.Texture.fromEmbeddedAsset","starling/textures/Texture.hx",252,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_260_fromEmbeddedAsset,"starling.textures.Texture","fromEmbeddedAsset",0x74f12ef9,"starling.textures.Texture.fromEmbeddedAsset","starling/textures/Texture.hx",260,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_301_fromBitmap,"starling.textures.Texture","fromBitmap",0xdd9f6c9c,"starling.textures.Texture.fromBitmap","starling/textures/Texture.hx",301,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_339_fromBitmapData,"starling.textures.Texture","fromBitmapData",0xdf846ce6,"starling.textures.Texture.fromBitmapData","starling/textures/Texture.hx",339,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_333_fromBitmapData,"starling.textures.Texture","fromBitmapData",0xdf846ce6,"starling.textures.Texture.fromBitmapData","starling/textures/Texture.hx",333,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_378_fromAtfData,"starling.textures.Texture","fromAtfData",0x1f814290,"starling.textures.Texture.fromAtfData","starling/textures/Texture.hx",378,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_364_fromAtfData,"starling.textures.Texture","fromAtfData",0x1f814290,"starling.textures.Texture.fromAtfData","starling/textures/Texture.hx",364,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_414_fromNetStream,"starling.textures.Texture","fromNetStream",0x85658a30,"starling.textures.Texture.fromNetStream","starling/textures/Texture.hx",414,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_417_fromNetStream,"starling.textures.Texture","fromNetStream",0x85658a30,"starling.textures.Texture.fromNetStream","starling/textures/Texture.hx",417,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_463_fromVideoAttachment,"starling.textures.Texture","fromVideoAttachment",0x87d2cdf1,"starling.textures.Texture.fromVideoAttachment","starling/textures/Texture.hx",463,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_451_fromVideoAttachment,"starling.textures.Texture","fromVideoAttachment",0x87d2cdf1,"starling.textures.Texture.fromVideoAttachment","starling/textures/Texture.hx",451,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_494_fromColor,"starling.textures.Texture","fromColor",0xd52e0956,"starling.textures.Texture.fromColor","starling/textures/Texture.hx",494,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_488_fromColor,"starling.textures.Texture","fromColor",0xd52e0956,"starling.textures.Texture.fromColor","starling/textures/Texture.hx",488,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_565_empty,"starling.textures.Texture","empty",0x607005ca,"starling.textures.Texture.empty","starling/textures/Texture.hx",565,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_523_empty,"starling.textures.Texture","empty",0x607005ca,"starling.textures.Texture.empty","starling/textures/Texture.hx",523,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_590_fromTexture,"starling.textures.Texture","fromTexture",0xb33e838e,"starling.textures.Texture.fromTexture","starling/textures/Texture.hx",590,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_775_get_maxSize,"starling.textures.Texture","get_maxSize",0xce9bb099,"starling.textures.Texture.get_maxSize","starling/textures/Texture.hx",775,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_795_get_asyncBitmapUploadEnabled,"starling.textures.Texture","get_asyncBitmapUploadEnabled",0x000a4ba1,"starling.textures.Texture.get_asyncBitmapUploadEnabled","starling/textures/Texture.hx",795,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_799_set_asyncBitmapUploadEnabled,"starling.textures.Texture","set_asyncBitmapUploadEnabled",0x03349715,"starling.textures.Texture.set_asyncBitmapUploadEnabled","starling/textures/Texture.hx",799,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_131_boot,"starling.textures.Texture","boot",0x2eabaf95,"starling.textures.Texture.boot","starling/textures/Texture.hx",131,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_132_boot,"starling.textures.Texture","boot",0x2eabaf95,"starling.textures.Texture.boot","starling/textures/Texture.hx",132,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_133_boot,"starling.textures.Texture","boot",0x2eabaf95,"starling.textures.Texture.boot","starling/textures/Texture.hx",133,0xcd00e793)
HX_LOCAL_STACK_FRAME(_hx_pos_1d200748468d00c9_134_boot,"starling.textures.Texture","boot",0x2eabaf95,"starling.textures.Texture.boot","starling/textures/Texture.hx",134,0xcd00e793)
namespace starling{
namespace textures{

void Texture_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_138_new)
            	}

Dynamic Texture_obj::__CreateEmpty() { return new Texture_obj; }

void *Texture_obj::_hx_vtable = 0;

Dynamic Texture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Texture_obj > _hx_result = new Texture_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Texture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d644757;
}

void Texture_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_147_dispose)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,dispose,(void))

void Texture_obj::setupVertexPositions( ::starling::rendering::VertexData vertexData,hx::Null< int >  __o_vertexID,::String __o_attrName, ::openfl::geom::Rectangle bounds){
int vertexID = __o_vertexID.Default(0);
::String attrName = __o_attrName.Default(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_607_setupVertexPositions)
HXLINE( 608)		 ::openfl::geom::Rectangle frame = this->get_frame();
HXLINE( 609)		Float width = this->get_width();
HXLINE( 610)		Float height = this->get_height();
HXLINE( 612)		if (hx::IsNotNull( frame )) {
HXLINE( 613)			::starling::textures::Texture_obj::sRectangle->setTo(-(frame->x),-(frame->y),width,height);
            		}
            		else {
HXLINE( 615)			::starling::textures::Texture_obj::sRectangle->setTo((int)0,(int)0,width,height);
            		}
HXLINE( 617)		Float _hx_tmp = ::starling::textures::Texture_obj::sRectangle->get_left();
HXDLIN( 617)		vertexData->setPoint(vertexID,attrName,_hx_tmp,::starling::textures::Texture_obj::sRectangle->get_top());
HXLINE( 618)		Float _hx_tmp1 = ::starling::textures::Texture_obj::sRectangle->get_right();
HXDLIN( 618)		vertexData->setPoint((vertexID + (int)1),attrName,_hx_tmp1,::starling::textures::Texture_obj::sRectangle->get_top());
HXLINE( 619)		Float _hx_tmp2 = ::starling::textures::Texture_obj::sRectangle->get_left();
HXDLIN( 619)		vertexData->setPoint((vertexID + (int)2),attrName,_hx_tmp2,::starling::textures::Texture_obj::sRectangle->get_bottom());
HXLINE( 620)		Float _hx_tmp3 = ::starling::textures::Texture_obj::sRectangle->get_right();
HXDLIN( 620)		vertexData->setPoint((vertexID + (int)3),attrName,_hx_tmp3,::starling::textures::Texture_obj::sRectangle->get_bottom());
HXLINE( 622)		if (hx::IsNotNull( bounds )) {
HXLINE( 624)			Float bounds1 = bounds->width;
HXDLIN( 624)			Float scaleX = ((Float)bounds1 / (Float)this->get_frameWidth());
HXLINE( 625)			Float bounds2 = bounds->height;
HXDLIN( 625)			Float scaleY = ((Float)bounds2 / (Float)this->get_frameHeight());
HXLINE( 627)			bool _hx_tmp4;
HXDLIN( 627)			bool _hx_tmp5;
HXDLIN( 627)			bool _hx_tmp6;
HXDLIN( 627)			if ((scaleX == ((Float)1.0))) {
HXLINE( 627)				_hx_tmp6 = (scaleY != ((Float)1.0));
            			}
            			else {
HXLINE( 627)				_hx_tmp6 = true;
            			}
HXDLIN( 627)			if (!(_hx_tmp6)) {
HXLINE( 627)				_hx_tmp5 = (bounds->x != (int)0);
            			}
            			else {
HXLINE( 627)				_hx_tmp5 = true;
            			}
HXDLIN( 627)			if (!(_hx_tmp5)) {
HXLINE( 627)				_hx_tmp4 = (bounds->y != (int)0);
            			}
            			else {
HXLINE( 627)				_hx_tmp4 = true;
            			}
HXDLIN( 627)			if (_hx_tmp4) {
HXLINE( 629)				::starling::textures::Texture_obj::sMatrix->identity();
HXLINE( 630)				::starling::textures::Texture_obj::sMatrix->scale(scaleX,scaleY);
HXLINE( 631)				::starling::textures::Texture_obj::sMatrix->translate(bounds->x,bounds->y);
HXLINE( 632)				vertexData->transformPoints(attrName,::starling::textures::Texture_obj::sMatrix,vertexID,(int)4);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Texture_obj,setupVertexPositions,(void))

void Texture_obj::setupTextureCoordinates( ::starling::rendering::VertexData vertexData,hx::Null< int >  __o_vertexID,::String __o_attrName){
int vertexID = __o_vertexID.Default(0);
::String attrName = __o_attrName.Default(HX_HCSTRING("texCoords","\x65","\x5d","\x73","\xa1"));
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_646_setupTextureCoordinates)
HXLINE( 647)		this->setTexCoords(vertexData,vertexID,attrName,((Float)0.0),((Float)0.0));
HXLINE( 648)		this->setTexCoords(vertexData,(vertexID + (int)1),attrName,((Float)1.0),((Float)0.0));
HXLINE( 649)		this->setTexCoords(vertexData,(vertexID + (int)2),attrName,((Float)0.0),((Float)1.0));
HXLINE( 650)		this->setTexCoords(vertexData,(vertexID + (int)3),attrName,((Float)1.0),((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Texture_obj,setupTextureCoordinates,(void))

 ::openfl::geom::Point Texture_obj::localToGlobal(Float u,Float v, ::openfl::geom::Point out){
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_656_localToGlobal)
HXLINE( 657)		if (hx::IsNull( out )) {
HXLINE( 657)			out =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 658)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),this->get_root() )) {
HXLINE( 658)			out->setTo(u,v);
            		}
            		else {
HXLINE( 659)			::starling::utils::MatrixUtil_obj::transformCoords(this->get_transformationMatrixToRoot(),u,v,out);
            		}
HXLINE( 660)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Texture_obj,localToGlobal,return )

 ::openfl::geom::Point Texture_obj::globalToLocal(Float u,Float v, ::openfl::geom::Point out){
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_666_globalToLocal)
HXLINE( 667)		if (hx::IsNull( out )) {
HXLINE( 667)			out =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 668)		if (hx::IsEq( hx::ObjectPtr<OBJ_>(this),this->get_root() )) {
HXLINE( 668)			out->setTo(u,v);
            		}
            		else {
HXLINE( 671)			::starling::textures::Texture_obj::sMatrix->identity();
HXLINE( 672)			 ::openfl::geom::Matrix _hx_tmp = ::starling::textures::Texture_obj::sMatrix;
HXDLIN( 672)			_hx_tmp->copyFrom(this->get_transformationMatrixToRoot());
HXLINE( 673)			::starling::textures::Texture_obj::sMatrix->invert();
HXLINE( 674)			::starling::utils::MatrixUtil_obj::transformCoords(::starling::textures::Texture_obj::sMatrix,u,v,out);
            		}
HXLINE( 676)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Texture_obj,globalToLocal,return )

void Texture_obj::setTexCoords( ::starling::rendering::VertexData vertexData,int vertexID,::String attrName,Float u,Float v){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_684_setTexCoords)
HXLINE( 685)		this->localToGlobal(u,v,::starling::textures::Texture_obj::sPoint);
HXLINE( 686)		vertexData->setPoint(vertexID,attrName,::starling::textures::Texture_obj::sPoint->x,::starling::textures::Texture_obj::sPoint->y);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Texture_obj,setTexCoords,(void))

 ::openfl::geom::Point Texture_obj::getTexCoords( ::starling::rendering::VertexData vertexData,int vertexID,::String __o_attrName, ::openfl::geom::Point out){
::String attrName = __o_attrName.Default(HX_HCSTRING("texCoords","\x65","\x5d","\x73","\xa1"));
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_694_getTexCoords)
HXLINE( 695)		if (hx::IsNull( out )) {
HXLINE( 695)			out =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 696)		vertexData->getPoint(vertexID,attrName,out);
HXLINE( 697)		return this->globalToLocal(out->x,out->y,out);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Texture_obj,getTexCoords,return )

 ::openfl::geom::Rectangle Texture_obj::get_frame(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_705_get_frame)
HXDLIN( 705)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_frame,return )

Float Texture_obj::get_frameWidth(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_710_get_frameWidth)
HXDLIN( 710)		if (hx::IsNotNull( this->get_frame() )) {
HXDLIN( 710)			return this->get_frame()->width;
            		}
            		else {
HXDLIN( 710)			return this->get_width();
            		}
HXDLIN( 710)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_frameWidth,return )

Float Texture_obj::get_frameHeight(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_715_get_frameHeight)
HXDLIN( 715)		if (hx::IsNotNull( this->get_frame() )) {
HXDLIN( 715)			return this->get_frame()->height;
            		}
            		else {
HXDLIN( 715)			return this->get_height();
            		}
HXDLIN( 715)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_frameHeight,return )

Float Texture_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_719_get_width)
HXDLIN( 719)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_width,return )

Float Texture_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_723_get_height)
HXDLIN( 723)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_height,return )

Float Texture_obj::get_nativeWidth(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_727_get_nativeWidth)
HXDLIN( 727)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_nativeWidth,return )

Float Texture_obj::get_nativeHeight(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_731_get_nativeHeight)
HXDLIN( 731)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_nativeHeight,return )

Float Texture_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_735_get_scale)
HXDLIN( 735)		return ((Float)1.0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_scale,return )

 ::openfl::display3D::textures::TextureBase Texture_obj::get_base(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_739_get_base)
HXDLIN( 739)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_base,return )

 ::starling::textures::ConcreteTexture Texture_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_743_get_root)
HXDLIN( 743)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_root,return )

 ::Dynamic Texture_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_747_get_format)
HXDLIN( 747)		return (int)1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_format,return )

bool Texture_obj::get_mipMapping(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_751_get_mipMapping)
HXDLIN( 751)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_mipMapping,return )

bool Texture_obj::get_premultipliedAlpha(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_755_get_premultipliedAlpha)
HXDLIN( 755)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_premultipliedAlpha,return )

 ::openfl::geom::Matrix Texture_obj::get_transformationMatrix(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_762_get_transformationMatrix)
HXDLIN( 762)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_transformationMatrix,return )

 ::openfl::geom::Matrix Texture_obj::get_transformationMatrixToRoot(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_769_get_transformationMatrixToRoot)
HXDLIN( 769)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_transformationMatrixToRoot,return )

 ::starling::textures::TextureOptions Texture_obj::sDefaultOptions;

 ::openfl::geom::Rectangle Texture_obj::sRectangle;

 ::openfl::geom::Matrix Texture_obj::sMatrix;

 ::openfl::geom::Point Texture_obj::sPoint;

 ::starling::textures::Texture Texture_obj::fromData( ::Dynamic data, ::starling::textures::TextureOptions options){
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_159_fromData)
HXLINE( 160)		 ::starling::textures::Texture texture = null();
HXLINE( 162)		if (::Std_obj::is(data,hx::ClassOf< ::openfl::display::Bitmap >())) {
HXLINE( 162)			data = hx::TCast<  ::openfl::display::Bitmap >::cast(data)->get_bitmapData();
            		}
HXLINE( 163)		if (hx::IsNull( options )) {
HXLINE( 163)			options = ::starling::textures::Texture_obj::sDefaultOptions;
            		}
HXLINE( 165)		if (::Std_obj::is(data,hx::ClassOf< ::hx::Class >())) {
HXLINE( 168)			bool _hx_tmp = options->get_mipMapping();
HXDLIN( 168)			bool _hx_tmp1 = options->get_optimizeForRenderToTexture();
HXLINE( 169)			Float _hx_tmp2 = options->get_scale();
HXDLIN( 169)			 ::Dynamic _hx_tmp3 = ::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(options->get_format());
HXLINE( 167)			return ::starling::textures::Texture_obj::fromEmbeddedAsset(data,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,options->get_forcePotTexture());
            		}
            		else {
HXLINE( 171)			if (::Std_obj::is(data,hx::ClassOf< ::openfl::display::BitmapData >())) {
HXLINE( 174)				bool _hx_tmp4 = options->get_mipMapping();
HXDLIN( 174)				bool _hx_tmp5 = options->get_optimizeForRenderToTexture();
HXLINE( 175)				Float _hx_tmp6 = options->get_scale();
HXDLIN( 175)				 ::Dynamic _hx_tmp7 = ::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(options->get_format());
HXDLIN( 175)				bool _hx_tmp8 = options->get_forcePotTexture();
HXLINE( 173)				return ::starling::textures::Texture_obj::fromBitmapData(( ( ::openfl::display::BitmapData)(data) ),_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,options->get_onReady());
            			}
            			else {
HXLINE( 178)				if (::Std_obj::is(data,hx::ClassOf< ::openfl::utils::ByteArrayData >())) {
HXLINE( 181)					Float _hx_tmp9 = options->get_scale();
HXDLIN( 181)					bool _hx_tmp10 = options->get_mipMapping();
HXLINE( 180)					return ::starling::textures::Texture_obj::fromAtfData(( ( ::openfl::utils::ByteArrayData)(data) ),_hx_tmp9,_hx_tmp10,options->get_onReady(),null());
            				}
            				else {
HXLINE( 184)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unsupported 'data' type: ",bf,fc,f4,9f) + ::Type_obj::getClassName(data))));
            				}
            			}
            		}
HXLINE( 165)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Texture_obj,fromData,return )

 ::starling::textures::ConcreteTexture Texture_obj::fromTextureBase( ::openfl::display3D::textures::TextureBase base,int width,int height, ::starling::textures::TextureOptions options){
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_198_fromTextureBase)
HXLINE( 199)		if (hx::IsNull( options )) {
HXLINE( 199)			options = ::starling::textures::Texture_obj::sDefaultOptions;
            		}
HXLINE( 201)		if (::Std_obj::is(base,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE( 203)			 ::openfl::display3D::textures::Texture _hx_tmp = hx::TCast<  ::openfl::display3D::textures::Texture >::cast(base);
HXLINE( 204)			::String _hx_tmp1 = options->get_format();
HXDLIN( 204)			bool _hx_tmp2 = options->get_mipMapping();
HXLINE( 205)			bool _hx_tmp3 = options->get_premultipliedAlpha();
HXDLIN( 205)			bool _hx_tmp4 = options->get_optimizeForRenderToTexture();
HXLINE( 203)			return  ::starling::textures::ConcretePotTexture_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,width,height,_hx_tmp2,_hx_tmp3,_hx_tmp4,options->get_scale());
            		}
            		else {
HXLINE( 208)			if (::Std_obj::is(base,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE( 210)				 ::openfl::display3D::textures::RectangleTexture _hx_tmp5 = hx::TCast<  ::openfl::display3D::textures::RectangleTexture >::cast(base);
HXLINE( 211)				::String _hx_tmp6 = options->get_format();
HXDLIN( 211)				bool _hx_tmp7 = options->get_premultipliedAlpha();
HXLINE( 212)				bool _hx_tmp8 = options->get_optimizeForRenderToTexture();
HXLINE( 210)				return  ::starling::textures::ConcreteRectangleTexture_obj::__alloc( HX_CTX ,_hx_tmp5,_hx_tmp6,width,height,_hx_tmp7,_hx_tmp8,options->get_scale());
            			}
            			else {
HXLINE( 214)				if (::Std_obj::is(base,hx::ClassOf< ::openfl::display3D::textures::VideoTexture >())) {
HXLINE( 216)					 ::openfl::display3D::textures::VideoTexture _hx_tmp9 = hx::TCast<  ::openfl::display3D::textures::VideoTexture >::cast(base);
HXDLIN( 216)					return  ::starling::textures::ConcreteVideoTexture_obj::__alloc( HX_CTX ,_hx_tmp9,options->get_scale());
            				}
            				else {
HXLINE( 219)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Unsupported 'base' type: ",a6,4d,f1,a7) + ::Type_obj::getClassName(::Type_obj::getClass(base)))));
            				}
            			}
            		}
HXLINE( 201)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Texture_obj,fromTextureBase,return )

 ::starling::textures::Texture Texture_obj::fromEmbeddedAsset(hx::Class assetClass,hx::Null< bool >  __o_mipMapping,hx::Null< bool >  __o_optimizeForRenderToTexture,hx::Null< Float >  __o_scale, ::Dynamic __o_format,hx::Null< bool >  __o_forcePotTexture){
bool mipMapping = __o_mipMapping.Default(true);
bool optimizeForRenderToTexture = __o_optimizeForRenderToTexture.Default(false);
Float scale = __o_scale.Default(1);
 ::Dynamic format = __o_format.Default(1);
bool forcePotTexture = __o_forcePotTexture.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_242_fromEmbeddedAsset)
HXLINE( 243)		 ::starling::textures::Texture texture;
HXLINE( 244)		hx::Class asset = ::Type_obj::createEmptyInstance(assetClass);
HXLINE( 246)		if (::Std_obj::is(asset,hx::ClassOf< ::openfl::display::Bitmap >())) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,hx::Class,assetClass) HXARGC(1)
            			void _hx_run( ::starling::textures::ConcreteTexture textureRoot){
            				HX_STACKFRAME(&_hx_pos_1d200748468d00c9_252_fromEmbeddedAsset)
HXLINE( 252)				textureRoot->uploadBitmap(( ( ::openfl::display::Bitmap)(::Type_obj::createInstance(assetClass,::cpp::VirtualArray_obj::__new(0))) ),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 248)			texture = ::starling::textures::Texture_obj::fromBitmap(( ( ::openfl::display::Bitmap)(asset) ),mipMapping,optimizeForRenderToTexture,scale,format,forcePotTexture,null());
HXLINE( 250)			texture->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_0(assetClass)));
            		}
            		else {
HXLINE( 255)			if (::Std_obj::is(asset,hx::ClassOf< ::openfl::utils::ByteArrayData >())) {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,hx::Class,assetClass) HXARGC(1)
            				void _hx_run( ::starling::textures::ConcreteTexture textureRoot1){
            					HX_STACKFRAME(&_hx_pos_1d200748468d00c9_260_fromEmbeddedAsset)
HXLINE( 260)					textureRoot1->uploadAtfData(( ( ::openfl::utils::ByteArrayData)(::Type_obj::createInstance(assetClass,::cpp::VirtualArray_obj::__new(0))) ),null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 257)				texture = ::starling::textures::Texture_obj::fromAtfData(( ( ::openfl::utils::ByteArrayData)(asset) ),scale,mipMapping,null(),null());
HXLINE( 258)				texture->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_1(assetClass)));
            			}
            			else {
HXLINE( 265)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid asset type: ",f9,c6,f4,3a) + ::Type_obj::getClassName(asset))));
            			}
            		}
HXLINE( 268)		asset = null();
HXLINE( 269)		return texture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Texture_obj,fromEmbeddedAsset,return )

 ::starling::textures::Texture Texture_obj::fromBitmap( ::openfl::display::Bitmap bitmap,hx::Null< bool >  __o_generateMipMaps,hx::Null< bool >  __o_optimizeForRenderToTexture,hx::Null< Float >  __o_scale, ::Dynamic __o_format,hx::Null< bool >  __o_forcePotTexture, ::Dynamic async){
bool generateMipMaps = __o_generateMipMaps.Default(true);
bool optimizeForRenderToTexture = __o_optimizeForRenderToTexture.Default(false);
Float scale = __o_scale.Default(1);
 ::Dynamic format = __o_format.Default(1);
bool forcePotTexture = __o_forcePotTexture.Default(false);
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_301_fromBitmap)
HXDLIN( 301)		return ::starling::textures::Texture_obj::fromBitmapData(bitmap->get_bitmapData(),generateMipMaps,optimizeForRenderToTexture,scale,format,forcePotTexture,async);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Texture_obj,fromBitmap,return )

 ::starling::textures::Texture Texture_obj::fromBitmapData( ::openfl::display::BitmapData data,hx::Null< bool >  __o_generateMipMaps,hx::Null< bool >  __o_optimizeForRenderToTexture,hx::Null< Float >  __o_scale, ::Dynamic __o_format,hx::Null< bool >  __o_forcePotTexture, ::Dynamic async){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,data) HXARGC(1)
            		void _hx_run( ::starling::textures::ConcreteTexture textureRoot){
            			HX_STACKFRAME(&_hx_pos_1d200748468d00c9_339_fromBitmapData)
HXLINE( 339)			textureRoot->uploadBitmapData(data,null());
            		}
            		HX_END_LOCAL_FUNC1((void))

bool generateMipMaps = __o_generateMipMaps.Default(true);
bool optimizeForRenderToTexture = __o_optimizeForRenderToTexture.Default(false);
Float scale = __o_scale.Default(1);
 ::Dynamic format = __o_format.Default(1);
bool forcePotTexture = __o_forcePotTexture.Default(false);
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_333_fromBitmapData)
HXLINE( 334)		Float texture = ((Float)data->width / (Float)scale);
HXDLIN( 334)		Float texture1 = ((Float)data->height / (Float)scale);
HXDLIN( 334)		 ::starling::textures::Texture texture2 = ::starling::textures::Texture_obj::empty(texture,texture1,true,generateMipMaps,optimizeForRenderToTexture,scale,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(format),forcePotTexture);
HXLINE( 338)		texture2->get_root()->uploadBitmapData(data,async);
HXLINE( 339)		texture2->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_0(data)));
HXLINE( 341)		return texture2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Texture_obj,fromBitmapData,return )

 ::starling::textures::Texture Texture_obj::fromAtfData( ::openfl::utils::ByteArrayData data,hx::Null< Float >  __o_scale,hx::Null< bool >  __o_useMipMaps, ::Dynamic async,hx::Null< bool >  __o_premultipliedAlpha){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,data) HXARGC(1)
            		void _hx_run( ::starling::textures::ConcreteTexture textureRoot){
            			HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_378_fromAtfData)
HXLINE( 378)			textureRoot->uploadAtfData(data,(int)0,null());
            		}
            		HX_END_LOCAL_FUNC1((void))

Float scale = __o_scale.Default(1);
bool useMipMaps = __o_useMipMaps.Default(true);
bool premultipliedAlpha = __o_premultipliedAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_364_fromAtfData)
HXLINE( 365)		 ::openfl::display3D::Context3D context = ::starling::core::Starling_obj::get_current()->get_context();
HXLINE( 366)		if (hx::IsNull( context )) {
HXLINE( 366)			HX_STACK_DO_THROW( ::starling::errors::MissingContextError_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 368)		 ::starling::textures::AtfData atfData =  ::starling::textures::AtfData_obj::__alloc( HX_CTX ,data);
HXLINE( 370)		int nativeTexture = atfData->get_width();
HXDLIN( 370)		int nativeTexture1 = atfData->get_height();
HXLINE( 369)		 ::openfl::display3D::textures::Texture nativeTexture2 = context->createTexture(nativeTexture,nativeTexture1,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(atfData->get_format()),false,null());
HXLINE( 372)		::String concreteTexture = atfData->get_format();
HXDLIN( 372)		int concreteTexture1 = atfData->get_width();
HXDLIN( 372)		int concreteTexture2 = atfData->get_height();
HXDLIN( 372)		bool concreteTexture3;
HXDLIN( 372)		if (useMipMaps) {
HXLINE( 372)			concreteTexture3 = (atfData->get_numTextures() > (int)1);
            		}
            		else {
HXLINE( 372)			concreteTexture3 = false;
            		}
HXLINE( 371)		 ::starling::textures::ConcreteTexture concreteTexture4 =  ::starling::textures::ConcretePotTexture_obj::__alloc( HX_CTX ,nativeTexture2,concreteTexture,concreteTexture1,concreteTexture2,concreteTexture3,premultipliedAlpha,false,scale);
HXLINE( 375)		concreteTexture4->uploadAtfData(data,(int)0,async);
HXLINE( 376)		concreteTexture4->set_onRestore( ::Dynamic(new _hx_Closure_0(data)));
HXLINE( 381)		return concreteTexture4;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Texture_obj,fromAtfData,return )

 ::starling::textures::Texture Texture_obj::fromNetStream( ::openfl::net::NetStream stream,hx::Null< Float >  __o_scale, ::Dynamic onComplete){
Float scale = __o_scale.Default(1);
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_414_fromNetStream)
HXLINE( 416)		bool _hx_tmp;
HXDLIN( 416)		if (hx::IsEq( stream->client,stream )) {
HXLINE( 416)			_hx_tmp = !(::Reflect_obj::hasField(stream,HX_("onMetaData",ce,e7,a9,08)));
            		}
            		else {
HXLINE( 416)			_hx_tmp = false;
            		}
HXDLIN( 416)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::Dynamic md){
            				HX_STACKFRAME(&_hx_pos_1d200748468d00c9_417_fromNetStream)
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 417)			stream->client =  ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onMetaData",ce,e7,a9,08), ::Dynamic(new _hx_Closure_0())));
            		}
HXLINE( 419)		return ::starling::textures::Texture_obj::fromVideoAttachment(HX_("NetStream",9d,5c,f0,f3),stream,scale,onComplete);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Texture_obj,fromNetStream,return )

 ::starling::textures::Texture Texture_obj::fromVideoAttachment(::String type, ::Dynamic attachment,Float scale, ::Dynamic onComplete){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,type, ::Dynamic,attachment) HXARGC(1)
            		void _hx_run( ::starling::textures::ConcreteTexture textureRoot){
            			HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_463_fromVideoAttachment)
HXLINE( 463)			textureRoot->attachVideo(type,attachment,null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_451_fromVideoAttachment)
HXLINE( 452)		if (!(::starling::utils::SystemUtil_obj::get_supportsVideoTexture())) {
HXLINE( 453)			HX_STACK_DO_THROW( ::starling::errors::NotSupportedError_obj::__alloc( HX_CTX ,HX_("Video Textures are not supported on this platform",e2,e4,a4,da),null()));
            		}
HXLINE( 455)		 ::openfl::display3D::Context3D context = ::starling::core::Starling_obj::get_current()->get_context();
HXLINE( 456)		if (hx::IsNull( context )) {
HXLINE( 456)			HX_STACK_DO_THROW( ::starling::errors::MissingContextError_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 458)		 ::openfl::display3D::textures::VideoTexture base = context->createVideoTexture();
HXLINE( 459)		 ::starling::textures::ConcreteTexture texture =  ::starling::textures::ConcreteVideoTexture_obj::__alloc( HX_CTX ,base,scale);
HXLINE( 460)		texture->attachVideo(type,attachment,onComplete);
HXLINE( 461)		texture->set_onRestore( ::Dynamic(new _hx_Closure_0(type,attachment)));
HXLINE( 466)		return texture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Texture_obj,fromVideoAttachment,return )

 ::starling::textures::Texture Texture_obj::fromColor(Float width,Float height,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< bool >  __o_optimizeForRenderToTexture,hx::Null< Float >  __o_scale,::String __o_format,hx::Null< bool >  __o_forcePotTexture){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,Float,alpha,int,color) HXARGC(1)
            		void _hx_run( ::starling::textures::ConcreteTexture textureRoot){
            			HX_STACKFRAME(&_hx_pos_1d200748468d00c9_494_fromColor)
HXLINE( 494)			textureRoot->clear(color,alpha);
            		}
            		HX_END_LOCAL_FUNC1((void))

int color = __o_color.Default(16777215);
Float alpha = __o_alpha.Default(((Float)1.0));
bool optimizeForRenderToTexture = __o_optimizeForRenderToTexture.Default(false);
Float scale = __o_scale.Default(-1);
::String format = __o_format.Default(HX_HCSTRING("bgra","\xb4","\x74","\x15","\x41"));
bool forcePotTexture = __o_forcePotTexture.Default(false);
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_488_fromColor)
HXLINE( 489)		 ::starling::textures::Texture texture = ::starling::textures::Texture_obj::empty(width,height,true,false,optimizeForRenderToTexture,scale,format,forcePotTexture);
HXLINE( 491)		texture->get_root()->clear(color,alpha);
HXLINE( 492)		texture->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_0(alpha,color)));
HXLINE( 497)		return texture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Texture_obj,fromColor,return )

 ::starling::textures::Texture Texture_obj::empty(Float width,Float height,hx::Null< bool >  __o_premultipliedAlpha,hx::Null< bool >  __o_mipMapping,hx::Null< bool >  __o_optimizeForRenderToTexture,hx::Null< Float >  __o_scale,::String __o_format,hx::Null< bool >  __o_forcePotTexture){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::starling::textures::ConcreteTexture textureRoot){
            			HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_565_empty)
HXLINE( 565)			textureRoot->clear(null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

bool premultipliedAlpha = __o_premultipliedAlpha.Default(true);
bool mipMapping = __o_mipMapping.Default(false);
bool optimizeForRenderToTexture = __o_optimizeForRenderToTexture.Default(false);
Float scale = __o_scale.Default(-1);
::String format = __o_format.Default(HX_HCSTRING("bgra","\xb4","\x74","\x15","\x41"));
bool forcePotTexture = __o_forcePotTexture.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_523_empty)
HXLINE( 524)		if ((scale <= (int)0)) {
HXLINE( 524)			scale = ::starling::core::Starling_obj::get_current()->get_contentScaleFactor();
            		}
HXLINE( 526)		int actualWidth;
HXDLIN( 526)		int actualHeight;
HXLINE( 527)		 ::openfl::display3D::textures::TextureBase nativeTexture;
HXLINE( 528)		 ::starling::textures::ConcreteTexture concreteTexture;
HXLINE( 529)		 ::openfl::display3D::Context3D context = ::starling::core::Starling_obj::get_current()->get_context();
HXLINE( 531)		if (hx::IsNull( context )) {
HXLINE( 531)			HX_STACK_DO_THROW( ::starling::errors::MissingContextError_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 533)		Float origWidth = (width * scale);
HXLINE( 534)		Float origHeight = (height * scale);
HXLINE( 535)		bool useRectTexture;
HXDLIN( 535)		bool useRectTexture1;
HXDLIN( 535)		bool useRectTexture2;
HXDLIN( 535)		if (!(forcePotTexture)) {
HXLINE( 535)			useRectTexture2 = !(mipMapping);
            		}
            		else {
HXLINE( 535)			useRectTexture2 = false;
            		}
HXDLIN( 535)		if (useRectTexture2) {
HXLINE( 535)			useRectTexture1 = (::openfl::display3D::_Context3DProfile::Context3DProfile_Impl__obj::toString(::starling::core::Starling_obj::get_current()->get_profile()) != HX_("baselineConstrained",d1,73,c8,e8));
            		}
            		else {
HXLINE( 535)			useRectTexture1 = false;
            		}
HXDLIN( 535)		if (useRectTexture1) {
HXLINE( 535)			useRectTexture = (format.indexOf(HX_("compressed",81,4c,da,67),null()) == (int)-1);
            		}
            		else {
HXLINE( 535)			useRectTexture = false;
            		}
HXLINE( 539)		if (useRectTexture) {
HXLINE( 541)			actualWidth = ::Math_obj::ceil((origWidth - ((Float)0.000000001)));
HXLINE( 542)			actualHeight = ::Math_obj::ceil((origHeight - ((Float)0.000000001)));
HXLINE( 544)			nativeTexture = context->createRectangleTexture(actualWidth,actualHeight,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(format),optimizeForRenderToTexture);
HXLINE( 547)			concreteTexture =  ::starling::textures::ConcreteRectangleTexture_obj::__alloc( HX_CTX ,nativeTexture,format,actualWidth,actualHeight,premultipliedAlpha,optimizeForRenderToTexture,scale);
            		}
            		else {
HXLINE( 553)			actualWidth = ::starling::utils::MathUtil_obj::getNextPowerOfTwo(origWidth);
HXLINE( 554)			actualHeight = ::starling::utils::MathUtil_obj::getNextPowerOfTwo(origHeight);
HXLINE( 556)			nativeTexture = context->createTexture(actualWidth,actualHeight,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(format),optimizeForRenderToTexture,null());
HXLINE( 559)			concreteTexture =  ::starling::textures::ConcretePotTexture_obj::__alloc( HX_CTX ,nativeTexture,format,actualWidth,actualHeight,mipMapping,premultipliedAlpha,optimizeForRenderToTexture,scale);
            		}
HXLINE( 565)		concreteTexture->set_onRestore( ::Dynamic(new _hx_Closure_0()));
HXLINE( 567)		bool _hx_tmp;
HXDLIN( 567)		if (((actualWidth - origWidth) < ((Float)0.001))) {
HXLINE( 567)			_hx_tmp = ((actualHeight - origHeight) < ((Float)0.001));
            		}
            		else {
HXLINE( 567)			_hx_tmp = false;
            		}
HXDLIN( 567)		if (_hx_tmp) {
HXLINE( 568)			return concreteTexture;
            		}
            		else {
HXLINE( 570)			return  ::starling::textures::SubTexture_obj::__alloc( HX_CTX ,concreteTexture, ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,width,height),true,null(),null(),null());
            		}
HXLINE( 567)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Texture_obj,empty,return )

 ::starling::textures::Texture Texture_obj::fromTexture( ::starling::textures::Texture texture, ::openfl::geom::Rectangle region, ::openfl::geom::Rectangle frame,hx::Null< bool >  __o_rotated,hx::Null< Float >  __o_scaleModifier){
bool rotated = __o_rotated.Default(false);
Float scaleModifier = __o_scaleModifier.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_590_fromTexture)
HXDLIN( 590)		return  ::starling::textures::SubTexture_obj::__alloc( HX_CTX ,texture,region,false,frame,rotated,scaleModifier);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Texture_obj,fromTexture,return )

int Texture_obj::get_maxSize(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_775_get_maxSize)
HXLINE( 776)		 ::starling::core::Starling target = ::starling::core::Starling_obj::get_current();
HXLINE( 777)		 ::Dynamic profile;
HXDLIN( 777)		if (hx::IsNotNull( target )) {
HXLINE( 777)			profile = target->get_profile();
            		}
            		else {
HXLINE( 777)			profile = (int)0;
            		}
HXLINE( 779)		bool _hx_tmp;
HXDLIN( 779)		if (hx::IsNotEq( profile,(int)0 )) {
HXLINE( 779)			_hx_tmp = hx::IsEq( profile,(int)1 );
            		}
            		else {
HXLINE( 779)			_hx_tmp = true;
            		}
HXDLIN( 779)		if (_hx_tmp) {
HXLINE( 780)			return (int)2048;
            		}
            		else {
HXLINE( 782)			return (int)4096;
            		}
HXLINE( 779)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_maxSize,return )

bool Texture_obj::get_asyncBitmapUploadEnabled(){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_795_get_asyncBitmapUploadEnabled)
HXDLIN( 795)		return ::starling::textures::ConcreteRectangleTexture_obj::get_asyncUploadEnabled();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Texture_obj,get_asyncBitmapUploadEnabled,return )

bool Texture_obj::set_asyncBitmapUploadEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_1d200748468d00c9_799_set_asyncBitmapUploadEnabled)
HXLINE( 800)		::starling::textures::ConcreteRectangleTexture_obj::set_asyncUploadEnabled(value);
HXLINE( 801)		::starling::textures::ConcretePotTexture_obj::set_asyncUploadEnabled(value);
HXLINE( 802)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Texture_obj,set_asyncBitmapUploadEnabled,return )


hx::ObjectPtr< Texture_obj > Texture_obj::__new() {
	hx::ObjectPtr< Texture_obj > __this = new Texture_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Texture_obj > Texture_obj::__alloc(hx::Ctx *_hx_ctx) {
	Texture_obj *__this = (Texture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Texture_obj), false, "starling.textures.Texture"));
	*(void **)__this = Texture_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Texture_obj::Texture_obj()
{
}

hx::Val Texture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"base") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_base() ); }
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_root() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_frame() ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scale() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_format() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_base") ) { return hx::Val( get_base_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_frame") ) { return hx::Val( get_frame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_frameWidth() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"mipMapping") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mipMapping() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"frameHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_frameHeight() ); }
		if (HX_FIELD_EQ(inName,"nativeWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_nativeWidth() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setTexCoords") ) { return hx::Val( setTexCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTexCoords") ) { return hx::Val( getTexCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"nativeHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_nativeHeight() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn() ); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return hx::Val( globalToLocal_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_frameWidth") ) { return hx::Val( get_frameWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mipMapping") ) { return hx::Val( get_mipMapping_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_frameHeight") ) { return hx::Val( get_frameHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_nativeWidth") ) { return hx::Val( get_nativeWidth_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_nativeHeight") ) { return hx::Val( get_nativeHeight_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_premultipliedAlpha() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"setupVertexPositions") ) { return hx::Val( setupVertexPositions_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformationMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transformationMatrix() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_premultipliedAlpha") ) { return hx::Val( get_premultipliedAlpha_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setupTextureCoordinates") ) { return hx::Val( setupTextureCoordinates_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"get_transformationMatrix") ) { return hx::Val( get_transformationMatrix_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"transformationMatrixToRoot") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_transformationMatrixToRoot() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"get_transformationMatrixToRoot") ) { return hx::Val( get_transformationMatrixToRoot_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Texture_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { outValue = empty_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sPoint") ) { outValue = ( sPoint ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { outValue = ( sMatrix ); return true; }
		if (HX_FIELD_EQ(inName,"maxSize") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_maxSize() ); return true; } }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromData") ) { outValue = fromData_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromColor") ) { outValue = fromColor_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sRectangle") ) { outValue = ( sRectangle ); return true; }
		if (HX_FIELD_EQ(inName,"fromBitmap") ) { outValue = fromBitmap_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromAtfData") ) { outValue = fromAtfData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromTexture") ) { outValue = fromTexture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_maxSize") ) { outValue = get_maxSize_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromNetStream") ) { outValue = fromNetStream_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromBitmapData") ) { outValue = fromBitmapData_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sDefaultOptions") ) { outValue = ( sDefaultOptions ); return true; }
		if (HX_FIELD_EQ(inName,"fromTextureBase") ) { outValue = fromTextureBase_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fromEmbeddedAsset") ) { outValue = fromEmbeddedAsset_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"fromVideoAttachment") ) { outValue = fromVideoAttachment_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"asyncBitmapUploadEnabled") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_asyncBitmapUploadEnabled() ); return true; } }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"get_asyncBitmapUploadEnabled") ) { outValue = get_asyncBitmapUploadEnabled_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_asyncBitmapUploadEnabled") ) { outValue = set_asyncBitmapUploadEnabled_dyn(); return true; }
	}
	return false;
}

bool Texture_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sPoint") ) { sPoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sMatrix") ) { sMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sRectangle") ) { sRectangle=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sDefaultOptions") ) { sDefaultOptions=ioValue.Cast<  ::starling::textures::TextureOptions >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"asyncBitmapUploadEnabled") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_asyncBitmapUploadEnabled(ioValue.Cast< bool >()) ); }
	}
	return false;
}

void Texture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("frameWidth","\x99","\xea","\x88","\xad"));
	outFields->push(HX_HCSTRING("frameHeight","\xf4","\xd3","\x93","\xe0"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("nativeWidth","\xef","\x38","\x5e","\x31"));
	outFields->push(HX_HCSTRING("nativeHeight","\xde","\x10","\x63","\xb7"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("base","\x11","\xe8","\x10","\x41"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("mipMapping","\xda","\xab","\x96","\x7c"));
	outFields->push(HX_HCSTRING("premultipliedAlpha","\x28","\x8e","\x5c","\x1a"));
	outFields->push(HX_HCSTRING("transformationMatrix","\xea","\x64","\xd2","\x46"));
	outFields->push(HX_HCSTRING("transformationMatrixToRoot","\xc7","\xbd","\x50","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Texture_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Texture_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::starling::textures::TextureOptions*/ ,(void *) &Texture_obj::sDefaultOptions,HX_HCSTRING("sDefaultOptions","\x70","\xe4","\x9c","\xa6")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Texture_obj::sRectangle,HX_HCSTRING("sRectangle","\x3c","\x8d","\xc3","\x1c")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Texture_obj::sMatrix,HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &Texture_obj::sPoint,HX_HCSTRING("sPoint","\xdd","\xa2","\xc7","\x54")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Texture_obj_sMemberFields[] = {
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("setupVertexPositions","\xa9","\x99","\x54","\x73"),
	HX_HCSTRING("setupTextureCoordinates","\xbd","\xbf","\x27","\x74"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("globalToLocal","\xcd","\x4e","\xae","\x6b"),
	HX_HCSTRING("setTexCoords","\x63","\x1d","\xc3","\xc5"),
	HX_HCSTRING("getTexCoords","\xef","\xf9","\xc9","\xb0"),
	HX_HCSTRING("get_frame","\x84","\xd4","\x2c","\x4a"),
	HX_HCSTRING("get_frameWidth","\xe2","\x72","\x7e","\x23"),
	HX_HCSTRING("get_frameHeight","\x8b","\x8b","\x75","\xa1"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_nativeWidth","\x86","\xf0","\x3f","\xf2"),
	HX_HCSTRING("get_nativeHeight","\x67","\xfd","\x01","\xbc"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("get_base","\x9a","\xa3","\xcb","\xc0"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("get_mipMapping","\x23","\x34","\x8c","\xf2"),
	HX_HCSTRING("get_premultipliedAlpha","\x71","\x07","\xf1","\x73"),
	HX_HCSTRING("get_transformationMatrix","\x73","\x82","\x6e","\x89"),
	HX_HCSTRING("get_transformationMatrixToRoot","\x10","\x28","\x5d","\x9a"),
	::String(null()) };

static void Texture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Texture_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Texture_obj::sDefaultOptions,"sDefaultOptions");
	HX_MARK_MEMBER_NAME(Texture_obj::sRectangle,"sRectangle");
	HX_MARK_MEMBER_NAME(Texture_obj::sMatrix,"sMatrix");
	HX_MARK_MEMBER_NAME(Texture_obj::sPoint,"sPoint");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Texture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Texture_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Texture_obj::sDefaultOptions,"sDefaultOptions");
	HX_VISIT_MEMBER_NAME(Texture_obj::sRectangle,"sRectangle");
	HX_VISIT_MEMBER_NAME(Texture_obj::sMatrix,"sMatrix");
	HX_VISIT_MEMBER_NAME(Texture_obj::sPoint,"sPoint");
};

#endif

hx::Class Texture_obj::__mClass;

static ::String Texture_obj_sStaticFields[] = {
	HX_HCSTRING("sDefaultOptions","\x70","\xe4","\x9c","\xa6"),
	HX_HCSTRING("sRectangle","\x3c","\x8d","\xc3","\x1c"),
	HX_HCSTRING("sMatrix","\x14","\x03","\x81","\x9e"),
	HX_HCSTRING("sPoint","\xdd","\xa2","\xc7","\x54"),
	HX_HCSTRING("fromData","\xb4","\x24","\x2f","\xa0"),
	HX_HCSTRING("fromTextureBase","\x42","\x5d","\x2b","\x26"),
	HX_HCSTRING("fromEmbeddedAsset","\x3c","\xfc","\x78","\x36"),
	HX_HCSTRING("fromBitmap","\xf9","\x14","\x50","\x34"),
	HX_HCSTRING("fromBitmapData","\xc3","\x07","\xed","\x2b"),
	HX_HCSTRING("fromAtfData","\x93","\xeb","\x63","\xa3"),
	HX_HCSTRING("fromNetStream","\xf3","\xb9","\x06","\xc6"),
	HX_HCSTRING("fromVideoAttachment","\xf4","\xb1","\xda","\x94"),
	HX_HCSTRING("fromColor","\x99","\x5b","\xe5","\xfe"),
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	HX_HCSTRING("fromTexture","\x91","\x2c","\x21","\x37"),
	HX_HCSTRING("get_maxSize","\x9c","\x59","\x7e","\x52"),
	HX_HCSTRING("get_asyncBitmapUploadEnabled","\x3e","\x4f","\xc5","\x2d"),
	HX_HCSTRING("set_asyncBitmapUploadEnabled","\xb2","\x9a","\xef","\x30"),
	::String(null())
};

void Texture_obj::__register()
{
	hx::Object *dummy = new Texture_obj;
	Texture_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.textures.Texture","\xeb","\xef","\x59","\xcd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Texture_obj::__GetStatic;
	__mClass->mSetStaticField = &Texture_obj::__SetStatic;
	__mClass->mMarkFunc = Texture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Texture_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Texture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Texture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Texture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Texture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Texture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Texture_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_131_boot)
HXDLIN( 131)		sDefaultOptions =  ::starling::textures::TextureOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_132_boot)
HXDLIN( 132)		sRectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_133_boot)
HXDLIN( 133)		sMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1d200748468d00c9_134_boot)
HXDLIN( 134)		sPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace starling
} // end namespace textures
