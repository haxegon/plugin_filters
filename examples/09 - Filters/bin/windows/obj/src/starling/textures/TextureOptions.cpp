// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_textures_TextureOptions
#include <starling/textures/TextureOptions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8a5dc46981d2783b_17_new,"starling.textures.TextureOptions","new",0xca848525,"starling.textures.TextureOptions.new","starling/textures/TextureOptions.hx",17,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_41_clone,"starling.textures.TextureOptions","clone",0x87be4362,"starling.textures.TextureOptions.clone","starling/textures/TextureOptions.hx",41,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_53_get_scale,"starling.textures.TextureOptions","get_scale",0x622c4166,"starling.textures.TextureOptions.get_scale","starling/textures/TextureOptions.hx",53,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_56_set_scale,"starling.textures.TextureOptions","set_scale",0x457d2d72,"starling.textures.TextureOptions.set_scale","starling/textures/TextureOptions.hx",56,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_63_get_format,"starling.textures.TextureOptions","get_format",0x45f59cdb,"starling.textures.TextureOptions.get_format","starling/textures/TextureOptions.hx",63,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_64_set_format,"starling.textures.TextureOptions","set_format",0x49733b4f,"starling.textures.TextureOptions.set_format","starling/textures/TextureOptions.hx",64,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_68_get_mipMapping,"starling.textures.TextureOptions","get_mipMapping",0x27bf5b7e,"starling.textures.TextureOptions.get_mipMapping","starling/textures/TextureOptions.hx",68,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_69_set_mipMapping,"starling.textures.TextureOptions","set_mipMapping",0x47df43f2,"starling.textures.TextureOptions.set_mipMapping","starling/textures/TextureOptions.hx",69,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_73_get_optimizeForRenderToTexture,"starling.textures.TextureOptions","get_optimizeForRenderToTexture",0x6c865142,"starling.textures.TextureOptions.get_optimizeForRenderToTexture","starling/textures/TextureOptions.hx",73,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_74_set_optimizeForRenderToTexture,"starling.textures.TextureOptions","set_optimizeForRenderToTexture",0x477161b6,"starling.textures.TextureOptions.set_optimizeForRenderToTexture","starling/textures/TextureOptions.hx",74,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_81_get_forcePotTexture,"starling.textures.TextureOptions","get_forcePotTexture",0xe96c276d,"starling.textures.TextureOptions.get_forcePotTexture","starling/textures/TextureOptions.hx",81,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_82_set_forcePotTexture,"starling.textures.TextureOptions","set_forcePotTexture",0x26091a79,"starling.textures.TextureOptions.set_forcePotTexture","starling/textures/TextureOptions.hx",82,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_93_get_onReady,"starling.textures.TextureOptions","get_onReady",0x8ebd20a0,"starling.textures.TextureOptions.get_onReady","starling/textures/TextureOptions.hx",93,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_94_set_onReady,"starling.textures.TextureOptions","set_onReady",0x992a27ac,"starling.textures.TextureOptions.set_onReady","starling/textures/TextureOptions.hx",94,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_101_get_premultipliedAlpha,"starling.textures.TextureOptions","get_premultipliedAlpha",0x56f381cc,"starling.textures.TextureOptions.get_premultipliedAlpha","starling/textures/TextureOptions.hx",101,0xbe71d20b)
HX_LOCAL_STACK_FRAME(_hx_pos_8a5dc46981d2783b_102_set_premultipliedAlpha,"starling.textures.TextureOptions","set_premultipliedAlpha",0x8a9efe40,"starling.textures.TextureOptions.set_premultipliedAlpha","starling/textures/TextureOptions.hx",102,0xbe71d20b)
namespace starling{
namespace textures{

void TextureOptions_obj::__construct(hx::Null< Float >  __o_scale,hx::Null< bool >  __o_mipMapping,::String __o_format,hx::Null< bool >  __o_premultipliedAlpha,hx::Null< bool >  __o_forcePotTexture){
Float scale = __o_scale.Default(((Float)1.0));
bool mipMapping = __o_mipMapping.Default(false);
::String format = __o_format.Default(HX_HCSTRING("bgra","\xb4","\x74","\x15","\x41"));
bool premultipliedAlpha = __o_premultipliedAlpha.Default(true);
bool forcePotTexture = __o_forcePotTexture.Default(false);
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_17_new)
HXLINE(  25)		this->_onReady = null();
HXLINE(  22)		this->_optimizeForRenderToTexture = false;
HXLINE(  32)		this->_scale = scale;
HXLINE(  33)		this->_format = format;
HXLINE(  34)		this->_mipMapping = mipMapping;
HXLINE(  35)		this->_forcePotTexture = forcePotTexture;
HXLINE(  36)		this->_premultipliedAlpha = premultipliedAlpha;
            	}

Dynamic TextureOptions_obj::__CreateEmpty() { return new TextureOptions_obj; }

void *TextureOptions_obj::_hx_vtable = 0;

Dynamic TextureOptions_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextureOptions_obj > _hx_result = new TextureOptions_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool TextureOptions_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11bacb63;
}

 ::starling::textures::TextureOptions TextureOptions_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_8a5dc46981d2783b_41_clone)
HXLINE(  42)		 ::starling::textures::TextureOptions clone =  ::starling::textures::TextureOptions_obj::__alloc( HX_CTX ,this->_scale,this->_mipMapping,this->_format,null(),null());
HXLINE(  43)		clone->_optimizeForRenderToTexture = this->_optimizeForRenderToTexture;
HXLINE(  44)		clone->_premultipliedAlpha = this->_premultipliedAlpha;
HXLINE(  45)		clone->_forcePotTexture = this->_forcePotTexture;
HXLINE(  46)		clone->_onReady = this->_onReady;
HXLINE(  47)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureOptions_obj,clone,return )

Float TextureOptions_obj::get_scale(){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_53_get_scale)
HXDLIN(  53)		return this->_scale;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureOptions_obj,get_scale,return )

Float TextureOptions_obj::set_scale(Float value){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_56_set_scale)
HXDLIN(  56)		Float _hx_tmp;
HXDLIN(  56)		if ((value > (int)0)) {
HXDLIN(  56)			_hx_tmp = value;
            		}
            		else {
HXDLIN(  56)			_hx_tmp = ::starling::core::Starling_obj::get_current()->get_contentScaleFactor();
            		}
HXDLIN(  56)		return (this->_scale = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureOptions_obj,set_scale,return )

::String TextureOptions_obj::get_format(){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_63_get_format)
HXDLIN(  63)		return this->_format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureOptions_obj,get_format,return )

::String TextureOptions_obj::set_format(::String value){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_64_set_format)
HXDLIN(  64)		return (this->_format = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureOptions_obj,set_format,return )

bool TextureOptions_obj::get_mipMapping(){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_68_get_mipMapping)
HXDLIN(  68)		return this->_mipMapping;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureOptions_obj,get_mipMapping,return )

bool TextureOptions_obj::set_mipMapping(bool value){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_69_set_mipMapping)
HXDLIN(  69)		return (this->_mipMapping = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureOptions_obj,set_mipMapping,return )

bool TextureOptions_obj::get_optimizeForRenderToTexture(){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_73_get_optimizeForRenderToTexture)
HXDLIN(  73)		return this->_optimizeForRenderToTexture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureOptions_obj,get_optimizeForRenderToTexture,return )

bool TextureOptions_obj::set_optimizeForRenderToTexture(bool value){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_74_set_optimizeForRenderToTexture)
HXDLIN(  74)		return (this->_optimizeForRenderToTexture = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureOptions_obj,set_optimizeForRenderToTexture,return )

bool TextureOptions_obj::get_forcePotTexture(){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_81_get_forcePotTexture)
HXDLIN(  81)		return this->_forcePotTexture;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureOptions_obj,get_forcePotTexture,return )

bool TextureOptions_obj::set_forcePotTexture(bool value){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_82_set_forcePotTexture)
HXDLIN(  82)		return (this->_forcePotTexture = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureOptions_obj,set_forcePotTexture,return )

 ::Dynamic TextureOptions_obj::get_onReady(){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_93_get_onReady)
HXDLIN(  93)		return this->_onReady;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureOptions_obj,get_onReady,return )

 ::Dynamic TextureOptions_obj::set_onReady( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_94_set_onReady)
HXDLIN(  94)		return (this->_onReady = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureOptions_obj,set_onReady,return )

bool TextureOptions_obj::get_premultipliedAlpha(){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_101_get_premultipliedAlpha)
HXDLIN( 101)		return this->_premultipliedAlpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureOptions_obj,get_premultipliedAlpha,return )

bool TextureOptions_obj::set_premultipliedAlpha(bool value){
            	HX_STACKFRAME(&_hx_pos_8a5dc46981d2783b_102_set_premultipliedAlpha)
HXDLIN( 102)		return (this->_premultipliedAlpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureOptions_obj,set_premultipliedAlpha,return )


hx::ObjectPtr< TextureOptions_obj > TextureOptions_obj::__new(hx::Null< Float >  __o_scale,hx::Null< bool >  __o_mipMapping,::String __o_format,hx::Null< bool >  __o_premultipliedAlpha,hx::Null< bool >  __o_forcePotTexture) {
	hx::ObjectPtr< TextureOptions_obj > __this = new TextureOptions_obj();
	__this->__construct(__o_scale,__o_mipMapping,__o_format,__o_premultipliedAlpha,__o_forcePotTexture);
	return __this;
}

hx::ObjectPtr< TextureOptions_obj > TextureOptions_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_scale,hx::Null< bool >  __o_mipMapping,::String __o_format,hx::Null< bool >  __o_premultipliedAlpha,hx::Null< bool >  __o_forcePotTexture) {
	TextureOptions_obj *__this = (TextureOptions_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextureOptions_obj), true, "starling.textures.TextureOptions"));
	*(void **)__this = TextureOptions_obj::_hx_vtable;
	__this->__construct(__o_scale,__o_mipMapping,__o_format,__o_premultipliedAlpha,__o_forcePotTexture);
	return __this;
}

TextureOptions_obj::TextureOptions_obj()
{
}

void TextureOptions_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextureOptions);
	HX_MARK_MEMBER_NAME(_scale,"_scale");
	HX_MARK_MEMBER_NAME(_format,"_format");
	HX_MARK_MEMBER_NAME(_mipMapping,"_mipMapping");
	HX_MARK_MEMBER_NAME(_optimizeForRenderToTexture,"_optimizeForRenderToTexture");
	HX_MARK_MEMBER_NAME(_premultipliedAlpha,"_premultipliedAlpha");
	HX_MARK_MEMBER_NAME(_forcePotTexture,"_forcePotTexture");
	HX_MARK_MEMBER_NAME(_onReady,"_onReady");
	HX_MARK_END_CLASS();
}

void TextureOptions_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_scale,"_scale");
	HX_VISIT_MEMBER_NAME(_format,"_format");
	HX_VISIT_MEMBER_NAME(_mipMapping,"_mipMapping");
	HX_VISIT_MEMBER_NAME(_optimizeForRenderToTexture,"_optimizeForRenderToTexture");
	HX_VISIT_MEMBER_NAME(_premultipliedAlpha,"_premultipliedAlpha");
	HX_VISIT_MEMBER_NAME(_forcePotTexture,"_forcePotTexture");
	HX_VISIT_MEMBER_NAME(_onReady,"_onReady");
}

hx::Val TextureOptions_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scale() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_scale") ) { return hx::Val( _scale ); }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_format() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { return hx::Val( _format ); }
		if (HX_FIELD_EQ(inName,"onReady") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onReady() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_onReady") ) { return hx::Val( _onReady ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_format") ) { return hx::Val( get_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_format") ) { return hx::Val( set_format_dyn() ); }
		if (HX_FIELD_EQ(inName,"mipMapping") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mipMapping() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_mipMapping") ) { return hx::Val( _mipMapping ); }
		if (HX_FIELD_EQ(inName,"get_onReady") ) { return hx::Val( get_onReady_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onReady") ) { return hx::Val( set_onReady_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_mipMapping") ) { return hx::Val( get_mipMapping_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mipMapping") ) { return hx::Val( set_mipMapping_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"forcePotTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_forcePotTexture() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_forcePotTexture") ) { return hx::Val( _forcePotTexture ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_premultipliedAlpha() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_premultipliedAlpha") ) { return hx::Val( _premultipliedAlpha ); }
		if (HX_FIELD_EQ(inName,"get_forcePotTexture") ) { return hx::Val( get_forcePotTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_forcePotTexture") ) { return hx::Val( set_forcePotTexture_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_premultipliedAlpha") ) { return hx::Val( get_premultipliedAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_premultipliedAlpha") ) { return hx::Val( set_premultipliedAlpha_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"optimizeForRenderToTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_optimizeForRenderToTexture() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_optimizeForRenderToTexture") ) { return hx::Val( _optimizeForRenderToTexture ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"get_optimizeForRenderToTexture") ) { return hx::Val( get_optimizeForRenderToTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_optimizeForRenderToTexture") ) { return hx::Val( set_optimizeForRenderToTexture_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextureOptions_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_scale") ) { _scale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_format(inValue.Cast< ::String >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { _format=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onReady") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onReady(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_onReady") ) { _onReady=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mipMapping") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mipMapping(inValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_mipMapping") ) { _mipMapping=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"forcePotTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_forcePotTexture(inValue.Cast< bool >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_forcePotTexture") ) { _forcePotTexture=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"premultipliedAlpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_premultipliedAlpha(inValue.Cast< bool >()) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_premultipliedAlpha") ) { _premultipliedAlpha=inValue.Cast< bool >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"optimizeForRenderToTexture") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_optimizeForRenderToTexture(inValue.Cast< bool >()) ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_optimizeForRenderToTexture") ) { _optimizeForRenderToTexture=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextureOptions_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"));
	outFields->push(HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"));
	outFields->push(HX_HCSTRING("_mipMapping","\xf9","\x78","\x20","\x4f"));
	outFields->push(HX_HCSTRING("_optimizeForRenderToTexture","\xbd","\x54","\xd7","\xaf"));
	outFields->push(HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa"));
	outFields->push(HX_HCSTRING("_forcePotTexture","\x12","\x4c","\xc7","\xe9"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("mipMapping","\xda","\xab","\x96","\x7c"));
	outFields->push(HX_HCSTRING("optimizeForRenderToTexture","\x9e","\x19","\x9d","\x60"));
	outFields->push(HX_HCSTRING("forcePotTexture","\x91","\x09","\xe8","\xfe"));
	outFields->push(HX_HCSTRING("premultipliedAlpha","\x28","\x8e","\x5c","\x1a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextureOptions_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(TextureOptions_obj,_scale),HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74")},
	{hx::fsString,(int)offsetof(TextureOptions_obj,_format),HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c")},
	{hx::fsBool,(int)offsetof(TextureOptions_obj,_mipMapping),HX_HCSTRING("_mipMapping","\xf9","\x78","\x20","\x4f")},
	{hx::fsBool,(int)offsetof(TextureOptions_obj,_optimizeForRenderToTexture),HX_HCSTRING("_optimizeForRenderToTexture","\xbd","\x54","\xd7","\xaf")},
	{hx::fsBool,(int)offsetof(TextureOptions_obj,_premultipliedAlpha),HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa")},
	{hx::fsBool,(int)offsetof(TextureOptions_obj,_forcePotTexture),HX_HCSTRING("_forcePotTexture","\x12","\x4c","\xc7","\xe9")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextureOptions_obj,_onReady),HX_HCSTRING("_onReady","\x45","\x98","\xb0","\xb6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextureOptions_obj_sStaticStorageInfo = 0;
#endif

static ::String TextureOptions_obj_sMemberFields[] = {
	HX_HCSTRING("_scale","\xcb","\x15","\xb6","\x74"),
	HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"),
	HX_HCSTRING("_mipMapping","\xf9","\x78","\x20","\x4f"),
	HX_HCSTRING("_optimizeForRenderToTexture","\xbd","\x54","\xd7","\xaf"),
	HX_HCSTRING("_premultipliedAlpha","\x47","\x12","\x37","\xfa"),
	HX_HCSTRING("_forcePotTexture","\x12","\x4c","\xc7","\xe9"),
	HX_HCSTRING("_onReady","\x45","\x98","\xb0","\xb6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	HX_HCSTRING("get_format","\x00","\xff","\x15","\xee"),
	HX_HCSTRING("set_format","\x74","\x9d","\x93","\xf1"),
	HX_HCSTRING("get_mipMapping","\x23","\x34","\x8c","\xf2"),
	HX_HCSTRING("set_mipMapping","\x97","\x1c","\xac","\x12"),
	HX_HCSTRING("get_optimizeForRenderToTexture","\xe7","\x83","\xa9","\xaf"),
	HX_HCSTRING("set_optimizeForRenderToTexture","\x5b","\x94","\x94","\x8a"),
	HX_HCSTRING("get_forcePotTexture","\xa8","\xd8","\xf2","\x89"),
	HX_HCSTRING("set_forcePotTexture","\xb4","\xcb","\x8f","\xc6"),
	HX_HCSTRING("get_onReady","\xdb","\x9e","\xf2","\x02"),
	HX_HCSTRING("set_onReady","\xe7","\xa5","\x5f","\x0d"),
	HX_HCSTRING("get_premultipliedAlpha","\x71","\x07","\xf1","\x73"),
	HX_HCSTRING("set_premultipliedAlpha","\xe5","\x83","\x9c","\xa7"),
	::String(null()) };

static void TextureOptions_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextureOptions_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextureOptions_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextureOptions_obj::__mClass,"__mClass");
};

#endif

hx::Class TextureOptions_obj::__mClass;

void TextureOptions_obj::__register()
{
	hx::Object *dummy = new TextureOptions_obj;
	TextureOptions_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.textures.TextureOptions","\xb3","\x0e","\xf0","\xc6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextureOptions_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextureOptions_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextureOptions_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextureOptions_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureOptions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureOptions_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace textures
