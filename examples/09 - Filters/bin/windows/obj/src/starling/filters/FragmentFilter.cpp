// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_filters_FilterHelper
#include <starling/filters/FilterHelper.h>
#endif
#ifndef INCLUDED_starling_filters_FilterQuad
#include <starling/filters/FilterQuad.h>
#endif
#ifndef INCLUDED_starling_filters_FragmentFilter
#include <starling/filters/FragmentFilter.h>
#endif
#ifndef INCLUDED_starling_filters_IFilterHelper
#include <starling/filters/IFilterHelper.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_rendering_Effect
#include <starling/rendering/Effect.h>
#endif
#ifndef INCLUDED_starling_rendering_FilterEffect
#include <starling/rendering/FilterEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_IndexData
#include <starling/rendering/IndexData.h>
#endif
#ifndef INCLUDED_starling_rendering_Painter
#include <starling/rendering/Painter.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexData
#include <starling/rendering/VertexData.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataFormat
#include <starling/rendering/VertexDataFormat.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif
#ifndef INCLUDED_starling_utils_Padding
#include <starling/utils/Padding.h>
#endif
#ifndef INCLUDED_starling_utils_Pool
#include <starling/utils/Pool.h>
#endif
#ifndef INCLUDED_starling_utils_RectangleUtil
#include <starling/utils/RectangleUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_124_new,"starling.filters.FragmentFilter","new",0x56aa1573,"starling.filters.FragmentFilter.new","starling/filters/FragmentFilter.hx",124,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_138_dispose,"starling.filters.FragmentFilter","dispose",0x8b464b32,"starling.filters.FragmentFilter.dispose","starling/filters/FragmentFilter.hx",138,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_151_onContextCreated,"starling.filters.FragmentFilter","onContextCreated",0xd73f4c45,"starling.filters.FragmentFilter.onContextCreated","starling/filters/FragmentFilter.hx",151,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_158_render,"starling.filters.FragmentFilter","render",0x70db5423,"starling.filters.FragmentFilter.render","starling/filters/FragmentFilter.hx",158,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_177_renderPasses,"starling.filters.FragmentFilter","renderPasses",0xe447d802,"starling.filters.FragmentFilter.renderPasses","starling/filters/FragmentFilter.hx",177,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_309_process,"starling.filters.FragmentFilter","process",0xc1446d02,"starling.filters.FragmentFilter.process","starling/filters/FragmentFilter.hx",309,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_357_createEffect,"starling.filters.FragmentFilter","createEffect",0x09b89b3a,"starling.filters.FragmentFilter.createEffect","starling/filters/FragmentFilter.hx",357,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_373_cache,"starling.filters.FragmentFilter","cache",0x8d548a15,"starling.filters.FragmentFilter.cache","starling/filters/FragmentFilter.hx",373,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_381_clearCache,"starling.filters.FragmentFilter","clearCache",0xae09acc2,"starling.filters.FragmentFilter.clearCache","starling/filters/FragmentFilter.hx",381,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_390_addEventListener,"starling.filters.FragmentFilter","addEventListener",0x07a3d6da,"starling.filters.FragmentFilter.addEventListener","starling/filters/FragmentFilter.hx",390,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_399_removeEventListener,"starling.filters.FragmentFilter","removeEventListener",0xa77e62dd,"starling.filters.FragmentFilter.removeEventListener","starling/filters/FragmentFilter.hx",399,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_408_onEnterFrame,"starling.filters.FragmentFilter","onEnterFrame",0x6153a681,"starling.filters.FragmentFilter.onEnterFrame","starling/filters/FragmentFilter.hx",408,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_416_get_effect,"starling.filters.FragmentFilter","get_effect",0xe9159da7,"starling.filters.FragmentFilter.get_effect","starling/filters/FragmentFilter.hx",416,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_425_get_vertexData,"starling.filters.FragmentFilter","get_vertexData",0x004065c4,"starling.filters.FragmentFilter.get_vertexData","starling/filters/FragmentFilter.hx",425,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_434_get_indexData,"starling.filters.FragmentFilter","get_indexData",0x21155d06,"starling.filters.FragmentFilter.get_indexData","starling/filters/FragmentFilter.hx",434,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_447_setRequiresRedraw,"starling.filters.FragmentFilter","setRequiresRedraw",0x58fe18da,"starling.filters.FragmentFilter.setRequiresRedraw","starling/filters/FragmentFilter.hx",447,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_458_get_numPasses,"starling.filters.FragmentFilter","get_numPasses",0xc1d76d0f,"starling.filters.FragmentFilter.get_numPasses","starling/filters/FragmentFilter.hx",458,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_464_onTargetAssigned,"starling.filters.FragmentFilter","onTargetAssigned",0x4309894b,"starling.filters.FragmentFilter.onTargetAssigned","starling/filters/FragmentFilter.hx",464,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_470_get_padding,"starling.filters.FragmentFilter","get_padding",0xac05c9fb,"starling.filters.FragmentFilter.get_padding","starling/filters/FragmentFilter.hx",470,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_481_set_padding,"starling.filters.FragmentFilter","set_padding",0xb672d107,"starling.filters.FragmentFilter.set_padding","starling/filters/FragmentFilter.hx",481,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_488_get_isCached,"starling.filters.FragmentFilter","get_isCached",0x4535b002,"starling.filters.FragmentFilter.get_isCached","starling/filters/FragmentFilter.hx",488,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_496_get_resolution,"starling.filters.FragmentFilter","get_resolution",0x9a69bb42,"starling.filters.FragmentFilter.get_resolution","starling/filters/FragmentFilter.hx",496,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_498_set_resolution,"starling.filters.FragmentFilter","set_resolution",0xba89a3b6,"starling.filters.FragmentFilter.set_resolution","starling/filters/FragmentFilter.hx",498,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_511_get_antiAliasing,"starling.filters.FragmentFilter","get_antiAliasing",0x3d438aaa,"starling.filters.FragmentFilter.get_antiAliasing","starling/filters/FragmentFilter.hx",511,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_513_set_antiAliasing,"starling.filters.FragmentFilter","set_antiAliasing",0x9385781e,"starling.filters.FragmentFilter.set_antiAliasing","starling/filters/FragmentFilter.hx",513,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_524_get_textureSmoothing,"starling.filters.FragmentFilter","get_textureSmoothing",0xfe50b3af,"starling.filters.FragmentFilter.get_textureSmoothing","starling/filters/FragmentFilter.hx",524,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_526_set_textureSmoothing,"starling.filters.FragmentFilter","set_textureSmoothing",0xcb086b23,"starling.filters.FragmentFilter.set_textureSmoothing","starling/filters/FragmentFilter.hx",526,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_538_get_textureFormat,"starling.filters.FragmentFilter","get_textureFormat",0xf8a84e1c,"starling.filters.FragmentFilter.get_textureFormat","starling/filters/FragmentFilter.hx",538,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_540_set_textureFormat,"starling.filters.FragmentFilter","set_textureFormat",0x1c162628,"starling.filters.FragmentFilter.set_textureFormat","starling/filters/FragmentFilter.hx",540,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_564_get_alwaysDrawToBackBuffer,"starling.filters.FragmentFilter","get_alwaysDrawToBackBuffer",0xe4e54a0b,"starling.filters.FragmentFilter.get_alwaysDrawToBackBuffer","starling/filters/FragmentFilter.hx",564,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_567_set_alwaysDrawToBackBuffer,"starling.filters.FragmentFilter","set_alwaysDrawToBackBuffer",0x447a107f,"starling.filters.FragmentFilter.set_alwaysDrawToBackBuffer","starling/filters/FragmentFilter.hx",567,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_575_setTarget,"starling.filters.FragmentFilter","setTarget",0x00843de6,"starling.filters.FragmentFilter.setTarget","starling/filters/FragmentFilter.hx",575,0xbd90ee1b)
HX_LOCAL_STACK_FRAME(_hx_pos_d64ef33fd5f4b64c_119_boot,"starling.filters.FragmentFilter","boot",0x7641afbf,"starling.filters.FragmentFilter.boot","starling/filters/FragmentFilter.hx",119,0xbd90ee1b)
namespace starling{
namespace filters{

void FragmentFilter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_124_new)
HXLINE( 125)		super::__construct();
HXLINE( 127)		this->_resolution = ((Float)1.0);
HXLINE( 128)		this->_textureFormat = ::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString((int)1);
HXLINE( 129)		this->_textureSmoothing = HX_("bilinear",ec,b6,3d,e0);
HXLINE( 132)		::starling::core::Starling_obj::get_current()->get_stage3D()->addEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextCreated_dyn(),false,(int)0,true);
            	}

Dynamic FragmentFilter_obj::__CreateEmpty() { return new FragmentFilter_obj; }

void *FragmentFilter_obj::_hx_vtable = 0;

Dynamic FragmentFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FragmentFilter_obj > _hx_result = new FragmentFilter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FragmentFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
	} else {
		return inClassId==(int)0x685ebdbb;
	}
}

void FragmentFilter_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_138_dispose)
HXLINE( 139)		::starling::core::Starling_obj::get_current()->get_stage3D()->removeEventListener(HX_("context3DCreate",7c,bf,59,7b),this->onContextCreated_dyn(),null());
HXLINE( 141)		if (hx::IsNotNull( this->_helper )) {
HXLINE( 141)			this->_helper->dispose();
            		}
HXLINE( 142)		if (hx::IsNotNull( this->_effect )) {
HXLINE( 142)			this->_effect->dispose();
            		}
HXLINE( 143)		if (hx::IsNotNull( this->_quad )) {
HXLINE( 143)			this->_quad->dispose();
            		}
HXLINE( 145)		this->_effect = null();
HXLINE( 146)		this->_quad = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,dispose,(void))

void FragmentFilter_obj::onContextCreated( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_151_onContextCreated)
HXDLIN( 151)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,onContextCreated,(void))

void FragmentFilter_obj::render( ::starling::rendering::Painter painter){
            	HX_GC_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_158_render)
HXLINE( 159)		if (hx::IsNull( this->_target )) {
HXLINE( 160)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,HX_("Cannot render filter without target",64,de,3e,0b)));
            		}
HXLINE( 162)		if (this->_target->get_is3D()) {
HXLINE( 163)			this->_cached = (this->_cacheRequested = false);
            		}
HXLINE( 165)		bool _hx_tmp;
HXDLIN( 165)		if (!(!(this->_cached))) {
HXLINE( 165)			_hx_tmp = this->_cacheRequested;
            		}
            		else {
HXLINE( 165)			_hx_tmp = true;
            		}
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 167)			this->renderPasses(painter,this->_cacheRequested);
HXLINE( 168)			this->_cacheRequested = false;
            		}
            		else {
HXLINE( 170)			if (this->_quad->get_visible()) {
HXLINE( 172)				this->_quad->render(painter);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,render,(void))

void FragmentFilter_obj::renderPasses( ::starling::rendering::Painter painter,bool forCache){
            	HX_GC_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_177_renderPasses)
HXLINE( 178)		if (hx::IsNull( this->_helper )) {
HXLINE( 178)			this->_helper =  ::starling::filters::FilterHelper_obj::__alloc( HX_CTX ,this->_textureFormat);
            		}
HXLINE( 179)		if (hx::IsNull( this->_quad )) {
HXLINE( 179)			this->_quad =  ::starling::filters::FilterQuad_obj::__alloc( HX_CTX ,this->_textureSmoothing);
            		}
            		else {
HXLINE( 180)			 ::starling::filters::FilterHelper _hx_tmp = this->_helper;
HXDLIN( 180)			_hx_tmp->putTexture(this->_quad->get_texture());
HXDLIN( 180)			this->_quad->set_texture(null());
            		}
HXLINE( 182)		 ::openfl::geom::Rectangle bounds = ::starling::utils::Pool_obj::getRectangle(null(),null(),null(),null());
HXLINE( 183)		bool drawLastPassToBackBuffer = false;
HXLINE( 184)		Float origResolution = this->_resolution;
HXLINE( 185)		 ::starling::display::DisplayObject renderSpace;
HXDLIN( 185)		if (hx::IsNotNull( this->_target->get_stage() )) {
HXLINE( 185)			renderSpace = this->_target->get_stage();
            		}
            		else {
HXLINE( 185)			renderSpace = this->_target->get_parent();
            		}
HXLINE( 186)		bool isOnStage = ::Std_obj::is(renderSpace,hx::ClassOf< ::starling::display::Stage >());
HXLINE( 187)		 ::starling::display::Stage stage = ::starling::core::Starling_obj::get_current()->get_stage();
HXLINE( 188)		 ::openfl::geom::Rectangle stageBounds;
HXLINE( 190)		bool _hx_tmp1;
HXDLIN( 190)		if (!(forCache)) {
HXLINE( 190)			if (!(this->_alwaysDrawToBackBuffer)) {
HXLINE( 190)				_hx_tmp1 = this->_target->get_requiresRedraw();
            			}
            			else {
HXLINE( 190)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 190)			_hx_tmp1 = false;
            		}
HXDLIN( 190)		if (_hx_tmp1) {
HXLINE( 199)			drawLastPassToBackBuffer = (painter->get_state()->get_alpha() == ((Float)1.0));
HXLINE( 200)			painter->excludeFromCache(this->_target);
            		}
HXLINE( 203)		 ::starling::display::DisplayObject _hx_tmp2 = this->_target;
HXDLIN( 203)		if (hx::IsEq( _hx_tmp2,::starling::core::Starling_obj::get_current()->get_root() )) {
HXLINE( 206)			stage->getStageBounds(this->_target,bounds);
            		}
            		else {
HXLINE( 215)			this->_target->getBounds(renderSpace,bounds);
HXLINE( 217)			bool _hx_tmp3;
HXDLIN( 217)			if (!(forCache)) {
HXLINE( 217)				_hx_tmp3 = isOnStage;
            			}
            			else {
HXLINE( 217)				_hx_tmp3 = false;
            			}
HXDLIN( 217)			if (_hx_tmp3) {
HXLINE( 219)				stageBounds = stage->getStageBounds(null(),::starling::utils::Pool_obj::getRectangle(null(),null(),null(),null()));
HXLINE( 220)				::starling::utils::RectangleUtil_obj::intersect(bounds,stageBounds,bounds);
HXLINE( 221)				::starling::utils::Pool_obj::putRectangle(stageBounds);
            			}
            		}
HXLINE( 225)		 ::starling::filters::FilterQuad _hx_tmp4 = this->_quad;
HXDLIN( 225)		_hx_tmp4->set_visible(!(bounds->isEmpty()));
HXLINE( 226)		if (!(this->_quad->get_visible())) {
HXLINE( 226)			::starling::utils::Pool_obj::putRectangle(bounds);
HXDLIN( 226)			return;
            		}
HXLINE( 228)		if (hx::IsNotNull( this->_padding )) {
HXLINE( 229)			Float _hx_tmp5 = this->_padding->get_left();
HXDLIN( 229)			Float _hx_tmp6 = this->_padding->get_right();
HXDLIN( 229)			Float _hx_tmp7 = this->_padding->get_top();
HXLINE( 228)			::starling::utils::RectangleUtil_obj::extend(bounds,_hx_tmp5,_hx_tmp6,_hx_tmp7,this->_padding->get_bottom());
            		}
HXLINE( 232)		::starling::utils::RectangleUtil_obj::extendToWholePixels(bounds,::starling::core::Starling_obj::get_current()->get_contentScaleFactor());
HXLINE( 234)		 ::starling::filters::FilterHelper _hx_tmp8 = this->_helper;
HXDLIN( 234)		Float _hx_tmp9 = ::starling::core::Starling_obj::get_current()->get_contentScaleFactor();
HXDLIN( 234)		_hx_tmp8->set_textureScale((_hx_tmp9 * this->_resolution));
HXLINE( 235)		 ::starling::filters::FilterHelper _hx_tmp10 = this->_helper;
HXDLIN( 235)		_hx_tmp10->set_projectionMatrix3D(painter->get_state()->get_projectionMatrix3D());
HXLINE( 236)		 ::starling::filters::FilterHelper _hx_tmp11 = this->_helper;
HXDLIN( 236)		_hx_tmp11->set_renderTarget(painter->get_state()->get_renderTarget());
HXLINE( 237)		 ::starling::filters::FilterHelper _hx_tmp12 = this->_helper;
HXDLIN( 237)		_hx_tmp12->set_clipRect(painter->get_state()->get_clipRect());
HXLINE( 238)		this->_helper->set_targetBounds(bounds);
HXLINE( 239)		this->_helper->set_target(this->_target);
HXLINE( 240)		 ::starling::filters::FilterHelper _hx_tmp13 = this->_helper;
HXDLIN( 240)		_hx_tmp13->start(this->get_numPasses(),drawLastPassToBackBuffer);
HXLINE( 242)		this->_quad->setBounds(bounds);
HXLINE( 243)		this->_resolution = ((Float)1.0);
HXLINE( 246)		bool wasCacheEnabled = painter->get_cacheEnabled();
HXLINE( 247)		 ::starling::textures::Texture input = this->_helper->getTexture(null());
HXLINE( 248)		 ::starling::textures::Texture output;
HXLINE( 250)		painter->set_cacheEnabled(false);
HXLINE( 251)		painter->pushState(null());
HXLINE( 252)		painter->get_state()->set_alpha(((Float)1.0));
HXLINE( 253)		painter->get_state()->set_clipRect(null());
HXLINE( 254)		painter->get_state()->setRenderTarget(input,true,this->_antiAliasing);
HXLINE( 255)		 ::starling::rendering::RenderState _hx_tmp14 = painter->get_state();
HXDLIN( 255)		Float bounds1 = bounds->x;
HXDLIN( 255)		Float bounds2 = bounds->y;
HXLINE( 256)		Float _hx_tmp15 = input->get_root()->get_width();
HXDLIN( 256)		Float _hx_tmp16 = input->get_root()->get_height();
HXLINE( 257)		int _hx_tmp17 = stage->get_stageWidth();
HXDLIN( 257)		int _hx_tmp18 = stage->get_stageHeight();
HXLINE( 255)		_hx_tmp14->setProjectionMatrix(bounds1,bounds2,_hx_tmp15,_hx_tmp16,_hx_tmp17,_hx_tmp18,stage->get_cameraPosition());
HXLINE( 259)		this->_target->render(painter);
HXLINE( 261)		painter->finishMeshBatch();
HXLINE( 262)		painter->get_state()->setModelviewMatricesToIdentity();
HXLINE( 264)		output = this->process(painter,this->_helper,input,null(),null(),null());
HXLINE( 266)		painter->popState(null());
HXLINE( 267)		painter->set_cacheEnabled(wasCacheEnabled);
HXLINE( 269)		if (hx::IsNotNull( output )) {
HXLINE( 271)			painter->pushState(null());
HXLINE( 273)			if (this->_target->get_is3D()) {
HXLINE( 273)				painter->get_state()->setModelviewMatricesToIdentity();
            			}
            			else {
HXLINE( 274)				this->_quad->moveVertices(renderSpace,this->_target);
            			}
HXLINE( 276)			this->_quad->set_texture(output);
HXLINE( 277)			this->_quad->render(painter);
HXLINE( 279)			painter->finishMeshBatch();
HXLINE( 280)			painter->popState(null());
            		}
HXLINE( 283)		this->_helper->set_target(null());
HXLINE( 284)		this->_helper->putTexture(input);
HXLINE( 285)		this->_resolution = origResolution;
HXLINE( 286)		::starling::utils::Pool_obj::putRectangle(bounds);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FragmentFilter_obj,renderPasses,(void))

 ::starling::textures::Texture FragmentFilter_obj::process( ::starling::rendering::Painter painter,::Dynamic helper, ::starling::textures::Texture input0, ::starling::textures::Texture input1, ::starling::textures::Texture input2, ::starling::textures::Texture input3){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_309_process)
HXLINE( 310)		 ::starling::rendering::FilterEffect effect = this->get_effect();
HXLINE( 311)		 ::starling::textures::Texture output = ::starling::filters::IFilterHelper_obj::getTexture(helper,this->_resolution);
HXLINE( 312)		 ::openfl::geom::Matrix3D projectionMatrix;
HXLINE( 313)		 ::openfl::geom::Rectangle bounds = null();
HXLINE( 314)		 ::starling::textures::Texture renderTarget;
HXLINE( 316)		if (hx::IsNotNull( output )) {
HXLINE( 318)			renderTarget = output;
HXLINE( 320)			Float projectionMatrix1 = output->get_root()->get_width();
HXDLIN( 320)			Float projectionMatrix2 = ((Float)projectionMatrix1 / (Float)this->_resolution);
HXDLIN( 320)			Float projectionMatrix3 = output->get_root()->get_height();
HXLINE( 319)			projectionMatrix = ::starling::utils::MatrixUtil_obj::createPerspectiveProjectionMatrix((int)0,(int)0,projectionMatrix2,((Float)projectionMatrix3 / (Float)this->_resolution),(int)0,(int)0,null(),::starling::filters::FragmentFilter_obj::sMatrix3D);
            		}
            		else {
HXLINE( 325)			bounds = ::starling::filters::IFilterHelper_obj::get_targetBounds(helper);
HXLINE( 326)			renderTarget = hx::TCast<  ::starling::filters::FilterHelper >::cast(helper)->get_renderTarget();
HXLINE( 327)			projectionMatrix = hx::TCast<  ::starling::filters::FilterHelper >::cast(helper)->get_projectionMatrix3D();
HXLINE( 328)			effect->set_textureSmoothing(this->_textureSmoothing);
HXLINE( 331)			 ::starling::rendering::RenderState _hx_tmp = painter->get_state();
HXDLIN( 331)			_hx_tmp->set_clipRect(hx::TCast<  ::starling::filters::FilterHelper >::cast(helper)->get_clipRect());
HXLINE( 332)			painter->get_state()->get_projectionMatrix3D()->copyFrom(projectionMatrix);
            		}
HXLINE( 335)		painter->get_state()->set_renderTarget(renderTarget);
HXLINE( 336)		painter->prepareToDraw();
HXLINE( 337)		{
HXLINE( 337)			 ::starling::rendering::Painter _g = painter;
HXDLIN( 337)			_g->set_drawCount((_g->get_drawCount() + (int)1));
            		}
HXLINE( 339)		input0->setupVertexPositions(this->get_vertexData(),(int)0,HX_("position",a9,a0,fa,ca),bounds);
HXLINE( 340)		input0->setupTextureCoordinates(this->get_vertexData(),null(),null());
HXLINE( 342)		effect->set_texture(input0);
HXLINE( 343)		effect->set_mvpMatrix3D(projectionMatrix);
HXLINE( 344)		effect->uploadVertexData(this->get_vertexData(),null());
HXLINE( 345)		effect->uploadIndexData(this->get_indexData(),null());
HXLINE( 346)		effect->render((int)0,this->get_indexData()->get_numTriangles());
HXLINE( 348)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC6(FragmentFilter_obj,process,return )

 ::starling::rendering::FilterEffect FragmentFilter_obj::createEffect(){
            	HX_GC_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_357_createEffect)
HXDLIN( 357)		return  ::starling::rendering::FilterEffect_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,createEffect,return )

void FragmentFilter_obj::cache(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_373_cache)
HXLINE( 374)		this->_cached = (this->_cacheRequested = true);
HXLINE( 375)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,cache,(void))

void FragmentFilter_obj::clearCache(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_381_clearCache)
HXLINE( 382)		this->_cached = (this->_cacheRequested = false);
HXLINE( 383)		this->setRequiresRedraw();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,clearCache,(void))

void FragmentFilter_obj::addEventListener(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_390_addEventListener)
HXLINE( 391)		bool _hx_tmp;
HXDLIN( 391)		if ((type == HX_("enterFrame",f5,03,50,02))) {
HXLINE( 391)			_hx_tmp = hx::IsNotNull( this->_target );
            		}
            		else {
HXLINE( 391)			_hx_tmp = false;
            		}
HXDLIN( 391)		if (_hx_tmp) {
HXLINE( 392)			this->_target->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
            		}
HXLINE( 394)		this->super::addEventListener(type,listener);
            	}


void FragmentFilter_obj::removeEventListener(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_399_removeEventListener)
HXLINE( 400)		bool _hx_tmp;
HXDLIN( 400)		if ((type == HX_("enterFrame",f5,03,50,02))) {
HXLINE( 400)			_hx_tmp = hx::IsNotNull( this->_target );
            		}
            		else {
HXLINE( 400)			_hx_tmp = false;
            		}
HXDLIN( 400)		if (_hx_tmp) {
HXLINE( 401)			this->_target->removeEventListener(type,this->onEnterFrame_dyn());
            		}
HXLINE( 403)		this->super::removeEventListener(type,listener);
            	}


void FragmentFilter_obj::onEnterFrame( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_408_onEnterFrame)
HXDLIN( 408)		this->dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,onEnterFrame,(void))

 ::starling::rendering::FilterEffect FragmentFilter_obj::get_effect(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_416_get_effect)
HXLINE( 417)		if (hx::IsNull( this->_effect )) {
HXLINE( 417)			this->_effect = this->createEffect();
            		}
HXLINE( 418)		return this->_effect;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_effect,return )

 ::starling::rendering::VertexData FragmentFilter_obj::get_vertexData(){
            	HX_GC_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_425_get_vertexData)
HXLINE( 426)		if (hx::IsNull( this->_vertexData )) {
HXLINE( 426)			this->_vertexData =  ::starling::rendering::VertexData_obj::__alloc( HX_CTX ,this->get_effect()->get_vertexFormat(),(int)4);
            		}
HXLINE( 427)		return this->_vertexData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_vertexData,return )

 ::starling::rendering::IndexData FragmentFilter_obj::get_indexData(){
            	HX_GC_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_434_get_indexData)
HXLINE( 435)		if (hx::IsNull( this->_indexData )) {
HXLINE( 437)			this->_indexData =  ::starling::rendering::IndexData_obj::__alloc( HX_CTX ,(int)6);
HXLINE( 438)			this->_indexData->addQuad((int)0,(int)1,(int)2,(int)3);
            		}
HXLINE( 441)		return this->_indexData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_indexData,return )

void FragmentFilter_obj::setRequiresRedraw(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_447_setRequiresRedraw)
HXLINE( 448)		this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
HXLINE( 449)		if (hx::IsNotNull( this->_target )) {
HXLINE( 449)			this->_target->setRequiresRedraw();
            		}
HXLINE( 450)		if (this->_cached) {
HXLINE( 450)			this->_cacheRequested = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,setRequiresRedraw,(void))

int FragmentFilter_obj::get_numPasses(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_458_get_numPasses)
HXDLIN( 458)		return (int)1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_numPasses,return )

void FragmentFilter_obj::onTargetAssigned( ::starling::display::DisplayObject target){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_464_onTargetAssigned)
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,onTargetAssigned,(void))

 ::starling::utils::Padding FragmentFilter_obj::get_padding(){
            	HX_GC_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_470_get_padding)
HXLINE( 471)		if (hx::IsNull( this->_padding )) {
HXLINE( 473)			this->_padding =  ::starling::utils::Padding_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 474)			this->_padding->addEventListener(HX_("change",70,91,72,b7),this->setRequiresRedraw_dyn());
            		}
HXLINE( 477)		return this->_padding;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_padding,return )

 ::starling::utils::Padding FragmentFilter_obj::set_padding( ::starling::utils::Padding value){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_481_set_padding)
HXLINE( 482)		this->get_padding()->copyFrom(value);
HXLINE( 483)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,set_padding,return )

bool FragmentFilter_obj::get_isCached(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_488_get_isCached)
HXDLIN( 488)		return this->_cached;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_isCached,return )

Float FragmentFilter_obj::get_resolution(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_496_get_resolution)
HXDLIN( 496)		return this->_resolution;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_resolution,return )

Float FragmentFilter_obj::set_resolution(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_498_set_resolution)
HXLINE( 499)		if ((value != this->_resolution)) {
HXLINE( 501)			if ((value > (int)0)) {
HXLINE( 501)				this->_resolution = value;
            			}
            			else {
HXLINE( 502)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("resolution must be > 0",34,17,49,d2)));
            			}
HXLINE( 503)			this->setRequiresRedraw();
            		}
HXLINE( 505)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,set_resolution,return )

int FragmentFilter_obj::get_antiAliasing(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_511_get_antiAliasing)
HXDLIN( 511)		return this->_antiAliasing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_antiAliasing,return )

int FragmentFilter_obj::set_antiAliasing(int value){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_513_set_antiAliasing)
HXLINE( 514)		if ((value != this->_antiAliasing)) {
HXLINE( 516)			this->_antiAliasing = value;
HXLINE( 517)			this->setRequiresRedraw();
            		}
HXLINE( 519)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,set_antiAliasing,return )

::String FragmentFilter_obj::get_textureSmoothing(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_524_get_textureSmoothing)
HXDLIN( 524)		return this->_textureSmoothing;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_textureSmoothing,return )

::String FragmentFilter_obj::set_textureSmoothing(::String value){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_526_set_textureSmoothing)
HXLINE( 527)		if ((value != this->_textureSmoothing)) {
HXLINE( 529)			this->_textureSmoothing = value;
HXLINE( 530)			if (hx::IsNotNull( this->_quad )) {
HXLINE( 530)				this->_quad->set_textureSmoothing(value);
            			}
HXLINE( 531)			this->setRequiresRedraw();
            		}
HXLINE( 533)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,set_textureSmoothing,return )

::String FragmentFilter_obj::get_textureFormat(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_538_get_textureFormat)
HXDLIN( 538)		return this->_textureFormat;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_textureFormat,return )

::String FragmentFilter_obj::set_textureFormat(::String value){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_540_set_textureFormat)
HXLINE( 541)		if ((value != this->_textureFormat)) {
HXLINE( 543)			this->_textureFormat = value;
HXLINE( 544)			if (hx::IsNotNull( this->_helper )) {
HXLINE( 544)				this->_helper->set_textureFormat(value);
            			}
HXLINE( 545)			this->setRequiresRedraw();
            		}
HXLINE( 547)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,set_textureFormat,return )

bool FragmentFilter_obj::get_alwaysDrawToBackBuffer(){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_564_get_alwaysDrawToBackBuffer)
HXDLIN( 564)		return this->_alwaysDrawToBackBuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FragmentFilter_obj,get_alwaysDrawToBackBuffer,return )

bool FragmentFilter_obj::set_alwaysDrawToBackBuffer(bool value){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_567_set_alwaysDrawToBackBuffer)
HXDLIN( 567)		return (this->_alwaysDrawToBackBuffer = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,set_alwaysDrawToBackBuffer,return )

void FragmentFilter_obj::setTarget( ::starling::display::DisplayObject target){
            	HX_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_575_setTarget)
HXDLIN( 575)		if (hx::IsNotEq( target,this->_target )) {
HXLINE( 577)			 ::starling::display::DisplayObject prevTarget = this->_target;
HXLINE( 578)			this->_target = target;
HXLINE( 580)			if (hx::IsNull( target )) {
HXLINE( 582)				if (hx::IsNotNull( this->_helper )) {
HXLINE( 582)					this->_helper->purge();
            				}
HXLINE( 583)				if (hx::IsNotNull( this->_effect )) {
HXLINE( 583)					this->_effect->purgeBuffers(null(),null());
            				}
HXLINE( 584)				if (hx::IsNotNull( this->_quad )) {
HXLINE( 584)					this->_quad->disposeTexture();
            				}
            			}
HXLINE( 587)			if (hx::IsNotNull( prevTarget )) {
HXLINE( 589)				prevTarget->set_filter(null());
HXLINE( 590)				prevTarget->removeEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
            			}
HXLINE( 593)			if (hx::IsNotNull( target )) {
HXLINE( 595)				if (this->hasEventListener(HX_("enterFrame",f5,03,50,02),null())) {
HXLINE( 596)					target->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
            				}
HXLINE( 598)				this->onTargetAssigned(target);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FragmentFilter_obj,setTarget,(void))

 ::openfl::geom::Matrix3D FragmentFilter_obj::sMatrix3D;


hx::ObjectPtr< FragmentFilter_obj > FragmentFilter_obj::__new() {
	hx::ObjectPtr< FragmentFilter_obj > __this = new FragmentFilter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FragmentFilter_obj > FragmentFilter_obj::__alloc(hx::Ctx *_hx_ctx) {
	FragmentFilter_obj *__this = (FragmentFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FragmentFilter_obj), true, "starling.filters.FragmentFilter"));
	*(void **)__this = FragmentFilter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FragmentFilter_obj::FragmentFilter_obj()
{
}

void FragmentFilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FragmentFilter);
	HX_MARK_MEMBER_NAME(_quad,"_quad");
	HX_MARK_MEMBER_NAME(_target,"_target");
	HX_MARK_MEMBER_NAME(_effect,"_effect");
	HX_MARK_MEMBER_NAME(_vertexData,"_vertexData");
	HX_MARK_MEMBER_NAME(_indexData,"_indexData");
	HX_MARK_MEMBER_NAME(_padding,"_padding");
	HX_MARK_MEMBER_NAME(_helper,"_helper");
	HX_MARK_MEMBER_NAME(_resolution,"_resolution");
	HX_MARK_MEMBER_NAME(_antiAliasing,"_antiAliasing");
	HX_MARK_MEMBER_NAME(_textureFormat,"_textureFormat");
	HX_MARK_MEMBER_NAME(_textureSmoothing,"_textureSmoothing");
	HX_MARK_MEMBER_NAME(_alwaysDrawToBackBuffer,"_alwaysDrawToBackBuffer");
	HX_MARK_MEMBER_NAME(_cacheRequested,"_cacheRequested");
	HX_MARK_MEMBER_NAME(_cached,"_cached");
	 ::starling::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FragmentFilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_quad,"_quad");
	HX_VISIT_MEMBER_NAME(_target,"_target");
	HX_VISIT_MEMBER_NAME(_effect,"_effect");
	HX_VISIT_MEMBER_NAME(_vertexData,"_vertexData");
	HX_VISIT_MEMBER_NAME(_indexData,"_indexData");
	HX_VISIT_MEMBER_NAME(_padding,"_padding");
	HX_VISIT_MEMBER_NAME(_helper,"_helper");
	HX_VISIT_MEMBER_NAME(_resolution,"_resolution");
	HX_VISIT_MEMBER_NAME(_antiAliasing,"_antiAliasing");
	HX_VISIT_MEMBER_NAME(_textureFormat,"_textureFormat");
	HX_VISIT_MEMBER_NAME(_textureSmoothing,"_textureSmoothing");
	HX_VISIT_MEMBER_NAME(_alwaysDrawToBackBuffer,"_alwaysDrawToBackBuffer");
	HX_VISIT_MEMBER_NAME(_cacheRequested,"_cacheRequested");
	HX_VISIT_MEMBER_NAME(_cached,"_cached");
	 ::starling::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FragmentFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_quad") ) { return hx::Val( _quad ); }
		if (HX_FIELD_EQ(inName,"cache") ) { return hx::Val( cache_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"effect") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_effect() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_target") ) { return hx::Val( _target ); }
		if (HX_FIELD_EQ(inName,"_effect") ) { return hx::Val( _effect ); }
		if (HX_FIELD_EQ(inName,"_helper") ) { return hx::Val( _helper ); }
		if (HX_FIELD_EQ(inName,"_cached") ) { return hx::Val( _cached ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"process") ) { return hx::Val( process_dyn() ); }
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_padding() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_padding") ) { return hx::Val( _padding ); }
		if (HX_FIELD_EQ(inName,"isCached") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isCached() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"indexData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_indexData() ); }
		if (HX_FIELD_EQ(inName,"numPasses") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numPasses() ); }
		if (HX_FIELD_EQ(inName,"setTarget") ) { return hx::Val( setTarget_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_indexData") ) { return hx::Val( _indexData ); }
		if (HX_FIELD_EQ(inName,"clearCache") ) { return hx::Val( clearCache_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_effect") ) { return hx::Val( get_effect_dyn() ); }
		if (HX_FIELD_EQ(inName,"vertexData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_vertexData() ); }
		if (HX_FIELD_EQ(inName,"resolution") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_resolution() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_vertexData") ) { return hx::Val( _vertexData ); }
		if (HX_FIELD_EQ(inName,"_resolution") ) { return hx::Val( _resolution ); }
		if (HX_FIELD_EQ(inName,"get_padding") ) { return hx::Val( get_padding_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_padding") ) { return hx::Val( set_padding_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderPasses") ) { return hx::Val( renderPasses_dyn() ); }
		if (HX_FIELD_EQ(inName,"createEffect") ) { return hx::Val( createEffect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return hx::Val( onEnterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isCached") ) { return hx::Val( get_isCached_dyn() ); }
		if (HX_FIELD_EQ(inName,"antiAliasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_antiAliasing() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_antiAliasing") ) { return hx::Val( _antiAliasing ); }
		if (HX_FIELD_EQ(inName,"get_indexData") ) { return hx::Val( get_indexData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numPasses") ) { return hx::Val( get_numPasses_dyn() ); }
		if (HX_FIELD_EQ(inName,"textureFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureFormat() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_textureFormat") ) { return hx::Val( _textureFormat ); }
		if (HX_FIELD_EQ(inName,"get_vertexData") ) { return hx::Val( get_vertexData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_resolution") ) { return hx::Val( get_resolution_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_resolution") ) { return hx::Val( set_resolution_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_cacheRequested") ) { return hx::Val( _cacheRequested ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onContextCreated") ) { return hx::Val( onContextCreated_dyn() ); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"onTargetAssigned") ) { return hx::Val( onTargetAssigned_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_antiAliasing") ) { return hx::Val( get_antiAliasing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_antiAliasing") ) { return hx::Val( set_antiAliasing_dyn() ); }
		if (HX_FIELD_EQ(inName,"textureSmoothing") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureSmoothing() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_textureSmoothing") ) { return hx::Val( _textureSmoothing ); }
		if (HX_FIELD_EQ(inName,"setRequiresRedraw") ) { return hx::Val( setRequiresRedraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textureFormat") ) { return hx::Val( get_textureFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureFormat") ) { return hx::Val( set_textureFormat_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return hx::Val( removeEventListener_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_textureSmoothing") ) { return hx::Val( get_textureSmoothing_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureSmoothing") ) { return hx::Val( set_textureSmoothing_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"alwaysDrawToBackBuffer") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alwaysDrawToBackBuffer() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_alwaysDrawToBackBuffer") ) { return hx::Val( _alwaysDrawToBackBuffer ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"get_alwaysDrawToBackBuffer") ) { return hx::Val( get_alwaysDrawToBackBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alwaysDrawToBackBuffer") ) { return hx::Val( set_alwaysDrawToBackBuffer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FragmentFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { outValue = ( sMatrix3D ); return true; }
	}
	return false;
}

hx::Val FragmentFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_quad") ) { _quad=inValue.Cast<  ::starling::filters::FilterQuad >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_target") ) { _target=inValue.Cast<  ::starling::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_effect") ) { _effect=inValue.Cast<  ::starling::rendering::FilterEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helper") ) { _helper=inValue.Cast<  ::starling::filters::FilterHelper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cached") ) { _cached=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"padding") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_padding(inValue.Cast<  ::starling::utils::Padding >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_padding") ) { _padding=inValue.Cast<  ::starling::utils::Padding >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_indexData") ) { _indexData=inValue.Cast<  ::starling::rendering::IndexData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resolution") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_resolution(inValue.Cast< Float >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_vertexData") ) { _vertexData=inValue.Cast<  ::starling::rendering::VertexData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_resolution") ) { _resolution=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"antiAliasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasing(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_antiAliasing") ) { _antiAliasing=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureFormat(inValue.Cast< ::String >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_textureFormat") ) { _textureFormat=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_cacheRequested") ) { _cacheRequested=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textureSmoothing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureSmoothing(inValue.Cast< ::String >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_textureSmoothing") ) { _textureSmoothing=inValue.Cast< ::String >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"alwaysDrawToBackBuffer") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alwaysDrawToBackBuffer(inValue.Cast< bool >()) ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_alwaysDrawToBackBuffer") ) { _alwaysDrawToBackBuffer=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FragmentFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"sMatrix3D") ) { sMatrix3D=ioValue.Cast<  ::openfl::geom::Matrix3D >(); return true; }
	}
	return false;
}

void FragmentFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_quad","\xa6","\x54","\x1b","\xfe"));
	outFields->push(HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5"));
	outFields->push(HX_HCSTRING("_effect","\x30","\x6c","\x1a","\xcf"));
	outFields->push(HX_HCSTRING("_vertexData","\xcd","\xac","\xa9","\xa5"));
	outFields->push(HX_HCSTRING("_indexData","\x1d","\x8a","\x13","\x5a"));
	outFields->push(HX_HCSTRING("_padding","\x52","\xb3","\x35","\x0a"));
	outFields->push(HX_HCSTRING("_helper","\x0d","\x8f","\xc5","\x72"));
	outFields->push(HX_HCSTRING("_resolution","\x4b","\x02","\xd3","\x3f"));
	outFields->push(HX_HCSTRING("_antiAliasing","\xf3","\x65","\xd3","\x04"));
	outFields->push(HX_HCSTRING("_textureFormat","\xb3","\x52","\xf8","\xce"));
	outFields->push(HX_HCSTRING("_textureSmoothing","\x78","\x67","\xaa","\x02"));
	outFields->push(HX_HCSTRING("_alwaysDrawToBackBuffer","\x94","\x7a","\x61","\x5a"));
	outFields->push(HX_HCSTRING("_cacheRequested","\x6b","\x1f","\xe5","\x5d"));
	outFields->push(HX_HCSTRING("_cached","\x81","\x71","\x69","\x1f"));
	outFields->push(HX_HCSTRING("effect","\x91","\x5a","\xa3","\x60"));
	outFields->push(HX_HCSTRING("vertexData","\xae","\xdf","\x1f","\xd3"));
	outFields->push(HX_HCSTRING("indexData","\x5c","\x0e","\x71","\xfe"));
	outFields->push(HX_HCSTRING("numPasses","\x65","\x1e","\x33","\x9f"));
	outFields->push(HX_HCSTRING("padding","\xd1","\x59","\x7d","\xd0"));
	outFields->push(HX_HCSTRING("isCached","\x6c","\xfb","\x5b","\x09"));
	outFields->push(HX_HCSTRING("resolution","\x2c","\x35","\x49","\x6d"));
	outFields->push(HX_HCSTRING("antiAliasing","\x14","\xd3","\x64","\x22"));
	outFields->push(HX_HCSTRING("textureSmoothing","\x19","\x79","\x2f","\x6a"));
	outFields->push(HX_HCSTRING("textureFormat","\x72","\x62","\xa6","\x90"));
	outFields->push(HX_HCSTRING("alwaysDrawToBackBuffer","\xf5","\xfa","\x88","\xc7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FragmentFilter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::filters::FilterQuad*/ ,(int)offsetof(FragmentFilter_obj,_quad),HX_HCSTRING("_quad","\xa6","\x54","\x1b","\xfe")},
	{hx::fsObject /*::starling::display::DisplayObject*/ ,(int)offsetof(FragmentFilter_obj,_target),HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5")},
	{hx::fsObject /*::starling::rendering::FilterEffect*/ ,(int)offsetof(FragmentFilter_obj,_effect),HX_HCSTRING("_effect","\x30","\x6c","\x1a","\xcf")},
	{hx::fsObject /*::starling::rendering::VertexData*/ ,(int)offsetof(FragmentFilter_obj,_vertexData),HX_HCSTRING("_vertexData","\xcd","\xac","\xa9","\xa5")},
	{hx::fsObject /*::starling::rendering::IndexData*/ ,(int)offsetof(FragmentFilter_obj,_indexData),HX_HCSTRING("_indexData","\x1d","\x8a","\x13","\x5a")},
	{hx::fsObject /*::starling::utils::Padding*/ ,(int)offsetof(FragmentFilter_obj,_padding),HX_HCSTRING("_padding","\x52","\xb3","\x35","\x0a")},
	{hx::fsObject /*::starling::filters::FilterHelper*/ ,(int)offsetof(FragmentFilter_obj,_helper),HX_HCSTRING("_helper","\x0d","\x8f","\xc5","\x72")},
	{hx::fsFloat,(int)offsetof(FragmentFilter_obj,_resolution),HX_HCSTRING("_resolution","\x4b","\x02","\xd3","\x3f")},
	{hx::fsInt,(int)offsetof(FragmentFilter_obj,_antiAliasing),HX_HCSTRING("_antiAliasing","\xf3","\x65","\xd3","\x04")},
	{hx::fsString,(int)offsetof(FragmentFilter_obj,_textureFormat),HX_HCSTRING("_textureFormat","\xb3","\x52","\xf8","\xce")},
	{hx::fsString,(int)offsetof(FragmentFilter_obj,_textureSmoothing),HX_HCSTRING("_textureSmoothing","\x78","\x67","\xaa","\x02")},
	{hx::fsBool,(int)offsetof(FragmentFilter_obj,_alwaysDrawToBackBuffer),HX_HCSTRING("_alwaysDrawToBackBuffer","\x94","\x7a","\x61","\x5a")},
	{hx::fsBool,(int)offsetof(FragmentFilter_obj,_cacheRequested),HX_HCSTRING("_cacheRequested","\x6b","\x1f","\xe5","\x5d")},
	{hx::fsBool,(int)offsetof(FragmentFilter_obj,_cached),HX_HCSTRING("_cached","\x81","\x71","\x69","\x1f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FragmentFilter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Matrix3D*/ ,(void *) &FragmentFilter_obj::sMatrix3D,HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FragmentFilter_obj_sMemberFields[] = {
	HX_HCSTRING("_quad","\xa6","\x54","\x1b","\xfe"),
	HX_HCSTRING("_target","\xf0","\x04","\x64","\xf5"),
	HX_HCSTRING("_effect","\x30","\x6c","\x1a","\xcf"),
	HX_HCSTRING("_vertexData","\xcd","\xac","\xa9","\xa5"),
	HX_HCSTRING("_indexData","\x1d","\x8a","\x13","\x5a"),
	HX_HCSTRING("_padding","\x52","\xb3","\x35","\x0a"),
	HX_HCSTRING("_helper","\x0d","\x8f","\xc5","\x72"),
	HX_HCSTRING("_resolution","\x4b","\x02","\xd3","\x3f"),
	HX_HCSTRING("_antiAliasing","\xf3","\x65","\xd3","\x04"),
	HX_HCSTRING("_textureFormat","\xb3","\x52","\xf8","\xce"),
	HX_HCSTRING("_textureSmoothing","\x78","\x67","\xaa","\x02"),
	HX_HCSTRING("_alwaysDrawToBackBuffer","\x94","\x7a","\x61","\x5a"),
	HX_HCSTRING("_cacheRequested","\x6b","\x1f","\xe5","\x5d"),
	HX_HCSTRING("_cached","\x81","\x71","\x69","\x1f"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("onContextCreated","\x38","\x81","\xff","\xc0"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderPasses","\x75","\xd7","\x87","\x5d"),
	HX_HCSTRING("process","\x6f","\xa2","\x4a","\xf1"),
	HX_HCSTRING("createEffect","\xad","\x9a","\xf8","\x82"),
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("clearCache","\x75","\xd9","\x1e","\x16"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("onEnterFrame","\xf4","\xa5","\x93","\xda"),
	HX_HCSTRING("get_effect","\x5a","\xca","\x2a","\x51"),
	HX_HCSTRING("get_vertexData","\xf7","\x67","\x15","\x49"),
	HX_HCSTRING("get_indexData","\x33","\xe2","\xd4","\xbf"),
	HX_HCSTRING("setRequiresRedraw","\x87","\x38","\x6c","\xf7"),
	HX_HCSTRING("get_numPasses","\x3c","\xf2","\x96","\x60"),
	HX_HCSTRING("onTargetAssigned","\x3e","\xbe","\xc9","\x2c"),
	HX_HCSTRING("get_padding","\xe8","\xb9","\x77","\x56"),
	HX_HCSTRING("set_padding","\xf4","\xc0","\xe4","\x60"),
	HX_HCSTRING("get_isCached","\x75","\xaf","\x75","\xbe"),
	HX_HCSTRING("get_resolution","\x75","\xbd","\x3e","\xe3"),
	HX_HCSTRING("set_resolution","\xe9","\xa5","\x5e","\x03"),
	HX_HCSTRING("get_antiAliasing","\x9d","\xbf","\x03","\x27"),
	HX_HCSTRING("set_antiAliasing","\x11","\xad","\x45","\x7d"),
	HX_HCSTRING("get_textureSmoothing","\x22","\xde","\x99","\x88"),
	HX_HCSTRING("set_textureSmoothing","\x96","\x95","\x51","\x55"),
	HX_HCSTRING("get_textureFormat","\xc9","\x6d","\x16","\x97"),
	HX_HCSTRING("set_textureFormat","\xd5","\x45","\x84","\xba"),
	HX_HCSTRING("get_alwaysDrawToBackBuffer","\xbe","\x4c","\x8e","\xff"),
	HX_HCSTRING("set_alwaysDrawToBackBuffer","\x32","\x13","\x23","\x5f"),
	HX_HCSTRING("setTarget","\x93","\x68","\x94","\xe6"),
	::String(null()) };

static void FragmentFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FragmentFilter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FragmentFilter_obj::sMatrix3D,"sMatrix3D");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FragmentFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FragmentFilter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FragmentFilter_obj::sMatrix3D,"sMatrix3D");
};

#endif

hx::Class FragmentFilter_obj::__mClass;

static ::String FragmentFilter_obj_sStaticFields[] = {
	HX_HCSTRING("sMatrix3D","\xc5","\x1c","\x17","\x03"),
	::String(null())
};

void FragmentFilter_obj::__register()
{
	hx::Object *dummy = new FragmentFilter_obj;
	FragmentFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.filters.FragmentFilter","\x01","\xe0","\x17","\x0b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FragmentFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &FragmentFilter_obj::__SetStatic;
	__mClass->mMarkFunc = FragmentFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FragmentFilter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FragmentFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FragmentFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FragmentFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FragmentFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FragmentFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FragmentFilter_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d64ef33fd5f4b64c_119_boot)
HXDLIN( 119)		sMatrix3D =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            	}
}

} // end namespace starling
} // end namespace filters
