// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Loader
#include <openfl/display/Loader.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_HTTPStatusEvent
#include <openfl/events/HTTPStatusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_ProgressEvent
#include <openfl/events/ProgressEvent.h>
#endif
#ifndef INCLUDED_openfl_events_SecurityErrorEvent
#include <openfl/events/SecurityErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_openfl_net_URLLoader
#include <openfl/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequestHeader
#include <openfl/net/URLRequestHeader.h>
#endif
#ifndef INCLUDED_openfl_system_ApplicationDomain
#include <openfl/system/ApplicationDomain.h>
#endif
#ifndef INCLUDED_openfl_system_LoaderContext
#include <openfl/system/LoaderContext.h>
#endif
#ifndef INCLUDED_openfl_system_SecurityDomain
#include <openfl/system/SecurityDomain.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_text_BitmapFont
#include <starling/text/BitmapFont.h>
#endif
#ifndef INCLUDED_starling_text_ITextCompositor
#include <starling/text/ITextCompositor.h>
#endif
#ifndef INCLUDED_starling_text_TextField
#include <starling/text/TextField.h>
#endif
#ifndef INCLUDED_starling_textures_AtfData
#include <starling/textures/AtfData.h>
#endif
#ifndef INCLUDED_starling_textures_ConcreteTexture
#include <starling/textures/ConcreteTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_textures_TextureAtlas
#include <starling/textures/TextureAtlas.h>
#endif
#ifndef INCLUDED_starling_textures_TextureOptions
#include <starling/textures/TextureOptions.h>
#endif
#ifndef INCLUDED_starling_utils_ArrayUtil
#include <starling/utils/ArrayUtil.h>
#endif
#ifndef INCLUDED_starling_utils_AssetManager
#include <starling/utils/AssetManager.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f60597b0968ad328_126_new,"starling.utils.AssetManager","new",0x9165c7b2,"starling.utils.AssetManager.new","starling/utils/AssetManager.hx",126,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_181_dispose,"starling.utils.AssetManager","dispose",0xd90188f1,"starling.utils.AssetManager.dispose","starling/utils/AssetManager.hx",181,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_204_getTexture,"starling.utils.AssetManager","getTexture",0x0f95c5d3,"starling.utils.AssetManager.getTexture","starling/utils/AssetManager.hx",204,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_219_getTextures,"starling.utils.AssetManager","getTextures",0x93775340,"starling.utils.AssetManager.getTextures","starling/utils/AssetManager.hx",219,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_231_getTextureNames,"starling.utils.AssetManager","getTextureNames",0x295f3cf5,"starling.utils.AssetManager.getTextureNames","starling/utils/AssetManager.hx",231,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_244_getTextureAtlas,"starling.utils.AssetManager","getTextureAtlas",0xb9b7fa78,"starling.utils.AssetManager.getTextureAtlas","starling/utils/AssetManager.hx",244,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_251_getTextureAtlasNames,"starling.utils.AssetManager","getTextureAtlasNames",0x0ba31230,"starling.utils.AssetManager.getTextureAtlasNames","starling/utils/AssetManager.hx",251,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_257_getSound,"starling.utils.AssetManager","getSound",0xc155dbc7,"starling.utils.AssetManager.getSound","starling/utils/AssetManager.hx",257,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_264_getSoundNames,"starling.utils.AssetManager","getSoundNames",0x2d471281,"starling.utils.AssetManager.getSoundNames","starling/utils/AssetManager.hx",264,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_272_playSound,"starling.utils.AssetManager","playSound",0x5cf5fb0d,"starling.utils.AssetManager.playSound","starling/utils/AssetManager.hx",272,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_281_getXml,"starling.utils.AssetManager","getXml",0xcca08ecf,"starling.utils.AssetManager.getXml","starling/utils/AssetManager.hx",281,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_288_getXmlNames,"starling.utils.AssetManager","getXmlNames",0x0a2e6279,"starling.utils.AssetManager.getXmlNames","starling/utils/AssetManager.hx",288,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_295_getObject,"starling.utils.AssetManager","getObject",0x4cdb48c7,"starling.utils.AssetManager.getObject","starling/utils/AssetManager.hx",295,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_302_getObjectNames,"starling.utils.AssetManager","getObjectNames",0xa5f68581,"starling.utils.AssetManager.getObjectNames","starling/utils/AssetManager.hx",302,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_308_getByteArray,"starling.utils.AssetManager","getByteArray",0x816c6c69,"starling.utils.AssetManager.getByteArray","starling/utils/AssetManager.hx",308,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_315_getByteArrayNames,"starling.utils.AssetManager","getByteArrayNames",0x8736f69f,"starling.utils.AssetManager.getByteArrayNames","starling/utils/AssetManager.hx",315,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_324_addTexture,"starling.utils.AssetManager","addTexture",0x27be6ba8,"starling.utils.AssetManager.addTexture","starling/utils/AssetManager.hx",324,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_340_addTextureAtlas,"starling.utils.AssetManager","addTextureAtlas",0x1d1d1083,"starling.utils.AssetManager.addTextureAtlas","starling/utils/AssetManager.hx",340,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_355_addSound,"starling.utils.AssetManager","addSound",0xdadbf25c,"starling.utils.AssetManager.addSound","starling/utils/AssetManager.hx",355,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_368_addXml,"starling.utils.AssetManager","addXml",0xc8826624,"starling.utils.AssetManager.addXml","starling/utils/AssetManager.hx",368,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_385_addObject,"starling.utils.AssetManager","addObject",0x88a8f492,"starling.utils.AssetManager.addObject","starling/utils/AssetManager.hx",385,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_398_addByteArray,"starling.utils.AssetManager","addByteArray",0x7169f17e,"starling.utils.AssetManager.addByteArray","starling/utils/AssetManager.hx",398,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_414_removeTexture,"starling.utils.AssetManager","removeTexture",0x48a636c9,"starling.utils.AssetManager.removeTexture","starling/utils/AssetManager.hx",414,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_425_removeTextureAtlas,"starling.utils.AssetManager","removeTextureAtlas",0xfadc4dc2,"starling.utils.AssetManager.removeTextureAtlas","starling/utils/AssetManager.hx",425,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_436_removeSound,"starling.utils.AssetManager","removeSound",0x86b5033d,"starling.utils.AssetManager.removeSound","starling/utils/AssetManager.hx",436,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_443_removeXml,"starling.utils.AssetManager","removeXml",0x863bccc5,"starling.utils.AssetManager.removeXml","starling/utils/AssetManager.hx",443,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_456_removeObject,"starling.utils.AssetManager","removeObject",0x3abea891,"starling.utils.AssetManager.removeObject","starling/utils/AssetManager.hx",456,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_463_removeByteArray,"starling.utils.AssetManager","removeByteArray",0x743386df,"starling.utils.AssetManager.removeByteArray","starling/utils/AssetManager.hx",463,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_474_purgeQueue,"starling.utils.AssetManager","purgeQueue",0x30f9ee54,"starling.utils.AssetManager.purgeQueue","starling/utils/AssetManager.hx",474,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_482_purge,"starling.utils.AssetManager","purge",0x3d89b9fd,"starling.utils.AssetManager.purge","starling/utils/AssetManager.hx",482,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_526_enqueue,"starling.utils.AssetManager","enqueue",0xded920da,"starling.utils.AssetManager.enqueue","starling/utils/AssetManager.hx",526,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_586_enqueueWithName,"starling.utils.AssetManager","enqueueWithName",0xa3e9d66b,"starling.utils.AssetManager.enqueueWithName","starling/utils/AssetManager.hx",586,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_659_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",659,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_674_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",674,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_677_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",677,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_669_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",669,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_690_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",690,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_709_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",709,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_712_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",712,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_703_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",703,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_770_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",770,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_716_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",716,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_774_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",774,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_788_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",788,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_786_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",786,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_622_loadQueue,"starling.utils.AssetManager","loadQueue",0x34671a5d,"starling.utils.AssetManager.loadQueue","starling/utils/AssetManager.hx",622,0x9ccaa77c)
static const bool _hx_array_data_f35fc6c0_56[] = {
	0,
};
static const int _hx_array_data_f35fc6c0_57[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_817_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",817,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_856_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",856,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_862_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",862,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_872_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",872,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_869_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",869,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_899_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",899,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_909_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",909,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_906_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",906,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_978_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",978,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_983_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",983,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_810_processRawAsset,"starling.utils.AssetManager","processRawAsset",0x5f632ac9,"starling.utils.AssetManager.processRawAsset","starling/utils/AssetManager.hx",810,0x9ccaa77c)
static const bool _hx_array_data_f35fc6c0_69[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1022_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1022,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1029_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1029,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1037_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1037,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1049_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1049,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1054_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1054,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1090_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1090,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1096_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1096,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1006_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1006,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1129_loadRawAsset,"starling.utils.AssetManager","loadRawAsset",0xf7b2159c,"starling.utils.AssetManager.loadRawAsset","starling/utils/AssetManager.hx",1129,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1159_getName,"starling.utils.AssetManager","getName",0x39372a53,"starling.utils.AssetManager.getName","starling/utils/AssetManager.hx",1159,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1192_transformData,"starling.utils.AssetManager","transformData",0x40bbe788,"starling.utils.AssetManager.transformData","starling/utils/AssetManager.hx",1192,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1199_log,"starling.utils.AssetManager","log",0x91644bd6,"starling.utils.AssetManager.log","starling/utils/AssetManager.hx",1199,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1203_byteArrayStartsWith,"starling.utils.AssetManager","byteArrayStartsWith",0x9976d89a,"starling.utils.AssetManager.byteArrayStartsWith","starling/utils/AssetManager.hx",1203,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1240_getDictionaryKeys,"starling.utils.AssetManager","getDictionaryKeys",0x750b36b2,"starling.utils.AssetManager.getDictionaryKeys","starling/utils/AssetManager.hx",1240,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1252_getHttpHeader,"starling.utils.AssetManager","getHttpHeader",0x2ef5dd3d,"starling.utils.AssetManager.getHttpHeader","starling/utils/AssetManager.hx",1252,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1263_getBasenameFromUrl,"starling.utils.AssetManager","getBasenameFromUrl",0x16bc75a1,"starling.utils.AssetManager.getBasenameFromUrl","starling/utils/AssetManager.hx",1263,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1271_getExtensionFromUrl,"starling.utils.AssetManager","getExtensionFromUrl",0xc8c3326e,"starling.utils.AssetManager.getExtensionFromUrl","starling/utils/AssetManager.hx",1271,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1282_prependCallback,"starling.utils.AssetManager","prependCallback",0xd60c5545,"starling.utils.AssetManager.prependCallback","starling/utils/AssetManager.hx",1282,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1285_prependCallback,"starling.utils.AssetManager","prependCallback",0xd60c5545,"starling.utils.AssetManager.prependCallback","starling/utils/AssetManager.hx",1285,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1291_compare,"starling.utils.AssetManager","compare",0xa11e20f7,"starling.utils.AssetManager.compare","starling/utils/AssetManager.hx",1291,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1298_get_queue,"starling.utils.AssetManager","get_queue",0x5cd92aba,"starling.utils.AssetManager.get_queue","starling/utils/AssetManager.hx",1298,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1302_get_nu__queuedAssets,"starling.utils.AssetManager","get_nu__queuedAssets",0xe8e519b4,"starling.utils.AssetManager.get_nu__queuedAssets","starling/utils/AssetManager.hx",1302,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1307_get_verbose,"starling.utils.AssetManager","get_verbose",0xff68d0eb,"starling.utils.AssetManager.get_verbose","starling/utils/AssetManager.hx",1307,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1308_set_verbose,"starling.utils.AssetManager","set_verbose",0x09d5d7f7,"starling.utils.AssetManager.set_verbose","starling/utils/AssetManager.hx",1308,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1312_get_isLoading,"starling.utils.AssetManager","get_isLoading",0x9f60315b,"starling.utils.AssetManager.get_isLoading","starling/utils/AssetManager.hx",1312,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1318_get_useMipMaps,"starling.utils.AssetManager","get_useMipMaps",0xf17a06bb,"starling.utils.AssetManager.get_useMipMaps","starling/utils/AssetManager.hx",1318,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1319_set_useMipMaps,"starling.utils.AssetManager","set_useMipMaps",0x1199ef2f,"starling.utils.AssetManager.set_useMipMaps","starling/utils/AssetManager.hx",1319,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1324_get_scaleFactor,"starling.utils.AssetManager","get_scaleFactor",0x0843c0e2,"starling.utils.AssetManager.get_scaleFactor","starling/utils/AssetManager.hx",1324,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1325_set_scaleFactor,"starling.utils.AssetManager","set_scaleFactor",0x040f3dee,"starling.utils.AssetManager.set_scaleFactor","starling/utils/AssetManager.hx",1325,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1330_get_textureFormat,"starling.utils.AssetManager","get_textureFormat",0x03a3d09b,"starling.utils.AssetManager.get_textureFormat","starling/utils/AssetManager.hx",1330,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1331_set_textureFormat,"starling.utils.AssetManager","set_textureFormat",0x2711a8a7,"starling.utils.AssetManager.set_textureFormat","starling/utils/AssetManager.hx",1331,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1337_get_forcePotTextures,"starling.utils.AssetManager","get_forcePotTextures",0xa5d56739,"starling.utils.AssetManager.get_forcePotTextures","starling/utils/AssetManager.hx",1337,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1338_set_forcePotTextures,"starling.utils.AssetManager","set_forcePotTextures",0x728d1ead,"starling.utils.AssetManager.set_forcePotTextures","starling/utils/AssetManager.hx",1338,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1344_get_checkPolicyFile,"starling.utils.AssetManager","get_checkPolicyFile",0xef6a28df,"starling.utils.AssetManager.get_checkPolicyFile","starling/utils/AssetManager.hx",1344,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1345_set_checkPolicyFile,"starling.utils.AssetManager","set_checkPolicyFile",0x2c071beb,"starling.utils.AssetManager.set_checkPolicyFile","starling/utils/AssetManager.hx",1345,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1351_get_keepAtlasXmls,"starling.utils.AssetManager","get_keepAtlasXmls",0xc2b2ee8b,"starling.utils.AssetManager.get_keepAtlasXmls","starling/utils/AssetManager.hx",1351,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1352_set_keepAtlasXmls,"starling.utils.AssetManager","set_keepAtlasXmls",0xe620c697,"starling.utils.AssetManager.set_keepAtlasXmls","starling/utils/AssetManager.hx",1352,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1358_get_keepFontXmls,"starling.utils.AssetManager","get_keepFontXmls",0x197a2fc7,"starling.utils.AssetManager.get_keepFontXmls","starling/utils/AssetManager.hx",1358,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1359_set_keepFontXmls,"starling.utils.AssetManager","set_keepFontXmls",0x6fbc1d3b,"starling.utils.AssetManager.set_keepFontXmls","starling/utils/AssetManager.hx",1359,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1364_get_numConnections,"starling.utils.AssetManager","get_numConnections",0x1023e3a6,"starling.utils.AssetManager.get_numConnections","starling/utils/AssetManager.hx",1364,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_1365_set_numConnections,"starling.utils.AssetManager","set_numConnections",0xecd3161a,"starling.utils.AssetManager.set_numConnections","starling/utils/AssetManager.hx",1365,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_129_boot,"starling.utils.AssetManager","boot",0x9fc1f4a0,"starling.utils.AssetManager.boot","starling/utils/AssetManager.hx",129,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_152_boot,"starling.utils.AssetManager","boot",0x9fc1f4a0,"starling.utils.AssetManager.boot","starling/utils/AssetManager.hx",152,0x9ccaa77c)
HX_LOCAL_STACK_FRAME(_hx_pos_f60597b0968ad328_155_boot,"starling.utils.AssetManager","boot",0x9fc1f4a0,"starling.utils.AssetManager.boot","starling/utils/AssetManager.hx",155,0x9ccaa77c)
namespace starling{
namespace utils{

void AssetManager_obj::__construct(hx::Null< Float >  __o_scaleFactor,hx::Null< bool >  __o_useMipmaps){
Float scaleFactor = __o_scaleFactor.Default(1);
bool useMipmaps = __o_useMipmaps.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_126_new)
HXLINE( 134)		this->_hx___numLoadingQueues = (int)0;
HXLINE( 161)		super::__construct();
HXLINE( 162)		this->_hx___defaultTextureOptions =  ::starling::textures::TextureOptions_obj::__alloc( HX_CTX ,scaleFactor,useMipmaps,null(),null(),null());
HXLINE( 163)		this->_hx___textures =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 164)		this->_hx___atlases =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 165)		this->_hx___sounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 166)		this->_hx___xmls =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 167)		this->_hx___objects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 168)		this->_hx___byteArrays =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 169)		this->_hx___numConnections = (int)3;
HXLINE( 170)		this->_hx___verbose = true;
HXLINE( 171)		this->_hx___queue = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic AssetManager_obj::__CreateEmpty() { return new AssetManager_obj; }

void *AssetManager_obj::_hx_vtable = 0;

Dynamic AssetManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetManager_obj > _hx_result = new AssetManager_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AssetManager_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
	} else {
		return inClassId==(int)0x5ee39ea6;
	}
}

void AssetManager_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_181_dispose)
HXLINE( 182)		{
HXLINE( 182)			 ::Dynamic texture = this->_hx___textures->iterator();
HXDLIN( 182)			while(( (bool)(texture->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 182)				 ::starling::textures::Texture texture1 = ( ( ::starling::textures::Texture)(texture->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 183)				texture1->dispose();
            			}
            		}
HXLINE( 185)		{
HXLINE( 185)			 ::Dynamic atlas = this->_hx___atlases->iterator();
HXDLIN( 185)			while(( (bool)(atlas->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 185)				 ::starling::textures::TextureAtlas atlas1 = ( ( ::starling::textures::TextureAtlas)(atlas->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 186)				atlas1->dispose();
            			}
            		}
HXLINE( 193)		{
HXLINE( 193)			 ::Dynamic byteArray = this->_hx___byteArrays->iterator();
HXDLIN( 193)			while(( (bool)(byteArray->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 193)				 ::openfl::utils::ByteArrayData byteArray1 = ( ( ::openfl::utils::ByteArrayData)(byteArray->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 194)				byteArray1->clear();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,dispose,(void))

 ::starling::textures::Texture AssetManager_obj::getTexture(::String name){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_204_getTexture)
HXDLIN( 204)		if (this->_hx___textures->exists(name)) {
HXDLIN( 204)			return this->_hx___textures->get(name).StaticCast<  ::starling::textures::Texture >();
            		}
            		else {
HXLINE( 207)			{
HXLINE( 207)				 ::Dynamic atlas = this->_hx___atlases->iterator();
HXDLIN( 207)				while(( (bool)(atlas->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 207)					 ::starling::textures::TextureAtlas atlas1 = ( ( ::starling::textures::TextureAtlas)(atlas->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 209)					 ::starling::textures::Texture texture = atlas1->getTexture(name);
HXLINE( 210)					if (hx::IsNotNull( texture )) {
HXLINE( 210)						return texture;
            					}
            				}
            			}
HXLINE( 212)			return null();
            		}
HXLINE( 204)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getTexture,return )

 ::openfl::_Vector::AbstractVector AssetManager_obj::getTextures(::String __o_prefix, ::openfl::_Vector::AbstractVector out){
::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_219_getTextures)
HXLINE( 220)		if (hx::IsNull( out )) {
HXLINE( 220)			int length = null();
HXDLIN( 220)			bool fixed = null();
HXDLIN( 220)			out =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
HXLINE( 222)		{
HXLINE( 222)			int _g = (int)0;
HXDLIN( 222)			 ::openfl::_Vector::AbstractVector _g1 = this->getTextureNames(prefix,::starling::utils::AssetManager_obj::sNames);
HXDLIN( 222)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 222)				::String name = ( (::String)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 222)				_g = (_g + (int)1);
HXLINE( 223)				{
HXLINE( 223)					int index = ::openfl::_Vector::IVector_obj::get_length(out->data);
HXDLIN( 223)					 ::starling::textures::Texture value = this->getTexture(name);
HXDLIN( 223)					::openfl::_Vector::IVector_obj::set(out->data,index,value);
            				}
            			}
            		}
HXLINE( 225)		::openfl::_Vector::IVector_obj::set_length(::starling::utils::AssetManager_obj::sNames->data,(int)0);
HXLINE( 226)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getTextures,return )

 ::openfl::_Vector::AbstractVector AssetManager_obj::getTextureNames(::String __o_prefix, ::openfl::_Vector::AbstractVector out){
::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_231_getTextureNames)
HXLINE( 232)		out = this->getDictionaryKeys(this->_hx___textures,prefix,out);
HXLINE( 234)		{
HXLINE( 234)			 ::Dynamic atlas = this->_hx___atlases->iterator();
HXDLIN( 234)			while(( (bool)(atlas->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 234)				 ::starling::textures::TextureAtlas atlas1 = ( ( ::starling::textures::TextureAtlas)(atlas->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 235)				atlas1->getNames(prefix,out);
            			}
            		}
HXLINE( 237)		::openfl::_Vector::IVector_obj::sort(out->data,this->compare_dyn());
HXLINE( 238)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getTextureNames,return )

 ::starling::textures::TextureAtlas AssetManager_obj::getTextureAtlas(::String name){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_244_getTextureAtlas)
HXDLIN( 244)		return this->_hx___atlases->get(name).StaticCast<  ::starling::textures::TextureAtlas >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getTextureAtlas,return )

 ::openfl::_Vector::AbstractVector AssetManager_obj::getTextureAtlasNames(::String __o_prefix, ::openfl::_Vector::AbstractVector out){
::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_251_getTextureAtlasNames)
HXDLIN( 251)		return this->getDictionaryKeys(this->_hx___atlases,prefix,out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getTextureAtlasNames,return )

 ::openfl::media::Sound AssetManager_obj::getSound(::String name){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_257_getSound)
HXDLIN( 257)		return this->_hx___sounds->get(name).StaticCast<  ::openfl::media::Sound >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getSound,return )

 ::openfl::_Vector::AbstractVector AssetManager_obj::getSoundNames(::String __o_prefix, ::openfl::_Vector::AbstractVector out){
::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_264_getSoundNames)
HXDLIN( 264)		return this->getDictionaryKeys(this->_hx___sounds,prefix,out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getSoundNames,return )

 ::openfl::media::SoundChannel AssetManager_obj::playSound(::String name,hx::Null< Float >  __o_startTime,hx::Null< int >  __o_loops, ::openfl::media::SoundTransform transform){
Float startTime = __o_startTime.Default(0);
int loops = __o_loops.Default(0);
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_272_playSound)
HXDLIN( 272)		if (this->_hx___sounds->exists(name)) {
HXLINE( 273)			return this->getSound(name)->play(startTime,loops,transform);
            		}
            		else {
HXLINE( 275)			return null();
            		}
HXLINE( 272)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC4(AssetManager_obj,playSound,return )

 ::Xml AssetManager_obj::getXml(::String name){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_281_getXml)
HXDLIN( 281)		return this->_hx___xmls->get(name).StaticCast<  ::Xml >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getXml,return )

 ::openfl::_Vector::AbstractVector AssetManager_obj::getXmlNames(::String __o_prefix, ::openfl::_Vector::AbstractVector out){
::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_288_getXmlNames)
HXDLIN( 288)		return this->getDictionaryKeys(this->_hx___xmls,prefix,out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getXmlNames,return )

 ::Dynamic AssetManager_obj::getObject(::String name){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_295_getObject)
HXDLIN( 295)		return this->_hx___objects->get(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getObject,return )

 ::openfl::_Vector::AbstractVector AssetManager_obj::getObjectNames(::String __o_prefix, ::openfl::_Vector::AbstractVector out){
::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_302_getObjectNames)
HXDLIN( 302)		return this->getDictionaryKeys(this->_hx___objects,prefix,out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getObjectNames,return )

 ::openfl::utils::ByteArrayData AssetManager_obj::getByteArray(::String name){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_308_getByteArray)
HXDLIN( 308)		return this->_hx___byteArrays->get(name).StaticCast<  ::openfl::utils::ByteArrayData >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getByteArray,return )

 ::openfl::_Vector::AbstractVector AssetManager_obj::getByteArrayNames(::String __o_prefix, ::openfl::_Vector::AbstractVector out){
::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_315_getByteArrayNames)
HXDLIN( 315)		return this->getDictionaryKeys(this->_hx___byteArrays,prefix,out);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getByteArrayNames,return )

void AssetManager_obj::addTexture(::String name, ::starling::textures::Texture texture){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_324_addTexture)
HXLINE( 325)		this->log(((HX_("Adding texture '",43,32,83,3f) + name) + HX_("'",27,00,00,00)));
HXLINE( 327)		if (this->_hx___textures->exists(name)) {
HXLINE( 329)			this->log(HX_("Warning: name was already in use; the previous texture will be replaced.",d3,81,57,2c));
HXLINE( 330)			this->_hx___textures->get(name).StaticCast<  ::starling::textures::Texture >()->dispose();
            		}
HXLINE( 333)		this->_hx___textures->set(name,texture);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,addTexture,(void))

void AssetManager_obj::addTextureAtlas(::String name, ::starling::textures::TextureAtlas atlas){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_340_addTextureAtlas)
HXLINE( 341)		this->log(((HX_("Adding texture atlas '",2e,41,11,94) + name) + HX_("'",27,00,00,00)));
HXLINE( 343)		if (this->_hx___atlases->exists(name)) {
HXLINE( 345)			this->log(HX_("Warning: name was already in use; the previous atlas will be replaced.",03,36,2c,2a));
HXLINE( 346)			this->_hx___atlases->get(name).StaticCast<  ::starling::textures::TextureAtlas >()->dispose();
            		}
HXLINE( 349)		this->_hx___atlases->set(name,atlas);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,addTextureAtlas,(void))

void AssetManager_obj::addSound(::String name, ::openfl::media::Sound sound){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_355_addSound)
HXLINE( 356)		this->log(((HX_("Adding sound '",f7,c0,47,93) + name) + HX_("'",27,00,00,00)));
HXLINE( 358)		if (this->_hx___sounds->exists(name)) {
HXLINE( 359)			this->log(HX_("Warning: name was already in use; the previous sound will be replaced.",87,a6,95,7e));
            		}
HXLINE( 361)		this->_hx___sounds->set(name,sound);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,addSound,(void))

void AssetManager_obj::addXml(::String name, ::Xml xml){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_368_addXml)
HXLINE( 369)		this->log(((HX_("Adding XML '",9f,3d,35,a3) + name) + HX_("'",27,00,00,00)));
HXLINE( 371)		if (this->_hx___xmls->exists(name)) {
HXLINE( 373)			this->log(HX_("Warning: name was already in use; the previous XML will be replaced.",2f,61,d3,01));
            		}
HXLINE( 379)		this->_hx___xmls->set(name,xml);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,addXml,(void))

void AssetManager_obj::addObject(::String name, ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_385_addObject)
HXLINE( 386)		this->log(((HX_("Adding object '",05,97,2e,b5) + name) + HX_("'",27,00,00,00)));
HXLINE( 388)		if (this->_hx___objects->exists(name)) {
HXLINE( 389)			this->log(HX_("Warning: name was already in use; the previous object will be replaced.",85,9f,0f,8c));
            		}
HXLINE( 391)		{
HXLINE( 391)			 ::Dynamic v = object;
HXDLIN( 391)			this->_hx___objects->set(name,v);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,addObject,(void))

void AssetManager_obj::addByteArray(::String name, ::openfl::utils::ByteArrayData byteArray){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_398_addByteArray)
HXLINE( 399)		this->log(((HX_("Adding byte array '",c7,c6,71,31) + name) + HX_("'",27,00,00,00)));
HXLINE( 401)		if (this->_hx___byteArrays->exists(name)) {
HXLINE( 403)			this->log(HX_("Warning: name was already in use; the previous byte array will be replaced.",47,cf,a8,e4));
HXLINE( 404)			this->_hx___byteArrays->get(name).StaticCast<  ::openfl::utils::ByteArrayData >()->clear();
            		}
HXLINE( 407)		this->_hx___byteArrays->set(name,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,addByteArray,(void))

void AssetManager_obj::removeTexture(::String name,hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(true);
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_414_removeTexture)
HXLINE( 415)		this->log(((HX_("Removing texture '",63,5b,fe,20) + name) + HX_("'",27,00,00,00)));
HXLINE( 417)		bool _hx_tmp;
HXDLIN( 417)		if (dispose) {
HXLINE( 417)			_hx_tmp = this->_hx___textures->exists(name);
            		}
            		else {
HXLINE( 417)			_hx_tmp = false;
            		}
HXDLIN( 417)		if (_hx_tmp) {
HXLINE( 418)			this->_hx___textures->get(name).StaticCast<  ::starling::textures::Texture >()->dispose();
            		}
HXLINE( 420)		this->_hx___textures->remove(name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,removeTexture,(void))

void AssetManager_obj::removeTextureAtlas(::String name,hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(true);
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_425_removeTextureAtlas)
HXLINE( 426)		this->log(((HX_("Removing texture atlas '",4e,02,80,66) + name) + HX_("'",27,00,00,00)));
HXLINE( 428)		bool _hx_tmp;
HXDLIN( 428)		if (dispose) {
HXLINE( 428)			_hx_tmp = this->_hx___atlases->exists(name);
            		}
            		else {
HXLINE( 428)			_hx_tmp = false;
            		}
HXDLIN( 428)		if (_hx_tmp) {
HXLINE( 429)			this->_hx___atlases->get(name).StaticCast<  ::starling::textures::TextureAtlas >()->dispose();
            		}
HXLINE( 431)		this->_hx___atlases->remove(name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,removeTextureAtlas,(void))

void AssetManager_obj::removeSound(::String name){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_436_removeSound)
HXLINE( 437)		this->log(((HX_("Removing sound '",17,62,80,3c) + name) + HX_("'",27,00,00,00)));
HXLINE( 438)		this->_hx___sounds->remove(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,removeSound,(void))

void AssetManager_obj::removeXml(::String name,hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(true);
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_443_removeXml)
HXLINE( 444)		this->log(((HX_("Removing xml '",df,02,6f,61) + name) + HX_("'",27,00,00,00)));
HXLINE( 451)		this->_hx___xmls->remove(name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,removeXml,(void))

void AssetManager_obj::removeObject(::String name){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_456_removeObject)
HXLINE( 457)		this->log(((HX_("Removing object '",e5,f1,82,1d) + name) + HX_("'",27,00,00,00)));
HXLINE( 458)		this->_hx___objects->remove(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,removeObject,(void))

void AssetManager_obj::removeByteArray(::String name,hx::Null< bool >  __o_dispose){
bool dispose = __o_dispose.Default(true);
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_463_removeByteArray)
HXLINE( 464)		this->log(((HX_("Removing byte array '",a7,11,bd,5d) + name) + HX_("'",27,00,00,00)));
HXLINE( 466)		bool _hx_tmp;
HXDLIN( 466)		if (dispose) {
HXLINE( 466)			_hx_tmp = this->_hx___byteArrays->exists(name);
            		}
            		else {
HXLINE( 466)			_hx_tmp = false;
            		}
HXDLIN( 466)		if (_hx_tmp) {
HXLINE( 467)			this->_hx___byteArrays->get(name).StaticCast<  ::openfl::utils::ByteArrayData >()->clear();
            		}
HXLINE( 469)		this->_hx___byteArrays->remove(name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,removeByteArray,(void))

void AssetManager_obj::purgeQueue(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_474_purgeQueue)
HXLINE( 475)		::starling::utils::ArrayUtil_obj::clear(this->_hx___queue);
HXLINE( 476)		this->dispatchEventWith(HX_("cancel",7a,ed,33,b8),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,purgeQueue,(void))

void AssetManager_obj::purge(){
            	HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_482_purge)
HXLINE( 483)		this->log(HX_("Purging all assets, emptying queue",d4,fb,ac,19));
HXLINE( 485)		this->purgeQueue();
HXLINE( 486)		this->dispose();
HXLINE( 488)		this->_hx___textures =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 489)		this->_hx___atlases =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 490)		this->_hx___sounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 491)		this->_hx___xmls =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 492)		this->_hx___objects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 493)		this->_hx___byteArrays =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,purge,(void))

void AssetManager_obj::enqueue(::cpp::VirtualArray rawAssets){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_526_enqueue)
HXDLIN( 526)		int _g = (int)0;
HXDLIN( 526)		while((_g < rawAssets->get_length())){
HXDLIN( 526)			 ::Dynamic rawAsset = rawAssets->__get(_g);
HXDLIN( 526)			_g = (_g + (int)1);
HXLINE( 528)			if (::Std_obj::is(rawAsset,hx::ArrayBase::__mClass)) {
HXLINE( 530)				this->enqueue(( (::cpp::VirtualArray)(rawAsset) ));
            			}
            			else {
HXLINE( 563)				bool _hx_tmp;
HXDLIN( 563)				if (!(::Std_obj::is(rawAsset,hx::ClassOf< ::String >()))) {
HXLINE( 563)					_hx_tmp = ::Std_obj::is(rawAsset,hx::ClassOf< ::openfl::net::URLRequest >());
            				}
            				else {
HXLINE( 563)					_hx_tmp = true;
            				}
HXDLIN( 563)				if (_hx_tmp) {
HXLINE( 565)					this->enqueueWithName(rawAsset,null(),null());
            				}
            				else {
HXLINE( 569)					this->log((HX_("Ignoring unsupported asset type: ",ac,1f,4c,01) + ::Type_obj::getClassName(rawAsset)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,enqueue,(void))

::String AssetManager_obj::enqueueWithName( ::Dynamic asset,::String name, ::starling::textures::TextureOptions options){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_586_enqueueWithName)
HXLINE( 587)		::String filename = null();
HXLINE( 596)		if (hx::IsNull( name )) {
HXLINE( 596)			name = this->getName(asset);
            		}
HXLINE( 597)		if (hx::IsNull( options )) {
HXLINE( 597)			options = this->_hx___defaultTextureOptions->clone();
            		}
            		else {
HXLINE( 598)			options = options->clone();
            		}
HXLINE( 600)		::String _hx_tmp;
HXDLIN( 600)		if (hx::IsNotNull( filename )) {
HXLINE( 600)			_hx_tmp = filename;
            		}
            		else {
HXLINE( 600)			_hx_tmp = name;
            		}
HXDLIN( 600)		this->log(((HX_("Enqueuing '",ec,a2,5f,8a) + _hx_tmp) + HX_("'",27,00,00,00)));
HXLINE( 602)		this->_hx___queue->push( ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("options",5e,33,fe,df),options)
            			->setFixed(1,HX_("asset",f0,69,39,26),asset)
            			->setFixed(2,HX_("name",4b,72,ff,48),name)));
HXLINE( 608)		return name;
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetManager_obj,enqueueWithName,return )

void AssetManager_obj::loadQueue( ::Dynamic onProgress){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::Array< int >,assetIndex,::Array< ::Dynamic>,loadQueueElement,::Array< ::Dynamic>,assetInfos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_659_loadQueue)
HXLINE( 659)			if ((assetIndex->__get((int)0) < assetInfos->length)) {
HXLINE( 663)				int index = assetIndex[(int)0]++;
HXLINE( 664)				loadQueueElement->__get((int)0)(index,assetInfos->__get(index));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S7(hx::LocalFunc,_hx_Closure_3, ::starling::utils::AssetManager,_gthis,::Array< bool >,canceled,::Array< ::Dynamic>,processXmls, ::openfl::_Vector::AbstractVector,xmls,::Array< ::Dynamic>,updateAssetProgress,::Array< int >,assetCount, ::Dynamic,loadNextQueueElement) HXARGC(2)
            		void _hx_run(int index1, ::Dynamic assetInfo){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,int,index1,::Array< ::Dynamic>,updateAssetProgress) HXARGC(1)
            			void _hx_run(Float progress){
            				HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_674_loadQueue)
HXLINE( 674)				updateAssetProgress->__get((int)0)(index1,(progress * ((Float)0.8)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,processXmls,int,index1,::Array< ::Dynamic>,updateAssetProgress, ::Dynamic,loadNextQueueElement,::Array< int >,assetCount) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_677_loadQueue)
HXLINE( 678)				updateAssetProgress->__get((int)0)(index1,((Float)1.0));
HXLINE( 679)				assetCount[(int)0]--;
HXLINE( 681)				if ((assetCount->__get((int)0) > (int)0)) {
HXLINE( 681)					loadNextQueueElement();
            				}
            				else {
HXLINE( 682)					processXmls->__get((int)0)();
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_669_loadQueue)
HXLINE( 670)			if (canceled->__get((int)0)) {
HXLINE( 670)				return;
            			}
HXLINE( 672)			 ::Dynamic onElementProgress =  ::Dynamic(new _hx_Closure_1(index1,updateAssetProgress));
HXLINE( 676)			 ::Dynamic onElementLoaded =  ::Dynamic(new _hx_Closure_2(processXmls,index1,updateAssetProgress,loadNextQueueElement,assetCount));
HXLINE( 685)			_gthis->processRawAsset(( (::String)(assetInfo->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ), ::Dynamic(assetInfo->__Field(HX_("asset",f0,69,39,26),hx::paccDynamic)),( ( ::starling::textures::TextureOptions)(assetInfo->__Field(HX_("options",5e,33,fe,df),hx::paccDynamic)) ),xmls,onElementProgress,onElementLoaded);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_4,Float,PROGRESS_PART_ASSETS, ::Dynamic,onProgress,::Array< Float >,assetProgress) HXARGC(2)
            		void _hx_run(int index2,Float progress1){
            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_690_loadQueue)
HXLINE( 691)			assetProgress[index2] = progress1;
HXLINE( 693)			Float sum = ((Float)0.0);
HXLINE( 694)			int len = assetProgress->length;
HXLINE( 696)			{
HXLINE( 696)				int _g1 = (int)0;
HXDLIN( 696)				int _g = len;
HXDLIN( 696)				while((_g1 < _g)){
HXLINE( 696)					_g1 = (_g1 + (int)1);
HXDLIN( 696)					int i1 = (_g1 - (int)1);
HXLINE( 697)					sum = (sum + assetProgress->__get(i1));
            				}
            			}
HXLINE( 699)			onProgress((((Float)sum / (Float)len) * PROGRESS_PART_ASSETS));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,::Array< ::Dynamic>,processXml, ::openfl::_Vector::AbstractVector,xmls) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            			int _hx_run( ::Xml a, ::Xml b){
            				HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_709_loadQueue)
HXLINE( 709)				if ((a->nodeType != ::Xml_obj::Element)) {
HXLINE( 709)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + a->nodeType));
            				}
HXDLIN( 709)				if ((( (::String)(a->nodeName.split(HX_(":",3a,00,00,00))->pop()) ) == HX_("TextureAtlas",90,46,8f,e7))) {
HXLINE( 709)					return (int)-1;
            				}
            				else {
HXLINE( 709)					return (int)1;
            				}
HXDLIN( 709)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_6,::Array< ::Dynamic>,processXml) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_712_loadQueue)
HXLINE( 712)				processXml->__get((int)0)((int)0);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_703_loadQueue)
HXLINE( 708)			::openfl::_Vector::IVector_obj::sort(xmls->data, ::Dynamic(new _hx_Closure_5()));
HXLINE( 712)			::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_6(processXml)),(int)1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S8(hx::LocalFunc,_hx_Closure_9,::Array< ::Dynamic>,processXml, ::starling::utils::AssetManager,_gthis,Float,PROGRESS_PART_ASSETS,::Array< ::Dynamic>,finish,Float,PROGRESS_PART_XMLS,::Array< bool >,canceled, ::openfl::_Vector::AbstractVector,xmls, ::Dynamic,onProgress) HXARGC(1)
            		void _hx_run(int index3){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8, ::Dynamic,f,int,a1) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_770_loadQueue)
HXLINE( 770)				f(a1);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_716_loadQueue)
HXLINE( 717)			if (canceled->__get((int)0)) {
HXLINE( 717)				return;
            			}
            			else {
HXLINE( 718)				if ((index3 == ::openfl::_Vector::IVector_obj::get_length(xmls->data))) {
HXLINE( 720)					finish->__get((int)0)();
HXLINE( 721)					return;
            				}
            			}
HXLINE( 724)			::String name;
HXLINE( 725)			 ::starling::textures::Texture texture;
HXLINE( 726)			 ::Xml xml = ( ( ::Xml)(::openfl::_Vector::IVector_obj::get(xmls->data,index3)) );
HXLINE( 727)			if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE( 727)				HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + xml->nodeType));
            			}
HXDLIN( 727)			::String rootNode = xml->nodeName;
HXLINE( 728)			Float xmlProgress = ((Float)(index3 + (int)1) / (Float)(::openfl::_Vector::IVector_obj::get_length(xmls->data) + (int)1));
HXLINE( 730)			if ((rootNode == HX_("TextureAtlas",90,46,8f,e7))) {
HXLINE( 732)				::String name1 = xml->get(HX_("imagePath",a0,7a,86,2c));
HXDLIN( 732)				name = _gthis->getName(name1);
HXLINE( 733)				texture = _gthis->getTexture(name);
HXLINE( 735)				if (hx::IsNotNull( texture )) {
HXLINE( 737)					_gthis->addTextureAtlas(name, ::starling::textures::TextureAtlas_obj::__alloc( HX_CTX ,texture,xml));
HXLINE( 738)					_gthis->removeTexture(name,false);
HXLINE( 740)					if (_gthis->_hx___keepAtlasXmls) {
HXLINE( 740)						_gthis->addXml(name,xml);
            					}
            				}
            				else {
HXLINE( 746)					_gthis->log(((HX_("Cannot create atlas: texture '",78,60,bf,6d) + name) + HX_("' is missing.",85,83,be,53)));
            				}
            			}
            			else {
HXLINE( 748)				if ((rootNode == HX_("font",cf,5d,c0,43))) {
HXLINE( 750)					::String name2 = ( ( ::Xml)(( ( ::Xml)(xml->elementsNamed(HX_("pages",44,2b,4d,bd))->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) )->elementsNamed(HX_("page",4f,da,51,4a))->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) )->get(HX_("file",7c,ce,bb,43));
HXDLIN( 750)					name = _gthis->getName(name2);
HXLINE( 751)					texture = _gthis->getTexture(name);
HXLINE( 753)					if (hx::IsNotNull( texture )) {
HXLINE( 755)						_gthis->log(((HX_("Adding bitmap font '",c8,84,27,cc) + name) + HX_("'",27,00,00,00)));
HXLINE( 756)						::starling::text::TextField_obj::registerCompositor( ::starling::text::BitmapFont_obj::__alloc( HX_CTX ,texture,xml),name);
HXLINE( 757)						_gthis->removeTexture(name,false);
HXLINE( 759)						if (_gthis->_hx___keepFontXmls) {
HXLINE( 759)							_gthis->addXml(name,xml);
            						}
            					}
            					else {
HXLINE( 764)						_gthis->log(((HX_("Cannot create bitmap font: texture '",83,4f,09,a2) + name) + HX_("' is missing.",85,83,be,53)));
            					}
            				}
            				else {
HXLINE( 767)					HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,(HX_("XML contents not recognized: ",06,d2,45,84) + rootNode),null()));
            				}
            			}
HXLINE( 769)			onProgress((PROGRESS_PART_ASSETS + (PROGRESS_PART_XMLS * xmlProgress)));
HXLINE( 770)			 ::Dynamic f = processXml->__get((int)0);
HXDLIN( 770)			int a1 = (index3 + (int)1);
HXDLIN( 770)			::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_8(f,a1)),(int)1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_10, ::starling::utils::AssetManager,_gthis,::Array< bool >,canceled,::Array< ::Dynamic>,cancel) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_774_loadQueue)
HXLINE( 775)			_gthis->removeEventListener(HX_("cancel",7a,ed,33,b8),cancel->__get((int)0));
HXLINE( 776)			_gthis->_hx___numLoadingQueues--;
HXLINE( 777)			canceled[(int)0] = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_12,::Array< bool >,canceled,::Array< ::Dynamic>,cancel, ::Dynamic,onProgress) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_11,::Array< bool >,canceled,::Array< ::Dynamic>,cancel, ::Dynamic,onProgress) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_788_loadQueue)
HXLINE( 788)				if (!(canceled->__get((int)0))) {
HXLINE( 790)					cancel->__get((int)0)();
HXLINE( 791)					onProgress(((Float)1.0));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_786_loadQueue)
HXLINE( 786)			::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_11(canceled,cancel,onProgress)),(int)1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_622_loadQueue)
HXLINE( 621)		 ::starling::utils::AssetManager _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 623)		if (hx::IsNull( onProgress )) {
HXLINE( 624)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Argument 'onProgress' must not be null",49,9a,59,3f)));
            		}
HXLINE( 626)		if ((this->_hx___queue->length == (int)0)) {
HXLINE( 628)			onProgress(((Float)1.0));
HXLINE( 629)			return;
            		}
HXLINE( 632)		this->_hx___starling = ::starling::core::Starling_obj::get_current();
HXLINE( 634)		bool _hx_tmp;
HXDLIN( 634)		if (hx::IsNotNull( this->_hx___starling )) {
HXLINE( 634)			_hx_tmp = hx::IsNull( this->_hx___starling->get_context() );
            		}
            		else {
HXLINE( 634)			_hx_tmp = true;
            		}
HXDLIN( 634)		if (_hx_tmp) {
HXLINE( 635)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("The Starling instance needs to be ready before assets can be loaded.",52,18,78,db),null()));
            		}
HXLINE( 637)		Float PROGRESS_PART_ASSETS = ((Float)0.9);
HXLINE( 638)		Float PROGRESS_PART_XMLS = (((Float)1.0) - PROGRESS_PART_ASSETS);
HXLINE( 640)		int i;
HXLINE( 641)		::Array< bool > canceled = ::Array_obj< bool >::fromData( _hx_array_data_f35fc6c0_56,1);
HXLINE( 642)		int length = null();
HXDLIN( 642)		bool fixed = null();
HXDLIN( 642)		 ::openfl::_Vector::AbstractVector xmls =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE( 643)		::Array< ::Dynamic> assetInfos = this->_hx___queue->copy();
HXLINE( 644)		::Array< int > assetCount = ::Array_obj< int >::__new(1)->init(0,this->_hx___queue->length);
HXLINE( 645)		::Array< Float > assetProgress = ::Array_obj< Float >::__new(0);
HXLINE( 646)		::Array< int > assetIndex = ::Array_obj< int >::fromData( _hx_array_data_f35fc6c0_57,1);
HXLINE( 648)		 ::Dynamic loadNextQueueElement = null();
HXLINE( 649)		::Array< ::Dynamic> cancel = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 650)		::Array< ::Dynamic> loadQueueElement = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 651)		::Array< ::Dynamic> updateAssetProgress = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 652)		::Array< ::Dynamic> processXmls = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 653)		::Array< ::Dynamic> processXml = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 654)		::Array< ::Dynamic> finish = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 655)		 ::Dynamic resume = null();
HXLINE( 657)		loadNextQueueElement =  ::Dynamic(new _hx_Closure_0(assetIndex,loadQueueElement,assetInfos));
HXLINE( 668)		loadQueueElement[(int)0] =  ::Dynamic(new _hx_Closure_3(_gthis,canceled,processXmls,xmls,updateAssetProgress,assetCount,loadNextQueueElement));
HXLINE( 689)		updateAssetProgress[(int)0] =  ::Dynamic(new _hx_Closure_4(PROGRESS_PART_ASSETS,onProgress,assetProgress));
HXLINE( 702)		processXmls[(int)0] =  ::Dynamic(new _hx_Closure_7(processXml,xmls));
HXLINE( 715)		processXml[(int)0] =  ::Dynamic(new _hx_Closure_9(processXml,_gthis,PROGRESS_PART_ASSETS,finish,PROGRESS_PART_XMLS,canceled,xmls,onProgress));
HXLINE( 773)		cancel[(int)0] =  ::Dynamic(new _hx_Closure_10(_gthis,canceled,cancel));
HXLINE( 780)		finish[(int)0] =  ::Dynamic(new _hx_Closure_12(canceled,cancel,onProgress));
HXLINE( 796)		{
HXLINE( 796)			int _g11 = (int)0;
HXDLIN( 796)			int _g2 = assetCount->__get((int)0);
HXDLIN( 796)			while((_g11 < _g2)){
HXLINE( 796)				_g11 = (_g11 + (int)1);
HXDLIN( 796)				int i2 = (_g11 - (int)1);
HXLINE( 797)				assetProgress[i2] = ((Float)0.0);
            			}
            		}
HXLINE( 799)		{
HXLINE( 799)			int _g12 = (int)0;
HXDLIN( 799)			int _g3 = this->_hx___numConnections;
HXDLIN( 799)			while((_g12 < _g3)){
HXLINE( 799)				_g12 = (_g12 + (int)1);
HXDLIN( 799)				int i3 = (_g12 - (int)1);
HXLINE( 800)				loadNextQueueElement();
            			}
            		}
HXLINE( 802)		::starling::utils::ArrayUtil_obj::clear(this->_hx___queue);
HXLINE( 803)		this->_hx___numLoadingQueues++;
HXLINE( 804)		this->addEventListener(HX_("cancel",7a,ed,33,b8),cancel->__get((int)0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,loadQueue,(void))

void AssetManager_obj::processRawAsset(::String name, ::Dynamic rawAsset, ::starling::textures::TextureOptions options, ::openfl::_Vector::AbstractVector xmls, ::Dynamic onProgress, ::Dynamic onComplete){
            		HX_BEGIN_LOCAL_FUNC_S9(hx::LocalFunc,_hx_Closure_7,::String,name, ::Dynamic,rawAsset, ::starling::utils::AssetManager,_gthis, ::starling::textures::TextureOptions,options, ::Dynamic,onComplete,::Array< bool >,canceled,::Array< ::Dynamic>,process1, ::openfl::_Vector::AbstractVector,xmls,::Array< ::Dynamic>,cancel) HXARGC(1)
            		void _hx_run( ::Dynamic asset){
            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_817_processRawAsset)
HXLINE( 817)			::cpp::VirtualArray asset1 = ::cpp::VirtualArray_obj::__new(1)->init(0,asset);
HXLINE( 819)			::Array< ::Dynamic> texture = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 820)			 ::openfl::utils::ByteArrayData bytes;
HXLINE( 821)			 ::Dynamic object = null();
HXLINE( 822)			 ::Xml xml = null();
HXLINE( 826)			_gthis->_hx___starling->makeCurrent();
HXLINE( 828)			if (!(canceled->__get((int)0))) {
HXLINE( 832)				if (hx::IsNull( asset1->__get((int)0) )) {
HXLINE( 834)					onComplete();
            				}
            				else {
HXLINE( 836)					if (::Std_obj::is(asset1->__get((int)0),hx::ClassOf< ::openfl::media::Sound >())) {
HXLINE( 838)						_gthis->addSound(name,( ( ::openfl::media::Sound)(asset1->__get((int)0)) ));
HXLINE( 839)						onComplete();
            					}
            					else {
HXLINE( 841)						if (::Std_obj::is(asset1->__get((int)0),hx::ClassOf< ::Xml >())) {
HXLINE( 843)							xml = ( ( ::Xml)(asset1->__get((int)0)) );
HXLINE( 844)							xml = xml->firstElement();
HXLINE( 846)							bool _hx_tmp;
HXDLIN( 846)							if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE( 846)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + xml->nodeType));
            							}
HXDLIN( 846)							if ((xml->nodeName != HX_("TextureAtlas",90,46,8f,e7))) {
HXLINE( 846)								if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE( 846)									HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + xml->nodeType));
            								}
HXDLIN( 846)								_hx_tmp = (xml->nodeName == HX_("font",cf,5d,c0,43));
            							}
            							else {
HXLINE( 846)								_hx_tmp = true;
            							}
HXDLIN( 846)							if (_hx_tmp) {
HXLINE( 847)								::openfl::_Vector::IVector_obj::push(xmls->data,xml);
            							}
            							else {
HXLINE( 849)								_gthis->addXml(name,xml);
            							}
HXLINE( 851)							onComplete();
            						}
            						else {
HXLINE( 853)							if ((_gthis->_hx___starling->get_context()->driverInfo == HX_("Disposed",05,c7,55,01))) {
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::cpp::VirtualArray,asset1,::Array< ::Dynamic>,process1) HXARGC(0)
            								void _hx_run(){
            									HX_STACKFRAME(&_hx_pos_f60597b0968ad328_856_processRawAsset)
HXLINE( 856)									process1->__get((int)0)(asset1->__get((int)0));
            								}
            								HX_END_LOCAL_FUNC0((void))

HXLINE( 855)								_gthis->log(HX_("Context lost while processing assets, retrying ...",f2,05,f7,58));
HXLINE( 856)								::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_0(asset1,process1)),(int)1);
HXLINE( 857)								return;
            							}
            							else {
HXLINE( 859)								if (::Std_obj::is(asset1->__get((int)0),hx::ClassOf< ::openfl::display::Bitmap >())) {
            									HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1,::String,name, ::starling::utils::AssetManager,_gthis, ::Dynamic,onComplete,::Array< ::Dynamic>,texture) HXARGC(1)
            									void _hx_run( ::starling::textures::Texture _){
            										HX_STACKFRAME(&_hx_pos_f60597b0968ad328_862_processRawAsset)
HXLINE( 863)										_gthis->addTexture(name,texture->__get((int)0).StaticCast<  ::starling::textures::Texture >());
HXLINE( 864)										onComplete();
            									}
            									HX_END_LOCAL_FUNC1((void))

            									HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_3,::String,name, ::Dynamic,rawAsset, ::starling::utils::AssetManager,_gthis,::Array< ::Dynamic>,texture) HXARGC(1)
            									void _hx_run( ::starling::textures::ConcreteTexture _1){
            										HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_2,::String,name, ::starling::utils::AssetManager,_gthis,::Array< ::Dynamic>,texture) HXARGC(1)
            										void _hx_run( ::Dynamic asset2){
            											HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_872_processRawAsset)
HXLINE( 873)											try {
            												HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE( 875)												if (hx::IsNull( asset2 )) {
HXLINE( 875)													HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Reload failed",84,a7,28,66),null()));
            												}
HXLINE( 876)												 ::starling::textures::ConcreteTexture _hx_tmp4 = texture->__get((int)0).StaticCast<  ::starling::textures::Texture >()->get_root();
HXDLIN( 876)												_hx_tmp4->uploadBitmap(hx::TCast<  ::openfl::display::Bitmap >::cast(asset2),null());
HXLINE( 877)												 ::Dynamic(asset2->__Field(HX_("bitmapData",b9,b5,c0,33),hx::paccDynamic))->__Field(HX_("dispose",9f,80,4c,bb),hx::paccDynamic)();
            											}
            											catch( ::Dynamic _hx_e){
            												if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            													HX_STACK_BEGIN_CATCH
            													 ::openfl::errors::Error e = _hx_e;
HXLINE( 881)													_gthis->log((((HX_("Texture restoration failed for '",f4,a1,4d,93) + name) + HX_("': ",8d,ca,1d,00)) + e->message));
            												}
            												else {
            													HX_STACK_DO_THROW(_hx_e);
            												}
            											}
HXLINE( 884)											_gthis->_hx___numRestoredTextures++;
HXLINE( 885)											::starling::core::Starling_obj::get_current()->get_stage()->setRequiresRedraw();
HXLINE( 887)											if ((_gthis->_hx___numLostTextures == _gthis->_hx___numRestoredTextures)) {
HXLINE( 888)												_gthis->dispatchEventWith(HX_("texturesRestored",ae,a8,48,be),null(),null());
            											}
            										}
            										HX_END_LOCAL_FUNC1((void))

            										HX_STACKFRAME(&_hx_pos_f60597b0968ad328_869_processRawAsset)
HXLINE( 870)										_gthis->_hx___numLostTextures++;
HXLINE( 871)										_gthis->loadRawAsset(rawAsset,null(), ::Dynamic(new _hx_Closure_2(name,_gthis,texture)));
            									}
            									HX_END_LOCAL_FUNC1((void))

HXLINE( 861)									 ::Dynamic _hx_tmp1 = options->get_onReady();
HXDLIN( 861)									 ::Dynamic _hx_tmp2 = _gthis->prependCallback(_hx_tmp1, ::Dynamic(new _hx_Closure_1(name,_gthis,onComplete,texture)));
HXDLIN( 861)									options->set_onReady(_hx_tmp2);
HXLINE( 867)									 ::starling::textures::Texture _hx_tmp3 = ::starling::textures::Texture_obj::fromData(asset1->__get((int)0),options);
HXDLIN( 867)									texture[(int)0] = _hx_tmp3;
HXLINE( 868)									texture->__get((int)0).StaticCast<  ::starling::textures::Texture >()->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_3(name,rawAsset,_gthis,texture)));
            								}
            								else {
HXLINE( 892)									if (::Std_obj::is(asset1->__get((int)0),hx::ClassOf< ::openfl::utils::ByteArrayData >())) {
HXLINE( 894)										bytes = ( ( ::openfl::utils::ByteArrayData)(asset1->__get((int)0)) );
HXLINE( 896)										if (::starling::textures::AtfData_obj::isAtfData(bytes)) {
            											HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_4,::String,name, ::starling::utils::AssetManager,_gthis, ::Dynamic,onComplete,::Array< ::Dynamic>,texture) HXARGC(1)
            											void _hx_run( ::starling::textures::Texture _2){
            												HX_STACKFRAME(&_hx_pos_f60597b0968ad328_899_processRawAsset)
HXLINE( 900)												_gthis->addTexture(name,texture->__get((int)0).StaticCast<  ::starling::textures::Texture >());
HXLINE( 901)												onComplete();
            											}
            											HX_END_LOCAL_FUNC1((void))

            											HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_6,::String,name, ::Dynamic,rawAsset, ::starling::utils::AssetManager,_gthis,::Array< ::Dynamic>,texture) HXARGC(1)
            											void _hx_run( ::starling::textures::ConcreteTexture _3){
            												HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_5,::String,name, ::starling::utils::AssetManager,_gthis,::Array< ::Dynamic>,texture) HXARGC(1)
            												void _hx_run( ::Dynamic asset3){
            													HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_909_processRawAsset)
HXLINE( 910)													try {
            														HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE( 912)														if (hx::IsNull( asset3 )) {
HXLINE( 912)															HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Reload failed",84,a7,28,66),null()));
            														}
HXLINE( 913)														 ::starling::textures::ConcreteTexture _hx_tmp8 = texture->__get((int)0).StaticCast<  ::starling::textures::Texture >()->get_root();
HXDLIN( 913)														_hx_tmp8->uploadAtfData(hx::TCast<  ::openfl::utils::ByteArrayData >::cast(asset3),(int)0,null());
HXLINE( 914)														asset3->__Field(HX_("clear",8d,71,5b,48),hx::paccDynamic)();
            													}
            													catch( ::Dynamic _hx_e){
            														if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            															HX_STACK_BEGIN_CATCH
            															 ::openfl::errors::Error e1 = _hx_e;
HXLINE( 918)															_gthis->log((((HX_("Texture restoration failed for '",f4,a1,4d,93) + name) + HX_("': ",8d,ca,1d,00)) + e1->message));
            														}
            														else {
            															HX_STACK_DO_THROW(_hx_e);
            														}
            													}
HXLINE( 921)													_gthis->_hx___numRestoredTextures++;
HXLINE( 922)													::starling::core::Starling_obj::get_current()->get_stage()->setRequiresRedraw();
HXLINE( 924)													if ((_gthis->_hx___numLostTextures == _gthis->_hx___numRestoredTextures)) {
HXLINE( 925)														_gthis->dispatchEventWith(HX_("texturesRestored",ae,a8,48,be),null(),null());
            													}
            												}
            												HX_END_LOCAL_FUNC1((void))

            												HX_STACKFRAME(&_hx_pos_f60597b0968ad328_906_processRawAsset)
HXLINE( 907)												_gthis->_hx___numLostTextures++;
HXLINE( 908)												_gthis->loadRawAsset(rawAsset,null(), ::Dynamic(new _hx_Closure_5(name,_gthis,texture)));
            											}
            											HX_END_LOCAL_FUNC1((void))

HXLINE( 898)											 ::Dynamic _hx_tmp5 = options->get_onReady();
HXDLIN( 898)											 ::Dynamic _hx_tmp6 = _gthis->prependCallback(_hx_tmp5, ::Dynamic(new _hx_Closure_4(name,_gthis,onComplete,texture)));
HXDLIN( 898)											options->set_onReady(_hx_tmp6);
HXLINE( 904)											 ::starling::textures::Texture _hx_tmp7 = ::starling::textures::Texture_obj::fromData(bytes,options);
HXDLIN( 904)											texture[(int)0] = _hx_tmp7;
HXLINE( 905)											texture->__get((int)0).StaticCast<  ::starling::textures::Texture >()->get_root()->set_onRestore( ::Dynamic(new _hx_Closure_6(name,rawAsset,_gthis,texture)));
HXLINE( 929)											bytes->clear();
            										}
            										else {
HXLINE( 931)											bool _hx_tmp9;
HXDLIN( 931)											if (!(_gthis->byteArrayStartsWith(bytes,HX_("{",7b,00,00,00)))) {
HXLINE( 931)												_hx_tmp9 = _gthis->byteArrayStartsWith(bytes,HX_("[",5b,00,00,00));
            											}
            											else {
HXLINE( 931)												_hx_tmp9 = true;
            											}
HXDLIN( 931)											if (_hx_tmp9) {
HXLINE( 933)												try {
            													HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE( 933)													object =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,bytes->readUTFBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes)))->parseRec();
            												}
            												catch( ::Dynamic _hx_e){
            													if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            														HX_STACK_BEGIN_CATCH
            														 ::openfl::errors::Error e2 = _hx_e;
HXLINE( 936)														_gthis->log((HX_("Could not parse JSON: ",67,c2,91,57) + e2->message));
HXLINE( 937)														_gthis->dispatchEventWith(HX_("parseError",95,12,0b,9d),false,name);
            													}
            													else {
            														HX_STACK_DO_THROW(_hx_e);
            													}
            												}
HXLINE( 940)												if (( (bool)(object) )) {
HXLINE( 940)													_gthis->addObject(name,object);
            												}
HXLINE( 942)												bytes->clear();
HXLINE( 943)												onComplete();
            											}
            											else {
HXLINE( 945)												if (_gthis->byteArrayStartsWith(bytes,HX_("<",3c,00,00,00))) {
HXLINE( 947)													try {
            														HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE( 947)														xml = ::Xml_obj::parse(bytes->toString());
            													}
            													catch( ::Dynamic _hx_e){
            														if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            															HX_STACK_BEGIN_CATCH
            															 ::openfl::errors::Error e3 = _hx_e;
HXLINE( 950)															_gthis->log((HX_("Could not parse XML: ",a4,e2,c7,b4) + e3->message));
HXLINE( 951)															_gthis->dispatchEventWith(HX_("parseError",95,12,0b,9d),false,name);
            														}
            														else {
            															HX_STACK_DO_THROW(_hx_e);
            														}
            													}
HXLINE( 954)													process1->__get((int)0)(xml);
HXLINE( 955)													bytes->clear();
            												}
            												else {
HXLINE( 959)													_gthis->addByteArray(name,bytes);
HXLINE( 960)													onComplete();
            												}
            											}
            										}
            									}
            									else {
HXLINE( 965)										_gthis->addObject(name,asset1->__get((int)0));
HXLINE( 966)										onComplete();
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 970)			asset1->set((int)0,null());
HXLINE( 971)			bytes = null();
HXLINE( 973)			_gthis->removeEventListener(HX_("cancel",7a,ed,33,b8),cancel->__get((int)0));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::Array< bool >,canceled, ::Dynamic,onProgress) HXARGC(1)
            		void _hx_run(Float ratio){
            			HX_STACKFRAME(&_hx_pos_f60597b0968ad328_978_processRawAsset)
HXLINE( 978)			if (!(canceled->__get((int)0))) {
HXLINE( 978)				onProgress(ratio);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_9,::Array< bool >,canceled) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_f60597b0968ad328_983_processRawAsset)
HXLINE( 983)			canceled[(int)0] = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_810_processRawAsset)
HXLINE( 807)		 ::starling::utils::AssetManager _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 811)		::Array< bool > canceled = ::Array_obj< bool >::fromData( _hx_array_data_f35fc6c0_69,1);
HXLINE( 813)		::Array< ::Dynamic> cancel = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 814)		 ::Dynamic progress = null();
HXLINE( 815)		 ::Dynamic process = null();
HXLINE( 817)		::Array< ::Dynamic> process1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 817)		process1[(int)0] =  ::Dynamic(new _hx_Closure_7(name,rawAsset,_gthis,options,onComplete,canceled,process1,xmls,cancel));
HXDLIN( 817)		 ::Dynamic process2 = process1->__get((int)0);
HXLINE( 976)		progress =  ::Dynamic(new _hx_Closure_8(canceled,onProgress));
HXLINE( 981)		cancel[(int)0] =  ::Dynamic(new _hx_Closure_9(canceled));
HXLINE( 986)		this->addEventListener(HX_("cancel",7a,ed,33,b8),cancel->__get((int)0));
HXLINE( 987)		this->loadRawAsset(rawAsset,progress,process2);
            	}


HX_DEFINE_DYNAMIC_FUNC6(AssetManager_obj,processRawAsset,(void))

void AssetManager_obj::loadRawAsset( ::Dynamic rawAsset, ::Dynamic onProgress, ::Dynamic onComplete){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::starling::utils::AssetManager,_gthis,::Array< ::Dynamic>,complete,::Array< ::String >,url) HXARGC(1)
            		void _hx_run( ::openfl::events::IOErrorEvent event){
            			HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1022_loadRawAsset)
HXLINE(1023)			_gthis->log((HX_("IO error: ",34,5a,14,fe) + event->text));
HXLINE(1024)			_gthis->dispatchEventWith(HX_("ioError",02,fe,41,76),false,url->__get((int)0));
HXLINE(1025)			complete->__get((int)0)(null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1, ::starling::utils::AssetManager,_gthis,::Array< ::Dynamic>,complete,::Array< ::String >,url) HXARGC(1)
            		void _hx_run( ::openfl::events::SecurityErrorEvent event1){
            			HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1029_loadRawAsset)
HXLINE(1030)			_gthis->log((HX_("security error: ",0e,9f,93,74) + event1->text));
HXLINE(1031)			_gthis->dispatchEventWith(HX_("securityError",e8,28,7c,a2),false,url->__get((int)0));
HXLINE(1032)			complete->__get((int)0)(null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::starling::utils::AssetManager,_gthis,::Array< ::String >,extension) HXARGC(1)
            		void _hx_run( ::openfl::events::HTTPStatusEvent event2){
            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_1037_loadRawAsset)
HXLINE(1037)			if (hx::IsNull( extension->__get((int)0) )) {
HXLINE(1039)				::cpp::VirtualArray headers = event2->responseHeaders;
HXLINE(1040)				::String contentType = _gthis->getHttpHeader(headers,HX_("Content-Type",ce,69,5d,3c));
HXLINE(1042)				bool onHttpResponseStatus1;
HXDLIN(1042)				if (hx::IsNotNull( contentType )) {
HXLINE(1042)					onHttpResponseStatus1 = hx::IsNotNull(  ::EReg_obj::__alloc( HX_CTX ,HX_("(audio|image)/",b3,9c,7e,07),HX_("",00,00,00,00))->split(contentType) );
            				}
            				else {
HXLINE(1042)					onHttpResponseStatus1 = false;
            				}
HXDLIN(1042)				if (onHttpResponseStatus1) {
HXLINE(1043)					::String onHttpResponseStatus2 = ( (::String)(contentType.split(HX_("/",2f,00,00,00))->pop()) );
HXDLIN(1043)					extension[(int)0] = onHttpResponseStatus2;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::Dynamic,onProgress) HXARGC(1)
            		void _hx_run( ::openfl::events::ProgressEvent event3){
            			HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1049_loadRawAsset)
HXLINE(1049)			bool onLoadProgress1;
HXDLIN(1049)			if (hx::IsNotNull( onProgress )) {
HXLINE(1049)				onLoadProgress1 = (event3->bytesTotal > (int)0);
            			}
            			else {
HXLINE(1049)				onLoadProgress1 = false;
            			}
HXDLIN(1049)			if (onLoadProgress1) {
HXLINE(1050)				onProgress(((Float)event3->bytesLoaded / (Float)event3->bytesTotal));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S8(hx::LocalFunc,_hx_Closure_4, ::Dynamic,onIoError, ::starling::utils::AssetManager,_gthis,::Array< ::String >,extension,::Array< ::Dynamic>,urlLoader,::Array< ::Dynamic>,complete,::Array< ::Dynamic>,loaderInfo,::Array< ::String >,url,::Array< ::Dynamic>,onLoaderComplete) HXARGC(1)
            		void _hx_run( ::Dynamic event4){
            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_1054_loadRawAsset)
HXLINE(1055)			 ::openfl::utils::ByteArrayData bytes = hx::TCast<  ::openfl::utils::ByteArrayData >::cast(urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->data);
HXDLIN(1055)			 ::openfl::utils::ByteArrayData bytes1 = _gthis->transformData(bytes,url->__get((int)0));
HXLINE(1056)			 ::openfl::media::Sound sound;
HXLINE(1058)			if (hx::IsNull( bytes1 )) {
HXLINE(1060)				complete->__get((int)0)(null());
HXLINE(1061)				return;
            			}
HXLINE(1064)			if (hx::IsNotNull( extension->__get((int)0) )) {
HXLINE(1065)				::String onUrlLoaderComplete1 = extension->__get((int)0).toLowerCase();
HXDLIN(1065)				extension[(int)0] = onUrlLoaderComplete1;
            			}
HXLINE(1067)			::String _hx_switch_0 = extension->__get((int)0);
            			if (  (_hx_switch_0==HX_("gif",04,84,4e,00)) ||  (_hx_switch_0==HX_("jpeg",a8,f2,65,46)) ||  (_hx_switch_0==HX_("jpg",e1,d0,50,00)) ||  (_hx_switch_0==HX_("png",a9,5c,55,00)) ){
HXLINE(1075)				 ::openfl::_hx_system::LoaderContext loaderContext =  ::openfl::_hx_system::LoaderContext_obj::__alloc( HX_CTX ,_gthis->_hx___checkPolicyFile,null(),null());
HXLINE(1076)				 ::openfl::display::Loader loader =  ::openfl::display::Loader_obj::__alloc( HX_CTX );
HXLINE(1080)				loaderInfo[(int)0] = loader->contentLoaderInfo;
HXLINE(1081)				loaderInfo->__get((int)0).StaticCast<  ::openfl::display::LoaderInfo >()->addEventListener(HX_("ioError",02,fe,41,76),onIoError,null(),null(),null());
HXLINE(1082)				loaderInfo->__get((int)0).StaticCast<  ::openfl::display::LoaderInfo >()->addEventListener(HX_("complete",b9,00,c8,7f),onLoaderComplete->__get((int)0),null(),null(),null());
HXLINE(1083)				loader->loadBytes(bytes1,loaderContext);
HXLINE(1074)				goto _hx_goto_70;
            			}
            			if (  (_hx_switch_0==HX_("mp3",70,17,53,00)) ||  (_hx_switch_0==HX_("mpeg",85,96,61,48)) ){
HXLINE(1070)				sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1071)				sound->loadCompressedDataFromByteArray(bytes1,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes1));
HXLINE(1072)				bytes1->clear();
HXLINE(1073)				complete->__get((int)0)(sound);
HXLINE(1069)				goto _hx_goto_70;
            			}
            			/* default */{
HXLINE(1085)				complete->__get((int)0)(bytes1);
            			}
            			_hx_goto_70:;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5,::Array< ::Dynamic>,urlLoader,::Array< ::Dynamic>,complete) HXARGC(1)
            		void _hx_run( ::Dynamic event5){
            			HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1090_loadRawAsset)
HXLINE(1091)			urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->data->__Field(HX_("clear",8d,71,5b,48),hx::paccDynamic)();
HXLINE(1092)			complete->__get((int)0)( ::Dynamic( ::Dynamic(event5->__Field(HX_("target",51,f3,ec,86),hx::paccDynamic))->__Field(HX_("content",39,8d,77,19),hx::paccDynamic)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S9(hx::LocalFunc,_hx_Closure_6, ::Dynamic,onIoError, ::Dynamic,onComplete, ::Dynamic,onSecurityError,::Array< ::Dynamic>,urlLoader,::Array< ::Dynamic>,loaderInfo, ::Dynamic,onLoadProgress, ::Dynamic,onHttpResponseStatus, ::Dynamic,onUrlLoaderComplete,::Array< ::Dynamic>,onLoaderComplete) HXARGC(1)
            		void _hx_run( ::Dynamic asset){
            			HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1096_loadRawAsset)
HXLINE(1099)			if (hx::IsNotNull( urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >() )) {
HXLINE(1101)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->removeEventListener(HX_("ioError",02,fe,41,76),onIoError,null());
HXLINE(1102)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->removeEventListener(HX_("securityError",e8,28,7c,a2),onSecurityError,null());
HXLINE(1103)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->removeEventListener(HX_("httpResponseStatus",3b,ae,f6,61),onHttpResponseStatus,null());
HXLINE(1104)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->removeEventListener(HX_("progress",ad,f7,2a,86),onLoadProgress,null());
HXLINE(1105)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->removeEventListener(HX_("complete",b9,00,c8,7f),onUrlLoaderComplete,null());
            			}
HXLINE(1108)			if (hx::IsNotNull( loaderInfo->__get((int)0).StaticCast<  ::openfl::display::LoaderInfo >() )) {
HXLINE(1110)				loaderInfo->__get((int)0).StaticCast<  ::openfl::display::LoaderInfo >()->removeEventListener(HX_("ioError",02,fe,41,76),onIoError,null());
HXLINE(1111)				loaderInfo->__get((int)0).StaticCast<  ::openfl::display::LoaderInfo >()->removeEventListener(HX_("complete",b9,00,c8,7f),onLoaderComplete->__get((int)0),null());
            			}
HXLINE(1123)			onComplete(asset);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_1006_loadRawAsset)
HXLINE(1005)		 ::starling::utils::AssetManager _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(1007)		::Array< ::String > extension = ::Array_obj< ::String >::__new(1)->init(0,null());
HXLINE(1008)		::Array< ::Dynamic> loaderInfo = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(1009)		::Array< ::Dynamic> urlLoader = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(1010)		 ::openfl::net::URLRequest urlRequest = null();
HXLINE(1011)		::Array< ::String > url = ::Array_obj< ::String >::__new(1)->init(0,null());
HXLINE(1013)		::Array< ::Dynamic> complete = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(1014)		 ::Dynamic onIoError = null();
HXLINE(1015)		 ::Dynamic onSecurityError = null();
HXLINE(1016)		 ::Dynamic onHttpResponseStatus = null();
HXLINE(1017)		 ::Dynamic onLoadProgress = null();
HXLINE(1018)		 ::Dynamic onUrlLoaderComplete = null();
HXLINE(1019)		::Array< ::Dynamic> onLoaderComplete = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(1021)		onIoError =  ::Dynamic(new _hx_Closure_0(_gthis,complete,url));
HXLINE(1028)		onSecurityError =  ::Dynamic(new _hx_Closure_1(_gthis,complete,url));
HXLINE(1035)		onHttpResponseStatus =  ::Dynamic(new _hx_Closure_2(_gthis,extension));
HXLINE(1047)		onLoadProgress =  ::Dynamic(new _hx_Closure_3(onProgress));
HXLINE(1053)		onUrlLoaderComplete =  ::Dynamic(new _hx_Closure_4(onIoError,_gthis,extension,urlLoader,complete,loaderInfo,url,onLoaderComplete));
HXLINE(1089)		onLoaderComplete[(int)0] =  ::Dynamic(new _hx_Closure_5(urlLoader,complete));
HXLINE(1095)		complete[(int)0] =  ::Dynamic(new _hx_Closure_6(onIoError,onComplete,onSecurityError,urlLoader,loaderInfo,onLoadProgress,onHttpResponseStatus,onUrlLoaderComplete,onLoaderComplete));
HXLINE(1127)		if (::Std_obj::is(rawAsset,hx::ClassOf< ::hx::Class >())) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_7, ::Dynamic,rawAsset) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1129_loadRawAsset)
HXLINE(1129)				::Type_obj::createInstance(rawAsset,::cpp::VirtualArray_obj::__new(0));
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(1129)			::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_7(rawAsset)),(int)1);
            		}
            		else {
HXLINE(1131)			bool _hx_tmp;
HXDLIN(1131)			if (!(::Std_obj::is(rawAsset,hx::ClassOf< ::String >()))) {
HXLINE(1131)				_hx_tmp = ::Std_obj::is(rawAsset,hx::ClassOf< ::openfl::net::URLRequest >());
            			}
            			else {
HXLINE(1131)				_hx_tmp = true;
            			}
HXDLIN(1131)			if (_hx_tmp) {
HXLINE(1133)				if (::Std_obj::is(rawAsset,hx::ClassOf< ::openfl::net::URLRequest >())) {
HXLINE(1133)					urlRequest = ( ( ::openfl::net::URLRequest)(rawAsset) );
            				}
            				else {
HXLINE(1133)					urlRequest = null();
            				}
HXLINE(1134)				if (hx::IsNull( urlRequest )) {
HXLINE(1135)					urlRequest =  ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,rawAsset);
            				}
HXLINE(1136)				url[(int)0] = urlRequest->url;
HXLINE(1137)				::String _hx_tmp1 = this->getExtensionFromUrl(url->__get((int)0));
HXDLIN(1137)				extension[(int)0] = _hx_tmp1;
HXLINE(1139)				urlLoader[(int)0] =  ::openfl::net::URLLoader_obj::__alloc( HX_CTX ,null());
HXLINE(1140)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->dataFormat = (int)0;
HXLINE(1141)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->addEventListener(HX_("ioError",02,fe,41,76),onIoError,null(),null(),null());
HXLINE(1142)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->addEventListener(HX_("securityError",e8,28,7c,a2),onSecurityError,null(),null(),null());
HXLINE(1143)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->addEventListener(HX_("httpResponseStatus",3b,ae,f6,61),onHttpResponseStatus,null(),null(),null());
HXLINE(1144)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->addEventListener(HX_("progress",ad,f7,2a,86),onLoadProgress,null(),null(),null());
HXLINE(1145)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->addEventListener(HX_("complete",b9,00,c8,7f),onUrlLoaderComplete,null(),null(),null());
HXLINE(1146)				urlLoader->__get((int)0).StaticCast<  ::openfl::net::URLLoader >()->load(urlRequest);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetManager_obj,loadRawAsset,(void))

::String AssetManager_obj::getName( ::Dynamic rawAsset){
            	HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_1159_getName)
HXLINE(1160)		::String name = null();
HXLINE(1162)		if (::Std_obj::is(rawAsset,hx::ClassOf< ::String >())) {
HXLINE(1162)			name = hx::TCast< ::String >::cast(rawAsset);
            		}
            		else {
HXLINE(1163)			if (::Std_obj::is(rawAsset,hx::ClassOf< ::openfl::net::URLRequest >())) {
HXLINE(1163)				name = hx::TCast<  ::openfl::net::URLRequest >::cast(rawAsset)->url;
            			}
            		}
HXLINE(1168)		if (hx::IsNotNull( name )) {
HXLINE(1170)			name =  ::EReg_obj::__alloc( HX_CTX ,HX_("%20",23,3f,1c,00),HX_("g",67,00,00,00))->replace(name,HX_(" ",20,00,00,00));
HXLINE(1171)			name = this->getBasenameFromUrl(name);
HXLINE(1173)			if (hx::IsNotNull( name )) {
HXLINE(1173)				return name;
            			}
            			else {
HXLINE(1174)				HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("Could not extract name from String '",e4,53,33,97) + ::Std_obj::string(rawAsset)) + HX_("'",27,00,00,00))));
            			}
            		}
            		else {
HXLINE(1178)			name = ::Type_obj::getClassName(rawAsset);
HXLINE(1179)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,((HX_("Cannot extract names for objects of type '",d3,f2,e0,60) + name) + HX_("'",27,00,00,00))));
            		}
HXLINE(1168)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getName,return )

 ::openfl::utils::ByteArrayData AssetManager_obj::transformData( ::openfl::utils::ByteArrayData data,::String url){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1192_transformData)
HXDLIN(1192)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,transformData,return )

void AssetManager_obj::log(::String message){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1199_log)
HXDLIN(1199)		if (this->_hx___verbose) {
HXDLIN(1199)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(1199)			_hx_tmp((HX_("[AssetManager] ",7b,2e,59,92) + message),hx::SourceInfo(HX_("AssetManager.hx",61,74,6d,ad),1199,HX_("starling.utils.AssetManager",c0,c6,5f,f3),HX_("log",84,54,52,00)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,log,(void))

bool AssetManager_obj::byteArrayStartsWith( ::openfl::utils::ByteArrayData bytes,::String _hx_char){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1203_byteArrayStartsWith)
HXLINE(1204)		int start = (int)0;
HXLINE(1205)		int length = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes);
HXLINE(1206)		int wanted = _hx_char.charCodeAt((int)0);
HXLINE(1210)		bool _hx_tmp;
HXDLIN(1210)		bool _hx_tmp1;
HXDLIN(1210)		if ((length >= (int)4)) {
HXLINE(1211)			bool _hx_tmp2;
HXDLIN(1211)			bool _hx_tmp3;
HXDLIN(1211)			if ((bytes->b->__get((int)0) == (int)0)) {
HXLINE(1211)				_hx_tmp3 = (bytes->b->__get((int)1) == (int)0);
            			}
            			else {
HXLINE(1211)				_hx_tmp3 = false;
            			}
HXDLIN(1211)			if (_hx_tmp3) {
HXLINE(1211)				_hx_tmp2 = (bytes->b->__get((int)2) == (int)254);
            			}
            			else {
HXLINE(1211)				_hx_tmp2 = false;
            			}
HXDLIN(1211)			if (_hx_tmp2) {
HXLINE(1210)				_hx_tmp1 = (bytes->b->__get((int)3) == (int)255);
            			}
            			else {
HXLINE(1210)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1210)			_hx_tmp1 = false;
            		}
HXDLIN(1210)		if (!(_hx_tmp1)) {
HXLINE(1212)			bool _hx_tmp4;
HXDLIN(1212)			bool _hx_tmp5;
HXDLIN(1212)			if ((bytes->b->__get((int)0) == (int)255)) {
HXLINE(1212)				_hx_tmp5 = (bytes->b->__get((int)1) == (int)254);
            			}
            			else {
HXLINE(1212)				_hx_tmp5 = false;
            			}
HXDLIN(1212)			if (_hx_tmp5) {
HXLINE(1212)				_hx_tmp4 = (bytes->b->__get((int)2) == (int)0);
            			}
            			else {
HXLINE(1212)				_hx_tmp4 = false;
            			}
HXDLIN(1212)			if (_hx_tmp4) {
HXLINE(1210)				_hx_tmp = (bytes->b->__get((int)3) == (int)0);
            			}
            			else {
HXLINE(1210)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1210)			_hx_tmp = true;
            		}
HXDLIN(1210)		if (_hx_tmp) {
HXLINE(1214)			start = (int)4;
            		}
            		else {
HXLINE(1216)			bool _hx_tmp6;
HXDLIN(1216)			bool _hx_tmp7;
HXDLIN(1216)			bool _hx_tmp8;
HXDLIN(1216)			if ((length >= (int)3)) {
HXLINE(1216)				_hx_tmp8 = (bytes->b->__get((int)0) == (int)239);
            			}
            			else {
HXLINE(1216)				_hx_tmp8 = false;
            			}
HXDLIN(1216)			if (_hx_tmp8) {
HXLINE(1216)				_hx_tmp7 = (bytes->b->__get((int)1) == (int)187);
            			}
            			else {
HXLINE(1216)				_hx_tmp7 = false;
            			}
HXDLIN(1216)			if (_hx_tmp7) {
HXLINE(1216)				_hx_tmp6 = (bytes->b->__get((int)2) == (int)191);
            			}
            			else {
HXLINE(1216)				_hx_tmp6 = false;
            			}
HXDLIN(1216)			if (_hx_tmp6) {
HXLINE(1218)				start = (int)3;
            			}
            			else {
HXLINE(1220)				bool _hx_tmp9;
HXDLIN(1220)				bool _hx_tmp10;
HXDLIN(1220)				if ((length >= (int)2)) {
HXLINE(1221)					if ((bytes->b->__get((int)0) == (int)254)) {
HXLINE(1220)						_hx_tmp10 = (bytes->b->__get((int)1) == (int)255);
            					}
            					else {
HXLINE(1220)						_hx_tmp10 = false;
            					}
            				}
            				else {
HXLINE(1220)					_hx_tmp10 = false;
            				}
HXDLIN(1220)				if (!(_hx_tmp10)) {
HXLINE(1221)					if ((bytes->b->__get((int)0) == (int)255)) {
HXLINE(1220)						_hx_tmp9 = (bytes->b->__get((int)1) == (int)254);
            					}
            					else {
HXLINE(1220)						_hx_tmp9 = false;
            					}
            				}
            				else {
HXLINE(1220)					_hx_tmp9 = true;
            				}
HXDLIN(1220)				if (_hx_tmp9) {
HXLINE(1223)					start = (int)2;
            				}
            			}
            		}
HXLINE(1228)		{
HXLINE(1228)			int _g1 = start;
HXDLIN(1228)			int _g = length;
HXDLIN(1228)			while((_g1 < _g)){
HXLINE(1228)				_g1 = (_g1 + (int)1);
HXDLIN(1228)				int i = (_g1 - (int)1);
HXLINE(1230)				int byte = bytes->b->__get(i);
HXLINE(1231)				bool _hx_tmp11;
HXDLIN(1231)				bool _hx_tmp12;
HXDLIN(1231)				bool _hx_tmp13;
HXDLIN(1231)				if ((byte != (int)0)) {
HXLINE(1231)					_hx_tmp13 = (byte == (int)10);
            				}
            				else {
HXLINE(1231)					_hx_tmp13 = true;
            				}
HXDLIN(1231)				if (!(_hx_tmp13)) {
HXLINE(1231)					_hx_tmp12 = (byte == (int)13);
            				}
            				else {
HXLINE(1231)					_hx_tmp12 = true;
            				}
HXDLIN(1231)				if (!(_hx_tmp12)) {
HXLINE(1231)					_hx_tmp11 = (byte == (int)32);
            				}
            				else {
HXLINE(1231)					_hx_tmp11 = true;
            				}
HXDLIN(1231)				if (_hx_tmp11) {
HXLINE(1231)					continue;
            				}
            				else {
HXLINE(1232)					return (byte == wanted);
            				}
            			}
            		}
HXLINE(1235)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,byteArrayStartsWith,return )

 ::openfl::_Vector::AbstractVector AssetManager_obj::getDictionaryKeys( ::haxe::ds::StringMap dictionary,::String __o_prefix, ::openfl::_Vector::AbstractVector out){
::String prefix = __o_prefix.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_1240_getDictionaryKeys)
HXLINE(1241)		if (hx::IsNull( out )) {
HXLINE(1241)			int length = null();
HXDLIN(1241)			bool fixed = null();
HXDLIN(1241)			out =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
HXLINE(1243)		{
HXLINE(1243)			 ::Dynamic name = dictionary->keys();
HXDLIN(1243)			while(( (bool)(name->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1243)				::String name1 = ( (::String)(name->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1244)				if ((name1.indexOf(prefix,null()) == (int)0)) {
HXLINE(1245)					int index = ::openfl::_Vector::IVector_obj::get_length(out->data);
HXDLIN(1245)					::openfl::_Vector::IVector_obj::set(out->data,index,name1);
            				}
            			}
            		}
HXLINE(1247)		::openfl::_Vector::IVector_obj::sort(out->data,this->compare_dyn());
HXLINE(1248)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetManager_obj,getDictionaryKeys,return )

::String AssetManager_obj::getHttpHeader(::cpp::VirtualArray headers,::String headerName){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1252_getHttpHeader)
HXLINE(1253)		if (hx::IsNotNull( headers )) {
HXLINE(1255)			int _g = (int)0;
HXDLIN(1255)			while((_g < headers->get_length())){
HXLINE(1255)				 ::Dynamic header = headers->__get(_g);
HXDLIN(1255)				_g = (_g + (int)1);
HXLINE(1256)				if (hx::IsEq(  ::Dynamic(header->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)),headerName )) {
HXLINE(1256)					return ( (::String)(header->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
            				}
            			}
            		}
HXLINE(1258)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,getHttpHeader,return )

::String AssetManager_obj::getBasenameFromUrl(::String url){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1263_getBasenameFromUrl)
HXLINE(1264)		bool isMatched = ::starling::utils::AssetManager_obj::NAME_REGEX->match(url);
HXLINE(1265)		if (isMatched) {
HXLINE(1265)			return ::starling::utils::AssetManager_obj::NAME_REGEX->matched((int)1);
            		}
            		else {
HXLINE(1266)			return null();
            		}
HXLINE(1265)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getBasenameFromUrl,return )

::String AssetManager_obj::getExtensionFromUrl(::String url){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1271_getExtensionFromUrl)
HXLINE(1272)		bool isMatched = ::starling::utils::AssetManager_obj::NAME_REGEX->match(url);
HXLINE(1273)		if (isMatched) {
HXLINE(1273)			return ::starling::utils::AssetManager_obj::NAME_REGEX->matched((int)2);
            		}
            		else {
HXLINE(1274)			return null();
            		}
HXLINE(1273)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,getExtensionFromUrl,return )

 ::Dynamic AssetManager_obj::prependCallback( ::Dynamic oldCallback, ::Dynamic newCallback){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1282_prependCallback)
HXDLIN(1282)		if (hx::IsNull( oldCallback )) {
HXDLIN(1282)			return newCallback;
            		}
            		else {
HXLINE(1283)			if (hx::IsNull( newCallback )) {
HXLINE(1283)				return oldCallback;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,newCallback, ::Dynamic,oldCallback) HXARGC(1)
            				void _hx_run( ::Dynamic _){
            					HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1285_prependCallback)
HXLINE(1286)					newCallback();
HXLINE(1287)					oldCallback();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1284)				return  ::Dynamic(new _hx_Closure_0(newCallback,oldCallback));
            			}
            		}
HXLINE(1282)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,prependCallback,return )

int AssetManager_obj::compare(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1291_compare)
HXDLIN(1291)		if ((a < b)) {
HXDLIN(1291)			return (int)-1;
            		}
            		else {
HXDLIN(1291)			if ((a > b)) {
HXDLIN(1291)				return (int)1;
            			}
            			else {
HXDLIN(1291)				return (int)0;
            			}
            		}
HXDLIN(1291)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetManager_obj,compare,return )

::cpp::VirtualArray AssetManager_obj::get_queue(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1298_get_queue)
HXDLIN(1298)		return this->_hx___queue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_queue,return )

int AssetManager_obj::get_nu__queuedAssets(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1302_get_nu__queuedAssets)
HXDLIN(1302)		return this->_hx___queue->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_nu__queuedAssets,return )

bool AssetManager_obj::get_verbose(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1307_get_verbose)
HXDLIN(1307)		return this->_hx___verbose;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_verbose,return )

bool AssetManager_obj::set_verbose(bool value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1308_set_verbose)
HXDLIN(1308)		return (this->_hx___verbose = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_verbose,return )

bool AssetManager_obj::get_isLoading(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1312_get_isLoading)
HXDLIN(1312)		return (this->_hx___numLoadingQueues > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_isLoading,return )

bool AssetManager_obj::get_useMipMaps(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1318_get_useMipMaps)
HXDLIN(1318)		return this->_hx___defaultTextureOptions->get_mipMapping();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_useMipMaps,return )

bool AssetManager_obj::set_useMipMaps(bool value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1319_set_useMipMaps)
HXDLIN(1319)		return this->_hx___defaultTextureOptions->set_mipMapping(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_useMipMaps,return )

Float AssetManager_obj::get_scaleFactor(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1324_get_scaleFactor)
HXDLIN(1324)		return this->_hx___defaultTextureOptions->get_scale();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_scaleFactor,return )

Float AssetManager_obj::set_scaleFactor(Float value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1325_set_scaleFactor)
HXDLIN(1325)		return this->_hx___defaultTextureOptions->set_scale(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_scaleFactor,return )

 ::Dynamic AssetManager_obj::get_textureFormat(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1330_get_textureFormat)
HXDLIN(1330)		return ::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(this->_hx___defaultTextureOptions->get_format());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_textureFormat,return )

 ::Dynamic AssetManager_obj::set_textureFormat( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1331_set_textureFormat)
HXDLIN(1331)		 ::starling::textures::TextureOptions _hx_tmp = this->_hx___defaultTextureOptions;
HXDLIN(1331)		return ::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(_hx_tmp->set_format(::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(value)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_textureFormat,return )

bool AssetManager_obj::get_forcePotTextures(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1337_get_forcePotTextures)
HXDLIN(1337)		return this->_hx___defaultTextureOptions->get_forcePotTexture();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_forcePotTextures,return )

bool AssetManager_obj::set_forcePotTextures(bool value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1338_set_forcePotTextures)
HXDLIN(1338)		return this->_hx___defaultTextureOptions->set_forcePotTexture(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_forcePotTextures,return )

bool AssetManager_obj::get_checkPolicyFile(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1344_get_checkPolicyFile)
HXDLIN(1344)		return this->_hx___checkPolicyFile;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_checkPolicyFile,return )

bool AssetManager_obj::set_checkPolicyFile(bool value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1345_set_checkPolicyFile)
HXDLIN(1345)		return (this->_hx___checkPolicyFile = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_checkPolicyFile,return )

bool AssetManager_obj::get_keepAtlasXmls(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1351_get_keepAtlasXmls)
HXDLIN(1351)		return this->_hx___keepAtlasXmls;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_keepAtlasXmls,return )

bool AssetManager_obj::set_keepAtlasXmls(bool value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1352_set_keepAtlasXmls)
HXDLIN(1352)		return (this->_hx___keepAtlasXmls = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_keepAtlasXmls,return )

bool AssetManager_obj::get_keepFontXmls(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1358_get_keepFontXmls)
HXDLIN(1358)		return this->_hx___keepFontXmls;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_keepFontXmls,return )

bool AssetManager_obj::set_keepFontXmls(bool value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1359_set_keepFontXmls)
HXDLIN(1359)		return (this->_hx___keepFontXmls = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_keepFontXmls,return )

int AssetManager_obj::get_numConnections(){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1364_get_numConnections)
HXDLIN(1364)		return this->_hx___numConnections;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetManager_obj,get_numConnections,return )

int AssetManager_obj::set_numConnections(int value){
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_1365_set_numConnections)
HXDLIN(1365)		return (this->_hx___numConnections = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetManager_obj,set_numConnections,return )

::String AssetManager_obj::HTTP_RESPONSE_STATUS;

 ::openfl::_Vector::AbstractVector AssetManager_obj::sNames;

 ::EReg AssetManager_obj::NAME_REGEX;


hx::ObjectPtr< AssetManager_obj > AssetManager_obj::__new(hx::Null< Float >  __o_scaleFactor,hx::Null< bool >  __o_useMipmaps) {
	hx::ObjectPtr< AssetManager_obj > __this = new AssetManager_obj();
	__this->__construct(__o_scaleFactor,__o_useMipmaps);
	return __this;
}

hx::ObjectPtr< AssetManager_obj > AssetManager_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_scaleFactor,hx::Null< bool >  __o_useMipmaps) {
	AssetManager_obj *__this = (AssetManager_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AssetManager_obj), true, "starling.utils.AssetManager"));
	*(void **)__this = AssetManager_obj::_hx_vtable;
	__this->__construct(__o_scaleFactor,__o_useMipmaps);
	return __this;
}

AssetManager_obj::AssetManager_obj()
{
}

void AssetManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetManager);
	HX_MARK_MEMBER_NAME(_hx___starling,"__starling");
	HX_MARK_MEMBER_NAME(_hx___numLostTextures,"__numLostTextures");
	HX_MARK_MEMBER_NAME(_hx___numRestoredTextures,"__numRestoredTextures");
	HX_MARK_MEMBER_NAME(_hx___numLoadingQueues,"__numLoadingQueues");
	HX_MARK_MEMBER_NAME(_hx___defaultTextureOptions,"__defaultTextureOptions");
	HX_MARK_MEMBER_NAME(_hx___checkPolicyFile,"__checkPolicyFile");
	HX_MARK_MEMBER_NAME(_hx___keepAtlasXmls,"__keepAtlasXmls");
	HX_MARK_MEMBER_NAME(_hx___keepFontXmls,"__keepFontXmls");
	HX_MARK_MEMBER_NAME(_hx___numConnections,"__numConnections");
	HX_MARK_MEMBER_NAME(_hx___verbose,"__verbose");
	HX_MARK_MEMBER_NAME(_hx___queue,"__queue");
	HX_MARK_MEMBER_NAME(_hx___textures,"__textures");
	HX_MARK_MEMBER_NAME(_hx___atlases,"__atlases");
	HX_MARK_MEMBER_NAME(_hx___sounds,"__sounds");
	HX_MARK_MEMBER_NAME(_hx___xmls,"__xmls");
	HX_MARK_MEMBER_NAME(_hx___objects,"__objects");
	HX_MARK_MEMBER_NAME(_hx___byteArrays,"__byteArrays");
	 ::starling::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AssetManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___starling,"__starling");
	HX_VISIT_MEMBER_NAME(_hx___numLostTextures,"__numLostTextures");
	HX_VISIT_MEMBER_NAME(_hx___numRestoredTextures,"__numRestoredTextures");
	HX_VISIT_MEMBER_NAME(_hx___numLoadingQueues,"__numLoadingQueues");
	HX_VISIT_MEMBER_NAME(_hx___defaultTextureOptions,"__defaultTextureOptions");
	HX_VISIT_MEMBER_NAME(_hx___checkPolicyFile,"__checkPolicyFile");
	HX_VISIT_MEMBER_NAME(_hx___keepAtlasXmls,"__keepAtlasXmls");
	HX_VISIT_MEMBER_NAME(_hx___keepFontXmls,"__keepFontXmls");
	HX_VISIT_MEMBER_NAME(_hx___numConnections,"__numConnections");
	HX_VISIT_MEMBER_NAME(_hx___verbose,"__verbose");
	HX_VISIT_MEMBER_NAME(_hx___queue,"__queue");
	HX_VISIT_MEMBER_NAME(_hx___textures,"__textures");
	HX_VISIT_MEMBER_NAME(_hx___atlases,"__atlases");
	HX_VISIT_MEMBER_NAME(_hx___sounds,"__sounds");
	HX_VISIT_MEMBER_NAME(_hx___xmls,"__xmls");
	HX_VISIT_MEMBER_NAME(_hx___objects,"__objects");
	HX_VISIT_MEMBER_NAME(_hx___byteArrays,"__byteArrays");
	 ::starling::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val AssetManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { return hx::Val( log_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"purge") ) { return hx::Val( purge_dyn() ); }
		if (HX_FIELD_EQ(inName,"queue") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_queue() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__xmls") ) { return hx::Val( _hx___xmls ); }
		if (HX_FIELD_EQ(inName,"getXml") ) { return hx::Val( getXml_dyn() ); }
		if (HX_FIELD_EQ(inName,"addXml") ) { return hx::Val( addXml_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__queue") ) { return hx::Val( _hx___queue ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"enqueue") ) { return hx::Val( enqueue_dyn() ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn() ); }
		if (HX_FIELD_EQ(inName,"verbose") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_verbose() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__sounds") ) { return hx::Val( _hx___sounds ); }
		if (HX_FIELD_EQ(inName,"getSound") ) { return hx::Val( getSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSound") ) { return hx::Val( addSound_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__verbose") ) { return hx::Val( _hx___verbose ); }
		if (HX_FIELD_EQ(inName,"__atlases") ) { return hx::Val( _hx___atlases ); }
		if (HX_FIELD_EQ(inName,"__objects") ) { return hx::Val( _hx___objects ); }
		if (HX_FIELD_EQ(inName,"playSound") ) { return hx::Val( playSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getObject") ) { return hx::Val( getObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeXml") ) { return hx::Val( removeXml_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadQueue") ) { return hx::Val( loadQueue_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_queue") ) { return hx::Val( get_queue_dyn() ); }
		if (HX_FIELD_EQ(inName,"isLoading") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_isLoading() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__starling") ) { return hx::Val( _hx___starling ); }
		if (HX_FIELD_EQ(inName,"__textures") ) { return hx::Val( _hx___textures ); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"addTexture") ) { return hx::Val( addTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"purgeQueue") ) { return hx::Val( purgeQueue_dyn() ); }
		if (HX_FIELD_EQ(inName,"useMipMaps") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_useMipMaps() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getTextures") ) { return hx::Val( getTextures_dyn() ); }
		if (HX_FIELD_EQ(inName,"getXmlNames") ) { return hx::Val( getXmlNames_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeSound") ) { return hx::Val( removeSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_verbose") ) { return hx::Val( get_verbose_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_verbose") ) { return hx::Val( set_verbose_dyn() ); }
		if (HX_FIELD_EQ(inName,"scaleFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleFactor() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__byteArrays") ) { return hx::Val( _hx___byteArrays ); }
		if (HX_FIELD_EQ(inName,"getByteArray") ) { return hx::Val( getByteArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"addByteArray") ) { return hx::Val( addByteArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeObject") ) { return hx::Val( removeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadRawAsset") ) { return hx::Val( loadRawAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"keepFontXmls") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_keepFontXmls() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getSoundNames") ) { return hx::Val( getSoundNames_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeTexture") ) { return hx::Val( removeTexture_dyn() ); }
		if (HX_FIELD_EQ(inName,"transformData") ) { return hx::Val( transformData_dyn() ); }
		if (HX_FIELD_EQ(inName,"getHttpHeader") ) { return hx::Val( getHttpHeader_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isLoading") ) { return hx::Val( get_isLoading_dyn() ); }
		if (HX_FIELD_EQ(inName,"textureFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_textureFormat() ); }
		if (HX_FIELD_EQ(inName,"keepAtlasXmls") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_keepAtlasXmls() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__keepFontXmls") ) { return hx::Val( _hx___keepFontXmls ); }
		if (HX_FIELD_EQ(inName,"getObjectNames") ) { return hx::Val( getObjectNames_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_useMipMaps") ) { return hx::Val( get_useMipMaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_useMipMaps") ) { return hx::Val( set_useMipMaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"numConnections") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numConnections() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__keepAtlasXmls") ) { return hx::Val( _hx___keepAtlasXmls ); }
		if (HX_FIELD_EQ(inName,"getTextureNames") ) { return hx::Val( getTextureNames_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextureAtlas") ) { return hx::Val( getTextureAtlas_dyn() ); }
		if (HX_FIELD_EQ(inName,"addTextureAtlas") ) { return hx::Val( addTextureAtlas_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeByteArray") ) { return hx::Val( removeByteArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"enqueueWithName") ) { return hx::Val( enqueueWithName_dyn() ); }
		if (HX_FIELD_EQ(inName,"processRawAsset") ) { return hx::Val( processRawAsset_dyn() ); }
		if (HX_FIELD_EQ(inName,"prependCallback") ) { return hx::Val( prependCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleFactor") ) { return hx::Val( get_scaleFactor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleFactor") ) { return hx::Val( set_scaleFactor_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkPolicyFile") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_checkPolicyFile() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__numConnections") ) { return hx::Val( _hx___numConnections ); }
		if (HX_FIELD_EQ(inName,"nu__queuedAssets") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_nu__queuedAssets() ); }
		if (HX_FIELD_EQ(inName,"forcePotTextures") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_forcePotTextures() ); }
		if (HX_FIELD_EQ(inName,"get_keepFontXmls") ) { return hx::Val( get_keepFontXmls_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_keepFontXmls") ) { return hx::Val( set_keepFontXmls_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__numLostTextures") ) { return hx::Val( _hx___numLostTextures ); }
		if (HX_FIELD_EQ(inName,"__checkPolicyFile") ) { return hx::Val( _hx___checkPolicyFile ); }
		if (HX_FIELD_EQ(inName,"getByteArrayNames") ) { return hx::Val( getByteArrayNames_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDictionaryKeys") ) { return hx::Val( getDictionaryKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_textureFormat") ) { return hx::Val( get_textureFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_textureFormat") ) { return hx::Val( set_textureFormat_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_keepAtlasXmls") ) { return hx::Val( get_keepAtlasXmls_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_keepAtlasXmls") ) { return hx::Val( set_keepAtlasXmls_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__numLoadingQueues") ) { return hx::Val( _hx___numLoadingQueues ); }
		if (HX_FIELD_EQ(inName,"removeTextureAtlas") ) { return hx::Val( removeTextureAtlas_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBasenameFromUrl") ) { return hx::Val( getBasenameFromUrl_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numConnections") ) { return hx::Val( get_numConnections_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_numConnections") ) { return hx::Val( set_numConnections_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"byteArrayStartsWith") ) { return hx::Val( byteArrayStartsWith_dyn() ); }
		if (HX_FIELD_EQ(inName,"getExtensionFromUrl") ) { return hx::Val( getExtensionFromUrl_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_checkPolicyFile") ) { return hx::Val( get_checkPolicyFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_checkPolicyFile") ) { return hx::Val( set_checkPolicyFile_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getTextureAtlasNames") ) { return hx::Val( getTextureAtlasNames_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_nu__queuedAssets") ) { return hx::Val( get_nu__queuedAssets_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_forcePotTextures") ) { return hx::Val( get_forcePotTextures_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_forcePotTextures") ) { return hx::Val( set_forcePotTextures_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__numRestoredTextures") ) { return hx::Val( _hx___numRestoredTextures ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__defaultTextureOptions") ) { return hx::Val( _hx___defaultTextureOptions ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AssetManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sNames") ) { outValue = ( sNames ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"NAME_REGEX") ) { outValue = ( NAME_REGEX ); return true; }
	}
	return false;
}

hx::Val AssetManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__xmls") ) { _hx___xmls=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__queue") ) { _hx___queue=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"verbose") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_verbose(inValue.Cast< bool >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__sounds") ) { _hx___sounds=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__verbose") ) { _hx___verbose=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__atlases") ) { _hx___atlases=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__objects") ) { _hx___objects=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__starling") ) { _hx___starling=inValue.Cast<  ::starling::core::Starling >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textures") ) { _hx___textures=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useMipMaps") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_useMipMaps(inValue.Cast< bool >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scaleFactor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleFactor(inValue.Cast< Float >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__byteArrays") ) { _hx___byteArrays=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keepFontXmls") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_keepFontXmls(inValue.Cast< bool >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textureFormat(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"keepAtlasXmls") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_keepAtlasXmls(inValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__keepFontXmls") ) { _hx___keepFontXmls=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numConnections") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_numConnections(inValue.Cast< int >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__keepAtlasXmls") ) { _hx___keepAtlasXmls=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checkPolicyFile") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_checkPolicyFile(inValue.Cast< bool >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__numConnections") ) { _hx___numConnections=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forcePotTextures") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_forcePotTextures(inValue.Cast< bool >()) ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__numLostTextures") ) { _hx___numLostTextures=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__checkPolicyFile") ) { _hx___checkPolicyFile=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__numLoadingQueues") ) { _hx___numLoadingQueues=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__numRestoredTextures") ) { _hx___numRestoredTextures=inValue.Cast< int >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__defaultTextureOptions") ) { _hx___defaultTextureOptions=inValue.Cast<  ::starling::textures::TextureOptions >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AssetManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sNames") ) { sNames=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"NAME_REGEX") ) { NAME_REGEX=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

void AssetManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__starling","\xe8","\xbf","\x9a","\xe0"));
	outFields->push(HX_HCSTRING("__numLostTextures","\x82","\x8d","\x42","\xcf"));
	outFields->push(HX_HCSTRING("__numRestoredTextures","\xf4","\x3d","\x13","\xcf"));
	outFields->push(HX_HCSTRING("__numLoadingQueues","\x58","\xaa","\x4b","\xfd"));
	outFields->push(HX_HCSTRING("__defaultTextureOptions","\x44","\x29","\x7c","\xc3"));
	outFields->push(HX_HCSTRING("__checkPolicyFile","\x56","\x4f","\xf0","\x32"));
	outFields->push(HX_HCSTRING("__keepAtlasXmls","\x42","\xb9","\x67","\xd7"));
	outFields->push(HX_HCSTRING("__keepFontXmls","\xf0","\x68","\x57","\x46"));
	outFields->push(HX_HCSTRING("__numConnections","\x0f","\x79","\xa0","\x19"));
	outFields->push(HX_HCSTRING("__verbose","\x62","\x28","\x08","\xf3"));
	outFields->push(HX_HCSTRING("__queue","\x71","\xe6","\x48","\xc8"));
	outFields->push(HX_HCSTRING("__textures","\x58","\x6a","\x07","\x09"));
	outFields->push(HX_HCSTRING("__atlases","\x59","\x1f","\x12","\x14"));
	outFields->push(HX_HCSTRING("__sounds","\xe4","\x13","\x5e","\xda"));
	outFields->push(HX_HCSTRING("__xmls","\xdc","\x11","\x9d","\xfe"));
	outFields->push(HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03"));
	outFields->push(HX_HCSTRING("__byteArrays","\x02","\x7d","\x88","\xc8"));
	outFields->push(HX_HCSTRING("queue","\x91","\x8d","\xea","\x5d"));
	outFields->push(HX_HCSTRING("nu__queuedAssets","\x3d","\x08","\x30","\x4f"));
	outFields->push(HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"));
	outFields->push(HX_HCSTRING("isLoading","\xb2","\x4b","\xf1","\x0c"));
	outFields->push(HX_HCSTRING("useMipMaps","\x84","\xf8","\xdf","\x62"));
	outFields->push(HX_HCSTRING("scaleFactor","\xf9","\x5e","\x11","\xd0"));
	outFields->push(HX_HCSTRING("textureFormat","\x72","\x62","\xa6","\x90"));
	outFields->push(HX_HCSTRING("forcePotTextures","\xc2","\x55","\x20","\x0c"));
	outFields->push(HX_HCSTRING("checkPolicyFile","\x76","\x1e","\x96","\xaf"));
	outFields->push(HX_HCSTRING("keepAtlasXmls","\x62","\x80","\xb5","\x4f"));
	outFields->push(HX_HCSTRING("keepFontXmls","\xd0","\xe5","\x96","\x25"));
	outFields->push(HX_HCSTRING("numConnections","\xef","\xed","\x60","\xe5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AssetManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::core::Starling*/ ,(int)offsetof(AssetManager_obj,_hx___starling),HX_HCSTRING("__starling","\xe8","\xbf","\x9a","\xe0")},
	{hx::fsInt,(int)offsetof(AssetManager_obj,_hx___numLostTextures),HX_HCSTRING("__numLostTextures","\x82","\x8d","\x42","\xcf")},
	{hx::fsInt,(int)offsetof(AssetManager_obj,_hx___numRestoredTextures),HX_HCSTRING("__numRestoredTextures","\xf4","\x3d","\x13","\xcf")},
	{hx::fsInt,(int)offsetof(AssetManager_obj,_hx___numLoadingQueues),HX_HCSTRING("__numLoadingQueues","\x58","\xaa","\x4b","\xfd")},
	{hx::fsObject /*::starling::textures::TextureOptions*/ ,(int)offsetof(AssetManager_obj,_hx___defaultTextureOptions),HX_HCSTRING("__defaultTextureOptions","\x44","\x29","\x7c","\xc3")},
	{hx::fsBool,(int)offsetof(AssetManager_obj,_hx___checkPolicyFile),HX_HCSTRING("__checkPolicyFile","\x56","\x4f","\xf0","\x32")},
	{hx::fsBool,(int)offsetof(AssetManager_obj,_hx___keepAtlasXmls),HX_HCSTRING("__keepAtlasXmls","\x42","\xb9","\x67","\xd7")},
	{hx::fsBool,(int)offsetof(AssetManager_obj,_hx___keepFontXmls),HX_HCSTRING("__keepFontXmls","\xf0","\x68","\x57","\x46")},
	{hx::fsInt,(int)offsetof(AssetManager_obj,_hx___numConnections),HX_HCSTRING("__numConnections","\x0f","\x79","\xa0","\x19")},
	{hx::fsBool,(int)offsetof(AssetManager_obj,_hx___verbose),HX_HCSTRING("__verbose","\x62","\x28","\x08","\xf3")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(AssetManager_obj,_hx___queue),HX_HCSTRING("__queue","\x71","\xe6","\x48","\xc8")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetManager_obj,_hx___textures),HX_HCSTRING("__textures","\x58","\x6a","\x07","\x09")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetManager_obj,_hx___atlases),HX_HCSTRING("__atlases","\x59","\x1f","\x12","\x14")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetManager_obj,_hx___sounds),HX_HCSTRING("__sounds","\xe4","\x13","\x5e","\xda")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetManager_obj,_hx___xmls),HX_HCSTRING("__xmls","\xdc","\x11","\x9d","\xfe")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetManager_obj,_hx___objects),HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetManager_obj,_hx___byteArrays),HX_HCSTRING("__byteArrays","\x02","\x7d","\x88","\xc8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo AssetManager_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &AssetManager_obj::HTTP_RESPONSE_STATUS,HX_HCSTRING("HTTP_RESPONSE_STATUS","\x79","\xde","\x26","\x00")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &AssetManager_obj::sNames,HX_HCSTRING("sNames","\x55","\x7e","\xbc","\x24")},
	{hx::fsObject /*::EReg*/ ,(void *) &AssetManager_obj::NAME_REGEX,HX_HCSTRING("NAME_REGEX","\x73","\x32","\x06","\xf0")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String AssetManager_obj_sMemberFields[] = {
	HX_HCSTRING("__starling","\xe8","\xbf","\x9a","\xe0"),
	HX_HCSTRING("__numLostTextures","\x82","\x8d","\x42","\xcf"),
	HX_HCSTRING("__numRestoredTextures","\xf4","\x3d","\x13","\xcf"),
	HX_HCSTRING("__numLoadingQueues","\x58","\xaa","\x4b","\xfd"),
	HX_HCSTRING("__defaultTextureOptions","\x44","\x29","\x7c","\xc3"),
	HX_HCSTRING("__checkPolicyFile","\x56","\x4f","\xf0","\x32"),
	HX_HCSTRING("__keepAtlasXmls","\x42","\xb9","\x67","\xd7"),
	HX_HCSTRING("__keepFontXmls","\xf0","\x68","\x57","\x46"),
	HX_HCSTRING("__numConnections","\x0f","\x79","\xa0","\x19"),
	HX_HCSTRING("__verbose","\x62","\x28","\x08","\xf3"),
	HX_HCSTRING("__queue","\x71","\xe6","\x48","\xc8"),
	HX_HCSTRING("__textures","\x58","\x6a","\x07","\x09"),
	HX_HCSTRING("__atlases","\x59","\x1f","\x12","\x14"),
	HX_HCSTRING("__sounds","\xe4","\x13","\x5e","\xda"),
	HX_HCSTRING("__xmls","\xdc","\x11","\x9d","\xfe"),
	HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03"),
	HX_HCSTRING("__byteArrays","\x02","\x7d","\x88","\xc8"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getTextures","\xee","\xb9","\xc2","\x8b"),
	HX_HCSTRING("getTextureNames","\xa3","\x92","\x0e","\xb2"),
	HX_HCSTRING("getTextureAtlas","\x26","\x50","\x67","\x42"),
	HX_HCSTRING("getTextureAtlasNames","\xc2","\x65","\x58","\x90"),
	HX_HCSTRING("getSound","\x59","\x9c","\xa3","\xe0"),
	HX_HCSTRING("getSoundNames","\xaf","\x00","\x3c","\x5c"),
	HX_HCSTRING("playSound","\x3b","\xba","\xb0","\xa1"),
	HX_HCSTRING("getXml","\xe1","\xa6","\x2a","\xa3"),
	HX_HCSTRING("getXmlNames","\x27","\xc9","\x79","\x02"),
	HX_HCSTRING("getObject","\xf5","\x07","\x96","\x91"),
	HX_HCSTRING("getObjectNames","\x93","\xff","\x51","\x8d"),
	HX_HCSTRING("getByteArray","\xfb","\xdd","\x1a","\xcb"),
	HX_HCSTRING("getByteArrayNames","\xcd","\x93","\xa9","\x1a"),
	HX_HCSTRING("addTexture","\xba","\xf4","\x6a","\x06"),
	HX_HCSTRING("addTextureAtlas","\x31","\x66","\xcc","\xa5"),
	HX_HCSTRING("addSound","\xee","\xb2","\x29","\xfa"),
	HX_HCSTRING("addXml","\x36","\x7e","\x0c","\x9f"),
	HX_HCSTRING("addObject","\xc0","\xb3","\x63","\xcd"),
	HX_HCSTRING("addByteArray","\x10","\x63","\x18","\xbb"),
	HX_HCSTRING("removeTexture","\xf7","\x24","\x9b","\x77"),
	HX_HCSTRING("removeTextureAtlas","\xd4","\x38","\xb3","\x6b"),
	HX_HCSTRING("removeSound","\xeb","\x69","\x00","\x7f"),
	HX_HCSTRING("removeXml","\xf3","\x8b","\xf6","\xca"),
	HX_HCSTRING("removeObject","\x23","\x1a","\x6d","\x84"),
	HX_HCSTRING("removeByteArray","\x8d","\xdc","\xe2","\xfc"),
	HX_HCSTRING("purgeQueue","\x66","\x77","\xa6","\x0f"),
	HX_HCSTRING("purge","\x2b","\xca","\x8d","\xca"),
	HX_HCSTRING("enqueue","\x88","\x18","\x24","\xc1"),
	HX_HCSTRING("enqueueWithName","\x19","\x2c","\x99","\x2c"),
	HX_HCSTRING("loadQueue","\x8b","\xd9","\x21","\x79"),
	HX_HCSTRING("processRawAsset","\x77","\x80","\x12","\xe8"),
	HX_HCSTRING("loadRawAsset","\x2e","\x87","\x60","\x41"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("transformData","\xb6","\xd5","\xb0","\x6f"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("byteArrayStartsWith","\x48","\x9d","\xad","\xe4"),
	HX_HCSTRING("getDictionaryKeys","\xe0","\xd3","\x7d","\x08"),
	HX_HCSTRING("getHttpHeader","\x6b","\xcb","\xea","\x5d"),
	HX_HCSTRING("getBasenameFromUrl","\xb3","\x60","\x93","\x87"),
	HX_HCSTRING("getExtensionFromUrl","\x1c","\xf7","\xf9","\x13"),
	HX_HCSTRING("prependCallback","\xf3","\xaa","\xbb","\x5e"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("get_queue","\xe8","\xe9","\x93","\xa1"),
	HX_HCSTRING("get_nu__queuedAssets","\x46","\x6d","\x9a","\x6d"),
	HX_HCSTRING("get_verbose","\x99","\x37","\xb4","\xf7"),
	HX_HCSTRING("set_verbose","\xa5","\x3e","\x21","\x02"),
	HX_HCSTRING("get_isLoading","\x89","\x1f","\x55","\xce"),
	HX_HCSTRING("get_useMipMaps","\xcd","\x80","\xd5","\xd8"),
	HX_HCSTRING("set_useMipMaps","\x41","\x69","\xf5","\xf8"),
	HX_HCSTRING("get_scaleFactor","\x90","\x16","\xf3","\x90"),
	HX_HCSTRING("set_scaleFactor","\x9c","\x93","\xbe","\x8c"),
	HX_HCSTRING("get_textureFormat","\xc9","\x6d","\x16","\x97"),
	HX_HCSTRING("set_textureFormat","\xd5","\x45","\x84","\xba"),
	HX_HCSTRING("get_forcePotTextures","\xcb","\xba","\x8a","\x2a"),
	HX_HCSTRING("set_forcePotTextures","\x3f","\x72","\x42","\xf7"),
	HX_HCSTRING("get_checkPolicyFile","\x8d","\xed","\xa0","\x3a"),
	HX_HCSTRING("set_checkPolicyFile","\x99","\xe0","\x3d","\x77"),
	HX_HCSTRING("get_keepAtlasXmls","\xb9","\x8b","\x25","\x56"),
	HX_HCSTRING("set_keepAtlasXmls","\xc5","\x63","\x93","\x79"),
	HX_HCSTRING("get_keepFontXmls","\x59","\xd2","\x35","\x2a"),
	HX_HCSTRING("set_keepFontXmls","\xcd","\xbf","\x77","\x80"),
	HX_HCSTRING("get_numConnections","\xb8","\xce","\xfa","\x80"),
	HX_HCSTRING("set_numConnections","\x2c","\x01","\xaa","\x5d"),
	::String(null()) };

static void AssetManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssetManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AssetManager_obj::HTTP_RESPONSE_STATUS,"HTTP_RESPONSE_STATUS");
	HX_MARK_MEMBER_NAME(AssetManager_obj::sNames,"sNames");
	HX_MARK_MEMBER_NAME(AssetManager_obj::NAME_REGEX,"NAME_REGEX");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssetManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssetManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AssetManager_obj::HTTP_RESPONSE_STATUS,"HTTP_RESPONSE_STATUS");
	HX_VISIT_MEMBER_NAME(AssetManager_obj::sNames,"sNames");
	HX_VISIT_MEMBER_NAME(AssetManager_obj::NAME_REGEX,"NAME_REGEX");
};

#endif

hx::Class AssetManager_obj::__mClass;

static ::String AssetManager_obj_sStaticFields[] = {
	HX_HCSTRING("HTTP_RESPONSE_STATUS","\x79","\xde","\x26","\x00"),
	HX_HCSTRING("sNames","\x55","\x7e","\xbc","\x24"),
	HX_HCSTRING("NAME_REGEX","\x73","\x32","\x06","\xf0"),
	::String(null())
};

void AssetManager_obj::__register()
{
	hx::Object *dummy = new AssetManager_obj;
	AssetManager_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.AssetManager","\xc0","\xc6","\x5f","\xf3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssetManager_obj::__GetStatic;
	__mClass->mSetStaticField = &AssetManager_obj::__SetStatic;
	__mClass->mMarkFunc = AssetManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AssetManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssetManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssetManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssetManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AssetManager_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_129_boot)
HXDLIN( 129)		HTTP_RESPONSE_STATUS = HX_("httpResponseStatus",3b,ae,f6,61);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_152_boot)
HXDLIN( 152)			int length = null();
HXDLIN( 152)			bool fixed = null();
HXDLIN( 152)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f60597b0968ad328_152_boot)
HXDLIN( 152)		sNames =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f60597b0968ad328_155_boot)
HXDLIN( 155)		NAME_REGEX =  ::EReg_obj::__alloc( HX_CTX ,HX_("([^\\?/\\\\]+?)(?:\\.([\\w\\-]+))?(?:\\?.*)?$",82,c3,38,e4),HX_("",00,00,00,00));
            	}
}

} // end namespace starling
} // end namespace utils
