// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_system_Capabilities
#include <openfl/system/Capabilities.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text__FontStyle_FontStyle_Impl_
#include <openfl/text/_FontStyle/FontStyle_Impl_.h>
#endif
#ifndef INCLUDED_openfl_text__FontType_FontType_Impl_
#include <openfl/text/_FontType/FontType_Impl_.h>
#endif
#ifndef INCLUDED_starling_utils_SystemUtil
#include <starling/utils/SystemUtil.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_42_initialize,"starling.utils.SystemUtil","initialize",0xd21f934a,"starling.utils.SystemUtil.initialize","starling/utils/SystemUtil.hx",42,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_81_onActivate,"starling.utils.SystemUtil","onActivate",0xa8c751ec,"starling.utils.SystemUtil.onActivate","starling/utils/SystemUtil.hx",81,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_98_onDeactivate,"starling.utils.SystemUtil","onDeactivate",0x650152ad,"starling.utils.SystemUtil.onDeactivate","starling/utils/SystemUtil.hx",98,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_104_executeWhenApplicationIsActive,"starling.utils.SystemUtil","executeWhenApplicationIsActive",0x560bc16b,"starling.utils.SystemUtil.executeWhenApplicationIsActive","starling/utils/SystemUtil.hx",104,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_117_get_isApplicationActive,"starling.utils.SystemUtil","get_isApplicationActive",0xe1b42a49,"starling.utils.SystemUtil.get_isApplicationActive","starling/utils/SystemUtil.hx",117,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_126_get_isAIR,"starling.utils.SystemUtil","get_isAIR",0xa218dc5d,"starling.utils.SystemUtil.get_isAIR","starling/utils/SystemUtil.hx",126,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_135_get_version,"starling.utils.SystemUtil","get_version",0xd55d9ff5,"starling.utils.SystemUtil.get_version","starling/utils/SystemUtil.hx",135,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_145_get_platform,"starling.utils.SystemUtil","get_platform",0x6dcfbb36,"starling.utils.SystemUtil.get_platform","starling/utils/SystemUtil.hx",145,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_151_set_platform,"starling.utils.SystemUtil","set_platform",0x82c8deaa,"starling.utils.SystemUtil.set_platform","starling/utils/SystemUtil.hx",151,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_162_get_supportsDepthAndStencil,"starling.utils.SystemUtil","get_supportsDepthAndStencil",0x17f45881,"starling.utils.SystemUtil.get_supportsDepthAndStencil","starling/utils/SystemUtil.hx",162,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_182_get_supportsVideoTexture,"starling.utils.SystemUtil","get_supportsVideoTexture",0x8bb77647,"starling.utils.SystemUtil.get_supportsVideoTexture","starling/utils/SystemUtil.hx",182,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_191_updateEmbeddedFonts,"starling.utils.SystemUtil","updateEmbeddedFonts",0x5129c0d7,"starling.utils.SystemUtil.updateEmbeddedFonts","starling/utils/SystemUtil.hx",191,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_205_isEmbeddedFont,"starling.utils.SystemUtil","isEmbeddedFont",0x8e3ff67d,"starling.utils.SystemUtil.isEmbeddedFont","starling/utils/SystemUtil.hx",205,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_232_get_isIOS,"starling.utils.SystemUtil","get_isIOS",0xa21ef3a0,"starling.utils.SystemUtil.get_isIOS","starling/utils/SystemUtil.hx",232,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_240_get_isAndroid,"starling.utils.SystemUtil","get_isAndroid",0xb6148282,"starling.utils.SystemUtil.get_isAndroid","starling/utils/SystemUtil.hx",240,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_248_get_isMac,"starling.utils.SystemUtil","get_isMac",0xa2220c62,"starling.utils.SystemUtil.get_isMac","starling/utils/SystemUtil.hx",248,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_256_get_isWindows,"starling.utils.SystemUtil","get_isWindows",0x01e4c5d6,"starling.utils.SystemUtil.get_isWindows","starling/utils/SystemUtil.hx",256,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_265_get_isDesktop,"starling.utils.SystemUtil","get_isDesktop",0x3804ad2f,"starling.utils.SystemUtil.get_isDesktop","starling/utils/SystemUtil.hx",265,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_30_boot,"starling.utils.SystemUtil","boot",0xfc71ceac,"starling.utils.SystemUtil.boot","starling/utils/SystemUtil.hx",30,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_31_boot,"starling.utils.SystemUtil","boot",0xfc71ceac,"starling.utils.SystemUtil.boot","starling/utils/SystemUtil.hx",31,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_32_boot,"starling.utils.SystemUtil","boot",0xfc71ceac,"starling.utils.SystemUtil.boot","starling/utils/SystemUtil.hx",32,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_36_boot,"starling.utils.SystemUtil","boot",0xfc71ceac,"starling.utils.SystemUtil.boot","starling/utils/SystemUtil.hx",36,0xbb872b08)
HX_LOCAL_STACK_FRAME(_hx_pos_f5c67c8055e60d1c_37_boot,"starling.utils.SystemUtil","boot",0xfc71ceac,"starling.utils.SystemUtil.boot","starling/utils/SystemUtil.hx",37,0xbb872b08)
namespace starling{
namespace utils{

void SystemUtil_obj::__construct() { }

Dynamic SystemUtil_obj::__CreateEmpty() { return new SystemUtil_obj; }

void *SystemUtil_obj::_hx_vtable = 0;

Dynamic SystemUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SystemUtil_obj > _hx_result = new SystemUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SystemUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3e61e4b6;
}

bool SystemUtil_obj::sInitialized;

bool SystemUtil_obj::sApplicationActive;

::Array< ::Dynamic> SystemUtil_obj::sWaitingCalls;

::String SystemUtil_obj::sPlatform;

::String SystemUtil_obj::sVersion;

bool SystemUtil_obj::sAIR;

::Array< ::Dynamic> SystemUtil_obj::sEmbeddedFonts;

bool SystemUtil_obj::sSupportsDepthAndStencil;

void SystemUtil_obj::initialize(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_42_initialize)
HXLINE(  43)		if (::starling::utils::SystemUtil_obj::sInitialized) {
HXLINE(  43)			return;
            		}
HXLINE(  45)		::starling::utils::SystemUtil_obj::sInitialized = true;
HXLINE(  46)		::starling::utils::SystemUtil_obj::sPlatform = ::openfl::_hx_system::Capabilities_obj::get_version().substr((int)0,(int)3);
HXLINE(  47)		::starling::utils::SystemUtil_obj::sVersion = ::openfl::_hx_system::Capabilities_obj::get_version().substr((int)4,null());
HXLINE(  49)		try {
            			HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(  53)			 ::openfl::display::MovieClip nativeApp = ::openfl::Lib_obj::get_current();
HXLINE(  55)			nativeApp->addEventListener(HX_("activate",b3,1b,ac,e5),::starling::utils::SystemUtil_obj::onActivate_dyn(),false,(int)0,true);
HXLINE(  56)			nativeApp->addEventListener(HX_("deactivate",34,5c,01,3c),::starling::utils::SystemUtil_obj::onDeactivate_dyn(),false,(int)0,true);
HXLINE(  66)			 ::Dynamic windowConfig = ::lime::app::Application_obj::current->_hx___windows->__get((int)0).StaticCast<  ::lime::ui::Window >()->config;
HXLINE(  67)			bool _hx_tmp;
HXDLIN(  67)			if (( (bool)(windowConfig->__Field(HX_("depthBuffer",63,46,9e,52),hx::paccDynamic)) )) {
HXLINE(  67)				_hx_tmp = ( (bool)(windowConfig->__Field(HX_("stencilBuffer",1c,94,39,31),hx::paccDynamic)) );
            			}
            			else {
HXLINE(  67)				_hx_tmp = false;
            			}
HXDLIN(  67)			::starling::utils::SystemUtil_obj::sSupportsDepthAndStencil = _hx_tmp;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::openfl::errors::Error e = _hx_e;
HXLINE(  76)				::starling::utils::SystemUtil_obj::sAIR = false;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,initialize,(void))

void SystemUtil_obj::onActivate( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_81_onActivate)
HXLINE(  82)		::starling::utils::SystemUtil_obj::sApplicationActive = true;
HXLINE(  84)		{
HXLINE(  84)			int _g = (int)0;
HXDLIN(  84)			::Array< ::Dynamic> _g1 = ::starling::utils::SystemUtil_obj::sWaitingCalls;
HXDLIN(  84)			while((_g < _g1->length)){
HXLINE(  84)				::cpp::VirtualArray call = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(  84)				_g = (_g + (int)1);
HXLINE(  86)				try {
            					HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE(  86)					::Reflect_obj::callMethod(null(),call->__get((int)0),( (::cpp::VirtualArray)(call->__get((int)1)) ));
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::openfl::errors::Error e = _hx_e;
HXLINE(  89)						 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  89)						_hx_tmp((HX_("[Starling] Error in 'executeWhenApplicationIsActive' call: ",d8,42,41,d6) + e->message),hx::SourceInfo(HX_("SystemUtil.hx",ad,84,e4,36),89,HX_("starling.utils.SystemUtil",34,28,56,9a),HX_("onActivate",f2,ef,62,c3)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(  93)		::starling::utils::SystemUtil_obj::sWaitingCalls = ::Array_obj< ::Dynamic>::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemUtil_obj,onActivate,(void))

void SystemUtil_obj::onDeactivate( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_98_onDeactivate)
HXDLIN(  98)		::starling::utils::SystemUtil_obj::sApplicationActive = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemUtil_obj,onDeactivate,(void))

void SystemUtil_obj::executeWhenApplicationIsActive( ::Dynamic call,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_104_executeWhenApplicationIsActive)
HXLINE( 105)		::starling::utils::SystemUtil_obj::initialize();
HXLINE( 107)		if (hx::IsNull( args )) {
HXLINE( 107)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 108)		if (::starling::utils::SystemUtil_obj::sApplicationActive) {
HXLINE( 108)			::Reflect_obj::callMethod(call,call,args);
            		}
            		else {
HXLINE( 109)			::starling::utils::SystemUtil_obj::sWaitingCalls->push(::cpp::VirtualArray_obj::__new(2)->init(0,call)->init(1,args));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SystemUtil_obj,executeWhenApplicationIsActive,(void))

bool SystemUtil_obj::get_isApplicationActive(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_117_get_isApplicationActive)
HXLINE( 118)		::starling::utils::SystemUtil_obj::initialize();
HXLINE( 119)		return ::starling::utils::SystemUtil_obj::sApplicationActive;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_isApplicationActive,return )

bool SystemUtil_obj::get_isAIR(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_126_get_isAIR)
HXLINE( 127)		::starling::utils::SystemUtil_obj::initialize();
HXLINE( 128)		return ::starling::utils::SystemUtil_obj::sAIR;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_isAIR,return )

::String SystemUtil_obj::get_version(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_135_get_version)
HXLINE( 136)		::starling::utils::SystemUtil_obj::initialize();
HXLINE( 137)		return ::starling::utils::SystemUtil_obj::sVersion;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_version,return )

::String SystemUtil_obj::get_platform(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_145_get_platform)
HXLINE( 146)		::starling::utils::SystemUtil_obj::initialize();
HXLINE( 147)		return ::starling::utils::SystemUtil_obj::sPlatform;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_platform,return )

::String SystemUtil_obj::set_platform(::String value){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_151_set_platform)
HXLINE( 152)		::starling::utils::SystemUtil_obj::initialize();
HXLINE( 153)		::starling::utils::SystemUtil_obj::sPlatform = value;
HXLINE( 154)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SystemUtil_obj,set_platform,return )

bool SystemUtil_obj::get_supportsDepthAndStencil(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_162_get_supportsDepthAndStencil)
HXDLIN( 162)		return ::starling::utils::SystemUtil_obj::sSupportsDepthAndStencil;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_supportsDepthAndStencil,return )

bool SystemUtil_obj::get_supportsVideoTexture(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_182_get_supportsVideoTexture)
HXDLIN( 182)		return ::openfl::display3D::Context3D_obj::supportsVideoTexture;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_supportsVideoTexture,return )

void SystemUtil_obj::updateEmbeddedFonts(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_191_updateEmbeddedFonts)
HXDLIN( 191)		::starling::utils::SystemUtil_obj::sEmbeddedFonts = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,updateEmbeddedFonts,(void))

bool SystemUtil_obj::isEmbeddedFont(::String fontName,hx::Null< bool >  __o_bold,hx::Null< bool >  __o_italic,::String __o_fontType){
bool bold = __o_bold.Default(false);
bool italic = __o_italic.Default(false);
::String fontType = __o_fontType.Default(HX_HCSTRING("embedded","\x8a","\x19","\x62","\xde"));
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_205_isEmbeddedFont)
HXLINE( 206)		if (hx::IsNull( ::starling::utils::SystemUtil_obj::sEmbeddedFonts )) {
HXLINE( 207)			::starling::utils::SystemUtil_obj::sEmbeddedFonts = ::openfl::text::Font_obj::enumerateFonts(false);
            		}
HXLINE( 209)		{
HXLINE( 209)			int _g = (int)0;
HXDLIN( 209)			::Array< ::Dynamic> _g1 = ::starling::utils::SystemUtil_obj::sEmbeddedFonts;
HXDLIN( 209)			while((_g < _g1->length)){
HXLINE( 209)				 ::openfl::text::Font font = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 209)				_g = (_g + (int)1);
HXLINE( 211)				::String style = ::openfl::text::_FontStyle::FontStyle_Impl__obj::toString(font->fontStyle);
HXLINE( 212)				bool isBold;
HXDLIN( 212)				if (hx::IsNotEq( ::openfl::text::_FontStyle::FontStyle_Impl__obj::fromString(style),(int)0 )) {
HXLINE( 212)					isBold = hx::IsEq( ::openfl::text::_FontStyle::FontStyle_Impl__obj::fromString(style),(int)1 );
            				}
            				else {
HXLINE( 212)					isBold = true;
            				}
HXLINE( 213)				bool isItalic;
HXDLIN( 213)				if (hx::IsNotEq( ::openfl::text::_FontStyle::FontStyle_Impl__obj::fromString(style),(int)2 )) {
HXLINE( 213)					isItalic = hx::IsEq( ::openfl::text::_FontStyle::FontStyle_Impl__obj::fromString(style),(int)1 );
            				}
            				else {
HXLINE( 213)					isItalic = true;
            				}
HXLINE( 215)				bool _hx_tmp;
HXDLIN( 215)				bool _hx_tmp1;
HXDLIN( 215)				bool _hx_tmp2;
HXDLIN( 215)				if ((fontName == font->name)) {
HXLINE( 215)					_hx_tmp2 = (bold == isBold);
            				}
            				else {
HXLINE( 215)					_hx_tmp2 = false;
            				}
HXDLIN( 215)				if (_hx_tmp2) {
HXLINE( 215)					_hx_tmp1 = (italic == isItalic);
            				}
            				else {
HXLINE( 215)					_hx_tmp1 = false;
            				}
HXDLIN( 215)				if (_hx_tmp1) {
HXLINE( 215)					_hx_tmp = hx::IsEq( ::openfl::text::_FontType::FontType_Impl__obj::fromString(fontType),font->fontType );
            				}
            				else {
HXLINE( 215)					_hx_tmp = false;
            				}
HXDLIN( 215)				if (_hx_tmp) {
HXLINE( 218)					return true;
            				}
            			}
            		}
HXLINE( 222)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SystemUtil_obj,isEmbeddedFont,return )

bool SystemUtil_obj::get_isIOS(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_232_get_isIOS)
HXDLIN( 232)		return (::starling::utils::SystemUtil_obj::get_platform() == HX_("IOS",ad,a9,37,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_isIOS,return )

bool SystemUtil_obj::get_isAndroid(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_240_get_isAndroid)
HXDLIN( 240)		return (::starling::utils::SystemUtil_obj::get_platform() == HX_("AND",b7,96,31,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_isAndroid,return )

bool SystemUtil_obj::get_isMac(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_248_get_isMac)
HXDLIN( 248)		return (::starling::utils::SystemUtil_obj::get_platform() == HX_("MAC",6f,a6,3a,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_isMac,return )

bool SystemUtil_obj::get_isWindows(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_256_get_isWindows)
HXDLIN( 256)		return (::starling::utils::SystemUtil_obj::get_platform() == HX_("WIN",fc,43,42,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_isWindows,return )

bool SystemUtil_obj::get_isDesktop(){
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_265_get_isDesktop)
HXDLIN( 265)		bool _hx_tmp;
HXDLIN( 265)		if ((::starling::utils::SystemUtil_obj::get_platform() != HX_("WIN",fc,43,42,00))) {
HXDLIN( 265)			_hx_tmp = (::starling::utils::SystemUtil_obj::get_platform() == HX_("MAC",6f,a6,3a,00));
            		}
            		else {
HXDLIN( 265)			_hx_tmp = true;
            		}
HXDLIN( 265)		if (!(_hx_tmp)) {
HXDLIN( 265)			return (::starling::utils::SystemUtil_obj::get_platform() == HX_("LNX",96,ef,39,00));
            		}
            		else {
HXDLIN( 265)			return true;
            		}
HXDLIN( 265)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SystemUtil_obj,get_isDesktop,return )


SystemUtil_obj::SystemUtil_obj()
{
}

bool SystemUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sAIR") ) { outValue = ( sAIR ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isAIR") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_isAIR() ); return true; } }
		if (HX_FIELD_EQ(inName,"isIOS") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_isIOS() ); return true; } }
		if (HX_FIELD_EQ(inName,"isMac") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_isMac() ); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_version() ); return true; } }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sVersion") ) { outValue = ( sVersion ); return true; }
		if (HX_FIELD_EQ(inName,"platform") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_platform() ); return true; } }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sPlatform") ) { outValue = ( sPlatform ); return true; }
		if (HX_FIELD_EQ(inName,"get_isAIR") ) { outValue = get_isAIR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_isIOS") ) { outValue = get_isIOS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAndroid") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_isAndroid() ); return true; } }
		if (HX_FIELD_EQ(inName,"get_isMac") ) { outValue = get_isMac_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isWindows") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_isWindows() ); return true; } }
		if (HX_FIELD_EQ(inName,"isDesktop") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_isDesktop() ); return true; } }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initialize") ) { outValue = initialize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onActivate") ) { outValue = onActivate_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_version") ) { outValue = get_version_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sInitialized") ) { outValue = ( sInitialized ); return true; }
		if (HX_FIELD_EQ(inName,"onDeactivate") ) { outValue = onDeactivate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_platform") ) { outValue = get_platform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_platform") ) { outValue = set_platform_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sWaitingCalls") ) { outValue = ( sWaitingCalls ); return true; }
		if (HX_FIELD_EQ(inName,"get_isAndroid") ) { outValue = get_isAndroid_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_isWindows") ) { outValue = get_isWindows_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_isDesktop") ) { outValue = get_isDesktop_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sEmbeddedFonts") ) { outValue = ( sEmbeddedFonts ); return true; }
		if (HX_FIELD_EQ(inName,"isEmbeddedFont") ) { outValue = isEmbeddedFont_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sApplicationActive") ) { outValue = ( sApplicationActive ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isApplicationActive") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_isApplicationActive() ); return true; } }
		if (HX_FIELD_EQ(inName,"updateEmbeddedFonts") ) { outValue = updateEmbeddedFonts_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_supportsVideoTexture() ); return true; } }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"get_isApplicationActive") ) { outValue = get_isApplicationActive_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"supportsDepthAndStencil") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_supportsDepthAndStencil() ); return true; } }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"sSupportsDepthAndStencil") ) { outValue = ( sSupportsDepthAndStencil ); return true; }
		if (HX_FIELD_EQ(inName,"get_supportsVideoTexture") ) { outValue = get_supportsVideoTexture_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"get_supportsDepthAndStencil") ) { outValue = get_supportsDepthAndStencil_dyn(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"executeWhenApplicationIsActive") ) { outValue = executeWhenApplicationIsActive_dyn(); return true; }
	}
	return false;
}

bool SystemUtil_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sAIR") ) { sAIR=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sVersion") ) { sVersion=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"platform") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_platform(ioValue.Cast< ::String >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sPlatform") ) { sPlatform=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sInitialized") ) { sInitialized=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sWaitingCalls") ) { sWaitingCalls=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sEmbeddedFonts") ) { sEmbeddedFonts=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sApplicationActive") ) { sApplicationActive=ioValue.Cast< bool >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"sSupportsDepthAndStencil") ) { sSupportsDepthAndStencil=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SystemUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo SystemUtil_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &SystemUtil_obj::sInitialized,HX_HCSTRING("sInitialized","\x61","\xcb","\x40","\xa4")},
	{hx::fsBool,(void *) &SystemUtil_obj::sApplicationActive,HX_HCSTRING("sApplicationActive","\x43","\xcb","\x0a","\x71")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &SystemUtil_obj::sWaitingCalls,HX_HCSTRING("sWaitingCalls","\x5b","\xe6","\xb0","\x4c")},
	{hx::fsString,(void *) &SystemUtil_obj::sPlatform,HX_HCSTRING("sPlatform","\x46","\x9a","\x1d","\x04")},
	{hx::fsString,(void *) &SystemUtil_obj::sVersion,HX_HCSTRING("sVersion","\xe5","\x52","\xec","\xfb")},
	{hx::fsBool,(void *) &SystemUtil_obj::sAIR,HX_HCSTRING("sAIR","\xd7","\x1b","\x35","\x4c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &SystemUtil_obj::sEmbeddedFonts,HX_HCSTRING("sEmbeddedFonts","\x67","\xfd","\x2e","\x2b")},
	{hx::fsBool,(void *) &SystemUtil_obj::sSupportsDepthAndStencil,HX_HCSTRING("sSupportsDepthAndStencil","\x71","\xeb","\x1b","\x07")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void SystemUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SystemUtil_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SystemUtil_obj::sInitialized,"sInitialized");
	HX_MARK_MEMBER_NAME(SystemUtil_obj::sApplicationActive,"sApplicationActive");
	HX_MARK_MEMBER_NAME(SystemUtil_obj::sWaitingCalls,"sWaitingCalls");
	HX_MARK_MEMBER_NAME(SystemUtil_obj::sPlatform,"sPlatform");
	HX_MARK_MEMBER_NAME(SystemUtil_obj::sVersion,"sVersion");
	HX_MARK_MEMBER_NAME(SystemUtil_obj::sAIR,"sAIR");
	HX_MARK_MEMBER_NAME(SystemUtil_obj::sEmbeddedFonts,"sEmbeddedFonts");
	HX_MARK_MEMBER_NAME(SystemUtil_obj::sSupportsDepthAndStencil,"sSupportsDepthAndStencil");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SystemUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::sInitialized,"sInitialized");
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::sApplicationActive,"sApplicationActive");
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::sWaitingCalls,"sWaitingCalls");
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::sPlatform,"sPlatform");
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::sVersion,"sVersion");
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::sAIR,"sAIR");
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::sEmbeddedFonts,"sEmbeddedFonts");
	HX_VISIT_MEMBER_NAME(SystemUtil_obj::sSupportsDepthAndStencil,"sSupportsDepthAndStencil");
};

#endif

hx::Class SystemUtil_obj::__mClass;

static ::String SystemUtil_obj_sStaticFields[] = {
	HX_HCSTRING("sInitialized","\x61","\xcb","\x40","\xa4"),
	HX_HCSTRING("sApplicationActive","\x43","\xcb","\x0a","\x71"),
	HX_HCSTRING("sWaitingCalls","\x5b","\xe6","\xb0","\x4c"),
	HX_HCSTRING("sPlatform","\x46","\x9a","\x1d","\x04"),
	HX_HCSTRING("sVersion","\xe5","\x52","\xec","\xfb"),
	HX_HCSTRING("sAIR","\xd7","\x1b","\x35","\x4c"),
	HX_HCSTRING("sEmbeddedFonts","\x67","\xfd","\x2e","\x2b"),
	HX_HCSTRING("sSupportsDepthAndStencil","\x71","\xeb","\x1b","\x07"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("onActivate","\xf2","\xef","\x62","\xc3"),
	HX_HCSTRING("onDeactivate","\x33","\xfe","\x44","\x14"),
	HX_HCSTRING("executeWhenApplicationIsActive","\x71","\xc6","\x6e","\x73"),
	HX_HCSTRING("get_isApplicationActive","\x83","\xc0","\xbd","\x8b"),
	HX_HCSTRING("get_isAIR","\x17","\x61","\xf1","\x04"),
	HX_HCSTRING("get_version","\x2f","\x47","\xec","\x02"),
	HX_HCSTRING("get_platform","\xbc","\x66","\x13","\x1d"),
	HX_HCSTRING("set_platform","\x30","\x8a","\x0c","\x32"),
	HX_HCSTRING("get_supportsDepthAndStencil","\xbb","\x93","\xbe","\x7a"),
	HX_HCSTRING("get_supportsVideoTexture","\xcd","\x52","\x11","\xaa"),
	HX_HCSTRING("updateEmbeddedFonts","\x11","\x32","\xe9","\x02"),
	HX_HCSTRING("isEmbeddedFont","\x83","\x0f","\x6a","\x56"),
	HX_HCSTRING("get_isIOS","\x5a","\x78","\xf7","\x04"),
	HX_HCSTRING("get_isAndroid","\x3c","\xec","\x06","\x62"),
	HX_HCSTRING("get_isMac","\x1c","\x91","\xfa","\x04"),
	HX_HCSTRING("get_isWindows","\x90","\x2f","\xd7","\xad"),
	HX_HCSTRING("get_isDesktop","\xe9","\x16","\xf7","\xe3"),
	::String(null())
};

void SystemUtil_obj::__register()
{
	hx::Object *dummy = new SystemUtil_obj;
	SystemUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.SystemUtil","\x34","\x28","\x56","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SystemUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &SystemUtil_obj::__SetStatic;
	__mClass->mMarkFunc = SystemUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SystemUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SystemUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SystemUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SystemUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SystemUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SystemUtil_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_30_boot)
HXDLIN(  30)		sInitialized = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_31_boot)
HXDLIN(  31)		sApplicationActive = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_32_boot)
HXDLIN(  32)		sWaitingCalls = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_36_boot)
HXDLIN(  36)		sEmbeddedFonts = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_f5c67c8055e60d1c_37_boot)
HXDLIN(  37)		sSupportsDepthAndStencil = true;
            	}
}

} // end namespace starling
} // end namespace utils
