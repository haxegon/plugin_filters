// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_utils_MeshSubset
#include <starling/utils/MeshSubset.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d369835e4234f1a7_32_new,"starling.utils.MeshSubset","new",0x58a58b84,"starling.utils.MeshSubset.new","starling/utils/MeshSubset.hx",32,0x5517486a)
HX_LOCAL_STACK_FRAME(_hx_pos_d369835e4234f1a7_39_setTo,"starling.utils.MeshSubset","setTo",0xd6c15de1,"starling.utils.MeshSubset.setTo","starling/utils/MeshSubset.hx",39,0x5517486a)
namespace starling{
namespace utils{

void MeshSubset_obj::__construct(hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices){
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
int indexID = __o_indexID.Default(0);
int numIndices = __o_numIndices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d369835e4234f1a7_32_new)
HXDLIN(  32)		this->setTo(vertexID,numVertices,indexID,numIndices);
            	}

Dynamic MeshSubset_obj::__CreateEmpty() { return new MeshSubset_obj; }

void *MeshSubset_obj::_hx_vtable = 0;

Dynamic MeshSubset_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MeshSubset_obj > _hx_result = new MeshSubset_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool MeshSubset_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x506eabf8;
}

void MeshSubset_obj::setTo(hx::Null< int >  __o_vertexID,hx::Null< int >  __o_numVertices,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices){
int vertexID = __o_vertexID.Default(0);
int numVertices = __o_numVertices.Default(-1);
int indexID = __o_indexID.Default(0);
int numIndices = __o_numIndices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_d369835e4234f1a7_39_setTo)
HXLINE(  40)		this->vertexID = vertexID;
HXLINE(  41)		this->numVertices = numVertices;
HXLINE(  42)		this->indexID = indexID;
HXLINE(  43)		this->numIndices = numIndices;
            	}


HX_DEFINE_DYNAMIC_FUNC4(MeshSubset_obj,setTo,(void))


MeshSubset_obj::MeshSubset_obj()
{
}

hx::Val MeshSubset_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indexID") ) { return hx::Val( indexID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertexID") ) { return hx::Val( vertexID ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numIndices") ) { return hx::Val( numIndices ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numVertices") ) { return hx::Val( numVertices ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MeshSubset_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"indexID") ) { indexID=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertexID") ) { vertexID=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numIndices") ) { numIndices=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numVertices") ) { numVertices=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MeshSubset_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vertexID","\x3f","\xbc","\x80","\x67"));
	outFields->push(HX_HCSTRING("numVertices","\x5f","\x10","\x2c","\x56"));
	outFields->push(HX_HCSTRING("indexID","\x6d","\x43","\xbf","\xe0"));
	outFields->push(HX_HCSTRING("numIndices","\x81","\x85","\x74","\x13"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MeshSubset_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(MeshSubset_obj,vertexID),HX_HCSTRING("vertexID","\x3f","\xbc","\x80","\x67")},
	{hx::fsInt,(int)offsetof(MeshSubset_obj,numVertices),HX_HCSTRING("numVertices","\x5f","\x10","\x2c","\x56")},
	{hx::fsInt,(int)offsetof(MeshSubset_obj,indexID),HX_HCSTRING("indexID","\x6d","\x43","\xbf","\xe0")},
	{hx::fsInt,(int)offsetof(MeshSubset_obj,numIndices),HX_HCSTRING("numIndices","\x81","\x85","\x74","\x13")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MeshSubset_obj_sStaticStorageInfo = 0;
#endif

static ::String MeshSubset_obj_sMemberFields[] = {
	HX_HCSTRING("vertexID","\x3f","\xbc","\x80","\x67"),
	HX_HCSTRING("numVertices","\x5f","\x10","\x2c","\x56"),
	HX_HCSTRING("indexID","\x6d","\x43","\xbf","\xe0"),
	HX_HCSTRING("numIndices","\x81","\x85","\x74","\x13"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	::String(null()) };

static void MeshSubset_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MeshSubset_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MeshSubset_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MeshSubset_obj::__mClass,"__mClass");
};

#endif

hx::Class MeshSubset_obj::__mClass;

void MeshSubset_obj::__register()
{
	hx::Object *dummy = new MeshSubset_obj;
	MeshSubset_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.MeshSubset","\x92","\xb9","\x18","\x1c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MeshSubset_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MeshSubset_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MeshSubset_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MeshSubset_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MeshSubset_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MeshSubset_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace utils
