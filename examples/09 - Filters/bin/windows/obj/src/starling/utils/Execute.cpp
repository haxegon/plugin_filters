// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_starling_utils_Execute
#include <starling/utils/Execute.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3b8742e32cd1b513_21_execute,"starling.utils.Execute","execute",0x92aa1a79,"starling.utils.Execute.execute","starling/utils/Execute.hx",21,0xdb576e8e)
namespace starling{
namespace utils{

void Execute_obj::__construct() { }

Dynamic Execute_obj::__CreateEmpty() { return new Execute_obj; }

void *Execute_obj::_hx_vtable = 0;

Dynamic Execute_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Execute_obj > _hx_result = new Execute_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Execute_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5fafcaf0;
}

void Execute_obj::execute( ::Dynamic func,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_3b8742e32cd1b513_21_execute)
HXDLIN(  21)		if (hx::IsNotNull( func )) {
HXLINE(  28)			int maxNumArgs = ( (int)(func->__ArgCount()) );
HXLINE(  33)			{
HXLINE(  33)				int _g1 = args->get_length();
HXDLIN(  33)				int _g = maxNumArgs;
HXDLIN(  33)				while((_g1 < _g)){
HXLINE(  33)					_g1 = (_g1 + (int)1);
HXDLIN(  33)					int i = (_g1 - (int)1);
HXLINE(  34)					args->set(i,null());
            				}
            			}
HXLINE(  39)			switch((int)(maxNumArgs)){
            				case (int)-1: {
HXLINE(  49)					::Reflect_obj::callMethod(func,func,args);
            				}
            				break;
            				case (int)0: {
HXLINE(  41)					func();
            				}
            				break;
            				case (int)1: {
HXLINE(  42)					func(args->__get((int)0));
            				}
            				break;
            				case (int)2: {
HXLINE(  43)					func(args->__get((int)0),args->__get((int)1));
            				}
            				break;
            				case (int)3: {
HXLINE(  44)					func(args->__get((int)0),args->__get((int)1),args->__get((int)2));
            				}
            				break;
            				case (int)4: {
HXLINE(  45)					func(args->__get((int)0),args->__get((int)1),args->__get((int)2),args->__get((int)3));
            				}
            				break;
            				case (int)5: {
HXLINE(  46)					func(args->__get((int)0),args->__get((int)1),args->__get((int)2),args->__get((int)3),args->__get((int)4));
            				}
            				break;
            				case (int)6: {
HXLINE(  47)					func(args->__get((int)0),args->__get((int)1),args->__get((int)2),args->__get((int)3),args->__get((int)4),args->__get((int)5));
            				}
            				break;
            				case (int)7: {
HXLINE(  48)					func(args->__get((int)0),args->__get((int)1),args->__get((int)2),args->__get((int)3),args->__get((int)4),args->__get((int)5),args->__get((int)6));
            				}
            				break;
            				default:{
HXLINE(  50)					::Reflect_obj::callMethod(func,func,args->slice((int)0,maxNumArgs));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Execute_obj,execute,(void))


Execute_obj::Execute_obj()
{
}

bool Execute_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { outValue = execute_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Execute_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Execute_obj_sStaticStorageInfo = 0;
#endif

static void Execute_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Execute_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Execute_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Execute_obj::__mClass,"__mClass");
};

#endif

hx::Class Execute_obj::__mClass;

static ::String Execute_obj_sStaticFields[] = {
	HX_HCSTRING("execute","\x35","\x0a","\x0d","\xcc"),
	::String(null())
};

void Execute_obj::__register()
{
	hx::Object *dummy = new Execute_obj;
	Execute_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.Execute","\xb2","\x8c","\x45","\x81");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Execute_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Execute_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Execute_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Execute_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Execute_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Execute_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Execute_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace utils
