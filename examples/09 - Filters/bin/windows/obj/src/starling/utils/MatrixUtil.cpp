// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif
#ifndef INCLUDED_starling_utils_MatrixUtil
#include <starling/utils/MatrixUtil.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_34_convertTo3D,"starling.utils.MatrixUtil","convertTo3D",0x0d240297,"starling.utils.MatrixUtil.convertTo3D","starling/utils/MatrixUtil.hx",34,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_51_convertTo2D,"starling.utils.MatrixUtil","convertTo2D",0x0d2401b8,"starling.utils.MatrixUtil.convertTo2D","starling/utils/MatrixUtil.hx",51,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_68_isIdentity,"starling.utils.MatrixUtil","isIdentity",0xd0f52630,"starling.utils.MatrixUtil.isIdentity","starling/utils/MatrixUtil.hx",68,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_74_isIdentity3D,"starling.utils.MatrixUtil","isIdentity3D",0xd52f3ee1,"starling.utils.MatrixUtil.isIdentity3D","starling/utils/MatrixUtil.hx",74,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_88_transformPoint,"starling.utils.MatrixUtil","transformPoint",0x3d9e322c,"starling.utils.MatrixUtil.transformPoint","starling/utils/MatrixUtil.hx",88,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_95_transformPoint3D,"starling.utils.MatrixUtil","transformPoint3D",0x873041dd,"starling.utils.MatrixUtil.transformPoint3D","starling/utils/MatrixUtil.hx",95,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_103_transformCoords,"starling.utils.MatrixUtil","transformCoords",0x7e2446c2,"starling.utils.MatrixUtil.transformCoords","starling/utils/MatrixUtil.hx",103,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_117_transformCoords3D,"starling.utils.MatrixUtil","transformCoords3D",0x84d527f3,"starling.utils.MatrixUtil.transformCoords3D","starling/utils/MatrixUtil.hx",117,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_138_skew,"starling.utils.MatrixUtil","skew",0x527443f2,"starling.utils.MatrixUtil.skew","starling/utils/MatrixUtil.hx",138,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_155_prependMatrix,"starling.utils.MatrixUtil","prependMatrix",0xb76c7207,"starling.utils.MatrixUtil.prependMatrix","starling/utils/MatrixUtil.hx",155,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_165_prependTranslation,"starling.utils.MatrixUtil","prependTranslation",0x1571876b,"starling.utils.MatrixUtil.prependTranslation","starling/utils/MatrixUtil.hx",165,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_173_prependScale,"starling.utils.MatrixUtil","prependScale",0xf02dad84,"starling.utils.MatrixUtil.prependScale","starling/utils/MatrixUtil.hx",173,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_180_prependRotation,"starling.utils.MatrixUtil","prependRotation",0x62857684,"starling.utils.MatrixUtil.prependRotation","starling/utils/MatrixUtil.hx",180,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_198_prependSkew,"starling.utils.MatrixUtil","prependSkew",0x4720b150,"starling.utils.MatrixUtil.prependSkew","starling/utils/MatrixUtil.hx",198,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_215_toString3D,"starling.utils.MatrixUtil","toString3D",0xeb5c4f45,"starling.utils.MatrixUtil.toString3D","starling/utils/MatrixUtil.hx",215,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_225_toString,"starling.utils.MatrixUtil","toString",0x0adc9594,"starling.utils.MatrixUtil.toString","starling/utils/MatrixUtil.hx",225,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_234_formatRawData,"starling.utils.MatrixUtil","formatRawData",0x2c28dbd3,"starling.utils.MatrixUtil.formatRawData","starling/utils/MatrixUtil.hx",234,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_275_snapToPixels,"starling.utils.MatrixUtil","snapToPixels",0xc7965c5a,"starling.utils.MatrixUtil.snapToPixels","starling/utils/MatrixUtil.hx",275,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_325_createPerspectiveProjectionMatrix,"starling.utils.MatrixUtil","createPerspectiveProjectionMatrix",0x9a7cf248,"starling.utils.MatrixUtil.createPerspectiveProjectionMatrix","starling/utils/MatrixUtil.hx",325,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_370_createOrthographicProjectionMatrix,"starling.utils.MatrixUtil","createOrthographicProjectionMatrix",0x6b6bdac4,"starling.utils.MatrixUtil.createOrthographicProjectionMatrix","starling/utils/MatrixUtil.hx",370,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_24_boot,"starling.utils.MatrixUtil","boot",0x473ab51a,"starling.utils.MatrixUtil.boot","starling/utils/MatrixUtil.hx",24,0xb04bf9f6)
static const Float _hx_array_data_26d2d886_26[] = {
	1.0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_26_boot,"starling.utils.MatrixUtil","boot",0x473ab51a,"starling.utils.MatrixUtil.boot","starling/utils/MatrixUtil.hx",26,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_27_boot,"starling.utils.MatrixUtil","boot",0x473ab51a,"starling.utils.MatrixUtil.boot","starling/utils/MatrixUtil.hx",27,0xb04bf9f6)
HX_LOCAL_STACK_FRAME(_hx_pos_f71887f20345dee4_28_boot,"starling.utils.MatrixUtil","boot",0x473ab51a,"starling.utils.MatrixUtil.boot","starling/utils/MatrixUtil.hx",28,0xb04bf9f6)
static const Float _hx_array_data_26d2d886_32[] = {
	0.0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,
};
namespace starling{
namespace utils{

void MatrixUtil_obj::__construct() { }

Dynamic MatrixUtil_obj::__CreateEmpty() { return new MatrixUtil_obj; }

void *MatrixUtil_obj::_hx_vtable = 0;

Dynamic MatrixUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MatrixUtil_obj > _hx_result = new MatrixUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MatrixUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b28caec;
}

 ::openfl::_Vector::AbstractVector MatrixUtil_obj::sRawData;

 ::openfl::_Vector::AbstractVector MatrixUtil_obj::sRawData2;

 ::openfl::geom::Vector3D MatrixUtil_obj::sPoint3D;

 ::openfl::_Vector::AbstractVector MatrixUtil_obj::sMatrixData;

 ::openfl::geom::Matrix3D MatrixUtil_obj::convertTo3D( ::openfl::geom::Matrix matrix, ::openfl::geom::Matrix3D out){
            	HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_34_convertTo3D)
HXLINE(  35)		if (hx::IsNull( out )) {
HXLINE(  35)			out =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            		}
HXLINE(  37)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData->data,(int)0,matrix->a);
HXLINE(  38)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData->data,(int)1,matrix->b);
HXLINE(  39)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData->data,(int)4,matrix->c);
HXLINE(  40)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData->data,(int)5,matrix->d);
HXLINE(  41)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData->data,(int)12,matrix->tx);
HXLINE(  42)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData->data,(int)13,matrix->ty);
HXLINE(  44)		out->copyRawDataFrom(::starling::utils::MatrixUtil_obj::sRawData,null(),null());
HXLINE(  45)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MatrixUtil_obj,convertTo3D,return )

 ::openfl::geom::Matrix MatrixUtil_obj::convertTo2D( ::openfl::geom::Matrix3D matrix3D, ::openfl::geom::Matrix out){
            	HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_51_convertTo2D)
HXLINE(  52)		if (hx::IsNull( out )) {
HXLINE(  52)			out =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE(  54)		matrix3D->copyRawDataTo(::starling::utils::MatrixUtil_obj::sRawData2,null(),null());
HXLINE(  55)		out->a = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)0)) );
HXLINE(  56)		out->b = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)1)) );
HXLINE(  57)		out->c = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)4)) );
HXLINE(  58)		out->d = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)5)) );
HXLINE(  59)		out->tx = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)12)) );
HXLINE(  60)		out->ty = ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)13)) );
HXLINE(  62)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MatrixUtil_obj,convertTo2D,return )

bool MatrixUtil_obj::isIdentity( ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_68_isIdentity)
HXDLIN(  68)		bool _hx_tmp;
HXDLIN(  68)		bool _hx_tmp1;
HXDLIN(  68)		bool _hx_tmp2;
HXDLIN(  68)		bool _hx_tmp3;
HXDLIN(  68)		if ((matrix->a == ((Float)1.0))) {
HXDLIN(  68)			_hx_tmp3 = (matrix->b == ((Float)0.0));
            		}
            		else {
HXDLIN(  68)			_hx_tmp3 = false;
            		}
HXDLIN(  68)		if (_hx_tmp3) {
HXDLIN(  68)			_hx_tmp2 = (matrix->c == ((Float)0.0));
            		}
            		else {
HXDLIN(  68)			_hx_tmp2 = false;
            		}
HXDLIN(  68)		if (_hx_tmp2) {
HXDLIN(  68)			_hx_tmp1 = (matrix->d == ((Float)1.0));
            		}
            		else {
HXDLIN(  68)			_hx_tmp1 = false;
            		}
HXDLIN(  68)		if (_hx_tmp1) {
HXDLIN(  68)			_hx_tmp = (matrix->tx == ((Float)0.0));
            		}
            		else {
HXDLIN(  68)			_hx_tmp = false;
            		}
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  69)			return (matrix->ty == ((Float)0.0));
            		}
            		else {
HXDLIN(  68)			return false;
            		}
HXDLIN(  68)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MatrixUtil_obj,isIdentity,return )

bool MatrixUtil_obj::isIdentity3D( ::openfl::geom::Matrix3D matrix){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_74_isIdentity3D)
HXLINE(  75)		 ::openfl::_Vector::AbstractVector data = ::starling::utils::MatrixUtil_obj::sRawData2;
HXLINE(  76)		matrix->copyRawDataTo(data,null(),null());
HXLINE(  78)		bool _hx_tmp;
HXDLIN(  78)		bool _hx_tmp1;
HXDLIN(  78)		bool _hx_tmp2;
HXDLIN(  78)		bool _hx_tmp3;
HXDLIN(  78)		bool _hx_tmp4;
HXDLIN(  78)		bool _hx_tmp5;
HXDLIN(  78)		bool _hx_tmp6;
HXDLIN(  78)		bool _hx_tmp7;
HXDLIN(  78)		bool _hx_tmp8;
HXDLIN(  78)		bool _hx_tmp9;
HXDLIN(  78)		bool _hx_tmp10;
HXDLIN(  78)		bool _hx_tmp11;
HXDLIN(  78)		bool _hx_tmp12;
HXDLIN(  78)		bool _hx_tmp13;
HXDLIN(  78)		if ((( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)0)) ) == ((Float)1.0))) {
HXLINE(  78)			_hx_tmp13 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)1)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp13 = false;
            		}
HXDLIN(  78)		if (_hx_tmp13) {
HXLINE(  78)			_hx_tmp12 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)2)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp12 = false;
            		}
HXDLIN(  78)		if (_hx_tmp12) {
HXLINE(  78)			_hx_tmp11 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)3)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp11 = false;
            		}
HXDLIN(  78)		if (_hx_tmp11) {
HXLINE(  78)			_hx_tmp10 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)4)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp10 = false;
            		}
HXDLIN(  78)		if (_hx_tmp10) {
HXLINE(  78)			_hx_tmp9 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)5)) ) == ((Float)1.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp9 = false;
            		}
HXDLIN(  78)		if (_hx_tmp9) {
HXLINE(  78)			_hx_tmp8 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)6)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp8 = false;
            		}
HXDLIN(  78)		if (_hx_tmp8) {
HXLINE(  78)			_hx_tmp7 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)7)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp7 = false;
            		}
HXDLIN(  78)		if (_hx_tmp7) {
HXLINE(  78)			_hx_tmp6 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)8)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp6 = false;
            		}
HXDLIN(  78)		if (_hx_tmp6) {
HXLINE(  78)			_hx_tmp5 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)9)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp5 = false;
            		}
HXDLIN(  78)		if (_hx_tmp5) {
HXLINE(  78)			_hx_tmp4 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)10)) ) == ((Float)1.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp4 = false;
            		}
HXDLIN(  78)		if (_hx_tmp4) {
HXLINE(  78)			_hx_tmp3 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)11)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp3 = false;
            		}
HXDLIN(  78)		if (_hx_tmp3) {
HXLINE(  78)			_hx_tmp2 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)12)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp2 = false;
            		}
HXDLIN(  78)		if (_hx_tmp2) {
HXLINE(  78)			_hx_tmp1 = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)13)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp1 = false;
            		}
HXDLIN(  78)		if (_hx_tmp1) {
HXLINE(  78)			_hx_tmp = (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)14)) ) == ((Float)0.0));
            		}
            		else {
HXLINE(  78)			_hx_tmp = false;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  81)			return (( (Float)(::openfl::_Vector::IVector_obj::get(data->data,(int)15)) ) == ((Float)1.0));
            		}
            		else {
HXLINE(  78)			return false;
            		}
HXDLIN(  78)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MatrixUtil_obj,isIdentity3D,return )

 ::openfl::geom::Point MatrixUtil_obj::transformPoint( ::openfl::geom::Matrix matrix, ::openfl::geom::Point point, ::openfl::geom::Point out){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_88_transformPoint)
HXDLIN(  88)		return ::starling::utils::MatrixUtil_obj::transformCoords(matrix,point->x,point->y,out);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtil_obj,transformPoint,return )

 ::openfl::geom::Vector3D MatrixUtil_obj::transformPoint3D( ::openfl::geom::Matrix3D matrix, ::openfl::geom::Vector3D point, ::openfl::geom::Vector3D out){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_95_transformPoint3D)
HXDLIN(  95)		return ::starling::utils::MatrixUtil_obj::transformCoords3D(matrix,point->x,point->y,point->z,out);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtil_obj,transformPoint3D,return )

 ::openfl::geom::Point MatrixUtil_obj::transformCoords( ::openfl::geom::Matrix matrix,Float x,Float y, ::openfl::geom::Point out){
            	HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_103_transformCoords)
HXLINE( 104)		if (hx::IsNull( out )) {
HXLINE( 104)			out =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 106)		Float _hx_tmp = (matrix->a * x);
HXDLIN( 106)		out->x = ((_hx_tmp + (matrix->c * y)) + matrix->tx);
HXLINE( 107)		Float _hx_tmp1 = (matrix->d * y);
HXDLIN( 107)		out->y = ((_hx_tmp1 + (matrix->b * x)) + matrix->ty);
HXLINE( 109)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(MatrixUtil_obj,transformCoords,return )

 ::openfl::geom::Vector3D MatrixUtil_obj::transformCoords3D( ::openfl::geom::Matrix3D matrix,Float x,Float y,Float z, ::openfl::geom::Vector3D out){
            	HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_117_transformCoords3D)
HXLINE( 118)		if (hx::IsNull( out )) {
HXLINE( 118)			out =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 120)		matrix->copyRawDataTo(::starling::utils::MatrixUtil_obj::sRawData2,null(),null());
HXLINE( 121)		Float _hx_tmp = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)0)) ));
HXDLIN( 121)		Float _hx_tmp1 = (_hx_tmp + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)4)) )));
HXDLIN( 121)		Float _hx_tmp2 = (_hx_tmp1 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)8)) )));
HXDLIN( 121)		out->x = (_hx_tmp2 + ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)12)) ));
HXLINE( 122)		Float _hx_tmp3 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)1)) ));
HXDLIN( 122)		Float _hx_tmp4 = (_hx_tmp3 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)5)) )));
HXDLIN( 122)		Float _hx_tmp5 = (_hx_tmp4 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)9)) )));
HXDLIN( 122)		out->y = (_hx_tmp5 + ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)13)) ));
HXLINE( 123)		Float _hx_tmp6 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)2)) ));
HXDLIN( 123)		Float _hx_tmp7 = (_hx_tmp6 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)6)) )));
HXDLIN( 123)		Float _hx_tmp8 = (_hx_tmp7 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)10)) )));
HXDLIN( 123)		out->z = (_hx_tmp8 + ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)14)) ));
HXLINE( 124)		Float _hx_tmp9 = (x * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)3)) ));
HXDLIN( 124)		Float _hx_tmp10 = (_hx_tmp9 + (y * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)7)) )));
HXDLIN( 124)		Float _hx_tmp11 = (_hx_tmp10 + (z * ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)11)) )));
HXDLIN( 124)		out->w = (_hx_tmp11 + ( (Float)(::openfl::_Vector::IVector_obj::get(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)15)) ));
HXLINE( 126)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(MatrixUtil_obj,transformCoords3D,return )

void MatrixUtil_obj::skew( ::openfl::geom::Matrix matrix,Float skewX,Float skewY){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_138_skew)
HXLINE( 139)		Float sinX = ::Math_obj::sin(skewX);
HXLINE( 140)		Float cosX = ::Math_obj::cos(skewX);
HXLINE( 141)		Float sinY = ::Math_obj::sin(skewY);
HXLINE( 142)		Float cosY = ::Math_obj::cos(skewY);
HXLINE( 144)		Float _hx_tmp = (matrix->a * cosY);
HXDLIN( 144)		Float _hx_tmp1 = (_hx_tmp - (matrix->b * sinX));
HXLINE( 145)		Float _hx_tmp2 = (matrix->a * sinY);
HXDLIN( 145)		Float _hx_tmp3 = (_hx_tmp2 + (matrix->b * cosX));
HXLINE( 146)		Float _hx_tmp4 = (matrix->c * cosY);
HXDLIN( 146)		Float _hx_tmp5 = (_hx_tmp4 - (matrix->d * sinX));
HXLINE( 147)		Float _hx_tmp6 = (matrix->c * sinY);
HXDLIN( 147)		Float _hx_tmp7 = (_hx_tmp6 + (matrix->d * cosX));
HXLINE( 148)		Float _hx_tmp8 = (matrix->tx * cosY);
HXDLIN( 148)		Float _hx_tmp9 = (_hx_tmp8 - (matrix->ty * sinX));
HXLINE( 149)		Float _hx_tmp10 = (matrix->tx * sinY);
HXLINE( 144)		matrix->setTo(_hx_tmp1,_hx_tmp3,_hx_tmp5,_hx_tmp7,_hx_tmp9,(_hx_tmp10 + (matrix->ty * cosX)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtil_obj,skew,(void))

void MatrixUtil_obj::prependMatrix( ::openfl::geom::Matrix base, ::openfl::geom::Matrix prep){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_155_prependMatrix)
HXDLIN( 155)		Float _hx_tmp = (base->a * prep->a);
HXDLIN( 155)		Float _hx_tmp1 = (_hx_tmp + (base->c * prep->b));
HXLINE( 156)		Float _hx_tmp2 = (base->b * prep->a);
HXDLIN( 156)		Float _hx_tmp3 = (_hx_tmp2 + (base->d * prep->b));
HXLINE( 157)		Float _hx_tmp4 = (base->a * prep->c);
HXDLIN( 157)		Float _hx_tmp5 = (_hx_tmp4 + (base->c * prep->d));
HXLINE( 158)		Float _hx_tmp6 = (base->b * prep->c);
HXDLIN( 158)		Float _hx_tmp7 = (_hx_tmp6 + (base->d * prep->d));
HXLINE( 159)		Float base1 = base->tx;
HXDLIN( 159)		Float _hx_tmp8 = (base1 + (base->a * prep->tx));
HXDLIN( 159)		Float _hx_tmp9 = (_hx_tmp8 + (base->c * prep->ty));
HXLINE( 160)		Float base2 = base->ty;
HXDLIN( 160)		Float _hx_tmp10 = (base2 + (base->b * prep->tx));
HXLINE( 155)		base->setTo(_hx_tmp1,_hx_tmp3,_hx_tmp5,_hx_tmp7,_hx_tmp9,(_hx_tmp10 + (base->d * prep->ty)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MatrixUtil_obj,prependMatrix,(void))

void MatrixUtil_obj::prependTranslation( ::openfl::geom::Matrix matrix,Float tx,Float ty){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_165_prependTranslation)
HXLINE( 166)		 ::openfl::geom::Matrix matrix1 = matrix;
HXDLIN( 166)		Float _hx_tmp = (matrix->a * tx);
HXDLIN( 166)		matrix1->tx = (matrix1->tx + (_hx_tmp + (matrix->c * ty)));
HXLINE( 167)		 ::openfl::geom::Matrix matrix2 = matrix;
HXDLIN( 167)		Float _hx_tmp1 = (matrix->b * tx);
HXDLIN( 167)		matrix2->ty = (matrix2->ty + (_hx_tmp1 + (matrix->d * ty)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtil_obj,prependTranslation,(void))

void MatrixUtil_obj::prependScale( ::openfl::geom::Matrix matrix,Float sx,Float sy){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_173_prependScale)
HXDLIN( 173)		Float _hx_tmp = (matrix->a * sx);
HXDLIN( 173)		Float _hx_tmp1 = (matrix->b * sx);
HXLINE( 174)		Float _hx_tmp2 = (matrix->c * sy);
HXLINE( 173)		matrix->setTo(_hx_tmp,_hx_tmp1,_hx_tmp2,(matrix->d * sy),matrix->tx,matrix->ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtil_obj,prependScale,(void))

void MatrixUtil_obj::prependRotation( ::openfl::geom::Matrix matrix,Float angle){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_180_prependRotation)
HXLINE( 181)		Float sin = ::Math_obj::sin(angle);
HXLINE( 182)		Float cos = ::Math_obj::cos(angle);
HXLINE( 184)		Float _hx_tmp = (matrix->a * cos);
HXDLIN( 184)		Float _hx_tmp1 = (_hx_tmp + (matrix->c * sin));
HXDLIN( 184)		Float _hx_tmp2 = (matrix->b * cos);
HXDLIN( 184)		Float _hx_tmp3 = (_hx_tmp2 + (matrix->d * sin));
HXLINE( 185)		Float _hx_tmp4 = (matrix->c * cos);
HXDLIN( 185)		Float _hx_tmp5 = (_hx_tmp4 - (matrix->a * sin));
HXDLIN( 185)		Float _hx_tmp6 = (matrix->d * cos);
HXLINE( 184)		matrix->setTo(_hx_tmp1,_hx_tmp3,_hx_tmp5,(_hx_tmp6 - (matrix->b * sin)),matrix->tx,matrix->ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MatrixUtil_obj,prependRotation,(void))

void MatrixUtil_obj::prependSkew( ::openfl::geom::Matrix matrix,Float skewX,Float skewY){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_198_prependSkew)
HXLINE( 199)		Float sinX = ::Math_obj::sin(skewX);
HXLINE( 200)		Float cosX = ::Math_obj::cos(skewX);
HXLINE( 201)		Float sinY = ::Math_obj::sin(skewY);
HXLINE( 202)		Float cosY = ::Math_obj::cos(skewY);
HXLINE( 204)		Float _hx_tmp = (matrix->a * cosY);
HXDLIN( 204)		Float _hx_tmp1 = (_hx_tmp + (matrix->c * sinY));
HXLINE( 205)		Float _hx_tmp2 = (matrix->b * cosY);
HXDLIN( 205)		Float _hx_tmp3 = (_hx_tmp2 + (matrix->d * sinY));
HXLINE( 206)		Float _hx_tmp4 = (matrix->c * cosX);
HXDLIN( 206)		Float _hx_tmp5 = (_hx_tmp4 - (matrix->a * sinX));
HXLINE( 207)		Float _hx_tmp6 = (matrix->d * cosX);
HXLINE( 204)		matrix->setTo(_hx_tmp1,_hx_tmp3,_hx_tmp5,(_hx_tmp6 - (matrix->b * sinX)),matrix->tx,matrix->ty);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtil_obj,prependSkew,(void))

::String MatrixUtil_obj::toString3D( ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transpose,hx::Null< int >  __o_precision){
bool transpose = __o_transpose.Default(true);
int precision = __o_precision.Default(3);
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_215_toString3D)
HXLINE( 216)		if (transpose) {
HXLINE( 216)			matrix->transpose();
            		}
HXLINE( 217)		matrix->copyRawDataTo(::starling::utils::MatrixUtil_obj::sRawData2,null(),null());
HXLINE( 218)		if (transpose) {
HXLINE( 218)			matrix->transpose();
            		}
HXLINE( 220)		return ((HX_("[Matrix3D rawData=\n",ac,4c,01,bc) + ::starling::utils::MatrixUtil_obj::formatRawData(::starling::utils::MatrixUtil_obj::sRawData2,(int)4,(int)4,precision,null())) + HX_("\n]",13,09,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(MatrixUtil_obj,toString3D,return )

::String MatrixUtil_obj::toString( ::openfl::geom::Matrix matrix,hx::Null< int >  __o_precision){
int precision = __o_precision.Default(3);
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_225_toString)
HXLINE( 226)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)0,matrix->a);
HXDLIN( 226)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)1,matrix->c);
HXDLIN( 226)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)2,matrix->tx);
HXLINE( 227)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)3,matrix->b);
HXDLIN( 227)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)4,matrix->d);
HXDLIN( 227)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sRawData2->data,(int)5,matrix->ty);
HXLINE( 229)		return ((HX_("[Matrix rawData=\n",bb,01,08,e0) + ::starling::utils::MatrixUtil_obj::formatRawData(::starling::utils::MatrixUtil_obj::sRawData2,(int)3,(int)2,precision,null())) + HX_("\n]",13,09,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MatrixUtil_obj,toString,return )

::String MatrixUtil_obj::formatRawData( ::openfl::_Vector::AbstractVector data,int numCols,int numRows,int precision,::String __o_indent){
::String indent = __o_indent.Default(HX_HCSTRING("  ","\x00","\x1c","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_234_formatRawData)
HXLINE( 235)		::String result = indent;
HXLINE( 236)		int numValues = (numCols * numRows);
HXLINE( 237)		Float highestValue = ((Float)0.0);
HXLINE( 238)		::String valueString;
HXLINE( 239)		Float value;
HXLINE( 241)		{
HXLINE( 241)			int _g1 = (int)0;
HXDLIN( 241)			int _g = numValues;
HXDLIN( 241)			while((_g1 < _g)){
HXLINE( 241)				_g1 = (_g1 + (int)1);
HXDLIN( 241)				int i = (_g1 - (int)1);
HXLINE( 243)				value = ::Math_obj::abs(( (Float)(::openfl::_Vector::IVector_obj::get(data->data,i)) ));
HXLINE( 244)				if ((value > highestValue)) {
HXLINE( 244)					highestValue = value;
            				}
            			}
            		}
HXLINE( 247)		int numChars = (::starling::utils::MathUtil_obj::toFixed(highestValue,precision).length + (int)1);
HXLINE( 249)		{
HXLINE( 249)			int _g11 = (int)0;
HXDLIN( 249)			int _g2 = numRows;
HXDLIN( 249)			while((_g11 < _g2)){
HXLINE( 249)				_g11 = (_g11 + (int)1);
HXDLIN( 249)				int y = (_g11 - (int)1);
HXLINE( 251)				{
HXLINE( 251)					int _g3 = (int)0;
HXDLIN( 251)					int _g21 = numCols;
HXDLIN( 251)					while((_g3 < _g21)){
HXLINE( 251)						_g3 = (_g3 + (int)1);
HXDLIN( 251)						int x = (_g3 - (int)1);
HXLINE( 253)						::Dynamic data1 = data->data;
HXDLIN( 253)						value = ( (Float)(::openfl::_Vector::IVector_obj::get(data1,((numCols * y) + x))) );
HXLINE( 254)						valueString = ::starling::utils::MathUtil_obj::toFixed(value,precision);
HXLINE( 256)						while((valueString.length < numChars)){
HXLINE( 256)							valueString = (HX_(" ",20,00,00,00) + valueString);
            						}
HXLINE( 258)						result = (result + valueString);
HXLINE( 259)						if ((x != (numCols - (int)1))) {
HXLINE( 259)							result = (result + HX_(", ",74,26,00,00));
            						}
            					}
            				}
HXLINE( 262)				if ((y != (numRows - (int)1))) {
HXLINE( 262)					result = (result + (HX_("\n",0a,00,00,00) + indent));
            				}
            			}
            		}
HXLINE( 265)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(MatrixUtil_obj,formatRawData,return )

void MatrixUtil_obj::snapToPixels( ::openfl::geom::Matrix matrix,Float pixelSize){
            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_275_snapToPixels)
HXLINE( 280)		Float E = ((Float)0.0001);
HXLINE( 282)		bool doSnap = false;
HXLINE( 283)		Float aSq;
HXDLIN( 283)		Float bSq;
HXDLIN( 283)		Float cSq;
HXDLIN( 283)		Float dSq;
HXLINE( 285)		bool _hx_tmp;
HXDLIN( 285)		bool _hx_tmp1;
HXDLIN( 285)		bool _hx_tmp2;
HXDLIN( 285)		if (((matrix->b + E) > (int)0)) {
HXLINE( 285)			_hx_tmp2 = ((matrix->b - E) < (int)0);
            		}
            		else {
HXLINE( 285)			_hx_tmp2 = false;
            		}
HXDLIN( 285)		if (_hx_tmp2) {
HXLINE( 285)			_hx_tmp1 = ((matrix->c + E) > (int)0);
            		}
            		else {
HXLINE( 285)			_hx_tmp1 = false;
            		}
HXDLIN( 285)		if (_hx_tmp1) {
HXLINE( 285)			_hx_tmp = ((matrix->c - E) < (int)0);
            		}
            		else {
HXLINE( 285)			_hx_tmp = false;
            		}
HXDLIN( 285)		if (_hx_tmp) {
HXLINE( 290)			aSq = (matrix->a * matrix->a);
HXLINE( 291)			dSq = (matrix->d * matrix->d);
HXLINE( 292)			bool doSnap1;
HXDLIN( 292)			bool doSnap2;
HXDLIN( 292)			if (((aSq + E) > (int)1)) {
HXLINE( 292)				doSnap2 = ((aSq - E) < (int)1);
            			}
            			else {
HXLINE( 292)				doSnap2 = false;
            			}
HXDLIN( 292)			if (doSnap2) {
HXLINE( 292)				doSnap1 = ((dSq + E) > (int)1);
            			}
            			else {
HXLINE( 292)				doSnap1 = false;
            			}
HXDLIN( 292)			if (doSnap1) {
HXLINE( 292)				doSnap = ((dSq - E) < (int)1);
            			}
            			else {
HXLINE( 292)				doSnap = false;
            			}
            		}
            		else {
HXLINE( 294)			bool _hx_tmp3;
HXDLIN( 294)			bool _hx_tmp4;
HXDLIN( 294)			bool _hx_tmp5;
HXDLIN( 294)			if (((matrix->a + E) > (int)0)) {
HXLINE( 294)				_hx_tmp5 = ((matrix->a - E) < (int)0);
            			}
            			else {
HXLINE( 294)				_hx_tmp5 = false;
            			}
HXDLIN( 294)			if (_hx_tmp5) {
HXLINE( 294)				_hx_tmp4 = ((matrix->d + E) > (int)0);
            			}
            			else {
HXLINE( 294)				_hx_tmp4 = false;
            			}
HXDLIN( 294)			if (_hx_tmp4) {
HXLINE( 294)				_hx_tmp3 = ((matrix->d - E) < (int)0);
            			}
            			else {
HXLINE( 294)				_hx_tmp3 = false;
            			}
HXDLIN( 294)			if (_hx_tmp3) {
HXLINE( 296)				bSq = (matrix->b * matrix->b);
HXLINE( 297)				cSq = (matrix->c * matrix->c);
HXLINE( 298)				bool doSnap3;
HXDLIN( 298)				bool doSnap4;
HXDLIN( 298)				if (((bSq + E) > (int)1)) {
HXLINE( 298)					doSnap4 = ((bSq - E) < (int)1);
            				}
            				else {
HXLINE( 298)					doSnap4 = false;
            				}
HXDLIN( 298)				if (doSnap4) {
HXLINE( 298)					doSnap3 = ((cSq + E) > (int)1);
            				}
            				else {
HXLINE( 298)					doSnap3 = false;
            				}
HXDLIN( 298)				if (doSnap3) {
HXLINE( 298)					doSnap = ((cSq - E) < (int)1);
            				}
            				else {
HXLINE( 298)					doSnap = false;
            				}
            			}
            		}
HXLINE( 301)		if (doSnap) {
HXLINE( 303)			matrix->tx = (::Math_obj::round(((Float)matrix->tx / (Float)pixelSize)) * pixelSize);
HXLINE( 304)			matrix->ty = (::Math_obj::round(((Float)matrix->ty / (Float)pixelSize)) * pixelSize);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MatrixUtil_obj,snapToPixels,(void))

 ::openfl::geom::Matrix3D MatrixUtil_obj::createPerspectiveProjectionMatrix(Float x,Float y,Float width,Float height,hx::Null< Float >  __o_stageWidth,hx::Null< Float >  __o_stageHeight, ::openfl::geom::Vector3D cameraPos, ::openfl::geom::Matrix3D out){
Float stageWidth = __o_stageWidth.Default(0);
Float stageHeight = __o_stageHeight.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_325_createPerspectiveProjectionMatrix)
HXLINE( 326)		if (hx::IsNull( out )) {
HXLINE( 326)			out =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
            		}
HXLINE( 327)		if ((stageWidth <= (int)0)) {
HXLINE( 327)			stageWidth = width;
            		}
HXLINE( 328)		if ((stageHeight <= (int)0)) {
HXLINE( 328)			stageHeight = height;
            		}
HXLINE( 329)		if (hx::IsNull( cameraPos )) {
HXLINE( 331)			cameraPos = ::starling::utils::MatrixUtil_obj::sPoint3D;
HXLINE( 332)			cameraPos->setTo(((Float)stageWidth / (Float)(int)2),((Float)stageHeight / (Float)(int)2),(((Float)stageWidth / (Float)::Math_obj::tan(((Float)0.5))) * ((Float)0.5)));
            		}
HXLINE( 337)		Float focalLength = ::Math_obj::abs(cameraPos->z);
HXLINE( 338)		Float cameraPos1 = cameraPos->x;
HXDLIN( 338)		Float offsetX = (cameraPos1 - ((Float)stageWidth / (Float)(int)2));
HXLINE( 339)		Float cameraPos2 = cameraPos->y;
HXDLIN( 339)		Float offsetY = (cameraPos2 - ((Float)stageHeight / (Float)(int)2));
HXLINE( 340)		Float _hx_far = (focalLength * (int)20);
HXLINE( 341)		Float _hx_near = (int)1;
HXLINE( 342)		Float scaleX = ((Float)stageWidth / (Float)width);
HXLINE( 343)		Float scaleY = ((Float)stageHeight / (Float)height);
HXLINE( 346)		{
HXLINE( 346)			::Dynamic this1 = ::starling::utils::MatrixUtil_obj::sMatrixData->data;
HXDLIN( 346)			::openfl::_Vector::IVector_obj::set(this1,(int)0,((Float)((int)2 * focalLength) / (Float)stageWidth));
            		}
HXLINE( 347)		{
HXLINE( 347)			::Dynamic this2 = ::starling::utils::MatrixUtil_obj::sMatrixData->data;
HXDLIN( 347)			::openfl::_Vector::IVector_obj::set(this2,(int)5,((Float)((int)-2 * focalLength) / (Float)stageHeight));
            		}
HXLINE( 348)		{
HXLINE( 348)			::Dynamic this3 = ::starling::utils::MatrixUtil_obj::sMatrixData->data;
HXDLIN( 348)			::openfl::_Vector::IVector_obj::set(this3,(int)10,((Float)_hx_far / (Float)(_hx_far - _hx_near)));
            		}
HXLINE( 349)		{
HXLINE( 349)			::Dynamic this4 = ::starling::utils::MatrixUtil_obj::sMatrixData->data;
HXDLIN( 349)			::openfl::_Vector::IVector_obj::set(this4,(int)14,((Float)(-(_hx_far) * _hx_near) / (Float)(_hx_far - _hx_near)));
            		}
HXLINE( 350)		::openfl::_Vector::IVector_obj::set(::starling::utils::MatrixUtil_obj::sMatrixData->data,(int)11,(int)1);
HXLINE( 353)		{
HXLINE( 353)			 ::openfl::_Vector::AbstractVector _g = ::starling::utils::MatrixUtil_obj::sMatrixData;
HXDLIN( 353)			{
HXLINE( 353)				Float value = (( (Float)(::openfl::_Vector::IVector_obj::get(_g->data,(int)0)) ) * scaleX);
HXDLIN( 353)				::openfl::_Vector::IVector_obj::set(_g->data,(int)0,value);
            			}
            		}
HXLINE( 354)		{
HXLINE( 354)			 ::openfl::_Vector::AbstractVector _g1 = ::starling::utils::MatrixUtil_obj::sMatrixData;
HXDLIN( 354)			{
HXLINE( 354)				Float value1 = (( (Float)(::openfl::_Vector::IVector_obj::get(_g1->data,(int)5)) ) * scaleY);
HXDLIN( 354)				::openfl::_Vector::IVector_obj::set(_g1->data,(int)5,value1);
            			}
            		}
HXLINE( 355)		{
HXLINE( 355)			::Dynamic this5 = ::starling::utils::MatrixUtil_obj::sMatrixData->data;
HXDLIN( 355)			::openfl::_Vector::IVector_obj::set(this5,(int)8,((scaleX - (int)1) - ((Float)(((int)2 * scaleX) * (x - offsetX)) / (Float)stageWidth)));
            		}
HXLINE( 356)		{
HXLINE( 356)			::Dynamic this6 = ::starling::utils::MatrixUtil_obj::sMatrixData->data;
HXDLIN( 356)			::openfl::_Vector::IVector_obj::set(this6,(int)9,((-(scaleY) + (int)1) + ((Float)(((int)2 * scaleY) * (y - offsetY)) / (Float)stageHeight)));
            		}
HXLINE( 358)		out->copyRawDataFrom(::starling::utils::MatrixUtil_obj::sMatrixData,null(),null());
HXLINE( 359)		out->prependTranslation((((Float)-(stageWidth) / (Float)((Float)2.0)) - offsetX),(((Float)-(stageHeight) / (Float)((Float)2.0)) - offsetY),focalLength);
HXLINE( 364)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(MatrixUtil_obj,createPerspectiveProjectionMatrix,return )

 ::openfl::geom::Matrix MatrixUtil_obj::createOrthographicProjectionMatrix(Float x,Float y,Float width,Float height, ::openfl::geom::Matrix out){
            	HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_370_createOrthographicProjectionMatrix)
HXLINE( 371)		if (hx::IsNull( out )) {
HXLINE( 371)			out =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 373)		out->setTo(((Float)((Float)2.0) / (Float)width),(int)0,(int)0,((Float)((Float)-2.0) / (Float)height),((Float)-((((int)2 * x) + width)) / (Float)width),((Float)(((int)2 * y) + height) / (Float)height));
HXLINE( 376)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(MatrixUtil_obj,createOrthographicProjectionMatrix,return )


MatrixUtil_obj::MatrixUtil_obj()
{
}

bool MatrixUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"skew") ) { outValue = skew_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sRawData") ) { outValue = ( sRawData ); return true; }
		if (HX_FIELD_EQ(inName,"sPoint3D") ) { outValue = ( sPoint3D ); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sRawData2") ) { outValue = ( sRawData2 ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isIdentity") ) { outValue = isIdentity_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString3D") ) { outValue = toString3D_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sMatrixData") ) { outValue = ( sMatrixData ); return true; }
		if (HX_FIELD_EQ(inName,"convertTo3D") ) { outValue = convertTo3D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"convertTo2D") ) { outValue = convertTo2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prependSkew") ) { outValue = prependSkew_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isIdentity3D") ) { outValue = isIdentity3D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prependScale") ) { outValue = prependScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"snapToPixels") ) { outValue = snapToPixels_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"prependMatrix") ) { outValue = prependMatrix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatRawData") ) { outValue = formatRawData_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"transformPoint") ) { outValue = transformPoint_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"transformCoords") ) { outValue = transformCoords_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prependRotation") ) { outValue = prependRotation_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformPoint3D") ) { outValue = transformPoint3D_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"transformCoords3D") ) { outValue = transformCoords3D_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { outValue = prependTranslation_dyn(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"createPerspectiveProjectionMatrix") ) { outValue = createPerspectiveProjectionMatrix_dyn(); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"createOrthographicProjectionMatrix") ) { outValue = createOrthographicProjectionMatrix_dyn(); return true; }
	}
	return false;
}

bool MatrixUtil_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sRawData") ) { sRawData=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		if (HX_FIELD_EQ(inName,"sPoint3D") ) { sPoint3D=ioValue.Cast<  ::openfl::geom::Vector3D >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sRawData2") ) { sRawData2=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sMatrixData") ) { sMatrixData=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MatrixUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo MatrixUtil_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &MatrixUtil_obj::sRawData,HX_HCSTRING("sRawData","\xff","\xd7","\x12","\x7e")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &MatrixUtil_obj::sRawData2,HX_HCSTRING("sRawData2","\x53","\x27","\x6a","\xd2")},
	{hx::fsObject /*::openfl::geom::Vector3D*/ ,(void *) &MatrixUtil_obj::sPoint3D,HX_HCSTRING("sPoint3D","\xce","\x00","\x1c","\xd0")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &MatrixUtil_obj::sMatrixData,HX_HCSTRING("sMatrixData","\x5e","\x9f","\xfe","\x57")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void MatrixUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MatrixUtil_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MatrixUtil_obj::sRawData,"sRawData");
	HX_MARK_MEMBER_NAME(MatrixUtil_obj::sRawData2,"sRawData2");
	HX_MARK_MEMBER_NAME(MatrixUtil_obj::sPoint3D,"sPoint3D");
	HX_MARK_MEMBER_NAME(MatrixUtil_obj::sMatrixData,"sMatrixData");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MatrixUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MatrixUtil_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MatrixUtil_obj::sRawData,"sRawData");
	HX_VISIT_MEMBER_NAME(MatrixUtil_obj::sRawData2,"sRawData2");
	HX_VISIT_MEMBER_NAME(MatrixUtil_obj::sPoint3D,"sPoint3D");
	HX_VISIT_MEMBER_NAME(MatrixUtil_obj::sMatrixData,"sMatrixData");
};

#endif

hx::Class MatrixUtil_obj::__mClass;

static ::String MatrixUtil_obj_sStaticFields[] = {
	HX_HCSTRING("sRawData","\xff","\xd7","\x12","\x7e"),
	HX_HCSTRING("sRawData2","\x53","\x27","\x6a","\xd2"),
	HX_HCSTRING("sPoint3D","\xce","\x00","\x1c","\xd0"),
	HX_HCSTRING("sMatrixData","\x5e","\x9f","\xfe","\x57"),
	HX_HCSTRING("convertTo3D","\x7f","\xc6","\x45","\x36"),
	HX_HCSTRING("convertTo2D","\xa0","\xc5","\x45","\x36"),
	HX_HCSTRING("isIdentity","\x48","\x57","\xde","\x33"),
	HX_HCSTRING("isIdentity3D","\xf9","\xe5","\x98","\xa9"),
	HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d"),
	HX_HCSTRING("transformPoint3D","\xf5","\x54","\x97","\x00"),
	HX_HCSTRING("transformCoords","\xaa","\x1e","\xda","\x03"),
	HX_HCSTRING("transformCoords3D","\xdb","\xc9","\x9e","\x45"),
	HX_HCSTRING("skew","\x0a","\x13","\x55","\x4c"),
	HX_HCSTRING("prependMatrix","\xef","\xff","\x74","\xbf"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependSkew","\x38","\x75","\x42","\x70"),
	HX_HCSTRING("toString3D","\x5d","\x80","\x45","\x4e"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("formatRawData","\xbb","\x69","\x31","\x34"),
	HX_HCSTRING("snapToPixels","\x72","\x03","\x00","\x9c"),
	HX_HCSTRING("createPerspectiveProjectionMatrix","\x30","\xe4","\x4e","\x41"),
	HX_HCSTRING("createOrthographicProjectionMatrix","\xdc","\x93","\x4d","\xbc"),
	::String(null())
};

void MatrixUtil_obj::__register()
{
	hx::Object *dummy = new MatrixUtil_obj;
	MatrixUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.MatrixUtil","\x86","\xd8","\xd2","\x26");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MatrixUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &MatrixUtil_obj::__SetStatic;
	__mClass->mMarkFunc = MatrixUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MatrixUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MatrixUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MatrixUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MatrixUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MatrixUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MatrixUtil_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_24_boot)
HXDLIN(  24)			::Array< Float > a = ::Array_obj< Float >::fromData( _hx_array_data_26d2d886_26,16);
HXDLIN(  24)			int length = null();
HXDLIN(  24)			bool fixed = null();
HXDLIN(  24)			 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN(  24)			{
HXDLIN(  24)				int _g1 = (int)0;
HXDLIN(  24)				int _g = a->length;
HXDLIN(  24)				while((_g1 < _g)){
HXDLIN(  24)					_g1 = (_g1 + (int)1);
HXDLIN(  24)					int i = (_g1 - (int)1);
HXDLIN(  24)					::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            				}
            			}
HXDLIN(  24)			return vector;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_24_boot)
HXDLIN(  24)		sRawData =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_26_boot)
HXDLIN(  26)		sRawData2 =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)16,true,null()),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_27_boot)
HXDLIN(  27)		sPoint3D =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f71887f20345dee4_28_boot)
HXDLIN(  28)			::Array< Float > a = ::Array_obj< Float >::fromData( _hx_array_data_26d2d886_32,16);
HXDLIN(  28)			int length = null();
HXDLIN(  28)			bool fixed = null();
HXDLIN(  28)			 ::openfl::_Vector::AbstractVector vector =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN(  28)			{
HXDLIN(  28)				int _g1 = (int)0;
HXDLIN(  28)				int _g = a->length;
HXDLIN(  28)				while((_g1 < _g)){
HXDLIN(  28)					_g1 = (_g1 + (int)1);
HXDLIN(  28)					int i = (_g1 - (int)1);
HXDLIN(  28)					::openfl::_Vector::IVector_obj::set(vector->data,i,a->__get(i));
            				}
            			}
HXDLIN(  28)			return vector;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f71887f20345dee4_28_boot)
HXDLIN(  28)		sMatrixData =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace starling
} // end namespace utils
