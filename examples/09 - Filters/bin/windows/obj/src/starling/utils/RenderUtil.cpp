// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DMipFilter_Context3DMipFilter_Impl_
#include <openfl/display3D/_Context3DMipFilter/Context3DMipFilter_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DRenderMode_Context3DRenderMode_Impl_
#include <openfl/display3D/_Context3DRenderMode/Context3DRenderMode_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFilter_Context3DTextureFilter_Impl_
#include <openfl/display3D/_Context3DTextureFilter/Context3DTextureFilter_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DWrapMode_Context3DWrapMode_Impl_
#include <openfl/display3D/_Context3DWrapMode/Context3DWrapMode_Impl_.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_utils_Color
#include <starling/utils/Color.h>
#endif
#ifndef INCLUDED_starling_utils_Execute
#include <starling/utils/Execute.h>
#endif
#ifndef INCLUDED_starling_utils_RenderUtil
#include <starling/utils/RenderUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_38_new,"starling.utils.RenderUtil","new",0x2678068d,"starling.utils.RenderUtil.new","starling/utils/RenderUtil.hx",38,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_45_clear,"starling.utils.RenderUtil","clear",0x689b4cfa,"starling.utils.RenderUtil.clear","starling/utils/RenderUtil.hx",45,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_58_getTextureLookupFlags,"starling.utils.RenderUtil","getTextureLookupFlags",0xbd6d1cf5,"starling.utils.RenderUtil.getTextureLookupFlags","starling/utils/RenderUtil.hx",58,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_94_getTextureVariantBits,"starling.utils.RenderUtil","getTextureVariantBits",0x9cc7ecb3,"starling.utils.RenderUtil.getTextureVariantBits","starling/utils/RenderUtil.hx",94,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_123_setSamplerStateAt,"starling.utils.RenderUtil","setSamplerStateAt",0x0d62fb6b,"starling.utils.RenderUtil.setSamplerStateAt","starling/utils/RenderUtil.hx",123,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_172_createAGALTexOperation,"starling.utils.RenderUtil","createAGALTexOperation",0xaa3ba320,"starling.utils.RenderUtil.createAGALTexOperation","starling/utils/RenderUtil.hx",172,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_245_requestContext3D,"starling.utils.RenderUtil","requestContext3D",0x949b2cc4,"starling.utils.RenderUtil.requestContext3D","starling/utils/RenderUtil.hx",245,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_257_requestContext3D,"starling.utils.RenderUtil","requestContext3D",0x949b2cc4,"starling.utils.RenderUtil.requestContext3D","starling/utils/RenderUtil.hx",257,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_273_requestContext3D,"starling.utils.RenderUtil","requestContext3D",0x949b2cc4,"starling.utils.RenderUtil.requestContext3D","starling/utils/RenderUtil.hx",273,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_282_requestContext3D,"starling.utils.RenderUtil","requestContext3D",0x949b2cc4,"starling.utils.RenderUtil.requestContext3D","starling/utils/RenderUtil.hx",282,0xe7cec181)
HX_LOCAL_STACK_FRAME(_hx_pos_06f625cf71cdfaf1_225_requestContext3D,"starling.utils.RenderUtil","requestContext3D",0x949b2cc4,"starling.utils.RenderUtil.requestContext3D","starling/utils/RenderUtil.hx",225,0xe7cec181)
namespace starling{
namespace utils{

void RenderUtil_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_38_new)
            	}

Dynamic RenderUtil_obj::__CreateEmpty() { return new RenderUtil_obj; }

void *RenderUtil_obj::_hx_vtable = 0;

Dynamic RenderUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderUtil_obj > _hx_result = new RenderUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RenderUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2ce8789d;
}

void RenderUtil_obj::clear(hx::Null< int >  __o_rgb,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil){
int rgb = __o_rgb.Default(0);
Float alpha = __o_alpha.Default(((Float)0.0));
Float depth = __o_depth.Default(((Float)1.0));
int stencil = __o_stencil.Default(0);
            	HX_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_45_clear)
HXDLIN(  45)		 ::openfl::display3D::Context3D _hx_tmp = ::starling::core::Starling_obj::get_current()->get_context();
HXLINE(  46)		Float _hx_tmp1 = ((Float)::starling::utils::Color_obj::getRed(rgb) / (Float)((Float)255.0));
HXLINE(  47)		Float _hx_tmp2 = ((Float)::starling::utils::Color_obj::getGreen(rgb) / (Float)((Float)255.0));
HXLINE(  45)		_hx_tmp->clear(_hx_tmp1,_hx_tmp2,((Float)::starling::utils::Color_obj::getBlue(rgb) / (Float)((Float)255.0)),alpha,depth,stencil,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(RenderUtil_obj,clear,(void))

::String RenderUtil_obj::getTextureLookupFlags(::String format,bool mipMapping,hx::Null< bool >  __o_repeat,::String __o_smoothing){
bool repeat = __o_repeat.Default(false);
::String smoothing = __o_smoothing.Default(HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"));
            	HX_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_58_getTextureLookupFlags)
HXLINE(  61)		::String options;
HXDLIN(  61)		if (repeat) {
HXLINE(  61)			options = HX_("repeat",5b,97,7c,06);
            		}
            		else {
HXLINE(  61)			options = HX_("clamp",fb,72,58,48);
            		}
HXDLIN(  61)		::Array< ::String > options1 = ::Array_obj< ::String >::__new(2)->init(0,HX_("2d",f2,2b,00,00))->init(1,options);
HXLINE(  63)		if (hx::IsEq( ::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::fromString(format),(int)3 )) {
HXLINE(  64)			options1->push(HX_("dxt1",d1,c9,74,42));
            		}
            		else {
HXLINE(  65)			if ((format == HX_("compressedAlpha",1d,d7,1f,4a))) {
HXLINE(  66)				options1->push(HX_("dxt5",d5,c9,74,42));
            			}
            		}
HXLINE(  68)		if ((smoothing == HX_("none",b8,12,0a,49))) {
HXLINE(  69)			options1->push(HX_("nearest",5e,18,ca,65));
HXLINE(  70)			::String _hx_tmp;
HXDLIN(  70)			if (mipMapping) {
HXLINE(  70)				_hx_tmp = HX_("mipnearest",4a,21,95,d0);
            			}
            			else {
HXLINE(  70)				_hx_tmp = HX_("mipnone",4c,7e,07,76);
            			}
HXDLIN(  70)			options1->push(_hx_tmp);
            		}
            		else {
HXLINE(  72)			if ((smoothing == HX_("bilinear",ec,b6,3d,e0))) {
HXLINE(  74)				options1->push(HX_("linear",e5,51,a0,ec));
HXLINE(  75)				::String _hx_tmp1;
HXDLIN(  75)				if (mipMapping) {
HXLINE(  75)					_hx_tmp1 = HX_("mipnearest",4a,21,95,d0);
            				}
            				else {
HXLINE(  75)					_hx_tmp1 = HX_("mipnone",4c,7e,07,76);
            				}
HXDLIN(  75)				options1->push(_hx_tmp1);
            			}
            			else {
HXLINE(  79)				options1->push(HX_("linear",e5,51,a0,ec));
HXLINE(  80)				::String _hx_tmp2;
HXDLIN(  80)				if (mipMapping) {
HXLINE(  80)					_hx_tmp2 = HX_("miplinear",79,ca,7e,64);
            				}
            				else {
HXLINE(  80)					_hx_tmp2 = HX_("mipnone",4c,7e,07,76);
            				}
HXDLIN(  80)				options1->push(_hx_tmp2);
            			}
            		}
HXLINE(  83)		return ((HX_("<",3c,00,00,00) + options1->join(HX_(",",2c,00,00,00))) + HX_(">",3e,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(RenderUtil_obj,getTextureLookupFlags,return )

int RenderUtil_obj::getTextureVariantBits( ::starling::textures::Texture texture){
            	HX_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_94_getTextureVariantBits)
HXLINE(  95)		if (hx::IsNull( texture )) {
HXLINE(  95)			return (int)0;
            		}
HXLINE(  97)		int bitField = (int)0;
HXLINE(  98)		int formatBits = (int)0;
HXLINE( 100)		{
HXLINE( 100)			 ::Dynamic _g = texture->get_format();
HXDLIN( 100)			 ::Dynamic _hx_switch_0 = _g;
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 105)				formatBits = (int)2;
HXDLIN( 105)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE( 103)				formatBits = (int)3;
HXDLIN( 103)				goto _hx_goto_3;
            			}
            			/* default */{
HXLINE( 107)				formatBits = (int)1;
            			}
            			_hx_goto_3:;
            		}
HXLINE( 110)		bitField = ((int)bitField | (int)formatBits);
HXLINE( 112)		if (!(texture->get_premultipliedAlpha())) {
HXLINE( 113)			bitField = ((int)bitField | (int)(int)4);
            		}
HXLINE( 115)		return bitField;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RenderUtil_obj,getTextureVariantBits,return )

void RenderUtil_obj::setSamplerStateAt(int sampler,bool mipMapping,::String __o_smoothing,hx::Null< bool >  __o_repeat){
::String smoothing = __o_smoothing.Default(HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"));
bool repeat = __o_repeat.Default(false);
            	HX_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_123_setSamplerStateAt)
HXLINE( 124)		::String wrap;
HXDLIN( 124)		if (repeat) {
HXLINE( 124)			wrap = ::openfl::display3D::_Context3DWrapMode::Context3DWrapMode_Impl__obj::toString((int)2);
            		}
            		else {
HXLINE( 124)			wrap = ::openfl::display3D::_Context3DWrapMode::Context3DWrapMode_Impl__obj::toString((int)0);
            		}
HXLINE( 125)		::String filter;
HXLINE( 126)		::String mipFilter;
HXLINE( 128)		if ((smoothing == HX_("none",b8,12,0a,49))) {
HXLINE( 130)			filter = ::openfl::display3D::_Context3DTextureFilter::Context3DTextureFilter_Impl__obj::toString((int)5);
HXLINE( 131)			if (mipMapping) {
HXLINE( 131)				mipFilter = ::openfl::display3D::_Context3DMipFilter::Context3DMipFilter_Impl__obj::toString((int)1);
            			}
            			else {
HXLINE( 131)				mipFilter = ::openfl::display3D::_Context3DMipFilter::Context3DMipFilter_Impl__obj::toString((int)2);
            			}
            		}
            		else {
HXLINE( 133)			if ((smoothing == HX_("bilinear",ec,b6,3d,e0))) {
HXLINE( 135)				filter = ::openfl::display3D::_Context3DTextureFilter::Context3DTextureFilter_Impl__obj::toString((int)4);
HXLINE( 136)				if (mipMapping) {
HXLINE( 136)					mipFilter = ::openfl::display3D::_Context3DMipFilter::Context3DMipFilter_Impl__obj::toString((int)1);
            				}
            				else {
HXLINE( 136)					mipFilter = ::openfl::display3D::_Context3DMipFilter::Context3DMipFilter_Impl__obj::toString((int)2);
            				}
            			}
            			else {
HXLINE( 140)				filter = ::openfl::display3D::_Context3DTextureFilter::Context3DTextureFilter_Impl__obj::toString((int)4);
HXLINE( 141)				if (mipMapping) {
HXLINE( 141)					mipFilter = ::openfl::display3D::_Context3DMipFilter::Context3DMipFilter_Impl__obj::toString((int)0);
            				}
            				else {
HXLINE( 141)					mipFilter = ::openfl::display3D::_Context3DMipFilter::Context3DMipFilter_Impl__obj::toString((int)2);
            				}
            			}
            		}
HXLINE( 144)		 ::openfl::display3D::Context3D _hx_tmp = ::starling::core::Starling_obj::get_current()->get_context();
HXDLIN( 144)		 ::Dynamic _hx_tmp1 = ::openfl::display3D::_Context3DWrapMode::Context3DWrapMode_Impl__obj::fromString(wrap);
HXDLIN( 144)		 ::Dynamic _hx_tmp2 = ::openfl::display3D::_Context3DTextureFilter::Context3DTextureFilter_Impl__obj::fromString(filter);
HXDLIN( 144)		_hx_tmp->setSamplerStateAt(sampler,_hx_tmp1,_hx_tmp2,::openfl::display3D::_Context3DMipFilter::Context3DMipFilter_Impl__obj::fromString(mipFilter));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(RenderUtil_obj,setSamplerStateAt,(void))

::String RenderUtil_obj::createAGALTexOperation(::String resultReg,::String uvReg,int sampler, ::starling::textures::Texture texture,hx::Null< bool >  __o_convertToPmaIfRequired,::String __o_tempReg){
bool convertToPmaIfRequired = __o_convertToPmaIfRequired.Default(true);
::String tempReg = __o_tempReg.Default(HX_HCSTRING("ft0","\x22","\xcb","\x4d","\x00"));
            	HX_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_172_createAGALTexOperation)
HXLINE( 173)		 ::Dynamic format = texture->get_format();
HXLINE( 174)		::String formatFlag;
HXLINE( 176)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 179)			formatFlag = HX_("dxt1",d1,c9,74,42);
HXDLIN( 179)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 181)			formatFlag = HX_("dxt5",d5,c9,74,42);
HXDLIN( 181)			goto _hx_goto_6;
            		}
            		/* default */{
HXLINE( 183)			formatFlag = HX_("rgba",b4,d0,a8,4b);
            		}
            		_hx_goto_6:;
HXLINE( 186)		bool needsConversion;
HXDLIN( 186)		if (convertToPmaIfRequired) {
HXLINE( 186)			needsConversion = !(texture->get_premultipliedAlpha());
            		}
            		else {
HXLINE( 186)			needsConversion = false;
            		}
HXLINE( 187)		::String texReg;
HXDLIN( 187)		bool texReg1;
HXDLIN( 187)		if (needsConversion) {
HXLINE( 187)			texReg1 = (resultReg == HX_("oc",14,61,00,00));
            		}
            		else {
HXLINE( 187)			texReg1 = false;
            		}
HXDLIN( 187)		if (texReg1) {
HXLINE( 187)			texReg = tempReg;
            		}
            		else {
HXLINE( 187)			texReg = resultReg;
            		}
HXLINE( 188)		::String operation = ((((((((HX_("tex ",59,cc,f9,4c) + texReg) + HX_(", ",74,26,00,00)) + uvReg) + HX_(", fs",c1,04,2e,1d)) + sampler) + HX_(" <2d, ",02,0d,cf,78)) + formatFlag) + HX_(">\n",0c,36,00,00));
HXLINE( 191)		if (needsConversion) {
HXLINE( 193)			if ((resultReg == HX_("oc",14,61,00,00))) {
HXLINE( 195)				operation = (operation + ((((((HX_("mul ",9c,67,65,48) + texReg) + HX_(".xyz, ",1f,c0,d7,cc)) + texReg) + HX_(".xyz, ",1f,c0,d7,cc)) + texReg) + HX_(".www\n",01,c7,71,cb)));
HXLINE( 196)				operation = (operation + (((HX_("mov ",cc,e2,60,48) + resultReg) + HX_(", ",74,26,00,00)) + texReg));
            			}
            			else {
HXLINE( 200)				operation = (operation + ((((((HX_("mul ",9c,67,65,48) + resultReg) + HX_(".xyz, ",1f,c0,d7,cc)) + texReg) + HX_(".xyz, ",1f,c0,d7,cc)) + texReg) + HX_(".www\n",01,c7,71,cb)));
            			}
            		}
HXLINE( 204)		return operation;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(RenderUtil_obj,createAGALTexOperation,return )

void RenderUtil_obj::requestContext3D( ::openfl::display::Stage3D stage3D,::String renderMode, ::Dynamic profile){
            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,requestNextProfile,::Array< ::String >,currentProfile, ::openfl::display::Stage3D,stage3D,::String,renderMode,::cpp::VirtualArray,profiles) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_245_requestContext3D)
HXLINE( 246)			 ::Dynamic _hx_tmp = profiles->shift();
HXDLIN( 246)			currentProfile[(int)0] = ( (::String)(_hx_tmp) );
HXLINE( 248)			try {
            				HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE( 248)				::starling::utils::Execute_obj::execute(stage3D->requestContext3D_dyn(),::cpp::VirtualArray_obj::__new(2)->init(0,renderMode)->init(1,currentProfile->__get((int)0)));
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::openfl::errors::Error error = _hx_e;
HXLINE( 251)					if ((profiles->get_length() != (int)0)) {
HXLINE( 251)						::haxe::Timer_obj::delay(requestNextProfile->__get((int)0),(int)1);
            					}
            					else {
HXLINE( 252)						HX_STACK_DO_THROW(error);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,onError, ::openfl::display::Stage3D,stage3D,::cpp::VirtualArray,profiles,::String,renderMode,::Array< ::Dynamic>,onFinished) HXARGC(1)
            		void _hx_run( ::openfl::events::Event event){
            			HX_GC_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_257_requestContext3D)
HXLINE( 258)			 ::openfl::display3D::Context3D context = stage3D->context3D;
HXLINE( 260)			bool onCreated1;
HXDLIN( 260)			bool onCreated2;
HXDLIN( 260)			if (hx::IsEq( ::openfl::display3D::_Context3DRenderMode::Context3DRenderMode_Impl__obj::fromString(renderMode),(int)0 )) {
HXLINE( 260)				onCreated2 = (profiles->get_length() != (int)0);
            			}
            			else {
HXLINE( 260)				onCreated2 = false;
            			}
HXDLIN( 260)			if (onCreated2) {
HXLINE( 260)				onCreated1 = (context->driverInfo.indexOf(HX_("Software",47,f8,fd,74),null()) != (int)-1);
            			}
            			else {
HXLINE( 260)				onCreated1 = false;
            			}
HXDLIN( 260)			if (onCreated1) {
HXLINE( 263)				onError->__get((int)0)(event);
            			}
            			else {
HXLINE( 267)				onFinished->__get((int)0)();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,requestNextProfile,::cpp::VirtualArray,profiles,::Array< ::Dynamic>,onFinished) HXARGC(1)
            		void _hx_run( ::openfl::events::Event event1){
            			HX_GC_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_273_requestContext3D)
HXLINE( 273)			if ((profiles->get_length() != (int)0)) {
HXLINE( 275)				event1->stopImmediatePropagation();
HXLINE( 276)				::haxe::Timer_obj::delay(requestNextProfile->__get((int)0),(int)1);
            			}
            			else {
HXLINE( 278)				onFinished->__get((int)0)();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_3,::Array< ::Dynamic>,onError, ::openfl::display::Stage3D,stage3D, ::Dynamic,onCreated) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_282_requestContext3D)
HXLINE( 283)			stage3D->removeEventListener(HX_("context3DCreate",7c,bf,59,7b),onCreated,null());
HXLINE( 284)			stage3D->removeEventListener(HX_("error",c8,cb,29,73),onError->__get((int)0),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_06f625cf71cdfaf1_225_requestContext3D)
HXLINE( 226)		::cpp::VirtualArray profiles;
HXLINE( 227)		::Array< ::String > currentProfile = ::Array_obj< ::String >::__new(0);
HXLINE( 229)		if (hx::IsEq( profile,HX_("auto",6f,df,76,40) )) {
HXLINE( 230)			profiles = ::cpp::VirtualArray_obj::__new(6)->init(0,HX_("standardExtended",16,cd,15,fe))->init(1,HX_("standard",3d,37,78,ea))->init(2,HX_("standardConstrained",19,24,99,7f))->init(3,HX_("baselineExtended",5e,fa,57,d8))->init(4,HX_("baseline",85,dc,27,11))->init(5,HX_("baselineConstrained",d1,73,c8,e8));
            		}
            		else {
HXLINE( 232)			if (::Std_obj::is(profile,hx::ClassOf< ::String >())) {
HXLINE( 233)				profiles = ::cpp::VirtualArray_obj::__new(1)->init(0,::Std_obj::string(profile));
            			}
            			else {
HXLINE( 234)				if (::Std_obj::is(profile,hx::ArrayBase::__mClass)) {
HXLINE( 235)					profiles = hx::TCast< ::cpp::VirtualArray >::cast(profile);
            				}
            				else {
HXLINE( 237)					HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("Profile must be of type 'String' or 'Array'",2f,f1,31,1a)));
            				}
            			}
            		}
HXLINE( 239)		::Array< ::Dynamic> requestNextProfile = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 240)		::Array< ::Dynamic> onFinished = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 241)		::Array< ::Dynamic> onError = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 242)		 ::Dynamic onCreated = null();
HXLINE( 244)		requestNextProfile[(int)0] =  ::Dynamic(new _hx_Closure_0(requestNextProfile,currentProfile,stage3D,renderMode,profiles));
HXLINE( 256)		onCreated =  ::Dynamic(new _hx_Closure_1(onError,stage3D,profiles,renderMode,onFinished));
HXLINE( 271)		onError[(int)0] =  ::Dynamic(new _hx_Closure_2(requestNextProfile,profiles,onFinished));
HXLINE( 281)		onFinished[(int)0] =  ::Dynamic(new _hx_Closure_3(onError,stage3D,onCreated));
HXLINE( 287)		stage3D->addEventListener(HX_("context3DCreate",7c,bf,59,7b),onCreated,false,(int)100,null());
HXLINE( 288)		stage3D->addEventListener(HX_("error",c8,cb,29,73),onError->__get((int)0),false,(int)100,null());
HXLINE( 290)		requestNextProfile->__get((int)0)();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(RenderUtil_obj,requestContext3D,(void))


RenderUtil_obj::RenderUtil_obj()
{
}

bool RenderUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"requestContext3D") ) { outValue = requestContext3D_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { outValue = setSamplerStateAt_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getTextureLookupFlags") ) { outValue = getTextureLookupFlags_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTextureVariantBits") ) { outValue = getTextureVariantBits_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createAGALTexOperation") ) { outValue = createAGALTexOperation_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *RenderUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *RenderUtil_obj_sStaticStorageInfo = 0;
#endif

static void RenderUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class RenderUtil_obj::__mClass;

static ::String RenderUtil_obj_sStaticFields[] = {
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("getTextureLookupFlags","\x88","\xd7","\xb6","\x98"),
	HX_HCSTRING("getTextureVariantBits","\x46","\xa7","\x11","\x78"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("createAGALTexOperation","\x2d","\x29","\x75","\xaf"),
	HX_HCSTRING("requestContext3D","\x11","\x7b","\x31","\xf9"),
	::String(null())
};

void RenderUtil_obj::__register()
{
	hx::Object *dummy = new RenderUtil_obj;
	RenderUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.RenderUtil","\x1b","\xbc","\xdc","\x88");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RenderUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RenderUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RenderUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< RenderUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace utils
