// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_utils_ScaleMode
#include <starling/utils/ScaleMode.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d5f4a28292ea539e_22_isValid,"starling.utils.ScaleMode","isValid",0x51812b0e,"starling.utils.ScaleMode.isValid","starling/utils/ScaleMode.hx",22,0x8e9bf7f6)
HX_LOCAL_STACK_FRAME(_hx_pos_d5f4a28292ea539e_8_boot,"starling.utils.ScaleMode","boot",0x9cdda056,"starling.utils.ScaleMode.boot","starling/utils/ScaleMode.hx",8,0x8e9bf7f6)
HX_LOCAL_STACK_FRAME(_hx_pos_d5f4a28292ea539e_12_boot,"starling.utils.ScaleMode","boot",0x9cdda056,"starling.utils.ScaleMode.boot","starling/utils/ScaleMode.hx",12,0x8e9bf7f6)
HX_LOCAL_STACK_FRAME(_hx_pos_d5f4a28292ea539e_17_boot,"starling.utils.ScaleMode","boot",0x9cdda056,"starling.utils.ScaleMode.boot","starling/utils/ScaleMode.hx",17,0x8e9bf7f6)
namespace starling{
namespace utils{

void ScaleMode_obj::__construct() { }

Dynamic ScaleMode_obj::__CreateEmpty() { return new ScaleMode_obj; }

void *ScaleMode_obj::_hx_vtable = 0;

Dynamic ScaleMode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ScaleMode_obj > _hx_result = new ScaleMode_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ScaleMode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x292e6dec;
}

::String ScaleMode_obj::NONE;

::String ScaleMode_obj::NO_BORDER;

::String ScaleMode_obj::SHOW_ALL;

bool ScaleMode_obj::isValid(::String scaleMode){
            	HX_STACKFRAME(&_hx_pos_d5f4a28292ea539e_22_isValid)
HXDLIN(  22)		bool _hx_tmp;
HXDLIN(  22)		if ((scaleMode != HX_("none",b8,12,0a,49))) {
HXDLIN(  22)			_hx_tmp = (scaleMode == HX_("noBorder",0d,48,2a,34));
            		}
            		else {
HXDLIN(  22)			_hx_tmp = true;
            		}
HXDLIN(  22)		if (!(_hx_tmp)) {
HXDLIN(  22)			return (scaleMode == HX_("showAll",24,58,96,7b));
            		}
            		else {
HXDLIN(  22)			return true;
            		}
HXDLIN(  22)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ScaleMode_obj,isValid,return )


ScaleMode_obj::ScaleMode_obj()
{
}

bool ScaleMode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"isValid") ) { outValue = isValid_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ScaleMode_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ScaleMode_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &ScaleMode_obj::NONE,HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33")},
	{hx::fsString,(void *) &ScaleMode_obj::NO_BORDER,HX_HCSTRING("NO_BORDER","\x6a","\x40","\x33","\x71")},
	{hx::fsString,(void *) &ScaleMode_obj::SHOW_ALL,HX_HCSTRING("SHOW_ALL","\x7f","\x39","\x6f","\x2a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ScaleMode_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ScaleMode_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ScaleMode_obj::NONE,"NONE");
	HX_MARK_MEMBER_NAME(ScaleMode_obj::NO_BORDER,"NO_BORDER");
	HX_MARK_MEMBER_NAME(ScaleMode_obj::SHOW_ALL,"SHOW_ALL");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ScaleMode_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ScaleMode_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ScaleMode_obj::NONE,"NONE");
	HX_VISIT_MEMBER_NAME(ScaleMode_obj::NO_BORDER,"NO_BORDER");
	HX_VISIT_MEMBER_NAME(ScaleMode_obj::SHOW_ALL,"SHOW_ALL");
};

#endif

hx::Class ScaleMode_obj::__mClass;

static ::String ScaleMode_obj_sStaticFields[] = {
	HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),
	HX_HCSTRING("NO_BORDER","\x6a","\x40","\x33","\x71"),
	HX_HCSTRING("SHOW_ALL","\x7f","\x39","\x6f","\x2a"),
	HX_HCSTRING("isValid","\xb2","\x18","\x3e","\xce"),
	::String(null())
};

void ScaleMode_obj::__register()
{
	hx::Object *dummy = new ScaleMode_obj;
	ScaleMode_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.ScaleMode","\xca","\xb6","\x0f","\x02");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ScaleMode_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ScaleMode_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ScaleMode_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ScaleMode_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ScaleMode_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScaleMode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScaleMode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ScaleMode_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d5f4a28292ea539e_8_boot)
HXDLIN(   8)		NONE = HX_("none",b8,12,0a,49);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d5f4a28292ea539e_12_boot)
HXDLIN(  12)		NO_BORDER = HX_("noBorder",0d,48,2a,34);
            	}
{
            	HX_STACKFRAME(&_hx_pos_d5f4a28292ea539e_17_boot)
HXDLIN(  17)		SHOW_ALL = HX_("showAll",24,58,96,7b);
            	}
}

} // end namespace starling
} // end namespace utils
