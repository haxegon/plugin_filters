// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_starling_utils_StringUtil
#include <starling/utils/StringUtil.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7b511fb755008a29_19_format,"starling.utils.StringUtil","format",0x05d0c18f,"starling.utils.StringUtil.format","starling/utils/StringUtil.hx",19,0xc2067966)
HX_LOCAL_STACK_FRAME(_hx_pos_7b511fb755008a29_41_clean,"starling.utils.StringUtil","clean",0x182dd231,"starling.utils.StringUtil.clean","starling/utils/StringUtil.hx",41,0xc2067966)
HX_LOCAL_STACK_FRAME(_hx_pos_7b511fb755008a29_50_trimStart,"starling.utils.StringUtil","trimStart",0x1c1b28c8,"starling.utils.StringUtil.trimStart","starling/utils/StringUtil.hx",50,0xc2067966)
HX_LOCAL_STACK_FRAME(_hx_pos_7b511fb755008a29_68_trimEnd,"starling.utils.StringUtil","trimEnd",0x5b66b2c1,"starling.utils.StringUtil.trimEnd","starling/utils/StringUtil.hx",68,0xc2067966)
HX_LOCAL_STACK_FRAME(_hx_pos_7b511fb755008a29_85_trim,"starling.utils.StringUtil","trim",0x2810093a,"starling.utils.StringUtil.trim","starling/utils/StringUtil.hx",85,0xc2067966)
namespace starling{
namespace utils{

void StringUtil_obj::__construct() { }

Dynamic StringUtil_obj::__CreateEmpty() { return new StringUtil_obj; }

void *StringUtil_obj::_hx_vtable = 0;

Dynamic StringUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StringUtil_obj > _hx_result = new StringUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StringUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x41db0f98;
}

::String StringUtil_obj::format(::String format,::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_7b511fb755008a29_19_format)
HXLINE(  22)		{
HXLINE(  22)			int _g1 = (int)0;
HXDLIN(  22)			int _g = args->get_length();
HXDLIN(  22)			while((_g1 < _g)){
HXLINE(  22)				_g1 = (_g1 + (int)1);
HXDLIN(  22)				int i = (_g1 - (int)1);
HXLINE(  24)				 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,((HX_("\\{",9f,50,00,00) + i) + HX_("\\}",a1,50,00,00)),HX_("g",67,00,00,00));
HXLINE(  25)				format = r->replace(format,::Std_obj::string(args->__get(i)));
            			}
            		}
HXLINE(  28)		return format;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(StringUtil_obj,format,return )

::String StringUtil_obj::clean(::String string){
            	HX_STACKFRAME(&_hx_pos_7b511fb755008a29_41_clean)
HXDLIN(  41)		return (HX_("_",5f,00,00,00) + string).substr((int)1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringUtil_obj,clean,return )

::String StringUtil_obj::trimStart(::String string){
            	HX_STACKFRAME(&_hx_pos_7b511fb755008a29_50_trimStart)
HXLINE(  51)		int pos = (int)0;
HXLINE(  52)		int length = string.length;
HXLINE(  54)		while((pos < length)){
HXLINE(  55)			if (hx::IsGreater( string.charCodeAt(pos),(int)32 )) {
HXLINE(  55)				goto _hx_goto_3;
            			}
HXLINE(  56)			pos = (pos + (int)1);
            		}
            		_hx_goto_3:;
HXLINE(  59)		return string.substring(pos,length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringUtil_obj,trimStart,return )

::String StringUtil_obj::trimEnd(::String string){
            	HX_STACKFRAME(&_hx_pos_7b511fb755008a29_68_trimEnd)
HXLINE(  69)		int pos = (string.length - (int)1);
HXLINE(  70)		while((pos >= (int)0)){
HXLINE(  71)			if (hx::IsGreater( string.charCodeAt(pos),(int)32 )) {
HXLINE(  71)				goto _hx_goto_5;
            			}
HXLINE(  72)			pos = (pos - (int)1);
            		}
            		_hx_goto_5:;
HXLINE(  75)		return string.substring((int)0,(pos + (int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringUtil_obj,trimEnd,return )

::String StringUtil_obj::trim(::String string){
            	HX_STACKFRAME(&_hx_pos_7b511fb755008a29_85_trim)
HXLINE(  86)		int startPos;
HXDLIN(  86)		int endPos;
HXLINE(  87)		int length = string.length;
HXLINE(  89)		startPos = (int)0;
HXLINE(  90)		while((startPos < length)){
HXLINE(  91)			if (hx::IsGreater( string.charCodeAt(startPos),(int)32 )) {
HXLINE(  91)				goto _hx_goto_7;
            			}
HXLINE(  92)			startPos = (startPos + (int)1);
            		}
            		_hx_goto_7:;
HXLINE(  95)		endPos = (string.length - (int)1);
HXLINE(  96)		while((endPos >= startPos)){
HXLINE(  97)			if (hx::IsGreater( string.charCodeAt(endPos),(int)32 )) {
HXLINE(  97)				goto _hx_goto_8;
            			}
HXLINE(  98)			endPos = (endPos - (int)1);
            		}
            		_hx_goto_8:;
HXLINE( 101)		return string.substring(startPos,(endPos + (int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringUtil_obj,trim,return )


StringUtil_obj::StringUtil_obj()
{
}

bool StringUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"trim") ) { outValue = trim_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clean") ) { outValue = clean_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { outValue = format_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"trimEnd") ) { outValue = trimEnd_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"trimStart") ) { outValue = trimStart_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *StringUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *StringUtil_obj_sStaticStorageInfo = 0;
#endif

static void StringUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StringUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StringUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StringUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class StringUtil_obj::__mClass;

static ::String StringUtil_obj_sStaticFields[] = {
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("clean","\x89","\x71","\x5b","\x48"),
	HX_HCSTRING("trimStart","\x20","\x54","\x47","\xc8"),
	HX_HCSTRING("trimEnd","\x19","\xd8","\xbc","\x29"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	::String(null())
};

void StringUtil_obj::__register()
{
	hx::Object *dummy = new StringUtil_obj;
	StringUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.StringUtil","\x16","\x53","\xcf","\x9d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StringUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StringUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< StringUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StringUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace utils
