// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_starling_utils_Color
#include <starling/utils/Color.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_36_getAlpha,"starling.utils.Color","getAlpha",0x9c05d676,"starling.utils.Color.getAlpha","starling/utils/Color.hx",36,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_39_getRed,"starling.utils.Color","getRed",0x37539269,"starling.utils.Color.getRed","starling/utils/Color.hx",39,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_42_getGreen,"starling.utils.Color","getGreen",0x145c3ddb,"starling.utils.Color.getGreen","starling/utils/Color.hx",42,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_45_getBlue,"starling.utils.Color","getBlue",0x273e7e82,"starling.utils.Color.getBlue","starling/utils/Color.hx",45,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_50_setAlpha,"starling.utils.Color","setAlpha",0x4a632fea,"starling.utils.Color.setAlpha","starling/utils/Color.hx",50,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_56_setRed,"starling.utils.Color","setRed",0x039be6dd,"starling.utils.Color.setRed","starling/utils/Color.hx",56,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_62_setGreen,"starling.utils.Color","setGreen",0xc2b9974f,"starling.utils.Color.setGreen","starling/utils/Color.hx",62,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_68_setBlue,"starling.utils.Color","setBlue",0x1a400f8e,"starling.utils.Color.setBlue","starling/utils/Color.hx",68,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_75_rgb,"starling.utils.Color","rgb",0xe58ee63f,"starling.utils.Color.rgb","starling/utils/Color.hx",75,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_82_argb,"starling.utils.Color","argb",0xec464dda,"starling.utils.Color.argb","starling/utils/Color.hx",82,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_88_toVector,"starling.utils.Color","toVector",0xd934782c,"starling.utils.Color.toVector","starling/utils/Color.hx",88,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_101_multiply,"starling.utils.Color","multiply",0xb52501b2,"starling.utils.Color.multiply","starling/utils/Color.hx",101,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_120_interpolate,"starling.utils.Color","interpolate",0x8f1461f3,"starling.utils.Color.interpolate","starling/utils/Color.hx",120,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_18_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",18,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_19_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",19,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_20_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",20,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_21_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",21,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_22_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",22,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_23_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",23,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_24_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",24,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_25_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",25,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_26_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",26,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_27_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",27,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_28_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",28,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_29_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",29,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_30_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",30,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_31_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",31,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_32_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",32,0xcdfa44e0)
HX_LOCAL_STACK_FRAME(_hx_pos_4ba1b82626c5d13b_33_boot,"starling.utils.Color","boot",0xeced44c0,"starling.utils.Color.boot","starling/utils/Color.hx",33,0xcdfa44e0)
namespace starling{
namespace utils{

void Color_obj::__construct() { }

Dynamic Color_obj::__CreateEmpty() { return new Color_obj; }

void *Color_obj::_hx_vtable = 0;

Dynamic Color_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Color_obj > _hx_result = new Color_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Color_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0261aaee;
}

int Color_obj::WHITE;

int Color_obj::SILVER;

int Color_obj::GRAY;

int Color_obj::BLACK;

int Color_obj::RED;

int Color_obj::MAROON;

int Color_obj::YELLOW;

int Color_obj::OLIVE;

int Color_obj::LIME;

int Color_obj::GREEN;

int Color_obj::AQUA;

int Color_obj::TEAL;

int Color_obj::BLUE;

int Color_obj::NAVY;

int Color_obj::FUCHSIA;

int Color_obj::PURPLE;

int Color_obj::getAlpha(int color){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_36_getAlpha)
HXDLIN(  36)		return ((int)hx::UShr(color,(int)24) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_obj,getAlpha,return )

int Color_obj::getRed(int color){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_39_getRed)
HXDLIN(  39)		return ((int)hx::UShr(color,(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_obj,getRed,return )

int Color_obj::getGreen(int color){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_42_getGreen)
HXDLIN(  42)		return ((int)hx::UShr(color,(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_obj,getGreen,return )

int Color_obj::getBlue(int color){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_45_getBlue)
HXDLIN(  45)		return ((int)color & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Color_obj,getBlue,return )

int Color_obj::setAlpha(int color,int alpha){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_50_setAlpha)
HXDLIN(  50)		return ((int)((int)color & (int)(int)16777215) | (int)((int)((int)alpha & (int)(int)255) << (int)(int)24));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_obj,setAlpha,return )

int Color_obj::setRed(int color,int red){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_56_setRed)
HXDLIN(  56)		return ((int)((int)color & (int)(int)-16711681) | (int)((int)((int)red & (int)(int)255) << (int)(int)16));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_obj,setRed,return )

int Color_obj::setGreen(int color,int green){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_62_setGreen)
HXDLIN(  62)		return ((int)((int)color & (int)(int)-65281) | (int)((int)((int)green & (int)(int)255) << (int)(int)8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_obj,setGreen,return )

int Color_obj::setBlue(int color,int blue){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_68_setBlue)
HXDLIN(  68)		return ((int)((int)color & (int)(int)-256) | (int)((int)blue & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_obj,setBlue,return )

int Color_obj::rgb(int red,int green,int blue){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_75_rgb)
HXDLIN(  75)		return ((int)((int)((int)red << (int)(int)16) | (int)((int)green << (int)(int)8)) | (int)blue);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Color_obj,rgb,return )

int Color_obj::argb(int alpha,int red,int green,int blue){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_82_argb)
HXDLIN(  82)		return ((int)((int)((int)((int)alpha << (int)(int)24) | (int)((int)red << (int)(int)16)) | (int)((int)green << (int)(int)8)) | (int)blue);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Color_obj,argb,return )

 ::openfl::_Vector::AbstractVector Color_obj::toVector(int color, ::openfl::_Vector::AbstractVector out){
            	HX_GC_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_88_toVector)
HXLINE(  89)		if (hx::IsNull( out )) {
HXLINE(  89)			out =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)4,true,null()),null());
            		}
HXLINE(  91)		::Dynamic out1 = out->data;
HXDLIN(  91)		int _hx_int = ((int)hx::UShr(color,(int)16) & (int)(int)255);
HXDLIN(  91)		Float _hx_tmp;
HXDLIN(  91)		if ((_hx_int < (int)0)) {
HXLINE(  91)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE(  91)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN(  91)		::openfl::_Vector::IVector_obj::set(out1,(int)0,((Float)_hx_tmp / (Float)((Float)255.0)));
HXLINE(  92)		::Dynamic out2 = out->data;
HXDLIN(  92)		int int1 = ((int)hx::UShr(color,(int)8) & (int)(int)255);
HXDLIN(  92)		Float _hx_tmp1;
HXDLIN(  92)		if ((int1 < (int)0)) {
HXLINE(  92)			_hx_tmp1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE(  92)			_hx_tmp1 = (int1 + ((Float)0.0));
            		}
HXDLIN(  92)		::openfl::_Vector::IVector_obj::set(out2,(int)1,((Float)_hx_tmp1 / (Float)((Float)255.0)));
HXLINE(  93)		::Dynamic out3 = out->data;
HXDLIN(  93)		int int2 = ((int)color & (int)(int)255);
HXDLIN(  93)		Float _hx_tmp2;
HXDLIN(  93)		if ((int2 < (int)0)) {
HXLINE(  93)			_hx_tmp2 = (((Float)4294967296.0) + int2);
            		}
            		else {
HXLINE(  93)			_hx_tmp2 = (int2 + ((Float)0.0));
            		}
HXDLIN(  93)		::openfl::_Vector::IVector_obj::set(out3,(int)2,((Float)_hx_tmp2 / (Float)((Float)255.0)));
HXLINE(  94)		::Dynamic out4 = out->data;
HXDLIN(  94)		int int3 = ((int)hx::UShr(color,(int)24) & (int)(int)255);
HXDLIN(  94)		Float _hx_tmp3;
HXDLIN(  94)		if ((int3 < (int)0)) {
HXLINE(  94)			_hx_tmp3 = (((Float)4294967296.0) + int3);
            		}
            		else {
HXLINE(  94)			_hx_tmp3 = (int3 + ((Float)0.0));
            		}
HXDLIN(  94)		::openfl::_Vector::IVector_obj::set(out4,(int)3,((Float)_hx_tmp3 / (Float)((Float)255.0)));
HXLINE(  96)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_obj,toVector,return )

int Color_obj::multiply(int color,Float factor){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_101_multiply)
HXLINE( 102)		if ((factor == ((Float)0.0))) {
HXLINE( 102)			return (int)0;
            		}
HXLINE( 104)		int _hx_int = ((int)hx::UShr(color,(int)24) & (int)(int)255);
HXDLIN( 104)		Float alpha;
HXDLIN( 104)		if ((_hx_int < (int)0)) {
HXLINE( 104)			alpha = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 104)			alpha = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 104)		int alpha1 = ::Std_obj::_hx_int((alpha * factor));
HXLINE( 105)		int int1 = ((int)hx::UShr(color,(int)16) & (int)(int)255);
HXDLIN( 105)		Float red;
HXDLIN( 105)		if ((int1 < (int)0)) {
HXLINE( 105)			red = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE( 105)			red = (int1 + ((Float)0.0));
            		}
HXDLIN( 105)		int red1 = ::Std_obj::_hx_int((red * factor));
HXLINE( 106)		int int2 = ((int)hx::UShr(color,(int)8) & (int)(int)255);
HXDLIN( 106)		Float green;
HXDLIN( 106)		if ((int2 < (int)0)) {
HXLINE( 106)			green = (((Float)4294967296.0) + int2);
            		}
            		else {
HXLINE( 106)			green = (int2 + ((Float)0.0));
            		}
HXDLIN( 106)		int green1 = ::Std_obj::_hx_int((green * factor));
HXLINE( 107)		int int3 = ((int)color & (int)(int)255);
HXDLIN( 107)		Float blue;
HXDLIN( 107)		if ((int3 < (int)0)) {
HXLINE( 107)			blue = (((Float)4294967296.0) + int3);
            		}
            		else {
HXLINE( 107)			blue = (int3 + ((Float)0.0));
            		}
HXDLIN( 107)		int blue1 = ::Std_obj::_hx_int((blue * factor));
HXLINE( 109)		bool aNeg = (alpha1 < (int)0);
HXDLIN( 109)		bool bNeg = ((int)255 < (int)0);
HXDLIN( 109)		bool _hx_tmp;
HXDLIN( 109)		if ((aNeg != bNeg)) {
HXLINE( 109)			_hx_tmp = aNeg;
            		}
            		else {
HXLINE( 109)			_hx_tmp = (alpha1 > (int)255);
            		}
HXDLIN( 109)		if (_hx_tmp) {
HXLINE( 109)			alpha1 = (int)255;
            		}
HXLINE( 110)		bool aNeg1 = (red1 < (int)0);
HXDLIN( 110)		bool bNeg1 = ((int)255 < (int)0);
HXDLIN( 110)		bool _hx_tmp1;
HXDLIN( 110)		if ((aNeg1 != bNeg1)) {
HXLINE( 110)			_hx_tmp1 = aNeg1;
            		}
            		else {
HXLINE( 110)			_hx_tmp1 = (red1 > (int)255);
            		}
HXDLIN( 110)		if (_hx_tmp1) {
HXLINE( 110)			red1 = (int)255;
            		}
HXLINE( 111)		bool aNeg2 = (green1 < (int)0);
HXDLIN( 111)		bool bNeg2 = ((int)255 < (int)0);
HXDLIN( 111)		bool _hx_tmp2;
HXDLIN( 111)		if ((aNeg2 != bNeg2)) {
HXLINE( 111)			_hx_tmp2 = aNeg2;
            		}
            		else {
HXLINE( 111)			_hx_tmp2 = (green1 > (int)255);
            		}
HXDLIN( 111)		if (_hx_tmp2) {
HXLINE( 111)			green1 = (int)255;
            		}
HXLINE( 112)		bool aNeg3 = (blue1 < (int)0);
HXDLIN( 112)		bool bNeg3 = ((int)255 < (int)0);
HXDLIN( 112)		bool _hx_tmp3;
HXDLIN( 112)		if ((aNeg3 != bNeg3)) {
HXLINE( 112)			_hx_tmp3 = aNeg3;
            		}
            		else {
HXLINE( 112)			_hx_tmp3 = (blue1 > (int)255);
            		}
HXDLIN( 112)		if (_hx_tmp3) {
HXLINE( 112)			blue1 = (int)255;
            		}
HXLINE( 114)		return ::starling::utils::Color_obj::argb(alpha1,red1,green1,blue1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Color_obj,multiply,return )

int Color_obj::interpolate(int startColor,int endColor,Float ratio){
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_120_interpolate)
HXLINE( 121)		int startA = ((int)hx::UShr(startColor,(int)24) & (int)(int)255);
HXLINE( 122)		int startR = ((int)hx::UShr(startColor,(int)16) & (int)(int)255);
HXLINE( 123)		int startG = ((int)hx::UShr(startColor,(int)8) & (int)(int)255);
HXLINE( 124)		int startB = ((int)startColor & (int)(int)255);
HXLINE( 126)		int endA = ((int)hx::UShr(endColor,(int)24) & (int)(int)255);
HXLINE( 127)		int endR = ((int)hx::UShr(endColor,(int)16) & (int)(int)255);
HXLINE( 128)		int endG = ((int)hx::UShr(endColor,(int)8) & (int)(int)255);
HXLINE( 129)		int endB = ((int)endColor & (int)(int)255);
HXLINE( 131)		int _hx_int = startA;
HXDLIN( 131)		Float newA;
HXDLIN( 131)		if ((_hx_int < (int)0)) {
HXLINE( 131)			newA = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 131)			newA = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 131)		int int1 = (endA - startA);
HXDLIN( 131)		Float newA1;
HXDLIN( 131)		if ((int1 < (int)0)) {
HXLINE( 131)			newA1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE( 131)			newA1 = (int1 + ((Float)0.0));
            		}
HXDLIN( 131)		int newA2 = ::Std_obj::_hx_int((newA + (newA1 * ratio)));
HXLINE( 132)		int int2 = startR;
HXDLIN( 132)		Float newR;
HXDLIN( 132)		if ((int2 < (int)0)) {
HXLINE( 132)			newR = (((Float)4294967296.0) + int2);
            		}
            		else {
HXLINE( 132)			newR = (int2 + ((Float)0.0));
            		}
HXDLIN( 132)		int int3 = (endR - startR);
HXDLIN( 132)		Float newR1;
HXDLIN( 132)		if ((int3 < (int)0)) {
HXLINE( 132)			newR1 = (((Float)4294967296.0) + int3);
            		}
            		else {
HXLINE( 132)			newR1 = (int3 + ((Float)0.0));
            		}
HXDLIN( 132)		int newR2 = ::Std_obj::_hx_int((newR + (newR1 * ratio)));
HXLINE( 133)		int int4 = startG;
HXDLIN( 133)		Float newG;
HXDLIN( 133)		if ((int4 < (int)0)) {
HXLINE( 133)			newG = (((Float)4294967296.0) + int4);
            		}
            		else {
HXLINE( 133)			newG = (int4 + ((Float)0.0));
            		}
HXDLIN( 133)		int int5 = (endG - startG);
HXDLIN( 133)		Float newG1;
HXDLIN( 133)		if ((int5 < (int)0)) {
HXLINE( 133)			newG1 = (((Float)4294967296.0) + int5);
            		}
            		else {
HXLINE( 133)			newG1 = (int5 + ((Float)0.0));
            		}
HXDLIN( 133)		int newG2 = ::Std_obj::_hx_int((newG + (newG1 * ratio)));
HXLINE( 134)		int int6 = startB;
HXDLIN( 134)		Float newB;
HXDLIN( 134)		if ((int6 < (int)0)) {
HXLINE( 134)			newB = (((Float)4294967296.0) + int6);
            		}
            		else {
HXLINE( 134)			newB = (int6 + ((Float)0.0));
            		}
HXDLIN( 134)		int int7 = (endB - startB);
HXDLIN( 134)		Float newB1;
HXDLIN( 134)		if ((int7 < (int)0)) {
HXLINE( 134)			newB1 = (((Float)4294967296.0) + int7);
            		}
            		else {
HXLINE( 134)			newB1 = (int7 + ((Float)0.0));
            		}
HXDLIN( 134)		int newB2 = ::Std_obj::_hx_int((newB + (newB1 * ratio)));
HXLINE( 136)		return ((int)((int)((int)((int)newA2 << (int)(int)24) | (int)((int)newR2 << (int)(int)16)) | (int)((int)newG2 << (int)(int)8)) | (int)newB2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Color_obj,interpolate,return )


Color_obj::Color_obj()
{
}

bool Color_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"rgb") ) { outValue = rgb_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"argb") ) { outValue = argb_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getRed") ) { outValue = getRed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRed") ) { outValue = setRed_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getBlue") ) { outValue = getBlue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setBlue") ) { outValue = setBlue_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getAlpha") ) { outValue = getAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGreen") ) { outValue = getGreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setAlpha") ) { outValue = setAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setGreen") ) { outValue = setGreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toVector") ) { outValue = toVector_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"multiply") ) { outValue = multiply_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Color_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Color_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Color_obj::WHITE,HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47")},
	{hx::fsInt,(void *) &Color_obj::SILVER,HX_HCSTRING("SILVER","\x0d","\x01","\x5d","\x6a")},
	{hx::fsInt,(void *) &Color_obj::GRAY,HX_HCSTRING("GRAY","\xe3","\x97","\x2c","\x2f")},
	{hx::fsInt,(void *) &Color_obj::BLACK,HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32")},
	{hx::fsInt,(void *) &Color_obj::RED,HX_HCSTRING("RED","\x31","\x75","\x3e","\x00")},
	{hx::fsInt,(void *) &Color_obj::MAROON,HX_HCSTRING("MAROON","\x70","\x33","\xf6","\x6c")},
	{hx::fsInt,(void *) &Color_obj::YELLOW,HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82")},
	{hx::fsInt,(void *) &Color_obj::OLIVE,HX_HCSTRING("OLIVE","\xbb","\xba","\x1b","\xaf")},
	{hx::fsInt,(void *) &Color_obj::LIME,HX_HCSTRING("LIME","\x15","\xdf","\x73","\x32")},
	{hx::fsInt,(void *) &Color_obj::GREEN,HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17")},
	{hx::fsInt,(void *) &Color_obj::AQUA,HX_HCSTRING("AQUA","\x3c","\x9f","\x34","\x2b")},
	{hx::fsInt,(void *) &Color_obj::TEAL,HX_HCSTRING("TEAL","\x9c","\x80","\xba","\x37")},
	{hx::fsInt,(void *) &Color_obj::BLUE,HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b")},
	{hx::fsInt,(void *) &Color_obj::NAVY,HX_HCSTRING("NAVY","\x36","\x42","\xc0","\x33")},
	{hx::fsInt,(void *) &Color_obj::FUCHSIA,HX_HCSTRING("FUCHSIA","\xb7","\x99","\xe3","\x1e")},
	{hx::fsInt,(void *) &Color_obj::PURPLE,HX_HCSTRING("PURPLE","\x3c","\xa2","\x0c","\x24")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Color_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Color_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Color_obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(Color_obj::SILVER,"SILVER");
	HX_MARK_MEMBER_NAME(Color_obj::GRAY,"GRAY");
	HX_MARK_MEMBER_NAME(Color_obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(Color_obj::RED,"RED");
	HX_MARK_MEMBER_NAME(Color_obj::MAROON,"MAROON");
	HX_MARK_MEMBER_NAME(Color_obj::YELLOW,"YELLOW");
	HX_MARK_MEMBER_NAME(Color_obj::OLIVE,"OLIVE");
	HX_MARK_MEMBER_NAME(Color_obj::LIME,"LIME");
	HX_MARK_MEMBER_NAME(Color_obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(Color_obj::AQUA,"AQUA");
	HX_MARK_MEMBER_NAME(Color_obj::TEAL,"TEAL");
	HX_MARK_MEMBER_NAME(Color_obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(Color_obj::NAVY,"NAVY");
	HX_MARK_MEMBER_NAME(Color_obj::FUCHSIA,"FUCHSIA");
	HX_MARK_MEMBER_NAME(Color_obj::PURPLE,"PURPLE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Color_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Color_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Color_obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(Color_obj::SILVER,"SILVER");
	HX_VISIT_MEMBER_NAME(Color_obj::GRAY,"GRAY");
	HX_VISIT_MEMBER_NAME(Color_obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(Color_obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(Color_obj::MAROON,"MAROON");
	HX_VISIT_MEMBER_NAME(Color_obj::YELLOW,"YELLOW");
	HX_VISIT_MEMBER_NAME(Color_obj::OLIVE,"OLIVE");
	HX_VISIT_MEMBER_NAME(Color_obj::LIME,"LIME");
	HX_VISIT_MEMBER_NAME(Color_obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(Color_obj::AQUA,"AQUA");
	HX_VISIT_MEMBER_NAME(Color_obj::TEAL,"TEAL");
	HX_VISIT_MEMBER_NAME(Color_obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(Color_obj::NAVY,"NAVY");
	HX_VISIT_MEMBER_NAME(Color_obj::FUCHSIA,"FUCHSIA");
	HX_VISIT_MEMBER_NAME(Color_obj::PURPLE,"PURPLE");
};

#endif

hx::Class Color_obj::__mClass;

static ::String Color_obj_sStaticFields[] = {
	HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47"),
	HX_HCSTRING("SILVER","\x0d","\x01","\x5d","\x6a"),
	HX_HCSTRING("GRAY","\xe3","\x97","\x2c","\x2f"),
	HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32"),
	HX_HCSTRING("RED","\x31","\x75","\x3e","\x00"),
	HX_HCSTRING("MAROON","\x70","\x33","\xf6","\x6c"),
	HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82"),
	HX_HCSTRING("OLIVE","\xbb","\xba","\x1b","\xaf"),
	HX_HCSTRING("LIME","\x15","\xdf","\x73","\x32"),
	HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17"),
	HX_HCSTRING("AQUA","\x3c","\x9f","\x34","\x2b"),
	HX_HCSTRING("TEAL","\x9c","\x80","\xba","\x37"),
	HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b"),
	HX_HCSTRING("NAVY","\x36","\x42","\xc0","\x33"),
	HX_HCSTRING("FUCHSIA","\xb7","\x99","\xe3","\x1e"),
	HX_HCSTRING("PURPLE","\x3c","\xa2","\x0c","\x24"),
	HX_HCSTRING("getAlpha","\xe8","\xb6","\x6d","\x81"),
	HX_HCSTRING("getRed","\x5b","\x12","\x26","\xa3"),
	HX_HCSTRING("getGreen","\x4d","\x1e","\xc4","\xf9"),
	HX_HCSTRING("getBlue","\x50","\xf2","\x9b","\x13"),
	HX_HCSTRING("setAlpha","\x5c","\x10","\xcb","\x2f"),
	HX_HCSTRING("setRed","\xcf","\x66","\x6e","\x6f"),
	HX_HCSTRING("setGreen","\xc1","\x77","\x21","\xa8"),
	HX_HCSTRING("setBlue","\x5c","\x83","\x9d","\x06"),
	HX_HCSTRING("rgb","\x0d","\xdb","\x56","\x00"),
	HX_HCSTRING("argb","\x4c","\x8d","\x74","\x40"),
	HX_HCSTRING("toVector","\x9e","\x58","\x9c","\xbe"),
	HX_HCSTRING("multiply","\x24","\xe2","\x8c","\x9a"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	::String(null())
};

void Color_obj::__register()
{
	hx::Object *dummy = new Color_obj;
	Color_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.Color","\xa0","\x6a","\x36","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Color_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Color_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Color_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Color_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Color_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Color_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Color_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Color_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_18_boot)
HXDLIN(  18)		WHITE = (int)16777215;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_19_boot)
HXDLIN(  19)		SILVER = (int)12632256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_20_boot)
HXDLIN(  20)		GRAY = (int)8421504;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_21_boot)
HXDLIN(  21)		BLACK = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_22_boot)
HXDLIN(  22)		RED = (int)16711680;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_23_boot)
HXDLIN(  23)		MAROON = (int)8388608;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_24_boot)
HXDLIN(  24)		YELLOW = (int)16776960;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_25_boot)
HXDLIN(  25)		OLIVE = (int)8421376;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_26_boot)
HXDLIN(  26)		LIME = (int)65280;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_27_boot)
HXDLIN(  27)		GREEN = (int)32768;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_28_boot)
HXDLIN(  28)		AQUA = (int)65535;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_29_boot)
HXDLIN(  29)		TEAL = (int)32896;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_30_boot)
HXDLIN(  30)		BLUE = (int)255;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_31_boot)
HXDLIN(  31)		NAVY = (int)128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_32_boot)
HXDLIN(  32)		FUCHSIA = (int)16711935;
            	}
{
            	HX_STACKFRAME(&_hx_pos_4ba1b82626c5d13b_33_boot)
HXDLIN(  33)		PURPLE = (int)8388736;
            	}
}

} // end namespace starling
} // end namespace utils
