// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_utils_ArrayUtil
#include <starling/utils/ArrayUtil.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_826ac2a8c261c184_23_resize,"starling.utils.ArrayUtil","resize",0xb024d1aa,"starling.utils.ArrayUtil.resize","starling/utils/ArrayUtil.hx",23,0xdac7d188)
HX_LOCAL_STACK_FRAME(_hx_pos_826ac2a8c261c184_36_clear,"starling.utils.ArrayUtil","clear",0x66f4e297,"starling.utils.ArrayUtil.clear","starling/utils/ArrayUtil.hx",36,0xdac7d188)
HX_LOCAL_STACK_FRAME(_hx_pos_826ac2a8c261c184_44_insertAt,"starling.utils.ArrayUtil","insertAt",0xc0decdc2,"starling.utils.ArrayUtil.insertAt","starling/utils/ArrayUtil.hx",44,0xdac7d188)
HX_LOCAL_STACK_FRAME(_hx_pos_826ac2a8c261c184_72_removeAt,"starling.utils.ArrayUtil","removeAt",0xabdabf8d,"starling.utils.ArrayUtil.removeAt","starling/utils/ArrayUtil.hx",72,0xdac7d188)
namespace starling{
namespace utils{

void ArrayUtil_obj::__construct() { }

Dynamic ArrayUtil_obj::__CreateEmpty() { return new ArrayUtil_obj; }

void *ArrayUtil_obj::_hx_vtable = 0;

Dynamic ArrayUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArrayUtil_obj > _hx_result = new ArrayUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ArrayUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3e86ea52;
}

void ArrayUtil_obj::resize(::cpp::VirtualArray arr,int newLength, ::Dynamic defaultValue){
            	HX_STACKFRAME(&_hx_pos_826ac2a8c261c184_23_resize)
HXLINE(  24)		int length = arr->get_length();
HXLINE(  25)		if ((newLength < length)) {
HXLINE(  26)			arr->splice(newLength,(length - newLength));
            		}
            		else {
HXLINE(  27)			if ((newLength > length)) {
HXLINE(  29)				int _g1 = length;
HXDLIN(  29)				int _g = newLength;
HXDLIN(  29)				while((_g1 < _g)){
HXLINE(  29)					_g1 = (_g1 + (int)1);
HXDLIN(  29)					int i = (_g1 - (int)1);
HXLINE(  30)					arr->set(i,defaultValue);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ArrayUtil_obj,resize,(void))

void ArrayUtil_obj::clear(::cpp::VirtualArray arr){
            	HX_STACKFRAME(&_hx_pos_826ac2a8c261c184_36_clear)
HXDLIN(  36)		arr->splice((int)0,arr->get_length());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArrayUtil_obj,clear,(void))

void ArrayUtil_obj::insertAt(::cpp::VirtualArray array,int index, ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_826ac2a8c261c184_44_insertAt)
HXLINE(  45)		int i;
HXLINE(  46)		int length = array->get_length();
HXLINE(  48)		if ((index < (int)0)) {
HXLINE(  48)			index = (index + (length + (int)1));
            		}
HXLINE(  49)		if ((index < (int)0)) {
HXLINE(  49)			index = (int)0;
            		}
HXLINE(  51)		i = (index - (int)1);
HXLINE(  52)		while((i >= length)){
HXLINE(  54)			array->set(i,null());
HXLINE(  55)			i = (i - (int)1);
            		}
HXLINE(  58)		i = length;
HXLINE(  59)		while((i > index)){
HXLINE(  61)			array->set(i,array->__get((i - (int)1)));
HXLINE(  62)			i = (i - (int)1);
            		}
HXLINE(  65)		array->set(index,object);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ArrayUtil_obj,insertAt,(void))

 ::Dynamic ArrayUtil_obj::removeAt(::cpp::VirtualArray array,int index){
            	HX_STACKFRAME(&_hx_pos_826ac2a8c261c184_72_removeAt)
HXLINE(  73)		int i;
HXLINE(  74)		int length = array->get_length();
HXLINE(  76)		if ((index < (int)0)) {
HXLINE(  76)			index = (index + length);
            		}
HXLINE(  77)		if ((index < (int)0)) {
HXLINE(  77)			index = (int)0;
            		}
            		else {
HXLINE(  77)			if ((index >= length)) {
HXLINE(  77)				index = (length - (int)1);
            			}
            		}
HXLINE(  79)		 ::Dynamic object = array->__get(index);
HXLINE(  81)		i = (index + (int)1);
HXLINE(  82)		while((i < length)){
HXLINE(  84)			array->set((i - (int)1),array->__get(i));
HXLINE(  85)			i = (i + (int)1);
            		}
HXLINE(  88)		::starling::utils::ArrayUtil_obj::resize(array,(array->get_length() - (int)1),null());
HXLINE(  89)		return object;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArrayUtil_obj,removeAt,return )


ArrayUtil_obj::ArrayUtil_obj()
{
}

bool ArrayUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"insertAt") ) { outValue = insertAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAt") ) { outValue = removeAt_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ArrayUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ArrayUtil_obj_sStaticStorageInfo = 0;
#endif

static void ArrayUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ArrayUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ArrayUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ArrayUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class ArrayUtil_obj::__mClass;

static ::String ArrayUtil_obj_sStaticFields[] = {
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("insertAt","\x8c","\x7c","\x1f","\xc2"),
	HX_HCSTRING("removeAt","\x57","\x6e","\x1b","\xad"),
	::String(null())
};

void ArrayUtil_obj::__register()
{
	hx::Object *dummy = new ArrayUtil_obj;
	ArrayUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.ArrayUtil","\xf8","\x0d","\x5c","\x6d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArrayUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ArrayUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ArrayUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ArrayUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ArrayUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace utils
