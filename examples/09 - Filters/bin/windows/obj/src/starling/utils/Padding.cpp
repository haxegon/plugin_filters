// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_utils_Padding
#include <starling/utils/Padding.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24c202be9f4ff34a_30_new,"starling.utils.Padding","new",0x33d0bc40,"starling.utils.Padding.new","starling/utils/Padding.hx",30,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_37_setTo,"starling.utils.Padding","setTo",0x37a7359d,"starling.utils.Padding.setTo","starling/utils/Padding.hx",37,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_51_setToUniform,"starling.utils.Padding","setToUniform",0x237ed117,"starling.utils.Padding.setToUniform","starling/utils/Padding.hx",51,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_57_setToSymmetric,"starling.utils.Padding","setToSymmetric",0x9f18c31a,"starling.utils.Padding.setToSymmetric","starling/utils/Padding.hx",57,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_64_copyFrom,"starling.utils.Padding","copyFrom",0xe12113df,"starling.utils.Padding.copyFrom","starling/utils/Padding.hx",64,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_71_clone,"starling.utils.Padding","clone",0x05dab73d,"starling.utils.Padding.clone","starling/utils/Padding.hx",71,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_76_get_left,"starling.utils.Padding","get_left",0xe02acbb0,"starling.utils.Padding.get_left","starling/utils/Padding.hx",76,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_78_set_left,"starling.utils.Padding","set_left",0x8e882524,"starling.utils.Padding.set_left","starling/utils/Padding.hx",78,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_89_get_right,"starling.utils.Padding","get_right",0xbc547c13,"starling.utils.Padding.get_right","starling/utils/Padding.hx",89,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_91_set_right,"starling.utils.Padding","set_right",0x9fa5681f,"starling.utils.Padding.set_right","starling/utils/Padding.hx",91,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_102_get_top,"starling.utils.Padding","get_top",0xec5d8b0c,"starling.utils.Padding.get_top","starling/utils/Padding.hx",102,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_104_set_top,"starling.utils.Padding","set_top",0xdf5f1c18,"starling.utils.Padding.set_top","starling/utils/Padding.hx",104,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_115_get_bottom,"starling.utils.Padding","get_bottom",0x24eaa6d4,"starling.utils.Padding.get_bottom","starling/utils/Padding.hx",115,0xdbdfc872)
HX_LOCAL_STACK_FRAME(_hx_pos_24c202be9f4ff34a_117_set_bottom,"starling.utils.Padding","set_bottom",0x28684548,"starling.utils.Padding.set_bottom","starling/utils/Padding.hx",117,0xdbdfc872)
namespace starling{
namespace utils{

void Padding_obj::__construct(hx::Null< Float >  __o_left,hx::Null< Float >  __o_right,hx::Null< Float >  __o_top,hx::Null< Float >  __o_bottom){
Float left = __o_left.Default(0);
Float right = __o_right.Default(0);
Float top = __o_top.Default(0);
Float bottom = __o_bottom.Default(0);
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_30_new)
HXLINE(  31)		super::__construct();
HXLINE(  32)		this->setTo(left,right,top,bottom);
            	}

Dynamic Padding_obj::__CreateEmpty() { return new Padding_obj; }

void *Padding_obj::_hx_vtable = 0;

Dynamic Padding_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Padding_obj > _hx_result = new Padding_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Padding_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
	} else {
		return inClassId==(int)0x64201a8c;
	}
}

void Padding_obj::setTo(hx::Null< Float >  __o_left,hx::Null< Float >  __o_right,hx::Null< Float >  __o_top,hx::Null< Float >  __o_bottom){
Float left = __o_left.Default(0);
Float right = __o_right.Default(0);
Float top = __o_top.Default(0);
Float bottom = __o_bottom.Default(0);
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_37_setTo)
HXLINE(  38)		bool changed;
HXDLIN(  38)		bool changed1;
HXDLIN(  38)		bool changed2;
HXDLIN(  38)		if ((this->_left == left)) {
HXLINE(  38)			changed2 = (this->_right != right);
            		}
            		else {
HXLINE(  38)			changed2 = true;
            		}
HXDLIN(  38)		if (!(changed2)) {
HXLINE(  38)			changed1 = (this->_top != top);
            		}
            		else {
HXLINE(  38)			changed1 = true;
            		}
HXDLIN(  38)		if (!(changed1)) {
HXLINE(  38)			changed = (this->_bottom != bottom);
            		}
            		else {
HXLINE(  38)			changed = true;
            		}
HXLINE(  40)		this->_left = left;
HXLINE(  41)		this->_right = right;
HXLINE(  42)		this->_top = top;
HXLINE(  43)		this->_bottom = bottom;
HXLINE(  45)		if (changed) {
HXLINE(  45)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Padding_obj,setTo,(void))

void Padding_obj::setToUniform(Float value){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_51_setToUniform)
HXDLIN(  51)		this->setTo(value,value,value,value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Padding_obj,setToUniform,(void))

void Padding_obj::setToSymmetric(Float horizontal,Float vertical){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_57_setToSymmetric)
HXDLIN(  57)		this->setTo(horizontal,horizontal,vertical,vertical);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Padding_obj,setToSymmetric,(void))

void Padding_obj::copyFrom( ::starling::utils::Padding padding){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_64_copyFrom)
HXDLIN(  64)		if (hx::IsNull( padding )) {
HXDLIN(  64)			this->setTo((int)0,(int)0,(int)0,(int)0);
            		}
            		else {
HXLINE(  65)			this->setTo(padding->_left,padding->_right,padding->_top,padding->_bottom);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Padding_obj,copyFrom,(void))

 ::starling::utils::Padding Padding_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_24c202be9f4ff34a_71_clone)
HXDLIN(  71)		return  ::starling::utils::Padding_obj::__alloc( HX_CTX ,this->_left,this->_right,this->_top,this->_bottom);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Padding_obj,clone,return )

Float Padding_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_76_get_left)
HXDLIN(  76)		return this->_left;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Padding_obj,get_left,return )

Float Padding_obj::set_left(Float value){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_78_set_left)
HXLINE(  79)		if ((this->_left != value)) {
HXLINE(  81)			this->_left = value;
HXLINE(  82)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE(  84)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Padding_obj,set_left,return )

Float Padding_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_89_get_right)
HXDLIN(  89)		return this->_right;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Padding_obj,get_right,return )

Float Padding_obj::set_right(Float value){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_91_set_right)
HXLINE(  92)		if ((this->_right != value)) {
HXLINE(  94)			this->_right = value;
HXLINE(  95)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE(  97)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Padding_obj,set_right,return )

Float Padding_obj::get_top(){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_102_get_top)
HXDLIN( 102)		return this->_top;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Padding_obj,get_top,return )

Float Padding_obj::set_top(Float value){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_104_set_top)
HXLINE( 105)		if ((this->_top != value)) {
HXLINE( 107)			this->_top = value;
HXLINE( 108)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 110)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Padding_obj,set_top,return )

Float Padding_obj::get_bottom(){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_115_get_bottom)
HXDLIN( 115)		return this->_bottom;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Padding_obj,get_bottom,return )

Float Padding_obj::set_bottom(Float value){
            	HX_STACKFRAME(&_hx_pos_24c202be9f4ff34a_117_set_bottom)
HXLINE( 118)		if ((this->_bottom != value)) {
HXLINE( 120)			this->_bottom = value;
HXLINE( 121)			this->dispatchEventWith(HX_("change",70,91,72,b7),null(),null());
            		}
HXLINE( 123)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Padding_obj,set_bottom,return )


hx::ObjectPtr< Padding_obj > Padding_obj::__new(hx::Null< Float >  __o_left,hx::Null< Float >  __o_right,hx::Null< Float >  __o_top,hx::Null< Float >  __o_bottom) {
	hx::ObjectPtr< Padding_obj > __this = new Padding_obj();
	__this->__construct(__o_left,__o_right,__o_top,__o_bottom);
	return __this;
}

hx::ObjectPtr< Padding_obj > Padding_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_left,hx::Null< Float >  __o_right,hx::Null< Float >  __o_top,hx::Null< Float >  __o_bottom) {
	Padding_obj *__this = (Padding_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Padding_obj), true, "starling.utils.Padding"));
	*(void **)__this = Padding_obj::_hx_vtable;
	__this->__construct(__o_left,__o_right,__o_top,__o_bottom);
	return __this;
}

Padding_obj::Padding_obj()
{
}

hx::Val Padding_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_top() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_top") ) { return hx::Val( _top ); }
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_left() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_right() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_bottom() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_bottom") ) { return hx::Val( _bottom ); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return hx::Val( get_top_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return hx::Val( set_top_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return hx::Val( get_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return hx::Val( set_left_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_right") ) { return hx::Val( get_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return hx::Val( set_right_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return hx::Val( get_bottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return hx::Val( set_bottom_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setToUniform") ) { return hx::Val( setToUniform_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setToSymmetric") ) { return hx::Val( setToSymmetric_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Padding_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_top(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_top") ) { _top=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_left(inValue.Cast< Float >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_right(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottom(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_bottom") ) { _bottom=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Padding_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"));
	outFields->push(HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"));
	outFields->push(HX_HCSTRING("_top","\x96","\xab","\x23","\x3f"));
	outFields->push(HX_HCSTRING("_bottom","\x8a","\xf8","\xef","\xd3"));
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Padding_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Padding_obj,_left),HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa")},
	{hx::fsFloat,(int)offsetof(Padding_obj,_right),HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5")},
	{hx::fsFloat,(int)offsetof(Padding_obj,_top),HX_HCSTRING("_top","\x96","\xab","\x23","\x3f")},
	{hx::fsFloat,(int)offsetof(Padding_obj,_bottom),HX_HCSTRING("_bottom","\x8a","\xf8","\xef","\xd3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Padding_obj_sStaticStorageInfo = 0;
#endif

static ::String Padding_obj_sMemberFields[] = {
	HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"),
	HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"),
	HX_HCSTRING("_top","\x96","\xab","\x23","\x3f"),
	HX_HCSTRING("_bottom","\x8a","\xf8","\xef","\xd3"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("setToUniform","\xf7","\x38","\x48","\x09"),
	HX_HCSTRING("setToSymmetric","\xfa","\xe2","\xf3","\x97"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("get_left","\x90","\xc3","\x6a","\xc7"),
	HX_HCSTRING("set_left","\x04","\x1d","\xc8","\x75"),
	HX_HCSTRING("get_right","\x33","\x68","\x0d","\x2d"),
	HX_HCSTRING("set_right","\x3f","\x54","\x5e","\x10"),
	HX_HCSTRING("get_top","\x2c","\x2f","\xcd","\x26"),
	HX_HCSTRING("set_top","\x38","\xc0","\xce","\x19"),
	HX_HCSTRING("get_bottom","\xb4","\x56","\x00","\x56"),
	HX_HCSTRING("set_bottom","\x28","\xf5","\x7d","\x59"),
	::String(null()) };

static void Padding_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Padding_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Padding_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Padding_obj::__mClass,"__mClass");
};

#endif

hx::Class Padding_obj::__mClass;

void Padding_obj::__register()
{
	hx::Object *dummy = new Padding_obj;
	Padding_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.utils.Padding","\x4e","\xdc","\xb5","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Padding_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Padding_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Padding_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Padding_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Padding_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Padding_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace utils
