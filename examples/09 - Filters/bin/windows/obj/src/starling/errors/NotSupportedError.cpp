// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_starling_errors_NotSupportedError
#include <starling/errors/NotSupportedError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5e4b0988c93bc22c_22_new,"starling.errors.NotSupportedError","new",0x79f28ae2,"starling.errors.NotSupportedError.new","starling/errors/NotSupportedError.hx",22,0xf9c028ee)
namespace starling{
namespace errors{

void NotSupportedError_obj::__construct(::String __o_message,hx::Null< int >  __o_id){
::String message = __o_message.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
int id = __o_id.Default(0);
            	HX_STACKFRAME(&_hx_pos_5e4b0988c93bc22c_22_new)
HXDLIN(  22)		super::__construct(message,id);
            	}

Dynamic NotSupportedError_obj::__CreateEmpty() { return new NotSupportedError_obj; }

void *NotSupportedError_obj::_hx_vtable = 0;

Dynamic NotSupportedError_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NotSupportedError_obj > _hx_result = new NotSupportedError_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NotSupportedError_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0f68dcfa) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0f68dcfa;
	} else {
		return inClassId==(int)0x1fc85c4d;
	}
}


hx::ObjectPtr< NotSupportedError_obj > NotSupportedError_obj::__new(::String __o_message,hx::Null< int >  __o_id) {
	hx::ObjectPtr< NotSupportedError_obj > __this = new NotSupportedError_obj();
	__this->__construct(__o_message,__o_id);
	return __this;
}

hx::ObjectPtr< NotSupportedError_obj > NotSupportedError_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_message,hx::Null< int >  __o_id) {
	NotSupportedError_obj *__this = (NotSupportedError_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NotSupportedError_obj), true, "starling.errors.NotSupportedError"));
	*(void **)__this = NotSupportedError_obj::_hx_vtable;
	__this->__construct(__o_message,__o_id);
	return __this;
}

NotSupportedError_obj::NotSupportedError_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *NotSupportedError_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *NotSupportedError_obj_sStaticStorageInfo = 0;
#endif

static void NotSupportedError_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NotSupportedError_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NotSupportedError_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NotSupportedError_obj::__mClass,"__mClass");
};

#endif

hx::Class NotSupportedError_obj::__mClass;

void NotSupportedError_obj::__register()
{
	hx::Object *dummy = new NotSupportedError_obj;
	NotSupportedError_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.errors.NotSupportedError","\xf0","\x31","\x1f","\x0d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NotSupportedError_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< NotSupportedError_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NotSupportedError_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NotSupportedError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NotSupportedError_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace errors
