// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MeshBatch
#include <starling/display/MeshBatch.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchPool
#include <starling/rendering/BatchPool.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchProcessor
#include <starling/rendering/BatchProcessor.h>
#endif
#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_rendering_RenderState
#include <starling/rendering/RenderState.h>
#endif
#ifndef INCLUDED_starling_styles_MeshStyle
#include <starling/styles/MeshStyle.h>
#endif
#ifndef INCLUDED_starling_utils_MeshSubset
#include <starling/utils/MeshSubset.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b193097047e23c3a_38_new,"starling.rendering.BatchProcessor","new",0xd95c4692,"starling.rendering.BatchProcessor.new","starling/rendering/BatchProcessor.hx",38,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_46_dispose,"starling.rendering.BatchProcessor","dispose",0xcad0f7d1,"starling.rendering.BatchProcessor.dispose","starling/rendering/BatchProcessor.hx",46,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_71_addMesh,"starling.rendering.BatchProcessor","addMesh",0x941b03e0,"starling.rendering.BatchProcessor.addMesh","starling/rendering/BatchProcessor.hx",71,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_110_finishBatch,"starling.rendering.BatchProcessor","finishBatch",0x6f550299,"starling.rendering.BatchProcessor.finishBatch","starling/rendering/BatchProcessor.hx",110,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_125_clear,"starling.rendering.BatchProcessor","clear",0xcd13583f,"starling.rendering.BatchProcessor.clear","starling/rendering/BatchProcessor.hx",125,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_140_getBatchAt,"starling.rendering.BatchProcessor","getBatchAt",0x53de1d65,"starling.rendering.BatchProcessor.getBatchAt","starling/rendering/BatchProcessor.hx",140,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_146_trim,"starling.rendering.BatchProcessor","trim",0x5b629270,"starling.rendering.BatchProcessor.trim","starling/rendering/BatchProcessor.hx",146,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_152_fillToken,"starling.rendering.BatchProcessor","fillToken",0x35c8d128,"starling.rendering.BatchProcessor.fillToken","starling/rendering/BatchProcessor.hx",152,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_161_get_numBatches,"starling.rendering.BatchProcessor","get_numBatches",0xae089c59,"starling.rendering.BatchProcessor.get_numBatches","starling/rendering/BatchProcessor.hx",161,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_167_get_onBatchComplete,"starling.rendering.BatchProcessor","get_onBatchComplete",0xdc5c9f3d,"starling.rendering.BatchProcessor.get_onBatchComplete","starling/rendering/BatchProcessor.hx",167,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_168_set_onBatchComplete,"starling.rendering.BatchProcessor","set_onBatchComplete",0x18f99249,"starling.rendering.BatchProcessor.set_onBatchComplete","starling/rendering/BatchProcessor.hx",168,0x536ffb9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b193097047e23c3a_34_boot,"starling.rendering.BatchProcessor","boot",0x4f7a79c0,"starling.rendering.BatchProcessor.boot","starling/rendering/BatchProcessor.hx",34,0x536ffb9c)
namespace starling{
namespace rendering{

void BatchProcessor_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b193097047e23c3a_38_new)
HXLINE(  39)		int length = null();
HXDLIN(  39)		bool fixed = null();
HXDLIN(  39)		this->_batches =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE(  40)		this->_batchPool =  ::starling::rendering::BatchPool_obj::__alloc( HX_CTX );
HXLINE(  41)		this->_cacheToken =  ::starling::rendering::BatchToken_obj::__alloc( HX_CTX ,null(),null(),null());
            	}

Dynamic BatchProcessor_obj::__CreateEmpty() { return new BatchProcessor_obj; }

void *BatchProcessor_obj::_hx_vtable = 0;

Dynamic BatchProcessor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BatchProcessor_obj > _hx_result = new BatchProcessor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BatchProcessor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6895f5dc;
}

void BatchProcessor_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_46_dispose)
HXLINE(  47)		{
HXLINE(  47)			int _g = (int)0;
HXDLIN(  47)			 ::openfl::_Vector::AbstractVector _g1 = this->_batches;
HXDLIN(  47)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE(  47)				 ::starling::display::MeshBatch batch = ( ( ::starling::display::MeshBatch)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN(  47)				_g = (_g + (int)1);
HXLINE(  48)				batch->dispose();
            			}
            		}
HXLINE(  50)		::openfl::_Vector::IVector_obj::set_length(this->_batches->data,(int)0);
HXLINE(  51)		this->_batchPool->purge();
HXLINE(  52)		this->_currentBatch = null();
HXLINE(  53)		this->_onBatchComplete = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchProcessor_obj,dispose,(void))

void BatchProcessor_obj::addMesh( ::starling::display::Mesh mesh, ::starling::rendering::RenderState state, ::starling::utils::MeshSubset subset,hx::Null< bool >  __o_ignoreTransformations){
bool ignoreTransformations = __o_ignoreTransformations.Default(false);
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_71_addMesh)
HXLINE(  72)		if (hx::IsNull( subset )) {
HXLINE(  74)			subset = ::starling::rendering::BatchProcessor_obj::sMeshSubset;
HXLINE(  75)			subset->vertexID = (subset->indexID = (int)0);
HXLINE(  76)			subset->numVertices = mesh->get_numVertices();
HXLINE(  77)			subset->numIndices = mesh->get_numIndices();
            		}
            		else {
HXLINE(  81)			if ((subset->numVertices < (int)0)) {
HXLINE(  81)				int _hx_tmp = mesh->get_numVertices();
HXDLIN(  81)				subset->numVertices = (_hx_tmp - subset->vertexID);
            			}
HXLINE(  82)			if ((subset->numIndices < (int)0)) {
HXLINE(  82)				int _hx_tmp1 = mesh->get_numIndices();
HXDLIN(  82)				subset->numIndices = (_hx_tmp1 - subset->indexID);
            			}
            		}
HXLINE(  85)		if ((subset->numVertices > (int)0)) {
HXLINE(  87)			bool _hx_tmp2;
HXDLIN(  87)			if (hx::IsNotNull( this->_currentBatch )) {
HXLINE(  87)				_hx_tmp2 = !(this->_currentBatch->canAddMesh(mesh,subset->numVertices));
            			}
            			else {
HXLINE(  87)				_hx_tmp2 = true;
            			}
HXDLIN(  87)			if (_hx_tmp2) {
HXLINE(  89)				this->finishBatch();
HXLINE(  91)				this->_currentStyleType = mesh->get_style()->get_type();
HXLINE(  92)				this->_currentBatch = this->_batchPool->get(this->_currentStyleType);
HXLINE(  93)				 ::starling::display::MeshBatch _hx_tmp3 = this->_currentBatch;
HXDLIN(  93)				::String _hx_tmp4;
HXDLIN(  93)				if (hx::IsNotNull( state )) {
HXLINE(  93)					_hx_tmp4 = state->get_blendMode();
            				}
            				else {
HXLINE(  93)					_hx_tmp4 = mesh->get_blendMode();
            				}
HXDLIN(  93)				_hx_tmp3->set_blendMode(_hx_tmp4);
HXLINE(  94)				 ::starling::rendering::BatchToken _hx_tmp5 = this->_cacheToken;
HXDLIN(  94)				_hx_tmp5->setTo(::openfl::_Vector::IVector_obj::get_length(this->_batches->data),null(),null());
HXLINE(  95)				{
HXLINE(  95)					 ::openfl::_Vector::AbstractVector this1 = this->_batches;
HXDLIN(  95)					int index = ::openfl::_Vector::IVector_obj::get_length(this->_batches->data);
HXDLIN(  95)					::openfl::_Vector::IVector_obj::set(this1->data,index,this->_currentBatch);
            				}
            			}
HXLINE(  98)			 ::openfl::geom::Matrix matrix;
HXDLIN(  98)			if (hx::IsNotNull( state )) {
HXLINE(  98)				matrix = state->_modelviewMatrix;
            			}
            			else {
HXLINE(  98)				matrix = null();
            			}
HXLINE(  99)			Float alpha;
HXDLIN(  99)			if (hx::IsNotNull( state )) {
HXLINE(  99)				alpha = state->_alpha;
            			}
            			else {
HXLINE(  99)				alpha = ((Float)1.0);
            			}
HXLINE( 101)			this->_currentBatch->addMesh(mesh,matrix,alpha,subset,ignoreTransformations);
HXLINE( 102)			 ::starling::rendering::BatchToken _hx_tmp6 = this->_cacheToken;
HXDLIN( 102)			_hx_tmp6->vertexID = (_hx_tmp6->vertexID + subset->numVertices);
HXLINE( 103)			 ::starling::rendering::BatchToken _hx_tmp7 = this->_cacheToken;
HXDLIN( 103)			_hx_tmp7->indexID = (_hx_tmp7->indexID + subset->numIndices);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BatchProcessor_obj,addMesh,(void))

void BatchProcessor_obj::finishBatch(){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_110_finishBatch)
HXLINE( 111)		 ::starling::display::MeshBatch meshBatch = this->_currentBatch;
HXLINE( 113)		if (hx::IsNotNull( meshBatch )) {
HXLINE( 115)			this->_currentBatch = null();
HXLINE( 116)			this->_currentStyleType = null();
HXLINE( 118)			if (hx::IsNotNull( this->_onBatchComplete )) {
HXLINE( 119)				this->_onBatchComplete(meshBatch);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchProcessor_obj,finishBatch,(void))

void BatchProcessor_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_125_clear)
HXLINE( 126)		int numBatches = ::openfl::_Vector::IVector_obj::get_length(this->_batches->data);
HXLINE( 128)		{
HXLINE( 128)			int _g1 = (int)0;
HXDLIN( 128)			int _g = numBatches;
HXDLIN( 128)			while((_g1 < _g)){
HXLINE( 128)				_g1 = (_g1 + (int)1);
HXDLIN( 128)				int i = (_g1 - (int)1);
HXLINE( 129)				 ::starling::rendering::BatchPool _hx_tmp = this->_batchPool;
HXDLIN( 129)				_hx_tmp->put(( ( ::starling::display::MeshBatch)(::openfl::_Vector::IVector_obj::get(this->_batches->data,i)) ));
            			}
            		}
HXLINE( 131)		::openfl::_Vector::IVector_obj::set_length(this->_batches->data,(int)0);
HXLINE( 132)		this->_currentBatch = null();
HXLINE( 133)		this->_currentStyleType = null();
HXLINE( 134)		this->_cacheToken->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchProcessor_obj,clear,(void))

 ::starling::display::MeshBatch BatchProcessor_obj::getBatchAt(int batchID){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_140_getBatchAt)
HXDLIN( 140)		return ( ( ::starling::display::MeshBatch)(::openfl::_Vector::IVector_obj::get(this->_batches->data,batchID)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchProcessor_obj,getBatchAt,return )

void BatchProcessor_obj::trim(){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_146_trim)
HXDLIN( 146)		this->_batchPool->purge();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchProcessor_obj,trim,(void))

 ::starling::rendering::BatchToken BatchProcessor_obj::fillToken( ::starling::rendering::BatchToken token){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_152_fillToken)
HXLINE( 153)		token->batchID = this->_cacheToken->batchID;
HXLINE( 154)		token->vertexID = this->_cacheToken->vertexID;
HXLINE( 155)		token->indexID = this->_cacheToken->indexID;
HXLINE( 156)		return token;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchProcessor_obj,fillToken,return )

int BatchProcessor_obj::get_numBatches(){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_161_get_numBatches)
HXDLIN( 161)		return ::openfl::_Vector::IVector_obj::get_length(this->_batches->data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchProcessor_obj,get_numBatches,return )

 ::Dynamic BatchProcessor_obj::get_onBatchComplete(){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_167_get_onBatchComplete)
HXDLIN( 167)		return this->_onBatchComplete;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchProcessor_obj,get_onBatchComplete,return )

 ::Dynamic BatchProcessor_obj::set_onBatchComplete( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_b193097047e23c3a_168_set_onBatchComplete)
HXDLIN( 168)		return (this->_onBatchComplete = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchProcessor_obj,set_onBatchComplete,return )

 ::starling::utils::MeshSubset BatchProcessor_obj::sMeshSubset;


hx::ObjectPtr< BatchProcessor_obj > BatchProcessor_obj::__new() {
	hx::ObjectPtr< BatchProcessor_obj > __this = new BatchProcessor_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BatchProcessor_obj > BatchProcessor_obj::__alloc(hx::Ctx *_hx_ctx) {
	BatchProcessor_obj *__this = (BatchProcessor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BatchProcessor_obj), true, "starling.rendering.BatchProcessor"));
	*(void **)__this = BatchProcessor_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BatchProcessor_obj::BatchProcessor_obj()
{
}

void BatchProcessor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BatchProcessor);
	HX_MARK_MEMBER_NAME(_batches,"_batches");
	HX_MARK_MEMBER_NAME(_batchPool,"_batchPool");
	HX_MARK_MEMBER_NAME(_currentBatch,"_currentBatch");
	HX_MARK_MEMBER_NAME(_currentStyleType,"_currentStyleType");
	HX_MARK_MEMBER_NAME(_onBatchComplete,"_onBatchComplete");
	HX_MARK_MEMBER_NAME(_cacheToken,"_cacheToken");
	HX_MARK_END_CLASS();
}

void BatchProcessor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_batches,"_batches");
	HX_VISIT_MEMBER_NAME(_batchPool,"_batchPool");
	HX_VISIT_MEMBER_NAME(_currentBatch,"_currentBatch");
	HX_VISIT_MEMBER_NAME(_currentStyleType,"_currentStyleType");
	HX_VISIT_MEMBER_NAME(_onBatchComplete,"_onBatchComplete");
	HX_VISIT_MEMBER_NAME(_cacheToken,"_cacheToken");
}

hx::Val BatchProcessor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"trim") ) { return hx::Val( trim_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"addMesh") ) { return hx::Val( addMesh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_batches") ) { return hx::Val( _batches ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fillToken") ) { return hx::Val( fillToken_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_batchPool") ) { return hx::Val( _batchPool ); }
		if (HX_FIELD_EQ(inName,"getBatchAt") ) { return hx::Val( getBatchAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"numBatches") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numBatches() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_cacheToken") ) { return hx::Val( _cacheToken ); }
		if (HX_FIELD_EQ(inName,"finishBatch") ) { return hx::Val( finishBatch_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_currentBatch") ) { return hx::Val( _currentBatch ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_numBatches") ) { return hx::Val( get_numBatches_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onBatchComplete") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_onBatchComplete() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_onBatchComplete") ) { return hx::Val( _onBatchComplete ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_currentStyleType") ) { return hx::Val( _currentStyleType ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_onBatchComplete") ) { return hx::Val( get_onBatchComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_onBatchComplete") ) { return hx::Val( set_onBatchComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BatchProcessor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sMeshSubset") ) { outValue = ( sMeshSubset ); return true; }
	}
	return false;
}

hx::Val BatchProcessor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_batches") ) { _batches=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_batchPool") ) { _batchPool=inValue.Cast<  ::starling::rendering::BatchPool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_cacheToken") ) { _cacheToken=inValue.Cast<  ::starling::rendering::BatchToken >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_currentBatch") ) { _currentBatch=inValue.Cast<  ::starling::display::MeshBatch >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onBatchComplete") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_onBatchComplete(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_onBatchComplete") ) { _onBatchComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_currentStyleType") ) { _currentStyleType=inValue.Cast< hx::Class >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BatchProcessor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sMeshSubset") ) { sMeshSubset=ioValue.Cast<  ::starling::utils::MeshSubset >(); return true; }
	}
	return false;
}

void BatchProcessor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_batches","\x29","\x7c","\xc8","\xf9"));
	outFields->push(HX_HCSTRING("_batchPool","\x77","\x75","\x1a","\x4c"));
	outFields->push(HX_HCSTRING("_currentBatch","\xa0","\x5f","\x35","\xd7"));
	outFields->push(HX_HCSTRING("_currentStyleType","\x71","\x13","\x84","\x6e"));
	outFields->push(HX_HCSTRING("_cacheToken","\x76","\xb6","\x6d","\x29"));
	outFields->push(HX_HCSTRING("numBatches","\x02","\x61","\x30","\xf0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BatchProcessor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(BatchProcessor_obj,_batches),HX_HCSTRING("_batches","\x29","\x7c","\xc8","\xf9")},
	{hx::fsObject /*::starling::rendering::BatchPool*/ ,(int)offsetof(BatchProcessor_obj,_batchPool),HX_HCSTRING("_batchPool","\x77","\x75","\x1a","\x4c")},
	{hx::fsObject /*::starling::display::MeshBatch*/ ,(int)offsetof(BatchProcessor_obj,_currentBatch),HX_HCSTRING("_currentBatch","\xa0","\x5f","\x35","\xd7")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(BatchProcessor_obj,_currentStyleType),HX_HCSTRING("_currentStyleType","\x71","\x13","\x84","\x6e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BatchProcessor_obj,_onBatchComplete),HX_HCSTRING("_onBatchComplete","\x75","\x98","\xbd","\xdc")},
	{hx::fsObject /*::starling::rendering::BatchToken*/ ,(int)offsetof(BatchProcessor_obj,_cacheToken),HX_HCSTRING("_cacheToken","\x76","\xb6","\x6d","\x29")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BatchProcessor_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::starling::utils::MeshSubset*/ ,(void *) &BatchProcessor_obj::sMeshSubset,HX_HCSTRING("sMeshSubset","\x42","\x82","\x8f","\x58")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BatchProcessor_obj_sMemberFields[] = {
	HX_HCSTRING("_batches","\x29","\x7c","\xc8","\xf9"),
	HX_HCSTRING("_batchPool","\x77","\x75","\x1a","\x4c"),
	HX_HCSTRING("_currentBatch","\xa0","\x5f","\x35","\xd7"),
	HX_HCSTRING("_currentStyleType","\x71","\x13","\x84","\x6e"),
	HX_HCSTRING("_onBatchComplete","\x75","\x98","\xbd","\xdc"),
	HX_HCSTRING("_cacheToken","\x76","\xb6","\x6d","\x29"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("addMesh","\xae","\x8c","\x96","\x84"),
	HX_HCSTRING("finishBatch","\x67","\x0a","\xc0","\xd4"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("getBatchAt","\x57","\x89","\x71","\x0f"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("fillToken","\x76","\xa9","\xd2","\xe2"),
	HX_HCSTRING("get_numBatches","\x4b","\xe9","\x25","\x66"),
	HX_HCSTRING("get_onBatchComplete","\x0b","\x25","\xe9","\x7c"),
	HX_HCSTRING("set_onBatchComplete","\x17","\x18","\x86","\xb9"),
	::String(null()) };

static void BatchProcessor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BatchProcessor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BatchProcessor_obj::sMeshSubset,"sMeshSubset");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BatchProcessor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BatchProcessor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BatchProcessor_obj::sMeshSubset,"sMeshSubset");
};

#endif

hx::Class BatchProcessor_obj::__mClass;

static ::String BatchProcessor_obj_sStaticFields[] = {
	HX_HCSTRING("sMeshSubset","\x42","\x82","\x8f","\x58"),
	::String(null())
};

void BatchProcessor_obj::__register()
{
	hx::Object *dummy = new BatchProcessor_obj;
	BatchProcessor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.BatchProcessor","\xa0","\x55","\xb5","\x8c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BatchProcessor_obj::__GetStatic;
	__mClass->mSetStaticField = &BatchProcessor_obj::__SetStatic;
	__mClass->mMarkFunc = BatchProcessor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BatchProcessor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BatchProcessor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BatchProcessor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BatchProcessor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BatchProcessor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BatchProcessor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BatchProcessor_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_b193097047e23c3a_34_boot)
HXDLIN(  34)		sMeshSubset =  ::starling::utils::MeshSubset_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace starling
} // end namespace rendering
