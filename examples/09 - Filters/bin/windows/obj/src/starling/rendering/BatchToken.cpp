// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_rendering_BatchToken
#include <starling/rendering/BatchToken.h>
#endif
#ifndef INCLUDED_starling_utils_StringUtil
#include <starling/utils/StringUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2dea48dc56fa21a9_39_new,"starling.rendering.BatchToken","new",0x54402cb9,"starling.rendering.BatchToken.new","starling/rendering/BatchToken.hx",39,0x8e49c055)
HX_LOCAL_STACK_FRAME(_hx_pos_2dea48dc56fa21a9_44_copyFrom,"starling.rendering.BatchToken","copyFrom",0x27ea4cc6,"starling.rendering.BatchToken.copyFrom","starling/rendering/BatchToken.hx",44,0x8e49c055)
HX_LOCAL_STACK_FRAME(_hx_pos_2dea48dc56fa21a9_52_setTo,"starling.rendering.BatchToken","setTo",0xe72e7656,"starling.rendering.BatchToken.setTo","starling/rendering/BatchToken.hx",52,0x8e49c055)
HX_LOCAL_STACK_FRAME(_hx_pos_2dea48dc56fa21a9_61_reset,"starling.rendering.BatchToken","reset",0x53c72e68,"starling.rendering.BatchToken.reset","starling/rendering/BatchToken.hx",61,0x8e49c055)
HX_LOCAL_STACK_FRAME(_hx_pos_2dea48dc56fa21a9_67_equals,"starling.rendering.BatchToken","equals",0xb1fc0f86,"starling.rendering.BatchToken.equals","starling/rendering/BatchToken.hx",67,0x8e49c055)
HX_LOCAL_STACK_FRAME(_hx_pos_2dea48dc56fa21a9_73_toString,"starling.rendering.BatchToken","toString",0x97f811b3,"starling.rendering.BatchToken.toString","starling/rendering/BatchToken.hx",73,0x8e49c055)
namespace starling{
namespace rendering{

void BatchToken_obj::__construct(hx::Null< int >  __o_batchID,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_indexID){
int batchID = __o_batchID.Default(0);
int vertexID = __o_vertexID.Default(0);
int indexID = __o_indexID.Default(0);
            	HX_STACKFRAME(&_hx_pos_2dea48dc56fa21a9_39_new)
HXDLIN(  39)		this->setTo(batchID,vertexID,indexID);
            	}

Dynamic BatchToken_obj::__CreateEmpty() { return new BatchToken_obj; }

void *BatchToken_obj::_hx_vtable = 0;

Dynamic BatchToken_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BatchToken_obj > _hx_result = new BatchToken_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BatchToken_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x39382e83;
}

void BatchToken_obj::copyFrom( ::starling::rendering::BatchToken token){
            	HX_STACKFRAME(&_hx_pos_2dea48dc56fa21a9_44_copyFrom)
HXLINE(  45)		this->batchID = token->batchID;
HXLINE(  46)		this->vertexID = token->vertexID;
HXLINE(  47)		this->indexID = token->indexID;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchToken_obj,copyFrom,(void))

void BatchToken_obj::setTo(hx::Null< int >  __o_batchID,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_indexID){
int batchID = __o_batchID.Default(0);
int vertexID = __o_vertexID.Default(0);
int indexID = __o_indexID.Default(0);
            	HX_STACKFRAME(&_hx_pos_2dea48dc56fa21a9_52_setTo)
HXLINE(  53)		this->batchID = batchID;
HXLINE(  54)		this->vertexID = vertexID;
HXLINE(  55)		this->indexID = indexID;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BatchToken_obj,setTo,(void))

void BatchToken_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_2dea48dc56fa21a9_61_reset)
HXDLIN(  61)		this->batchID = (this->vertexID = (this->indexID = (int)0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchToken_obj,reset,(void))

bool BatchToken_obj::equals( ::starling::rendering::BatchToken other){
            	HX_STACKFRAME(&_hx_pos_2dea48dc56fa21a9_67_equals)
HXDLIN(  67)		bool _hx_tmp;
HXDLIN(  67)		if ((this->batchID == other->batchID)) {
HXDLIN(  67)			_hx_tmp = (this->vertexID == other->vertexID);
            		}
            		else {
HXDLIN(  67)			_hx_tmp = false;
            		}
HXDLIN(  67)		if (_hx_tmp) {
HXDLIN(  67)			return (this->indexID == other->indexID);
            		}
            		else {
HXDLIN(  67)			return false;
            		}
HXDLIN(  67)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BatchToken_obj,equals,return )

::String BatchToken_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_2dea48dc56fa21a9_73_toString)
HXDLIN(  73)		return ::starling::utils::StringUtil_obj::format(HX_("[BatchToken batchID={0} vertexID={1} indexID={2}]",58,6b,43,2f),::cpp::VirtualArray_obj::__new(3)->init(0,this->batchID)->init(1,this->vertexID)->init(2,this->indexID));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BatchToken_obj,toString,return )


hx::ObjectPtr< BatchToken_obj > BatchToken_obj::__new(hx::Null< int >  __o_batchID,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_indexID) {
	hx::ObjectPtr< BatchToken_obj > __this = new BatchToken_obj();
	__this->__construct(__o_batchID,__o_vertexID,__o_indexID);
	return __this;
}

hx::ObjectPtr< BatchToken_obj > BatchToken_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_batchID,hx::Null< int >  __o_vertexID,hx::Null< int >  __o_indexID) {
	BatchToken_obj *__this = (BatchToken_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BatchToken_obj), false, "starling.rendering.BatchToken"));
	*(void **)__this = BatchToken_obj::_hx_vtable;
	__this->__construct(__o_batchID,__o_vertexID,__o_indexID);
	return __this;
}

BatchToken_obj::BatchToken_obj()
{
}

hx::Val BatchToken_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"batchID") ) { return hx::Val( batchID ); }
		if (HX_FIELD_EQ(inName,"indexID") ) { return hx::Val( indexID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertexID") ) { return hx::Val( vertexID ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BatchToken_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"batchID") ) { batchID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexID") ) { indexID=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertexID") ) { vertexID=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BatchToken_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("batchID","\x15","\x0a","\x10","\xc0"));
	outFields->push(HX_HCSTRING("vertexID","\x3f","\xbc","\x80","\x67"));
	outFields->push(HX_HCSTRING("indexID","\x6d","\x43","\xbf","\xe0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BatchToken_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BatchToken_obj,batchID),HX_HCSTRING("batchID","\x15","\x0a","\x10","\xc0")},
	{hx::fsInt,(int)offsetof(BatchToken_obj,vertexID),HX_HCSTRING("vertexID","\x3f","\xbc","\x80","\x67")},
	{hx::fsInt,(int)offsetof(BatchToken_obj,indexID),HX_HCSTRING("indexID","\x6d","\x43","\xbf","\xe0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BatchToken_obj_sStaticStorageInfo = 0;
#endif

static ::String BatchToken_obj_sMemberFields[] = {
	HX_HCSTRING("batchID","\x15","\x0a","\x10","\xc0"),
	HX_HCSTRING("vertexID","\x3f","\xbc","\x80","\x67"),
	HX_HCSTRING("indexID","\x6d","\x43","\xbf","\xe0"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void BatchToken_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BatchToken_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BatchToken_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BatchToken_obj::__mClass,"__mClass");
};

#endif

hx::Class BatchToken_obj::__mClass;

void BatchToken_obj::__register()
{
	hx::Object *dummy = new BatchToken_obj;
	BatchToken_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.BatchToken","\x47","\x5c","\x33","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BatchToken_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BatchToken_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BatchToken_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BatchToken_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BatchToken_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BatchToken_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace rendering
