// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_Effect
#include <starling/rendering/Effect.h>
#endif
#ifndef INCLUDED_starling_rendering_FilterEffect
#include <starling/rendering/FilterEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_MeshEffect
#include <starling/rendering/MeshEffect.h>
#endif
#ifndef INCLUDED_starling_rendering_Program
#include <starling/rendering/Program.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataFormat
#include <starling/rendering/VertexDataFormat.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1cc5450ee560777f_47_new,"starling.rendering.MeshEffect","new",0x418257b8,"starling.rendering.MeshEffect.new","starling/rendering/MeshEffect.hx",47,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_62_get_programVariantName,"starling.rendering.MeshEffect","get_programVariantName",0xa2f3023d,"starling.rendering.MeshEffect.get_programVariantName","starling/rendering/MeshEffect.hx",62,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_69_createProgram,"starling.rendering.MeshEffect","createProgram",0x39ee4840,"starling.rendering.MeshEffect.createProgram","starling/rendering/MeshEffect.hx",69,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_113_beforeDraw,"starling.rendering.MeshEffect","beforeDraw",0x3530ebcb,"starling.rendering.MeshEffect.beforeDraw","starling/rendering/MeshEffect.hx",113,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_126_afterDraw,"starling.rendering.MeshEffect","afterDraw",0x36fd9598,"starling.rendering.MeshEffect.afterDraw","starling/rendering/MeshEffect.hx",126,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_134_get_vertexFormat,"starling.rendering.MeshEffect","get_vertexFormat",0x0ee02fec,"starling.rendering.MeshEffect.get_vertexFormat","starling/rendering/MeshEffect.hx",134,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_139_get_alpha,"starling.rendering.MeshEffect","get_alpha",0xd9ee9d0d,"starling.rendering.MeshEffect.get_alpha","starling/rendering/MeshEffect.hx",139,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_140_set_alpha,"starling.rendering.MeshEffect","set_alpha",0xbd3f8919,"starling.rendering.MeshEffect.set_alpha","starling/rendering/MeshEffect.hx",140,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_147_get_tinted,"starling.rendering.MeshEffect","get_tinted",0xb4259d8b,"starling.rendering.MeshEffect.get_tinted","starling/rendering/MeshEffect.hx",147,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_148_set_tinted,"starling.rendering.MeshEffect","set_tinted",0xb7a33bff,"starling.rendering.MeshEffect.set_tinted","starling/rendering/MeshEffect.hx",148,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_36_boot,"starling.rendering.MeshEffect","boot",0x08a369da,"starling.rendering.MeshEffect.boot","starling/rendering/MeshEffect.hx",36,0x04723a36)
HX_LOCAL_STACK_FRAME(_hx_pos_1cc5450ee560777f_43_boot,"starling.rendering.MeshEffect","boot",0x08a369da,"starling.rendering.MeshEffect.boot","starling/rendering/MeshEffect.hx",43,0x04723a36)
namespace starling{
namespace rendering{

void MeshEffect_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_47_new)
HXLINE(  48)		super::__construct();
HXLINE(  56)		this->_alpha = ((Float)1.0);
HXLINE(  57)		this->_optimizeIfNotTinted = hx::IsEq( ::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this)),hx::ClassOf< ::starling::rendering::MeshEffect >() );
            	}

Dynamic MeshEffect_obj::__CreateEmpty() { return new MeshEffect_obj; }

void *MeshEffect_obj::_hx_vtable = 0;

Dynamic MeshEffect_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MeshEffect_obj > _hx_result = new MeshEffect_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MeshEffect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2a6d1e35) {
		if (inClassId<=(int)0x15407461) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x15407461;
		} else {
			return inClassId==(int)0x2a6d1e35;
		}
	} else {
		return inClassId==(int)0x7fe47262;
	}
}

int MeshEffect_obj::get_programVariantName(){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_62_get_programVariantName)
HXLINE(  63)		int noTinting;
HXDLIN(  63)		bool noTinting1;
HXDLIN(  63)		bool noTinting2;
HXDLIN(  63)		if (this->_optimizeIfNotTinted) {
HXLINE(  63)			noTinting2 = !(this->_tinted);
            		}
            		else {
HXLINE(  63)			noTinting2 = false;
            		}
HXDLIN(  63)		if (noTinting2) {
HXLINE(  63)			noTinting1 = (this->_alpha == ((Float)1.0));
            		}
            		else {
HXLINE(  63)			noTinting1 = false;
            		}
HXDLIN(  63)		if (noTinting1) {
HXLINE(  63)			noTinting = (int)1;
            		}
            		else {
HXLINE(  63)			noTinting = (int)0;
            		}
HXLINE(  64)		return ((int)this->super::get_programVariantName() | (int)((int)noTinting << (int)(int)3));
            	}


 ::starling::rendering::Program MeshEffect_obj::createProgram(){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_69_createProgram)
HXLINE(  70)		::String vertexShader;
HXDLIN(  70)		::String fragmentShader;
HXLINE(  72)		if (hx::IsNotNull( this->get_texture() )) {
HXLINE(  74)			bool _hx_tmp;
HXDLIN(  74)			bool _hx_tmp1;
HXDLIN(  74)			if (this->_optimizeIfNotTinted) {
HXLINE(  74)				_hx_tmp1 = !(this->_tinted);
            			}
            			else {
HXLINE(  74)				_hx_tmp1 = false;
            			}
HXDLIN(  74)			if (_hx_tmp1) {
HXLINE(  74)				_hx_tmp = (this->_alpha == ((Float)1.0));
            			}
            			else {
HXLINE(  74)				_hx_tmp = false;
            			}
HXDLIN(  74)			if (_hx_tmp) {
HXLINE(  75)				return this->super::createProgram();
            			}
HXLINE(  77)			vertexShader = ((HX_("m44 op, va0, vc0 \n",bc,7d,9c,46) + HX_("mov v0, va1      \n",5e,f3,3b,47)) + HX_("mul v1, va2, vc4 \n",e1,20,d4,b3));
HXLINE(  82)			fragmentShader = (::starling::rendering::FilterEffect_obj::tex(HX_("ft0",22,cb,4d,00),HX_("v0",fa,66,00,00),(int)0,this->get_texture(),null()) + HX_("mul oc, ft0, v1  \n",3d,ed,71,10));
            		}
            		else {
HXLINE(  88)			vertexShader = (HX_("m44 op, va0, vc0 \n",bc,7d,9c,46) + HX_("mul v0, va2, vc4 \n",60,a3,13,6e));
HXLINE(  92)			fragmentShader = HX_("mov oc, v0       \n",38,ff,48,ad);
            		}
HXLINE(  96)		return ::starling::rendering::Program_obj::fromSource(vertexShader,fragmentShader,null());
            	}


void MeshEffect_obj::beforeDraw( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_113_beforeDraw)
HXLINE( 114)		this->super::beforeDraw(context);
HXLINE( 116)		{
HXLINE( 116)			 ::openfl::_Vector::AbstractVector this1 = ::starling::rendering::MeshEffect_obj::sRenderAlpha;
HXDLIN( 116)			 ::openfl::_Vector::AbstractVector this2 = ::starling::rendering::MeshEffect_obj::sRenderAlpha;
HXDLIN( 116)			 ::openfl::_Vector::AbstractVector this3 = ::starling::rendering::MeshEffect_obj::sRenderAlpha;
HXDLIN( 116)			Float value = ( (Float)(::openfl::_Vector::IVector_obj::set(::starling::rendering::MeshEffect_obj::sRenderAlpha->data,(int)3,this->_alpha)) );
HXDLIN( 116)			Float value1 = ( (Float)(::openfl::_Vector::IVector_obj::set(this3->data,(int)2,value)) );
HXDLIN( 116)			Float value2 = ( (Float)(::openfl::_Vector::IVector_obj::set(this2->data,(int)1,value1)) );
HXDLIN( 116)			::openfl::_Vector::IVector_obj::set(this1->data,(int)0,value2);
            		}
HXLINE( 117)		context->setProgramConstantsFromVector((int)1,(int)4,::starling::rendering::MeshEffect_obj::sRenderAlpha,null());
HXLINE( 119)		bool _hx_tmp;
HXDLIN( 119)		bool _hx_tmp1;
HXDLIN( 119)		bool _hx_tmp2;
HXDLIN( 119)		if (!(this->_tinted)) {
HXLINE( 119)			_hx_tmp2 = (this->_alpha != ((Float)1.0));
            		}
            		else {
HXLINE( 119)			_hx_tmp2 = true;
            		}
HXDLIN( 119)		if (!(_hx_tmp2)) {
HXLINE( 119)			_hx_tmp1 = !(this->_optimizeIfNotTinted);
            		}
            		else {
HXLINE( 119)			_hx_tmp1 = true;
            		}
HXDLIN( 119)		if (!(_hx_tmp1)) {
HXLINE( 119)			_hx_tmp = hx::IsNull( this->get_texture() );
            		}
            		else {
HXLINE( 119)			_hx_tmp = true;
            		}
HXDLIN( 119)		if (_hx_tmp) {
HXLINE( 120)			 ::starling::rendering::VertexDataFormat _hx_tmp3 = this->get_vertexFormat();
HXDLIN( 120)			_hx_tmp3->setVertexBufferAt((int)2,this->get_vertexBuffer(),HX_("color",63,71,5c,4a));
            		}
            	}


void MeshEffect_obj::afterDraw( ::openfl::display3D::Context3D context){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_126_afterDraw)
HXLINE( 127)		context->setVertexBufferAt((int)2,null(),null(),null());
HXLINE( 129)		this->super::afterDraw(context);
            	}


 ::starling::rendering::VertexDataFormat MeshEffect_obj::get_vertexFormat(){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_134_get_vertexFormat)
HXDLIN( 134)		return ::starling::rendering::MeshEffect_obj::VERTEX_FORMAT;
            	}


Float MeshEffect_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_139_get_alpha)
HXDLIN( 139)		return this->_alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshEffect_obj,get_alpha,return )

Float MeshEffect_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_140_set_alpha)
HXDLIN( 140)		return (this->_alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshEffect_obj,set_alpha,return )

bool MeshEffect_obj::get_tinted(){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_147_get_tinted)
HXDLIN( 147)		return this->_tinted;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshEffect_obj,get_tinted,return )

bool MeshEffect_obj::set_tinted(bool value){
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_148_set_tinted)
HXDLIN( 148)		return (this->_tinted = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshEffect_obj,set_tinted,return )

 ::starling::rendering::VertexDataFormat MeshEffect_obj::VERTEX_FORMAT;

 ::openfl::_Vector::AbstractVector MeshEffect_obj::sRenderAlpha;


hx::ObjectPtr< MeshEffect_obj > MeshEffect_obj::__new() {
	hx::ObjectPtr< MeshEffect_obj > __this = new MeshEffect_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MeshEffect_obj > MeshEffect_obj::__alloc(hx::Ctx *_hx_ctx) {
	MeshEffect_obj *__this = (MeshEffect_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MeshEffect_obj), true, "starling.rendering.MeshEffect"));
	*(void **)__this = MeshEffect_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MeshEffect_obj::MeshEffect_obj()
{
}

hx::Val MeshEffect_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_alpha") ) { return hx::Val( _alpha ); }
		if (HX_FIELD_EQ(inName,"tinted") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tinted() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_tinted") ) { return hx::Val( _tinted ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"afterDraw") ) { return hx::Val( afterDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"beforeDraw") ) { return hx::Val( beforeDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tinted") ) { return hx::Val( get_tinted_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tinted") ) { return hx::Val( set_tinted_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_vertexFormat") ) { return hx::Val( get_vertexFormat_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_optimizeIfNotTinted") ) { return hx::Val( _optimizeIfNotTinted ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_programVariantName") ) { return hx::Val( get_programVariantName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MeshEffect_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"sRenderAlpha") ) { outValue = ( sRenderAlpha ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"VERTEX_FORMAT") ) { outValue = ( VERTEX_FORMAT ); return true; }
	}
	return false;
}

hx::Val MeshEffect_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_alpha") ) { _alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tinted") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tinted(inValue.Cast< bool >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_tinted") ) { _tinted=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_optimizeIfNotTinted") ) { _optimizeIfNotTinted=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MeshEffect_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"sRenderAlpha") ) { sRenderAlpha=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"VERTEX_FORMAT") ) { VERTEX_FORMAT=ioValue.Cast<  ::starling::rendering::VertexDataFormat >(); return true; }
	}
	return false;
}

void MeshEffect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d"));
	outFields->push(HX_HCSTRING("_tinted","\xb9","\xab","\xfd","\x8d"));
	outFields->push(HX_HCSTRING("_optimizeIfNotTinted","\x14","\x5d","\xd0","\x56"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("tinted","\x1a","\x9a","\x86","\x1f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MeshEffect_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(MeshEffect_obj,_alpha),HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d")},
	{hx::fsBool,(int)offsetof(MeshEffect_obj,_tinted),HX_HCSTRING("_tinted","\xb9","\xab","\xfd","\x8d")},
	{hx::fsBool,(int)offsetof(MeshEffect_obj,_optimizeIfNotTinted),HX_HCSTRING("_optimizeIfNotTinted","\x14","\x5d","\xd0","\x56")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MeshEffect_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::starling::rendering::VertexDataFormat*/ ,(void *) &MeshEffect_obj::VERTEX_FORMAT,HX_HCSTRING("VERTEX_FORMAT","\xf2","\x39","\xe1","\x29")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &MeshEffect_obj::sRenderAlpha,HX_HCSTRING("sRenderAlpha","\x75","\xaa","\x78","\x5a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MeshEffect_obj_sMemberFields[] = {
	HX_HCSTRING("_alpha","\x9f","\xee","\x7d","\x1d"),
	HX_HCSTRING("_tinted","\xb9","\xab","\xfd","\x8d"),
	HX_HCSTRING("_optimizeIfNotTinted","\x14","\x5d","\xd0","\x56"),
	HX_HCSTRING("get_programVariantName","\x95","\x92","\xf8","\x69"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("beforeDraw","\x23","\x58","\x19","\x91"),
	HX_HCSTRING("afterDraw","\x40","\xfc","\x4e","\xc2"),
	HX_HCSTRING("get_vertexFormat","\x44","\x6e","\x42","\xa2"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_tinted","\xe3","\x09","\x0e","\x10"),
	HX_HCSTRING("set_tinted","\x57","\xa8","\x8b","\x13"),
	::String(null()) };

static void MeshEffect_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MeshEffect_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MeshEffect_obj::VERTEX_FORMAT,"VERTEX_FORMAT");
	HX_MARK_MEMBER_NAME(MeshEffect_obj::sRenderAlpha,"sRenderAlpha");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MeshEffect_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MeshEffect_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MeshEffect_obj::VERTEX_FORMAT,"VERTEX_FORMAT");
	HX_VISIT_MEMBER_NAME(MeshEffect_obj::sRenderAlpha,"sRenderAlpha");
};

#endif

hx::Class MeshEffect_obj::__mClass;

static ::String MeshEffect_obj_sStaticFields[] = {
	HX_HCSTRING("VERTEX_FORMAT","\xf2","\x39","\xe1","\x29"),
	HX_HCSTRING("sRenderAlpha","\x75","\xaa","\x78","\x5a"),
	::String(null())
};

void MeshEffect_obj::__register()
{
	hx::Object *dummy = new MeshEffect_obj;
	MeshEffect_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.MeshEffect","\xc6","\x5b","\xa6","\xdf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MeshEffect_obj::__GetStatic;
	__mClass->mSetStaticField = &MeshEffect_obj::__SetStatic;
	__mClass->mMarkFunc = MeshEffect_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MeshEffect_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MeshEffect_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MeshEffect_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MeshEffect_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MeshEffect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MeshEffect_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MeshEffect_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1cc5450ee560777f_36_boot)
HXDLIN(  36)		VERTEX_FORMAT = ::starling::rendering::FilterEffect_obj::VERTEX_FORMAT->extend(HX_("color:bytes4",20,0e,52,ef));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_1cc5450ee560777f_43_boot)
HXDLIN(  43)		sRenderAlpha =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,(int)4,true,null()),null());
            	}
}

} // end namespace starling
} // end namespace rendering
