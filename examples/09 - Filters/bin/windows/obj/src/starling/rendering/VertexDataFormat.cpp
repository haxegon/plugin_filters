// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DVertexBufferFormat_Context3DVertexBufferFormat_Impl_
#include <openfl/display3D/_Context3DVertexBufferFormat/Context3DVertexBufferFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataAttribute
#include <starling/rendering/VertexDataAttribute.h>
#endif
#ifndef INCLUDED_starling_rendering_VertexDataFormat
#include <starling/rendering/VertexDataFormat.h>
#endif
#ifndef INCLUDED_starling_utils_StringUtil
#include <starling/utils/StringUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_962a7344827da2e7_59_new,"starling.rendering.VertexDataFormat","new",0xb6bd065f,"starling.rendering.VertexDataFormat.new","starling/rendering/VertexDataFormat.hx",59,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_113_extend,"starling.rendering.VertexDataFormat","extend",0xe92e253b,"starling.rendering.VertexDataFormat.extend","starling/rendering/VertexDataFormat.hx",113,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_121_getSize,"starling.rendering.VertexDataFormat","getSize",0xcdabf1f6,"starling.rendering.VertexDataFormat.getSize","starling/rendering/VertexDataFormat.hx",121,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_127_getSizeIn32Bits,"starling.rendering.VertexDataFormat","getSizeIn32Bits",0x7047f900,"starling.rendering.VertexDataFormat.getSizeIn32Bits","starling/rendering/VertexDataFormat.hx",127,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_133_getOffset,"starling.rendering.VertexDataFormat","getOffset",0x25366008,"starling.rendering.VertexDataFormat.getOffset","starling/rendering/VertexDataFormat.hx",133,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_139_getOffsetIn32Bits,"starling.rendering.VertexDataFormat","getOffsetIn32Bits",0xf1e9c912,"starling.rendering.VertexDataFormat.getOffsetIn32Bits","starling/rendering/VertexDataFormat.hx",139,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_146_getFormat,"starling.rendering.VertexDataFormat","getFormat",0xc28557ac,"starling.rendering.VertexDataFormat.getFormat","starling/rendering/VertexDataFormat.hx",146,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_152_getName,"starling.rendering.VertexDataFormat","getName",0xca57c380,"starling.rendering.VertexDataFormat.getName","starling/rendering/VertexDataFormat.hx",152,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_157_hasAttribute,"starling.rendering.VertexDataFormat","hasAttribute",0x31b7e783,"starling.rendering.VertexDataFormat.hasAttribute","starling/rendering/VertexDataFormat.hx",157,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_173_setVertexBufferAt,"starling.rendering.VertexDataFormat","setVertexBufferAt",0x02d96f18,"starling.rendering.VertexDataFormat.setVertexBufferAt","starling/rendering/VertexDataFormat.hx",173,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_182_parseFormat,"starling.rendering.VertexDataFormat","parseFormat",0x596908c9,"starling.rendering.VertexDataFormat.parseFormat","starling/rendering/VertexDataFormat.hx",182,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_225_toString,"starling.rendering.VertexDataFormat","toString",0x84867e4d,"starling.rendering.VertexDataFormat.toString","starling/rendering/VertexDataFormat.hx",225,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_232_getAttribute,"starling.rendering.VertexDataFormat","getAttribute",0xb3bc9ec7,"starling.rendering.VertexDataFormat.getAttribute","starling/rendering/VertexDataFormat.hx",232,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_249_get_attributes,"starling.rendering.VertexDataFormat","get_attributes",0x2cfe4d81,"starling.rendering.VertexDataFormat.get_attributes","starling/rendering/VertexDataFormat.hx",249,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_258_get_formatString,"starling.rendering.VertexDataFormat","get_formatString",0xdbc39292,"starling.rendering.VertexDataFormat.get_formatString","starling/rendering/VertexDataFormat.hx",258,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_265_get_vertexSize,"starling.rendering.VertexDataFormat","get_vertexSize",0x729cceef,"starling.rendering.VertexDataFormat.get_vertexSize","starling/rendering/VertexDataFormat.hx",265,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_272_get_vertexSizeIn32Bits,"starling.rendering.VertexDataFormat","get_vertexSizeIn32Bits",0x2843f6f9,"starling.rendering.VertexDataFormat.get_vertexSizeIn32Bits","starling/rendering/VertexDataFormat.hx",272,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_279_get_numAttributes,"starling.rendering.VertexDataFormat","get_numAttributes",0xb3598053,"starling.rendering.VertexDataFormat.get_numAttributes","starling/rendering/VertexDataFormat.hx",279,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_91_fromString,"starling.rendering.VertexDataFormat","fromString",0x980b45bc,"starling.rendering.VertexDataFormat.fromString","starling/rendering/VertexDataFormat.hx",91,0xf08f0fef)
HX_LOCAL_STACK_FRAME(_hx_pos_962a7344827da2e7_53_boot,"starling.rendering.VertexDataFormat","boot",0x26c18d53,"starling.rendering.VertexDataFormat.boot","starling/rendering/VertexDataFormat.hx",53,0xf08f0fef)
namespace starling{
namespace rendering{

void VertexDataFormat_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_962a7344827da2e7_59_new)
HXDLIN(  59)		int length = null();
HXDLIN(  59)		bool fixed = null();
HXDLIN(  59)		this->_attributes =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            	}

Dynamic VertexDataFormat_obj::__CreateEmpty() { return new VertexDataFormat_obj; }

void *VertexDataFormat_obj::_hx_vtable = 0;

Dynamic VertexDataFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VertexDataFormat_obj > _hx_result = new VertexDataFormat_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VertexDataFormat_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55c31229;
}

 ::starling::rendering::VertexDataFormat VertexDataFormat_obj::extend(::String format){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_113_extend)
HXDLIN( 113)		return ::starling::rendering::VertexDataFormat_obj::fromString(((this->_format + HX_(", ",74,26,00,00)) + format));
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,extend,return )

int VertexDataFormat_obj::getSize(::String attrName){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_121_getSize)
HXDLIN( 121)		return this->getAttribute(attrName)->size;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,getSize,return )

int VertexDataFormat_obj::getSizeIn32Bits(::String attrName){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_127_getSizeIn32Bits)
HXDLIN( 127)		return ::Std_obj::_hx_int(((Float)this->getAttribute(attrName)->size / (Float)(int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,getSizeIn32Bits,return )

int VertexDataFormat_obj::getOffset(::String attrName){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_133_getOffset)
HXDLIN( 133)		return this->getAttribute(attrName)->offset;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,getOffset,return )

int VertexDataFormat_obj::getOffsetIn32Bits(::String attrName){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_139_getOffsetIn32Bits)
HXDLIN( 139)		return ::Std_obj::_hx_int(((Float)this->getAttribute(attrName)->offset / (Float)(int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,getOffsetIn32Bits,return )

::String VertexDataFormat_obj::getFormat(::String attrName){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_146_getFormat)
HXDLIN( 146)		return this->getAttribute(attrName)->format;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,getFormat,return )

::String VertexDataFormat_obj::getName(int attrIndex){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_152_getName)
HXDLIN( 152)		return ( ( ::starling::rendering::VertexDataAttribute)(::openfl::_Vector::IVector_obj::get(this->_attributes->data,attrIndex)) )->name;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,getName,return )

bool VertexDataFormat_obj::hasAttribute(::String attrName){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_157_hasAttribute)
HXLINE( 158)		int numAttributes = ::openfl::_Vector::IVector_obj::get_length(this->_attributes->data);
HXLINE( 160)		{
HXLINE( 160)			int _g1 = (int)0;
HXDLIN( 160)			int _g = numAttributes;
HXDLIN( 160)			while((_g1 < _g)){
HXLINE( 160)				_g1 = (_g1 + (int)1);
HXDLIN( 160)				int i = (_g1 - (int)1);
HXLINE( 161)				if ((( ( ::starling::rendering::VertexDataAttribute)(::openfl::_Vector::IVector_obj::get(this->_attributes->data,i)) )->name == attrName)) {
HXLINE( 161)					return true;
            				}
            			}
            		}
HXLINE( 163)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,hasAttribute,return )

void VertexDataFormat_obj::setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,::String attrName){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_173_setVertexBufferAt)
HXLINE( 174)		 ::starling::rendering::VertexDataAttribute attribute = this->getAttribute(attrName);
HXLINE( 175)		 ::openfl::display3D::Context3D _hx_tmp = ::starling::core::Starling_obj::get_current()->get_context();
HXDLIN( 175)		int _hx_tmp1 = ::Std_obj::_hx_int(((Float)attribute->offset / (Float)(int)4));
HXDLIN( 175)		_hx_tmp->setVertexBufferAt(index,buffer,_hx_tmp1,::openfl::display3D::_Context3DVertexBufferFormat::Context3DVertexBufferFormat_Impl__obj::fromString(attribute->format));
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexDataFormat_obj,setVertexBufferAt,(void))

void VertexDataFormat_obj::parseFormat(::String format){
            	HX_GC_STACKFRAME(&_hx_pos_962a7344827da2e7_182_parseFormat)
HXDLIN( 182)		bool _hx_tmp;
HXDLIN( 182)		if (hx::IsNotNull( format )) {
HXDLIN( 182)			_hx_tmp = (format != HX_("",00,00,00,00));
            		}
            		else {
HXDLIN( 182)			_hx_tmp = false;
            		}
HXDLIN( 182)		if (_hx_tmp) {
HXLINE( 184)			::openfl::_Vector::IVector_obj::set_length(this->_attributes->data,(int)0);
HXLINE( 185)			this->_format = HX_("",00,00,00,00);
HXLINE( 187)			::Array< ::String > parts = format.split(HX_(",",2c,00,00,00));
HXLINE( 188)			int numParts = parts->length;
HXLINE( 189)			int offset = (int)0;
HXLINE( 191)			{
HXLINE( 191)				int _g1 = (int)0;
HXDLIN( 191)				int _g = numParts;
HXDLIN( 191)				while((_g1 < _g)){
HXLINE( 191)					_g1 = (_g1 + (int)1);
HXDLIN( 191)					int i = (_g1 - (int)1);
HXLINE( 193)					::String attrDesc = parts->__get(i);
HXLINE( 194)					::Array< ::String > attrParts = attrDesc.split(HX_(":",3a,00,00,00));
HXLINE( 196)					if ((attrParts->length != (int)2)) {
HXLINE( 197)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Missing colon: ",eb,da,48,f7) + attrDesc)));
            					}
HXLINE( 199)					::String attrName = ::starling::utils::StringUtil_obj::trim(attrParts->__get((int)0));
HXLINE( 200)					::String attrFormat = ::starling::utils::StringUtil_obj::trim(attrParts->__get((int)1));
HXLINE( 202)					bool _hx_tmp1;
HXDLIN( 202)					if ((attrName.length != (int)0)) {
HXLINE( 202)						_hx_tmp1 = (attrFormat.length == (int)0);
            					}
            					else {
HXLINE( 202)						_hx_tmp1 = true;
            					}
HXDLIN( 202)					if (_hx_tmp1) {
HXLINE( 203)						HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,(HX_("Invalid format string: ",77,e8,04,57) + attrDesc)));
            					}
HXLINE( 205)					 ::starling::rendering::VertexDataAttribute attribute =  ::starling::rendering::VertexDataAttribute_obj::__alloc( HX_CTX ,attrName,attrFormat,offset);
HXLINE( 208)					offset = (offset + attribute->size);
HXLINE( 210)					 ::starling::rendering::VertexDataFormat _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 210)					::String _hx_tmp3;
HXDLIN( 210)					if ((i == (int)0)) {
HXLINE( 210)						_hx_tmp3 = HX_("",00,00,00,00);
            					}
            					else {
HXLINE( 210)						_hx_tmp3 = HX_(", ",74,26,00,00);
            					}
HXDLIN( 210)					_hx_tmp2->_format = (_hx_tmp2->_format + (((_hx_tmp3 + attribute->name) + HX_(":",3a,00,00,00)) + attribute->format));
HXLINE( 211)					{
HXLINE( 211)						 ::openfl::_Vector::AbstractVector this1 = this->_attributes;
HXDLIN( 211)						int index = ::openfl::_Vector::IVector_obj::get_length(this->_attributes->data);
HXDLIN( 211)						::openfl::_Vector::IVector_obj::set(this1->data,index,attribute);
            					}
            				}
            			}
HXLINE( 214)			this->_vertexSize = offset;
            		}
            		else {
HXLINE( 218)			this->_format = HX_("",00,00,00,00);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,parseFormat,(void))

::String VertexDataFormat_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_225_toString)
HXDLIN( 225)		return this->_format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexDataFormat_obj,toString,return )

 ::starling::rendering::VertexDataAttribute VertexDataFormat_obj::getAttribute(::String attrName){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_232_getAttribute)
HXLINE( 233)		int i;
HXDLIN( 233)		 ::starling::rendering::VertexDataAttribute attribute;
HXLINE( 234)		int numAttributes = ::openfl::_Vector::IVector_obj::get_length(this->_attributes->data);
HXLINE( 236)		{
HXLINE( 236)			int _g1 = (int)0;
HXDLIN( 236)			int _g = numAttributes;
HXDLIN( 236)			while((_g1 < _g)){
HXLINE( 236)				_g1 = (_g1 + (int)1);
HXDLIN( 236)				int i1 = (_g1 - (int)1);
HXLINE( 238)				attribute = ( ( ::starling::rendering::VertexDataAttribute)(::openfl::_Vector::IVector_obj::get(this->_attributes->data,i1)) );
HXLINE( 239)				if ((attribute->name == attrName)) {
HXLINE( 239)					return attribute;
            				}
            			}
            		}
HXLINE( 242)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,getAttribute,return )

 ::openfl::_Vector::AbstractVector VertexDataFormat_obj::get_attributes(){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_249_get_attributes)
HXDLIN( 249)		return this->_attributes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexDataFormat_obj,get_attributes,return )

::String VertexDataFormat_obj::get_formatString(){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_258_get_formatString)
HXDLIN( 258)		return this->_format;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexDataFormat_obj,get_formatString,return )

int VertexDataFormat_obj::get_vertexSize(){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_265_get_vertexSize)
HXDLIN( 265)		return this->_vertexSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexDataFormat_obj,get_vertexSize,return )

int VertexDataFormat_obj::get_vertexSizeIn32Bits(){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_272_get_vertexSizeIn32Bits)
HXDLIN( 272)		return ::Std_obj::_hx_int(((Float)this->_vertexSize / (Float)(int)4));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexDataFormat_obj,get_vertexSizeIn32Bits,return )

int VertexDataFormat_obj::get_numAttributes(){
            	HX_STACKFRAME(&_hx_pos_962a7344827da2e7_279_get_numAttributes)
HXDLIN( 279)		return ::openfl::_Vector::IVector_obj::get_length(this->_attributes->data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexDataFormat_obj,get_numAttributes,return )

 ::haxe::ds::StringMap VertexDataFormat_obj::sFormats;

 ::starling::rendering::VertexDataFormat VertexDataFormat_obj::fromString(::String format){
            	HX_GC_STACKFRAME(&_hx_pos_962a7344827da2e7_91_fromString)
HXDLIN(  91)		if (::starling::rendering::VertexDataFormat_obj::sFormats->exists(format)) {
HXDLIN(  91)			return ::starling::rendering::VertexDataFormat_obj::sFormats->get(format).StaticCast<  ::starling::rendering::VertexDataFormat >();
            		}
            		else {
HXLINE(  94)			 ::starling::rendering::VertexDataFormat instance =  ::starling::rendering::VertexDataFormat_obj::__alloc( HX_CTX );
HXLINE(  95)			instance->parseFormat(format);
HXLINE(  97)			::String normalizedFormat = instance->_format;
HXLINE(  99)			if (::starling::rendering::VertexDataFormat_obj::sFormats->exists(normalizedFormat)) {
HXLINE( 100)				instance = ::starling::rendering::VertexDataFormat_obj::sFormats->get(normalizedFormat).StaticCast<  ::starling::rendering::VertexDataFormat >();
            			}
HXLINE( 102)			::starling::rendering::VertexDataFormat_obj::sFormats->set(format,instance);
HXLINE( 103)			::starling::rendering::VertexDataFormat_obj::sFormats->set(normalizedFormat,instance);
HXLINE( 105)			return instance;
            		}
HXLINE(  91)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(VertexDataFormat_obj,fromString,return )


hx::ObjectPtr< VertexDataFormat_obj > VertexDataFormat_obj::__new() {
	hx::ObjectPtr< VertexDataFormat_obj > __this = new VertexDataFormat_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< VertexDataFormat_obj > VertexDataFormat_obj::__alloc(hx::Ctx *_hx_ctx) {
	VertexDataFormat_obj *__this = (VertexDataFormat_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VertexDataFormat_obj), true, "starling.rendering.VertexDataFormat"));
	*(void **)__this = VertexDataFormat_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VertexDataFormat_obj::VertexDataFormat_obj()
{
}

void VertexDataFormat_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexDataFormat);
	HX_MARK_MEMBER_NAME(_format,"_format");
	HX_MARK_MEMBER_NAME(_vertexSize,"_vertexSize");
	HX_MARK_MEMBER_NAME(_attributes,"_attributes");
	HX_MARK_MEMBER_NAME(attributes,"attributes");
	HX_MARK_MEMBER_NAME(formatString,"formatString");
	HX_MARK_MEMBER_NAME(vertexSize,"vertexSize");
	HX_MARK_MEMBER_NAME(vertexSizeIn32Bits,"vertexSizeIn32Bits");
	HX_MARK_MEMBER_NAME(numAttributes,"numAttributes");
	HX_MARK_END_CLASS();
}

void VertexDataFormat_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_format,"_format");
	HX_VISIT_MEMBER_NAME(_vertexSize,"_vertexSize");
	HX_VISIT_MEMBER_NAME(_attributes,"_attributes");
	HX_VISIT_MEMBER_NAME(attributes,"attributes");
	HX_VISIT_MEMBER_NAME(formatString,"formatString");
	HX_VISIT_MEMBER_NAME(vertexSize,"vertexSize");
	HX_VISIT_MEMBER_NAME(vertexSizeIn32Bits,"vertexSizeIn32Bits");
	HX_VISIT_MEMBER_NAME(numAttributes,"numAttributes");
}

hx::Val VertexDataFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"extend") ) { return hx::Val( extend_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { return hx::Val( _format ); }
		if (HX_FIELD_EQ(inName,"getSize") ) { return hx::Val( getSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getOffset") ) { return hx::Val( getOffset_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFormat") ) { return hx::Val( getFormat_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attributes") ) { return hx::Val( inCallProp == hx::paccAlways ? get_attributes() : attributes ); }
		if (HX_FIELD_EQ(inName,"vertexSize") ) { return hx::Val( inCallProp == hx::paccAlways ? get_vertexSize() : vertexSize ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_vertexSize") ) { return hx::Val( _vertexSize ); }
		if (HX_FIELD_EQ(inName,"_attributes") ) { return hx::Val( _attributes ); }
		if (HX_FIELD_EQ(inName,"parseFormat") ) { return hx::Val( parseFormat_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hasAttribute") ) { return hx::Val( hasAttribute_dyn() ); }
		if (HX_FIELD_EQ(inName,"getAttribute") ) { return hx::Val( getAttribute_dyn() ); }
		if (HX_FIELD_EQ(inName,"formatString") ) { return hx::Val( inCallProp == hx::paccAlways ? get_formatString() : formatString ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"numAttributes") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numAttributes() : numAttributes ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_attributes") ) { return hx::Val( get_attributes_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vertexSize") ) { return hx::Val( get_vertexSize_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getSizeIn32Bits") ) { return hx::Val( getSizeIn32Bits_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_formatString") ) { return hx::Val( get_formatString_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getOffsetIn32Bits") ) { return hx::Val( getOffsetIn32Bits_dyn() ); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return hx::Val( setVertexBufferAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numAttributes") ) { return hx::Val( get_numAttributes_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vertexSizeIn32Bits") ) { return hx::Val( inCallProp == hx::paccAlways ? get_vertexSizeIn32Bits() : vertexSizeIn32Bits ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_vertexSizeIn32Bits") ) { return hx::Val( get_vertexSizeIn32Bits_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool VertexDataFormat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sFormats") ) { outValue = ( sFormats ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

hx::Val VertexDataFormat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_format") ) { _format=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attributes") ) { attributes=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vertexSize") ) { vertexSize=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_vertexSize") ) { _vertexSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_attributes") ) { _attributes=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"formatString") ) { formatString=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"numAttributes") ) { numAttributes=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vertexSizeIn32Bits") ) { vertexSizeIn32Bits=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool VertexDataFormat_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sFormats") ) { sFormats=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void VertexDataFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"));
	outFields->push(HX_HCSTRING("_vertexSize","\x64","\xf7","\x99","\xaf"));
	outFields->push(HX_HCSTRING("_attributes","\xf6","\x75","\xfb","\x69"));
	outFields->push(HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97"));
	outFields->push(HX_HCSTRING("formatString","\x68","\xef","\x44","\x4e"));
	outFields->push(HX_HCSTRING("vertexSize","\x45","\x2a","\x10","\xdd"));
	outFields->push(HX_HCSTRING("vertexSizeIn32Bits","\x4f","\x98","\x23","\x6b"));
	outFields->push(HX_HCSTRING("numAttributes","\xbd","\x5e","\x09","\x72"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VertexDataFormat_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(VertexDataFormat_obj,_format),HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c")},
	{hx::fsInt,(int)offsetof(VertexDataFormat_obj,_vertexSize),HX_HCSTRING("_vertexSize","\x64","\xf7","\x99","\xaf")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(VertexDataFormat_obj,_attributes),HX_HCSTRING("_attributes","\xf6","\x75","\xfb","\x69")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(VertexDataFormat_obj,attributes),HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97")},
	{hx::fsString,(int)offsetof(VertexDataFormat_obj,formatString),HX_HCSTRING("formatString","\x68","\xef","\x44","\x4e")},
	{hx::fsInt,(int)offsetof(VertexDataFormat_obj,vertexSize),HX_HCSTRING("vertexSize","\x45","\x2a","\x10","\xdd")},
	{hx::fsInt,(int)offsetof(VertexDataFormat_obj,vertexSizeIn32Bits),HX_HCSTRING("vertexSizeIn32Bits","\x4f","\x98","\x23","\x6b")},
	{hx::fsInt,(int)offsetof(VertexDataFormat_obj,numAttributes),HX_HCSTRING("numAttributes","\xbd","\x5e","\x09","\x72")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo VertexDataFormat_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &VertexDataFormat_obj::sFormats,HX_HCSTRING("sFormats","\x29","\x2d","\x29","\x5e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String VertexDataFormat_obj_sMemberFields[] = {
	HX_HCSTRING("_format","\xd6","\xa0","\x05","\x6c"),
	HX_HCSTRING("_vertexSize","\x64","\xf7","\x99","\xaf"),
	HX_HCSTRING("_attributes","\xf6","\x75","\xfb","\x69"),
	HX_HCSTRING("extend","\xda","\xd1","\x1a","\xc7"),
	HX_HCSTRING("getSize","\x77","\x50","\xd6","\x1e"),
	HX_HCSTRING("getSizeIn32Bits","\x81","\x40","\xa6","\xeb"),
	HX_HCSTRING("getOffset","\xc9","\x20","\x96","\xdc"),
	HX_HCSTRING("getOffsetIn32Bits","\xd3","\xb2","\x09","\xb7"),
	HX_HCSTRING("getFormat","\x6d","\x18","\xe5","\x79"),
	HX_HCSTRING("getName","\x01","\x22","\x82","\x1b"),
	HX_HCSTRING("hasAttribute","\x62","\x55","\x42","\x88"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("parseFormat","\xca","\x3b","\xcb","\x78"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("getAttribute","\xa6","\x0c","\x47","\x0a"),
	HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97"),
	HX_HCSTRING("get_attributes","\x20","\x31","\x67","\x0d"),
	HX_HCSTRING("formatString","\x68","\xef","\x44","\x4e"),
	HX_HCSTRING("get_formatString","\xf1","\xdb","\xe3","\x52"),
	HX_HCSTRING("vertexSize","\x45","\x2a","\x10","\xdd"),
	HX_HCSTRING("get_vertexSize","\x8e","\xb2","\x05","\x53"),
	HX_HCSTRING("vertexSizeIn32Bits","\x4f","\x98","\x23","\x6b"),
	HX_HCSTRING("get_vertexSizeIn32Bits","\x98","\x11","\xb8","\xc4"),
	HX_HCSTRING("numAttributes","\xbd","\x5e","\x09","\x72"),
	HX_HCSTRING("get_numAttributes","\x14","\x6a","\x79","\x78"),
	::String(null()) };

static void VertexDataFormat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VertexDataFormat_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(VertexDataFormat_obj::sFormats,"sFormats");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VertexDataFormat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VertexDataFormat_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(VertexDataFormat_obj::sFormats,"sFormats");
};

#endif

hx::Class VertexDataFormat_obj::__mClass;

static ::String VertexDataFormat_obj_sStaticFields[] = {
	HX_HCSTRING("sFormats","\x29","\x2d","\x29","\x5e"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	::String(null())
};

void VertexDataFormat_obj::__register()
{
	hx::Object *dummy = new VertexDataFormat_obj;
	VertexDataFormat_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.VertexDataFormat","\xed","\xea","\x4c","\x48");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VertexDataFormat_obj::__GetStatic;
	__mClass->mSetStaticField = &VertexDataFormat_obj::__SetStatic;
	__mClass->mMarkFunc = VertexDataFormat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(VertexDataFormat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VertexDataFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VertexDataFormat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VertexDataFormat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexDataFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexDataFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VertexDataFormat_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_962a7344827da2e7_53_boot)
HXDLIN(  53)		sFormats =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace starling
} // end namespace rendering
