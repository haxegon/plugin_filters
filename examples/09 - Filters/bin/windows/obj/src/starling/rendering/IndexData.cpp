// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_errors_EOFError
#include <openfl/errors/EOFError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IOError
#include <openfl/errors/IOError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_errors_MissingContextError
#include <starling/errors/MissingContextError.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_rendering_IndexData
#include <starling/rendering/IndexData.h>
#endif
#ifndef INCLUDED_starling_utils_StringUtil
#include <starling/utils/StringUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_99_new,"starling.rendering.IndexData","new",0x484b8ae6,"starling.rendering.IndexData.new","starling/rendering/IndexData.hx",99,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_108_clear,"starling.rendering.IndexData","clear",0x499b5993,"starling.rendering.IndexData.clear","starling/rendering/IndexData.hx",108,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_118_clone,"starling.rendering.IndexData","clone",0x49a2fb63,"starling.rendering.IndexData.clone","starling/rendering/IndexData.hx",118,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_140_copyTo,"starling.rendering.IndexData","copyTo",0xdfde39ca,"starling.rendering.IndexData.copyTo","starling/rendering/IndexData.hx",140,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_237_setIndex,"starling.rendering.IndexData","setIndex",0x39e163ca,"starling.rendering.IndexData.setIndex","starling/rendering/IndexData.hx",237,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_254_getIndex,"starling.rendering.IndexData","getIndex",0x8b840a56,"starling.rendering.IndexData.getIndex","starling/rendering/IndexData.hx",254,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_270_offsetIndices,"starling.rendering.IndexData","offsetIndices",0x909e9dda,"starling.rendering.IndexData.offsetIndices","starling/rendering/IndexData.hx",270,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_283_addTriangle,"starling.rendering.IndexData","addTriangle",0x26c0a68f,"starling.rendering.IndexData.addTriangle","starling/rendering/IndexData.hx",283,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_323_addQuad,"starling.rendering.IndexData","addQuad",0x4655f10e,"starling.rendering.IndexData.addQuad","starling/rendering/IndexData.hx",323,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_349_toVector,"starling.rendering.IndexData","toVector",0x2c34b858,"starling.rendering.IndexData.toVector","starling/rendering/IndexData.hx",349,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_365_toString,"starling.rendering.IndexData","toString",0xa6073066,"starling.rendering.IndexData.toString","starling/rendering/IndexData.hx",365,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_377_switchToGenericData,"starling.rendering.IndexData","switchToGenericData",0xf7d8ce18,"starling.rendering.IndexData.switchToGenericData","starling/rendering/IndexData.hx",377,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_398_ensureQuadDataCapacity,"starling.rendering.IndexData","ensureQuadDataCapacity",0x31fcc003,"starling.rendering.IndexData.ensureQuadDataCapacity","starling/rendering/IndexData.hx",398,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_441_createIndexBuffer,"starling.rendering.IndexData","createIndexBuffer",0xc046191c,"starling.rendering.IndexData.createIndexBuffer","starling/rendering/IndexData.hx",441,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_454_uploadToIndexBuffer,"starling.rendering.IndexData","uploadToIndexBuffer",0x4daba3bc,"starling.rendering.IndexData.uploadToIndexBuffer","starling/rendering/IndexData.hx",454,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_466_trim,"starling.rendering.IndexData","trim",0xfdcf179c,"starling.rendering.IndexData.trim","starling/rendering/IndexData.hx",466,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_490_get_numIndices,"starling.rendering.IndexData","get_numIndices",0xe6abf504,"starling.rendering.IndexData.get_numIndices","starling/rendering/IndexData.hx",490,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_492_set_numIndices,"starling.rendering.IndexData","set_numIndices",0x06cbdd78,"starling.rendering.IndexData.set_numIndices","starling/rendering/IndexData.hx",492,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_507_get_numTriangles,"starling.rendering.IndexData","get_numTriangles",0xca45cfc8,"starling.rendering.IndexData.get_numTriangles","starling/rendering/IndexData.hx",507,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_508_set_numTriangles,"starling.rendering.IndexData","set_numTriangles",0x2087bd3c,"starling.rendering.IndexData.set_numTriangles","starling/rendering/IndexData.hx",508,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_513_get_numQuads,"starling.rendering.IndexData","get_numQuads",0x134d0269,"starling.rendering.IndexData.get_numQuads","starling/rendering/IndexData.hx",513,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_514_set_numQuads,"starling.rendering.IndexData","set_numQuads",0x284625dd,"starling.rendering.IndexData.set_numQuads","starling/rendering/IndexData.hx",514,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_518_get_indexSizeInBytes,"starling.rendering.IndexData","get_indexSizeInBytes",0xabf27556,"starling.rendering.IndexData.get_indexSizeInBytes","starling/rendering/IndexData.hx",518,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_536_get_useQuadLayout,"starling.rendering.IndexData","get_useQuadLayout",0x77d87e55,"starling.rendering.IndexData.get_useQuadLayout","starling/rendering/IndexData.hx",536,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_538_set_useQuadLayout,"starling.rendering.IndexData","set_useQuadLayout",0x9b465661,"starling.rendering.IndexData.set_useQuadLayout","starling/rendering/IndexData.hx",538,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_557_get_rawData,"starling.rendering.IndexData","get_rawData",0xecb17ccf,"starling.rendering.IndexData.get_rawData","starling/rendering/IndexData.hx",557,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_422_getBasicQuadIndexAt,"starling.rendering.IndexData","getBasicQuadIndexAt",0x1e9721cc,"starling.rendering.IndexData.getBasicQuadIndexAt","starling/rendering/IndexData.hx",422,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_65_boot,"starling.rendering.IndexData","boot",0xf1e6feec,"starling.rendering.IndexData.boot","starling/rendering/IndexData.hx",65,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_73_boot,"starling.rendering.IndexData","boot",0xf1e6feec,"starling.rendering.IndexData.boot","starling/rendering/IndexData.hx",73,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_74_boot,"starling.rendering.IndexData","boot",0xf1e6feec,"starling.rendering.IndexData.boot","starling/rendering/IndexData.hx",74,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_77_boot,"starling.rendering.IndexData","boot",0xf1e6feec,"starling.rendering.IndexData.boot","starling/rendering/IndexData.hx",77,0xe545198c)
HX_LOCAL_STACK_FRAME(_hx_pos_bcade6763f0bdb7a_78_boot,"starling.rendering.IndexData","boot",0xf1e6feec,"starling.rendering.IndexData.boot","starling/rendering/IndexData.hx",78,0xe545198c)
namespace starling{
namespace rendering{

void IndexData_obj::__construct(hx::Null< int >  __o_initialCapacity){
int initialCapacity = __o_initialCapacity.Default(48);
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_99_new)
HXLINE( 100)		this->_numIndices = (int)0;
HXLINE( 101)		this->_initialCapacity = initialCapacity;
HXLINE( 102)		this->_useQuadLayout = true;
            	}

Dynamic IndexData_obj::__CreateEmpty() { return new IndexData_obj; }

void *IndexData_obj::_hx_vtable = 0;

Dynamic IndexData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IndexData_obj > _hx_result = new IndexData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool IndexData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x094a2938;
}

void IndexData_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_108_clear)
HXLINE( 109)		if (hx::IsNotNull( this->_rawData )) {
HXLINE( 110)			this->_rawData->clear();
            		}
HXLINE( 112)		this->_numIndices = (int)0;
HXLINE( 113)		this->_useQuadLayout = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,clear,(void))

 ::starling::rendering::IndexData IndexData_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_118_clone)
HXLINE( 119)		 ::starling::rendering::IndexData clone =  ::starling::rendering::IndexData_obj::__alloc( HX_CTX ,this->_numIndices);
HXLINE( 121)		if (!(this->_useQuadLayout)) {
HXLINE( 123)			clone->switchToGenericData();
HXLINE( 124)			clone->_rawData->writeBytes(this->_rawData,null(),null());
            		}
HXLINE( 127)		clone->_numIndices = this->_numIndices;
HXLINE( 128)		return clone;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,clone,return )

void IndexData_obj::copyTo( ::starling::rendering::IndexData target,hx::Null< int >  __o_targetIndexID,hx::Null< int >  __o_offset,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices){
int targetIndexID = __o_targetIndexID.Default(0);
int offset = __o_offset.Default(0);
int indexID = __o_indexID.Default(0);
int numIndices = __o_numIndices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_140_copyTo)
HXLINE( 141)		bool _hx_tmp;
HXDLIN( 141)		if ((numIndices >= (int)0)) {
HXLINE( 141)			_hx_tmp = ((indexID + numIndices) > this->_numIndices);
            		}
            		else {
HXLINE( 141)			_hx_tmp = true;
            		}
HXDLIN( 141)		if (_hx_tmp) {
HXLINE( 142)			numIndices = (this->_numIndices - indexID);
            		}
HXLINE( 144)		 ::openfl::utils::ByteArrayData sourceData;
HXDLIN( 144)		 ::openfl::utils::ByteArrayData targetData;
HXLINE( 145)		int newNumIndices = (targetIndexID + numIndices);
HXLINE( 147)		if ((target->_numIndices < newNumIndices)) {
HXLINE( 149)			target->_numIndices = newNumIndices;
HXLINE( 151)			if ((::starling::rendering::IndexData_obj::sQuadDataNumIndices < newNumIndices)) {
HXLINE( 152)				this->ensureQuadDataCapacity(newNumIndices);
            			}
            		}
HXLINE( 155)		if (this->_useQuadLayout) {
HXLINE( 157)			if (target->_useQuadLayout) {
HXLINE( 159)				bool keepsQuadLayout = true;
HXLINE( 160)				int distance = (targetIndexID - indexID);
HXLINE( 161)				int distanceInQuads = ::Std_obj::_hx_int(((Float)distance / (Float)(int)6));
HXLINE( 162)				int offsetInQuads = ::Std_obj::_hx_int(((Float)offset / (Float)(int)4));
HXLINE( 172)				bool _hx_tmp1;
HXDLIN( 172)				bool _hx_tmp2;
HXDLIN( 172)				if ((distanceInQuads == offsetInQuads)) {
HXLINE( 172)					_hx_tmp2 = (((int)offset & (int)(int)3) == (int)0);
            				}
            				else {
HXLINE( 172)					_hx_tmp2 = false;
            				}
HXDLIN( 172)				if (_hx_tmp2) {
HXLINE( 172)					_hx_tmp1 = ((distanceInQuads * (int)6) == distance);
            				}
            				else {
HXLINE( 172)					_hx_tmp1 = false;
            				}
HXDLIN( 172)				if (_hx_tmp1) {
HXLINE( 175)					keepsQuadLayout = true;
            				}
            				else {
HXLINE( 177)					if ((numIndices > (int)2)) {
HXLINE( 179)						keepsQuadLayout = false;
            					}
            					else {
HXLINE( 183)						int _g1 = (int)0;
HXDLIN( 183)						int _g = numIndices;
HXDLIN( 183)						while((_g1 < _g)){
HXLINE( 183)							_g1 = (_g1 + (int)1);
HXDLIN( 183)							int i = (_g1 - (int)1);
HXLINE( 184)							if (keepsQuadLayout) {
HXLINE( 185)								int a = (::starling::rendering::IndexData_obj::getBasicQuadIndexAt((indexID + i)) + offset);
HXDLIN( 185)								keepsQuadLayout = (a == ::starling::rendering::IndexData_obj::getBasicQuadIndexAt((targetIndexID + i)));
            							}
            							else {
HXLINE( 184)								keepsQuadLayout = false;
            							}
            						}
            					}
            				}
HXLINE( 189)				if (keepsQuadLayout) {
HXLINE( 189)					return;
            				}
            				else {
HXLINE( 190)					target->switchToGenericData();
            				}
            			}
HXLINE( 193)			sourceData = ::starling::rendering::IndexData_obj::sQuadData;
HXLINE( 194)			targetData = target->_rawData;
HXLINE( 196)			if ((((int)offset & (int)(int)3) == (int)0)) {
HXLINE( 198)				indexID = (indexID + ::Std_obj::_hx_int(((Float)((int)6 * offset) / (Float)(int)4)));
HXLINE( 199)				offset = (int)0;
HXLINE( 200)				this->ensureQuadDataCapacity((indexID + numIndices));
            			}
            		}
            		else {
HXLINE( 205)			if (target->_useQuadLayout) {
HXLINE( 206)				target->switchToGenericData();
            			}
HXLINE( 208)			sourceData = this->_rawData;
HXLINE( 209)			targetData = target->_rawData;
            		}
HXLINE( 212)		targetData->position = (targetIndexID * (int)2);
HXLINE( 214)		if ((offset == (int)0)) {
HXLINE( 215)			targetData->writeBytes(sourceData,(indexID * (int)2),(numIndices * (int)2));
            		}
            		else {
HXLINE( 218)			sourceData->position = (indexID * (int)2);
HXLINE( 221)			while((numIndices > (int)1)){
HXLINE( 223)				int indexAB = sourceData->readUnsignedInt();
HXLINE( 224)				int indexA = (hx::UShr(((int)indexAB & (int)(int)-65536),(int)16) + offset);
HXLINE( 225)				int indexB = (((int)indexAB & (int)(int)65535) + offset);
HXLINE( 226)				targetData->writeUnsignedInt(((int)((int)indexA << (int)(int)16) | (int)indexB));
HXLINE( 227)				numIndices = (numIndices - (int)2);
            			}
HXLINE( 230)			if ((numIndices != (int)0)) {
HXLINE( 231)				targetData->writeShort((sourceData->readUnsignedShort() + offset));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(IndexData_obj,copyTo,(void))

void IndexData_obj::setIndex(int indexID,int index){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_237_setIndex)
HXLINE( 238)		int _hx_tmp = this->_numIndices;
HXDLIN( 238)		if ((_hx_tmp < (indexID + (int)1))) {
HXLINE( 239)			this->set_numIndices((indexID + (int)1));
            		}
HXLINE( 241)		if (this->_useQuadLayout) {
HXLINE( 243)			if ((::starling::rendering::IndexData_obj::getBasicQuadIndexAt(indexID) == index)) {
HXLINE( 243)				return;
            			}
            			else {
HXLINE( 244)				this->switchToGenericData();
            			}
            		}
HXLINE( 247)		this->_rawData->position = (indexID * (int)2);
HXLINE( 248)		this->_rawData->writeShort(index);
            	}


HX_DEFINE_DYNAMIC_FUNC2(IndexData_obj,setIndex,(void))

int IndexData_obj::getIndex(int indexID){
            	HX_GC_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_254_getIndex)
HXDLIN( 254)		if (this->_useQuadLayout) {
HXLINE( 256)			if ((indexID < this->_numIndices)) {
HXLINE( 257)				return ::starling::rendering::IndexData_obj::getBasicQuadIndexAt(indexID);
            			}
            			else {
HXLINE( 259)				HX_STACK_DO_THROW( ::openfl::errors::EOFError_obj::__alloc( HX_CTX ));
            			}
            		}
            		else {
HXLINE( 263)			this->_rawData->position = (indexID * (int)2);
HXLINE( 264)			return this->_rawData->readUnsignedShort();
            		}
HXLINE( 254)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexData_obj,getIndex,return )

void IndexData_obj::offsetIndices(int offset,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices){
int indexID = __o_indexID.Default(0);
int numIndices = __o_numIndices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_270_offsetIndices)
HXLINE( 271)		bool _hx_tmp;
HXDLIN( 271)		if ((numIndices >= (int)0)) {
HXLINE( 271)			_hx_tmp = ((indexID + numIndices) > this->_numIndices);
            		}
            		else {
HXLINE( 271)			_hx_tmp = true;
            		}
HXDLIN( 271)		if (_hx_tmp) {
HXLINE( 272)			numIndices = (this->_numIndices - indexID);
            		}
HXLINE( 274)		int endIndex = (indexID + numIndices);
HXLINE( 276)		{
HXLINE( 276)			int _g1 = indexID;
HXDLIN( 276)			int _g = endIndex;
HXDLIN( 276)			while((_g1 < _g)){
HXLINE( 276)				_g1 = (_g1 + (int)1);
HXDLIN( 276)				int i = (_g1 - (int)1);
HXLINE( 277)				this->setIndex(i,(this->getIndex(i) + offset));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(IndexData_obj,offsetIndices,(void))

void IndexData_obj::addTriangle(int a,int b,int c){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_283_addTriangle)
HXLINE( 284)		if (this->_useQuadLayout) {
HXLINE( 286)			if ((a == ::starling::rendering::IndexData_obj::getBasicQuadIndexAt(this->_numIndices))) {
HXLINE( 288)				bool oddTriangleID = (((int)this->_numIndices & (int)(int)1) != (int)0);
HXLINE( 289)				bool evenTriangleID = !(oddTriangleID);
HXLINE( 291)				bool _hx_tmp;
HXDLIN( 291)				bool _hx_tmp1;
HXDLIN( 291)				bool _hx_tmp2;
HXDLIN( 291)				if (evenTriangleID) {
HXLINE( 291)					_hx_tmp2 = (b == (a + (int)1));
            				}
            				else {
HXLINE( 291)					_hx_tmp2 = false;
            				}
HXDLIN( 291)				if (_hx_tmp2) {
HXLINE( 291)					_hx_tmp1 = (c == (b + (int)1));
            				}
            				else {
HXLINE( 291)					_hx_tmp1 = false;
            				}
HXDLIN( 291)				if (!(_hx_tmp1)) {
HXLINE( 292)					bool _hx_tmp3;
HXDLIN( 292)					if (oddTriangleID) {
HXLINE( 292)						_hx_tmp3 = (c == (a + (int)1));
            					}
            					else {
HXLINE( 292)						_hx_tmp3 = false;
            					}
HXDLIN( 292)					if (_hx_tmp3) {
HXLINE( 291)						_hx_tmp = (b == (c + (int)1));
            					}
            					else {
HXLINE( 291)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 291)					_hx_tmp = true;
            				}
HXDLIN( 291)				if (_hx_tmp) {
HXLINE( 294)					 ::starling::rendering::IndexData _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 294)					_hx_tmp4->_numIndices = (_hx_tmp4->_numIndices + (int)3);
HXLINE( 295)					this->ensureQuadDataCapacity(this->_numIndices);
HXLINE( 296)					return;
            				}
            			}
HXLINE( 300)			this->switchToGenericData();
            		}
HXLINE( 303)		this->_rawData->position = (this->_numIndices * (int)2);
HXLINE( 304)		this->_rawData->writeShort(a);
HXLINE( 305)		this->_rawData->writeShort(b);
HXLINE( 306)		this->_rawData->writeShort(c);
HXLINE( 307)		 ::starling::rendering::IndexData _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 307)		_hx_tmp5->_numIndices = (_hx_tmp5->_numIndices + (int)3);
            	}


HX_DEFINE_DYNAMIC_FUNC3(IndexData_obj,addTriangle,(void))

void IndexData_obj::addQuad(int a,int b,int c,int d){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_323_addQuad)
HXLINE( 324)		if (this->_useQuadLayout) {
HXLINE( 326)			bool _hx_tmp;
HXDLIN( 326)			bool _hx_tmp1;
HXDLIN( 326)			bool _hx_tmp2;
HXDLIN( 326)			if ((a == ::starling::rendering::IndexData_obj::getBasicQuadIndexAt(this->_numIndices))) {
HXLINE( 326)				_hx_tmp2 = (b == (a + (int)1));
            			}
            			else {
HXLINE( 326)				_hx_tmp2 = false;
            			}
HXDLIN( 326)			if (_hx_tmp2) {
HXLINE( 326)				_hx_tmp1 = (c == (b + (int)1));
            			}
            			else {
HXLINE( 326)				_hx_tmp1 = false;
            			}
HXDLIN( 326)			if (_hx_tmp1) {
HXLINE( 326)				_hx_tmp = (d == (c + (int)1));
            			}
            			else {
HXLINE( 326)				_hx_tmp = false;
            			}
HXDLIN( 326)			if (_hx_tmp) {
HXLINE( 329)				 ::starling::rendering::IndexData _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 329)				_hx_tmp3->_numIndices = (_hx_tmp3->_numIndices + (int)6);
HXLINE( 330)				this->ensureQuadDataCapacity(this->_numIndices);
HXLINE( 331)				return;
            			}
            			else {
HXLINE( 333)				this->switchToGenericData();
            			}
            		}
HXLINE( 336)		this->_rawData->position = (this->_numIndices * (int)2);
HXLINE( 337)		this->_rawData->writeShort(a);
HXLINE( 338)		this->_rawData->writeShort(b);
HXLINE( 339)		this->_rawData->writeShort(c);
HXLINE( 340)		this->_rawData->writeShort(b);
HXLINE( 341)		this->_rawData->writeShort(d);
HXLINE( 342)		this->_rawData->writeShort(c);
HXLINE( 343)		 ::starling::rendering::IndexData _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 343)		_hx_tmp4->_numIndices = (_hx_tmp4->_numIndices + (int)6);
            	}


HX_DEFINE_DYNAMIC_FUNC4(IndexData_obj,addQuad,(void))

 ::openfl::_Vector::AbstractVector IndexData_obj::toVector( ::openfl::_Vector::AbstractVector out){
            	HX_GC_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_349_toVector)
HXLINE( 350)		if (hx::IsNull( out )) {
HXLINE( 350)			bool fixed = null();
HXDLIN( 350)			out =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,this->_numIndices,fixed,null()),null());
            		}
            		else {
HXLINE( 351)			::openfl::_Vector::IVector_obj::set_length(out->data,this->_numIndices);
            		}
HXLINE( 353)		 ::openfl::utils::ByteArrayData rawData;
HXDLIN( 353)		if (this->_useQuadLayout) {
HXLINE( 353)			rawData = ::starling::rendering::IndexData_obj::sQuadData;
            		}
            		else {
HXLINE( 353)			rawData = this->_rawData;
            		}
HXLINE( 354)		rawData->position = (int)0;
HXLINE( 356)		{
HXLINE( 356)			int _g1 = (int)0;
HXDLIN( 356)			int _g = this->_numIndices;
HXDLIN( 356)			while((_g1 < _g)){
HXLINE( 356)				_g1 = (_g1 + (int)1);
HXDLIN( 356)				int i = (_g1 - (int)1);
HXLINE( 357)				{
HXLINE( 357)					int value = rawData->readUnsignedShort();
HXDLIN( 357)					::openfl::_Vector::IVector_obj::set(out->data,i,value);
            				}
            			}
            		}
HXLINE( 359)		return out;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexData_obj,toVector,return )

::String IndexData_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_365_toString)
HXLINE( 367)		int string = this->_numIndices;
HXLINE( 366)		::String string1 = ::starling::utils::StringUtil_obj::format(HX_("[IndexData numIndices={0} indices=\"{1}\"]",cb,ee,f1,ab),::cpp::VirtualArray_obj::__new(2)->init(0,string)->init(1,::openfl::_Vector::IVector_obj::join(this->toVector(::starling::rendering::IndexData_obj::sVector)->data,HX_(",",2c,00,00,00))));
HXLINE( 369)		::openfl::_Vector::IVector_obj::set_length(::starling::rendering::IndexData_obj::sVector->data,(int)0);
HXLINE( 370)		return string1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,toString,return )

void IndexData_obj::switchToGenericData(){
            	HX_GC_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_377_switchToGenericData)
HXDLIN( 377)		if (this->_useQuadLayout) {
HXLINE( 379)			this->_useQuadLayout = false;
HXLINE( 381)			if (hx::IsNull( this->_rawData )) {
HXLINE( 383)				 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN( 383)				this->_rawData = this1;
HXLINE( 384)				this->_rawData->_hx___endian = (int)1;
HXLINE( 385)				 ::openfl::utils::ByteArrayData _hx_tmp = this->_rawData;
HXDLIN( 385)				::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(_hx_tmp,(this->_initialCapacity * (int)2));
HXLINE( 386)				 ::openfl::utils::ByteArrayData _hx_tmp1 = this->_rawData;
HXDLIN( 386)				::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(_hx_tmp1,(this->_numIndices * (int)2));
            			}
HXLINE( 389)			if ((this->_numIndices != (int)0)) {
HXLINE( 390)				 ::openfl::utils::ByteArrayData _hx_tmp2 = this->_rawData;
HXDLIN( 390)				 ::openfl::utils::ByteArrayData _hx_tmp3 = ::starling::rendering::IndexData_obj::sQuadData;
HXDLIN( 390)				_hx_tmp2->writeBytes(_hx_tmp3,(int)0,(this->_numIndices * (int)2));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,switchToGenericData,(void))

void IndexData_obj::ensureQuadDataCapacity(int numIndices){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_398_ensureQuadDataCapacity)
HXLINE( 399)		if ((::starling::rendering::IndexData_obj::sQuadDataNumIndices >= numIndices)) {
HXLINE( 399)			return;
            		}
HXLINE( 401)		int i;
HXLINE( 402)		int oldNumQuads = ::Std_obj::_hx_int(((Float)::starling::rendering::IndexData_obj::sQuadDataNumIndices / (Float)(int)6));
HXLINE( 403)		int newNumQuads = ::Math_obj::ceil(((Float)numIndices / (Float)(int)6));
HXLINE( 405)		::starling::rendering::IndexData_obj::sQuadData->_hx___endian = (int)1;
HXLINE( 406)		::starling::rendering::IndexData_obj::sQuadData->position = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(::starling::rendering::IndexData_obj::sQuadData);
HXLINE( 407)		::starling::rendering::IndexData_obj::sQuadDataNumIndices = (newNumQuads * (int)6);
HXLINE( 409)		{
HXLINE( 409)			int _g1 = oldNumQuads;
HXDLIN( 409)			int _g = newNumQuads;
HXDLIN( 409)			while((_g1 < _g)){
HXLINE( 409)				_g1 = (_g1 + (int)1);
HXDLIN( 409)				int i1 = (_g1 - (int)1);
HXLINE( 411)				 ::openfl::utils::ByteArrayData _hx_tmp = ::starling::rendering::IndexData_obj::sQuadData;
HXDLIN( 411)				_hx_tmp->writeShort(((int)4 * i1));
HXLINE( 412)				 ::openfl::utils::ByteArrayData _hx_tmp1 = ::starling::rendering::IndexData_obj::sQuadData;
HXDLIN( 412)				_hx_tmp1->writeShort((((int)4 * i1) + (int)1));
HXLINE( 413)				 ::openfl::utils::ByteArrayData _hx_tmp2 = ::starling::rendering::IndexData_obj::sQuadData;
HXDLIN( 413)				_hx_tmp2->writeShort((((int)4 * i1) + (int)2));
HXLINE( 414)				 ::openfl::utils::ByteArrayData _hx_tmp3 = ::starling::rendering::IndexData_obj::sQuadData;
HXDLIN( 414)				_hx_tmp3->writeShort((((int)4 * i1) + (int)1));
HXLINE( 415)				 ::openfl::utils::ByteArrayData _hx_tmp4 = ::starling::rendering::IndexData_obj::sQuadData;
HXDLIN( 415)				_hx_tmp4->writeShort((((int)4 * i1) + (int)3));
HXLINE( 416)				 ::openfl::utils::ByteArrayData _hx_tmp5 = ::starling::rendering::IndexData_obj::sQuadData;
HXDLIN( 416)				_hx_tmp5->writeShort((((int)4 * i1) + (int)2));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexData_obj,ensureQuadDataCapacity,(void))

 ::openfl::display3D::IndexBuffer3D IndexData_obj::createIndexBuffer(hx::Null< bool >  __o_upload,::String __o_bufferUsage){
bool upload = __o_upload.Default(false);
::String bufferUsage = __o_bufferUsage.Default(HX_HCSTRING("staticDraw","\xd2","\x23","\x1c","\xa4"));
            	HX_GC_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_441_createIndexBuffer)
HXLINE( 442)		 ::openfl::display3D::Context3D context = ::starling::core::Starling_obj::get_current()->get_context();
HXLINE( 443)		if (hx::IsNull( context )) {
HXLINE( 443)			HX_STACK_DO_THROW( ::starling::errors::MissingContextError_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 444)		if ((this->_numIndices == (int)0)) {
HXLINE( 444)			return null();
            		}
HXLINE( 446)		int buffer = this->_numIndices;
HXDLIN( 446)		 ::openfl::display3D::IndexBuffer3D buffer1 = context->createIndexBuffer(buffer,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::fromString(bufferUsage));
HXLINE( 448)		if (upload) {
HXLINE( 448)			this->uploadToIndexBuffer(buffer1,null(),null());
            		}
HXLINE( 449)		return buffer1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(IndexData_obj,createIndexBuffer,return )

void IndexData_obj::uploadToIndexBuffer( ::openfl::display3D::IndexBuffer3D buffer,hx::Null< int >  __o_indexID,hx::Null< int >  __o_numIndices){
int indexID = __o_indexID.Default(0);
int numIndices = __o_numIndices.Default(-1);
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_454_uploadToIndexBuffer)
HXLINE( 455)		bool _hx_tmp;
HXDLIN( 455)		if ((numIndices >= (int)0)) {
HXLINE( 455)			_hx_tmp = ((indexID + numIndices) > this->_numIndices);
            		}
            		else {
HXLINE( 455)			_hx_tmp = true;
            		}
HXDLIN( 455)		if (_hx_tmp) {
HXLINE( 456)			numIndices = (this->_numIndices - indexID);
            		}
HXLINE( 458)		if ((numIndices > (int)0)) {
HXLINE( 459)			buffer->uploadFromByteArray(this->get_rawData(),(int)0,indexID,numIndices);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(IndexData_obj,uploadToIndexBuffer,(void))

void IndexData_obj::trim(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_466_trim)
HXLINE( 467)		if (this->_useQuadLayout) {
HXLINE( 467)			return;
            		}
HXLINE( 469)		 ::openfl::utils::ByteArrayData _hx_tmp = ::starling::rendering::IndexData_obj::sTrimData;
HXDLIN( 469)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(_hx_tmp,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->_rawData));
HXLINE( 470)		::starling::rendering::IndexData_obj::sTrimData->position = (int)0;
HXLINE( 471)		::starling::rendering::IndexData_obj::sTrimData->writeBytes(this->_rawData,null(),null());
HXLINE( 473)		this->_rawData->clear();
HXLINE( 474)		 ::openfl::utils::ByteArrayData _hx_tmp1 = this->_rawData;
HXDLIN( 474)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(_hx_tmp1,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(::starling::rendering::IndexData_obj::sTrimData));
HXLINE( 475)		this->_rawData->writeBytes(::starling::rendering::IndexData_obj::sTrimData,null(),null());
HXLINE( 477)		::starling::rendering::IndexData_obj::sTrimData->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,trim,(void))

int IndexData_obj::get_numIndices(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_490_get_numIndices)
HXDLIN( 490)		return this->_numIndices;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,get_numIndices,return )

int IndexData_obj::set_numIndices(int value){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_492_set_numIndices)
HXLINE( 493)		if ((value != this->_numIndices)) {
HXLINE( 495)			if (this->_useQuadLayout) {
HXLINE( 495)				this->ensureQuadDataCapacity(value);
            			}
            			else {
HXLINE( 496)				 ::openfl::utils::ByteArrayData _hx_tmp = this->_rawData;
HXDLIN( 496)				::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(_hx_tmp,(value * (int)2));
            			}
HXLINE( 497)			if ((value == (int)0)) {
HXLINE( 497)				this->_useQuadLayout = true;
            			}
HXLINE( 499)			this->_numIndices = value;
            		}
HXLINE( 501)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexData_obj,set_numIndices,return )

int IndexData_obj::get_numTriangles(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_507_get_numTriangles)
HXDLIN( 507)		return ::Std_obj::_hx_int(((Float)this->_numIndices / (Float)(int)3));
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,get_numTriangles,return )

int IndexData_obj::set_numTriangles(int value){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_508_set_numTriangles)
HXDLIN( 508)		return this->set_numIndices((value * (int)3));
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexData_obj,set_numTriangles,return )

int IndexData_obj::get_numQuads(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_513_get_numQuads)
HXDLIN( 513)		return ::Std_obj::_hx_int(((Float)this->_numIndices / (Float)(int)6));
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,get_numQuads,return )

int IndexData_obj::set_numQuads(int value){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_514_set_numQuads)
HXDLIN( 514)		return this->set_numIndices((value * (int)6));
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexData_obj,set_numQuads,return )

int IndexData_obj::get_indexSizeInBytes(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_518_get_indexSizeInBytes)
HXDLIN( 518)		return (int)2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,get_indexSizeInBytes,return )

bool IndexData_obj::get_useQuadLayout(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_536_get_useQuadLayout)
HXDLIN( 536)		return this->_useQuadLayout;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,get_useQuadLayout,return )

bool IndexData_obj::set_useQuadLayout(bool value){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_538_set_useQuadLayout)
HXLINE( 539)		if ((value != this->_useQuadLayout)) {
HXLINE( 541)			if (value) {
HXLINE( 543)				this->ensureQuadDataCapacity(this->_numIndices);
HXLINE( 544)				::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(this->_rawData,(int)0);
HXLINE( 545)				this->_useQuadLayout = true;
            			}
            			else {
HXLINE( 547)				this->switchToGenericData();
            			}
            		}
HXLINE( 549)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexData_obj,set_useQuadLayout,return )

 ::openfl::utils::ByteArrayData IndexData_obj::get_rawData(){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_557_get_rawData)
HXDLIN( 557)		if (this->_useQuadLayout) {
HXDLIN( 557)			return ::starling::rendering::IndexData_obj::sQuadData;
            		}
            		else {
HXLINE( 558)			return this->_rawData;
            		}
HXLINE( 557)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexData_obj,get_rawData,return )

int IndexData_obj::INDEX_SIZE;

 ::openfl::utils::ByteArrayData IndexData_obj::sQuadData;

int IndexData_obj::sQuadDataNumIndices;

 ::openfl::_Vector::AbstractVector IndexData_obj::sVector;

 ::openfl::utils::ByteArrayData IndexData_obj::sTrimData;

int IndexData_obj::getBasicQuadIndexAt(int indexID){
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_422_getBasicQuadIndexAt)
HXLINE( 423)		int quadID = ::Std_obj::_hx_int(((Float)indexID / (Float)(int)6));
HXLINE( 424)		int posInQuad = ::Std_obj::_hx_int((indexID - (quadID * (int)6)));
HXLINE( 425)		int offset;
HXLINE( 427)		if ((posInQuad == (int)0)) {
HXLINE( 427)			offset = (int)0;
            		}
            		else {
HXLINE( 428)			bool _hx_tmp;
HXDLIN( 428)			if ((posInQuad != (int)1)) {
HXLINE( 428)				_hx_tmp = (posInQuad == (int)3);
            			}
            			else {
HXLINE( 428)				_hx_tmp = true;
            			}
HXDLIN( 428)			if (_hx_tmp) {
HXLINE( 428)				offset = (int)1;
            			}
            			else {
HXLINE( 429)				bool _hx_tmp1;
HXDLIN( 429)				if ((posInQuad != (int)2)) {
HXLINE( 429)					_hx_tmp1 = (posInQuad == (int)5);
            				}
            				else {
HXLINE( 429)					_hx_tmp1 = true;
            				}
HXDLIN( 429)				if (_hx_tmp1) {
HXLINE( 429)					offset = (int)2;
            				}
            				else {
HXLINE( 430)					offset = (int)3;
            				}
            			}
            		}
HXLINE( 432)		return ((quadID * (int)4) + offset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IndexData_obj,getBasicQuadIndexAt,return )


hx::ObjectPtr< IndexData_obj > IndexData_obj::__new(hx::Null< int >  __o_initialCapacity) {
	hx::ObjectPtr< IndexData_obj > __this = new IndexData_obj();
	__this->__construct(__o_initialCapacity);
	return __this;
}

hx::ObjectPtr< IndexData_obj > IndexData_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_initialCapacity) {
	IndexData_obj *__this = (IndexData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(IndexData_obj), true, "starling.rendering.IndexData"));
	*(void **)__this = IndexData_obj::_hx_vtable;
	__this->__construct(__o_initialCapacity);
	return __this;
}

IndexData_obj::IndexData_obj()
{
}

void IndexData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IndexData);
	HX_MARK_MEMBER_NAME(_rawData,"_rawData");
	HX_MARK_MEMBER_NAME(_numIndices,"_numIndices");
	HX_MARK_MEMBER_NAME(_initialCapacity,"_initialCapacity");
	HX_MARK_MEMBER_NAME(_useQuadLayout,"_useQuadLayout");
	HX_MARK_END_CLASS();
}

void IndexData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_rawData,"_rawData");
	HX_VISIT_MEMBER_NAME(_numIndices,"_numIndices");
	HX_VISIT_MEMBER_NAME(_initialCapacity,"_initialCapacity");
	HX_VISIT_MEMBER_NAME(_useQuadLayout,"_useQuadLayout");
}

hx::Val IndexData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"trim") ) { return hx::Val( trim_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"copyTo") ) { return hx::Val( copyTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addQuad") ) { return hx::Val( addQuad_dyn() ); }
		if (HX_FIELD_EQ(inName,"rawData") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_rawData() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_rawData") ) { return hx::Val( _rawData ); }
		if (HX_FIELD_EQ(inName,"setIndex") ) { return hx::Val( setIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIndex") ) { return hx::Val( getIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"toVector") ) { return hx::Val( toVector_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"numQuads") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numQuads() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numIndices") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numIndices() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_numIndices") ) { return hx::Val( _numIndices ); }
		if (HX_FIELD_EQ(inName,"addTriangle") ) { return hx::Val( addTriangle_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rawData") ) { return hx::Val( get_rawData_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"numTriangles") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numTriangles() ); }
		if (HX_FIELD_EQ(inName,"get_numQuads") ) { return hx::Val( get_numQuads_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_numQuads") ) { return hx::Val( set_numQuads_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"offsetIndices") ) { return hx::Val( offsetIndices_dyn() ); }
		if (HX_FIELD_EQ(inName,"useQuadLayout") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_useQuadLayout() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_useQuadLayout") ) { return hx::Val( _useQuadLayout ); }
		if (HX_FIELD_EQ(inName,"get_numIndices") ) { return hx::Val( get_numIndices_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_numIndices") ) { return hx::Val( set_numIndices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_initialCapacity") ) { return hx::Val( _initialCapacity ); }
		if (HX_FIELD_EQ(inName,"get_numTriangles") ) { return hx::Val( get_numTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_numTriangles") ) { return hx::Val( set_numTriangles_dyn() ); }
		if (HX_FIELD_EQ(inName,"indexSizeInBytes") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_indexSizeInBytes() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return hx::Val( createIndexBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_useQuadLayout") ) { return hx::Val( get_useQuadLayout_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_useQuadLayout") ) { return hx::Val( set_useQuadLayout_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"switchToGenericData") ) { return hx::Val( switchToGenericData_dyn() ); }
		if (HX_FIELD_EQ(inName,"uploadToIndexBuffer") ) { return hx::Val( uploadToIndexBuffer_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_indexSizeInBytes") ) { return hx::Val( get_indexSizeInBytes_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"ensureQuadDataCapacity") ) { return hx::Val( ensureQuadDataCapacity_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool IndexData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sVector") ) { outValue = ( sVector ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sQuadData") ) { outValue = ( sQuadData ); return true; }
		if (HX_FIELD_EQ(inName,"sTrimData") ) { outValue = ( sTrimData ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sQuadDataNumIndices") ) { outValue = ( sQuadDataNumIndices ); return true; }
		if (HX_FIELD_EQ(inName,"getBasicQuadIndexAt") ) { outValue = getBasicQuadIndexAt_dyn(); return true; }
	}
	return false;
}

hx::Val IndexData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_rawData") ) { _rawData=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numQuads") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_numQuads(inValue.Cast< int >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"numIndices") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_numIndices(inValue.Cast< int >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_numIndices") ) { _numIndices=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"numTriangles") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_numTriangles(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"useQuadLayout") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_useQuadLayout(inValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_useQuadLayout") ) { _useQuadLayout=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_initialCapacity") ) { _initialCapacity=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool IndexData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sVector") ) { sVector=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sQuadData") ) { sQuadData=ioValue.Cast<  ::openfl::utils::ByteArrayData >(); return true; }
		if (HX_FIELD_EQ(inName,"sTrimData") ) { sTrimData=ioValue.Cast<  ::openfl::utils::ByteArrayData >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sQuadDataNumIndices") ) { sQuadDataNumIndices=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void IndexData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_rawData","\xb3","\xc5","\xd0","\x38"));
	outFields->push(HX_HCSTRING("_numIndices","\xa0","\x52","\xfe","\xe5"));
	outFields->push(HX_HCSTRING("_initialCapacity","\x5f","\x34","\xf5","\x65"));
	outFields->push(HX_HCSTRING("_useQuadLayout","\x39","\x8a","\xbb","\x37"));
	outFields->push(HX_HCSTRING("numIndices","\x81","\x85","\x74","\x13"));
	outFields->push(HX_HCSTRING("numTriangles","\x85","\x39","\xb1","\x26"));
	outFields->push(HX_HCSTRING("numQuads","\xa6","\x89","\xf7","\x1a"));
	outFields->push(HX_HCSTRING("indexSizeInBytes","\x93","\x01","\x82","\xff"));
	outFields->push(HX_HCSTRING("useQuadLayout","\xf8","\x99","\x69","\xf9"));
	outFields->push(HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IndexData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(IndexData_obj,_rawData),HX_HCSTRING("_rawData","\xb3","\xc5","\xd0","\x38")},
	{hx::fsInt,(int)offsetof(IndexData_obj,_numIndices),HX_HCSTRING("_numIndices","\xa0","\x52","\xfe","\xe5")},
	{hx::fsInt,(int)offsetof(IndexData_obj,_initialCapacity),HX_HCSTRING("_initialCapacity","\x5f","\x34","\xf5","\x65")},
	{hx::fsBool,(int)offsetof(IndexData_obj,_useQuadLayout),HX_HCSTRING("_useQuadLayout","\x39","\x8a","\xbb","\x37")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo IndexData_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &IndexData_obj::INDEX_SIZE,HX_HCSTRING("INDEX_SIZE","\x6e","\xc4","\x06","\x9b")},
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(void *) &IndexData_obj::sQuadData,HX_HCSTRING("sQuadData","\x24","\x12","\xa4","\x66")},
	{hx::fsInt,(void *) &IndexData_obj::sQuadDataNumIndices,HX_HCSTRING("sQuadDataNumIndices","\xc5","\x30","\x9b","\x68")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &IndexData_obj::sVector,HX_HCSTRING("sVector","\x96","\x7d","\x16","\x7a")},
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(void *) &IndexData_obj::sTrimData,HX_HCSTRING("sTrimData","\xbf","\x1f","\xf1","\xf6")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String IndexData_obj_sMemberFields[] = {
	HX_HCSTRING("_rawData","\xb3","\xc5","\xd0","\x38"),
	HX_HCSTRING("_numIndices","\xa0","\x52","\xfe","\xe5"),
	HX_HCSTRING("_initialCapacity","\x5f","\x34","\xf5","\x65"),
	HX_HCSTRING("_useQuadLayout","\x39","\x8a","\xbb","\x37"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyTo","\x90","\x1c","\x33","\xc9"),
	HX_HCSTRING("setIndex","\x10","\x04","\x49","\xcc"),
	HX_HCSTRING("getIndex","\x9c","\xaa","\xeb","\x1d"),
	HX_HCSTRING("offsetIndices","\xd4","\x3f","\x8e","\xff"),
	HX_HCSTRING("addTriangle","\x09","\xf6","\x21","\xbf"),
	HX_HCSTRING("addQuad","\x88","\x7b","\x47","\x87"),
	HX_HCSTRING("toVector","\x9e","\x58","\x9c","\xbe"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("switchToGenericData","\x92","\x27","\xad","\x5f"),
	HX_HCSTRING("ensureQuadDataCapacity","\xc9","\x0e","\x4a","\x8b"),
	HX_HCSTRING("createIndexBuffer","\x16","\x40","\x47","\x48"),
	HX_HCSTRING("uploadToIndexBuffer","\x36","\xfd","\x7f","\xb5"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("get_numIndices","\xca","\x0d","\x6a","\x89"),
	HX_HCSTRING("set_numIndices","\x3e","\xf6","\x89","\xa9"),
	HX_HCSTRING("get_numTriangles","\x0e","\x26","\x50","\x2b"),
	HX_HCSTRING("set_numTriangles","\x82","\x13","\x92","\x81"),
	HX_HCSTRING("get_numQuads","\xaf","\x3d","\x11","\xd0"),
	HX_HCSTRING("set_numQuads","\x23","\x61","\x0a","\xe5"),
	HX_HCSTRING("get_indexSizeInBytes","\x9c","\x66","\xec","\x1d"),
	HX_HCSTRING("get_useQuadLayout","\x4f","\xa5","\xd9","\xff"),
	HX_HCSTRING("set_useQuadLayout","\x5b","\x7d","\x47","\x23"),
	HX_HCSTRING("get_rawData","\x49","\xcc","\x12","\x85"),
	::String(null()) };

static void IndexData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IndexData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(IndexData_obj::INDEX_SIZE,"INDEX_SIZE");
	HX_MARK_MEMBER_NAME(IndexData_obj::sQuadData,"sQuadData");
	HX_MARK_MEMBER_NAME(IndexData_obj::sQuadDataNumIndices,"sQuadDataNumIndices");
	HX_MARK_MEMBER_NAME(IndexData_obj::sVector,"sVector");
	HX_MARK_MEMBER_NAME(IndexData_obj::sTrimData,"sTrimData");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IndexData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IndexData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(IndexData_obj::INDEX_SIZE,"INDEX_SIZE");
	HX_VISIT_MEMBER_NAME(IndexData_obj::sQuadData,"sQuadData");
	HX_VISIT_MEMBER_NAME(IndexData_obj::sQuadDataNumIndices,"sQuadDataNumIndices");
	HX_VISIT_MEMBER_NAME(IndexData_obj::sVector,"sVector");
	HX_VISIT_MEMBER_NAME(IndexData_obj::sTrimData,"sTrimData");
};

#endif

hx::Class IndexData_obj::__mClass;

static ::String IndexData_obj_sStaticFields[] = {
	HX_HCSTRING("INDEX_SIZE","\x6e","\xc4","\x06","\x9b"),
	HX_HCSTRING("sQuadData","\x24","\x12","\xa4","\x66"),
	HX_HCSTRING("sQuadDataNumIndices","\xc5","\x30","\x9b","\x68"),
	HX_HCSTRING("sVector","\x96","\x7d","\x16","\x7a"),
	HX_HCSTRING("sTrimData","\xbf","\x1f","\xf1","\xf6"),
	HX_HCSTRING("getBasicQuadIndexAt","\x46","\x7b","\x6b","\x86"),
	::String(null())
};

void IndexData_obj::__register()
{
	hx::Object *dummy = new IndexData_obj;
	IndexData_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.rendering.IndexData","\xf4","\xdf","\x6e","\x01");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IndexData_obj::__GetStatic;
	__mClass->mSetStaticField = &IndexData_obj::__SetStatic;
	__mClass->mMarkFunc = IndexData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(IndexData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IndexData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IndexData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IndexData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IndexData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IndexData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void IndexData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_65_boot)
HXDLIN(  65)		INDEX_SIZE = (int)2;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_73_boot)
HXDLIN(  73)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(  73)			return this1;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_73_boot)
HXDLIN(  73)		sQuadData =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_74_boot)
HXDLIN(  74)		sQuadDataNumIndices = (int)0;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_77_boot)
HXDLIN(  77)			int length = null();
HXDLIN(  77)			bool fixed = null();
HXDLIN(  77)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_77_boot)
HXDLIN(  77)		sVector =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_78_boot)
HXDLIN(  78)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,(int)0);
HXDLIN(  78)			return this1;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_bcade6763f0bdb7a_78_boot)
HXDLIN(  78)		sTrimData =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace starling
} // end namespace rendering
