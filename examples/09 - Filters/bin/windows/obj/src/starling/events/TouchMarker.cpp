// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IShaderDrawable
#include <openfl/display/IShaderDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_events_TouchMarker
#include <starling/events/TouchMarker.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_29_new,"starling.events.TouchMarker","new",0xed1cf7bc,"starling.events.TouchMarker.new","starling/events/TouchMarker.hx",29,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_46_dispose,"starling.events.TouchMarker","dispose",0xda1285fb,"starling.events.TouchMarker.dispose","starling/events/TouchMarker.hx",46,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_52_moveMarker,"starling.events.TouchMarker","moveMarker",0x7679abcf,"starling.events.TouchMarker.moveMarker","starling/events/TouchMarker.hx",52,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_66_moveCenter,"starling.events.TouchMarker","moveCenter",0xc1e45bea,"starling.events.TouchMarker.moveCenter","starling/events/TouchMarker.hx",66,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_73_createTexture,"starling.events.TouchMarker","createTexture",0xdb72139b,"starling.events.TouchMarker.createTexture","starling/events/TouchMarker.hx",73,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_98_get_realMarker,"starling.events.TouchMarker","get_realMarker",0xe6e33625,"starling.events.TouchMarker.get_realMarker","starling/events/TouchMarker.hx",98,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_100_get_mockMarker,"starling.events.TouchMarker","get_mockMarker",0xabac6651,"starling.events.TouchMarker.get_mockMarker","starling/events/TouchMarker.hx",100,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_103_get_realX,"starling.events.TouchMarker","get_realX",0x0abb17ed,"starling.events.TouchMarker.get_realX","starling/events/TouchMarker.hx",103,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_105_get_realY,"starling.events.TouchMarker","get_realY",0x0abb17ee,"starling.events.TouchMarker.get_realY","starling/events/TouchMarker.hx",105,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_108_get_mockX,"starling.events.TouchMarker","get_mockX",0x3057d741,"starling.events.TouchMarker.get_mockX","starling/events/TouchMarker.hx",108,0x767a3d54)
HX_LOCAL_STACK_FRAME(_hx_pos_fd8eaa6e8425d4a1_110_get_mockY,"starling.events.TouchMarker","get_mockY",0x3057d742,"starling.events.TouchMarker.get_mockY","starling/events/TouchMarker.hx",110,0x767a3d54)
namespace starling{
namespace events{

void TouchMarker_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_29_new)
HXLINE(  30)		super::__construct();
HXLINE(  32)		this->_hx___center =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  33)		this->_hx___texture = this->createTexture();
HXLINE(  35)		{
HXLINE(  35)			int _g = (int)0;
HXDLIN(  35)			while((_g < (int)2)){
HXLINE(  35)				_g = (_g + (int)1);
HXDLIN(  35)				int i = (_g - (int)1);
HXLINE(  37)				 ::starling::display::Image marker =  ::starling::display::Image_obj::__alloc( HX_CTX ,this->_hx___texture);
HXLINE(  38)				marker->set_pivotX(((Float)this->_hx___texture->get_width() / (Float)(int)2));
HXLINE(  39)				marker->set_pivotY(((Float)this->_hx___texture->get_height() / (Float)(int)2));
HXLINE(  40)				marker->set_touchable(false);
HXLINE(  41)				this->addChild(marker);
            			}
            		}
            	}

Dynamic TouchMarker_obj::__CreateEmpty() { return new TouchMarker_obj; }

void *TouchMarker_obj::_hx_vtable = 0;

Dynamic TouchMarker_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TouchMarker_obj > _hx_result = new TouchMarker_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TouchMarker_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x31a4bcfa) {
		if (inClassId<=(int)0x25137bc0) {
			if (inClassId<=(int)0x11572528) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x11572528;
			} else {
				return inClassId==(int)0x25137bc0;
			}
		} else {
			return inClassId==(int)0x31a4bcfa;
		}
	} else {
		return inClassId==(int)0x478fd1bb || inClassId==(int)0x6dea180f;
	}
}

void TouchMarker_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_46_dispose)
HXLINE(  47)		this->_hx___texture->dispose();
HXLINE(  48)		this->super::dispose();
            	}


void TouchMarker_obj::moveMarker(Float x,Float y,hx::Null< bool >  __o_withCenter){
bool withCenter = __o_withCenter.Default(false);
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_52_moveMarker)
HXLINE(  53)		if (withCenter) {
HXLINE(  55)			 ::openfl::geom::Point _hx_tmp = this->_hx___center;
HXDLIN(  55)			Float _hx_tmp1 = _hx_tmp->x;
HXDLIN(  55)			_hx_tmp->x = (_hx_tmp1 + (x - this->get_realMarker()->get_x()));
HXLINE(  56)			 ::openfl::geom::Point _hx_tmp2 = this->_hx___center;
HXDLIN(  56)			Float _hx_tmp3 = _hx_tmp2->y;
HXDLIN(  56)			_hx_tmp2->y = (_hx_tmp3 + (y - this->get_realMarker()->get_y()));
            		}
HXLINE(  59)		this->get_realMarker()->set_x(x);
HXLINE(  60)		this->get_realMarker()->set_y(y);
HXLINE(  61)		 ::starling::display::Image _hx_tmp4 = this->get_mockMarker();
HXDLIN(  61)		_hx_tmp4->set_x((((int)2 * this->_hx___center->x) - x));
HXLINE(  62)		 ::starling::display::Image _hx_tmp5 = this->get_mockMarker();
HXDLIN(  62)		_hx_tmp5->set_y((((int)2 * this->_hx___center->y) - y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(TouchMarker_obj,moveMarker,(void))

void TouchMarker_obj::moveCenter(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_66_moveCenter)
HXLINE(  67)		this->_hx___center->x = x;
HXLINE(  68)		this->_hx___center->y = y;
HXLINE(  69)		Float _hx_tmp = this->get_realX();
HXDLIN(  69)		this->moveMarker(_hx_tmp,this->get_realY(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(TouchMarker_obj,moveCenter,(void))

 ::starling::textures::Texture TouchMarker_obj::createTexture(){
            	HX_GC_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_73_createTexture)
HXLINE(  74)		Float scale = ::starling::core::Starling_obj::get_current()->get_contentScaleFactor();
HXLINE(  75)		Float radius = ((int)12 * scale);
HXLINE(  76)		int width = ::Std_obj::_hx_int(((int)32 * scale));
HXLINE(  77)		int height = ::Std_obj::_hx_int(((int)32 * scale));
HXLINE(  78)		Float thickness = (((Float)1.5) * scale);
HXLINE(  79)		 ::openfl::display::Shape shape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE(  82)		shape->get_graphics()->lineStyle(thickness,(int)0,((Float)0.3),null(),null(),null(),null(),null());
HXLINE(  83)		 ::openfl::display::Graphics _hx_tmp = shape->get_graphics();
HXDLIN(  83)		_hx_tmp->drawCircle(((Float)width / (Float)(int)2),((Float)height / (Float)(int)2),(radius + thickness));
HXLINE(  86)		shape->get_graphics()->beginFill((int)16777215,((Float)0.4));
HXLINE(  87)		shape->get_graphics()->lineStyle(thickness,(int)16777215,null(),null(),null(),null(),null(),null());
HXLINE(  88)		 ::openfl::display::Graphics _hx_tmp1 = shape->get_graphics();
HXDLIN(  88)		_hx_tmp1->drawCircle(((Float)width / (Float)(int)2),((Float)height / (Float)(int)2),radius);
HXLINE(  89)		shape->get_graphics()->endFill();
HXLINE(  91)		 ::openfl::display::BitmapData bmpData =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,(int)0);
HXLINE(  92)		bmpData->draw(shape,null(),null(),null(),null(),null());
HXLINE(  94)		return ::starling::textures::Texture_obj::fromBitmapData(bmpData,false,false,scale,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchMarker_obj,createTexture,return )

 ::starling::display::Image TouchMarker_obj::get_realMarker(){
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_98_get_realMarker)
HXDLIN(  98)		return hx::TCast<  ::starling::display::Image >::cast(this->getChildAt((int)0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchMarker_obj,get_realMarker,return )

 ::starling::display::Image TouchMarker_obj::get_mockMarker(){
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_100_get_mockMarker)
HXDLIN( 100)		return hx::TCast<  ::starling::display::Image >::cast(this->getChildAt((int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchMarker_obj,get_mockMarker,return )

Float TouchMarker_obj::get_realX(){
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_103_get_realX)
HXDLIN( 103)		return this->get_realMarker()->get_x();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchMarker_obj,get_realX,return )

Float TouchMarker_obj::get_realY(){
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_105_get_realY)
HXDLIN( 105)		return this->get_realMarker()->get_y();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchMarker_obj,get_realY,return )

Float TouchMarker_obj::get_mockX(){
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_108_get_mockX)
HXDLIN( 108)		return this->get_mockMarker()->get_x();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchMarker_obj,get_mockX,return )

Float TouchMarker_obj::get_mockY(){
            	HX_STACKFRAME(&_hx_pos_fd8eaa6e8425d4a1_110_get_mockY)
HXDLIN( 110)		return this->get_mockMarker()->get_y();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchMarker_obj,get_mockY,return )


hx::ObjectPtr< TouchMarker_obj > TouchMarker_obj::__new() {
	hx::ObjectPtr< TouchMarker_obj > __this = new TouchMarker_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TouchMarker_obj > TouchMarker_obj::__alloc(hx::Ctx *_hx_ctx) {
	TouchMarker_obj *__this = (TouchMarker_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TouchMarker_obj), true, "starling.events.TouchMarker"));
	*(void **)__this = TouchMarker_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TouchMarker_obj::TouchMarker_obj()
{
}

void TouchMarker_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TouchMarker);
	HX_MARK_MEMBER_NAME(_hx___center,"__center");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	 ::starling::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TouchMarker_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___center,"__center");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	 ::starling::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TouchMarker_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"realX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_realX() ); }
		if (HX_FIELD_EQ(inName,"realY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_realY() ); }
		if (HX_FIELD_EQ(inName,"mockX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mockX() ); }
		if (HX_FIELD_EQ(inName,"mockY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mockY() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__center") ) { return hx::Val( _hx___center ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"get_realX") ) { return hx::Val( get_realX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_realY") ) { return hx::Val( get_realY_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mockX") ) { return hx::Val( get_mockX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mockY") ) { return hx::Val( get_mockY_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"moveMarker") ) { return hx::Val( moveMarker_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCenter") ) { return hx::Val( moveCenter_dyn() ); }
		if (HX_FIELD_EQ(inName,"realMarker") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_realMarker() ); }
		if (HX_FIELD_EQ(inName,"mockMarker") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mockMarker() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_realMarker") ) { return hx::Val( get_realMarker_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mockMarker") ) { return hx::Val( get_mockMarker_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TouchMarker_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__center") ) { _hx___center=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::starling::textures::Texture >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TouchMarker_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__center","\xf5","\x90","\x0a","\xae"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("realMarker","\xb8","\x0f","\x98","\x00"));
	outFields->push(HX_HCSTRING("mockMarker","\xe4","\x3f","\x61","\xc5"));
	outFields->push(HX_HCSTRING("realX","\x3a","\xa7","\xba","\xe6"));
	outFields->push(HX_HCSTRING("realY","\x3b","\xa7","\xba","\xe6"));
	outFields->push(HX_HCSTRING("mockX","\x8e","\x66","\x57","\x0c"));
	outFields->push(HX_HCSTRING("mockY","\x8f","\x66","\x57","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TouchMarker_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(TouchMarker_obj,_hx___center),HX_HCSTRING("__center","\xf5","\x90","\x0a","\xae")},
	{hx::fsObject /*::starling::textures::Texture*/ ,(int)offsetof(TouchMarker_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TouchMarker_obj_sStaticStorageInfo = 0;
#endif

static ::String TouchMarker_obj_sMemberFields[] = {
	HX_HCSTRING("__center","\xf5","\x90","\x0a","\xae"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("moveMarker","\xab","\xef","\x9e","\x0a"),
	HX_HCSTRING("moveCenter","\xc6","\x9f","\x09","\x56"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("get_realMarker","\x01","\x98","\x8d","\x76"),
	HX_HCSTRING("get_mockMarker","\x2d","\xc8","\x56","\x3b"),
	HX_HCSTRING("get_realX","\x91","\x03","\x64","\x2a"),
	HX_HCSTRING("get_realY","\x92","\x03","\x64","\x2a"),
	HX_HCSTRING("get_mockX","\xe5","\xc2","\x00","\x50"),
	HX_HCSTRING("get_mockY","\xe6","\xc2","\x00","\x50"),
	::String(null()) };

static void TouchMarker_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TouchMarker_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TouchMarker_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TouchMarker_obj::__mClass,"__mClass");
};

#endif

hx::Class TouchMarker_obj::__mClass;

void TouchMarker_obj::__register()
{
	hx::Object *dummy = new TouchMarker_obj;
	TouchMarker_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.events.TouchMarker","\xca","\xa9","\xe7","\x47");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TouchMarker_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TouchMarker_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TouchMarker_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TouchMarker_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TouchMarker_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TouchMarker_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace starling
} // end namespace events
