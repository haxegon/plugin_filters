// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_starling_events_EnterFrameEvent
#include <starling/events/EnterFrameEvent.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2a22a055a22caa7e_28_new,"starling.events.EnterFrameEvent","new",0xdf215b48,"starling.events.EnterFrameEvent.new","starling/events/EnterFrameEvent.hx",28,0xd46d1f48)
HX_LOCAL_STACK_FRAME(_hx_pos_2a22a055a22caa7e_33_get_passedTime,"starling.events.EnterFrameEvent","get_passedTime",0x82a9d9fe,"starling.events.EnterFrameEvent.get_passedTime","starling/events/EnterFrameEvent.hx",33,0xd46d1f48)
HX_LOCAL_STACK_FRAME(_hx_pos_2a22a055a22caa7e_23_boot,"starling.events.EnterFrameEvent","boot",0x5627844a,"starling.events.EnterFrameEvent.boot","starling/events/EnterFrameEvent.hx",23,0xd46d1f48)
namespace starling{
namespace events{

void EnterFrameEvent_obj::__construct(::String type,Float passedTime,hx::Null< bool >  __o_bubbles){
bool bubbles = __o_bubbles.Default(false);
            	HX_STACKFRAME(&_hx_pos_2a22a055a22caa7e_28_new)
HXDLIN(  28)		super::__construct(type,bubbles,passedTime);
            	}

Dynamic EnterFrameEvent_obj::__CreateEmpty() { return new EnterFrameEvent_obj; }

void *EnterFrameEvent_obj::_hx_vtable = 0;

Dynamic EnterFrameEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EnterFrameEvent_obj > _hx_result = new EnterFrameEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool EnterFrameEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x16674b7c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x16674b7c;
	} else {
		return inClassId==(int)0x1e772cb9;
	}
}

Float EnterFrameEvent_obj::get_passedTime(){
            	HX_STACKFRAME(&_hx_pos_2a22a055a22caa7e_33_get_passedTime)
HXDLIN(  33)		return ( (Float)(this->data) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(EnterFrameEvent_obj,get_passedTime,return )

::String EnterFrameEvent_obj::ENTER_FRAME;


hx::ObjectPtr< EnterFrameEvent_obj > EnterFrameEvent_obj::__new(::String type,Float passedTime,hx::Null< bool >  __o_bubbles) {
	hx::ObjectPtr< EnterFrameEvent_obj > __this = new EnterFrameEvent_obj();
	__this->__construct(type,passedTime,__o_bubbles);
	return __this;
}

hx::ObjectPtr< EnterFrameEvent_obj > EnterFrameEvent_obj::__alloc(hx::Ctx *_hx_ctx,::String type,Float passedTime,hx::Null< bool >  __o_bubbles) {
	EnterFrameEvent_obj *__this = (EnterFrameEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EnterFrameEvent_obj), true, "starling.events.EnterFrameEvent"));
	*(void **)__this = EnterFrameEvent_obj::_hx_vtable;
	__this->__construct(type,passedTime,__o_bubbles);
	return __this;
}

EnterFrameEvent_obj::EnterFrameEvent_obj()
{
}

hx::Val EnterFrameEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"passedTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_passedTime() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_passedTime") ) { return hx::Val( get_passedTime_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void EnterFrameEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("passedTime","\x9d","\x43","\xce","\x9b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *EnterFrameEvent_obj_sMemberStorageInfo = 0;
static hx::StaticInfo EnterFrameEvent_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &EnterFrameEvent_obj::ENTER_FRAME,HX_HCSTRING("ENTER_FRAME","\x46","\xa6","\xab","\xc6")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String EnterFrameEvent_obj_sMemberFields[] = {
	HX_HCSTRING("get_passedTime","\xe6","\xcb","\xc3","\x11"),
	::String(null()) };

static void EnterFrameEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EnterFrameEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(EnterFrameEvent_obj::ENTER_FRAME,"ENTER_FRAME");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EnterFrameEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EnterFrameEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(EnterFrameEvent_obj::ENTER_FRAME,"ENTER_FRAME");
};

#endif

hx::Class EnterFrameEvent_obj::__mClass;

static ::String EnterFrameEvent_obj_sStaticFields[] = {
	HX_HCSTRING("ENTER_FRAME","\x46","\xa6","\xab","\xc6"),
	::String(null())
};

void EnterFrameEvent_obj::__register()
{
	hx::Object *dummy = new EnterFrameEvent_obj;
	EnterFrameEvent_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.events.EnterFrameEvent","\x56","\x57","\x78","\x43");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EnterFrameEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(EnterFrameEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EnterFrameEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EnterFrameEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EnterFrameEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnterFrameEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnterFrameEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EnterFrameEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2a22a055a22caa7e_23_boot)
HXDLIN(  23)		ENTER_FRAME = HX_("enterFrame",f5,03,50,02);
            	}
}

} // end namespace starling
} // end namespace events
