// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_FunctionVector
#include <openfl/_Vector/FunctionVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_errors_ArgumentError
#include <openfl/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_890157334b0bf745_37_new,"starling.events.EventDispatcher","new",0x50b907c4,"starling.events.EventDispatcher.new","starling/events/EventDispatcher.hx",37,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_51_addEventListener,"starling.events.EventDispatcher","addEventListener",0xce7d05e9,"starling.events.EventDispatcher.addEventListener","starling/events/EventDispatcher.hx",51,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_77_removeEventListener,"starling.events.EventDispatcher","removeEventListener",0x0936c72e,"starling.events.EventDispatcher.removeEventListener","starling/events/EventDispatcher.hx",77,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_113_removeEventListeners,"starling.events.EventDispatcher","removeEventListeners",0x06b78185,"starling.events.EventDispatcher.removeEventListeners","starling/events/EventDispatcher.hx",113,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_124_dispatchEvent,"starling.events.EventDispatcher","dispatchEvent",0x86f6a364,"starling.events.EventDispatcher.dispatchEvent","starling/events/EventDispatcher.hx",124,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_147___invokeEvent,"starling.events.EventDispatcher","__invokeEvent",0x58dfcac6,"starling.events.EventDispatcher.__invokeEvent","starling/events/EventDispatcher.hx",147,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_196___bubbleEvent,"starling.events.EventDispatcher","__bubbleEvent",0xdbfd9a32,"starling.events.EventDispatcher.__bubbleEvent","starling/events/EventDispatcher.hx",196,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_230_dispatchEventWith,"starling.events.EventDispatcher","dispatchEventWith",0x5867c78a,"starling.events.EventDispatcher.dispatchEventWith","starling/events/EventDispatcher.hx",230,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_242_hasEventListener,"starling.events.EventDispatcher","hasEventListener",0xea032910,"starling.events.EventDispatcher.hasEventListener","starling/events/EventDispatcher.hx",242,0x993d964c)
HX_LOCAL_STACK_FRAME(_hx_pos_890157334b0bf745_43_boot,"starling.events.EventDispatcher","boot",0x4946c44e,"starling.events.EventDispatcher.boot","starling/events/EventDispatcher.hx",43,0x993d964c)
namespace starling{
namespace events{

void EventDispatcher_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_890157334b0bf745_37_new)
HXLINE(  40)		int length = null();
HXDLIN(  40)		bool fixed = null();
HXDLIN(  40)		this->_hx___eventStack =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            	}

Dynamic EventDispatcher_obj::__CreateEmpty() { return new EventDispatcher_obj; }

void *EventDispatcher_obj::_hx_vtable = 0;

Dynamic EventDispatcher_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EventDispatcher_obj > _hx_result = new EventDispatcher_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EventDispatcher_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x25137bc0;
}

void EventDispatcher_obj::addEventListener(::String type, ::Dynamic listener){
            	HX_GC_STACKFRAME(&_hx_pos_890157334b0bf745_51_addEventListener)
HXLINE(  52)		if (hx::IsNull( listener )) {
HXLINE(  52)			HX_STACK_DO_THROW( ::openfl::errors::ArgumentError_obj::__alloc( HX_CTX ,HX_("null listener added",8d,f9,07,a3)));
            		}
HXLINE(  54)		if (hx::IsNull( this->_hx___eventListeners )) {
HXLINE(  55)			this->_hx___eventListeners =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE(  57)		 ::openfl::_Vector::AbstractVector listeners = this->_hx___eventListeners->get(type).StaticCast<  ::openfl::_Vector::AbstractVector >();
HXLINE(  58)		if (hx::IsNull( listeners )) {
HXLINE(  60)			{
HXLINE(  60)				::Dynamic this1 = this->_hx___eventListeners;
HXDLIN(  60)				int length = null();
HXDLIN(  60)				bool fixed = null();
HXDLIN(  60)				 ::openfl::_Vector::AbstractVector v =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::FunctionVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXDLIN(  60)				( ( ::haxe::ds::StringMap)(this1) )->set(type,v);
            			}
HXLINE(  61)			::openfl::_Vector::IVector_obj::push(this->_hx___eventListeners->get(type).StaticCast<  ::openfl::_Vector::AbstractVector >()->data,listener);
            		}
            		else {
HXLINE(  65)			{
HXLINE(  65)				int _g1 = (int)0;
HXDLIN(  65)				int _g = ::openfl::_Vector::IVector_obj::get_length(listeners->data);
HXDLIN(  65)				while((_g1 < _g)){
HXLINE(  65)					_g1 = (_g1 + (int)1);
HXDLIN(  65)					int i = (_g1 - (int)1);
HXLINE(  67)					if (::Reflect_obj::compareMethods(::openfl::_Vector::IVector_obj::get(listeners->data,i),listener)) {
HXLINE(  68)						return;
            					}
            				}
            			}
HXLINE(  70)			{
HXLINE(  70)				int index = ::openfl::_Vector::IVector_obj::get_length(listeners->data);
HXDLIN(  70)				::openfl::_Vector::IVector_obj::set(listeners->data,index,listener);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(EventDispatcher_obj,addEventListener,(void))

void EventDispatcher_obj::removeEventListener(::String type, ::Dynamic listener){
            	HX_GC_STACKFRAME(&_hx_pos_890157334b0bf745_77_removeEventListener)
HXDLIN(  77)		if (hx::IsNotNull( this->_hx___eventListeners )) {
HXLINE(  79)			 ::openfl::_Vector::AbstractVector listeners = this->_hx___eventListeners->get(type).StaticCast<  ::openfl::_Vector::AbstractVector >();
HXLINE(  80)			int numListeners;
HXDLIN(  80)			if (hx::IsNotNull( listeners )) {
HXLINE(  80)				numListeners = ::openfl::_Vector::IVector_obj::get_length(listeners->data);
            			}
            			else {
HXLINE(  80)				numListeners = (int)0;
            			}
HXLINE(  82)			if ((numListeners > (int)0)) {
HXLINE(  87)				int index = ::openfl::_Vector::IVector_obj::indexOf(listeners->data,listener,(int)0);
HXLINE(  89)				if ((index != (int)-1)) {
HXLINE(  91)					if ((::openfl::_Vector::IVector_obj::indexOf(this->_hx___eventStack->data,type,(int)0) == (int)-1)) {
HXLINE(  93)						::openfl::_Vector::IVector_obj::removeAt(listeners->data,index);
            					}
            					else {
HXLINE(  97)						 ::openfl::_Vector::AbstractVector restListeners =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX ,::openfl::_Vector::IVector_obj::slice(listeners->data,(int)0,index),null());
HXLINE(  99)						{
HXLINE(  99)							int _g1 = (index + (int)1);
HXDLIN(  99)							int _g = numListeners;
HXDLIN(  99)							while((_g1 < _g)){
HXLINE(  99)								_g1 = (_g1 + (int)1);
HXDLIN(  99)								int i = (_g1 - (int)1);
HXLINE( 100)								{
HXLINE( 100)									 ::Dynamic value = ::openfl::_Vector::IVector_obj::get(listeners->data,i);
HXDLIN( 100)									::Dynamic restListeners1 = restListeners->data;
HXDLIN( 100)									::openfl::_Vector::IVector_obj::set(restListeners1,(i - (int)1),value);
            								}
            							}
            						}
HXLINE( 102)						this->_hx___eventListeners->set(type,restListeners);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(EventDispatcher_obj,removeEventListener,(void))

void EventDispatcher_obj::removeEventListeners(::String type){
            	HX_STACKFRAME(&_hx_pos_890157334b0bf745_113_removeEventListeners)
HXDLIN( 113)		bool _hx_tmp;
HXDLIN( 113)		if (hx::IsNotNull( type )) {
HXDLIN( 113)			_hx_tmp = hx::IsNotNull( this->_hx___eventListeners );
            		}
            		else {
HXDLIN( 113)			_hx_tmp = false;
            		}
HXDLIN( 113)		if (_hx_tmp) {
HXLINE( 114)			this->_hx___eventListeners->remove(type);
            		}
            		else {
HXLINE( 116)			this->_hx___eventListeners = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventDispatcher_obj,removeEventListeners,(void))

void EventDispatcher_obj::dispatchEvent( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_890157334b0bf745_124_dispatchEvent)
HXLINE( 125)		bool bubbles = event->bubbles;
HXLINE( 127)		bool _hx_tmp;
HXDLIN( 127)		if (!(bubbles)) {
HXLINE( 127)			if (hx::IsNotNull( this->_hx___eventListeners )) {
HXLINE( 127)				_hx_tmp = !(this->_hx___eventListeners->exists(event->type));
            			}
            			else {
HXLINE( 127)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 127)			_hx_tmp = false;
            		}
HXDLIN( 127)		if (_hx_tmp) {
HXLINE( 128)			return;
            		}
HXLINE( 133)		 ::starling::events::EventDispatcher previousTarget = event->target;
HXLINE( 134)		event->setTarget(hx::ObjectPtr<OBJ_>(this));
HXLINE( 136)		bool _hx_tmp1;
HXDLIN( 136)		if (bubbles) {
HXLINE( 136)			_hx_tmp1 = ::Std_obj::is(hx::ObjectPtr<OBJ_>(this),hx::ClassOf< ::starling::display::DisplayObject >());
            		}
            		else {
HXLINE( 136)			_hx_tmp1 = false;
            		}
HXDLIN( 136)		if (_hx_tmp1) {
HXLINE( 136)			this->_hx___bubbleEvent(event);
            		}
            		else {
HXLINE( 137)			this->_hx___invokeEvent(event);
            		}
HXLINE( 139)		if (hx::IsNotNull( previousTarget )) {
HXLINE( 139)			event->setTarget(previousTarget);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventDispatcher_obj,dispatchEvent,(void))

bool EventDispatcher_obj::_hx___invokeEvent( ::starling::events::Event event){
            	HX_STACKFRAME(&_hx_pos_890157334b0bf745_147___invokeEvent)
HXLINE( 148)		 ::openfl::_Vector::AbstractVector listeners;
HXDLIN( 148)		if (hx::IsNotNull( this->_hx___eventListeners )) {
HXLINE( 148)			listeners = this->_hx___eventListeners->get(event->type).StaticCast<  ::openfl::_Vector::AbstractVector >();
            		}
            		else {
HXLINE( 148)			listeners = null();
            		}
HXLINE( 150)		int numListeners;
HXDLIN( 150)		if (hx::IsNull( listeners )) {
HXLINE( 150)			numListeners = (int)0;
            		}
            		else {
HXLINE( 150)			numListeners = ::openfl::_Vector::IVector_obj::get_length(listeners->data);
            		}
HXLINE( 152)		if ((numListeners != (int)0)) {
HXLINE( 154)			event->setCurrentTarget(hx::ObjectPtr<OBJ_>(this));
HXLINE( 155)			{
HXLINE( 155)				 ::openfl::_Vector::AbstractVector this1 = this->_hx___eventStack;
HXDLIN( 155)				int index = ::openfl::_Vector::IVector_obj::get_length(this->_hx___eventStack->data);
HXDLIN( 155)				::openfl::_Vector::IVector_obj::set(this1->data,index,event->type);
            			}
HXLINE( 161)			{
HXLINE( 161)				int _g1 = (int)0;
HXDLIN( 161)				int _g = numListeners;
HXDLIN( 161)				while((_g1 < _g)){
HXLINE( 161)					_g1 = (_g1 + (int)1);
HXDLIN( 161)					int i = (_g1 - (int)1);
HXLINE( 163)					 ::Dynamic listener = ::openfl::_Vector::IVector_obj::get(listeners->data,i);
HXLINE( 164)					if (hx::IsNull( listener )) {
HXLINE( 164)						continue;
            					}
HXLINE( 171)					int numArgs = ( (int)(listener->__ArgCount()) );
HXLINE( 176)					if ((numArgs == (int)0)) {
HXLINE( 176)						listener();
            					}
            					else {
HXLINE( 177)						if ((numArgs == (int)1)) {
HXLINE( 177)							listener(event);
            						}
            						else {
HXLINE( 178)							listener(event,event->data);
            						}
            					}
HXLINE( 180)					if (event->stopsImmediatePropagation) {
HXLINE( 181)						return true;
            					}
            				}
            			}
HXLINE( 184)			::openfl::_Vector::IVector_obj::pop(this->_hx___eventStack->data);
HXLINE( 186)			return event->stopsPropagation;
            		}
            		else {
HXLINE( 190)			return false;
            		}
HXLINE( 152)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventDispatcher_obj,_hx___invokeEvent,return )

void EventDispatcher_obj::_hx___bubbleEvent( ::starling::events::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_890157334b0bf745_196___bubbleEvent)
HXLINE( 200)		 ::openfl::_Vector::AbstractVector chain;
HXLINE( 201)		 ::starling::display::DisplayObject element = hx::TCast<  ::starling::display::DisplayObject >::cast(hx::ObjectPtr<OBJ_>(this));
HXLINE( 202)		int length = (int)1;
HXLINE( 204)		if ((::starling::events::EventDispatcher_obj::sBubbleChains->length > (int)0)) {
HXLINE( 204)			chain = ::starling::events::EventDispatcher_obj::sBubbleChains->pop().StaticCast<  ::openfl::_Vector::AbstractVector >();
HXDLIN( 204)			::openfl::_Vector::IVector_obj::set(chain->data,(int)0,element);
            		}
            		else {
HXLINE( 207)			int length1 = null();
HXDLIN( 207)			bool fixed = null();
HXDLIN( 207)			chain =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length1,fixed,null()),null());
HXLINE( 208)			::openfl::_Vector::IVector_obj::push(chain->data,element);
            		}
HXLINE( 211)		while(true){
HXLINE( 211)			element = element->get_parent();
HXDLIN( 211)			if (!(hx::IsNotNull( element ))) {
HXLINE( 211)				goto _hx_goto_9;
            			}
HXLINE( 212)			length = (length + (int)1);
HXDLIN( 212)			::openfl::_Vector::IVector_obj::set(chain->data,(length - (int)1),element);
            		}
            		_hx_goto_9:;
HXLINE( 214)		{
HXLINE( 214)			int _g1 = (int)0;
HXDLIN( 214)			int _g = length;
HXDLIN( 214)			while((_g1 < _g)){
HXLINE( 214)				_g1 = (_g1 + (int)1);
HXDLIN( 214)				int i = (_g1 - (int)1);
HXLINE( 216)				if (hx::IsNull( ( ( ::starling::events::EventDispatcher)(::openfl::_Vector::IVector_obj::get(chain->data,i)) ) )) {
HXLINE( 216)					continue;
            				}
HXLINE( 217)				bool stopPropagation = ( ( ::starling::events::EventDispatcher)(::openfl::_Vector::IVector_obj::get(chain->data,i)) )->_hx___invokeEvent(event);
HXLINE( 218)				if (stopPropagation) {
HXLINE( 218)					goto _hx_goto_10;
            				}
            			}
            			_hx_goto_10:;
            		}
HXLINE( 221)		::openfl::_Vector::IVector_obj::set_length(chain->data,(int)0);
HXLINE( 222)		::starling::events::EventDispatcher_obj::sBubbleChains[::starling::events::EventDispatcher_obj::sBubbleChains->length] = chain;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventDispatcher_obj,_hx___bubbleEvent,(void))

void EventDispatcher_obj::dispatchEventWith(::String type,hx::Null< bool >  __o_bubbles, ::Dynamic data){
bool bubbles = __o_bubbles.Default(false);
            	HX_STACKFRAME(&_hx_pos_890157334b0bf745_230_dispatchEventWith)
HXDLIN( 230)		bool _hx_tmp;
HXDLIN( 230)		if (!(bubbles)) {
HXDLIN( 230)			_hx_tmp = this->hasEventListener(type,null());
            		}
            		else {
HXDLIN( 230)			_hx_tmp = true;
            		}
HXDLIN( 230)		if (_hx_tmp) {
HXLINE( 232)			 ::starling::events::Event event = ::starling::events::Event_obj::fromPool(type,bubbles,data);
HXLINE( 233)			this->dispatchEvent(event);
HXLINE( 234)			::starling::events::Event_obj::toPool(event);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(EventDispatcher_obj,dispatchEventWith,(void))

bool EventDispatcher_obj::hasEventListener(::String type, ::Dynamic listener){
            	HX_STACKFRAME(&_hx_pos_890157334b0bf745_242_hasEventListener)
HXLINE( 243)		 ::openfl::_Vector::AbstractVector listeners;
HXDLIN( 243)		if (hx::IsNotNull( this->_hx___eventListeners )) {
HXLINE( 243)			listeners = this->_hx___eventListeners->get(type).StaticCast<  ::openfl::_Vector::AbstractVector >();
            		}
            		else {
HXLINE( 243)			listeners = null();
            		}
HXLINE( 244)		if (hx::IsNull( listeners )) {
HXLINE( 244)			return false;
            		}
            		else {
HXLINE( 247)			if (hx::IsNotNull( listener )) {
HXLINE( 247)				return (::openfl::_Vector::IVector_obj::indexOf(listeners->data,listener,(int)0) != (int)-1);
            			}
            			else {
HXLINE( 248)				return (::openfl::_Vector::IVector_obj::get_length(listeners->data) != (int)0);
            			}
            		}
HXLINE( 244)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(EventDispatcher_obj,hasEventListener,return )

::Array< ::Dynamic> EventDispatcher_obj::sBubbleChains;


hx::ObjectPtr< EventDispatcher_obj > EventDispatcher_obj::__new() {
	hx::ObjectPtr< EventDispatcher_obj > __this = new EventDispatcher_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< EventDispatcher_obj > EventDispatcher_obj::__alloc(hx::Ctx *_hx_ctx) {
	EventDispatcher_obj *__this = (EventDispatcher_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(EventDispatcher_obj), true, "starling.events.EventDispatcher"));
	*(void **)__this = EventDispatcher_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

EventDispatcher_obj::EventDispatcher_obj()
{
}

void EventDispatcher_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EventDispatcher);
	HX_MARK_MEMBER_NAME(_hx___eventListeners,"__eventListeners");
	HX_MARK_MEMBER_NAME(_hx___eventStack,"__eventStack");
	HX_MARK_END_CLASS();
}

void EventDispatcher_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___eventListeners,"__eventListeners");
	HX_VISIT_MEMBER_NAME(_hx___eventStack,"__eventStack");
}

hx::Val EventDispatcher_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__eventStack") ) { return hx::Val( _hx___eventStack ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return hx::Val( dispatchEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__invokeEvent") ) { return hx::Val( _hx___invokeEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"__bubbleEvent") ) { return hx::Val( _hx___bubbleEvent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__eventListeners") ) { return hx::Val( _hx___eventListeners ); }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasEventListener") ) { return hx::Val( hasEventListener_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"dispatchEventWith") ) { return hx::Val( dispatchEventWith_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return hx::Val( removeEventListener_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"removeEventListeners") ) { return hx::Val( removeEventListeners_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EventDispatcher_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"sBubbleChains") ) { outValue = ( sBubbleChains ); return true; }
	}
	return false;
}

hx::Val EventDispatcher_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__eventStack") ) { _hx___eventStack=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__eventListeners") ) { _hx___eventListeners=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool EventDispatcher_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"sBubbleChains") ) { sBubbleChains=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void EventDispatcher_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__eventListeners","\x25","\x35","\x93","\x30"));
	outFields->push(HX_HCSTRING("__eventStack","\xee","\xeb","\xf9","\x38"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EventDispatcher_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(EventDispatcher_obj,_hx___eventListeners),HX_HCSTRING("__eventListeners","\x25","\x35","\x93","\x30")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(EventDispatcher_obj,_hx___eventStack),HX_HCSTRING("__eventStack","\xee","\xeb","\xf9","\x38")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo EventDispatcher_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &EventDispatcher_obj::sBubbleChains,HX_HCSTRING("sBubbleChains","\x11","\xfe","\xa8","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String EventDispatcher_obj_sMemberFields[] = {
	HX_HCSTRING("__eventListeners","\x25","\x35","\x93","\x30"),
	HX_HCSTRING("__eventStack","\xee","\xeb","\xf9","\x38"),
	HX_HCSTRING("addEventListener","\xcd","\x0b","\x64","\xf1"),
	HX_HCSTRING("removeEventListener","\xca","\x87","\x75","\x55"),
	HX_HCSTRING("removeEventListeners","\x69","\x49","\x61","\x71"),
	HX_HCSTRING("dispatchEvent","\x00","\xc7","\x64","\xc6"),
	HX_HCSTRING("__invokeEvent","\x62","\xee","\x4d","\x98"),
	HX_HCSTRING("__bubbleEvent","\xce","\xbd","\x6b","\x1b"),
	HX_HCSTRING("dispatchEventWith","\x26","\xe9","\xa5","\xbf"),
	HX_HCSTRING("hasEventListener","\xf4","\x2e","\xea","\x0c"),
	::String(null()) };

static void EventDispatcher_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EventDispatcher_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(EventDispatcher_obj::sBubbleChains,"sBubbleChains");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EventDispatcher_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EventDispatcher_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(EventDispatcher_obj::sBubbleChains,"sBubbleChains");
};

#endif

hx::Class EventDispatcher_obj::__mClass;

static ::String EventDispatcher_obj_sStaticFields[] = {
	HX_HCSTRING("sBubbleChains","\x11","\xfe","\xa8","\x00"),
	::String(null())
};

void EventDispatcher_obj::__register()
{
	hx::Object *dummy = new EventDispatcher_obj;
	EventDispatcher_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.events.EventDispatcher","\xd2","\x15","\x29","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EventDispatcher_obj::__GetStatic;
	__mClass->mSetStaticField = &EventDispatcher_obj::__SetStatic;
	__mClass->mMarkFunc = EventDispatcher_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(EventDispatcher_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EventDispatcher_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EventDispatcher_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EventDispatcher_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EventDispatcher_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EventDispatcher_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EventDispatcher_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_890157334b0bf745_43_boot)
HXDLIN(  43)		sBubbleChains = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace starling
} // end namespace events
