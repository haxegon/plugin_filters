// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_AbstractVector
#include <openfl/_Vector/AbstractVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_events_KeyboardEvent
#include <starling/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_starling_events_Touch
#include <starling/events/Touch.h>
#endif
#ifndef INCLUDED_starling_events_TouchEvent
#include <starling/events/TouchEvent.h>
#endif
#ifndef INCLUDED_starling_events_TouchMarker
#include <starling/events/TouchMarker.h>
#endif
#ifndef INCLUDED_starling_events_TouchProcessor
#include <starling/events/TouchProcessor.h>
#endif
#ifndef INCLUDED_starling_utils_MathUtil
#include <starling/utils/MathUtil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_55_new,"starling.events.TouchProcessor","new",0xb783dd34,"starling.events.TouchProcessor.new","starling/events/TouchProcessor.hx",55,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_99_dispose,"starling.events.TouchProcessor","dispose",0xaa658773,"starling.events.TouchProcessor.dispose","starling/events/TouchProcessor.hx",99,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_109_advanceTime,"starling.events.TouchProcessor","advanceTime",0x13a46a83,"starling.events.TouchProcessor.advanceTime","starling/events/TouchProcessor.hx",109,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_191_processTouches,"starling.events.TouchProcessor","processTouches",0x2dd09aea,"starling.events.TouchProcessor.processTouches","starling/events/TouchProcessor.hx",191,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_234_enqueue,"starling.events.TouchProcessor","enqueue",0xb03d1f5c,"starling.events.TouchProcessor.enqueue","starling/events/TouchProcessor.hx",234,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_252_enqueueMouseLeftStage,"starling.events.TouchProcessor","enqueueMouseLeftStage",0x98e212ce,"starling.events.TouchProcessor.enqueueMouseLeftStage","starling/events/TouchProcessor.hx",252,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_280_cancelTouches,"starling.events.TouchProcessor","cancelTouches",0x588f3967,"starling.events.TouchProcessor.cancelTouches","starling/events/TouchProcessor.hx",280,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_307_createOrUpdateTouch,"starling.events.TouchProcessor","createOrUpdateTouch",0x3afc84cb,"starling.events.TouchProcessor.createOrUpdateTouch","starling/events/TouchProcessor.hx",307,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_331_updateTapCount,"starling.events.TouchProcessor","updateTapCount",0x29ab0241,"starling.events.TouchProcessor.updateTapCount","starling/events/TouchProcessor.hx",331,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_360_addCurrentTouch,"starling.events.TouchProcessor","addCurrentTouch",0x6a08635b,"starling.events.TouchProcessor.addCurrentTouch","starling/events/TouchProcessor.hx",360,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_373_getCurrentTouch,"starling.events.TouchProcessor","getCurrentTouch",0x06a34d50,"starling.events.TouchProcessor.getCurrentTouch","starling/events/TouchProcessor.hx",373,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_381_containsTouchWithID,"starling.events.TouchProcessor","containsTouchWithID",0xd8fee175,"starling.events.TouchProcessor.containsTouchWithID","starling/events/TouchProcessor.hx",381,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_393_get_simulateMultitouch,"starling.events.TouchProcessor","get_simulateMultitouch",0xbbd0e85f,"starling.events.TouchProcessor.get_simulateMultitouch","starling/events/TouchProcessor.hx",393,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_403_set_simulateMultitouch,"starling.events.TouchProcessor","set_simulateMultitouch",0xef7c64d3,"starling.events.TouchProcessor.set_simulateMultitouch","starling/events/TouchProcessor.hx",403,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_395_set_simulateMultitouch,"starling.events.TouchProcessor","set_simulateMultitouch",0xef7c64d3,"starling.events.TouchProcessor.set_simulateMultitouch","starling/events/TouchProcessor.hx",395,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_432_get_multitapTime,"starling.events.TouchProcessor","get_multitapTime",0x4a96d1ec,"starling.events.TouchProcessor.get_multitapTime","starling/events/TouchProcessor.hx",432,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_433_set_multitapTime,"starling.events.TouchProcessor","set_multitapTime",0xa0d8bf60,"starling.events.TouchProcessor.set_multitapTime","starling/events/TouchProcessor.hx",433,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_438_get_multitapDistance,"starling.events.TouchProcessor","get_multitapDistance",0xa5d57494,"starling.events.TouchProcessor.get_multitapDistance","starling/events/TouchProcessor.hx",438,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_439_set_multitapDistance,"starling.events.TouchProcessor","set_multitapDistance",0x728d2c08,"starling.events.TouchProcessor.set_multitapDistance","starling/events/TouchProcessor.hx",439,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_445_get_root,"starling.events.TouchProcessor","get_root",0x12369c57,"starling.events.TouchProcessor.get_root","starling/events/TouchProcessor.hx",445,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_446_set_root,"starling.events.TouchProcessor","set_root",0xc093f5cb,"starling.events.TouchProcessor.set_root","starling/events/TouchProcessor.hx",446,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_450_get_stage,"starling.events.TouchProcessor","get_stage",0x743c2ae9,"starling.events.TouchProcessor.get_stage","starling/events/TouchProcessor.hx",450,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_454_get_numCurrentTouches,"starling.events.TouchProcessor","get_numCurrentTouches",0xdb720845,"starling.events.TouchProcessor.get_numCurrentTouches","starling/events/TouchProcessor.hx",454,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_460_onKey,"starling.events.TouchProcessor","onKey",0x1f550794,"starling.events.TouchProcessor.onKey","starling/events/TouchProcessor.hx",460,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_504_monitorInterruptions,"starling.events.TouchProcessor","monitorInterruptions",0xb71d4a80,"starling.events.TouchProcessor.monitorInterruptions","starling/events/TouchProcessor.hx",504,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_519_onInterruption,"starling.events.TouchProcessor","onInterruption",0x0d211770,"starling.events.TouchProcessor.onInterruption","starling/events/TouchProcessor.hx",519,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_78_boot,"starling.events.TouchProcessor","boot",0xd3f6b0de,"starling.events.TouchProcessor.boot","starling/events/TouchProcessor.hx",78,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_79_boot,"starling.events.TouchProcessor","boot",0xd3f6b0de,"starling.events.TouchProcessor.boot","starling/events/TouchProcessor.hx",79,0x1b17ee9c)
HX_LOCAL_STACK_FRAME(_hx_pos_b68dd9cb3f9c10e4_80_boot,"starling.events.TouchProcessor","boot",0xd3f6b0de,"starling.events.TouchProcessor.boot","starling/events/TouchProcessor.hx",80,0x1b17ee9c)
namespace starling{
namespace events{

void TouchProcessor_obj::__construct( ::starling::display::Stage stage){
            	HX_GC_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_55_new)
HXLINE(  64)		this->_hx___multitapDistance = ((Float)25);
HXLINE(  63)		this->_hx___multitapTime = ((Float)0.3);
HXLINE(  62)		this->_hx___ctrlDown = false;
HXLINE(  61)		this->_hx___shiftDown = false;
HXLINE(  85)		this->__root = (this->_hx___stage = stage);
HXLINE(  86)		this->_hx___elapsedTime = ((Float)0.0);
HXLINE(  87)		int length = null();
HXDLIN(  87)		bool fixed = null();
HXDLIN(  87)		this->_hx___currentTouches =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
HXLINE(  88)		int length1 = null();
HXDLIN(  88)		bool fixed1 = null();
HXDLIN(  88)		this->_hx___queue =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length1,fixed1,null()),null());
HXLINE(  89)		int length2 = null();
HXDLIN(  89)		bool fixed2 = null();
HXDLIN(  89)		this->_hx___lastTaps =  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length2,fixed2,null()),null());
HXLINE(  90)		this->_hx___touchEvent =  ::starling::events::TouchEvent_obj::__alloc( HX_CTX ,HX_("touch",bf,17,33,14),null(),null(),null(),null());
HXLINE(  92)		this->_hx___stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKey_dyn());
HXLINE(  93)		this->_hx___stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKey_dyn());
HXLINE(  94)		this->monitorInterruptions(true);
            	}

Dynamic TouchProcessor_obj::__CreateEmpty() { return new TouchProcessor_obj; }

void *TouchProcessor_obj::_hx_vtable = 0;

Dynamic TouchProcessor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TouchProcessor_obj > _hx_result = new TouchProcessor_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TouchProcessor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20c1a514;
}

void TouchProcessor_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_99_dispose)
HXLINE( 100)		this->monitorInterruptions(false);
HXLINE( 101)		this->_hx___stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKey_dyn());
HXLINE( 102)		this->_hx___stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKey_dyn());
HXLINE( 103)		if (hx::IsNotNull( this->_hx___touchMarker )) {
HXLINE( 103)			this->_hx___touchMarker->dispose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,dispose,(void))

void TouchProcessor_obj::advanceTime(Float passedTime){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_109_advanceTime)
HXLINE( 110)		int i;
HXLINE( 111)		 ::starling::events::Touch touch;
HXLINE( 112)		int numIterations = (int)0;
HXLINE( 114)		 ::starling::events::TouchProcessor _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 114)		_hx_tmp->_hx___elapsedTime = (_hx_tmp->_hx___elapsedTime + passedTime);
HXLINE( 115)		::openfl::_Vector::IVector_obj::set_length(::starling::events::TouchProcessor_obj::sUpdatedTouches->data,(int)0);
HXLINE( 118)		if ((::openfl::_Vector::IVector_obj::get_length(this->_hx___lastTaps->data) > (int)0)) {
HXLINE( 120)			int i1 = (::openfl::_Vector::IVector_obj::get_length(this->_hx___lastTaps->data) - (int)1);
HXLINE( 121)			while((i1 >= (int)0)){
HXLINE( 123)				Float _hx_tmp1 = this->_hx___elapsedTime;
HXDLIN( 123)				Float _hx_tmp2 = (_hx_tmp1 - ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(this->_hx___lastTaps->data,i1)) )->get_timestamp());
HXDLIN( 123)				if ((_hx_tmp2 > this->_hx___multitapTime)) {
HXLINE( 124)					::openfl::_Vector::IVector_obj::removeAt(this->_hx___lastTaps->data,i1);
            				}
HXLINE( 125)				i1 = (i1 - (int)1);
            			}
            		}
HXLINE( 129)		while(true){
HXLINE( 129)			bool _hx_tmp3;
HXDLIN( 129)			if ((::openfl::_Vector::IVector_obj::get_length(this->_hx___queue->data) <= (int)0)) {
HXLINE( 129)				_hx_tmp3 = (numIterations == (int)0);
            			}
            			else {
HXLINE( 129)				_hx_tmp3 = true;
            			}
HXDLIN( 129)			if (!(_hx_tmp3)) {
HXLINE( 129)				goto _hx_goto_3;
            			}
HXLINE( 131)			numIterations = (numIterations + (int)1);
HXLINE( 134)			{
HXLINE( 134)				int _g = (int)0;
HXDLIN( 134)				 ::openfl::_Vector::AbstractVector _g1 = this->_hx___currentTouches;
HXDLIN( 134)				while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 134)					 ::starling::events::Touch touch1 = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 134)					_g = (_g + (int)1);
HXLINE( 135)					bool _hx_tmp4;
HXDLIN( 135)					if ((touch1->get_phase() != HX_("began",31,e3,55,b0))) {
HXLINE( 135)						_hx_tmp4 = (touch1->get_phase() == HX_("moved",33,cc,65,0c));
            					}
            					else {
HXLINE( 135)						_hx_tmp4 = true;
            					}
HXDLIN( 135)					if (_hx_tmp4) {
HXLINE( 136)						touch1->set_phase(HX_("stationary",74,38,a1,a8));
            					}
            				}
            			}
HXLINE( 139)			while(true){
HXLINE( 139)				bool _hx_tmp5;
HXDLIN( 139)				if ((::openfl::_Vector::IVector_obj::get_length(this->_hx___queue->data) > (int)0)) {
HXLINE( 140)					 ::openfl::_Vector::AbstractVector _hx_tmp6 = ::starling::events::TouchProcessor_obj::sUpdatedTouches;
HXDLIN( 140)					 ::openfl::_Vector::AbstractVector this1 = this->_hx___queue;
HXDLIN( 140)					int index = (::openfl::_Vector::IVector_obj::get_length(this->_hx___queue->data) - (int)1);
HXLINE( 139)					_hx_tmp5 = !(this->containsTouchWithID(_hx_tmp6,( (int)(::openfl::_Vector::IVector_obj::get(this1->data,index)->__GetItem((int)0)) )));
            				}
            				else {
HXLINE( 139)					_hx_tmp5 = false;
            				}
HXDLIN( 139)				if (!(_hx_tmp5)) {
HXLINE( 139)					goto _hx_goto_5;
            				}
HXLINE( 142)				::cpp::VirtualArray touchArgs = ( (::cpp::VirtualArray)(::openfl::_Vector::IVector_obj::pop(this->_hx___queue->data)) );
HXLINE( 143)				touch = this->createOrUpdateTouch(( (int)(touchArgs->__get((int)0)) ),( (::String)(touchArgs->__get((int)1)) ),( (Float)(touchArgs->__get((int)2)) ),( (Float)(touchArgs->__get((int)3)) ),touchArgs->__get((int)4),touchArgs->__get((int)5),touchArgs->__get((int)6));
HXLINE( 147)				{
HXLINE( 147)					 ::openfl::_Vector::AbstractVector this2 = ::starling::events::TouchProcessor_obj::sUpdatedTouches;
HXDLIN( 147)					int index1 = ::openfl::_Vector::IVector_obj::get_length(::starling::events::TouchProcessor_obj::sUpdatedTouches->data);
HXDLIN( 147)					::openfl::_Vector::IVector_obj::set(this2->data,index1,touch);
            				}
            			}
            			_hx_goto_5:;
HXLINE( 152)			i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___currentTouches->data) - (int)1);
HXLINE( 153)			while((i >= (int)0)){
HXLINE( 155)				touch = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(this->_hx___currentTouches->data,i)) );
HXLINE( 156)				bool _hx_tmp7;
HXDLIN( 156)				if ((touch->get_phase() == HX_("hover",bc,e5,64,2b))) {
HXLINE( 156)					 ::openfl::_Vector::AbstractVector _hx_tmp8 = ::starling::events::TouchProcessor_obj::sUpdatedTouches;
HXDLIN( 156)					_hx_tmp7 = !(this->containsTouchWithID(_hx_tmp8,touch->get_id()));
            				}
            				else {
HXLINE( 156)					_hx_tmp7 = false;
            				}
HXDLIN( 156)				if (_hx_tmp7) {
HXLINE( 158)					 ::openfl::geom::Point _hx_tmp9 = ::starling::events::TouchProcessor_obj::sHelperPoint;
HXDLIN( 158)					Float _hx_tmp10 = touch->get_globalX();
HXDLIN( 158)					_hx_tmp9->setTo(_hx_tmp10,touch->get_globalY());
HXLINE( 159)					 ::starling::display::DisplayObject _hx_tmp11 = touch->get_target();
HXDLIN( 159)					if (hx::IsNotEq( _hx_tmp11,this->__root->hitTest(::starling::events::TouchProcessor_obj::sHelperPoint) )) {
HXLINE( 160)						 ::openfl::_Vector::AbstractVector this3 = ::starling::events::TouchProcessor_obj::sUpdatedTouches;
HXDLIN( 160)						int index2 = ::openfl::_Vector::IVector_obj::get_length(::starling::events::TouchProcessor_obj::sUpdatedTouches->data);
HXDLIN( 160)						::openfl::_Vector::IVector_obj::set(this3->data,index2,touch);
            					}
            				}
HXLINE( 162)				i = (i - (int)1);
            			}
HXLINE( 166)			this->processTouches(::starling::events::TouchProcessor_obj::sUpdatedTouches,this->_hx___shiftDown,this->_hx___ctrlDown);
HXLINE( 169)			i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___currentTouches->data) - (int)1);
HXLINE( 170)			while((i >= (int)0)){
HXLINE( 172)				if ((( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(this->_hx___currentTouches->data,i)) )->get_phase() == HX_("ended",fa,48,7a,70))) {
HXLINE( 173)					::openfl::_Vector::IVector_obj::removeAt(this->_hx___currentTouches->data,i);
            				}
HXLINE( 174)				i = (i - (int)1);
            			}
HXLINE( 177)			::openfl::_Vector::IVector_obj::set_length(::starling::events::TouchProcessor_obj::sUpdatedTouches->data,(int)0);
            		}
            		_hx_goto_3:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,advanceTime,(void))

void TouchProcessor_obj::processTouches( ::openfl::_Vector::AbstractVector touches,bool shiftDown,bool ctrlDown){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_191_processTouches)
HXLINE( 192)		 ::starling::events::Touch touch;
HXLINE( 193)		::openfl::_Vector::IVector_obj::set_length(::starling::events::TouchProcessor_obj::sHoveringTouchData->data,(int)0);
HXLINE( 197)		this->_hx___touchEvent->resetTo(HX_("touch",bf,17,33,14),this->_hx___currentTouches,shiftDown,ctrlDown,null());
HXLINE( 200)		{
HXLINE( 200)			int _g = (int)0;
HXDLIN( 200)			while((_g < ::openfl::_Vector::IVector_obj::get_length(touches->data))){
HXLINE( 200)				 ::starling::events::Touch touch1 = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(touches->data,_g)) );
HXDLIN( 200)				_g = (_g + (int)1);
HXLINE( 203)				bool _hx_tmp;
HXDLIN( 203)				if ((touch1->get_phase() == HX_("hover",bc,e5,64,2b))) {
HXLINE( 203)					_hx_tmp = hx::IsNotNull( touch1->get_target() );
            				}
            				else {
HXLINE( 203)					_hx_tmp = false;
            				}
HXDLIN( 203)				if (_hx_tmp) {
HXLINE( 204)					 ::openfl::_Vector::AbstractVector this1 = ::starling::events::TouchProcessor_obj::sHoveringTouchData;
HXDLIN( 204)					int index = ::openfl::_Vector::IVector_obj::get_length(::starling::events::TouchProcessor_obj::sHoveringTouchData->data);
HXLINE( 206)					 ::starling::display::DisplayObject value = touch1->get_target();
HXLINE( 204)					 ::Dynamic value1 =  ::Dynamic(hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("target",51,f3,ec,86),value)
            						->setFixed(1,HX_("bubbleChain",d5,49,e2,a2),touch1->get_bubbleChain())
            						->setFixed(2,HX_("touch",bf,17,33,14),touch1));
HXDLIN( 204)					::openfl::_Vector::IVector_obj::set(this1->data,index,value1);
            				}
HXLINE( 210)				bool _hx_tmp1;
HXDLIN( 210)				if ((touch1->get_phase() != HX_("hover",bc,e5,64,2b))) {
HXLINE( 210)					_hx_tmp1 = (touch1->get_phase() == HX_("began",31,e3,55,b0));
            				}
            				else {
HXLINE( 210)					_hx_tmp1 = true;
            				}
HXDLIN( 210)				if (_hx_tmp1) {
HXLINE( 212)					 ::openfl::geom::Point _hx_tmp2 = ::starling::events::TouchProcessor_obj::sHelperPoint;
HXDLIN( 212)					Float _hx_tmp3 = touch1->get_globalX();
HXDLIN( 212)					_hx_tmp2->setTo(_hx_tmp3,touch1->get_globalY());
HXLINE( 213)					touch1->set_target(this->__root->hitTest(::starling::events::TouchProcessor_obj::sHelperPoint));
            				}
            			}
            		}
HXLINE( 219)		{
HXLINE( 219)			int _g1 = (int)0;
HXDLIN( 219)			 ::openfl::_Vector::AbstractVector _g11 = ::starling::events::TouchProcessor_obj::sHoveringTouchData;
HXDLIN( 219)			while((_g1 < ::openfl::_Vector::IVector_obj::get_length(_g11->data))){
HXLINE( 219)				 ::Dynamic touchData = ::openfl::_Vector::IVector_obj::get(_g11->data,_g1);
HXDLIN( 219)				_g1 = (_g1 + (int)1);
HXLINE( 220)				 ::starling::display::DisplayObject _hx_tmp4 = hx::TCast<  ::starling::events::Touch >::cast( ::Dynamic(touchData->__Field(HX_("touch",bf,17,33,14),hx::paccDynamic)))->get_target();
HXDLIN( 220)				if (hx::IsNotEq( _hx_tmp4, ::Dynamic(touchData->__Field(HX_("target",51,f3,ec,86),hx::paccDynamic)) )) {
HXLINE( 221)					this->_hx___touchEvent->dispatch(( ( ::openfl::_Vector::AbstractVector)(touchData->__Field(HX_("bubbleChain",d5,49,e2,a2),hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE( 224)		{
HXLINE( 224)			int _g2 = (int)0;
HXDLIN( 224)			while((_g2 < ::openfl::_Vector::IVector_obj::get_length(touches->data))){
HXLINE( 224)				 ::starling::events::Touch touch2 = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(touches->data,_g2)) );
HXDLIN( 224)				_g2 = (_g2 + (int)1);
HXLINE( 225)				touch2->dispatchEvent(this->_hx___touchEvent);
            			}
            		}
HXLINE( 228)		this->_hx___touchEvent->resetTo(HX_("touch",bf,17,33,14),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(TouchProcessor_obj,processTouches,(void))

void TouchProcessor_obj::enqueue(int touchID,::String phase,Float globalX,Float globalY,hx::Null< Float >  __o_pressure,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float pressure = __o_pressure.Default(((Float)1.0));
Float width = __o_width.Default(((Float)1.0));
Float height = __o_height.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_234_enqueue)
HXLINE( 235)		::openfl::_Vector::IVector_obj::unshift(this->_hx___queue->data,::cpp::VirtualArray_obj::__new(7)->init(0,touchID)->init(1,phase)->init(2,globalX)->init(3,globalY)->init(4,pressure)->init(5,width)->init(6,height));
HXLINE( 238)		bool _hx_tmp;
HXDLIN( 238)		bool _hx_tmp1;
HXDLIN( 238)		if (this->_hx___ctrlDown) {
HXLINE( 238)			_hx_tmp1 = hx::IsNotNull( this->_hx___touchMarker );
            		}
            		else {
HXLINE( 238)			_hx_tmp1 = false;
            		}
HXDLIN( 238)		if (_hx_tmp1) {
HXLINE( 238)			_hx_tmp = (touchID == (int)0);
            		}
            		else {
HXLINE( 238)			_hx_tmp = false;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 240)			this->_hx___touchMarker->moveMarker(globalX,globalY,this->_hx___shiftDown);
HXLINE( 241)			{
HXLINE( 241)				 ::openfl::_Vector::AbstractVector this1 = this->_hx___queue;
HXDLIN( 241)				Float x = this->_hx___touchMarker->get_mockX();
HXDLIN( 241)				::cpp::VirtualArray x1 = ::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,phase)->init(2,x)->init(3,this->_hx___touchMarker->get_mockY());
HXDLIN( 241)				::openfl::_Vector::IVector_obj::unshift(this1->data,x1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(TouchProcessor_obj,enqueue,(void))

void TouchProcessor_obj::enqueueMouseLeftStage(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_252_enqueueMouseLeftStage)
HXLINE( 253)		 ::starling::events::Touch mouse = this->getCurrentTouch((int)0);
HXLINE( 254)		bool _hx_tmp;
HXDLIN( 254)		if (hx::IsNotNull( mouse )) {
HXLINE( 254)			_hx_tmp = (mouse->get_phase() != HX_("hover",bc,e5,64,2b));
            		}
            		else {
HXLINE( 254)			_hx_tmp = true;
            		}
HXDLIN( 254)		if (_hx_tmp) {
HXLINE( 254)			return;
            		}
HXLINE( 256)		int offset = (int)1;
HXLINE( 257)		Float exitX = mouse->get_globalX();
HXLINE( 258)		Float exitY = mouse->get_globalY();
HXLINE( 259)		Float distLeft = mouse->get_globalX();
HXLINE( 260)		Float distRight = (this->_hx___stage->get_stageWidth() - distLeft);
HXLINE( 261)		Float distTop = mouse->get_globalY();
HXLINE( 262)		Float distBottom = (this->_hx___stage->get_stageHeight() - distTop);
HXLINE( 263)		Float minDist = ::starling::utils::MathUtil_obj::minValues(::Array_obj< Float >::__new(4)->init(0,distLeft)->init(1,distRight)->init(2,distTop)->init(3,distBottom));
HXLINE( 268)		if ((minDist == distLeft)) {
HXLINE( 268)			exitX = -(offset);
            		}
            		else {
HXLINE( 269)			if ((minDist == distRight)) {
HXLINE( 269)				exitX = (this->_hx___stage->get_stageWidth() + offset);
            			}
            			else {
HXLINE( 270)				if ((minDist == distTop)) {
HXLINE( 270)					exitY = -(offset);
            				}
            				else {
HXLINE( 271)					exitY = (this->_hx___stage->get_stageHeight() + offset);
            				}
            			}
            		}
HXLINE( 273)		this->enqueue((int)0,HX_("hover",bc,e5,64,2b),exitX,exitY,null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,enqueueMouseLeftStage,(void))

void TouchProcessor_obj::cancelTouches(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_280_cancelTouches)
HXLINE( 281)		if ((::openfl::_Vector::IVector_obj::get_length(this->_hx___currentTouches->data) > (int)0)) {
HXLINE( 284)			{
HXLINE( 284)				int _g = (int)0;
HXDLIN( 284)				 ::openfl::_Vector::AbstractVector _g1 = this->_hx___currentTouches;
HXDLIN( 284)				while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 284)					 ::starling::events::Touch touch = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 284)					_g = (_g + (int)1);
HXLINE( 286)					bool _hx_tmp;
HXDLIN( 286)					bool _hx_tmp1;
HXDLIN( 286)					if ((touch->get_phase() != HX_("began",31,e3,55,b0))) {
HXLINE( 286)						_hx_tmp1 = (touch->get_phase() == HX_("moved",33,cc,65,0c));
            					}
            					else {
HXLINE( 286)						_hx_tmp1 = true;
            					}
HXDLIN( 286)					if (!(_hx_tmp1)) {
HXLINE( 286)						_hx_tmp = (touch->get_phase() == HX_("stationary",74,38,a1,a8));
            					}
            					else {
HXLINE( 286)						_hx_tmp = true;
            					}
HXDLIN( 286)					if (_hx_tmp) {
HXLINE( 289)						touch->set_phase(HX_("ended",fa,48,7a,70));
HXLINE( 290)						touch->set_cancelled(true);
            					}
            				}
            			}
HXLINE( 295)			this->processTouches(this->_hx___currentTouches,this->_hx___shiftDown,this->_hx___ctrlDown);
            		}
HXLINE( 299)		::openfl::_Vector::IVector_obj::set_length(this->_hx___currentTouches->data,(int)0);
HXLINE( 300)		::openfl::_Vector::IVector_obj::set_length(this->_hx___queue->data,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,cancelTouches,(void))

 ::starling::events::Touch TouchProcessor_obj::createOrUpdateTouch(int touchID,::String phase,Float globalX,Float globalY,hx::Null< Float >  __o_pressure,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float pressure = __o_pressure.Default(((Float)1.0));
Float width = __o_width.Default(((Float)1.0));
Float height = __o_height.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_307_createOrUpdateTouch)
HXLINE( 308)		 ::starling::events::Touch touch = this->getCurrentTouch(touchID);
HXLINE( 310)		if (hx::IsNull( touch )) {
HXLINE( 312)			touch =  ::starling::events::Touch_obj::__alloc( HX_CTX ,touchID);
HXLINE( 313)			this->addCurrentTouch(touch);
            		}
HXLINE( 316)		touch->set_globalX(globalX);
HXLINE( 317)		touch->set_globalY(globalY);
HXLINE( 318)		touch->set_phase(phase);
HXLINE( 319)		touch->set_timestamp(this->_hx___elapsedTime);
HXLINE( 320)		touch->set_pressure(pressure);
HXLINE( 321)		touch->set_width(width);
HXLINE( 322)		touch->set_height(height);
HXLINE( 324)		if ((phase == HX_("began",31,e3,55,b0))) {
HXLINE( 325)			this->updateTapCount(touch);
            		}
HXLINE( 327)		return touch;
            	}


HX_DEFINE_DYNAMIC_FUNC7(TouchProcessor_obj,createOrUpdateTouch,return )

void TouchProcessor_obj::updateTapCount( ::starling::events::Touch touch){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_331_updateTapCount)
HXLINE( 332)		 ::starling::events::Touch nearbyTap = null();
HXLINE( 333)		Float minSqDist = (this->_hx___multitapDistance * this->_hx___multitapDistance);
HXLINE( 335)		{
HXLINE( 335)			int _g = (int)0;
HXDLIN( 335)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___lastTaps;
HXDLIN( 335)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 335)				 ::starling::events::Touch tap = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 335)				_g = (_g + (int)1);
HXLINE( 337)				Float sqDist = tap->get_globalX();
HXDLIN( 337)				Float sqDist1 = ::Math_obj::pow((sqDist - touch->get_globalX()),(int)2);
HXLINE( 338)				Float sqDist2 = tap->get_globalY();
HXLINE( 337)				Float sqDist3 = (sqDist1 + ::Math_obj::pow((sqDist2 - touch->get_globalY()),(int)2));
HXLINE( 339)				if ((sqDist3 <= minSqDist)) {
HXLINE( 341)					nearbyTap = tap;
HXLINE( 342)					goto _hx_goto_18;
            				}
            			}
            			_hx_goto_18:;
            		}
HXLINE( 346)		if (hx::IsNotNull( nearbyTap )) {
HXLINE( 348)			touch->set_tapCount((nearbyTap->get_tapCount() + (int)1));
HXLINE( 349)			{
HXLINE( 349)				 ::openfl::_Vector::AbstractVector this1 = this->_hx___lastTaps;
HXDLIN( 349)				int index = ::openfl::_Vector::IVector_obj::indexOf(this->_hx___lastTaps->data,nearbyTap,(int)0);
HXDLIN( 349)				::openfl::_Vector::IVector_obj::removeAt(this1->data,index);
            			}
            		}
            		else {
HXLINE( 353)			touch->set_tapCount((int)1);
            		}
HXLINE( 356)		{
HXLINE( 356)			 ::openfl::_Vector::AbstractVector this2 = this->_hx___lastTaps;
HXDLIN( 356)			int index1 = ::openfl::_Vector::IVector_obj::get_length(this->_hx___lastTaps->data);
HXDLIN( 356)			 ::starling::events::Touch value = touch->clone();
HXDLIN( 356)			::openfl::_Vector::IVector_obj::set(this2->data,index1,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,updateTapCount,(void))

void TouchProcessor_obj::addCurrentTouch( ::starling::events::Touch touch){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_360_addCurrentTouch)
HXLINE( 361)		int i = (::openfl::_Vector::IVector_obj::get_length(this->_hx___currentTouches->data) - (int)1);
HXLINE( 362)		while((i >= (int)0)){
HXLINE( 364)			int _hx_tmp = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(this->_hx___currentTouches->data,i)) )->get_id();
HXDLIN( 364)			if ((_hx_tmp == touch->get_id())) {
HXLINE( 365)				::openfl::_Vector::IVector_obj::removeAt(this->_hx___currentTouches->data,i);
            			}
HXLINE( 366)			i = (i - (int)1);
            		}
HXLINE( 369)		{
HXLINE( 369)			 ::openfl::_Vector::AbstractVector this1 = this->_hx___currentTouches;
HXDLIN( 369)			int index = ::openfl::_Vector::IVector_obj::get_length(this->_hx___currentTouches->data);
HXDLIN( 369)			::openfl::_Vector::IVector_obj::set(this1->data,index,touch);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,addCurrentTouch,(void))

 ::starling::events::Touch TouchProcessor_obj::getCurrentTouch(int touchID){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_373_getCurrentTouch)
HXLINE( 374)		{
HXLINE( 374)			int _g = (int)0;
HXDLIN( 374)			 ::openfl::_Vector::AbstractVector _g1 = this->_hx___currentTouches;
HXDLIN( 374)			while((_g < ::openfl::_Vector::IVector_obj::get_length(_g1->data))){
HXLINE( 374)				 ::starling::events::Touch touch = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(_g1->data,_g)) );
HXDLIN( 374)				_g = (_g + (int)1);
HXLINE( 375)				if ((touch->get_id() == touchID)) {
HXLINE( 375)					return touch;
            				}
            			}
            		}
HXLINE( 377)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,getCurrentTouch,return )

bool TouchProcessor_obj::containsTouchWithID( ::openfl::_Vector::AbstractVector touches,int touchID){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_381_containsTouchWithID)
HXLINE( 382)		{
HXLINE( 382)			int _g = (int)0;
HXDLIN( 382)			while((_g < ::openfl::_Vector::IVector_obj::get_length(touches->data))){
HXLINE( 382)				 ::starling::events::Touch touch = ( ( ::starling::events::Touch)(::openfl::_Vector::IVector_obj::get(touches->data,_g)) );
HXDLIN( 382)				_g = (_g + (int)1);
HXLINE( 383)				if ((touch->get_id() == touchID)) {
HXLINE( 383)					return true;
            				}
            			}
            		}
HXLINE( 385)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TouchProcessor_obj,containsTouchWithID,return )

bool TouchProcessor_obj::get_simulateMultitouch(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_393_get_simulateMultitouch)
HXDLIN( 393)		return this->_hx___simulateMultitouch;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,get_simulateMultitouch,return )

bool TouchProcessor_obj::set_simulateMultitouch(bool value){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::starling::events::TouchProcessor,_gthis,::Array< ::Dynamic>,createTouchMarker, ::starling::core::Starling,target) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_403_set_simulateMultitouch)
HXLINE( 404)			target->removeEventListener(HX_("context3DCreate",7c,bf,59,7b),createTouchMarker->__get((int)0));
HXLINE( 406)			if (hx::IsNull( _gthis->_hx___touchMarker )) {
HXLINE( 408)				_gthis->_hx___touchMarker =  ::starling::events::TouchMarker_obj::__alloc( HX_CTX );
HXLINE( 409)				_gthis->_hx___touchMarker->set_visible(false);
HXLINE( 410)				_gthis->_hx___stage->addChild(_gthis->_hx___touchMarker);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_395_set_simulateMultitouch)
HXLINE( 394)		 ::starling::events::TouchProcessor _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 396)		if ((this->get_simulateMultitouch() == value)) {
HXLINE( 396)			return value;
            		}
HXLINE( 398)		this->_hx___simulateMultitouch = value;
HXLINE( 399)		 ::starling::core::Starling target = ::starling::core::Starling_obj::get_current();
HXLINE( 401)		::Array< ::Dynamic> createTouchMarker = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 402)		createTouchMarker[(int)0] =  ::Dynamic(new _hx_Closure_0(_gthis,createTouchMarker,target));
HXLINE( 414)		bool _hx_tmp;
HXDLIN( 414)		if (value) {
HXLINE( 414)			_hx_tmp = hx::IsNull( this->_hx___touchMarker );
            		}
            		else {
HXLINE( 414)			_hx_tmp = false;
            		}
HXDLIN( 414)		if (_hx_tmp) {
HXLINE( 416)			if (::starling::core::Starling_obj::get_current()->get_contextValid()) {
HXLINE( 417)				createTouchMarker->__get((int)0)();
            			}
            			else {
HXLINE( 419)				target->addEventListener(HX_("context3DCreate",7c,bf,59,7b),createTouchMarker->__get((int)0));
            			}
            		}
            		else {
HXLINE( 421)			bool _hx_tmp1;
HXDLIN( 421)			if (!(value)) {
HXLINE( 421)				_hx_tmp1 = hx::IsNotNull( this->_hx___touchMarker );
            			}
            			else {
HXLINE( 421)				_hx_tmp1 = false;
            			}
HXDLIN( 421)			if (_hx_tmp1) {
HXLINE( 423)				this->_hx___touchMarker->removeFromParent(true);
HXLINE( 424)				this->_hx___touchMarker = null();
            			}
            		}
HXLINE( 426)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,set_simulateMultitouch,return )

Float TouchProcessor_obj::get_multitapTime(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_432_get_multitapTime)
HXDLIN( 432)		return this->_hx___multitapTime;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,get_multitapTime,return )

Float TouchProcessor_obj::set_multitapTime(Float value){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_433_set_multitapTime)
HXDLIN( 433)		return (this->_hx___multitapTime = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,set_multitapTime,return )

Float TouchProcessor_obj::get_multitapDistance(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_438_get_multitapDistance)
HXDLIN( 438)		return this->_hx___multitapDistance;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,get_multitapDistance,return )

Float TouchProcessor_obj::set_multitapDistance(Float value){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_439_set_multitapDistance)
HXDLIN( 439)		return (this->_hx___multitapDistance = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,set_multitapDistance,return )

 ::starling::display::DisplayObject TouchProcessor_obj::get_root(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_445_get_root)
HXDLIN( 445)		return this->__root;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,get_root,return )

 ::starling::display::DisplayObject TouchProcessor_obj::set_root( ::starling::display::DisplayObject value){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_446_set_root)
HXDLIN( 446)		return (this->__root = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,set_root,return )

 ::starling::display::Stage TouchProcessor_obj::get_stage(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_450_get_stage)
HXDLIN( 450)		return this->_hx___stage;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,get_stage,return )

int TouchProcessor_obj::get_numCurrentTouches(){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_454_get_numCurrentTouches)
HXDLIN( 454)		return ::openfl::_Vector::IVector_obj::get_length(this->_hx___currentTouches->data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TouchProcessor_obj,get_numCurrentTouches,return )

void TouchProcessor_obj::onKey( ::starling::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_460_onKey)
HXDLIN( 460)		bool _hx_tmp;
HXDLIN( 460)		if ((event->get_keyCode() != (int)17)) {
HXDLIN( 460)			_hx_tmp = (event->get_keyCode() == (int)15);
            		}
            		else {
HXDLIN( 460)			_hx_tmp = true;
            		}
HXDLIN( 460)		if (_hx_tmp) {
HXLINE( 462)			bool wasCtrlDown = this->_hx___ctrlDown;
HXLINE( 463)			this->_hx___ctrlDown = (event->type == HX_("keyDown",a1,69,47,9c));
HXLINE( 465)			bool _hx_tmp1;
HXDLIN( 465)			if (hx::IsNotNull( this->_hx___touchMarker )) {
HXLINE( 465)				_hx_tmp1 = (wasCtrlDown != this->_hx___ctrlDown);
            			}
            			else {
HXLINE( 465)				_hx_tmp1 = false;
            			}
HXDLIN( 465)			if (_hx_tmp1) {
HXLINE( 467)				this->_hx___touchMarker->set_visible(this->_hx___ctrlDown);
HXLINE( 468)				 ::starling::events::TouchMarker _hx_tmp2 = this->_hx___touchMarker;
HXDLIN( 468)				Float _hx_tmp3 = ((Float)this->_hx___stage->get_stageWidth() / (Float)(int)2);
HXDLIN( 468)				_hx_tmp2->moveCenter(_hx_tmp3,((Float)this->_hx___stage->get_stageHeight() / (Float)(int)2));
HXLINE( 470)				 ::starling::events::Touch mouseTouch = this->getCurrentTouch((int)0);
HXLINE( 471)				 ::starling::events::Touch mockedTouch = this->getCurrentTouch((int)1);
HXLINE( 473)				if (hx::IsNotNull( mouseTouch )) {
HXLINE( 474)					 ::starling::events::TouchMarker _hx_tmp4 = this->_hx___touchMarker;
HXDLIN( 474)					Float _hx_tmp5 = mouseTouch->get_globalX();
HXDLIN( 474)					_hx_tmp4->moveMarker(_hx_tmp5,mouseTouch->get_globalY(),null());
            				}
HXLINE( 476)				bool _hx_tmp6;
HXDLIN( 476)				bool _hx_tmp7;
HXDLIN( 476)				if (wasCtrlDown) {
HXLINE( 476)					_hx_tmp7 = hx::IsNotNull( mockedTouch );
            				}
            				else {
HXLINE( 476)					_hx_tmp7 = false;
            				}
HXDLIN( 476)				if (_hx_tmp7) {
HXLINE( 476)					_hx_tmp6 = (mockedTouch->get_phase() != HX_("ended",fa,48,7a,70));
            				}
            				else {
HXLINE( 476)					_hx_tmp6 = false;
            				}
HXDLIN( 476)				if (_hx_tmp6) {
HXLINE( 479)					 ::openfl::_Vector::AbstractVector this1 = this->_hx___queue;
HXDLIN( 479)					Float x = mockedTouch->get_globalX();
HXDLIN( 479)					::cpp::VirtualArray x1 = ::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,HX_("ended",fa,48,7a,70))->init(2,x)->init(3,mockedTouch->get_globalY());
HXDLIN( 479)					::openfl::_Vector::IVector_obj::unshift(this1->data,x1);
            				}
            				else {
HXLINE( 481)					bool _hx_tmp8;
HXDLIN( 481)					if (this->_hx___ctrlDown) {
HXLINE( 481)						_hx_tmp8 = hx::IsNotNull( mouseTouch );
            					}
            					else {
HXLINE( 481)						_hx_tmp8 = false;
            					}
HXDLIN( 481)					if (_hx_tmp8) {
HXLINE( 484)						bool _hx_tmp9;
HXDLIN( 484)						if ((mouseTouch->get_phase() != HX_("hover",bc,e5,64,2b))) {
HXLINE( 484)							_hx_tmp9 = (mouseTouch->get_phase() == HX_("ended",fa,48,7a,70));
            						}
            						else {
HXLINE( 484)							_hx_tmp9 = true;
            						}
HXDLIN( 484)						if (_hx_tmp9) {
HXLINE( 485)							 ::openfl::_Vector::AbstractVector this2 = this->_hx___queue;
HXDLIN( 485)							Float x2 = this->_hx___touchMarker->get_mockX();
HXDLIN( 485)							::cpp::VirtualArray x3 = ::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,HX_("hover",bc,e5,64,2b))->init(2,x2)->init(3,this->_hx___touchMarker->get_mockY());
HXDLIN( 485)							::openfl::_Vector::IVector_obj::unshift(this2->data,x3);
            						}
            						else {
HXLINE( 487)							 ::openfl::_Vector::AbstractVector this3 = this->_hx___queue;
HXDLIN( 487)							Float x4 = this->_hx___touchMarker->get_mockX();
HXDLIN( 487)							::cpp::VirtualArray x5 = ::cpp::VirtualArray_obj::__new(4)->init(0,(int)1)->init(1,HX_("began",31,e3,55,b0))->init(2,x4)->init(3,this->_hx___touchMarker->get_mockY());
HXDLIN( 487)							::openfl::_Vector::IVector_obj::unshift(this3->data,x5);
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 491)			if ((event->get_keyCode() == (int)16)) {
HXLINE( 493)				this->_hx___shiftDown = (event->type == HX_("keyDown",a1,69,47,9c));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,onKey,(void))

void TouchProcessor_obj::monitorInterruptions(bool enable){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_504_monitorInterruptions)
HXDLIN( 504)		try {
            			HX_STACK_CATCHABLE( ::openfl::errors::Error, 0);
HXLINE( 509)			if (enable) {
HXLINE( 510)				::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("deactivate",34,5c,01,3c),this->onInterruption_dyn(),false,(int)0,true);
            			}
            			else {
HXLINE( 512)				::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("deactivate",34,5c,01,3c),this->onInterruption_dyn(),null());
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::openfl::errors::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::openfl::errors::Error e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,monitorInterruptions,(void))

void TouchProcessor_obj::onInterruption( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_519_onInterruption)
HXDLIN( 519)		this->cancelTouches();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TouchProcessor_obj,onInterruption,(void))

 ::openfl::_Vector::AbstractVector TouchProcessor_obj::sUpdatedTouches;

 ::openfl::_Vector::AbstractVector TouchProcessor_obj::sHoveringTouchData;

 ::openfl::geom::Point TouchProcessor_obj::sHelperPoint;


hx::ObjectPtr< TouchProcessor_obj > TouchProcessor_obj::__new( ::starling::display::Stage stage) {
	hx::ObjectPtr< TouchProcessor_obj > __this = new TouchProcessor_obj();
	__this->__construct(stage);
	return __this;
}

hx::ObjectPtr< TouchProcessor_obj > TouchProcessor_obj::__alloc(hx::Ctx *_hx_ctx, ::starling::display::Stage stage) {
	TouchProcessor_obj *__this = (TouchProcessor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TouchProcessor_obj), true, "starling.events.TouchProcessor"));
	*(void **)__this = TouchProcessor_obj::_hx_vtable;
	__this->__construct(stage);
	return __this;
}

TouchProcessor_obj::TouchProcessor_obj()
{
}

void TouchProcessor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TouchProcessor);
	HX_MARK_MEMBER_NAME(_hx___stage,"__stage");
	HX_MARK_MEMBER_NAME(__root,"__root");
	HX_MARK_MEMBER_NAME(_hx___elapsedTime,"__elapsedTime");
	HX_MARK_MEMBER_NAME(_hx___lastTaps,"__lastTaps");
	HX_MARK_MEMBER_NAME(_hx___shiftDown,"__shiftDown");
	HX_MARK_MEMBER_NAME(_hx___ctrlDown,"__ctrlDown");
	HX_MARK_MEMBER_NAME(_hx___multitapTime,"__multitapTime");
	HX_MARK_MEMBER_NAME(_hx___multitapDistance,"__multitapDistance");
	HX_MARK_MEMBER_NAME(_hx___touchEvent,"__touchEvent");
	HX_MARK_MEMBER_NAME(_hx___touchMarker,"__touchMarker");
	HX_MARK_MEMBER_NAME(_hx___simulateMultitouch,"__simulateMultitouch");
	HX_MARK_MEMBER_NAME(_hx___queue,"__queue");
	HX_MARK_MEMBER_NAME(_hx___currentTouches,"__currentTouches");
	HX_MARK_END_CLASS();
}

void TouchProcessor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___stage,"__stage");
	HX_VISIT_MEMBER_NAME(__root,"__root");
	HX_VISIT_MEMBER_NAME(_hx___elapsedTime,"__elapsedTime");
	HX_VISIT_MEMBER_NAME(_hx___lastTaps,"__lastTaps");
	HX_VISIT_MEMBER_NAME(_hx___shiftDown,"__shiftDown");
	HX_VISIT_MEMBER_NAME(_hx___ctrlDown,"__ctrlDown");
	HX_VISIT_MEMBER_NAME(_hx___multitapTime,"__multitapTime");
	HX_VISIT_MEMBER_NAME(_hx___multitapDistance,"__multitapDistance");
	HX_VISIT_MEMBER_NAME(_hx___touchEvent,"__touchEvent");
	HX_VISIT_MEMBER_NAME(_hx___touchMarker,"__touchMarker");
	HX_VISIT_MEMBER_NAME(_hx___simulateMultitouch,"__simulateMultitouch");
	HX_VISIT_MEMBER_NAME(_hx___queue,"__queue");
	HX_VISIT_MEMBER_NAME(_hx___currentTouches,"__currentTouches");
}

hx::Val TouchProcessor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_root() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stage") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_stage() ); }
		if (HX_FIELD_EQ(inName,"onKey") ) { return hx::Val( onKey_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__root") ) { return hx::Val( __root ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__stage") ) { return hx::Val( _hx___stage ); }
		if (HX_FIELD_EQ(inName,"__queue") ) { return hx::Val( _hx___queue ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"enqueue") ) { return hx::Val( enqueue_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_root") ) { return hx::Val( set_root_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_stage") ) { return hx::Val( get_stage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__lastTaps") ) { return hx::Val( _hx___lastTaps ); }
		if (HX_FIELD_EQ(inName,"__ctrlDown") ) { return hx::Val( _hx___ctrlDown ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__shiftDown") ) { return hx::Val( _hx___shiftDown ); }
		if (HX_FIELD_EQ(inName,"advanceTime") ) { return hx::Val( advanceTime_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__touchEvent") ) { return hx::Val( _hx___touchEvent ); }
		if (HX_FIELD_EQ(inName,"multitapTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multitapTime() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__elapsedTime") ) { return hx::Val( _hx___elapsedTime ); }
		if (HX_FIELD_EQ(inName,"__touchMarker") ) { return hx::Val( _hx___touchMarker ); }
		if (HX_FIELD_EQ(inName,"cancelTouches") ) { return hx::Val( cancelTouches_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__multitapTime") ) { return hx::Val( _hx___multitapTime ); }
		if (HX_FIELD_EQ(inName,"processTouches") ) { return hx::Val( processTouches_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTapCount") ) { return hx::Val( updateTapCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"onInterruption") ) { return hx::Val( onInterruption_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addCurrentTouch") ) { return hx::Val( addCurrentTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurrentTouch") ) { return hx::Val( getCurrentTouch_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__currentTouches") ) { return hx::Val( _hx___currentTouches ); }
		if (HX_FIELD_EQ(inName,"get_multitapTime") ) { return hx::Val( get_multitapTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multitapTime") ) { return hx::Val( set_multitapTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"multitapDistance") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_multitapDistance() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"numCurrentTouches") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numCurrentTouches() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__multitapDistance") ) { return hx::Val( _hx___multitapDistance ); }
		if (HX_FIELD_EQ(inName,"simulateMultitouch") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_simulateMultitouch() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createOrUpdateTouch") ) { return hx::Val( createOrUpdateTouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"containsTouchWithID") ) { return hx::Val( containsTouchWithID_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__simulateMultitouch") ) { return hx::Val( _hx___simulateMultitouch ); }
		if (HX_FIELD_EQ(inName,"get_multitapDistance") ) { return hx::Val( get_multitapDistance_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_multitapDistance") ) { return hx::Val( set_multitapDistance_dyn() ); }
		if (HX_FIELD_EQ(inName,"monitorInterruptions") ) { return hx::Val( monitorInterruptions_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"enqueueMouseLeftStage") ) { return hx::Val( enqueueMouseLeftStage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numCurrentTouches") ) { return hx::Val( get_numCurrentTouches_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_simulateMultitouch") ) { return hx::Val( get_simulateMultitouch_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_simulateMultitouch") ) { return hx::Val( set_simulateMultitouch_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TouchProcessor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { outValue = ( sHelperPoint ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sUpdatedTouches") ) { outValue = ( sUpdatedTouches ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sHoveringTouchData") ) { outValue = ( sHoveringTouchData ); return true; }
	}
	return false;
}

hx::Val TouchProcessor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_root(inValue.Cast<  ::starling::display::DisplayObject >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__root") ) { __root=inValue.Cast<  ::starling::display::DisplayObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__stage") ) { _hx___stage=inValue.Cast<  ::starling::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__queue") ) { _hx___queue=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__lastTaps") ) { _hx___lastTaps=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__ctrlDown") ) { _hx___ctrlDown=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__shiftDown") ) { _hx___shiftDown=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__touchEvent") ) { _hx___touchEvent=inValue.Cast<  ::starling::events::TouchEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multitapTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multitapTime(inValue.Cast< Float >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__elapsedTime") ) { _hx___elapsedTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__touchMarker") ) { _hx___touchMarker=inValue.Cast<  ::starling::events::TouchMarker >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__multitapTime") ) { _hx___multitapTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__currentTouches") ) { _hx___currentTouches=inValue.Cast<  ::openfl::_Vector::AbstractVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"multitapDistance") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multitapDistance(inValue.Cast< Float >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__multitapDistance") ) { _hx___multitapDistance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"simulateMultitouch") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_simulateMultitouch(inValue.Cast< bool >()) ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__simulateMultitouch") ) { _hx___simulateMultitouch=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TouchProcessor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"sHelperPoint") ) { sHelperPoint=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sUpdatedTouches") ) { sUpdatedTouches=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sHoveringTouchData") ) { sHoveringTouchData=ioValue.Cast<  ::openfl::_Vector::AbstractVector >(); return true; }
	}
	return false;
}

void TouchProcessor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee"));
	outFields->push(HX_HCSTRING("__root","\x42","\x51","\xa7","\xfa"));
	outFields->push(HX_HCSTRING("__elapsedTime","\x49","\x9f","\x45","\x0f"));
	outFields->push(HX_HCSTRING("__lastTaps","\x46","\x49","\x78","\x83"));
	outFields->push(HX_HCSTRING("__shiftDown","\xe4","\xc2","\x93","\xfb"));
	outFields->push(HX_HCSTRING("__ctrlDown","\xcd","\x51","\xb1","\x8a"));
	outFields->push(HX_HCSTRING("__multitapTime","\xd7","\xe9","\x76","\x84"));
	outFields->push(HX_HCSTRING("__multitapDistance","\xff","\x5d","\x37","\xd6"));
	outFields->push(HX_HCSTRING("__touchEvent","\xfb","\x26","\xe9","\xa7"));
	outFields->push(HX_HCSTRING("__touchMarker","\xb9","\x1b","\x1f","\x68"));
	outFields->push(HX_HCSTRING("__simulateMultitouch","\x8a","\x42","\x90","\x37"));
	outFields->push(HX_HCSTRING("__queue","\x71","\xe6","\x48","\xc8"));
	outFields->push(HX_HCSTRING("__currentTouches","\xd4","\x1d","\xcc","\x1a"));
	outFields->push(HX_HCSTRING("simulateMultitouch","\x6a","\xa7","\x5c","\x58"));
	outFields->push(HX_HCSTRING("multitapTime","\xb7","\x66","\xb6","\x63"));
	outFields->push(HX_HCSTRING("multitapDistance","\xdf","\xca","\xa6","\x6a"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	outFields->push(HX_HCSTRING("numCurrentTouches","\x9a","\x33","\xcc","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TouchProcessor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::display::Stage*/ ,(int)offsetof(TouchProcessor_obj,_hx___stage),HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee")},
	{hx::fsObject /*::starling::display::DisplayObject*/ ,(int)offsetof(TouchProcessor_obj,__root),HX_HCSTRING("__root","\x42","\x51","\xa7","\xfa")},
	{hx::fsFloat,(int)offsetof(TouchProcessor_obj,_hx___elapsedTime),HX_HCSTRING("__elapsedTime","\x49","\x9f","\x45","\x0f")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(TouchProcessor_obj,_hx___lastTaps),HX_HCSTRING("__lastTaps","\x46","\x49","\x78","\x83")},
	{hx::fsBool,(int)offsetof(TouchProcessor_obj,_hx___shiftDown),HX_HCSTRING("__shiftDown","\xe4","\xc2","\x93","\xfb")},
	{hx::fsBool,(int)offsetof(TouchProcessor_obj,_hx___ctrlDown),HX_HCSTRING("__ctrlDown","\xcd","\x51","\xb1","\x8a")},
	{hx::fsFloat,(int)offsetof(TouchProcessor_obj,_hx___multitapTime),HX_HCSTRING("__multitapTime","\xd7","\xe9","\x76","\x84")},
	{hx::fsFloat,(int)offsetof(TouchProcessor_obj,_hx___multitapDistance),HX_HCSTRING("__multitapDistance","\xff","\x5d","\x37","\xd6")},
	{hx::fsObject /*::starling::events::TouchEvent*/ ,(int)offsetof(TouchProcessor_obj,_hx___touchEvent),HX_HCSTRING("__touchEvent","\xfb","\x26","\xe9","\xa7")},
	{hx::fsObject /*::starling::events::TouchMarker*/ ,(int)offsetof(TouchProcessor_obj,_hx___touchMarker),HX_HCSTRING("__touchMarker","\xb9","\x1b","\x1f","\x68")},
	{hx::fsBool,(int)offsetof(TouchProcessor_obj,_hx___simulateMultitouch),HX_HCSTRING("__simulateMultitouch","\x8a","\x42","\x90","\x37")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(TouchProcessor_obj,_hx___queue),HX_HCSTRING("__queue","\x71","\xe6","\x48","\xc8")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(int)offsetof(TouchProcessor_obj,_hx___currentTouches),HX_HCSTRING("__currentTouches","\xd4","\x1d","\xcc","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TouchProcessor_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &TouchProcessor_obj::sUpdatedTouches,HX_HCSTRING("sUpdatedTouches","\xc5","\x68","\xd4","\xf0")},
	{hx::fsObject /*::openfl::_Vector::AbstractVector*/ ,(void *) &TouchProcessor_obj::sHoveringTouchData,HX_HCSTRING("sHoveringTouchData","\x10","\xaa","\x1d","\x5e")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &TouchProcessor_obj::sHelperPoint,HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TouchProcessor_obj_sMemberFields[] = {
	HX_HCSTRING("__stage","\x9e","\xc3","\x69","\xee"),
	HX_HCSTRING("__root","\x42","\x51","\xa7","\xfa"),
	HX_HCSTRING("__elapsedTime","\x49","\x9f","\x45","\x0f"),
	HX_HCSTRING("__lastTaps","\x46","\x49","\x78","\x83"),
	HX_HCSTRING("__shiftDown","\xe4","\xc2","\x93","\xfb"),
	HX_HCSTRING("__ctrlDown","\xcd","\x51","\xb1","\x8a"),
	HX_HCSTRING("__multitapTime","\xd7","\xe9","\x76","\x84"),
	HX_HCSTRING("__multitapDistance","\xff","\x5d","\x37","\xd6"),
	HX_HCSTRING("__touchEvent","\xfb","\x26","\xe9","\xa7"),
	HX_HCSTRING("__touchMarker","\xb9","\x1b","\x1f","\x68"),
	HX_HCSTRING("__simulateMultitouch","\x8a","\x42","\x90","\x37"),
	HX_HCSTRING("__queue","\x71","\xe6","\x48","\xc8"),
	HX_HCSTRING("__currentTouches","\xd4","\x1d","\xcc","\x1a"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("advanceTime","\xaf","\x69","\x9d","\xab"),
	HX_HCSTRING("processTouches","\x3e","\x5f","\x56","\x8b"),
	HX_HCSTRING("enqueue","\x88","\x18","\x24","\xc1"),
	HX_HCSTRING("enqueueMouseLeftStage","\xfa","\x40","\xea","\x89"),
	HX_HCSTRING("cancelTouches","\x93","\x5b","\x27","\xa0"),
	HX_HCSTRING("createOrUpdateTouch","\xf7","\x8f","\x0a","\x44"),
	HX_HCSTRING("updateTapCount","\x95","\xc6","\x30","\x87"),
	HX_HCSTRING("addCurrentTouch","\x87","\x68","\x8e","\xe1"),
	HX_HCSTRING("getCurrentTouch","\x7c","\x52","\x29","\x7e"),
	HX_HCSTRING("containsTouchWithID","\xa1","\xec","\x0c","\xe2"),
	HX_HCSTRING("get_simulateMultitouch","\xb3","\x20","\xf1","\xb1"),
	HX_HCSTRING("set_simulateMultitouch","\x27","\x9d","\x9c","\xe5"),
	HX_HCSTRING("get_multitapTime","\x40","\x53","\x55","\x68"),
	HX_HCSTRING("set_multitapTime","\xb4","\x40","\x97","\xbe"),
	HX_HCSTRING("get_multitapDistance","\xe8","\x2f","\x11","\x89"),
	HX_HCSTRING("set_multitapDistance","\x5c","\xe7","\xc8","\x55"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("set_root","\x1f","\x03","\xc7","\x79"),
	HX_HCSTRING("get_stage","\x15","\xc7","\xb4","\xc7"),
	HX_HCSTRING("get_numCurrentTouches","\x71","\x36","\x7a","\xcc"),
	HX_HCSTRING("onKey","\xc0","\x1d","\x69","\x32"),
	HX_HCSTRING("monitorInterruptions","\xd4","\x05","\x59","\x9a"),
	HX_HCSTRING("onInterruption","\xc4","\xdb","\xa6","\x6a"),
	::String(null()) };

static void TouchProcessor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TouchProcessor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TouchProcessor_obj::sUpdatedTouches,"sUpdatedTouches");
	HX_MARK_MEMBER_NAME(TouchProcessor_obj::sHoveringTouchData,"sHoveringTouchData");
	HX_MARK_MEMBER_NAME(TouchProcessor_obj::sHelperPoint,"sHelperPoint");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TouchProcessor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TouchProcessor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TouchProcessor_obj::sUpdatedTouches,"sUpdatedTouches");
	HX_VISIT_MEMBER_NAME(TouchProcessor_obj::sHoveringTouchData,"sHoveringTouchData");
	HX_VISIT_MEMBER_NAME(TouchProcessor_obj::sHelperPoint,"sHelperPoint");
};

#endif

hx::Class TouchProcessor_obj::__mClass;

static ::String TouchProcessor_obj_sStaticFields[] = {
	HX_HCSTRING("sUpdatedTouches","\xc5","\x68","\xd4","\xf0"),
	HX_HCSTRING("sHoveringTouchData","\x10","\xaa","\x1d","\x5e"),
	HX_HCSTRING("sHelperPoint","\x4f","\x0e","\x3c","\xff"),
	::String(null())
};

void TouchProcessor_obj::__register()
{
	hx::Object *dummy = new TouchProcessor_obj;
	TouchProcessor_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("starling.events.TouchProcessor","\x42","\x73","\xa0","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TouchProcessor_obj::__GetStatic;
	__mClass->mSetStaticField = &TouchProcessor_obj::__SetStatic;
	__mClass->mMarkFunc = TouchProcessor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TouchProcessor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TouchProcessor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TouchProcessor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TouchProcessor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TouchProcessor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TouchProcessor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TouchProcessor_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_78_boot)
HXDLIN(  78)			int length = null();
HXDLIN(  78)			bool fixed = null();
HXDLIN(  78)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_78_boot)
HXDLIN(  78)		sUpdatedTouches =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_79_boot)
HXDLIN(  79)			int length = null();
HXDLIN(  79)			bool fixed = null();
HXDLIN(  79)			return  ::openfl::_Vector::AbstractVector_obj::__alloc( HX_CTX , ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null()),null());
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_79_boot)
HXDLIN(  79)		sHoveringTouchData =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b68dd9cb3f9c10e4_80_boot)
HXDLIN(  80)		sHelperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            	}
}

} // end namespace starling
} // end namespace events
