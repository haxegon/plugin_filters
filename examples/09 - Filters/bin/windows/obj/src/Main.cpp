// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_haxegon_Filter
#include <haxegon/Filter.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Input
#include <haxegon/Input.h>
#endif
#ifndef INCLUDED_haxegon_Key
#include <haxegon/Key.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_4_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",4,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_6_update,"Main","update",0xb7afa57e,"Main.update","Main.hx",6,0x087e5c05)

void Main_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_4_new)
HXDLIN(   4)		this->currentfilter = HX_("None",d8,3e,e3,33);
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x332f6459;
}

void Main_obj::update(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_6_update)
HXLINE(   7)		::haxegon::Gfx_obj::drawimage((int)0,(int)0,HX_("constellation",d3,be,35,43));
HXLINE(   9)		::haxegon::Text_obj::align(::haxegon::Text_obj::CENTER);
HXLINE(  10)		::haxegon::Text_obj::set_size((int)2);
HXLINE(  11)		::haxegon::Text_obj::display(::haxegon::Gfx_obj::screenwidthmid,(int)4,HX_("FILTER EXAMPLE - PRESS 1 - 4 to change",79,3a,a7,da),null(),null());
HXLINE(  12)		int _hx_tmp = ::haxegon::Gfx_obj::screenwidthmid;
HXDLIN(  12)		int _hx_tmp1 = (::haxegon::Gfx_obj::screenheight - (int)20);
HXDLIN(  12)		::haxegon::Text_obj::display(_hx_tmp,_hx_tmp1,(HX_("Current Filter: ",65,fd,bd,b7) + this->currentfilter),null(),null());
HXLINE(  14)		if (::haxegon::Input_obj::justpressed(::haxegon::Key_obj::ONE_dyn())) {
HXLINE(  16)			::haxegon::Filter_obj::reset();
HXLINE(  17)			::haxegon::Filter_obj::set_bloom((int)1);
HXLINE(  18)			this->currentfilter = HX_("Bloom = 1.0",13,e5,1a,51);
            		}
            		else {
HXLINE(  19)			if (::haxegon::Input_obj::justpressed(::haxegon::Key_obj::TWO_dyn())) {
HXLINE(  21)				::haxegon::Filter_obj::reset();
HXLINE(  22)				::haxegon::Filter_obj::set_bloom((int)2);
HXLINE(  23)				this->currentfilter = HX_("Bloom = 2.0",54,a7,1b,51);
            			}
            			else {
HXLINE(  24)				if (::haxegon::Input_obj::justpressed(::haxegon::Key_obj::THREE_dyn())) {
HXLINE(  26)					::haxegon::Filter_obj::reset();
HXLINE(  27)					::haxegon::Filter_obj::set_blur((int)1);
HXLINE(  28)					this->currentfilter = HX_("Blur",c7,6e,f2,2b);
            				}
            				else {
HXLINE(  29)					if (::haxegon::Input_obj::justpressed(::haxegon::Key_obj::FOUR_dyn())) {
HXLINE(  31)						::haxegon::Filter_obj::reset();
HXLINE(  32)						this->currentfilter = HX_("None",d8,3e,e3,33);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,update,(void))


hx::ObjectPtr< Main_obj > Main_obj::__new() {
	hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Main_obj > Main_obj::__alloc(hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(currentfilter,"currentfilter");
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentfilter,"currentfilter");
}

hx::Val Main_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentfilter") ) { return hx::Val( currentfilter ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Main_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"currentfilter") ) { currentfilter=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentfilter","\xb1","\x2c","\xfd","\x33"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Main_obj,currentfilter),HX_HCSTRING("currentfilter","\xb1","\x2c","\xfd","\x33")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_HCSTRING("currentfilter","\xb1","\x2c","\xfd","\x33"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
};

#endif

hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	hx::Object *dummy = new Main_obj;
	Main_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

