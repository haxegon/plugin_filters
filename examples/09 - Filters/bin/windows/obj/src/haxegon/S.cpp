// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxegon_S
#include <haxegon/S.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_7_asciicode,"haxegon.S","asciicode",0xdcb63a95,"haxegon.S.asciicode","haxegon/S.hx",7,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_12_fromascii,"haxegon.S","fromascii",0xbdff873e,"haxegon.S.fromascii","haxegon/S.hx",12,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_17_join,"haxegon.S","join",0x017317b3,"haxegon.S.join","haxegon/S.hx",17,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_22_seperate,"haxegon.S","seperate",0xcb7c6db0,"haxegon.S.seperate","haxegon/S.hx",22,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_27_uppercase,"haxegon.S","uppercase",0x5db554a9,"haxegon.S.uppercase","haxegon/S.hx",27,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_32_lowercase,"haxegon.S","lowercase",0xdd1c70c8,"haxegon.S.lowercase","haxegon/S.hx",32,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_37_split,"haxegon.S","split",0x728856f1,"haxegon.S.split","haxegon/S.hx",37,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_41_removefromstring,"haxegon.S","removefromstring",0xf0d0c048,"haxegon.S.removefromstring","haxegon/S.hx",41,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_51_isinstring,"haxegon.S","isinstring",0x378bb4e9,"haxegon.S.isinstring","haxegon/S.hx",51,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_58_positioninstring,"haxegon.S","positioninstring",0xeb0bdd68,"haxegon.S.positioninstring","haxegon/S.hx",58,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_63_letterat,"haxegon.S","letterat",0x6f0083a2,"haxegon.S.letterat","haxegon/S.hx",63,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_68_mid,"haxegon.S","mid",0x5d0079df,"haxegon.S.mid","haxegon/S.hx",68,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_73_left,"haxegon.S","left",0x02bdebd0,"haxegon.S.left","haxegon/S.hx",73,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_78_right,"haxegon.S","right",0xda7d77f3,"haxegon.S.right","haxegon/S.hx",78,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_83_removefromleft,"haxegon.S","removefromleft",0x005103be,"haxegon.S.removefromleft","haxegon/S.hx",83,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_88_removefromright,"haxegon.S","removefromright",0xbd9f5045,"haxegon.S.removefromright","haxegon/S.hx",88,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_92_reversetext,"haxegon.S","reversetext",0x15065626,"haxegon.S.reversetext","haxegon/S.hx",92,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_101_replacechar,"haxegon.S","replacechar",0x7fe1e861,"haxegon.S.replacechar","haxegon/S.hx",101,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_105_getlastbranch,"haxegon.S","getlastbranch",0x0d36a0a5,"haxegon.S.getlastbranch","haxegon/S.hx",105,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_117_getroot,"haxegon.S","getroot",0xaeb6518f,"haxegon.S.getroot","haxegon/S.hx",117,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_127_getbranch,"haxegon.S","getbranch",0xd151d74f,"haxegon.S.getbranch","haxegon/S.hx",127,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_137_getbetweenbrackets,"haxegon.S","getbetweenbrackets",0x5734a0c6,"haxegon.S.getbetweenbrackets","haxegon/S.hx",137,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_146_trimspaces,"haxegon.S","trimspaces",0x255c73d8,"haxegon.S.trimspaces","haxegon/S.hx",146,0x33631f1a)
HX_LOCAL_STACK_FRAME(_hx_pos_5aa21b9a07cd5115_159_isnumber,"haxegon.S","isnumber",0x3c15aa7c,"haxegon.S.isnumber","haxegon/S.hx",159,0x33631f1a)
namespace haxegon{

void S_obj::__construct() { }

Dynamic S_obj::__CreateEmpty() { return new S_obj; }

void *S_obj::_hx_vtable = 0;

Dynamic S_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< S_obj > _hx_result = new S_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool S_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5238db7b;
}

int S_obj::asciicode(::String character){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_7_asciicode)
HXDLIN(   7)		return character.charCodeAt((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(S_obj,asciicode,return )

::String S_obj::fromascii(int asciicode){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_12_fromascii)
HXDLIN(  12)		return ::String::fromCharCode(asciicode);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(S_obj,fromascii,return )

::String S_obj::join(::cpp::VirtualArray array,::String seperator){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_17_join)
HXDLIN(  17)		return array->join(seperator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,join,return )

::Array< ::String > S_obj::seperate(::String currentstring,::String delimiter){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_22_seperate)
HXDLIN(  22)		return currentstring.split(delimiter);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,seperate,return )

::String S_obj::uppercase(::String currentstring){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_27_uppercase)
HXDLIN(  27)		return currentstring.toUpperCase();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(S_obj,uppercase,return )

::String S_obj::lowercase(::String currentstring){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_32_lowercase)
HXDLIN(  32)		return currentstring.toLowerCase();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(S_obj,lowercase,return )

::Array< ::String > S_obj::split(::String currentstring,::String delimiter){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_37_split)
HXDLIN(  37)		return currentstring.split(delimiter);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,split,return )

::String S_obj::removefromstring(::String fullstring,::String substring){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_41_removefromstring)
HXLINE(  42)		int t = fullstring.indexOf(substring,(int)0);
HXLINE(  43)		if ((t == (int)-1)) {
HXLINE(  44)			return fullstring;
            		}
            		else {
HXLINE(  46)			::String _hx_tmp = ::haxegon::S_obj::getroot(fullstring,substring);
HXDLIN(  46)			return ::haxegon::S_obj::removefromstring((_hx_tmp + ::haxegon::S_obj::getbranch(fullstring,substring)),substring);
            		}
HXLINE(  43)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,removefromstring,return )

bool S_obj::isinstring(::String fullstring,::String stringtocheck){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_51_isinstring)
HXLINE(  52)		if ((fullstring.indexOf(stringtocheck,(int)0) != (int)-1)) {
HXLINE(  52)			return true;
            		}
HXLINE(  53)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,isinstring,return )

int S_obj::positioninstring(::String fullstring,::String substring,hx::Null< int >  __o_start){
int start = __o_start.Default(0);
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_58_positioninstring)
HXDLIN(  58)		return fullstring.indexOf(substring,start);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(S_obj,positioninstring,return )

::String S_obj::letterat(::String currentstring,hx::Null< int >  __o_position){
int position = __o_position.Default(0);
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_63_letterat)
HXDLIN(  63)		return currentstring.substr(position,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,letterat,return )

::String S_obj::mid(::String currentstring,hx::Null< int >  __o_start,hx::Null< int >  __o_length){
int start = __o_start.Default(0);
int length = __o_length.Default(1);
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_68_mid)
HXDLIN(  68)		return currentstring.substr(start,length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(S_obj,mid,return )

::String S_obj::left(::String currentstring,hx::Null< int >  __o_length){
int length = __o_length.Default(1);
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_73_left)
HXDLIN(  73)		return currentstring.substr((int)0,length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,left,return )

::String S_obj::right(::String currentstring,hx::Null< int >  __o_length){
int length = __o_length.Default(1);
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_78_right)
HXDLIN(  78)		return currentstring.substr((currentstring.length - length),length);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,right,return )

::String S_obj::removefromleft(::String currentstring,hx::Null< int >  __o_length){
int length = __o_length.Default(1);
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_83_removefromleft)
HXDLIN(  83)		int length1 = (currentstring.length - length);
HXDLIN(  83)		return currentstring.substr((currentstring.length - length1),length1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,removefromleft,return )

::String S_obj::removefromright(::String currentstring,hx::Null< int >  __o_length){
int length = __o_length.Default(1);
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_88_removefromright)
HXDLIN(  88)		return currentstring.substr((int)0,(currentstring.length - length));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,removefromright,return )

::String S_obj::reversetext(::String currentstring){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_92_reversetext)
HXLINE(  93)		::String reversedstring = HX_("",00,00,00,00);
HXLINE(  95)		{
HXLINE(  95)			int _g1 = (int)0;
HXDLIN(  95)			int _g = currentstring.length;
HXDLIN(  95)			while((_g1 < _g)){
HXLINE(  95)				_g1 = (_g1 + (int)1);
HXDLIN(  95)				int i = (_g1 - (int)1);
HXDLIN(  95)				reversedstring = (reversedstring + currentstring.substr(((currentstring.length - i) - (int)1),(int)1));
            			}
            		}
HXLINE(  96)		return reversedstring;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(S_obj,reversetext,return )

::String S_obj::replacechar(::String currentstring,::String __o_ch,::String __o_ch2){
::String ch = __o_ch.Default(HX_HCSTRING("|","\x7c","\x00","\x00","\x00"));
::String ch2 = __o_ch2.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_101_replacechar)
HXDLIN( 101)		return ::StringTools_obj::replace(currentstring,ch,ch2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(S_obj,replacechar,return )

::String S_obj::getlastbranch(::String currentstring,::String ch){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_105_getlastbranch)
HXLINE( 106)		int i = (currentstring.length - (int)1);
HXLINE( 107)		while((i >= (int)0)){
HXLINE( 108)			if ((currentstring.substr(i,(int)1) == ch)) {
HXLINE( 109)				return currentstring.substr((i + (int)1),((currentstring.length - i) - (int)1));
            			}
HXLINE( 111)			i = (i - (int)1);
            		}
HXLINE( 113)		return currentstring;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,getlastbranch,return )

::String S_obj::getroot(::String currentstring,::String ch){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_117_getroot)
HXLINE( 118)		{
HXLINE( 118)			int _g1 = (int)0;
HXDLIN( 118)			int _g = currentstring.length;
HXDLIN( 118)			while((_g1 < _g)){
HXLINE( 118)				_g1 = (_g1 + (int)1);
HXDLIN( 118)				int i = (_g1 - (int)1);
HXLINE( 119)				if ((currentstring.substr(i,(int)1) == ch)) {
HXLINE( 120)					return currentstring.substr((int)0,i);
            				}
            			}
            		}
HXLINE( 123)		return currentstring;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,getroot,return )

::String S_obj::getbranch(::String currentstring,::String ch){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_127_getbranch)
HXLINE( 128)		{
HXLINE( 128)			int _g1 = (int)0;
HXDLIN( 128)			int _g = currentstring.length;
HXDLIN( 128)			while((_g1 < _g)){
HXLINE( 128)				_g1 = (_g1 + (int)1);
HXDLIN( 128)				int i = (_g1 - (int)1);
HXLINE( 129)				if ((currentstring.substr(i,(int)1) == ch)) {
HXLINE( 130)					return currentstring.substr((i + (int)1),((currentstring.length - i) - (int)1));
            				}
            			}
            		}
HXLINE( 133)		return currentstring;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(S_obj,getbranch,return )

::String S_obj::getbetweenbrackets(::String currentstring){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_137_getbetweenbrackets)
HXLINE( 138)		while(true){
HXLINE( 138)			bool _hx_tmp;
HXDLIN( 138)			if ((currentstring.substr((int)0,(int)1) != HX_("(",28,00,00,00))) {
HXLINE( 138)				_hx_tmp = (currentstring.length > (int)0);
            			}
            			else {
HXLINE( 138)				_hx_tmp = false;
            			}
HXDLIN( 138)			if (!(_hx_tmp)) {
HXLINE( 138)				goto _hx_goto_25;
            			}
HXDLIN( 138)			currentstring = currentstring.substr((int)1,(currentstring.length - (int)1));
            		}
            		_hx_goto_25:;
HXLINE( 139)		while(true){
HXLINE( 139)			bool _hx_tmp1;
HXDLIN( 139)			if ((currentstring.substr((currentstring.length - (int)1),(int)1) != HX_(")",29,00,00,00))) {
HXLINE( 139)				_hx_tmp1 = (currentstring.length > (int)0);
            			}
            			else {
HXLINE( 139)				_hx_tmp1 = false;
            			}
HXDLIN( 139)			if (!(_hx_tmp1)) {
HXLINE( 139)				goto _hx_goto_26;
            			}
HXDLIN( 139)			currentstring = currentstring.substr((int)0,(currentstring.length - (int)1));
            		}
            		_hx_goto_26:;
HXLINE( 141)		if ((currentstring.length <= (int)0)) {
HXLINE( 141)			return HX_("",00,00,00,00);
            		}
HXLINE( 142)		return currentstring.substr((int)1,(currentstring.length - (int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(S_obj,getbetweenbrackets,return )

::String S_obj::trimspaces(::String currentstring){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_146_trimspaces)
HXLINE( 147)		while(true){
HXLINE( 147)			bool _hx_tmp;
HXDLIN( 147)			if ((currentstring.substr((int)0,(int)1) == HX_(" ",20,00,00,00))) {
HXLINE( 147)				_hx_tmp = (currentstring.length > (int)0);
            			}
            			else {
HXLINE( 147)				_hx_tmp = false;
            			}
HXDLIN( 147)			if (!(_hx_tmp)) {
HXLINE( 147)				goto _hx_goto_28;
            			}
HXDLIN( 147)			currentstring = currentstring.substr((int)1,(currentstring.length - (int)1));
            		}
            		_hx_goto_28:;
HXLINE( 148)		while(true){
HXLINE( 148)			bool _hx_tmp1;
HXDLIN( 148)			if ((currentstring.substr((currentstring.length - (int)1),(int)1) == HX_(" ",20,00,00,00))) {
HXLINE( 148)				_hx_tmp1 = (currentstring.length > (int)0);
            			}
            			else {
HXLINE( 148)				_hx_tmp1 = false;
            			}
HXDLIN( 148)			if (!(_hx_tmp1)) {
HXLINE( 148)				goto _hx_goto_29;
            			}
HXDLIN( 148)			currentstring = currentstring.substr((int)0,(currentstring.length - (int)1));
            		}
            		_hx_goto_29:;
HXLINE( 150)		while(true){
HXLINE( 150)			bool _hx_tmp2;
HXDLIN( 150)			if ((currentstring.substr((int)0,(int)1) == HX_("\t",09,00,00,00))) {
HXLINE( 150)				_hx_tmp2 = (currentstring.length > (int)0);
            			}
            			else {
HXLINE( 150)				_hx_tmp2 = false;
            			}
HXDLIN( 150)			if (!(_hx_tmp2)) {
HXLINE( 150)				goto _hx_goto_30;
            			}
HXDLIN( 150)			currentstring = currentstring.substr((int)1,(currentstring.length - (int)1));
            		}
            		_hx_goto_30:;
HXLINE( 151)		while(true){
HXLINE( 151)			bool _hx_tmp3;
HXDLIN( 151)			if ((currentstring.substr((currentstring.length - (int)1),(int)1) == HX_("\t",09,00,00,00))) {
HXLINE( 151)				_hx_tmp3 = (currentstring.length > (int)0);
            			}
            			else {
HXLINE( 151)				_hx_tmp3 = false;
            			}
HXDLIN( 151)			if (!(_hx_tmp3)) {
HXLINE( 151)				goto _hx_goto_31;
            			}
HXDLIN( 151)			currentstring = currentstring.substr((int)0,(currentstring.length - (int)1));
            		}
            		_hx_goto_31:;
HXLINE( 153)		if ((currentstring.length <= (int)0)) {
HXLINE( 153)			return HX_("",00,00,00,00);
            		}
HXLINE( 154)		return currentstring;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(S_obj,trimspaces,return )

bool S_obj::isnumber(::String currentstring){
            	HX_STACKFRAME(&_hx_pos_5aa21b9a07cd5115_159_isnumber)
HXDLIN( 159)		if (::Math_obj::isNaN(::Std_obj::parseFloat(currentstring))) {
HXLINE( 160)			return false;
            		}
            		else {
HXLINE( 162)			return true;
            		}
HXLINE( 159)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(S_obj,isnumber,return )


S_obj::S_obj()
{
}

bool S_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mid") ) { outValue = mid_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"join") ) { outValue = join_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"left") ) { outValue = left_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { outValue = split_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"right") ) { outValue = right_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getroot") ) { outValue = getroot_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"seperate") ) { outValue = seperate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"letterat") ) { outValue = letterat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isnumber") ) { outValue = isnumber_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"asciicode") ) { outValue = asciicode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromascii") ) { outValue = fromascii_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"uppercase") ) { outValue = uppercase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lowercase") ) { outValue = lowercase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getbranch") ) { outValue = getbranch_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isinstring") ) { outValue = isinstring_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimspaces") ) { outValue = trimspaces_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"reversetext") ) { outValue = reversetext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"replacechar") ) { outValue = replacechar_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getlastbranch") ) { outValue = getlastbranch_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"removefromleft") ) { outValue = removefromleft_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removefromright") ) { outValue = removefromright_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removefromstring") ) { outValue = removefromstring_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"positioninstring") ) { outValue = positioninstring_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getbetweenbrackets") ) { outValue = getbetweenbrackets_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *S_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *S_obj_sStaticStorageInfo = 0;
#endif

static void S_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(S_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void S_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(S_obj::__mClass,"__mClass");
};

#endif

hx::Class S_obj::__mClass;

static ::String S_obj_sStaticFields[] = {
	HX_HCSTRING("asciicode","\xfe","\x76","\x3f","\x66"),
	HX_HCSTRING("fromascii","\xa7","\xc3","\x88","\x47"),
	HX_HCSTRING("join","\xea","\x33","\x65","\x46"),
	HX_HCSTRING("seperate","\x67","\x71","\xb6","\x54"),
	HX_HCSTRING("uppercase","\x12","\x91","\x3e","\xe7"),
	HX_HCSTRING("lowercase","\x31","\xad","\xa5","\x66"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	HX_HCSTRING("removefromstring","\xff","\xd2","\xd7","\xe2"),
	HX_HCSTRING("isinstring","\x60","\x54","\x17","\x06"),
	HX_HCSTRING("positioninstring","\x1f","\xf0","\x12","\xdd"),
	HX_HCSTRING("letterat","\x59","\x87","\x3a","\xf8"),
	HX_HCSTRING("mid","\x88","\x11","\x53","\x00"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("removefromleft","\xb5","\x2a","\x47","\xab"),
	HX_HCSTRING("removefromright","\x6e","\x41","\x0b","\xaa"),
	HX_HCSTRING("reversetext","\xcf","\x3e","\xa6","\x00"),
	HX_HCSTRING("replacechar","\x0a","\xd1","\x81","\x6b"),
	HX_HCSTRING("getlastbranch","\x8e","\xc5","\x20","\x0f"),
	HX_HCSTRING("getroot","\xb8","\x71","\x58","\x33"),
	HX_HCSTRING("getbranch","\xb8","\x13","\xdb","\x5a"),
	HX_HCSTRING("getbetweenbrackets","\x3d","\x0f","\x2f","\x27"),
	HX_HCSTRING("trimspaces","\x4f","\x13","\xe8","\xf3"),
	HX_HCSTRING("isnumber","\x33","\xae","\x4f","\xc5"),
	::String(null())
};

void S_obj::__register()
{
	hx::Object *dummy = new S_obj;
	S_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.S","\x45","\x11","\x43","\xd6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &S_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = S_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(S_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< S_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = S_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = S_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = S_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
