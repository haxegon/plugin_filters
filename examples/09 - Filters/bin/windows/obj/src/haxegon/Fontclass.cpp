// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Fontclass
#include <haxegon/Fontclass.h>
#endif
#ifndef INCLUDED_haxegon_Fontfile
#include <haxegon/Fontfile.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_text_TextField
#include <starling/text/TextField.h>
#endif
#ifndef INCLUDED_starling_text_TextFormat
#include <starling/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_92c2c274249298c1_13_new,"haxegon.Fontclass","new",0x83a5894d,"haxegon.Fontclass.new","haxegon/Text.hx",13,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_92c2c274249298c1_19_loadfont,"haxegon.Fontclass","loadfont",0x0d8ecee8,"haxegon.Fontclass.loadfont","haxegon/Text.hx",19,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_92c2c274249298c1_28_inittextfield,"haxegon.Fontclass","inittextfield",0x3d119b0a,"haxegon.Fontclass.inittextfield","haxegon/Text.hx",28,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_92c2c274249298c1_38_reset,"haxegon.Fontclass","reset",0x2cabd7fc,"haxegon.Fontclass.reset","haxegon/Text.hx",38,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_92c2c274249298c1_41_nexttextfield,"haxegon.Fontclass","nexttextfield",0xd7217cc7,"haxegon.Fontclass.nexttextfield","haxegon/Text.hx",41,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_92c2c274249298c1_48_updatebounds,"haxegon.Fontclass","updatebounds",0xc6f4fab1,"haxegon.Fontclass.updatebounds","haxegon/Text.hx",48,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_92c2c274249298c1_59_get_width,"haxegon.Fontclass","get_width",0x50d6bb0a,"haxegon.Fontclass.get_width","haxegon/Text.hx",59,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_92c2c274249298c1_65_get_height,"haxegon.Fontclass","get_height",0x215c6663,"haxegon.Fontclass.get_height","haxegon/Text.hx",65,0xb667cca2)
namespace haxegon{

void Fontclass_obj::__construct(::String _name,Float _size){
            	HX_STACKFRAME(&_hx_pos_92c2c274249298c1_13_new)
HXLINE(  14)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Text_obj::fontfile;
HXDLIN(  14)		::Dynamic this1 = ::haxegon::Text_obj::fontfileindex;
HXDLIN(  14)		this->type = _hx_tmp->__get(( (int)(( ( ::haxe::ds::StringMap)(this1) )->get(_name.toLowerCase())) )).StaticCast<  ::haxegon::Fontfile >()->type;
HXLINE(  15)		this->loadfont(_name,_size);
HXLINE(  16)		this->nexttextfield();
            	}

Dynamic Fontclass_obj::__CreateEmpty() { return new Fontclass_obj; }

void *Fontclass_obj::_hx_vtable = 0;

Dynamic Fontclass_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Fontclass_obj > _hx_result = new Fontclass_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Fontclass_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7bd0d65d;
}

void Fontclass_obj::loadfont(::String _name,Float _size){
            	HX_STACKFRAME(&_hx_pos_92c2c274249298c1_19_loadfont)
HXLINE(  20)		this->name = _name.toLowerCase();
HXLINE(  21)		this->size = _size;
HXLINE(  23)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Text_obj::fontfile;
HXDLIN(  23)		this->fontfile = _hx_tmp->__get(( (int)(::haxegon::Text_obj::fontfileindex->get(_name)) )).StaticCast<  ::haxegon::Fontfile >();
HXLINE(  24)		this->tflist = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  25)		::Array< ::Dynamic> _hx_tmp1 = this->tflist;
HXDLIN(  25)		_hx_tmp1->push(this->inittextfield());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Fontclass_obj,loadfont,(void))

 ::starling::text::TextField Fontclass_obj::inittextfield(){
            	HX_GC_STACKFRAME(&_hx_pos_92c2c274249298c1_28_inittextfield)
HXLINE(  29)		 ::starling::text::TextField newtf =  ::starling::text::TextField_obj::__alloc( HX_CTX ,::haxegon::Gfx_obj::screenwidth,::haxegon::Gfx_obj::screenheight,HX_("XYZ",39,14,43,00),null());
HXLINE(  30)		 ::starling::text::TextFormat _hx_tmp = newtf->get_format();
HXDLIN(  30)		::String _hx_tmp1 = this->fontfile->_hx_typename;
HXDLIN(  30)		_hx_tmp->setTo(_hx_tmp1,(this->fontfile->sizescale * this->size),null(),null(),null());
HXLINE(  31)		newtf->get_format()->set_horizontalAlign(HX_("left",07,08,b0,47));
HXLINE(  32)		newtf->get_format()->set_verticalAlign(HX_("top",95,66,58,00));
HXLINE(  34)		return newtf;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Fontclass_obj,inittextfield,return )

void Fontclass_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_92c2c274249298c1_38_reset)
HXDLIN(  38)		this->currenttextfield = (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Fontclass_obj,reset,(void))

void Fontclass_obj::nexttextfield(){
            	HX_STACKFRAME(&_hx_pos_92c2c274249298c1_41_nexttextfield)
HXLINE(  42)		this->currenttextfield++;
HXLINE(  43)		if ((this->currenttextfield >= this->tflist->length)) {
HXLINE(  43)			::Array< ::Dynamic> _hx_tmp = this->tflist;
HXDLIN(  43)			_hx_tmp->push(this->inittextfield());
            		}
HXLINE(  45)		this->tf = this->tflist->__get(this->currenttextfield).StaticCast<  ::starling::text::TextField >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Fontclass_obj,nexttextfield,(void))

void Fontclass_obj::updatebounds(){
            	HX_STACKFRAME(&_hx_pos_92c2c274249298c1_48_updatebounds)
HXLINE(  49)		this->tf->set_width(::haxegon::Gfx_obj::screenwidth);
HXLINE(  50)		this->tf->set_height(::haxegon::Gfx_obj::screenheight);
HXLINE(  52)		 ::starling::text::TextField _hx_tmp = this->tf;
HXDLIN(  52)		_hx_tmp->set_wordWrap((::haxegon::Text_obj::wordwrapwidth > (int)0));
HXLINE(  53)		Float _hx_tmp1;
HXDLIN(  53)		if ((::haxegon::Text_obj::wordwrapwidth > (int)0)) {
HXLINE(  53)			_hx_tmp1 = ::haxegon::Text_obj::wordwrapwidth;
            		}
            		else {
HXLINE(  53)			_hx_tmp1 = ::haxegon::Gfx_obj::screenwidth;
            		}
HXDLIN(  53)		this->tf->set_width(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Fontclass_obj,updatebounds,(void))

Float Fontclass_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_92c2c274249298c1_59_get_width)
HXDLIN(  59)		return this->tf->get_textBounds()->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Fontclass_obj,get_width,return )

Float Fontclass_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_92c2c274249298c1_65_get_height)
HXDLIN(  65)		return this->tf->get_textBounds()->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Fontclass_obj,get_height,return )


hx::ObjectPtr< Fontclass_obj > Fontclass_obj::__new(::String _name,Float _size) {
	hx::ObjectPtr< Fontclass_obj > __this = new Fontclass_obj();
	__this->__construct(_name,_size);
	return __this;
}

hx::ObjectPtr< Fontclass_obj > Fontclass_obj::__alloc(hx::Ctx *_hx_ctx,::String _name,Float _size) {
	Fontclass_obj *__this = (Fontclass_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Fontclass_obj), true, "haxegon.Fontclass"));
	*(void **)__this = Fontclass_obj::_hx_vtable;
	__this->__construct(_name,_size);
	return __this;
}

Fontclass_obj::Fontclass_obj()
{
}

void Fontclass_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Fontclass);
	HX_MARK_MEMBER_NAME(tf,"tf");
	HX_MARK_MEMBER_NAME(tflist,"tflist");
	HX_MARK_MEMBER_NAME(currenttextfield,"currenttextfield");
	HX_MARK_MEMBER_NAME(fontfile,"fontfile");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_END_CLASS();
}

void Fontclass_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tf,"tf");
	HX_VISIT_MEMBER_NAME(tflist,"tflist");
	HX_VISIT_MEMBER_NAME(currenttextfield,"currenttextfield");
	HX_VISIT_MEMBER_NAME(fontfile,"fontfile");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(size,"size");
}

hx::Val Fontclass_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tf") ) { return hx::Val( tf ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_width() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_height() ); }
		if (HX_FIELD_EQ(inName,"tflist") ) { return hx::Val( tflist ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadfont") ) { return hx::Val( loadfont_dyn() ); }
		if (HX_FIELD_EQ(inName,"fontfile") ) { return hx::Val( fontfile ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updatebounds") ) { return hx::Val( updatebounds_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"inittextfield") ) { return hx::Val( inittextfield_dyn() ); }
		if (HX_FIELD_EQ(inName,"nexttextfield") ) { return hx::Val( nexttextfield_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currenttextfield") ) { return hx::Val( currenttextfield ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Fontclass_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tf") ) { tf=inValue.Cast<  ::starling::text::TextField >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tflist") ) { tflist=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fontfile") ) { fontfile=inValue.Cast<  ::haxegon::Fontfile >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currenttextfield") ) { currenttextfield=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Fontclass_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("tf","\x72","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("tflist","\xd0","\x22","\xf8","\x63"));
	outFields->push(HX_HCSTRING("currenttextfield","\x94","\x49","\xb1","\x57"));
	outFields->push(HX_HCSTRING("fontfile","\xcb","\xbf","\x60","\xdb"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Fontclass_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::text::TextField*/ ,(int)offsetof(Fontclass_obj,tf),HX_HCSTRING("tf","\x72","\x65","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Fontclass_obj,tflist),HX_HCSTRING("tflist","\xd0","\x22","\xf8","\x63")},
	{hx::fsInt,(int)offsetof(Fontclass_obj,currenttextfield),HX_HCSTRING("currenttextfield","\x94","\x49","\xb1","\x57")},
	{hx::fsObject /*::haxegon::Fontfile*/ ,(int)offsetof(Fontclass_obj,fontfile),HX_HCSTRING("fontfile","\xcb","\xbf","\x60","\xdb")},
	{hx::fsString,(int)offsetof(Fontclass_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(Fontclass_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(Fontclass_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Fontclass_obj_sStaticStorageInfo = 0;
#endif

static ::String Fontclass_obj_sMemberFields[] = {
	HX_HCSTRING("loadfont","\xf5","\x02","\x87","\xc9"),
	HX_HCSTRING("inittextfield","\xdd","\x97","\x80","\xdf"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("nexttextfield","\x9a","\x79","\x90","\x79"),
	HX_HCSTRING("updatebounds","\x3e","\xb9","\x4c","\x31"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("tf","\x72","\x65","\x00","\x00"),
	HX_HCSTRING("tflist","\xd0","\x22","\xf8","\x63"),
	HX_HCSTRING("currenttextfield","\x94","\x49","\xb1","\x57"),
	HX_HCSTRING("fontfile","\xcb","\xbf","\x60","\xdb"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	::String(null()) };

static void Fontclass_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Fontclass_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Fontclass_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Fontclass_obj::__mClass,"__mClass");
};

#endif

hx::Class Fontclass_obj::__mClass;

void Fontclass_obj::__register()
{
	hx::Object *dummy = new Fontclass_obj;
	Fontclass_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Fontclass","\xdb","\xde","\xe1","\xd2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Fontclass_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Fontclass_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Fontclass_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Fontclass_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Fontclass_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Fontclass_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
