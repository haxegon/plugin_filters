// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxegon_HaxegonTileset
#include <haxegon/HaxegonTileset.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_35eb57cf34ade860_32_new,"haxegon.HaxegonTileset","new",0x023a4214,"haxegon.HaxegonTileset.new","haxegon/Gfx.hx",32,0xa6405f94)
namespace haxegon{

void HaxegonTileset_obj::__construct(::String n,int w,int h){
            	HX_STACKFRAME(&_hx_pos_35eb57cf34ade860_32_new)
HXLINE(  33)		this->name = n;
HXLINE(  34)		this->width = w;
HXLINE(  35)		this->height = h;
HXLINE(  37)		this->tiles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  39)		this->sharedatlas = true;
            	}

Dynamic HaxegonTileset_obj::__CreateEmpty() { return new HaxegonTileset_obj; }

void *HaxegonTileset_obj::_hx_vtable = 0;

Dynamic HaxegonTileset_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HaxegonTileset_obj > _hx_result = new HaxegonTileset_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool HaxegonTileset_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1fff5bf4;
}


hx::ObjectPtr< HaxegonTileset_obj > HaxegonTileset_obj::__new(::String n,int w,int h) {
	hx::ObjectPtr< HaxegonTileset_obj > __this = new HaxegonTileset_obj();
	__this->__construct(n,w,h);
	return __this;
}

hx::ObjectPtr< HaxegonTileset_obj > HaxegonTileset_obj::__alloc(hx::Ctx *_hx_ctx,::String n,int w,int h) {
	HaxegonTileset_obj *__this = (HaxegonTileset_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HaxegonTileset_obj), true, "haxegon.HaxegonTileset"));
	*(void **)__this = HaxegonTileset_obj::_hx_vtable;
	__this->__construct(n,w,h);
	return __this;
}

HaxegonTileset_obj::HaxegonTileset_obj()
{
}

void HaxegonTileset_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HaxegonTileset);
	HX_MARK_MEMBER_NAME(tiles,"tiles");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(sharedatlas,"sharedatlas");
	HX_MARK_END_CLASS();
}

void HaxegonTileset_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tiles,"tiles");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(sharedatlas,"sharedatlas");
}

hx::Val HaxegonTileset_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tiles") ) { return hx::Val( tiles ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sharedatlas") ) { return hx::Val( sharedatlas ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HaxegonTileset_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tiles") ) { tiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sharedatlas") ) { sharedatlas=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HaxegonTileset_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("sharedatlas","\x86","\xb8","\x9f","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HaxegonTileset_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(HaxegonTileset_obj,tiles),HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10")},
	{hx::fsString,(int)offsetof(HaxegonTileset_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(HaxegonTileset_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(HaxegonTileset_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsBool,(int)offsetof(HaxegonTileset_obj,sharedatlas),HX_HCSTRING("sharedatlas","\x86","\xb8","\x9f","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HaxegonTileset_obj_sStaticStorageInfo = 0;
#endif

static ::String HaxegonTileset_obj_sMemberFields[] = {
	HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("sharedatlas","\x86","\xb8","\x9f","\xf2"),
	::String(null()) };

static void HaxegonTileset_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HaxegonTileset_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HaxegonTileset_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HaxegonTileset_obj::__mClass,"__mClass");
};

#endif

hx::Class HaxegonTileset_obj::__mClass;

void HaxegonTileset_obj::__register()
{
	hx::Object *dummy = new HaxegonTileset_obj;
	HaxegonTileset_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.HaxegonTileset","\x22","\xe8","\x4a","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HaxegonTileset_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HaxegonTileset_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HaxegonTileset_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HaxegonTileset_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HaxegonTileset_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HaxegonTileset_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
