// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Col
#include <haxegon/Col.h>
#endif
#ifndef INCLUDED_haxegon_Data
#include <haxegon/Data.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_Geom
#include <haxegon/Geom.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_HaxegonImage
#include <haxegon/HaxegonImage.h>
#endif
#ifndef INCLUDED_haxegon_HaxegonTileset
#include <haxegon/HaxegonTileset.h>
#endif
#ifndef INCLUDED_haxegon_S
#include <haxegon/S.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_system_Capabilities
#include <openfl/system/Capabilities.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_Disk
#include <starling/display/Disk.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Line
#include <starling/display/Line.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_MeshBatch
#include <starling/display/MeshBatch.h>
#endif
#ifndef INCLUDED_starling_display_Poly4
#include <starling/display/Poly4.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_display_Ring
#include <starling/display/Ring.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_events_ResizeEvent
#include <starling/events/ResizeEvent.h>
#endif
#ifndef INCLUDED_starling_textures_RenderTexture
#include <starling/textures/RenderTexture.h>
#endif
#ifndef INCLUDED_starling_textures_SubTexture
#include <starling/textures/SubTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif
#ifndef INCLUDED_starling_textures_TextureAtlas
#include <starling/textures/TextureAtlas.h>
#endif
#ifndef INCLUDED_starling_utils_AssetManager
#include <starling/utils/AssetManager.h>
#endif
#ifndef INCLUDED_starling_utils_MeshSubset
#include <starling/utils/MeshSubset.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_73_reset,"haxegon.Gfx","reset",0xe45877ec,"haxegon.Gfx.reset","haxegon/Gfx.hx",73,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_85_reset_ifclear,"haxegon.Gfx","reset_ifclear",0x037c91fd,"haxegon.Gfx.reset_ifclear","haxegon/Gfx.hx",85,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_102_rotation,"haxegon.Gfx","rotation",0x5ff1ff41,"haxegon.Gfx.rotation","haxegon/Gfx.hx",102,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_112_scale,"haxegon.Gfx","scale",0x765efca7,"haxegon.Gfx.scale","haxegon/Gfx.hx",112,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_128_resetalpha,"haxegon.Gfx","resetalpha",0x5267f7f2,"haxegon.Gfx.resetalpha","haxegon/Gfx.hx",128,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_130_set_imagealpha,"haxegon.Gfx","set_imagealpha",0x2ab61523,"haxegon.Gfx.set_imagealpha","haxegon/Gfx.hx",130,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_139_get_imagealpha,"haxegon.Gfx","get_imagealpha",0x0a962caf,"haxegon.Gfx.get_imagealpha","haxegon/Gfx.hx",139,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_144_resetcolor,"haxegon.Gfx","resetcolor",0x7b2dc1f7,"haxegon.Gfx.resetcolor","haxegon/Gfx.hx",144,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_146_set_imagecolor,"haxegon.Gfx","set_imagecolor",0x537bdf28,"haxegon.Gfx.set_imagecolor","haxegon/Gfx.hx",146,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_156_get_imagecolor,"haxegon.Gfx","get_imagecolor",0x335bf6b4,"haxegon.Gfx.get_imagecolor","haxegon/Gfx.hx",156,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_159_numberoftiles,"haxegon.Gfx","numberoftiles",0x664f3082,"haxegon.Gfx.numberoftiles","haxegon/Gfx.hx",159,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_166_changetileset,"haxegon.Gfx","changetileset",0x2cde10e1,"haxegon.Gfx.changetileset","haxegon/Gfx.hx",166,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_178_loadtiles,"haxegon.Gfx","loadtiles",0xbf1cda3c,"haxegon.Gfx.loadtiles","haxegon/Gfx.hx",178,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_227_addblanktiles,"haxegon.Gfx","addblanktiles",0xc474662f,"haxegon.Gfx.addblanktiles","haxegon/Gfx.hx",227,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_248_createtiles,"haxegon.Gfx","createtiles",0xc157e6e6,"haxegon.Gfx.createtiles","haxegon/Gfx.hx",248,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_302_tilewidth,"haxegon.Gfx","tilewidth",0xe96ea4b5,"haxegon.Gfx.tilewidth","haxegon/Gfx.hx",302,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_308_tileheight,"haxegon.Gfx","tileheight",0x0db0f258,"haxegon.Gfx.tileheight","haxegon/Gfx.hx",308,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_314_getassetpackedtexture,"haxegon.Gfx","getassetpackedtexture",0x851146a6,"haxegon.Gfx.getassetpackedtexture","haxegon/Gfx.hx",314,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_326_loadimagefrompackedtexture,"haxegon.Gfx","loadimagefrompackedtexture",0x940fe067,"haxegon.Gfx.loadimagefrompackedtexture","haxegon/Gfx.hx",326,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_336_loadimage,"haxegon.Gfx","loadimage",0x6c50fc12,"haxegon.Gfx.loadimage","haxegon/Gfx.hx",336,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_363_createimage,"haxegon.Gfx","createimage",0x6e8c08bc,"haxegon.Gfx.createimage","haxegon/Gfx.hx",363,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_386_imagewidth,"haxegon.Gfx","imagewidth",0x1e65958e,"haxegon.Gfx.imagewidth","haxegon/Gfx.hx",386,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_396_imageheight,"haxegon.Gfx","imageheight",0x30ccbf5f,"haxegon.Gfx.imageheight","haxegon/Gfx.hx",396,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_406_promotetorendertarget,"haxegon.Gfx","promotetorendertarget",0x2371093f,"haxegon.Gfx.promotetorendertarget","haxegon/Gfx.hx",406,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_420_drawtoscreen,"haxegon.Gfx","drawtoscreen",0x95f1beae,"haxegon.Gfx.drawtoscreen","haxegon/Gfx.hx",420,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_431_drawtoimage,"haxegon.Gfx","drawtoimage",0x8d8c3a59,"haxegon.Gfx.drawtoimage","haxegon/Gfx.hx",431,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_449_drawtotile,"haxegon.Gfx","drawtotile",0x806e99f0,"haxegon.Gfx.drawtotile","haxegon/Gfx.hx",449,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_479_imagealignx,"haxegon.Gfx","imagealignx",0x6c1b4d8b,"haxegon.Gfx.imagealignx","haxegon/Gfx.hx",479,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_497_imagealigny,"haxegon.Gfx","imagealigny",0x6c1b4d8c,"haxegon.Gfx.imagealigny","haxegon/Gfx.hx",497,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_515_imagealignonimagex,"haxegon.Gfx","imagealignonimagex",0x32019e69,"haxegon.Gfx.imagealignonimagex","haxegon/Gfx.hx",515,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_533_imagealignonimagey,"haxegon.Gfx","imagealignonimagey",0x32019e6a,"haxegon.Gfx.imagealignonimagey","haxegon/Gfx.hx",533,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_550_internaldrawimage,"haxegon.Gfx","internaldrawimage",0x65f59397,"haxegon.Gfx.internaldrawimage","haxegon/Gfx.hx",550,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_591_drawimage,"haxegon.Gfx","drawimage",0x1924e574,"haxegon.Gfx.drawimage","haxegon/Gfx.hx",591,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_614_drawsubimage,"haxegon.Gfx","drawsubimage",0xfb455562,"haxegon.Gfx.drawsubimage","haxegon/Gfx.hx",614,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_649_grabtilefromscreen,"haxegon.Gfx","grabtilefromscreen",0xf0757d93,"haxegon.Gfx.grabtilefromscreen","haxegon/Gfx.hx",649,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_675_grabtilefromimage,"haxegon.Gfx","grabtilefromimage",0x9ce09f14,"haxegon.Gfx.grabtilefromimage","haxegon/Gfx.hx",675,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_706_grabimagefromscreen,"haxegon.Gfx","grabimagefromscreen",0xd71e6802,"haxegon.Gfx.grabimagefromscreen","haxegon/Gfx.hx",706,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_726_grabimagefromimage,"haxegon.Gfx","grabimagefromimage",0x3ea11785,"haxegon.Gfx.grabimagefromimage","haxegon/Gfx.hx",726,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_754_copytile,"haxegon.Gfx","copytile",0x3e2dc766,"haxegon.Gfx.copytile","haxegon/Gfx.hx",754,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_774_drawsubtile,"haxegon.Gfx","drawsubtile",0xc6f37307,"haxegon.Gfx.drawsubtile","haxegon/Gfx.hx",774,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_815_drawtile,"haxegon.Gfx","drawtile",0xcdf90b35,"haxegon.Gfx.drawtile","haxegon/Gfx.hx",815,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_840_tilealignx,"haxegon.Gfx","tilealignx",0x48ff8084,"haxegon.Gfx.tilealignx","haxegon/Gfx.hx",840,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_847_tilealigny,"haxegon.Gfx","tilealigny",0x48ff8085,"haxegon.Gfx.tilealigny","haxegon/Gfx.hx",847,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_854_tilealignontilex,"haxegon.Gfx","tilealignontilex",0x53e63d17,"haxegon.Gfx.tilealignontilex","haxegon/Gfx.hx",854,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_861_tilealignontiley,"haxegon.Gfx","tilealignontiley",0x53e63d18,"haxegon.Gfx.tilealignontiley","haxegon/Gfx.hx",861,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_868_drawline,"haxegon.Gfx","drawline",0xc8af57fb,"haxegon.Gfx.drawline","haxegon/Gfx.hx",868,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_882_drawhexagon,"haxegon.Gfx","drawhexagon",0x3611c639,"haxegon.Gfx.drawhexagon","haxegon/Gfx.hx",882,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_899_fillhexagon,"haxegon.Gfx","fillhexagon",0x1065019a,"haxegon.Gfx.fillhexagon","haxegon/Gfx.hx",899,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_916_drawcircle,"haxegon.Gfx","drawcircle",0x3e9f01d7,"haxegon.Gfx.drawcircle","haxegon/Gfx.hx",916,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_933_fillcircle,"haxegon.Gfx","fillcircle",0x00760d96,"haxegon.Gfx.fillcircle","haxegon/Gfx.hx",933,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_950_drawtri,"haxegon.Gfx","drawtri",0xa07e4704,"haxegon.Gfx.drawtri","haxegon/Gfx.hx",950,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_958_filltri,"haxegon.Gfx","filltri",0xa895fde5,"haxegon.Gfx.filltri","haxegon/Gfx.hx",958,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_971_drawbox,"haxegon.Gfx","drawbox",0xa0709be4,"haxegon.Gfx.drawbox","haxegon/Gfx.hx",971,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_989_fillbox,"haxegon.Gfx","fillbox",0xa88852c5,"haxegon.Gfx.fillbox","haxegon/Gfx.hx",989,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1005_updatemeshbatch,"haxegon.Gfx","updatemeshbatch",0x226d47e1,"haxegon.Gfx.updatemeshbatch","haxegon/Gfx.hx",1005,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1011_endmeshbatch,"haxegon.Gfx","endmeshbatch",0x1f852af5,"haxegon.Gfx.endmeshbatch","haxegon/Gfx.hx",1011,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1021_endmeshbatchonsurface,"haxegon.Gfx","endmeshbatchonsurface",0xee6d4559,"haxegon.Gfx.endmeshbatchonsurface","haxegon/Gfx.hx",1021,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1033_get_linethickness,"haxegon.Gfx","get_linethickness",0x956eabf4,"haxegon.Gfx.get_linethickness","haxegon/Gfx.hx",1033,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1036_set_linethickness,"haxegon.Gfx","set_linethickness",0xb8dc8400,"haxegon.Gfx.set_linethickness","haxegon/Gfx.hx",1036,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1045_clearscreen,"haxegon.Gfx","clearscreen",0xc18af696,"haxegon.Gfx.clearscreen","haxegon/Gfx.hx",1045,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1059_setpixel,"haxegon.Gfx","setpixel",0x951681a7,"haxegon.Gfx.setpixel","haxegon/Gfx.hx",1059,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1064_getpixel,"haxegon.Gfx","getpixel",0xe6b92833,"haxegon.Gfx.getpixel","haxegon/Gfx.hx",1064,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1178_updategraphicsmode,"haxegon.Gfx","updategraphicsmode",0x078500fa,"haxegon.Gfx.updategraphicsmode","haxegon/Gfx.hx",1178,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1243_getscreenx,"haxegon.Gfx","getscreenx",0x87a9aa79,"haxegon.Gfx.getscreenx","haxegon/Gfx.hx",1243,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1247_getscreeny,"haxegon.Gfx","getscreeny",0x87a9aa7a,"haxegon.Gfx.getscreeny","haxegon/Gfx.hx",1247,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1251_resizescreen,"haxegon.Gfx","resizescreen",0x567f03e3,"haxegon.Gfx.resizescreen","haxegon/Gfx.hx",1251,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1288_get_fullscreen,"haxegon.Gfx","get_fullscreen",0x6a1368c7,"haxegon.Gfx.get_fullscreen","haxegon/Gfx.hx",1288,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1291_set_fullscreen,"haxegon.Gfx","set_fullscreen",0x8a33513b,"haxegon.Gfx.set_fullscreen","haxegon/Gfx.hx",1291,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1311_init,"haxegon.Gfx","init",0x2c76ff93,"haxegon.Gfx.init","haxegon/Gfx.hx",1311,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1326_onresize,"haxegon.Gfx","onresize",0x0aff9e56,"haxegon.Gfx.onresize","haxegon/Gfx.hx",1326,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1338_loadpackedtextures,"haxegon.Gfx","loadpackedtextures",0xbdb7db19,"haxegon.Gfx.loadpackedtextures","haxegon/Gfx.hx",1338,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1368_initgfx,"haxegon.Gfx","initgfx",0x702b3fc6,"haxegon.Gfx.initgfx","haxegon/Gfx.hx",1368,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1399_settrect,"haxegon.Gfx","settrect",0xe89552b9,"haxegon.Gfx.settrect","haxegon/Gfx.hx",1399,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1406_startframe,"haxegon.Gfx","startframe",0x6acf694e,"haxegon.Gfx.startframe","haxegon/Gfx.hx",1406,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1422_endframe,"haxegon.Gfx","endframe",0xc8bf5c75,"haxegon.Gfx.endframe","haxegon/Gfx.hx",1422,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_55_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",55,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_56_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",56,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_57_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",57,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_58_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",58,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_59_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",59,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_60_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",60,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1043_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1043,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1063_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1063,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1429_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1429,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1430_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1430,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1435_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1435,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1436_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1436,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1437_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1437,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1439_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1439,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1440_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1440,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1441_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1441,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1442_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1442,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1443_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1443,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1444_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1444,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1445_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1445,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1448_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1448,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1449_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1449,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1474_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1474,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1475_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1475,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1477_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1477,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1478_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1478,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1479_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1479,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1481_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1481,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1482_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1482,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1483_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1483,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1484_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1484,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_ba5054a55673250e_1485_boot,"haxegon.Gfx","boot",0x27d748b5,"haxegon.Gfx.boot","haxegon/Gfx.hx",1485,0xa6405f94)
namespace haxegon{

void Gfx_obj::__construct() { }

Dynamic Gfx_obj::__CreateEmpty() { return new Gfx_obj; }

void *Gfx_obj::_hx_vtable = 0;

Dynamic Gfx_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Gfx_obj > _hx_result = new Gfx_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Gfx_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x785821b9;
}

int Gfx_obj::MAX_NUM_MESH;

int Gfx_obj::LEFT;

int Gfx_obj::RIGHT;

int Gfx_obj::TOP;

int Gfx_obj::BOTTOM;

int Gfx_obj::CENTER;

int Gfx_obj::screenwidth;

int Gfx_obj::screenheight;

int Gfx_obj::screenwidthmid;

int Gfx_obj::screenheightmid;

int Gfx_obj::devicexres;

int Gfx_obj::deviceyres;

::String Gfx_obj::currenttilesetname;

void Gfx_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_73_reset)
HXLINE(  74)		::haxegon::Gfx_obj::transform = false;
HXLINE(  75)		::haxegon::Gfx_obj::imagerotate = (int)0;
HXLINE(  76)		::haxegon::Gfx_obj::imagerotatexpivot = (int)0;
HXDLIN(  76)		::haxegon::Gfx_obj::imagerotateypivot = (int)0;
HXLINE(  77)		::haxegon::Gfx_obj::imagexscale = ((Float)1.0);
HXDLIN(  77)		::haxegon::Gfx_obj::imageyscale = ((Float)1.0);
HXLINE(  78)		::haxegon::Gfx_obj::imagescalexpivot = (int)0;
HXDLIN(  78)		::haxegon::Gfx_obj::imagescaleypivot = (int)0;
HXLINE(  80)		::haxegon::Gfx_obj::coltransform = false;
HXLINE(  81)		::haxegon::Gfx_obj::imagealphamult = ((Float)1.0);
HXDLIN(  81)		::haxegon::Gfx_obj::imagecolormult = (int)16777215;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,reset,(void))

void Gfx_obj::reset_ifclear(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_85_reset_ifclear)
HXLINE(  86)		if ((::haxegon::Gfx_obj::imagerotate == (int)0)) {
HXLINE(  87)			if ((::haxegon::Gfx_obj::imagexscale == ((Float)1.0))) {
HXLINE(  88)				if ((::haxegon::Gfx_obj::imageyscale == ((Float)1.0))) {
HXLINE(  89)					::haxegon::Gfx_obj::transform = false;
            				}
            			}
            		}
HXLINE(  94)		if ((::haxegon::Gfx_obj::imagealphamult == ((Float)1.0))) {
HXLINE(  95)			if ((::haxegon::Gfx_obj::imagecolormult == (int)16777215)) {
HXLINE(  96)				::haxegon::Gfx_obj::coltransform = false;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,reset_ifclear,(void))

void Gfx_obj::rotation(Float angle,hx::Null< Float >  __o_xpivot,hx::Null< Float >  __o_ypivot){
Float xpivot = __o_xpivot.Default(-15000);
Float ypivot = __o_ypivot.Default(-15000);
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_102_rotation)
HXLINE( 103)		::haxegon::Gfx_obj::imagerotate = angle;
HXLINE( 104)		::haxegon::Gfx_obj::imagerotatexpivot = xpivot;
HXLINE( 105)		::haxegon::Gfx_obj::imagerotateypivot = ypivot;
HXLINE( 106)		::haxegon::Gfx_obj::transform = true;
HXLINE( 107)		::haxegon::Gfx_obj::reset_ifclear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,rotation,(void))

void Gfx_obj::scale( ::Dynamic xscale, ::Dynamic yscale, ::Dynamic __o_xpivot, ::Dynamic __o_ypivot){
 ::Dynamic xpivot = __o_xpivot.Default(-10000);
 ::Dynamic ypivot = __o_ypivot.Default(-10000);
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_112_scale)
HXLINE( 113)		bool _hx_tmp;
HXDLIN( 113)		if (hx::IsNull( xscale )) {
HXLINE( 113)			_hx_tmp = hx::IsNull( yscale );
            		}
            		else {
HXLINE( 113)			_hx_tmp = false;
            		}
HXDLIN( 113)		if (_hx_tmp) {
HXLINE( 114)			xscale = ((Float)1.0);
HXDLIN( 114)			yscale = ((Float)1.0);
            		}
HXLINE( 116)		bool _hx_tmp1;
HXDLIN( 116)		if (hx::IsNull( yscale )) {
HXLINE( 116)			_hx_tmp1 = hx::IsNotNull( xscale );
            		}
            		else {
HXLINE( 116)			_hx_tmp1 = false;
            		}
HXDLIN( 116)		if (_hx_tmp1) {
HXLINE( 116)			yscale = xscale;
            		}
HXLINE( 117)		::haxegon::Gfx_obj::imagexscale = xscale;
HXLINE( 118)		::haxegon::Gfx_obj::imageyscale = yscale;
HXLINE( 119)		::haxegon::Gfx_obj::imagescalexpivot = xpivot;
HXLINE( 120)		::haxegon::Gfx_obj::imagescaleypivot = ypivot;
HXLINE( 122)		::haxegon::Gfx_obj::transform = true;
HXLINE( 123)		::haxegon::Gfx_obj::reset_ifclear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,scale,(void))

void Gfx_obj::resetalpha(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_128_resetalpha)
HXDLIN( 128)		::haxegon::Gfx_obj::set_imagealpha(((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,resetalpha,(void))

Float Gfx_obj::set_imagealpha(Float _alpha){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_130_set_imagealpha)
HXLINE( 131)		::haxegon::Gfx_obj::imagealphamult = _alpha;
HXLINE( 132)		::haxegon::Gfx_obj::coltransform = true;
HXLINE( 133)		::haxegon::Gfx_obj::reset_ifclear();
HXLINE( 135)		return ::haxegon::Gfx_obj::imagealphamult;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,set_imagealpha,return )

Float Gfx_obj::get_imagealpha(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_139_get_imagealpha)
HXDLIN( 139)		return ::haxegon::Gfx_obj::imagealphamult;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,get_imagealpha,return )

void Gfx_obj::resetcolor(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_144_resetcolor)
HXDLIN( 144)		::haxegon::Gfx_obj::set_imagecolor((int)16777215);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,resetcolor,(void))

int Gfx_obj::set_imagecolor(int _color){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_146_set_imagecolor)
HXLINE( 147)		::haxegon::Gfx_obj::imagecolormult = _color;
HXLINE( 149)		::haxegon::Gfx_obj::coltransform = true;
HXLINE( 150)		::haxegon::Gfx_obj::reset_ifclear();
HXLINE( 152)		return ::haxegon::Gfx_obj::imagecolormult;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,set_imagecolor,return )

int Gfx_obj::get_imagecolor(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_156_get_imagecolor)
HXDLIN( 156)		return ::haxegon::Gfx_obj::imagecolormult;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,get_imagecolor,return )

int Gfx_obj::numberoftiles(::String tileset){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_159_numberoftiles)
HXLINE( 160)		::haxegon::Gfx_obj::changetileset(tileset);
HXLINE( 161)		return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,numberoftiles,return )

void Gfx_obj::changetileset(::String tilesetname){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_166_changetileset)
HXDLIN( 166)		if ((::haxegon::Gfx_obj::currenttilesetname != tilesetname)) {
HXLINE( 167)			::haxegon::Gfx_obj::drawstate = (int)0;
HXLINE( 168)			if (::haxegon::Gfx_obj::tilesetindex->exists(tilesetname)) {
HXLINE( 169)				::haxegon::Gfx_obj::currenttileset = ( (int)(::haxegon::Gfx_obj::tilesetindex->get(tilesetname)) );
HXLINE( 170)				::haxegon::Gfx_obj::currenttilesetname = tilesetname;
            			}
            			else {
HXLINE( 172)				::haxegon::Debug_obj::log(((HX_("ERROR: Cannot change to tileset \"",52,68,39,26) + tilesetname) + HX_("\", no tileset with that name found.",0d,af,8b,7a)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),172,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("changetileset",c4,fd,16,d9)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,changetileset,(void))

void Gfx_obj::loadtiles(::String imagename,int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_178_loadtiles)
HXLINE( 179)		imagename = imagename.toLowerCase();
HXLINE( 180)		 ::starling::textures::Texture tex;
HXLINE( 181)		if (::haxegon::Gfx_obj::imageindex->exists(imagename)) {
HXLINE( 184)			tex = ::haxegon::Gfx_obj::getassetpackedtexture(imagename);
            		}
            		else {
HXLINE( 186)			if (::haxegon::Data_obj::assetexists(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".png",3b,2d,bd,1e)))) {
HXLINE( 187)				tex = ::starling::textures::Texture_obj::fromBitmapData(::haxegon::Data_obj::getgraphicsasset(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".png",3b,2d,bd,1e))),false,null(),null(),null(),null(),null());
            			}
            			else {
HXLINE( 188)				if (::haxegon::Data_obj::assetexists(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".jpg",73,a1,b8,1e)))) {
HXLINE( 189)					tex = ::starling::textures::Texture_obj::fromBitmapData(::haxegon::Data_obj::getgraphicsasset(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".jpg",73,a1,b8,1e))),false,null(),null(),null(),null(),null());
            				}
            				else {
HXLINE( 191)					::haxegon::Debug_obj::log(((((HX_("ERROR: In loadtiles, cannot find \"data/graphics/",51,13,53,c8) + imagename) + HX_(".png\" or \"data/graphics/",3d,4e,01,02)) + imagename) + HX_(".jpg\"",4f,a3,d4,c2)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),191,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("loadtiles",9f,d9,3e,98)));
HXLINE( 192)					return;
            				}
            			}
HXLINE( 195)			::haxegon::Gfx_obj::starlingassets->addTexture(imagename,tex);
            		}
HXLINE( 198)		 ::starling::textures::Texture spritesheet = ::haxegon::Gfx_obj::starlingassets->getTexture(imagename);
HXLINE( 200)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Gfx_obj::tiles;
HXDLIN( 200)		_hx_tmp->push( ::haxegon::HaxegonTileset_obj::__alloc( HX_CTX ,imagename,width,height));
HXLINE( 201)		::haxegon::Gfx_obj::tilesetindex->set(imagename,(::haxegon::Gfx_obj::tiles->length - (int)1));
HXLINE( 202)		::haxegon::Gfx_obj::currenttileset = (::haxegon::Gfx_obj::tiles->length - (int)1);
HXLINE( 204)		int tilerows;
HXLINE( 205)		int tilecolumns;
HXLINE( 206)		Float tilecolumns1 = spritesheet->get_width();
HXDLIN( 206)		tilecolumns = ::Std_obj::_hx_int(((Float)(tilecolumns1 - hx::Mod(spritesheet->get_width(),width)) / (Float)width));
HXLINE( 207)		Float tilerows1 = spritesheet->get_height();
HXDLIN( 207)		tilerows = ::Std_obj::_hx_int(((Float)(tilerows1 - hx::Mod(spritesheet->get_height(),height)) / (Float)height));
HXLINE( 209)		int framex = (int)0;
HXLINE( 210)		int framey = (int)0;
HXLINE( 211)		if (hx::IsNotNull( spritesheet->get_frame() )) {
HXLINE( 212)			framex = ::Std_obj::_hx_int(spritesheet->get_frame()->get_left());
HXLINE( 213)			framey = ::Std_obj::_hx_int(spritesheet->get_frame()->get_top());
            		}
HXLINE( 216)		{
HXLINE( 216)			int _g1 = (int)0;
HXDLIN( 216)			int _g = tilerows;
HXDLIN( 216)			while((_g1 < _g)){
HXLINE( 216)				_g1 = (_g1 + (int)1);
HXDLIN( 216)				int j = (_g1 - (int)1);
HXLINE( 217)				{
HXLINE( 217)					int _g3 = (int)0;
HXDLIN( 217)					int _g2 = tilecolumns;
HXDLIN( 217)					while((_g3 < _g2)){
HXLINE( 217)						_g3 = (_g3 + (int)1);
HXDLIN( 217)						int i = (_g3 - (int)1);
HXLINE( 218)						 ::openfl::geom::Rectangle rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(framex + (i * width)),(framey + (j * height)),width,height);
HXLINE( 219)						 ::starling::textures::Texture newtex = ::starling::textures::Texture_obj::fromTexture(spritesheet,rect,null(),null(),null());
HXLINE( 220)						::Array< ::Dynamic> _hx_tmp1 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles;
HXDLIN( 220)						_hx_tmp1->push( ::starling::display::Image_obj::__alloc( HX_CTX ,newtex));
HXLINE( 221)						::Array< ::Dynamic> _hx_tmp2 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles;
HXDLIN( 221)						_hx_tmp2->__get((::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->length - (int)1)).StaticCast<  ::starling::display::Image >()->set_textureSmoothing(HX_("none",b8,12,0a,49));
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,loadtiles,(void))

void Gfx_obj::addblanktiles(::String tilesetname,int num){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_227_addblanktiles)
HXLINE( 228)		int tileset = (int)0;
HXLINE( 229)		if (::haxegon::Gfx_obj::tilesetindex->exists(tilesetname)) {
HXLINE( 230)			tileset = ( (int)(::haxegon::Gfx_obj::tilesetindex->get(tilesetname)) );
            		}
            		else {
HXLINE( 232)			::haxegon::Debug_obj::log(((HX_("ERROR: Cannot add blank tiles to tileset \"",86,35,87,db) + tilesetname) + HX_("\", no tileset with that name found.",0d,af,8b,7a)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),232,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("addblanktiles",12,53,ad,70)));
            		}
HXLINE( 235)		int w = ::Std_obj::_hx_int(::haxegon::Gfx_obj::tiles->__get(tileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get((int)0).StaticCast<  ::starling::display::Image >()->get_width());
HXLINE( 236)		int h = ::Std_obj::_hx_int(::haxegon::Gfx_obj::tiles->__get(tileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get((int)0).StaticCast<  ::starling::display::Image >()->get_height());
HXLINE( 237)		{
HXLINE( 237)			int _g1 = (int)0;
HXDLIN( 237)			int _g = num;
HXDLIN( 237)			while((_g1 < _g)){
HXLINE( 237)				_g1 = (_g1 + (int)1);
HXDLIN( 237)				int i = (_g1 - (int)1);
HXLINE( 238)				 ::starling::textures::Texture tex = ::starling::textures::Texture_obj::fromBitmapData( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,w,h,true,(int)0),false,null(),null(),null(),null(),null());
HXLINE( 239)				 ::starling::display::Image img =  ::starling::display::Image_obj::__alloc( HX_CTX ,tex);
HXLINE( 240)				img->set_touchable(false);
HXLINE( 241)				::haxegon::Gfx_obj::tiles->__get(tileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->push(img);
            			}
            		}
HXLINE( 244)		::haxegon::Gfx_obj::tiles->__get(tileset).StaticCast<  ::haxegon::HaxegonTileset >()->sharedatlas = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,addblanktiles,(void))

void Gfx_obj::createtiles(::String tilesetname,Float width,Float height,int amount){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_248_createtiles)
HXLINE( 249)		 ::Dynamic exindex = ::haxegon::Gfx_obj::tilesetindex->get(tilesetname);
HXLINE( 250)		if (hx::IsNull( exindex )) {
HXLINE( 251)			::Array< ::Dynamic> _hx_tmp = ::haxegon::Gfx_obj::tiles;
HXDLIN( 251)			int _hx_tmp1 = ::Std_obj::_hx_int(width);
HXDLIN( 251)			_hx_tmp->push( ::haxegon::HaxegonTileset_obj::__alloc( HX_CTX ,tilesetname,_hx_tmp1,::Std_obj::_hx_int(height)));
HXLINE( 252)			::haxegon::Gfx_obj::tilesetindex->set(tilesetname,(::haxegon::Gfx_obj::tiles->length - (int)1));
HXLINE( 253)			::haxegon::Gfx_obj::currenttileset = (::haxegon::Gfx_obj::tiles->length - (int)1);
HXLINE( 255)			{
HXLINE( 255)				int _g1 = (int)0;
HXDLIN( 255)				int _g = amount;
HXDLIN( 255)				while((_g1 < _g)){
HXLINE( 255)					_g1 = (_g1 + (int)1);
HXDLIN( 255)					int i = (_g1 - (int)1);
HXLINE( 256)					int tex = ::Math_obj::floor(width);
HXDLIN( 256)					 ::starling::textures::Texture tex1 = ::starling::textures::Texture_obj::fromBitmapData( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,tex,::Math_obj::floor(height),true,(int)0),false,null(),null(),null(),null(),null());
HXLINE( 257)					 ::starling::display::Image img =  ::starling::display::Image_obj::__alloc( HX_CTX ,tex1);
HXLINE( 258)					img->set_touchable(false);
HXLINE( 259)					::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->push(img);
            				}
            			}
HXLINE( 262)			::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->sharedatlas = false;
HXLINE( 263)			::haxegon::Gfx_obj::changetileset(tilesetname);
            		}
            		else {
HXLINE( 265)			::haxegon::Gfx_obj::changetileset(tilesetname);
HXLINE( 266)			::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->sharedatlas = false;
HXLINE( 268)			bool purge;
HXDLIN( 268)			int purge1 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width;
HXDLIN( 268)			if ((purge1 == ::Math_obj::floor(width))) {
HXLINE( 268)				int purge2 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height;
HXDLIN( 268)				purge = (purge2 != ::Math_obj::floor(height));
            			}
            			else {
HXLINE( 268)				purge = true;
            			}
HXLINE( 269)			::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width = ::Math_obj::floor(width);
HXLINE( 270)			::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height = ::Math_obj::floor(height);
HXLINE( 273)			while(true){
HXLINE( 273)				int _hx_tmp2;
HXDLIN( 273)				if (purge) {
HXLINE( 273)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE( 273)					_hx_tmp2 = amount;
            				}
HXDLIN( 273)				if (!((::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->length > _hx_tmp2))) {
HXLINE( 273)					goto _hx_goto_18;
            				}
HXLINE( 274)				 ::starling::display::Image extile = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->pop().StaticCast<  ::starling::display::Image >();
HXLINE( 275)				extile->set_touchable(false);
HXLINE( 276)				extile->get_texture()->dispose();
HXLINE( 277)				extile->dispose();
            			}
            			_hx_goto_18:;
HXLINE( 281)			{
HXLINE( 281)				int _g11 = (int)0;
HXDLIN( 281)				int _g2 = amount;
HXDLIN( 281)				while((_g11 < _g2)){
HXLINE( 281)					_g11 = (_g11 + (int)1);
HXDLIN( 281)					int i1 = (_g11 - (int)1);
HXLINE( 282)					bool _hx_tmp3;
HXDLIN( 282)					bool _hx_tmp4;
HXDLIN( 282)					if ((i1 < ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->length)) {
HXLINE( 282)						_hx_tmp4 = !(purge);
            					}
            					else {
HXLINE( 282)						_hx_tmp4 = false;
            					}
HXDLIN( 282)					if (_hx_tmp4) {
HXLINE( 282)						_hx_tmp3 = ::Std_obj::is(::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(i1).StaticCast<  ::starling::display::Image >()->get_texture(),hx::ClassOf< ::starling::textures::RenderTexture >());
            					}
            					else {
HXLINE( 282)						_hx_tmp3 = false;
            					}
HXDLIN( 282)					if (_hx_tmp3) {
HXLINE( 283)						hx::TCast<  ::starling::textures::RenderTexture >::cast(::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(i1).StaticCast<  ::starling::display::Image >()->get_texture())->clear(null(),null());
            					}
            					else {
HXLINE( 285)						int tex2 = ::Math_obj::floor(width);
HXDLIN( 285)						 ::starling::textures::Texture tex3 = ::starling::textures::Texture_obj::fromBitmapData( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,tex2,::Math_obj::floor(height),true,(int)0),false,null(),null(),null(),null(),null());
HXLINE( 286)						 ::starling::display::Image img1 =  ::starling::display::Image_obj::__alloc( HX_CTX ,tex3);
HXLINE( 287)						img1->set_touchable(false);
HXLINE( 289)						if ((i1 < ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->length)) {
HXLINE( 290)							::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(i1).StaticCast<  ::starling::display::Image >()->get_texture()->dispose();
HXLINE( 291)							::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(i1).StaticCast<  ::starling::display::Image >()->dispose();
HXLINE( 292)							::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles[i1] = img1;
            						}
            						else {
HXLINE( 294)							::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->push(img1);
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,createtiles,(void))

int Gfx_obj::tilewidth(::String tilesetname){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_302_tilewidth)
HXLINE( 303)		::haxegon::Gfx_obj::changetileset(tilesetname);
HXLINE( 304)		return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilewidth,return )

int Gfx_obj::tileheight(::String tilesetname){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_308_tileheight)
HXLINE( 309)		::haxegon::Gfx_obj::changetileset(tilesetname);
HXLINE( 310)		return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tileheight,return )

 ::starling::textures::Texture Gfx_obj::getassetpackedtexture(::String imagename){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_314_getassetpackedtexture)
HXLINE( 315)		 ::starling::textures::Texture bd = null();
HXLINE( 316)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 317)			bd = ::haxegon::Gfx_obj::starlingassets->getTexture(imagename);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 319)				::haxegon::Debug_obj::log(((HX_("ERROR: Cannot find ",58,da,26,f4) + imagename) + HX_(".png in packed textures.",84,c6,04,8c)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),319,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("getassetpackedtexture",89,4e,26,c2)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 321)		return bd;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,getassetpackedtexture,return )

void Gfx_obj::loadimagefrompackedtexture(::String imagename, ::starling::textures::Texture tex){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_326_loadimagefrompackedtexture)
HXLINE( 327)		::haxegon::Gfx_obj::imageindex->set(imagename,::haxegon::Gfx_obj::images->length);
HXLINE( 328)		::haxegon::Gfx_obj::haxegonimage =  ::haxegon::HaxegonImage_obj::__alloc( HX_CTX ,imagename);
HXLINE( 329)		::haxegon::Gfx_obj::haxegonimage->contents =  ::starling::display::Image_obj::__alloc( HX_CTX ,tex);
HXLINE( 330)		::haxegon::Gfx_obj::haxegonimage->fetchsize();
HXLINE( 331)		::haxegon::Gfx_obj::images->push(::haxegon::Gfx_obj::haxegonimage);
HXLINE( 332)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Gfx_obj::images;
HXDLIN( 332)		_hx_tmp->__get((::haxegon::Gfx_obj::images->length - (int)1)).StaticCast<  ::haxegon::HaxegonImage >()->contents->set_textureSmoothing(HX_("none",b8,12,0a,49));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,loadimagefrompackedtexture,(void))

void Gfx_obj::loadimage(::String imagename){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_336_loadimage)
HXLINE( 337)		imagename = imagename.toLowerCase();
HXLINE( 338)		if (::haxegon::Gfx_obj::imageindex->exists(imagename)) {
HXLINE( 338)			return;
            		}
HXLINE( 340)		 ::starling::textures::Texture tex;
HXLINE( 341)		if (::haxegon::Data_obj::assetexists(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".png",3b,2d,bd,1e)))) {
HXLINE( 342)			tex = ::starling::textures::Texture_obj::fromBitmapData(::haxegon::Data_obj::getgraphicsasset(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".png",3b,2d,bd,1e))),false,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE( 343)			if (::haxegon::Data_obj::assetexists(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".jpg",73,a1,b8,1e)))) {
HXLINE( 344)				tex = ::starling::textures::Texture_obj::fromBitmapData(::haxegon::Data_obj::getgraphicsasset(((HX_("data/graphics/",9f,29,e6,6e) + imagename) + HX_(".jpg",73,a1,b8,1e))),false,null(),null(),null(),null(),null());
            			}
            			else {
HXLINE( 346)				::haxegon::Debug_obj::log(((((HX_("ERROR: In loadimage, cannot find \"data/graphics/",bb,f7,16,09) + imagename) + HX_(".png\" or \"data/graphics/",3d,4e,01,02)) + imagename) + HX_(".jpg\"",4f,a3,d4,c2)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),346,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("loadimage",75,fb,72,45)));
HXLINE( 347)				return;
            			}
            		}
HXLINE( 349)		::haxegon::Gfx_obj::starlingassets->addTexture(imagename,tex);
HXLINE( 351)		::haxegon::Gfx_obj::imageindex->set(imagename,::haxegon::Gfx_obj::images->length);
HXLINE( 352)		::haxegon::Gfx_obj::haxegonimage =  ::haxegon::HaxegonImage_obj::__alloc( HX_CTX ,imagename);
HXLINE( 353)		 ::starling::textures::Texture _hx_tmp = ::haxegon::Gfx_obj::starlingassets->getTexture(imagename);
HXDLIN( 353)		::haxegon::Gfx_obj::haxegonimage->contents =  ::starling::display::Image_obj::__alloc( HX_CTX ,_hx_tmp);
HXLINE( 354)		::haxegon::Gfx_obj::haxegonimage->contents->set_textureSmoothing(HX_("none",b8,12,0a,49));
HXLINE( 355)		::haxegon::Gfx_obj::haxegonimage->fetchsize();
HXLINE( 357)		::haxegon::Gfx_obj::images->push(::haxegon::Gfx_obj::haxegonimage);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,loadimage,(void))

void Gfx_obj::createimage(::String imagename,Float width,Float height){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_363_createimage)
HXLINE( 364)		int tex = ::Math_obj::floor(width);
HXDLIN( 364)		 ::starling::textures::Texture tex1 = ::starling::textures::Texture_obj::fromBitmapData( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,tex,::Math_obj::floor(height),true,(int)0),false,null(),null(),null(),null(),null());
HXLINE( 365)		 ::starling::display::Image img =  ::starling::display::Image_obj::__alloc( HX_CTX ,tex1);
HXLINE( 366)		img->set_touchable(false);
HXLINE( 367)		img->set_textureSmoothing(HX_("none",b8,12,0a,49));
HXLINE( 369)		 ::Dynamic exindex = ::haxegon::Gfx_obj::imageindex->get(imagename);
HXLINE( 370)		if (hx::IsNull( exindex )) {
HXLINE( 371)			::haxegon::Gfx_obj::imageindex->set(imagename,::haxegon::Gfx_obj::images->length);
HXLINE( 372)			::haxegon::Gfx_obj::haxegonimage =  ::haxegon::HaxegonImage_obj::__alloc( HX_CTX ,imagename);
HXLINE( 373)			::haxegon::Gfx_obj::haxegonimage->contents = img;
HXLINE( 374)			::haxegon::Gfx_obj::haxegonimage->fetchsize();
HXLINE( 376)			::haxegon::Gfx_obj::images->push(::haxegon::Gfx_obj::haxegonimage);
            		}
            		else {
HXLINE( 378)			::haxegon::Gfx_obj::images->__get(exindex).StaticCast<  ::haxegon::HaxegonImage >()->contents->get_texture()->dispose();
HXLINE( 379)			::haxegon::Gfx_obj::images->__get(exindex).StaticCast<  ::haxegon::HaxegonImage >()->contents->dispose();
HXLINE( 380)			::haxegon::Gfx_obj::images->__get(exindex).StaticCast<  ::haxegon::HaxegonImage >()->contents = img;
HXLINE( 381)			::haxegon::Gfx_obj::images->__get(exindex).StaticCast<  ::haxegon::HaxegonImage >()->fetchsize();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,createimage,(void))

int Gfx_obj::imagewidth(::String imagename){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_386_imagewidth)
HXLINE( 387)		if (!(::haxegon::Gfx_obj::imageindex->exists(imagename))) {
HXLINE( 388)			::haxegon::Gfx_obj::loadimage(imagename);
            		}
HXLINE( 391)		int imagenum = ( (int)(::haxegon::Gfx_obj::imageindex->get(imagename)) );
HXLINE( 392)		return ::haxegon::Gfx_obj::images->__get(imagenum).StaticCast<  ::haxegon::HaxegonImage >()->width;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,imagewidth,return )

int Gfx_obj::imageheight(::String imagename){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_396_imageheight)
HXLINE( 397)		if (!(::haxegon::Gfx_obj::imageindex->exists(imagename))) {
HXLINE( 398)			::haxegon::Gfx_obj::loadimage(imagename);
            		}
HXLINE( 401)		int imagenum = ( (int)(::haxegon::Gfx_obj::imageindex->get(imagename)) );
HXLINE( 402)		return ::haxegon::Gfx_obj::images->__get(imagenum).StaticCast<  ::haxegon::HaxegonImage >()->height;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,imageheight,return )

void Gfx_obj::promotetorendertarget( ::starling::display::Image image){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_406_promotetorendertarget)
HXDLIN( 406)		if (!(::Std_obj::is(image->get_texture(),hx::ClassOf< ::starling::textures::RenderTexture >()))) {
HXLINE( 407)			int newtexture = ::Std_obj::_hx_int(image->get_texture()->get_width());
HXDLIN( 407)			 ::starling::textures::RenderTexture newtexture1 =  ::starling::textures::RenderTexture_obj::__alloc( HX_CTX ,newtexture,::Std_obj::_hx_int(image->get_texture()->get_height()),null(),null(),null());
HXLINE( 410)			::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 411)			newtexture1->draw(image,::haxegon::Gfx_obj::shapematrix,null(),null());
HXLINE( 414)			image->get_texture()->dispose();
HXLINE( 415)			image->set_texture(newtexture1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,promotetorendertarget,(void))

void Gfx_obj::drawtoscreen(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_420_drawtoscreen)
HXLINE( 421)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 422)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 423)		if (hx::IsNotNull( ::haxegon::Gfx_obj::drawto )) {
HXLINE( 423)			::haxegon::Gfx_obj::drawto->bundleunlock();
            		}
HXLINE( 425)		::haxegon::Gfx_obj::drawto = ::haxegon::Gfx_obj::backbuffer;
HXLINE( 427)		if (hx::IsNotNull( ::haxegon::Gfx_obj::drawto )) {
HXLINE( 427)			::haxegon::Gfx_obj::drawto->bundlelock(null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,drawtoscreen,(void))

void Gfx_obj::drawtoimage(::String imagename){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_431_drawtoimage)
HXLINE( 432)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 433)		if (!(::haxegon::Gfx_obj::imageindex->exists(imagename))) {
HXLINE( 434)			::haxegon::Debug_obj::log(((HX_("ERROR: In drawtoimage, cannot find image \"",70,65,51,1f) + imagename) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),434,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawtoimage",7c,18,b7,72)));
HXLINE( 435)			return;
            		}
HXLINE( 438)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 439)		if (hx::IsNotNull( ::haxegon::Gfx_obj::drawto )) {
HXLINE( 439)			::haxegon::Gfx_obj::drawto->bundleunlock();
            		}
HXLINE( 441)		int imagenum = ( (int)(::haxegon::Gfx_obj::imageindex->get(imagename)) );
HXLINE( 442)		::haxegon::Gfx_obj::promotetorendertarget(::haxegon::Gfx_obj::images->__get(imagenum).StaticCast<  ::haxegon::HaxegonImage >()->contents);
HXLINE( 443)		::haxegon::Gfx_obj::drawto = hx::TCast<  ::starling::textures::RenderTexture >::cast(::haxegon::Gfx_obj::images->__get(imagenum).StaticCast<  ::haxegon::HaxegonImage >()->contents->get_texture());
HXLINE( 445)		if (hx::IsNotNull( ::haxegon::Gfx_obj::drawto )) {
HXLINE( 445)			::haxegon::Gfx_obj::drawto->bundlelock(null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,drawtoimage,(void))

void Gfx_obj::drawtotile(::String tilesetname,int tilenum){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_449_drawtotile)
HXLINE( 450)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 451)		int tileset = (int)0;
HXLINE( 452)		if (::haxegon::Gfx_obj::tilesetindex->exists(tilesetname)) {
HXLINE( 453)			tileset = ( (int)(::haxegon::Gfx_obj::tilesetindex->get(tilesetname)) );
            		}
            		else {
HXLINE( 455)			::haxegon::Debug_obj::log(((HX_("ERROR: Cannot change to tileset \"",52,68,39,26) + tilesetname) + HX_("\", no tileset with that name found.",0d,af,8b,7a)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),455,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawtotile",2d,11,0c,a5)));
            		}
HXLINE( 458)		if ((tilenum >= ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 459)			if ((tilenum == ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 460)				::String _hx_tmp = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + ::Std_obj::string(tilenum)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 460)				::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 460)				::String _hx_tmp2 = ((_hx_tmp1 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\". (Because this includes tile number 0, ",5e,3b,b7,de));
HXDLIN( 460)				::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(tilenum)) + HX_(" is not a valid tile.)",6f,3b,18,05));
HXDLIN( 460)				::haxegon::Debug_obj::log(_hx_tmp3,hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),460,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawtotile",2d,11,0c,a5)));
            			}
            			else {
HXLINE( 462)				::String _hx_tmp4 = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + ::Std_obj::string(tilenum)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 462)				::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 462)				::haxegon::Debug_obj::log(((_hx_tmp5 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),462,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawtotile",2d,11,0c,a5)));
            			}
            		}
HXLINE( 466)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 467)		if (hx::IsNotNull( ::haxegon::Gfx_obj::drawto )) {
HXLINE( 467)			::haxegon::Gfx_obj::drawto->bundleunlock();
            		}
HXLINE( 469)		::haxegon::Gfx_obj::promotetorendertarget(::haxegon::Gfx_obj::tiles->__get(tileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(tilenum).StaticCast<  ::starling::display::Image >());
HXLINE( 470)		::haxegon::Gfx_obj::drawto = hx::TCast<  ::starling::textures::RenderTexture >::cast(::haxegon::Gfx_obj::tiles->__get(tileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(tilenum).StaticCast<  ::starling::display::Image >()->get_texture());
HXLINE( 472)		if (hx::IsNotNull( ::haxegon::Gfx_obj::drawto )) {
HXLINE( 472)			::haxegon::Gfx_obj::drawto->bundlelock(null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,drawtotile,(void))

Float Gfx_obj::t1;

Float Gfx_obj::t2;

Float Gfx_obj::t3;

Float Gfx_obj::imagealignx(int imagewidth,Float x){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_479_imagealignx)
HXLINE( 480)		if ((x <= (int)-5000)) {
HXLINE( 481)			::haxegon::Gfx_obj::t1 = (x - ::haxegon::Gfx_obj::CENTER);
HXLINE( 482)			::haxegon::Gfx_obj::t2 = (x - ::haxegon::Gfx_obj::LEFT);
HXLINE( 483)			::haxegon::Gfx_obj::t3 = (x - ::haxegon::Gfx_obj::RIGHT);
HXLINE( 484)			bool _hx_tmp;
HXDLIN( 484)			if ((::haxegon::Gfx_obj::t1 != (int)0)) {
HXLINE( 484)				Float _hx_tmp1 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 484)				if ((_hx_tmp1 < ::Math_obj::abs(::haxegon::Gfx_obj::t2))) {
HXLINE( 484)					Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 484)					_hx_tmp = (_hx_tmp2 < ::Math_obj::abs(::haxegon::Gfx_obj::t3));
            				}
            				else {
HXLINE( 484)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 484)				_hx_tmp = true;
            			}
HXDLIN( 484)			if (_hx_tmp) {
HXLINE( 485)				Float _hx_tmp3 = (::haxegon::Gfx_obj::t1 + ::haxegon::Gfx_obj::screenwidthmid);
HXDLIN( 485)				return (_hx_tmp3 - ::Std_obj::_hx_int(((Float)imagewidth / (Float)(int)2)));
            			}
            			else {
HXLINE( 486)				bool _hx_tmp4;
HXDLIN( 486)				if ((::haxegon::Gfx_obj::t2 != (int)0)) {
HXLINE( 486)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 486)					if ((_hx_tmp5 < ::Math_obj::abs(::haxegon::Gfx_obj::t1))) {
HXLINE( 486)						Float _hx_tmp6 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 486)						_hx_tmp4 = (_hx_tmp6 < ::Math_obj::abs(::haxegon::Gfx_obj::t3));
            					}
            					else {
HXLINE( 486)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 486)					_hx_tmp4 = true;
            				}
HXDLIN( 486)				if (_hx_tmp4) {
HXLINE( 487)					return ::haxegon::Gfx_obj::t2;
            				}
            				else {
HXLINE( 489)					return (::haxegon::Gfx_obj::t3 + imagewidth);
            				}
            			}
            		}
HXLINE( 493)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,imagealignx,return )

Float Gfx_obj::imagealigny(int imageheight,Float y){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_497_imagealigny)
HXLINE( 498)		if ((y <= (int)-5000)) {
HXLINE( 499)			::haxegon::Gfx_obj::t1 = (y - ::haxegon::Gfx_obj::CENTER);
HXLINE( 500)			::haxegon::Gfx_obj::t2 = (y - ::haxegon::Gfx_obj::TOP);
HXLINE( 501)			::haxegon::Gfx_obj::t3 = (y - ::haxegon::Gfx_obj::BOTTOM);
HXLINE( 502)			bool _hx_tmp;
HXDLIN( 502)			if ((::haxegon::Gfx_obj::t1 != (int)0)) {
HXLINE( 502)				Float _hx_tmp1 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 502)				if ((_hx_tmp1 < ::Math_obj::abs(::haxegon::Gfx_obj::t2))) {
HXLINE( 502)					Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 502)					_hx_tmp = (_hx_tmp2 < ::Math_obj::abs(::haxegon::Gfx_obj::t3));
            				}
            				else {
HXLINE( 502)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 502)				_hx_tmp = true;
            			}
HXDLIN( 502)			if (_hx_tmp) {
HXLINE( 503)				Float _hx_tmp3 = (::haxegon::Gfx_obj::t1 + ::haxegon::Gfx_obj::screenheightmid);
HXDLIN( 503)				return (_hx_tmp3 - ::Std_obj::_hx_int(((Float)imageheight / (Float)(int)2)));
            			}
            			else {
HXLINE( 504)				bool _hx_tmp4;
HXDLIN( 504)				if ((::haxegon::Gfx_obj::t2 != (int)0)) {
HXLINE( 504)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 504)					if ((_hx_tmp5 < ::Math_obj::abs(::haxegon::Gfx_obj::t1))) {
HXLINE( 504)						Float _hx_tmp6 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 504)						_hx_tmp4 = (_hx_tmp6 < ::Math_obj::abs(::haxegon::Gfx_obj::t3));
            					}
            					else {
HXLINE( 504)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 504)					_hx_tmp4 = true;
            				}
HXDLIN( 504)				if (_hx_tmp4) {
HXLINE( 505)					return ::haxegon::Gfx_obj::t2;
            				}
            				else {
HXLINE( 507)					return (::haxegon::Gfx_obj::t3 + imageheight);
            				}
            			}
            		}
HXLINE( 511)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,imagealigny,return )

Float Gfx_obj::imagealignonimagex(int imagewidth,Float x){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_515_imagealignonimagex)
HXLINE( 516)		if ((x <= (int)-5000)) {
HXLINE( 517)			::haxegon::Gfx_obj::t1 = (x - ::haxegon::Gfx_obj::CENTER);
HXLINE( 518)			::haxegon::Gfx_obj::t2 = (x - ::haxegon::Gfx_obj::LEFT);
HXLINE( 519)			::haxegon::Gfx_obj::t3 = (x - ::haxegon::Gfx_obj::RIGHT);
HXLINE( 520)			bool _hx_tmp;
HXDLIN( 520)			if ((::haxegon::Gfx_obj::t1 != (int)0)) {
HXLINE( 520)				Float _hx_tmp1 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 520)				if ((_hx_tmp1 < ::Math_obj::abs(::haxegon::Gfx_obj::t2))) {
HXLINE( 520)					Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 520)					_hx_tmp = (_hx_tmp2 < ::Math_obj::abs(::haxegon::Gfx_obj::t3));
            				}
            				else {
HXLINE( 520)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 520)				_hx_tmp = true;
            			}
HXDLIN( 520)			if (_hx_tmp) {
HXLINE( 521)				Float _hx_tmp3 = ::haxegon::Gfx_obj::t1;
HXDLIN( 521)				return (_hx_tmp3 + ::Std_obj::_hx_int(((Float)imagewidth / (Float)(int)2)));
            			}
            			else {
HXLINE( 522)				bool _hx_tmp4;
HXDLIN( 522)				if ((::haxegon::Gfx_obj::t2 != (int)0)) {
HXLINE( 522)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 522)					if ((_hx_tmp5 < ::Math_obj::abs(::haxegon::Gfx_obj::t1))) {
HXLINE( 522)						Float _hx_tmp6 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 522)						_hx_tmp4 = (_hx_tmp6 < ::Math_obj::abs(::haxegon::Gfx_obj::t3));
            					}
            					else {
HXLINE( 522)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 522)					_hx_tmp4 = true;
            				}
HXDLIN( 522)				if (_hx_tmp4) {
HXLINE( 523)					return ::haxegon::Gfx_obj::t2;
            				}
            				else {
HXLINE( 525)					return (::haxegon::Gfx_obj::t3 + imagewidth);
            				}
            			}
            		}
HXLINE( 529)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,imagealignonimagex,return )

Float Gfx_obj::imagealignonimagey(int imageheight,Float y){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_533_imagealignonimagey)
HXLINE( 534)		if ((y <= (int)-5000)) {
HXLINE( 535)			::haxegon::Gfx_obj::t1 = (y - ::haxegon::Gfx_obj::CENTER);
HXLINE( 536)			::haxegon::Gfx_obj::t2 = (y - ::haxegon::Gfx_obj::TOP);
HXLINE( 537)			::haxegon::Gfx_obj::t3 = (y - ::haxegon::Gfx_obj::BOTTOM);
HXLINE( 538)			bool _hx_tmp;
HXDLIN( 538)			if ((::haxegon::Gfx_obj::t1 != (int)0)) {
HXLINE( 538)				Float _hx_tmp1 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 538)				if ((_hx_tmp1 < ::Math_obj::abs(::haxegon::Gfx_obj::t2))) {
HXLINE( 538)					Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Gfx_obj::t1);
HXDLIN( 538)					_hx_tmp = (_hx_tmp2 < ::Math_obj::abs(::haxegon::Gfx_obj::t3));
            				}
            				else {
HXLINE( 538)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 538)				_hx_tmp = true;
            			}
HXDLIN( 538)			if (_hx_tmp) {
HXLINE( 539)				Float _hx_tmp3 = ::haxegon::Gfx_obj::t1;
HXDLIN( 539)				return (_hx_tmp3 + ::Std_obj::_hx_int(((Float)imageheight / (Float)(int)2)));
            			}
            			else {
HXLINE( 540)				bool _hx_tmp4;
HXDLIN( 540)				if ((::haxegon::Gfx_obj::t2 != (int)0)) {
HXLINE( 540)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 540)					if ((_hx_tmp5 < ::Math_obj::abs(::haxegon::Gfx_obj::t1))) {
HXLINE( 540)						Float _hx_tmp6 = ::Math_obj::abs(::haxegon::Gfx_obj::t2);
HXDLIN( 540)						_hx_tmp4 = (_hx_tmp6 < ::Math_obj::abs(::haxegon::Gfx_obj::t3));
            					}
            					else {
HXLINE( 540)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 540)					_hx_tmp4 = true;
            				}
HXDLIN( 540)				if (_hx_tmp4) {
HXLINE( 541)					return ::haxegon::Gfx_obj::t2;
            				}
            				else {
HXLINE( 543)					return (::haxegon::Gfx_obj::t3 + imageheight);
            				}
            			}
            		}
HXLINE( 547)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,imagealignonimagey,return )

void Gfx_obj::internaldrawimage(Float x,Float y, ::starling::display::Image image,int imagewidth,int imageheight){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_550_internaldrawimage)
HXLINE( 551)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 552)		bool _hx_tmp;
HXDLIN( 552)		if (!(::haxegon::Gfx_obj::transform)) {
HXLINE( 552)			_hx_tmp = !(::haxegon::Gfx_obj::coltransform);
            		}
            		else {
HXLINE( 552)			_hx_tmp = false;
            		}
HXDLIN( 552)		if (_hx_tmp) {
HXLINE( 553)			::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 554)			 ::openfl::geom::Matrix _hx_tmp1 = ::haxegon::Gfx_obj::shapematrix;
HXDLIN( 554)			int _hx_tmp2 = ::Std_obj::_hx_int(x);
HXDLIN( 554)			_hx_tmp1->translate(_hx_tmp2,::Std_obj::_hx_int(y));
HXLINE( 555)			::haxegon::Gfx_obj::meshbatch->addMesh(image,::haxegon::Gfx_obj::shapematrix,((Float)1.0),null(),null());
            		}
            		else {
HXLINE( 557)			::haxegon::Gfx_obj::tempxalign = (int)0;
HXDLIN( 557)			::haxegon::Gfx_obj::tempyalign = (int)0;
HXLINE( 559)			::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 561)			bool _hx_tmp3;
HXDLIN( 561)			if ((::haxegon::Gfx_obj::imagexscale == ((Float)1.0))) {
HXLINE( 561)				_hx_tmp3 = (::haxegon::Gfx_obj::imageyscale != ((Float)1.0));
            			}
            			else {
HXLINE( 561)				_hx_tmp3 = true;
            			}
HXDLIN( 561)			if (_hx_tmp3) {
HXLINE( 562)				if ((::haxegon::Gfx_obj::imagescalexpivot != ((Float)0.0))) {
HXLINE( 562)					::haxegon::Gfx_obj::tempxalign = ::haxegon::Gfx_obj::imagealignonimagex(imagewidth,::haxegon::Gfx_obj::imagescalexpivot);
            				}
HXLINE( 563)				if ((::haxegon::Gfx_obj::imagescaleypivot != ((Float)0.0))) {
HXLINE( 563)					::haxegon::Gfx_obj::tempyalign = ::haxegon::Gfx_obj::imagealignonimagey(imageheight,::haxegon::Gfx_obj::imagescaleypivot);
            				}
HXLINE( 564)				::haxegon::Gfx_obj::shapematrix->translate(-(::haxegon::Gfx_obj::tempxalign),-(::haxegon::Gfx_obj::tempyalign));
HXLINE( 565)				::haxegon::Gfx_obj::shapematrix->scale(::haxegon::Gfx_obj::imagexscale,::haxegon::Gfx_obj::imageyscale);
HXLINE( 566)				::haxegon::Gfx_obj::shapematrix->translate(::haxegon::Gfx_obj::tempxalign,::haxegon::Gfx_obj::tempyalign);
            			}
HXLINE( 569)			if ((::haxegon::Gfx_obj::imagerotate != (int)0)) {
HXLINE( 570)				if ((::haxegon::Gfx_obj::imagerotatexpivot != ((Float)0.0))) {
HXLINE( 570)					::haxegon::Gfx_obj::tempxalign = ::haxegon::Gfx_obj::imagealignonimagex(imagewidth,::haxegon::Gfx_obj::imagerotatexpivot);
            				}
HXLINE( 571)				if ((::haxegon::Gfx_obj::imagerotateypivot != ((Float)0.0))) {
HXLINE( 571)					::haxegon::Gfx_obj::tempyalign = ::haxegon::Gfx_obj::imagealignonimagey(imageheight,::haxegon::Gfx_obj::imagerotateypivot);
            				}
HXLINE( 572)				 ::openfl::geom::Matrix _hx_tmp4 = ::haxegon::Gfx_obj::shapematrix;
HXDLIN( 572)				Float _hx_tmp5 = (-(::haxegon::Gfx_obj::tempxalign) * ::haxegon::Gfx_obj::imagexscale);
HXDLIN( 572)				_hx_tmp4->translate(_hx_tmp5,(-(::haxegon::Gfx_obj::tempyalign) * ::haxegon::Gfx_obj::imageyscale));
HXLINE( 573)				 ::openfl::geom::Matrix _hx_tmp6 = ::haxegon::Gfx_obj::shapematrix;
HXDLIN( 573)				_hx_tmp6->rotate(((Float)(::haxegon::Gfx_obj::imagerotate * ((Float)3.1415)) / (Float)(int)180));
HXLINE( 574)				 ::openfl::geom::Matrix _hx_tmp7 = ::haxegon::Gfx_obj::shapematrix;
HXDLIN( 574)				Float _hx_tmp8 = (::haxegon::Gfx_obj::tempxalign * ::haxegon::Gfx_obj::imagexscale);
HXDLIN( 574)				_hx_tmp7->translate(_hx_tmp8,(::haxegon::Gfx_obj::tempyalign * ::haxegon::Gfx_obj::imageyscale));
            			}
HXLINE( 577)			::haxegon::Gfx_obj::shapematrix->translate(x,y);
HXLINE( 578)			if (::haxegon::Gfx_obj::coltransform) {
HXLINE( 579)				image->set_color(::haxegon::Gfx_obj::imagecolormult);
HXLINE( 580)				::haxegon::Gfx_obj::meshbatch->addMesh(image,::haxegon::Gfx_obj::shapematrix,::haxegon::Gfx_obj::imagealphamult,null(),null());
HXLINE( 581)				image->set_color(::haxegon::Col_obj::WHITE);
            			}
            			else {
HXLINE( 583)				::haxegon::Gfx_obj::meshbatch->addMesh(image,::haxegon::Gfx_obj::shapematrix,((Float)1.0),null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Gfx_obj,internaldrawimage,(void))

void Gfx_obj::drawimage(Float x,Float y,::String imagename){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_591_drawimage)
HXLINE( 592)		if (!(::haxegon::Gfx_obj::imageindex->exists(imagename))) {
HXLINE( 593)			::haxegon::Gfx_obj::loadimage(imagename);
            		}
HXLINE( 597)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 598)		{
HXLINE( 598)			::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 598)			if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 598)				::haxegon::Gfx_obj::endmeshbatch();
            			}
            		}
HXLINE( 599)		::haxegon::Gfx_obj::drawstate = (int)3;
HXLINE( 601)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Gfx_obj::images;
HXDLIN( 601)		::haxegon::Gfx_obj::haxegonimage = _hx_tmp->__get(( (int)(::haxegon::Gfx_obj::imageindex->get(imagename)) )).StaticCast<  ::haxegon::HaxegonImage >();
HXLINE( 602)		x = ::haxegon::Gfx_obj::imagealignx(::haxegon::Gfx_obj::haxegonimage->width,x);
HXDLIN( 602)		y = ::haxegon::Gfx_obj::imagealigny(::haxegon::Gfx_obj::haxegonimage->height,y);
HXLINE( 603)		::haxegon::Gfx_obj::internaldrawimage(x,y,::haxegon::Gfx_obj::haxegonimage->contents,::haxegon::Gfx_obj::haxegonimage->width,::haxegon::Gfx_obj::haxegonimage->height);
HXLINE( 606)		::haxegon::Gfx_obj::endmeshbatch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,drawimage,(void))

void Gfx_obj::drawsubimage(Float x,Float y,Float x1,Float y1,Float w1,Float h1,::String imagename){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_614_drawsubimage)
HXLINE( 615)		if (!(::haxegon::Gfx_obj::imageindex->exists(imagename))) {
HXLINE( 616)			::haxegon::Debug_obj::log(((HX_("ERROR: In drawsubimage, cannot find image \"",b3,00,05,1c) + imagename) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),616,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawsubimage",df,d5,9c,9b)));
HXLINE( 617)			return;
            		}
HXLINE( 621)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 622)		{
HXLINE( 622)			::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 622)			if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 622)				::haxegon::Gfx_obj::endmeshbatch();
            			}
            		}
HXLINE( 624)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Gfx_obj::images;
HXDLIN( 624)		::haxegon::Gfx_obj::haxegonimage = _hx_tmp->__get(( (int)(::haxegon::Gfx_obj::imageindex->get(imagename)) )).StaticCast<  ::haxegon::HaxegonImage >();
HXLINE( 625)		x = ::haxegon::Gfx_obj::imagealignx(::haxegon::Gfx_obj::haxegonimage->width,x);
HXDLIN( 625)		y = ::haxegon::Gfx_obj::imagealigny(::haxegon::Gfx_obj::haxegonimage->height,y);
HXLINE( 628)		::haxegon::Gfx_obj::trect->x = x1;
HXLINE( 629)		::haxegon::Gfx_obj::trect->y = y1;
HXLINE( 630)		::haxegon::Gfx_obj::trect->width = w1;
HXLINE( 631)		::haxegon::Gfx_obj::trect->height = h1;
HXLINE( 634)		 ::starling::textures::Texture subtex = ::haxegon::Gfx_obj::haxegonimage->contents->get_texture();
HXDLIN( 634)		 ::starling::textures::Texture subtex1 = ::starling::textures::Texture_obj::fromTexture(subtex,::haxegon::Gfx_obj::trect,null(),null(),null());
HXLINE( 635)		 ::starling::display::Image subimage =  ::starling::display::Image_obj::__alloc( HX_CTX ,subtex1);
HXLINE( 636)		subimage->set_touchable(false);
HXLINE( 637)		subimage->set_textureSmoothing(HX_("none",b8,12,0a,49));
HXLINE( 639)		int _hx_tmp1 = ::Std_obj::_hx_int(subimage->get_width());
HXDLIN( 639)		::haxegon::Gfx_obj::internaldrawimage(x,y,subimage,_hx_tmp1,::Std_obj::_hx_int(subimage->get_height()));
HXLINE( 642)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 645)		subtex1->dispose();
HXLINE( 646)		subimage->dispose();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Gfx_obj,drawsubimage,(void))

void Gfx_obj::grabtilefromscreen(::String tilesetname,int tilenumber,Float screenx,Float screeny){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_649_grabtilefromscreen)
HXLINE( 650)		::haxegon::Gfx_obj::changetileset(tilesetname);
HXLINE( 652)		if ((tilenumber >= ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 653)			if ((tilenumber == ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 654)				::String _hx_tmp = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + ::Std_obj::string(tilenumber)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 654)				::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 654)				::String _hx_tmp2 = ((_hx_tmp1 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\". (Because this includes tile number 0, ",5e,3b,b7,de));
HXDLIN( 654)				::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(tilenumber)) + HX_(" is not a valid tile.)",6f,3b,18,05));
HXDLIN( 654)				::haxegon::Debug_obj::log(_hx_tmp3,hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),654,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("grabtilefromscreen",d0,f9,67,f5)));
HXLINE( 655)				return;
            			}
            			else {
HXLINE( 657)				::String _hx_tmp4 = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + ::Std_obj::string(tilenumber)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 657)				::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 657)				::haxegon::Debug_obj::log(((_hx_tmp5 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),657,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("grabtilefromscreen",d0,f9,67,f5)));
HXLINE( 658)				return;
            			}
            		}
HXLINE( 663)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 666)		::haxegon::Gfx_obj::promotetorendertarget(::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(tilenumber).StaticCast<  ::starling::display::Image >());
HXLINE( 669)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 670)		::haxegon::Gfx_obj::shapematrix->translate(-(screenx),-(screeny));
HXLINE( 672)		hx::TCast<  ::starling::textures::RenderTexture >::cast(::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(tilenumber).StaticCast<  ::starling::display::Image >()->get_texture())->draw(::haxegon::Gfx_obj::screen,::haxegon::Gfx_obj::shapematrix,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,grabtilefromscreen,(void))

void Gfx_obj::grabtilefromimage(::String tilesetname,int tilenumber,::String imagename,Float imagex,Float imagey){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_675_grabtilefromimage)
HXLINE( 676)		if (!(::haxegon::Gfx_obj::imageindex->exists(imagename))) {
HXLINE( 677)			HX_STACK_DO_THROW(((HX_("ERROR: In grabtilefromimage, \"",84,27,26,25) + imagename) + HX_("\" does not exist.",0d,75,ac,03)));
            		}
HXLINE( 681)		::haxegon::Gfx_obj::changetileset(tilesetname);
HXLINE( 683)		if ((tilenumber >= ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 684)			if ((tilenumber == ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 685)				::String _hx_tmp = ((HX_("ERROR: Tried to grab tile from image to tile number ",2e,79,85,79) + ::Std_obj::string(tilenumber)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 685)				::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 685)				::String _hx_tmp2 = ((_hx_tmp1 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\". (Because this includes tile number 0, ",5e,3b,b7,de));
HXDLIN( 685)				::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(tilenumber)) + HX_(" is not a valid tile.)",6f,3b,18,05));
HXDLIN( 685)				::haxegon::Debug_obj::log(_hx_tmp3,hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),685,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("grabtilefromimage",77,39,f5,09)));
HXLINE( 686)				return;
            			}
            			else {
HXLINE( 688)				::String _hx_tmp4 = ((HX_("ERROR: Tried to grab tile from image to tile number ",2e,79,85,79) + ::Std_obj::string(tilenumber)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 688)				::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 688)				::haxegon::Debug_obj::log(((_hx_tmp5 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),688,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("grabtilefromimage",77,39,f5,09)));
HXLINE( 689)				return;
            			}
            		}
HXLINE( 694)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 697)		::haxegon::Gfx_obj::promotetorendertarget(::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(tilenumber).StaticCast<  ::starling::display::Image >());
HXLINE( 700)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 701)		::haxegon::Gfx_obj::shapematrix->translate(-(imagex),-(imagey));
HXLINE( 703)		 ::starling::textures::RenderTexture _hx_tmp6 = hx::TCast<  ::starling::textures::RenderTexture >::cast(::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(tilenumber).StaticCast<  ::starling::display::Image >()->get_texture());
HXDLIN( 703)		::Array< ::Dynamic> _hx_tmp7 = ::haxegon::Gfx_obj::images;
HXDLIN( 703)		 ::Dynamic _hx_tmp8 = ::haxegon::Gfx_obj::imageindex->get(imagename);
HXDLIN( 703)		_hx_tmp6->draw(_hx_tmp7->__get(_hx_tmp8).StaticCast<  ::haxegon::HaxegonImage >()->contents,::haxegon::Gfx_obj::shapematrix,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Gfx_obj,grabtilefromimage,(void))

void Gfx_obj::grabimagefromscreen(::String imagename,Float screenx,Float screeny){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_706_grabimagefromscreen)
HXLINE( 707)		if (!(::haxegon::Gfx_obj::imageindex->exists(imagename))) {
HXLINE( 708)			::haxegon::Debug_obj::log(((HX_("ERROR: In Gfx.grabimagefromscreen, \"",cb,74,c2,ea) + imagename) + HX_("\" does not exist. You need to create an image label first before using this function.",b2,cd,e3,50)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),708,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("grabimagefromscreen",25,a1,58,26)));
HXLINE( 709)			return;
            		}
HXLINE( 713)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 715)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Gfx_obj::images;
HXDLIN( 715)		::haxegon::Gfx_obj::haxegonimage = _hx_tmp->__get(( (int)(::haxegon::Gfx_obj::imageindex->get(imagename)) )).StaticCast<  ::haxegon::HaxegonImage >();
HXLINE( 717)		::haxegon::Gfx_obj::promotetorendertarget(::haxegon::Gfx_obj::haxegonimage->contents);
HXLINE( 720)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 721)		::haxegon::Gfx_obj::shapematrix->translate(-(screenx),-(screeny));
HXLINE( 723)		hx::TCast<  ::starling::textures::RenderTexture >::cast(::haxegon::Gfx_obj::haxegonimage->contents->get_texture())->draw(::haxegon::Gfx_obj::screen,::haxegon::Gfx_obj::shapematrix,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Gfx_obj,grabimagefromscreen,(void))

void Gfx_obj::grabimagefromimage(::String destinationimage,::String sourceimage,Float sourceimagex,Float sourceimagey){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_726_grabimagefromimage)
HXLINE( 727)		if (!(::haxegon::Gfx_obj::imageindex->exists(destinationimage))) {
HXLINE( 728)			::haxegon::Debug_obj::log(((HX_("ERROR: In grabimagefromimage, \"",9f,12,e1,df) + destinationimage) + HX_("\" does not exist. You need to create an image label first before using this function.",b2,cd,e3,50)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),728,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("grabimagefromimage",c2,93,93,43)));
HXLINE( 729)			return;
            		}
HXLINE( 732)		if (!(::haxegon::Gfx_obj::imageindex->exists(sourceimage))) {
HXLINE( 733)			::haxegon::Debug_obj::log(((HX_("ERROR: No image called \"",f5,27,9b,de) + sourceimage) + HX_("\" found.",ea,f7,ec,ca)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),733,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("grabimagefromimage",c2,93,93,43)));
HXLINE( 734)			return;
            		}
HXLINE( 738)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 740)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Gfx_obj::images;
HXDLIN( 740)		::haxegon::Gfx_obj::haxegonimage = _hx_tmp->__get(( (int)(::haxegon::Gfx_obj::imageindex->get(destinationimage)) )).StaticCast<  ::haxegon::HaxegonImage >();
HXLINE( 741)		::Array< ::Dynamic> sourceimage1 = ::haxegon::Gfx_obj::images;
HXDLIN( 741)		 ::haxegon::HaxegonImage sourceimage2 = sourceimage1->__get(( (int)(::haxegon::Gfx_obj::imageindex->get(sourceimage)) )).StaticCast<  ::haxegon::HaxegonImage >();
HXLINE( 744)		::haxegon::Gfx_obj::promotetorendertarget(::haxegon::Gfx_obj::haxegonimage->contents);
HXLINE( 747)		::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 748)		::haxegon::Gfx_obj::shapematrix->translate(-(sourceimagex),-(sourceimagey));
HXLINE( 750)		hx::TCast<  ::starling::textures::RenderTexture >::cast(::haxegon::Gfx_obj::haxegonimage->contents->get_texture())->draw(sourceimage2->contents,::haxegon::Gfx_obj::shapematrix,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,grabimagefromimage,(void))

void Gfx_obj::copytile(::String totileset,int totilenumber,::String fromtileset,int fromtilenumber){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_754_copytile)
HXDLIN( 754)		if (::haxegon::Gfx_obj::tilesetindex->exists(fromtileset)) {
HXLINE( 755)			bool _hx_tmp;
HXDLIN( 755)			int _hx_tmp1 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width;
HXDLIN( 755)			::Array< ::Dynamic> _hx_tmp2 = ::haxegon::Gfx_obj::tiles;
HXDLIN( 755)			if ((_hx_tmp1 == _hx_tmp2->__get(( (int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::HaxegonTileset >()->width)) {
HXLINE( 755)				int _hx_tmp3 = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height;
HXDLIN( 755)				::Array< ::Dynamic> _hx_tmp4 = ::haxegon::Gfx_obj::tiles;
HXDLIN( 755)				_hx_tmp = (_hx_tmp3 == _hx_tmp4->__get(( (int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::HaxegonTileset >()->height);
            			}
            			else {
HXLINE( 755)				_hx_tmp = false;
            			}
HXDLIN( 755)			if (_hx_tmp) {
HXLINE( 756)				::Array< ::Dynamic> _hx_tmp5 = ::haxegon::Gfx_obj::tiles;
HXDLIN( 756)				::haxegon::Gfx_obj::promotetorendertarget(_hx_tmp5->__get(( (int)(::haxegon::Gfx_obj::tilesetindex->get(totileset)) )).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(totilenumber).StaticCast<  ::starling::display::Image >());
HXLINE( 758)				::haxegon::Gfx_obj::shapematrix->identity();
HXLINE( 759)				::Array< ::Dynamic> _hx_tmp6 = ::haxegon::Gfx_obj::tiles;
HXDLIN( 759)				 ::starling::textures::RenderTexture _hx_tmp7 = hx::TCast<  ::starling::textures::RenderTexture >::cast(_hx_tmp6->__get(( (int)(::haxegon::Gfx_obj::tilesetindex->get(totileset)) )).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(totilenumber).StaticCast<  ::starling::display::Image >()->get_texture());
HXDLIN( 759)				::Array< ::Dynamic> _hx_tmp8 = ::haxegon::Gfx_obj::tiles;
HXDLIN( 759)				 ::starling::display::Image _hx_tmp9 = _hx_tmp8->__get(( (int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(fromtilenumber).StaticCast<  ::starling::display::Image >();
HXDLIN( 759)				_hx_tmp7->draw(_hx_tmp9,::haxegon::Gfx_obj::shapematrix,null(),null());
            			}
            			else {
HXLINE( 761)				::String _hx_tmp10 = ((((HX_("ERROR: Tilesets ",53,90,b4,a9) + totileset) + HX_(" (",08,1c,00,00)) + ::Std_obj::string(::haxegon::Gfx_obj::tilewidth(totileset))) + HX_("x",78,00,00,00));
HXDLIN( 761)				::String _hx_tmp11 = ((((_hx_tmp10 + ::Std_obj::string(::haxegon::Gfx_obj::tileheight(totileset))) + HX_(") and ",c0,dc,e5,11)) + fromtileset) + HX_(" (",08,1c,00,00));
HXDLIN( 761)				::Array< ::Dynamic> _hx_tmp12 = ::haxegon::Gfx_obj::tiles;
HXDLIN( 761)				::String _hx_tmp13 = ((_hx_tmp11 + ::Std_obj::string(_hx_tmp12->__get(( (int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::HaxegonTileset >()->width)) + HX_("x",78,00,00,00));
HXDLIN( 761)				::Array< ::Dynamic> _hx_tmp14 = ::haxegon::Gfx_obj::tiles;
HXDLIN( 761)				::String _hx_tmp15 = ((_hx_tmp13 + ::Std_obj::string(_hx_tmp14->__get(( (int)(::haxegon::Gfx_obj::tilesetindex->get(fromtileset)) )).StaticCast<  ::haxegon::HaxegonTileset >()->height)) + HX_(") are different sizes. Maybe try just drawing to the tile you want instead with Gfx.drawtotile()?",f2,8f,4a,62));
HXDLIN( 761)				::haxegon::Debug_obj::log(_hx_tmp15,hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),761,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("copytile",63,05,c2,e6)));
HXLINE( 762)				return;
            			}
            		}
            		else {
HXLINE( 765)			::haxegon::Debug_obj::log(((HX_("ERROR: Tileset ",da,b6,8b,d0) + fromtileset) + HX_(" hasn't been loaded or created.",3d,f4,b3,81)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),765,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("copytile",63,05,c2,e6)));
HXLINE( 766)			return;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,copytile,(void))

void Gfx_obj::drawsubtile(Float x,Float y,::String tilesetname,int tilenum,Float x1,Float y1,Float w,Float h){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_774_drawsubtile)
HXLINE( 775)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 776)		::haxegon::Gfx_obj::changetileset(tilesetname);
HXLINE( 778)		if ((tilenum >= ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 779)			if ((tilenum == ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 780)				::String _hx_tmp = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + ::Std_obj::string(tilenum)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 780)				::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 780)				::String _hx_tmp2 = ((_hx_tmp1 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\". (Because this includes tile number 0, ",5e,3b,b7,de));
HXDLIN( 780)				::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(tilenum)) + HX_(" is not a valid tile.)",6f,3b,18,05));
HXDLIN( 780)				::haxegon::Debug_obj::log(_hx_tmp3,hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),780,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawsubtile",2a,51,1e,ac)));
HXLINE( 781)				return;
            			}
            			else {
HXLINE( 783)				::String _hx_tmp4 = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + ::Std_obj::string(tilenum)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 783)				::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 783)				::haxegon::Debug_obj::log(((_hx_tmp5 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),783,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawsubtile",2a,51,1e,ac)));
HXLINE( 784)				return;
            			}
            		}
HXLINE( 789)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 790)		{
HXLINE( 790)			::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 790)			if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 790)				::haxegon::Gfx_obj::endmeshbatch();
            			}
            		}
HXLINE( 792)		x = ::haxegon::Gfx_obj::tilealignx(x);
HXDLIN( 792)		y = ::haxegon::Gfx_obj::tilealigny(y);
HXLINE( 795)		::haxegon::Gfx_obj::trect->x = x1;
HXLINE( 796)		::haxegon::Gfx_obj::trect->y = y1;
HXLINE( 797)		::haxegon::Gfx_obj::trect->width = w;
HXLINE( 798)		::haxegon::Gfx_obj::trect->height = h;
HXLINE( 801)		 ::starling::textures::Texture subtex = ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(tilenum).StaticCast<  ::starling::display::Image >()->get_texture();
HXDLIN( 801)		 ::starling::textures::Texture subtex1 = ::starling::textures::Texture_obj::fromTexture(subtex,::haxegon::Gfx_obj::trect,null(),null(),null());
HXLINE( 802)		 ::starling::display::Image subimage =  ::starling::display::Image_obj::__alloc( HX_CTX ,subtex1);
HXLINE( 803)		subimage->set_touchable(false);
HXLINE( 805)		int _hx_tmp6 = ::Std_obj::_hx_int(subimage->get_width());
HXDLIN( 805)		::haxegon::Gfx_obj::internaldrawimage(x,y,subimage,_hx_tmp6,::Std_obj::_hx_int(subimage->get_height()));
HXLINE( 808)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 811)		subtex1->dispose();
HXLINE( 812)		subimage->dispose();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Gfx_obj,drawsubtile,(void))

void Gfx_obj::drawtile(Float x,Float y,::String tilesetname,int tilenum){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_815_drawtile)
HXLINE( 816)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 817)		::haxegon::Gfx_obj::changetileset(tilesetname);
HXLINE( 819)		if ((tilenum >= ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 820)			if ((tilenum == ::haxegon::Gfx_obj::numberoftiles(tilesetname))) {
HXLINE( 821)				::String _hx_tmp = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + ::Std_obj::string(tilenum)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 821)				::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 821)				::String _hx_tmp2 = ((_hx_tmp1 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\". (Because this includes tile number 0, ",5e,3b,b7,de));
HXDLIN( 821)				::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(tilenum)) + HX_(" is not a valid tile.)",6f,3b,18,05));
HXDLIN( 821)				::haxegon::Debug_obj::log(_hx_tmp3,hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),821,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawtile",32,49,8d,76)));
HXLINE( 822)				return;
            			}
            			else {
HXLINE( 824)				::String _hx_tmp4 = ((HX_("ERROR: Tried to draw tile number ",80,af,70,80) + ::Std_obj::string(tilenum)) + HX_(", but there are only ",d9,88,bb,fa));
HXDLIN( 824)				::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(::haxegon::Gfx_obj::numberoftiles(tilesetname))) + HX_(" tiles in tileset \"",d6,c5,31,7b));
HXDLIN( 824)				::haxegon::Debug_obj::log(((_hx_tmp5 + ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->name) + HX_("\".",cc,1d,00,00)),hx::SourceInfo(HX_("Gfx.hx",05,a7,aa,6d),824,HX_("haxegon.Gfx",cb,ea,14,3a),HX_("drawtile",32,49,8d,76)));
HXLINE( 825)				return;
            			}
            		}
HXLINE( 831)		if ((::haxegon::Gfx_obj::drawstate != (int)4)) {
HXLINE( 831)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 832)		{
HXLINE( 832)			::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 832)			if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 832)				::haxegon::Gfx_obj::endmeshbatch();
            			}
            		}
HXLINE( 833)		::haxegon::Gfx_obj::drawstate = (int)4;
HXLINE( 835)		x = ::haxegon::Gfx_obj::tilealignx(x);
HXDLIN( 835)		y = ::haxegon::Gfx_obj::tilealigny(y);
HXLINE( 837)		::haxegon::Gfx_obj::internaldrawimage(x,y,::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->tiles->__get(tilenum).StaticCast<  ::starling::display::Image >(),::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width,::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,drawtile,(void))

Float Gfx_obj::tilealignx(Float x){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_840_tilealignx)
HXLINE( 841)		if ((x == ::haxegon::Gfx_obj::CENTER)) {
HXLINE( 841)			int _hx_tmp = ::haxegon::Gfx_obj::screenwidthmid;
HXDLIN( 841)			return (_hx_tmp - ::Std_obj::_hx_int(((Float)::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width / (Float)(int)2)));
            		}
HXLINE( 842)		bool _hx_tmp1;
HXDLIN( 842)		if ((x != ::haxegon::Gfx_obj::LEFT)) {
HXLINE( 842)			_hx_tmp1 = (x == ::haxegon::Gfx_obj::TOP);
            		}
            		else {
HXLINE( 842)			_hx_tmp1 = true;
            		}
HXDLIN( 842)		if (_hx_tmp1) {
HXLINE( 842)			return (int)0;
            		}
HXLINE( 843)		bool _hx_tmp2;
HXDLIN( 843)		if ((x != ::haxegon::Gfx_obj::RIGHT)) {
HXLINE( 843)			_hx_tmp2 = (x == ::haxegon::Gfx_obj::BOTTOM);
            		}
            		else {
HXLINE( 843)			_hx_tmp2 = true;
            		}
HXDLIN( 843)		if (_hx_tmp2) {
HXLINE( 843)			return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width;
            		}
HXLINE( 844)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilealignx,return )

Float Gfx_obj::tilealigny(Float y){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_847_tilealigny)
HXLINE( 848)		if ((y == ::haxegon::Gfx_obj::CENTER)) {
HXLINE( 848)			int _hx_tmp = ::haxegon::Gfx_obj::screenheightmid;
HXDLIN( 848)			return (_hx_tmp - ::Std_obj::_hx_int(((Float)::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height / (Float)(int)2)));
            		}
HXLINE( 849)		bool _hx_tmp1;
HXDLIN( 849)		if ((y != ::haxegon::Gfx_obj::LEFT)) {
HXLINE( 849)			_hx_tmp1 = (y == ::haxegon::Gfx_obj::TOP);
            		}
            		else {
HXLINE( 849)			_hx_tmp1 = true;
            		}
HXDLIN( 849)		if (_hx_tmp1) {
HXLINE( 849)			return (int)0;
            		}
HXLINE( 850)		bool _hx_tmp2;
HXDLIN( 850)		if ((y != ::haxegon::Gfx_obj::RIGHT)) {
HXLINE( 850)			_hx_tmp2 = (y == ::haxegon::Gfx_obj::BOTTOM);
            		}
            		else {
HXLINE( 850)			_hx_tmp2 = true;
            		}
HXDLIN( 850)		if (_hx_tmp2) {
HXLINE( 850)			return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height;
            		}
HXLINE( 851)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilealigny,return )

Float Gfx_obj::tilealignontilex(Float x){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_854_tilealignontilex)
HXLINE( 855)		if ((x == ::haxegon::Gfx_obj::CENTER)) {
HXLINE( 855)			return ::Std_obj::_hx_int(((Float)::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width / (Float)(int)2));
            		}
HXLINE( 856)		bool _hx_tmp;
HXDLIN( 856)		if ((x != ::haxegon::Gfx_obj::LEFT)) {
HXLINE( 856)			_hx_tmp = (x == ::haxegon::Gfx_obj::TOP);
            		}
            		else {
HXLINE( 856)			_hx_tmp = true;
            		}
HXDLIN( 856)		if (_hx_tmp) {
HXLINE( 856)			return (int)0;
            		}
HXLINE( 857)		bool _hx_tmp1;
HXDLIN( 857)		if ((x != ::haxegon::Gfx_obj::RIGHT)) {
HXLINE( 857)			_hx_tmp1 = (x == ::haxegon::Gfx_obj::BOTTOM);
            		}
            		else {
HXLINE( 857)			_hx_tmp1 = true;
            		}
HXDLIN( 857)		if (_hx_tmp1) {
HXLINE( 857)			return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->width;
            		}
HXLINE( 858)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilealignontilex,return )

Float Gfx_obj::tilealignontiley(Float y){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_861_tilealignontiley)
HXLINE( 862)		if ((y == ::haxegon::Gfx_obj::CENTER)) {
HXLINE( 862)			return ::Std_obj::_hx_int(((Float)::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height / (Float)(int)2));
            		}
HXLINE( 863)		bool _hx_tmp;
HXDLIN( 863)		if ((y != ::haxegon::Gfx_obj::LEFT)) {
HXLINE( 863)			_hx_tmp = (y == ::haxegon::Gfx_obj::TOP);
            		}
            		else {
HXLINE( 863)			_hx_tmp = true;
            		}
HXDLIN( 863)		if (_hx_tmp) {
HXLINE( 863)			return (int)0;
            		}
HXLINE( 864)		bool _hx_tmp1;
HXDLIN( 864)		if ((y != ::haxegon::Gfx_obj::RIGHT)) {
HXLINE( 864)			_hx_tmp1 = (y == ::haxegon::Gfx_obj::BOTTOM);
            		}
            		else {
HXLINE( 864)			_hx_tmp1 = true;
            		}
HXDLIN( 864)		if (_hx_tmp1) {
HXLINE( 864)			return ::haxegon::Gfx_obj::tiles->__get(::haxegon::Gfx_obj::currenttileset).StaticCast<  ::haxegon::HaxegonTileset >()->height;
            		}
HXLINE( 865)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,tilealignontiley,return )

void Gfx_obj::drawline(Float x1,Float y1,Float x2,Float y2,int color,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_868_drawline)
HXLINE( 869)		bool _hx_tmp;
HXDLIN( 869)		if ((color != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 869)			_hx_tmp = hx::IsNull( ::haxegon::Gfx_obj::drawto );
            		}
            		else {
HXLINE( 869)			_hx_tmp = true;
            		}
HXDLIN( 869)		if (_hx_tmp) {
HXLINE( 869)			return;
            		}
HXLINE( 870)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 871)		if ((::haxegon::Gfx_obj::drawstate != (int)1)) {
HXLINE( 871)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 872)		{
HXLINE( 872)			::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 872)			if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 872)				::haxegon::Gfx_obj::endmeshbatch();
            			}
            		}
HXLINE( 873)		::haxegon::Gfx_obj::drawstate = (int)1;
HXLINE( 875)		::haxegon::Gfx_obj::templine->setPosition(x1,y1,x2,y2);
HXLINE( 876)		::haxegon::Gfx_obj::templine->thickness = ::haxegon::Gfx_obj::get_linethickness();
HXLINE( 877)		::haxegon::Gfx_obj::templine->set_color(color);
HXLINE( 879)		::haxegon::Gfx_obj::meshbatch->addMesh(::haxegon::Gfx_obj::templine,null(),alpha,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,drawline,(void))

void Gfx_obj::drawhexagon(Float x,Float y,Float radius,Float angle,int color,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_882_drawhexagon)
HXLINE( 883)		bool _hx_tmp;
HXDLIN( 883)		if ((color != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 883)			_hx_tmp = hx::IsNull( ::haxegon::Gfx_obj::drawto );
            		}
            		else {
HXLINE( 883)			_hx_tmp = true;
            		}
HXDLIN( 883)		if (_hx_tmp) {
HXLINE( 883)			return;
            		}
HXLINE( 884)		if ((radius <= (int)0)) {
HXLINE( 884)			return;
            		}
HXLINE( 885)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 886)		int _hx_tmp1 = ::haxegon::Gfx_obj::screenwidth;
HXDLIN( 886)		Float _hx_tmp2 = (_hx_tmp1 + (radius * (int)2));
HXDLIN( 886)		int _hx_tmp3 = ::haxegon::Gfx_obj::screenheight;
HXDLIN( 886)		if (!(::haxegon::Geom_obj::inbox(x,y,-(radius),-(radius),_hx_tmp2,(_hx_tmp3 + (radius * (int)2))))) {
HXLINE( 886)			return;
            		}
HXLINE( 888)		if ((::haxegon::Gfx_obj::drawstate != (int)1)) {
HXLINE( 888)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 889)		::haxegon::Gfx_obj::drawstate = (int)1;
HXLINE( 891)		 ::starling::display::Ring tempring =  ::starling::display::Ring_obj::__alloc( HX_CTX ,(x - radius),(y - radius),(radius - ::haxegon::Gfx_obj::get_linethickness()),radius,color,((Float)1.0),(int)6,angle);
HXLINE( 893)		{
HXLINE( 893)			int _g1 = (int)0;
HXDLIN( 893)			int _g = tempring->_polygons->length;
HXDLIN( 893)			while((_g1 < _g)){
HXLINE( 893)				_g1 = (_g1 + (int)1);
HXDLIN( 893)				int i = (_g1 - (int)1);
HXLINE( 894)				{
HXLINE( 894)					::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 894)					if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 894)						::haxegon::Gfx_obj::endmeshbatch();
            					}
            				}
HXLINE( 895)				 ::starling::display::MeshBatch _hx_tmp4 = ::haxegon::Gfx_obj::meshbatch;
HXDLIN( 895)				_hx_tmp4->addMesh(tempring->_polygons->__get(i).StaticCast<  ::starling::display::Poly4 >(),null(),alpha,null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,drawhexagon,(void))

void Gfx_obj::fillhexagon(Float x,Float y,Float radius,Float angle,int color,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_899_fillhexagon)
HXLINE( 900)		bool _hx_tmp;
HXDLIN( 900)		if ((color != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 900)			_hx_tmp = hx::IsNull( ::haxegon::Gfx_obj::drawto );
            		}
            		else {
HXLINE( 900)			_hx_tmp = true;
            		}
HXDLIN( 900)		if (_hx_tmp) {
HXLINE( 900)			return;
            		}
HXLINE( 901)		if ((radius <= (int)0)) {
HXLINE( 901)			return;
            		}
HXLINE( 902)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 903)		int _hx_tmp1 = ::haxegon::Gfx_obj::screenwidth;
HXDLIN( 903)		Float _hx_tmp2 = (_hx_tmp1 + (radius * (int)2));
HXDLIN( 903)		int _hx_tmp3 = ::haxegon::Gfx_obj::screenheight;
HXDLIN( 903)		if (!(::haxegon::Geom_obj::inbox(x,y,-(radius),-(radius),_hx_tmp2,(_hx_tmp3 + (radius * (int)2))))) {
HXLINE( 903)			return;
            		}
HXLINE( 905)		if ((::haxegon::Gfx_obj::drawstate != (int)1)) {
HXLINE( 905)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 906)		::haxegon::Gfx_obj::drawstate = (int)1;
HXLINE( 908)		 ::starling::display::Disk tempring =  ::starling::display::Disk_obj::__alloc( HX_CTX ,(x - radius),(y - radius),radius,color,((Float)1.0),(int)6,angle);
HXLINE( 910)		{
HXLINE( 910)			int _g1 = (int)0;
HXDLIN( 910)			int _g = tempring->_polygons->length;
HXDLIN( 910)			while((_g1 < _g)){
HXLINE( 910)				_g1 = (_g1 + (int)1);
HXDLIN( 910)				int i = (_g1 - (int)1);
HXLINE( 911)				{
HXLINE( 911)					::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 911)					if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 911)						::haxegon::Gfx_obj::endmeshbatch();
            					}
            				}
HXLINE( 912)				 ::starling::display::MeshBatch _hx_tmp4 = ::haxegon::Gfx_obj::meshbatch;
HXDLIN( 912)				_hx_tmp4->addMesh(tempring->_polygons->__get(i).StaticCast<  ::starling::display::Poly4 >(),null(),alpha,null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,fillhexagon,(void))

void Gfx_obj::drawcircle(Float x,Float y,Float radius,int color,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_916_drawcircle)
HXLINE( 917)		bool _hx_tmp;
HXDLIN( 917)		if ((color != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 917)			_hx_tmp = hx::IsNull( ::haxegon::Gfx_obj::drawto );
            		}
            		else {
HXLINE( 917)			_hx_tmp = true;
            		}
HXDLIN( 917)		if (_hx_tmp) {
HXLINE( 917)			return;
            		}
HXLINE( 918)		if ((radius <= (int)0)) {
HXLINE( 918)			return;
            		}
HXLINE( 919)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 920)		int _hx_tmp1 = ::haxegon::Gfx_obj::screenwidth;
HXDLIN( 920)		Float _hx_tmp2 = (_hx_tmp1 + (radius * (int)2));
HXDLIN( 920)		int _hx_tmp3 = ::haxegon::Gfx_obj::screenheight;
HXDLIN( 920)		if (!(::haxegon::Geom_obj::inbox(x,y,-(radius),-(radius),_hx_tmp2,(_hx_tmp3 + (radius * (int)2))))) {
HXLINE( 920)			return;
            		}
HXLINE( 922)		if ((::haxegon::Gfx_obj::drawstate != (int)1)) {
HXLINE( 922)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 923)		::haxegon::Gfx_obj::drawstate = (int)1;
HXLINE( 925)		 ::starling::display::Ring tempring =  ::starling::display::Ring_obj::__alloc( HX_CTX ,(x - radius),(y - radius),(radius - ::haxegon::Gfx_obj::get_linethickness()),radius,color,((Float)1.0),null(),null());
HXLINE( 927)		{
HXLINE( 927)			int _g1 = (int)0;
HXDLIN( 927)			int _g = tempring->_polygons->length;
HXDLIN( 927)			while((_g1 < _g)){
HXLINE( 927)				_g1 = (_g1 + (int)1);
HXDLIN( 927)				int i = (_g1 - (int)1);
HXLINE( 928)				{
HXLINE( 928)					::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 928)					if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 928)						::haxegon::Gfx_obj::endmeshbatch();
            					}
            				}
HXLINE( 929)				 ::starling::display::MeshBatch _hx_tmp4 = ::haxegon::Gfx_obj::meshbatch;
HXDLIN( 929)				_hx_tmp4->addMesh(tempring->_polygons->__get(i).StaticCast<  ::starling::display::Poly4 >(),null(),alpha,null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Gfx_obj,drawcircle,(void))

void Gfx_obj::fillcircle(Float x,Float y,Float radius,int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_933_fillcircle)
HXLINE( 934)		bool _hx_tmp;
HXDLIN( 934)		if ((col != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 934)			_hx_tmp = hx::IsNull( ::haxegon::Gfx_obj::drawto );
            		}
            		else {
HXLINE( 934)			_hx_tmp = true;
            		}
HXDLIN( 934)		if (_hx_tmp) {
HXLINE( 934)			return;
            		}
HXLINE( 935)		if ((radius <= (int)0)) {
HXLINE( 935)			return;
            		}
HXLINE( 936)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 937)		int _hx_tmp1 = ::haxegon::Gfx_obj::screenwidth;
HXDLIN( 937)		Float _hx_tmp2 = (_hx_tmp1 + (radius * (int)2));
HXDLIN( 937)		int _hx_tmp3 = ::haxegon::Gfx_obj::screenheight;
HXDLIN( 937)		if (!(::haxegon::Geom_obj::inbox(x,y,-(radius),-(radius),_hx_tmp2,(_hx_tmp3 + (radius * (int)2))))) {
HXLINE( 937)			return;
            		}
HXLINE( 939)		if ((::haxegon::Gfx_obj::drawstate != (int)1)) {
HXLINE( 939)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 940)		::haxegon::Gfx_obj::drawstate = (int)1;
HXLINE( 942)		 ::starling::display::Disk tempring =  ::starling::display::Disk_obj::__alloc( HX_CTX ,(x - radius),(y - radius),radius,col,((Float)1.0),null(),null());
HXLINE( 944)		{
HXLINE( 944)			int _g1 = (int)0;
HXDLIN( 944)			int _g = tempring->_polygons->length;
HXDLIN( 944)			while((_g1 < _g)){
HXLINE( 944)				_g1 = (_g1 + (int)1);
HXDLIN( 944)				int i = (_g1 - (int)1);
HXLINE( 945)				{
HXLINE( 945)					::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 945)					if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 945)						::haxegon::Gfx_obj::endmeshbatch();
            					}
            				}
HXLINE( 946)				 ::starling::display::MeshBatch _hx_tmp4 = ::haxegon::Gfx_obj::meshbatch;
HXDLIN( 946)				_hx_tmp4->addMesh(tempring->_polygons->__get(i).StaticCast<  ::starling::display::Poly4 >(),null(),alpha,null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Gfx_obj,fillcircle,(void))

void Gfx_obj::drawtri(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3,int color,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_950_drawtri)
HXLINE( 951)		bool _hx_tmp;
HXDLIN( 951)		if ((color != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 951)			_hx_tmp = hx::IsNull( ::haxegon::Gfx_obj::drawto );
            		}
            		else {
HXLINE( 951)			_hx_tmp = true;
            		}
HXDLIN( 951)		if (_hx_tmp) {
HXLINE( 951)			return;
            		}
HXLINE( 953)		::haxegon::Gfx_obj::drawline(x1,y1,x2,y2,color,alpha);
HXLINE( 954)		::haxegon::Gfx_obj::drawline(x1,y1,x3,y3,color,alpha);
HXLINE( 955)		::haxegon::Gfx_obj::drawline(x2,y2,x3,y3,color,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Gfx_obj,drawtri,(void))

void Gfx_obj::filltri(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3,int color,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_958_filltri)
HXLINE( 959)		bool _hx_tmp;
HXDLIN( 959)		if ((color != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 959)			_hx_tmp = hx::IsNull( ::haxegon::Gfx_obj::drawto );
            		}
            		else {
HXLINE( 959)			_hx_tmp = true;
            		}
HXDLIN( 959)		if (_hx_tmp) {
HXLINE( 959)			return;
            		}
HXLINE( 960)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 961)		if ((::haxegon::Gfx_obj::drawstate != (int)2)) {
HXLINE( 961)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 962)		{
HXLINE( 962)			::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 962)			if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 962)				::haxegon::Gfx_obj::endmeshbatch();
            			}
            		}
HXLINE( 963)		::haxegon::Gfx_obj::drawstate = (int)2;
HXLINE( 965)		::haxegon::Gfx_obj::temppoly4->setVertexPositions(x1,y1,x2,y2,x3,y3,x3,y3);
HXLINE( 966)		::haxegon::Gfx_obj::temppoly4->set_color(color);
HXLINE( 968)		::haxegon::Gfx_obj::meshbatch->addMesh(::haxegon::Gfx_obj::temppoly4,null(),alpha,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Gfx_obj,filltri,(void))

void Gfx_obj::drawbox(Float x,Float y,Float width,Float height,int color,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_971_drawbox)
HXLINE( 972)		bool _hx_tmp;
HXDLIN( 972)		if ((color != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 972)			_hx_tmp = hx::IsNull( ::haxegon::Gfx_obj::drawto );
            		}
            		else {
HXLINE( 972)			_hx_tmp = true;
            		}
HXDLIN( 972)		if (_hx_tmp) {
HXLINE( 972)			return;
            		}
HXLINE( 974)		if ((width < (int)0)) {
HXLINE( 975)			width = -(width);
HXLINE( 976)			x = (x - width);
            		}
HXLINE( 978)		if ((height < (int)0)) {
HXLINE( 979)			height = -(height);
HXLINE( 980)			y = (y - height);
            		}
HXLINE( 983)		::haxegon::Gfx_obj::fillbox(x,y,width,::haxegon::Gfx_obj::get_linethickness(),color,alpha);
HXLINE( 984)		Float _hx_tmp1 = (x + ::haxegon::Gfx_obj::get_linethickness());
HXDLIN( 984)		Float _hx_tmp2 = ((y + height) - ::haxegon::Gfx_obj::get_linethickness());
HXDLIN( 984)		Float _hx_tmp3 = (width - (::haxegon::Gfx_obj::get_linethickness() * (int)2));
HXDLIN( 984)		::haxegon::Gfx_obj::fillbox(_hx_tmp1,_hx_tmp2,_hx_tmp3,::haxegon::Gfx_obj::get_linethickness(),color,alpha);
HXLINE( 985)		Float _hx_tmp4 = (y + ::haxegon::Gfx_obj::get_linethickness());
HXDLIN( 985)		Float _hx_tmp5 = ::haxegon::Gfx_obj::get_linethickness();
HXDLIN( 985)		::haxegon::Gfx_obj::fillbox(x,_hx_tmp4,_hx_tmp5,(height - ::haxegon::Gfx_obj::get_linethickness()),color,alpha);
HXLINE( 986)		Float _hx_tmp6 = ((x + width) - ::haxegon::Gfx_obj::get_linethickness());
HXDLIN( 986)		Float _hx_tmp7 = (y + ::haxegon::Gfx_obj::get_linethickness());
HXDLIN( 986)		Float _hx_tmp8 = ::haxegon::Gfx_obj::get_linethickness();
HXDLIN( 986)		::haxegon::Gfx_obj::fillbox(_hx_tmp6,_hx_tmp7,_hx_tmp8,(height - ::haxegon::Gfx_obj::get_linethickness()),color,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,drawbox,(void))

void Gfx_obj::fillbox(Float x,Float y,Float width,Float height,int col,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_989_fillbox)
HXLINE( 990)		if ((col == ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE( 990)			return;
            		}
HXLINE( 991)		::haxegon::Gfx_obj::screenshotdirty = true;
HXLINE( 992)		if ((::haxegon::Gfx_obj::drawstate != (int)1)) {
HXLINE( 992)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 993)		{
HXLINE( 993)			::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 993)			if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 993)				::haxegon::Gfx_obj::endmeshbatch();
            			}
            		}
HXLINE( 994)		::haxegon::Gfx_obj::drawstate = (int)1;
HXLINE( 996)		::haxegon::Gfx_obj::tempquad->set_x(x);
HXLINE( 997)		::haxegon::Gfx_obj::tempquad->set_y(y);
HXLINE( 998)		::haxegon::Gfx_obj::tempquad->set_width(width);
HXLINE( 999)		::haxegon::Gfx_obj::tempquad->set_height(height);
HXLINE(1000)		::haxegon::Gfx_obj::tempquad->set_color(col);
HXLINE(1002)		::haxegon::Gfx_obj::meshbatch->addMesh(::haxegon::Gfx_obj::tempquad,null(),alpha,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Gfx_obj,fillbox,(void))

void Gfx_obj::updatemeshbatch(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1005_updatemeshbatch)
HXLINE(1006)		::haxegon::Gfx_obj::meshbatchcount++;
HXLINE(1007)		if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE(1007)			::haxegon::Gfx_obj::endmeshbatch();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,updatemeshbatch,(void))

void Gfx_obj::endmeshbatch(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1011_endmeshbatch)
HXDLIN(1011)		if ((::haxegon::Gfx_obj::meshbatchcount > (int)0)) {
HXLINE(1012)			::haxegon::Gfx_obj::drawto->draw(::haxegon::Gfx_obj::meshbatch,null(),null(),null());
HXLINE(1014)			::haxegon::Gfx_obj::meshbatch->clear();
HXLINE(1015)			::haxegon::Gfx_obj::meshbatchcount = (int)0;
HXLINE(1016)			::haxegon::Gfx_obj::drawstate = (int)0;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,endmeshbatch,(void))

void Gfx_obj::endmeshbatchonsurface( ::starling::textures::RenderTexture d){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1021_endmeshbatchonsurface)
HXDLIN(1021)		if ((::haxegon::Gfx_obj::meshbatchcount > (int)0)) {
HXLINE(1022)			d->draw(::haxegon::Gfx_obj::meshbatch,null(),null(),null());
HXLINE(1024)			::haxegon::Gfx_obj::meshbatch->clear();
HXLINE(1025)			::haxegon::Gfx_obj::meshbatchcount = (int)0;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,endmeshbatchonsurface,(void))

Float Gfx_obj::_linethickness;

Float Gfx_obj::get_linethickness(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1033_get_linethickness)
HXDLIN(1033)		return ::haxegon::Gfx_obj::_linethickness;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,get_linethickness,return )

Float Gfx_obj::set_linethickness(Float size){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1036_set_linethickness)
HXLINE(1037)		::haxegon::Gfx_obj::_linethickness = size;
HXLINE(1038)		if ((::haxegon::Gfx_obj::_linethickness < (int)1)) {
HXLINE(1038)			::haxegon::Gfx_obj::_linethickness = (int)1;
            		}
HXLINE(1039)		if ((::haxegon::Gfx_obj::_linethickness > (int)255)) {
HXLINE(1039)			::haxegon::Gfx_obj::_linethickness = (int)255;
            		}
HXLINE(1040)		return ::haxegon::Gfx_obj::_linethickness;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,set_linethickness,return )

int Gfx_obj::clearcolor;

void Gfx_obj::clearscreen(hx::Null< int >  __o_color){
int color = __o_color.Default(0);
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1045_clearscreen)
HXLINE(1046)		if (hx::IsNull( ::haxegon::Gfx_obj::drawto )) {
HXLINE(1046)			return;
            		}
HXLINE(1047)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE(1049)		if ((color == ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE(1050)			::haxegon::Gfx_obj::drawto->clear(null(),null());
            		}
            		else {
HXLINE(1054)			::haxegon::Gfx_obj::fillbox((int)0,(int)0,::haxegon::Gfx_obj::screenwidth,::haxegon::Gfx_obj::screenheight,color,null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,clearscreen,(void))

void Gfx_obj::setpixel(Float x,Float y,int color,hx::Null< Float >  __o_alpha){
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1059_setpixel)
HXDLIN(1059)		::haxegon::Gfx_obj::fillbox(x,y,(int)1,(int)1,color,alpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,setpixel,(void))

 ::openfl::display::BitmapData Gfx_obj::screenshot;

bool Gfx_obj::screenshotdirty;

int Gfx_obj::getpixel(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1064_getpixel)
HXLINE(1065)		int resultpixel = ::haxegon::Col_obj::TRANSPARENT;
HXLINE(1067)		Float xs = ((Float)::starling::core::Starling_obj::get_current()->get_viewPort()->width / (Float)::haxegon::Gfx_obj::screenwidth);
HXLINE(1068)		Float ys = ((Float)::starling::core::Starling_obj::get_current()->get_viewPort()->height / (Float)::haxegon::Gfx_obj::screenheight);
HXLINE(1070)		if (!(::haxegon::Gfx_obj::screenshotdirty)) {
HXLINE(1073)			 ::openfl::display::BitmapData pixelalpha = ::haxegon::Gfx_obj::screenshot;
HXDLIN(1073)			int pixelalpha1 = ::Std_obj::_hx_int((x * xs));
HXDLIN(1073)			int pixelalpha2 = ((int)((int)pixelalpha->getPixel32(pixelalpha1,::Std_obj::_hx_int((y * ys))) >> (int)(int)24) & (int)(int)255);
HXLINE(1074)			 ::openfl::display::BitmapData pixel = ::haxegon::Gfx_obj::screenshot;
HXDLIN(1074)			int pixel1 = ::Std_obj::_hx_int((x * xs));
HXDLIN(1074)			int pixel2 = pixel->getPixel(pixel1,::Std_obj::_hx_int((y * ys)));
HXLINE(1076)			if ((pixelalpha2 == (int)0)) {
HXLINE(1077)				resultpixel = ::haxegon::Col_obj::TRANSPARENT;
            			}
            			else {
HXLINE(1079)				resultpixel = pixel2;
            			}
            		}
            		else {
HXLINE(1081)			if (hx::IsNull( ::haxegon::Gfx_obj::backbuffer )) {
HXLINE(1082)				if (hx::IsNotNull( ::haxegon::Gfx_obj::drawto )) {
HXLINE(1085)					::haxegon::Gfx_obj::endmeshbatch();
HXLINE(1087)					::haxegon::Gfx_obj::drawto->bundleunlock();
HXLINE(1089)					 ::starling::display::Image tempimage =  ::starling::display::Image_obj::__alloc( HX_CTX ,::haxegon::Gfx_obj::drawto);
HXLINE(1090)					::starling::core::Starling_obj::get_current()->get_stage()->addChildAt(tempimage,(int)0);
HXLINE(1092)					if (hx::IsNotNull( ::haxegon::Gfx_obj::screenshot )) {
HXLINE(1092)						::haxegon::Gfx_obj::screenshot->dispose();
            					}
HXLINE(1093)					::haxegon::Gfx_obj::screenshot =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::haxegon::Gfx_obj::screenwidth,::haxegon::Gfx_obj::screenheight,null(),null());
HXLINE(1094)					::haxegon::Gfx_obj::screenshot = ::starling::core::Starling_obj::get_current()->get_stage()->drawToBitmapData(::haxegon::Gfx_obj::screenshot,null(),null());
HXLINE(1095)					::haxegon::Gfx_obj::screenshotdirty = false;
HXLINE(1097)					 ::openfl::display::BitmapData pixelalpha3 = ::haxegon::Gfx_obj::screenshot;
HXDLIN(1097)					int pixelalpha4 = ::Std_obj::_hx_int((x * xs));
HXDLIN(1097)					int pixelalpha5 = ((int)((int)pixelalpha3->getPixel32(pixelalpha4,::Std_obj::_hx_int((y * ys))) >> (int)(int)24) & (int)(int)255);
HXLINE(1098)					 ::openfl::display::BitmapData pixel3 = ::haxegon::Gfx_obj::screenshot;
HXDLIN(1098)					int pixel4 = ::Std_obj::_hx_int((x * xs));
HXDLIN(1098)					int pixel5 = pixel3->getPixel(pixel4,::Std_obj::_hx_int((y * ys)));
HXLINE(1100)					if ((pixelalpha5 == (int)0)) {
HXLINE(1101)						resultpixel = ::haxegon::Col_obj::TRANSPARENT;
            					}
            					else {
HXLINE(1103)						resultpixel = pixel5;
            					}
HXLINE(1106)					::starling::core::Starling_obj::get_current()->get_stage()->removeChild(tempimage,false);
HXLINE(1107)					tempimage->dispose();
HXLINE(1108)					tempimage = null();
HXLINE(1110)					::haxegon::Gfx_obj::drawto->bundlelock(null());
            				}
            				else {
HXLINE(1112)					HX_STACK_DO_THROW(((HX_("Error: Sorry, Gfx.getpixel() can't be used on the screen in Main.new()!\n",8c,ad,74,ee) + HX_("If you want to do some drawing in Main.new(), instead try creating a\n",84,ef,db,29)) + HX_("surface with Gfx.createimage(), and drawing to and grabbing from that.",ba,5b,bd,60)));
            				}
            			}
            			else {
HXLINE(1116)				if (hx::IsEq( ::haxegon::Gfx_obj::drawto,::haxegon::Gfx_obj::backbuffer )) {
HXLINE(1119)					if (::haxegon::Gfx_obj::screenshotdirty) {
HXLINE(1120)						if (hx::IsNotNull( ::haxegon::Gfx_obj::screenshot )) {
HXLINE(1120)							::haxegon::Gfx_obj::screenshot->dispose();
            						}
HXLINE(1121)						::haxegon::Gfx_obj::screenshot =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::haxegon::Gfx_obj::screenwidth,::haxegon::Gfx_obj::screenheight,null(),null());
HXLINE(1122)						::haxegon::Gfx_obj::screenshot = ::starling::core::Starling_obj::get_current()->get_stage()->drawToBitmapData(::haxegon::Gfx_obj::screenshot,null(),null());
HXLINE(1123)						::haxegon::Gfx_obj::screenshotdirty = false;
            					}
HXLINE(1126)					 ::openfl::display::BitmapData pixelalpha6 = ::haxegon::Gfx_obj::screenshot;
HXDLIN(1126)					int pixelalpha7 = ::Std_obj::_hx_int((x * xs));
HXDLIN(1126)					int pixelalpha8 = ((int)((int)pixelalpha6->getPixel32(pixelalpha7,::Std_obj::_hx_int((y * ys))) >> (int)(int)24) & (int)(int)255);
HXLINE(1127)					 ::openfl::display::BitmapData pixel6 = ::haxegon::Gfx_obj::screenshot;
HXDLIN(1127)					int pixel7 = ::Std_obj::_hx_int((x * xs));
HXDLIN(1127)					int pixel8 = pixel6->getPixel(pixel7,::Std_obj::_hx_int((y * ys)));
HXLINE(1129)					if ((pixelalpha8 == (int)0)) {
HXLINE(1130)						resultpixel = ::haxegon::Col_obj::TRANSPARENT;
            					}
            					else {
HXLINE(1132)						resultpixel = pixel8;
            					}
            				}
            				else {
HXLINE(1143)					::haxegon::Gfx_obj::endmeshbatch();
HXLINE(1145)					::haxegon::Gfx_obj::drawto->bundleunlock();
HXLINE(1146)					 ::openfl::display::BitmapData originalscreenshot =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::haxegon::Gfx_obj::screenwidth,::haxegon::Gfx_obj::screenheight,null(),null());
HXLINE(1147)					originalscreenshot = ::starling::core::Starling_obj::get_current()->get_stage()->drawToBitmapData(originalscreenshot,null(),null());
HXLINE(1150)					::haxegon::Gfx_obj::backbuffer->bundlelock(null());
HXLINE(1151)					::haxegon::Gfx_obj::backbuffer->clear(null(),null());
HXLINE(1154)					 ::starling::textures::RenderTexture _hx_tmp = ::haxegon::Gfx_obj::backbuffer;
HXDLIN(1154)					_hx_tmp->draw( ::starling::display::Image_obj::__alloc( HX_CTX ,::haxegon::Gfx_obj::drawto),null(),null(),null());
HXLINE(1155)					::haxegon::Gfx_obj::backbuffer->bundleunlock();
HXLINE(1157)					if (hx::IsNotNull( ::haxegon::Gfx_obj::screenshot )) {
HXLINE(1157)						::haxegon::Gfx_obj::screenshot->dispose();
            					}
HXLINE(1158)					::haxegon::Gfx_obj::screenshot =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::haxegon::Gfx_obj::screenwidth,::haxegon::Gfx_obj::screenheight,null(),null());
HXLINE(1159)					::haxegon::Gfx_obj::screenshot = ::starling::core::Starling_obj::get_current()->get_stage()->drawToBitmapData(::haxegon::Gfx_obj::screenshot,null(),null());
HXLINE(1160)					::haxegon::Gfx_obj::screenshotdirty = false;
HXLINE(1162)					 ::openfl::display::BitmapData pixelalpha9 = ::haxegon::Gfx_obj::screenshot;
HXDLIN(1162)					int pixelalpha10 = ::Std_obj::_hx_int((x * xs));
HXDLIN(1162)					int pixelalpha11 = ((int)((int)pixelalpha9->getPixel32(pixelalpha10,::Std_obj::_hx_int((y * ys))) >> (int)(int)24) & (int)(int)255);
HXLINE(1163)					 ::openfl::display::BitmapData pixel9 = ::haxegon::Gfx_obj::screenshot;
HXDLIN(1163)					int pixel10 = ::Std_obj::_hx_int((x * xs));
HXDLIN(1163)					int pixel11 = pixel9->getPixel(pixel10,::Std_obj::_hx_int((y * ys)));
HXLINE(1165)					if ((pixelalpha11 == (int)0)) {
HXLINE(1166)						resultpixel = ::haxegon::Col_obj::TRANSPARENT;
            					}
            					else {
HXLINE(1168)						resultpixel = pixel11;
            					}
HXLINE(1172)					 ::starling::textures::RenderTexture _hx_tmp1 = ::haxegon::Gfx_obj::backbuffer;
HXDLIN(1172)					_hx_tmp1->draw( ::starling::display::Image_obj::__alloc( HX_CTX ,::starling::textures::Texture_obj::fromBitmapData(originalscreenshot,null(),null(),null(),null(),null(),null())),null(),null(),null());
HXLINE(1173)					originalscreenshot->dispose();
            				}
            			}
            		}
HXLINE(1175)		return resultpixel;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,getpixel,return )

void Gfx_obj::updategraphicsmode(int windowwidth,int windowheight){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1178_updategraphicsmode)
HXLINE(1179)		if (!(::haxegon::Gfx_obj::_fullscreen)) {
HXLINE(1180)			bool _hx_tmp;
HXDLIN(1180)			if (hx::IsNotEq( ::haxegon::Gfx_obj::flashstage->get_displayState(),(int)1 )) {
HXLINE(1180)				_hx_tmp = hx::IsEq( ::haxegon::Gfx_obj::flashstage->get_displayState(),(int)0 );
            			}
            			else {
HXLINE(1180)				_hx_tmp = true;
            			}
HXDLIN(1180)			if (_hx_tmp) {
HXLINE(1182)				::haxegon::Gfx_obj::flashstage->set_displayState((int)2);
            			}
            		}
            		else {
HXLINE(1185)			if (hx::IsEq( ::haxegon::Gfx_obj::flashstage->get_displayState(),(int)2 )) {
HXLINE(1186)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1187)					::haxegon::Gfx_obj::flashstage->set_displayState((int)1);
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic e = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(1201)		bool _hx_tmp1;
HXDLIN(1201)		if ((windowwidth == (int)0)) {
HXLINE(1201)			_hx_tmp1 = (windowheight == (int)0);
            		}
            		else {
HXLINE(1201)			_hx_tmp1 = false;
            		}
HXDLIN(1201)		if (_hx_tmp1) {
HXLINE(1204)			return;
            		}
HXLINE(1207)		::haxegon::Gfx_obj::starstage->set_stageWidth(::haxegon::Gfx_obj::screenwidth);
HXLINE(1208)		::haxegon::Gfx_obj::starstage->set_stageHeight(::haxegon::Gfx_obj::screenheight);
HXLINE(1211)		int stretchscalex = ::Std_obj::_hx_int(windowwidth);
HXDLIN(1211)		Float stretchscalex1 = ((Float)stretchscalex / (Float)::haxegon::Gfx_obj::screenwidth);
HXLINE(1212)		int stretchscaley = ::Std_obj::_hx_int(windowheight);
HXDLIN(1212)		Float stretchscaley1 = ((Float)stretchscaley / (Float)::haxegon::Gfx_obj::screenheight);
HXLINE(1213)		Float stretchscale = ::Math_obj::min(stretchscalex1,stretchscaley1);
HXLINE(1214)		if (::haxegon::Gfx_obj::keeppixelratio) {
HXLINE(1214)			stretchscale = ::Math_obj::floor(stretchscale);
            		}
HXLINE(1216)		 ::openfl::geom::Rectangle viewPortRectangle =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(1218)		if ((::haxegon::Gfx_obj::perfectfit == (int)1)) {
HXLINE(1219)			viewPortRectangle->width = ::Std_obj::_hx_int(windowwidth);
HXLINE(1220)			viewPortRectangle->height = ::Std_obj::_hx_int(windowheight);
HXLINE(1222)			viewPortRectangle->x = ::Std_obj::_hx_int(((Float)(windowwidth - ::Std_obj::_hx_int((::haxegon::Gfx_obj::screenwidth * stretchscaley1))) / (Float)(int)2));
HXLINE(1223)			viewPortRectangle->y = ::Std_obj::_hx_int(((Float)(windowheight - ::Std_obj::_hx_int((::haxegon::Gfx_obj::screenheight * stretchscaley1))) / (Float)(int)2));
            		}
            		else {
HXLINE(1224)			if ((::haxegon::Gfx_obj::perfectfit == (int)2)) {
HXLINE(1225)				viewPortRectangle->width = ::Std_obj::_hx_int(windowwidth);
HXLINE(1226)				viewPortRectangle->height = ::Std_obj::_hx_int(windowheight);
HXLINE(1228)				viewPortRectangle->x = ::Std_obj::_hx_int(((Float)(windowwidth - ::Std_obj::_hx_int((::haxegon::Gfx_obj::screenwidth * stretchscalex1))) / (Float)(int)2));
HXLINE(1229)				viewPortRectangle->y = ::Std_obj::_hx_int(((Float)(windowheight - ::Std_obj::_hx_int((::haxegon::Gfx_obj::screenheight * stretchscalex1))) / (Float)(int)2));
            			}
            			else {
HXLINE(1231)				viewPortRectangle->width = (::haxegon::Gfx_obj::screenwidth * stretchscale);
HXLINE(1232)				viewPortRectangle->height = (::haxegon::Gfx_obj::screenheight * stretchscale);
HXLINE(1234)				viewPortRectangle->x = ::Std_obj::_hx_int(((Float)(windowwidth - ::Std_obj::_hx_int((::haxegon::Gfx_obj::screenwidth * stretchscale))) / (Float)(int)2));
HXLINE(1235)				viewPortRectangle->y = ::Std_obj::_hx_int(((Float)(windowheight - ::Std_obj::_hx_int((::haxegon::Gfx_obj::screenheight * stretchscale))) / (Float)(int)2));
            			}
            		}
HXLINE(1239)		::starling::core::Starling_obj::get_current()->set_viewPort(viewPortRectangle);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,updategraphicsmode,(void))

int Gfx_obj::getscreenx(Float _x){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1243_getscreenx)
HXDLIN(1243)		Float _hx_tmp = (_x - ::starling::core::Starling_obj::get_current()->get_viewPort()->x);
HXDLIN(1243)		Float _hx_tmp1 = (_hx_tmp * ::haxegon::Gfx_obj::screenwidth);
HXDLIN(1243)		return ::Math_obj::floor(((Float)_hx_tmp1 / (Float)::starling::core::Starling_obj::get_current()->get_viewPort()->width));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,getscreenx,return )

int Gfx_obj::getscreeny(Float _y){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1247_getscreeny)
HXDLIN(1247)		Float _hx_tmp = (_y - ::starling::core::Starling_obj::get_current()->get_viewPort()->y);
HXDLIN(1247)		Float _hx_tmp1 = (_hx_tmp * ::haxegon::Gfx_obj::screenheight);
HXDLIN(1247)		return ::Math_obj::floor(((Float)_hx_tmp1 / (Float)::starling::core::Starling_obj::get_current()->get_viewPort()->height));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,getscreeny,return )

void Gfx_obj::resizescreen(Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1251_resizescreen)
HXLINE(1252)		bool _hx_tmp;
HXDLIN(1252)		if ((width <= (int)0)) {
HXLINE(1252)			_hx_tmp = (height <= (int)0);
            		}
            		else {
HXLINE(1252)			_hx_tmp = false;
            		}
HXDLIN(1252)		if (_hx_tmp) {
HXLINE(1253)			width = ::Std_obj::_hx_int(::openfl::Lib_obj::get_current()->stage->stageWidth);
HXLINE(1254)			height = ::Std_obj::_hx_int(::openfl::Lib_obj::get_current()->stage->stageHeight);
HXLINE(1255)			::haxegon::Gfx_obj::perfectfit = (int)3;
HXLINE(1256)			::haxegon::Gfx_obj::dynamicwidth = (int)0;
HXLINE(1257)			::haxegon::Gfx_obj::dynamicheight = (int)0;
            		}
            		else {
HXLINE(1258)			if ((width <= (int)0)) {
HXLINE(1259)				::haxegon::Gfx_obj::perfectfit = (int)1;
HXLINE(1260)				int width1 = ::openfl::Lib_obj::get_current()->stage->stageWidth;
HXDLIN(1260)				width = ::Std_obj::_hx_int((width1 * ((Float)height / (Float)::openfl::Lib_obj::get_current()->stage->stageHeight)));
HXLINE(1261)				::haxegon::Gfx_obj::dynamicwidth = (int)0;
HXLINE(1262)				::haxegon::Gfx_obj::dynamicheight = ::Std_obj::_hx_int(height);
            			}
            			else {
HXLINE(1263)				if ((height <= (int)0)) {
HXLINE(1264)					::haxegon::Gfx_obj::perfectfit = (int)2;
HXLINE(1265)					int height1 = ::openfl::Lib_obj::get_current()->stage->stageHeight;
HXDLIN(1265)					height = ::Std_obj::_hx_int((height1 * ((Float)width / (Float)::openfl::Lib_obj::get_current()->stage->stageWidth)));
HXLINE(1266)					::haxegon::Gfx_obj::dynamicwidth = ::Std_obj::_hx_int(width);
HXLINE(1267)					::haxegon::Gfx_obj::dynamicheight = (int)0;
            				}
            				else {
HXLINE(1269)					::haxegon::Gfx_obj::perfectfit = (int)0;
HXLINE(1270)					::haxegon::Gfx_obj::dynamicwidth = (int)0;
HXLINE(1271)					::haxegon::Gfx_obj::dynamicheight = (int)0;
            				}
            			}
            		}
HXLINE(1273)		int _hx_tmp1 = ::Std_obj::_hx_int(width);
HXDLIN(1273)		::haxegon::Gfx_obj::initgfx(_hx_tmp1,::Std_obj::_hx_int(height));
HXLINE(1274)		::haxegon::Text_obj::setstage(::haxegon::Gfx_obj::starstage);
HXLINE(1275)		bool _hx_tmp2;
HXDLIN(1275)		if ((::haxegon::Gfx_obj::perfectfit != (int)1)) {
HXLINE(1275)			_hx_tmp2 = (::haxegon::Gfx_obj::perfectfit == (int)2);
            		}
            		else {
HXLINE(1275)			_hx_tmp2 = true;
            		}
HXDLIN(1275)		if (_hx_tmp2) {
HXLINE(1276)			int _hx_tmp3 = ::Std_obj::_hx_int(::openfl::Lib_obj::get_current()->stage->stageWidth);
HXDLIN(1276)			::haxegon::Gfx_obj::updategraphicsmode(_hx_tmp3,::Std_obj::_hx_int(::openfl::Lib_obj::get_current()->stage->stageHeight));
            		}
            		else {
HXLINE(1277)			if ((::haxegon::Gfx_obj::perfectfit == (int)3)) {
HXLINE(1278)				int _hx_tmp4 = ::Std_obj::_hx_int(width);
HXDLIN(1278)				::haxegon::Gfx_obj::updategraphicsmode(_hx_tmp4,::Std_obj::_hx_int(height));
            			}
            			else {
HXLINE(1280)				int _hx_tmp5 = ::Std_obj::_hx_int(::starling::core::Starling_obj::get_current()->get_stage()->get_stageWidth());
HXDLIN(1280)				::haxegon::Gfx_obj::updategraphicsmode(_hx_tmp5,::Std_obj::_hx_int(::starling::core::Starling_obj::get_current()->get_stage()->get_stageHeight()));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,resizescreen,(void))

bool Gfx_obj::_fullscreen;

bool Gfx_obj::get_fullscreen(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1288_get_fullscreen)
HXDLIN(1288)		return ::haxegon::Gfx_obj::_fullscreen;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,get_fullscreen,return )

bool Gfx_obj::set_fullscreen(bool fs){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1291_set_fullscreen)
HXLINE(1297)		::haxegon::Gfx_obj::_fullscreen = fs;
HXLINE(1298)		if (!(::haxegon::Gfx_obj::gfxinit)) {
HXLINE(1298)			return fs;
            		}
HXLINE(1300)		if (::haxegon::Gfx_obj::_fullscreen) {
HXLINE(1301)			::haxegon::Gfx_obj::updategraphicsmode(::haxegon::Gfx_obj::devicexres,::haxegon::Gfx_obj::deviceyres);
            		}
            		else {
HXLINE(1303)			::haxegon::Gfx_obj::updategraphicsmode((int)0,(int)0);
            		}
HXLINE(1306)		return ::haxegon::Gfx_obj::_fullscreen;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,set_fullscreen,return )

void Gfx_obj::init( ::starling::display::Stage _starlingstage, ::openfl::display::Stage _flashstage){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1311_init)
HXLINE(1312)		::haxegon::Gfx_obj::starstage = _starlingstage;
HXLINE(1313)		::haxegon::Gfx_obj::flashstage = _flashstage;
HXLINE(1315)		::haxegon::Gfx_obj::starstage->addEventListener(HX_("resize",f4,59,7b,08),::haxegon::Gfx_obj::onresize_dyn());
HXLINE(1317)		::haxegon::Gfx_obj::meshbatch =  ::starling::display::MeshBatch_obj::__alloc( HX_CTX );
HXLINE(1319)		::haxegon::Gfx_obj::set_linethickness((int)1);
HXLINE(1320)		::haxegon::Gfx_obj::loadpackedtextures();
HXLINE(1322)		::haxegon::Gfx_obj::reset();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,init,(void))

void Gfx_obj::onresize( ::starling::events::ResizeEvent e){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1326_onresize)
HXDLIN(1326)		if ((::haxegon::Gfx_obj::perfectfit == (int)1)) {
HXLINE(1327)			::haxegon::Gfx_obj::resizescreen((int)0,::haxegon::Gfx_obj::dynamicheight);
            		}
            		else {
HXLINE(1328)			if ((::haxegon::Gfx_obj::perfectfit == (int)2)) {
HXLINE(1329)				::haxegon::Gfx_obj::resizescreen(::haxegon::Gfx_obj::dynamicwidth,(int)0);
            			}
            			else {
HXLINE(1330)				if ((::haxegon::Gfx_obj::perfectfit == (int)3)) {
HXLINE(1331)					::haxegon::Gfx_obj::resizescreen((int)0,(int)0);
            				}
            				else {
HXLINE(1333)					int _hx_tmp = e->get_width();
HXDLIN(1333)					::haxegon::Gfx_obj::updategraphicsmode(_hx_tmp,e->get_height());
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Gfx_obj,onresize,(void))

void Gfx_obj::loadpackedtextures(){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1338_loadpackedtextures)
HXDLIN(1338)		if (!(::haxegon::Gfx_obj::gfxinit)) {
HXLINE(1339)			::haxegon::Gfx_obj::starlingassets =  ::starling::utils::AssetManager_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1340)			::haxegon::Gfx_obj::starlingassets->set_verbose(false);
HXLINE(1343)			int atlasnum = (int)0;
HXLINE(1344)			{
HXLINE(1344)				int _g = (int)0;
HXDLIN(1344)				::Array< ::String > _g1 = ::openfl::utils::Assets_obj::list(HX_("TEXT",ad,94,ba,37));
HXDLIN(1344)				while((_g < _g1->length)){
HXLINE(1344)					::String t = _g1->__get(_g);
HXDLIN(1344)					_g = (_g + (int)1);
HXLINE(1345)					::String extension = ::haxegon::S_obj::getlastbranch(t,HX_(".",2e,00,00,00));
HXLINE(1346)					if ((extension == HX_("xml",d7,6d,5b,00))) {
HXLINE(1348)						 ::Xml xml = ::Xml_obj::parse(::openfl::utils::Assets_obj::getText(t))->firstElement();
HXLINE(1349)						if ((xml->nodeType != ::Xml_obj::Element)) {
HXLINE(1349)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + xml->nodeType));
            						}
HXDLIN(1349)						if ((xml->nodeName == HX_("TextureAtlas",90,46,8f,e7))) {
HXLINE(1351)							 ::starling::textures::Texture texturepackedimage = ::starling::textures::Texture_obj::fromBitmapData(::openfl::utils::Assets_obj::getBitmapData((HX_("data/graphics/",9f,29,e6,6e) + xml->get(HX_("imagePath",a0,7a,86,2c))),null()),false,null(),null(),null(),null(),null());
HXLINE(1352)							 ::starling::utils::AssetManager _hx_tmp = ::haxegon::Gfx_obj::starlingassets;
HXDLIN(1352)							_hx_tmp->addTexture((HX_("atlas",4b,4d,dd,26) + atlasnum),texturepackedimage);
HXLINE(1353)							 ::starling::utils::AssetManager _hx_tmp1 = ::haxegon::Gfx_obj::starlingassets;
HXDLIN(1353)							_hx_tmp1->addTextureAtlas((HX_("atlas",4b,4d,dd,26) + atlasnum), ::starling::textures::TextureAtlas_obj::__alloc( HX_CTX ,texturepackedimage,xml));
HXLINE(1354)							atlasnum = (atlasnum + (int)1);
HXLINE(1357)							{
HXLINE(1357)								 ::Dynamic i = xml->elementsNamed(HX_("SubTexture",5b,7b,fb,11));
HXDLIN(1357)								while(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(1357)									 ::Xml i1 = ( ( ::Xml)(i->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(1358)									::String _hx_tmp2 = i1->get(HX_("name",4b,72,ff,48));
HXDLIN(1358)									::haxegon::Gfx_obj::loadimagefrompackedtexture(_hx_tmp2,::haxegon::Gfx_obj::getassetpackedtexture(i1->get(HX_("name",4b,72,ff,48))));
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,loadpackedtextures,(void))

void Gfx_obj::initgfx(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1368_initgfx)
HXLINE(1370)		::haxegon::Gfx_obj::screenwidth = width;
HXDLIN(1370)		::haxegon::Gfx_obj::screenheight = height;
HXLINE(1371)		::haxegon::Gfx_obj::screenwidthmid = ::Std_obj::_hx_int(((Float)::haxegon::Gfx_obj::screenwidth / (Float)(int)2));
HXDLIN(1371)		::haxegon::Gfx_obj::screenheightmid = ::Std_obj::_hx_int(((Float)::haxegon::Gfx_obj::screenheight / (Float)(int)2));
HXLINE(1373)		::haxegon::Gfx_obj::devicexres = ::Std_obj::_hx_int(::openfl::_hx_system::Capabilities_obj::get_screenResolutionX());
HXLINE(1374)		::haxegon::Gfx_obj::deviceyres = ::Std_obj::_hx_int(::openfl::_hx_system::Capabilities_obj::get_screenResolutionY());
HXLINE(1376)		bool resizebuffers;
HXDLIN(1376)		if (::haxegon::Gfx_obj::gfxinit) {
HXLINE(1376)			if ((::haxegon::Gfx_obj::backbuffer->get_width() == width)) {
HXLINE(1376)				resizebuffers = (::haxegon::Gfx_obj::backbuffer->get_height() != height);
            			}
            			else {
HXLINE(1376)				resizebuffers = true;
            			}
            		}
            		else {
HXLINE(1376)			resizebuffers = false;
            		}
HXLINE(1378)		if (resizebuffers) {
HXLINE(1379)			::haxegon::Gfx_obj::backbuffer->dispose();
HXLINE(1380)			::haxegon::Gfx_obj::screen->dispose();
            		}
HXLINE(1383)		bool _hx_tmp;
HXDLIN(1383)		if (!(!(::haxegon::Gfx_obj::gfxinit))) {
HXLINE(1383)			_hx_tmp = resizebuffers;
            		}
            		else {
HXLINE(1383)			_hx_tmp = true;
            		}
HXDLIN(1383)		if (_hx_tmp) {
HXLINE(1384)			::haxegon::Gfx_obj::backbuffer =  ::starling::textures::RenderTexture_obj::__alloc( HX_CTX ,width,height,true,null(),null());
HXLINE(1385)			::haxegon::Gfx_obj::drawto = ::haxegon::Gfx_obj::backbuffer;
HXLINE(1386)			::haxegon::Gfx_obj::screen =  ::starling::display::Image_obj::__alloc( HX_CTX ,::haxegon::Gfx_obj::backbuffer);
HXLINE(1387)			::haxegon::Gfx_obj::screen->set_touchable(false);
HXLINE(1388)			::haxegon::Gfx_obj::screen->set_scale((int)1);
HXLINE(1389)			::haxegon::Gfx_obj::screen->set_textureSmoothing(HX_("none",b8,12,0a,49));
HXLINE(1390)			::haxegon::Gfx_obj::starstage->addChildAt(::haxegon::Gfx_obj::screen,(int)0);
HXLINE(1392)			::haxegon::Gfx_obj::drawto->bundlelock(null());
            		}
HXLINE(1395)		::haxegon::Gfx_obj::gfxinit = true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Gfx_obj,initgfx,(void))

void Gfx_obj::settrect(Float x,Float y,Float w,Float h){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1399_settrect)
HXLINE(1400)		::haxegon::Gfx_obj::trect->x = x;
HXLINE(1401)		::haxegon::Gfx_obj::trect->y = y;
HXLINE(1402)		::haxegon::Gfx_obj::trect->width = w;
HXLINE(1403)		::haxegon::Gfx_obj::trect->height = h;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Gfx_obj,settrect,(void))

void Gfx_obj::startframe(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1406_startframe)
HXLINE(1407)		::haxegon::Gfx_obj::drawstate = (int)0;
HXLINE(1408)		::haxegon::Gfx_obj::drawto->bundlelock(null());
HXLINE(1410)		::haxegon::Gfx_obj::meshbatch->clear();
HXLINE(1411)		::haxegon::Gfx_obj::meshbatchcount = (int)0;
HXLINE(1412)		if ((::haxegon::Gfx_obj::clearcolor != ::haxegon::Col_obj::TRANSPARENT)) {
HXLINE(1412)			::haxegon::Gfx_obj::clearscreen(::haxegon::Gfx_obj::clearcolor);
            		}
HXLINE(1414)		if (!(::haxegon::Gfx_obj::screenshotdirty)) {
HXLINE(1415)			if (hx::IsNotNull( ::haxegon::Gfx_obj::screenshot )) {
HXLINE(1415)				::haxegon::Gfx_obj::screenshot->dispose();
            			}
HXLINE(1416)			::haxegon::Gfx_obj::screenshotdirty = true;
            		}
HXLINE(1419)		::haxegon::Text_obj::resettextfields();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,startframe,(void))

void Gfx_obj::endframe(){
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1422_endframe)
HXLINE(1423)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE(1424)		::haxegon::Gfx_obj::drawto->bundleunlock();
HXLINE(1426)		if (hx::IsNotNull( ::haxegon::Gfx_obj::screen )) {
HXLINE(1426)			::haxegon::Gfx_obj::screen->setRequiresRedraw();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Gfx_obj,endframe,(void))

int Gfx_obj::meshbatchcount;

 ::starling::display::MeshBatch Gfx_obj::meshbatch;

 ::starling::textures::RenderTexture Gfx_obj::backbuffer;

 ::starling::textures::RenderTexture Gfx_obj::drawto;

 ::starling::display::Image Gfx_obj::screen;

 ::starling::display::Quad Gfx_obj::tempquad;

 ::starling::display::Poly4 Gfx_obj::temppoly4;

 ::starling::display::Line Gfx_obj::templine;

int Gfx_obj::drawstate;

int Gfx_obj::DRAWSTATE_NONE;

int Gfx_obj::DRAWSTATE_MESH;

int Gfx_obj::DRAWSTATE_POLY4;

int Gfx_obj::DRAWSTATE_IMAGE;

int Gfx_obj::DRAWSTATE_TILES;

int Gfx_obj::DRAWSTATE_TEXT;

 ::starling::utils::AssetManager Gfx_obj::starlingassets;

 ::openfl::geom::Rectangle Gfx_obj::trect;

 ::openfl::geom::Matrix Gfx_obj::shapematrix;

 ::starling::display::Stage Gfx_obj::starstage;

 ::openfl::display::Stage Gfx_obj::flashstage;

bool Gfx_obj::transform;

bool Gfx_obj::coltransform;

Float Gfx_obj::imagerotate;

Float Gfx_obj::imagerotatexpivot;

Float Gfx_obj::imagerotateypivot;

Float Gfx_obj::imagexscale;

Float Gfx_obj::imageyscale;

Float Gfx_obj::imagescalexpivot;

Float Gfx_obj::imagescaleypivot;

Float Gfx_obj::imagealphamult;

int Gfx_obj::imagecolormult;

Float Gfx_obj::tempxalign;

Float Gfx_obj::tempyalign;

Float Gfx_obj::temprotate;

Float Gfx_obj::tx;

Float Gfx_obj::ty;

Float Gfx_obj::tx2;

Float Gfx_obj::ty2;

 ::haxegon::HaxegonImage Gfx_obj::haxegonimage;

 ::haxe::ds::StringMap Gfx_obj::imageindex;

::Array< ::Dynamic> Gfx_obj::images;

::Array< ::Dynamic> Gfx_obj::tiles;

 ::haxe::ds::StringMap Gfx_obj::tilesetindex;

int Gfx_obj::currenttileset;

bool Gfx_obj::gfxinit;

int Gfx_obj::perfectfit;

int Gfx_obj::dynamicwidth;

int Gfx_obj::dynamicheight;

bool Gfx_obj::keeppixelratio;


Gfx_obj::Gfx_obj()
{
}

bool Gfx_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t1") ) { outValue = ( t1 ); return true; }
		if (HX_FIELD_EQ(inName,"t2") ) { outValue = ( t2 ); return true; }
		if (HX_FIELD_EQ(inName,"t3") ) { outValue = ( t3 ); return true; }
		if (HX_FIELD_EQ(inName,"tx") ) { outValue = ( tx ); return true; }
		if (HX_FIELD_EQ(inName,"ty") ) { outValue = ( ty ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"TOP") ) { outValue = ( TOP ); return true; }
		if (HX_FIELD_EQ(inName,"tx2") ) { outValue = ( tx2 ); return true; }
		if (HX_FIELD_EQ(inName,"ty2") ) { outValue = ( ty2 ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"LEFT") ) { outValue = ( LEFT ); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"RIGHT") ) { outValue = ( RIGHT ); return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trect") ) { outValue = ( trect ); return true; }
		if (HX_FIELD_EQ(inName,"tiles") ) { outValue = ( tiles ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"BOTTOM") ) { outValue = ( BOTTOM ); return true; }
		if (HX_FIELD_EQ(inName,"CENTER") ) { outValue = ( CENTER ); return true; }
		if (HX_FIELD_EQ(inName,"drawto") ) { outValue = ( drawto ); return true; }
		if (HX_FIELD_EQ(inName,"screen") ) { outValue = ( screen ); return true; }
		if (HX_FIELD_EQ(inName,"images") ) { outValue = ( images ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"drawtri") ) { outValue = drawtri_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filltri") ) { outValue = filltri_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawbox") ) { outValue = drawbox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillbox") ) { outValue = fillbox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initgfx") ) { outValue = initgfx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gfxinit") ) { outValue = ( gfxinit ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { outValue = rotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copytile") ) { outValue = copytile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawtile") ) { outValue = drawtile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawline") ) { outValue = drawline_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setpixel") ) { outValue = setpixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getpixel") ) { outValue = getpixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onresize") ) { outValue = onresize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"settrect") ) { outValue = settrect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endframe") ) { outValue = endframe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tempquad") ) { outValue = ( tempquad ); return true; }
		if (HX_FIELD_EQ(inName,"templine") ) { outValue = ( templine ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadtiles") ) { outValue = loadtiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilewidth") ) { outValue = tilewidth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadimage") ) { outValue = loadimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawimage") ) { outValue = drawimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"meshbatch") ) { outValue = ( meshbatch ); return true; }
		if (HX_FIELD_EQ(inName,"temppoly4") ) { outValue = ( temppoly4 ); return true; }
		if (HX_FIELD_EQ(inName,"drawstate") ) { outValue = ( drawstate ); return true; }
		if (HX_FIELD_EQ(inName,"starstage") ) { outValue = ( starstage ); return true; }
		if (HX_FIELD_EQ(inName,"transform") ) { outValue = ( transform ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"devicexres") ) { outValue = ( devicexres ); return true; }
		if (HX_FIELD_EQ(inName,"deviceyres") ) { outValue = ( deviceyres ); return true; }
		if (HX_FIELD_EQ(inName,"imagealpha") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_imagealpha() ); return true; } }
		if (HX_FIELD_EQ(inName,"resetalpha") ) { outValue = resetalpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagecolor") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_imagecolor() ); return true; } }
		if (HX_FIELD_EQ(inName,"resetcolor") ) { outValue = resetcolor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tileheight") ) { outValue = tileheight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagewidth") ) { outValue = imagewidth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawtotile") ) { outValue = drawtotile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilealignx") ) { outValue = tilealignx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilealigny") ) { outValue = tilealigny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawcircle") ) { outValue = drawcircle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillcircle") ) { outValue = fillcircle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearcolor") ) { outValue = ( clearcolor ); return true; }
		if (HX_FIELD_EQ(inName,"screenshot") ) { outValue = ( screenshot ); return true; }
		if (HX_FIELD_EQ(inName,"getscreenx") ) { outValue = getscreenx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getscreeny") ) { outValue = getscreeny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_fullscreen() ); return true; } }
		if (HX_FIELD_EQ(inName,"startframe") ) { outValue = startframe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"backbuffer") ) { outValue = ( backbuffer ); return true; }
		if (HX_FIELD_EQ(inName,"flashstage") ) { outValue = ( flashstage ); return true; }
		if (HX_FIELD_EQ(inName,"tempxalign") ) { outValue = ( tempxalign ); return true; }
		if (HX_FIELD_EQ(inName,"tempyalign") ) { outValue = ( tempyalign ); return true; }
		if (HX_FIELD_EQ(inName,"temprotate") ) { outValue = ( temprotate ); return true; }
		if (HX_FIELD_EQ(inName,"imageindex") ) { outValue = ( imageindex ); return true; }
		if (HX_FIELD_EQ(inName,"perfectfit") ) { outValue = ( perfectfit ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenwidth") ) { outValue = ( screenwidth ); return true; }
		if (HX_FIELD_EQ(inName,"createtiles") ) { outValue = createtiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createimage") ) { outValue = createimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imageheight") ) { outValue = imageheight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawtoimage") ) { outValue = drawtoimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagealignx") ) { outValue = imagealignx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagealigny") ) { outValue = imagealigny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawsubtile") ) { outValue = drawsubtile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawhexagon") ) { outValue = drawhexagon_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillhexagon") ) { outValue = fillhexagon_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearscreen") ) { outValue = clearscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_fullscreen") ) { outValue = ( _fullscreen ); return true; }
		if (HX_FIELD_EQ(inName,"shapematrix") ) { outValue = ( shapematrix ); return true; }
		if (HX_FIELD_EQ(inName,"imagerotate") ) { outValue = ( imagerotate ); return true; }
		if (HX_FIELD_EQ(inName,"imagexscale") ) { outValue = ( imagexscale ); return true; }
		if (HX_FIELD_EQ(inName,"imageyscale") ) { outValue = ( imageyscale ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenheight") ) { outValue = ( screenheight ); return true; }
		if (HX_FIELD_EQ(inName,"drawtoscreen") ) { outValue = drawtoscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawsubimage") ) { outValue = drawsubimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endmeshbatch") ) { outValue = endmeshbatch_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resizescreen") ) { outValue = resizescreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"coltransform") ) { outValue = ( coltransform ); return true; }
		if (HX_FIELD_EQ(inName,"haxegonimage") ) { outValue = ( haxegonimage ); return true; }
		if (HX_FIELD_EQ(inName,"tilesetindex") ) { outValue = ( tilesetindex ); return true; }
		if (HX_FIELD_EQ(inName,"dynamicwidth") ) { outValue = ( dynamicwidth ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reset_ifclear") ) { outValue = reset_ifclear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"numberoftiles") ) { outValue = numberoftiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"changetileset") ) { outValue = changetileset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addblanktiles") ) { outValue = addblanktiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"linethickness") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_linethickness() ); return true; } }
		if (HX_FIELD_EQ(inName,"dynamicheight") ) { outValue = ( dynamicheight ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"screenwidthmid") ) { outValue = ( screenwidthmid ); return true; }
		if (HX_FIELD_EQ(inName,"set_imagealpha") ) { outValue = set_imagealpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_imagealpha") ) { outValue = get_imagealpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_imagecolor") ) { outValue = set_imagecolor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_imagecolor") ) { outValue = get_imagecolor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_linethickness") ) { outValue = ( _linethickness ); return true; }
		if (HX_FIELD_EQ(inName,"get_fullscreen") ) { outValue = get_fullscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_fullscreen") ) { outValue = set_fullscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"meshbatchcount") ) { outValue = ( meshbatchcount ); return true; }
		if (HX_FIELD_EQ(inName,"starlingassets") ) { outValue = ( starlingassets ); return true; }
		if (HX_FIELD_EQ(inName,"imagealphamult") ) { outValue = ( imagealphamult ); return true; }
		if (HX_FIELD_EQ(inName,"imagecolormult") ) { outValue = ( imagecolormult ); return true; }
		if (HX_FIELD_EQ(inName,"currenttileset") ) { outValue = ( currenttileset ); return true; }
		if (HX_FIELD_EQ(inName,"keeppixelratio") ) { outValue = ( keeppixelratio ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"screenheightmid") ) { outValue = ( screenheightmid ); return true; }
		if (HX_FIELD_EQ(inName,"updatemeshbatch") ) { outValue = updatemeshbatch_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"screenshotdirty") ) { outValue = ( screenshotdirty ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tilealignontilex") ) { outValue = tilealignontilex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilealignontiley") ) { outValue = tilealignontiley_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagescalexpivot") ) { outValue = ( imagescalexpivot ); return true; }
		if (HX_FIELD_EQ(inName,"imagescaleypivot") ) { outValue = ( imagescaleypivot ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"internaldrawimage") ) { outValue = internaldrawimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"grabtilefromimage") ) { outValue = grabtilefromimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_linethickness") ) { outValue = get_linethickness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_linethickness") ) { outValue = set_linethickness_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagerotatexpivot") ) { outValue = ( imagerotatexpivot ); return true; }
		if (HX_FIELD_EQ(inName,"imagerotateypivot") ) { outValue = ( imagerotateypivot ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currenttilesetname") ) { outValue = ( currenttilesetname ); return true; }
		if (HX_FIELD_EQ(inName,"imagealignonimagex") ) { outValue = imagealignonimagex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"imagealignonimagey") ) { outValue = imagealignonimagey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"grabtilefromscreen") ) { outValue = grabtilefromscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"grabimagefromimage") ) { outValue = grabimagefromimage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updategraphicsmode") ) { outValue = updategraphicsmode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadpackedtextures") ) { outValue = loadpackedtextures_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"grabimagefromscreen") ) { outValue = grabimagefromscreen_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getassetpackedtexture") ) { outValue = getassetpackedtexture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"promotetorendertarget") ) { outValue = promotetorendertarget_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endmeshbatchonsurface") ) { outValue = endmeshbatchonsurface_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"loadimagefrompackedtexture") ) { outValue = loadimagefrompackedtexture_dyn(); return true; }
	}
	return false;
}

bool Gfx_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t1") ) { t1=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"t2") ) { t2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"t3") ) { t3=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"tx") ) { tx=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"ty") ) { ty=ioValue.Cast< Float >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"TOP") ) { TOP=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"tx2") ) { tx2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"ty2") ) { ty2=ioValue.Cast< Float >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"LEFT") ) { LEFT=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"RIGHT") ) { RIGHT=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"trect") ) { trect=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		if (HX_FIELD_EQ(inName,"tiles") ) { tiles=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"BOTTOM") ) { BOTTOM=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"CENTER") ) { CENTER=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"drawto") ) { drawto=ioValue.Cast<  ::starling::textures::RenderTexture >(); return true; }
		if (HX_FIELD_EQ(inName,"screen") ) { screen=ioValue.Cast<  ::starling::display::Image >(); return true; }
		if (HX_FIELD_EQ(inName,"images") ) { images=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfxinit") ) { gfxinit=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tempquad") ) { tempquad=ioValue.Cast<  ::starling::display::Quad >(); return true; }
		if (HX_FIELD_EQ(inName,"templine") ) { templine=ioValue.Cast<  ::starling::display::Line >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"meshbatch") ) { meshbatch=ioValue.Cast<  ::starling::display::MeshBatch >(); return true; }
		if (HX_FIELD_EQ(inName,"temppoly4") ) { temppoly4=ioValue.Cast<  ::starling::display::Poly4 >(); return true; }
		if (HX_FIELD_EQ(inName,"drawstate") ) { drawstate=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"starstage") ) { starstage=ioValue.Cast<  ::starling::display::Stage >(); return true; }
		if (HX_FIELD_EQ(inName,"transform") ) { transform=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"devicexres") ) { devicexres=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"deviceyres") ) { deviceyres=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"imagealpha") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_imagealpha(ioValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"imagecolor") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_imagecolor(ioValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"clearcolor") ) { clearcolor=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"screenshot") ) { screenshot=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"fullscreen") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_fullscreen(ioValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"backbuffer") ) { backbuffer=ioValue.Cast<  ::starling::textures::RenderTexture >(); return true; }
		if (HX_FIELD_EQ(inName,"flashstage") ) { flashstage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		if (HX_FIELD_EQ(inName,"tempxalign") ) { tempxalign=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"tempyalign") ) { tempyalign=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"temprotate") ) { temprotate=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imageindex") ) { imageindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"perfectfit") ) { perfectfit=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenwidth") ) { screenwidth=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_fullscreen") ) { _fullscreen=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"shapematrix") ) { shapematrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		if (HX_FIELD_EQ(inName,"imagerotate") ) { imagerotate=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagexscale") ) { imagexscale=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imageyscale") ) { imageyscale=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenheight") ) { screenheight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"coltransform") ) { coltransform=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"haxegonimage") ) { haxegonimage=ioValue.Cast<  ::haxegon::HaxegonImage >(); return true; }
		if (HX_FIELD_EQ(inName,"tilesetindex") ) { tilesetindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"dynamicwidth") ) { dynamicwidth=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"linethickness") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_linethickness(ioValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"dynamicheight") ) { dynamicheight=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"screenwidthmid") ) { screenwidthmid=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_linethickness") ) { _linethickness=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"meshbatchcount") ) { meshbatchcount=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"starlingassets") ) { starlingassets=ioValue.Cast<  ::starling::utils::AssetManager >(); return true; }
		if (HX_FIELD_EQ(inName,"imagealphamult") ) { imagealphamult=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagecolormult") ) { imagecolormult=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"currenttileset") ) { currenttileset=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"keeppixelratio") ) { keeppixelratio=ioValue.Cast< bool >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"screenheightmid") ) { screenheightmid=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"screenshotdirty") ) { screenshotdirty=ioValue.Cast< bool >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"imagescalexpivot") ) { imagescalexpivot=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagescaleypivot") ) { imagescaleypivot=ioValue.Cast< Float >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"imagerotatexpivot") ) { imagerotatexpivot=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"imagerotateypivot") ) { imagerotateypivot=ioValue.Cast< Float >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currenttilesetname") ) { currenttilesetname=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Gfx_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Gfx_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Gfx_obj::MAX_NUM_MESH,HX_HCSTRING("MAX_NUM_MESH","\x41","\x8a","\xe1","\xcb")},
	{hx::fsInt,(void *) &Gfx_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsInt,(void *) &Gfx_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsInt,(void *) &Gfx_obj::TOP,HX_HCSTRING("TOP","\x75","\x02","\x40","\x00")},
	{hx::fsInt,(void *) &Gfx_obj::BOTTOM,HX_HCSTRING("BOTTOM","\xeb","\x92","\xfb","\x17")},
	{hx::fsInt,(void *) &Gfx_obj::CENTER,HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8")},
	{hx::fsInt,(void *) &Gfx_obj::screenwidth,HX_HCSTRING("screenwidth","\x1a","\x93","\xba","\xee")},
	{hx::fsInt,(void *) &Gfx_obj::screenheight,HX_HCSTRING("screenheight","\x53","\x9c","\xd5","\xaa")},
	{hx::fsInt,(void *) &Gfx_obj::screenwidthmid,HX_HCSTRING("screenwidthmid","\xae","\xea","\x65","\xbd")},
	{hx::fsInt,(void *) &Gfx_obj::screenheightmid,HX_HCSTRING("screenheightmid","\x15","\xab","\xc3","\x5c")},
	{hx::fsInt,(void *) &Gfx_obj::devicexres,HX_HCSTRING("devicexres","\x7e","\x53","\x59","\xce")},
	{hx::fsInt,(void *) &Gfx_obj::deviceyres,HX_HCSTRING("deviceyres","\x1d","\x8a","\x02","\xcf")},
	{hx::fsString,(void *) &Gfx_obj::currenttilesetname,HX_HCSTRING("currenttilesetname","\xe6","\xe9","\x26","\x89")},
	{hx::fsFloat,(void *) &Gfx_obj::t1,HX_HCSTRING("t1","\x3d","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::t2,HX_HCSTRING("t2","\x3e","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::t3,HX_HCSTRING("t3","\x3f","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::_linethickness,HX_HCSTRING("_linethickness","\x41","\x2b","\x65","\x3a")},
	{hx::fsInt,(void *) &Gfx_obj::clearcolor,HX_HCSTRING("clearcolor","\xb6","\x40","\x39","\x8c")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &Gfx_obj::screenshot,HX_HCSTRING("screenshot","\x66","\x36","\xb0","\xd9")},
	{hx::fsBool,(void *) &Gfx_obj::screenshotdirty,HX_HCSTRING("screenshotdirty","\xec","\x27","\x03","\xf0")},
	{hx::fsBool,(void *) &Gfx_obj::_fullscreen,HX_HCSTRING("_fullscreen","\x5a","\x07","\x3e","\xcc")},
	{hx::fsInt,(void *) &Gfx_obj::meshbatchcount,HX_HCSTRING("meshbatchcount","\x02","\xef","\x3b","\xb5")},
	{hx::fsObject /*::starling::display::MeshBatch*/ ,(void *) &Gfx_obj::meshbatch,HX_HCSTRING("meshbatch","\xad","\x82","\xad","\x52")},
	{hx::fsObject /*::starling::textures::RenderTexture*/ ,(void *) &Gfx_obj::backbuffer,HX_HCSTRING("backbuffer","\x67","\x2e","\x8a","\xda")},
	{hx::fsObject /*::starling::textures::RenderTexture*/ ,(void *) &Gfx_obj::drawto,HX_HCSTRING("drawto","\x7f","\x9a","\xd6","\xdf")},
	{hx::fsObject /*::starling::display::Image*/ ,(void *) &Gfx_obj::screen,HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47")},
	{hx::fsObject /*::starling::display::Quad*/ ,(void *) &Gfx_obj::tempquad,HX_HCSTRING("tempquad","\xdb","\x15","\xa5","\xaf")},
	{hx::fsObject /*::starling::display::Poly4*/ ,(void *) &Gfx_obj::temppoly4,HX_HCSTRING("temppoly4","\xd4","\x98","\x78","\x69")},
	{hx::fsObject /*::starling::display::Line*/ ,(void *) &Gfx_obj::templine,HX_HCSTRING("templine","\x08","\xf5","\x4d","\xac")},
	{hx::fsInt,(void *) &Gfx_obj::drawstate,HX_HCSTRING("drawstate","\x8d","\x3b","\xe9","\xb8")},
	{hx::fsInt,(void *) &Gfx_obj::DRAWSTATE_NONE,HX_HCSTRING("DRAWSTATE_NONE","\x0a","\xc0","\x94","\xc2")},
	{hx::fsInt,(void *) &Gfx_obj::DRAWSTATE_MESH,HX_HCSTRING("DRAWSTATE_MESH","\x3f","\xf7","\xe3","\xc1")},
	{hx::fsInt,(void *) &Gfx_obj::DRAWSTATE_POLY4,HX_HCSTRING("DRAWSTATE_POLY4","\xd6","\xfe","\x5e","\xa6")},
	{hx::fsInt,(void *) &Gfx_obj::DRAWSTATE_IMAGE,HX_HCSTRING("DRAWSTATE_IMAGE","\xa9","\x19","\x36","\x9d")},
	{hx::fsInt,(void *) &Gfx_obj::DRAWSTATE_TILES,HX_HCSTRING("DRAWSTATE_TILES","\xd3","\xf7","\x01","\xf0")},
	{hx::fsInt,(void *) &Gfx_obj::DRAWSTATE_TEXT,HX_HCSTRING("DRAWSTATE_TEXT","\xff","\x79","\x84","\xc6")},
	{hx::fsObject /*::starling::utils::AssetManager*/ ,(void *) &Gfx_obj::starlingassets,HX_HCSTRING("starlingassets","\x4b","\x5b","\xeb","\x9a")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Gfx_obj::trect,HX_HCSTRING("trect","\x98","\x97","\x22","\x16")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Gfx_obj::shapematrix,HX_HCSTRING("shapematrix","\x22","\xa8","\x75","\x19")},
	{hx::fsObject /*::starling::display::Stage*/ ,(void *) &Gfx_obj::starstage,HX_HCSTRING("starstage","\xac","\x6d","\xaa","\x87")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &Gfx_obj::flashstage,HX_HCSTRING("flashstage","\x0e","\x97","\xee","\x0e")},
	{hx::fsBool,(void *) &Gfx_obj::transform,HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45")},
	{hx::fsBool,(void *) &Gfx_obj::coltransform,HX_HCSTRING("coltransform","\x2c","\xa5","\x75","\xb2")},
	{hx::fsFloat,(void *) &Gfx_obj::imagerotate,HX_HCSTRING("imagerotate","\xf6","\xdb","\xcb","\xde")},
	{hx::fsFloat,(void *) &Gfx_obj::imagerotatexpivot,HX_HCSTRING("imagerotatexpivot","\xc0","\xcf","\xb7","\x18")},
	{hx::fsFloat,(void *) &Gfx_obj::imagerotateypivot,HX_HCSTRING("imagerotateypivot","\x1f","\x2c","\x13","\x7f")},
	{hx::fsFloat,(void *) &Gfx_obj::imagexscale,HX_HCSTRING("imagexscale","\xad","\xb0","\x4d","\x87")},
	{hx::fsFloat,(void *) &Gfx_obj::imageyscale,HX_HCSTRING("imageyscale","\x0c","\x0d","\xa9","\xed")},
	{hx::fsFloat,(void *) &Gfx_obj::imagescalexpivot,HX_HCSTRING("imagescalexpivot","\xd9","\x21","\x6e","\x5b")},
	{hx::fsFloat,(void *) &Gfx_obj::imagescaleypivot,HX_HCSTRING("imagescaleypivot","\x38","\x7e","\xc9","\xc1")},
	{hx::fsFloat,(void *) &Gfx_obj::imagealphamult,HX_HCSTRING("imagealphamult","\x93","\xb3","\xf9","\x23")},
	{hx::fsInt,(void *) &Gfx_obj::imagecolormult,HX_HCSTRING("imagecolormult","\x18","\x64","\x6d","\x65")},
	{hx::fsFloat,(void *) &Gfx_obj::tempxalign,HX_HCSTRING("tempxalign","\x61","\xed","\x3f","\x03")},
	{hx::fsFloat,(void *) &Gfx_obj::tempyalign,HX_HCSTRING("tempyalign","\xc0","\x49","\x9b","\x69")},
	{hx::fsFloat,(void *) &Gfx_obj::temprotate,HX_HCSTRING("temprotate","\x6f","\x90","\xfb","\xb1")},
	{hx::fsFloat,(void *) &Gfx_obj::tx,HX_HCSTRING("tx","\x84","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::ty,HX_HCSTRING("ty","\x85","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::tx2,HX_HCSTRING("tx2","\x2e","\x6e","\x58","\x00")},
	{hx::fsFloat,(void *) &Gfx_obj::ty2,HX_HCSTRING("ty2","\x0d","\x6f","\x58","\x00")},
	{hx::fsObject /*::haxegon::HaxegonImage*/ ,(void *) &Gfx_obj::haxegonimage,HX_HCSTRING("haxegonimage","\x7b","\x02","\xf7","\xa9")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Gfx_obj::imageindex,HX_HCSTRING("imageindex","\xd7","\xf1","\xb4","\x36")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Gfx_obj::images,HX_HCSTRING("images","\xb8","\x50","\x92","\xfe")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Gfx_obj::tiles,HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Gfx_obj::tilesetindex,HX_HCSTRING("tilesetindex","\x5e","\x3d","\xbc","\x37")},
	{hx::fsInt,(void *) &Gfx_obj::currenttileset,HX_HCSTRING("currenttileset","\x1b","\xce","\xd6","\x85")},
	{hx::fsBool,(void *) &Gfx_obj::gfxinit,HX_HCSTRING("gfxinit","\x09","\x6d","\x5a","\xe1")},
	{hx::fsInt,(void *) &Gfx_obj::perfectfit,HX_HCSTRING("perfectfit","\xe4","\x62","\x88","\x13")},
	{hx::fsInt,(void *) &Gfx_obj::dynamicwidth,HX_HCSTRING("dynamicwidth","\x27","\x8a","\xdf","\xed")},
	{hx::fsInt,(void *) &Gfx_obj::dynamicheight,HX_HCSTRING("dynamicheight","\xa6","\xd0","\x08","\xec")},
	{hx::fsBool,(void *) &Gfx_obj::keeppixelratio,HX_HCSTRING("keeppixelratio","\x8a","\x91","\x1d","\x25")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Gfx_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Gfx_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Gfx_obj::MAX_NUM_MESH,"MAX_NUM_MESH");
	HX_MARK_MEMBER_NAME(Gfx_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Gfx_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Gfx_obj::TOP,"TOP");
	HX_MARK_MEMBER_NAME(Gfx_obj::BOTTOM,"BOTTOM");
	HX_MARK_MEMBER_NAME(Gfx_obj::CENTER,"CENTER");
	HX_MARK_MEMBER_NAME(Gfx_obj::screenwidth,"screenwidth");
	HX_MARK_MEMBER_NAME(Gfx_obj::screenheight,"screenheight");
	HX_MARK_MEMBER_NAME(Gfx_obj::screenwidthmid,"screenwidthmid");
	HX_MARK_MEMBER_NAME(Gfx_obj::screenheightmid,"screenheightmid");
	HX_MARK_MEMBER_NAME(Gfx_obj::devicexres,"devicexres");
	HX_MARK_MEMBER_NAME(Gfx_obj::deviceyres,"deviceyres");
	HX_MARK_MEMBER_NAME(Gfx_obj::currenttilesetname,"currenttilesetname");
	HX_MARK_MEMBER_NAME(Gfx_obj::t1,"t1");
	HX_MARK_MEMBER_NAME(Gfx_obj::t2,"t2");
	HX_MARK_MEMBER_NAME(Gfx_obj::t3,"t3");
	HX_MARK_MEMBER_NAME(Gfx_obj::_linethickness,"_linethickness");
	HX_MARK_MEMBER_NAME(Gfx_obj::clearcolor,"clearcolor");
	HX_MARK_MEMBER_NAME(Gfx_obj::screenshot,"screenshot");
	HX_MARK_MEMBER_NAME(Gfx_obj::screenshotdirty,"screenshotdirty");
	HX_MARK_MEMBER_NAME(Gfx_obj::_fullscreen,"_fullscreen");
	HX_MARK_MEMBER_NAME(Gfx_obj::meshbatchcount,"meshbatchcount");
	HX_MARK_MEMBER_NAME(Gfx_obj::meshbatch,"meshbatch");
	HX_MARK_MEMBER_NAME(Gfx_obj::backbuffer,"backbuffer");
	HX_MARK_MEMBER_NAME(Gfx_obj::drawto,"drawto");
	HX_MARK_MEMBER_NAME(Gfx_obj::screen,"screen");
	HX_MARK_MEMBER_NAME(Gfx_obj::tempquad,"tempquad");
	HX_MARK_MEMBER_NAME(Gfx_obj::temppoly4,"temppoly4");
	HX_MARK_MEMBER_NAME(Gfx_obj::templine,"templine");
	HX_MARK_MEMBER_NAME(Gfx_obj::drawstate,"drawstate");
	HX_MARK_MEMBER_NAME(Gfx_obj::DRAWSTATE_NONE,"DRAWSTATE_NONE");
	HX_MARK_MEMBER_NAME(Gfx_obj::DRAWSTATE_MESH,"DRAWSTATE_MESH");
	HX_MARK_MEMBER_NAME(Gfx_obj::DRAWSTATE_POLY4,"DRAWSTATE_POLY4");
	HX_MARK_MEMBER_NAME(Gfx_obj::DRAWSTATE_IMAGE,"DRAWSTATE_IMAGE");
	HX_MARK_MEMBER_NAME(Gfx_obj::DRAWSTATE_TILES,"DRAWSTATE_TILES");
	HX_MARK_MEMBER_NAME(Gfx_obj::DRAWSTATE_TEXT,"DRAWSTATE_TEXT");
	HX_MARK_MEMBER_NAME(Gfx_obj::starlingassets,"starlingassets");
	HX_MARK_MEMBER_NAME(Gfx_obj::trect,"trect");
	HX_MARK_MEMBER_NAME(Gfx_obj::shapematrix,"shapematrix");
	HX_MARK_MEMBER_NAME(Gfx_obj::starstage,"starstage");
	HX_MARK_MEMBER_NAME(Gfx_obj::flashstage,"flashstage");
	HX_MARK_MEMBER_NAME(Gfx_obj::transform,"transform");
	HX_MARK_MEMBER_NAME(Gfx_obj::coltransform,"coltransform");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagerotate,"imagerotate");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagerotatexpivot,"imagerotatexpivot");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagerotateypivot,"imagerotateypivot");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagexscale,"imagexscale");
	HX_MARK_MEMBER_NAME(Gfx_obj::imageyscale,"imageyscale");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagescalexpivot,"imagescalexpivot");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagescaleypivot,"imagescaleypivot");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagealphamult,"imagealphamult");
	HX_MARK_MEMBER_NAME(Gfx_obj::imagecolormult,"imagecolormult");
	HX_MARK_MEMBER_NAME(Gfx_obj::tempxalign,"tempxalign");
	HX_MARK_MEMBER_NAME(Gfx_obj::tempyalign,"tempyalign");
	HX_MARK_MEMBER_NAME(Gfx_obj::temprotate,"temprotate");
	HX_MARK_MEMBER_NAME(Gfx_obj::tx,"tx");
	HX_MARK_MEMBER_NAME(Gfx_obj::ty,"ty");
	HX_MARK_MEMBER_NAME(Gfx_obj::tx2,"tx2");
	HX_MARK_MEMBER_NAME(Gfx_obj::ty2,"ty2");
	HX_MARK_MEMBER_NAME(Gfx_obj::haxegonimage,"haxegonimage");
	HX_MARK_MEMBER_NAME(Gfx_obj::imageindex,"imageindex");
	HX_MARK_MEMBER_NAME(Gfx_obj::images,"images");
	HX_MARK_MEMBER_NAME(Gfx_obj::tiles,"tiles");
	HX_MARK_MEMBER_NAME(Gfx_obj::tilesetindex,"tilesetindex");
	HX_MARK_MEMBER_NAME(Gfx_obj::currenttileset,"currenttileset");
	HX_MARK_MEMBER_NAME(Gfx_obj::gfxinit,"gfxinit");
	HX_MARK_MEMBER_NAME(Gfx_obj::perfectfit,"perfectfit");
	HX_MARK_MEMBER_NAME(Gfx_obj::dynamicwidth,"dynamicwidth");
	HX_MARK_MEMBER_NAME(Gfx_obj::dynamicheight,"dynamicheight");
	HX_MARK_MEMBER_NAME(Gfx_obj::keeppixelratio,"keeppixelratio");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Gfx_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Gfx_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Gfx_obj::MAX_NUM_MESH,"MAX_NUM_MESH");
	HX_VISIT_MEMBER_NAME(Gfx_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Gfx_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Gfx_obj::TOP,"TOP");
	HX_VISIT_MEMBER_NAME(Gfx_obj::BOTTOM,"BOTTOM");
	HX_VISIT_MEMBER_NAME(Gfx_obj::CENTER,"CENTER");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screenwidth,"screenwidth");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screenheight,"screenheight");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screenwidthmid,"screenwidthmid");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screenheightmid,"screenheightmid");
	HX_VISIT_MEMBER_NAME(Gfx_obj::devicexres,"devicexres");
	HX_VISIT_MEMBER_NAME(Gfx_obj::deviceyres,"deviceyres");
	HX_VISIT_MEMBER_NAME(Gfx_obj::currenttilesetname,"currenttilesetname");
	HX_VISIT_MEMBER_NAME(Gfx_obj::t1,"t1");
	HX_VISIT_MEMBER_NAME(Gfx_obj::t2,"t2");
	HX_VISIT_MEMBER_NAME(Gfx_obj::t3,"t3");
	HX_VISIT_MEMBER_NAME(Gfx_obj::_linethickness,"_linethickness");
	HX_VISIT_MEMBER_NAME(Gfx_obj::clearcolor,"clearcolor");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screenshot,"screenshot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screenshotdirty,"screenshotdirty");
	HX_VISIT_MEMBER_NAME(Gfx_obj::_fullscreen,"_fullscreen");
	HX_VISIT_MEMBER_NAME(Gfx_obj::meshbatchcount,"meshbatchcount");
	HX_VISIT_MEMBER_NAME(Gfx_obj::meshbatch,"meshbatch");
	HX_VISIT_MEMBER_NAME(Gfx_obj::backbuffer,"backbuffer");
	HX_VISIT_MEMBER_NAME(Gfx_obj::drawto,"drawto");
	HX_VISIT_MEMBER_NAME(Gfx_obj::screen,"screen");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tempquad,"tempquad");
	HX_VISIT_MEMBER_NAME(Gfx_obj::temppoly4,"temppoly4");
	HX_VISIT_MEMBER_NAME(Gfx_obj::templine,"templine");
	HX_VISIT_MEMBER_NAME(Gfx_obj::drawstate,"drawstate");
	HX_VISIT_MEMBER_NAME(Gfx_obj::DRAWSTATE_NONE,"DRAWSTATE_NONE");
	HX_VISIT_MEMBER_NAME(Gfx_obj::DRAWSTATE_MESH,"DRAWSTATE_MESH");
	HX_VISIT_MEMBER_NAME(Gfx_obj::DRAWSTATE_POLY4,"DRAWSTATE_POLY4");
	HX_VISIT_MEMBER_NAME(Gfx_obj::DRAWSTATE_IMAGE,"DRAWSTATE_IMAGE");
	HX_VISIT_MEMBER_NAME(Gfx_obj::DRAWSTATE_TILES,"DRAWSTATE_TILES");
	HX_VISIT_MEMBER_NAME(Gfx_obj::DRAWSTATE_TEXT,"DRAWSTATE_TEXT");
	HX_VISIT_MEMBER_NAME(Gfx_obj::starlingassets,"starlingassets");
	HX_VISIT_MEMBER_NAME(Gfx_obj::trect,"trect");
	HX_VISIT_MEMBER_NAME(Gfx_obj::shapematrix,"shapematrix");
	HX_VISIT_MEMBER_NAME(Gfx_obj::starstage,"starstage");
	HX_VISIT_MEMBER_NAME(Gfx_obj::flashstage,"flashstage");
	HX_VISIT_MEMBER_NAME(Gfx_obj::transform,"transform");
	HX_VISIT_MEMBER_NAME(Gfx_obj::coltransform,"coltransform");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagerotate,"imagerotate");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagerotatexpivot,"imagerotatexpivot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagerotateypivot,"imagerotateypivot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagexscale,"imagexscale");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imageyscale,"imageyscale");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagescalexpivot,"imagescalexpivot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagescaleypivot,"imagescaleypivot");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagealphamult,"imagealphamult");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imagecolormult,"imagecolormult");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tempxalign,"tempxalign");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tempyalign,"tempyalign");
	HX_VISIT_MEMBER_NAME(Gfx_obj::temprotate,"temprotate");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tx,"tx");
	HX_VISIT_MEMBER_NAME(Gfx_obj::ty,"ty");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tx2,"tx2");
	HX_VISIT_MEMBER_NAME(Gfx_obj::ty2,"ty2");
	HX_VISIT_MEMBER_NAME(Gfx_obj::haxegonimage,"haxegonimage");
	HX_VISIT_MEMBER_NAME(Gfx_obj::imageindex,"imageindex");
	HX_VISIT_MEMBER_NAME(Gfx_obj::images,"images");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tiles,"tiles");
	HX_VISIT_MEMBER_NAME(Gfx_obj::tilesetindex,"tilesetindex");
	HX_VISIT_MEMBER_NAME(Gfx_obj::currenttileset,"currenttileset");
	HX_VISIT_MEMBER_NAME(Gfx_obj::gfxinit,"gfxinit");
	HX_VISIT_MEMBER_NAME(Gfx_obj::perfectfit,"perfectfit");
	HX_VISIT_MEMBER_NAME(Gfx_obj::dynamicwidth,"dynamicwidth");
	HX_VISIT_MEMBER_NAME(Gfx_obj::dynamicheight,"dynamicheight");
	HX_VISIT_MEMBER_NAME(Gfx_obj::keeppixelratio,"keeppixelratio");
};

#endif

hx::Class Gfx_obj::__mClass;

static ::String Gfx_obj_sStaticFields[] = {
	HX_HCSTRING("MAX_NUM_MESH","\x41","\x8a","\xe1","\xcb"),
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("TOP","\x75","\x02","\x40","\x00"),
	HX_HCSTRING("BOTTOM","\xeb","\x92","\xfb","\x17"),
	HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8"),
	HX_HCSTRING("screenwidth","\x1a","\x93","\xba","\xee"),
	HX_HCSTRING("screenheight","\x53","\x9c","\xd5","\xaa"),
	HX_HCSTRING("screenwidthmid","\xae","\xea","\x65","\xbd"),
	HX_HCSTRING("screenheightmid","\x15","\xab","\xc3","\x5c"),
	HX_HCSTRING("devicexres","\x7e","\x53","\x59","\xce"),
	HX_HCSTRING("deviceyres","\x1d","\x8a","\x02","\xcf"),
	HX_HCSTRING("currenttilesetname","\xe6","\xe9","\x26","\x89"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("reset_ifclear","\xe0","\x7e","\xb5","\xaf"),
	HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("resetalpha","\x2f","\x6f","\x05","\x77"),
	HX_HCSTRING("set_imagealpha","\xe0","\x6e","\x4c","\x30"),
	HX_HCSTRING("get_imagealpha","\x6c","\x86","\x2c","\x10"),
	HX_HCSTRING("resetcolor","\x34","\x39","\xcb","\x9f"),
	HX_HCSTRING("set_imagecolor","\xe5","\x38","\x12","\x59"),
	HX_HCSTRING("get_imagecolor","\x71","\x50","\xf2","\x38"),
	HX_HCSTRING("numberoftiles","\x65","\x1d","\x88","\x12"),
	HX_HCSTRING("changetileset","\xc4","\xfd","\x16","\xd9"),
	HX_HCSTRING("loadtiles","\x9f","\xd9","\x3e","\x98"),
	HX_HCSTRING("addblanktiles","\x12","\x53","\xad","\x70"),
	HX_HCSTRING("createtiles","\x09","\xc5","\x82","\xa6"),
	HX_HCSTRING("tilewidth","\x18","\xa4","\x90","\xc2"),
	HX_HCSTRING("tileheight","\x95","\x69","\x4e","\x32"),
	HX_HCSTRING("getassetpackedtexture","\x89","\x4e","\x26","\xc2"),
	HX_HCSTRING("loadimagefrompackedtexture","\xa4","\x61","\x64","\x0d"),
	HX_HCSTRING("loadimage","\x75","\xfb","\x72","\x45"),
	HX_HCSTRING("createimage","\xdf","\xe6","\xb6","\x53"),
	HX_HCSTRING("imagewidth","\xcb","\x0c","\x03","\x43"),
	HX_HCSTRING("imageheight","\x82","\x9d","\xf7","\x15"),
	HX_HCSTRING("promotetorendertarget","\x22","\x11","\x86","\x60"),
	HX_HCSTRING("drawtoscreen","\x2b","\x3f","\x49","\x36"),
	HX_HCSTRING("drawtoimage","\x7c","\x18","\xb7","\x72"),
	HX_HCSTRING("drawtotile","\x2d","\x11","\x0c","\xa5"),
	HX_HCSTRING("t1","\x3d","\x65","\x00","\x00"),
	HX_HCSTRING("t2","\x3e","\x65","\x00","\x00"),
	HX_HCSTRING("t3","\x3f","\x65","\x00","\x00"),
	HX_HCSTRING("imagealignx","\xae","\x2b","\x46","\x51"),
	HX_HCSTRING("imagealigny","\xaf","\x2b","\x46","\x51"),
	HX_HCSTRING("imagealignonimagex","\xa6","\x1a","\xf4","\x36"),
	HX_HCSTRING("imagealignonimagey","\xa7","\x1a","\xf4","\x36"),
	HX_HCSTRING("internaldrawimage","\xfa","\x2d","\x0a","\xd3"),
	HX_HCSTRING("drawimage","\xd7","\xe4","\x46","\xf2"),
	HX_HCSTRING("drawsubimage","\xdf","\xd5","\x9c","\x9b"),
	HX_HCSTRING("grabtilefromscreen","\xd0","\xf9","\x67","\xf5"),
	HX_HCSTRING("grabtilefromimage","\x77","\x39","\xf5","\x09"),
	HX_HCSTRING("grabimagefromscreen","\x25","\xa1","\x58","\x26"),
	HX_HCSTRING("grabimagefromimage","\xc2","\x93","\x93","\x43"),
	HX_HCSTRING("copytile","\x63","\x05","\xc2","\xe6"),
	HX_HCSTRING("drawsubtile","\x2a","\x51","\x1e","\xac"),
	HX_HCSTRING("drawtile","\x32","\x49","\x8d","\x76"),
	HX_HCSTRING("tilealignx","\xc1","\xf7","\x9c","\x6d"),
	HX_HCSTRING("tilealigny","\xc2","\xf7","\x9c","\x6d"),
	HX_HCSTRING("tilealignontilex","\x14","\x40","\x14","\xaf"),
	HX_HCSTRING("tilealignontiley","\x15","\x40","\x14","\xaf"),
	HX_HCSTRING("drawline","\xf8","\x95","\x43","\x71"),
	HX_HCSTRING("drawhexagon","\x5c","\xa4","\x3c","\x1b"),
	HX_HCSTRING("fillhexagon","\xbd","\xdf","\x8f","\xf5"),
	HX_HCSTRING("drawcircle","\x14","\x79","\x3c","\x63"),
	HX_HCSTRING("fillcircle","\xd3","\x84","\x13","\x25"),
	HX_HCSTRING("drawtri","\xa7","\x97","\xf0","\xfb"),
	HX_HCSTRING("filltri","\x88","\x4e","\x08","\x04"),
	HX_HCSTRING("drawbox","\x87","\xec","\xe2","\xfb"),
	HX_HCSTRING("fillbox","\x68","\xa3","\xfa","\x03"),
	HX_HCSTRING("updatemeshbatch","\x84","\x73","\x65","\x00"),
	HX_HCSTRING("endmeshbatch","\x72","\xab","\xdc","\xbf"),
	HX_HCSTRING("endmeshbatchonsurface","\x3c","\x4d","\x82","\x2b"),
	HX_HCSTRING("_linethickness","\x41","\x2b","\x65","\x3a"),
	HX_HCSTRING("get_linethickness","\x57","\x46","\x83","\x02"),
	HX_HCSTRING("set_linethickness","\x63","\x1e","\xf1","\x25"),
	HX_HCSTRING("clearcolor","\xb6","\x40","\x39","\x8c"),
	HX_HCSTRING("clearscreen","\xb9","\xd4","\xb5","\xa6"),
	HX_HCSTRING("setpixel","\xa4","\xbf","\xaa","\x3d"),
	HX_HCSTRING("screenshot","\x66","\x36","\xb0","\xd9"),
	HX_HCSTRING("screenshotdirty","\xec","\x27","\x03","\xf0"),
	HX_HCSTRING("getpixel","\x30","\x66","\x4d","\x8f"),
	HX_HCSTRING("updategraphicsmode","\x37","\x7d","\x77","\x0c"),
	HX_HCSTRING("getscreenx","\xb6","\x21","\x47","\xac"),
	HX_HCSTRING("getscreeny","\xb7","\x21","\x47","\xac"),
	HX_HCSTRING("resizescreen","\x60","\x84","\xd6","\xf6"),
	HX_HCSTRING("_fullscreen","\x5a","\x07","\x3e","\xcc"),
	HX_HCSTRING("get_fullscreen","\x84","\xc2","\xa9","\x6f"),
	HX_HCSTRING("set_fullscreen","\xf8","\xaa","\xc9","\x8f"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("onresize","\x53","\xdc","\x93","\xb3"),
	HX_HCSTRING("loadpackedtextures","\x56","\x57","\xaa","\xc2"),
	HX_HCSTRING("initgfx","\x69","\x90","\x9d","\xcb"),
	HX_HCSTRING("settrect","\xb6","\x90","\x29","\x91"),
	HX_HCSTRING("startframe","\x8b","\xe0","\x6c","\x8f"),
	HX_HCSTRING("endframe","\x72","\x9a","\x53","\x71"),
	HX_HCSTRING("meshbatchcount","\x02","\xef","\x3b","\xb5"),
	HX_HCSTRING("meshbatch","\xad","\x82","\xad","\x52"),
	HX_HCSTRING("backbuffer","\x67","\x2e","\x8a","\xda"),
	HX_HCSTRING("drawto","\x7f","\x9a","\xd6","\xdf"),
	HX_HCSTRING("screen","\x6c","\x3b","\x5d","\x47"),
	HX_HCSTRING("tempquad","\xdb","\x15","\xa5","\xaf"),
	HX_HCSTRING("temppoly4","\xd4","\x98","\x78","\x69"),
	HX_HCSTRING("templine","\x08","\xf5","\x4d","\xac"),
	HX_HCSTRING("drawstate","\x8d","\x3b","\xe9","\xb8"),
	HX_HCSTRING("DRAWSTATE_NONE","\x0a","\xc0","\x94","\xc2"),
	HX_HCSTRING("DRAWSTATE_MESH","\x3f","\xf7","\xe3","\xc1"),
	HX_HCSTRING("DRAWSTATE_POLY4","\xd6","\xfe","\x5e","\xa6"),
	HX_HCSTRING("DRAWSTATE_IMAGE","\xa9","\x19","\x36","\x9d"),
	HX_HCSTRING("DRAWSTATE_TILES","\xd3","\xf7","\x01","\xf0"),
	HX_HCSTRING("DRAWSTATE_TEXT","\xff","\x79","\x84","\xc6"),
	HX_HCSTRING("starlingassets","\x4b","\x5b","\xeb","\x9a"),
	HX_HCSTRING("trect","\x98","\x97","\x22","\x16"),
	HX_HCSTRING("shapematrix","\x22","\xa8","\x75","\x19"),
	HX_HCSTRING("starstage","\xac","\x6d","\xaa","\x87"),
	HX_HCSTRING("flashstage","\x0e","\x97","\xee","\x0e"),
	HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"),
	HX_HCSTRING("coltransform","\x2c","\xa5","\x75","\xb2"),
	HX_HCSTRING("imagerotate","\xf6","\xdb","\xcb","\xde"),
	HX_HCSTRING("imagerotatexpivot","\xc0","\xcf","\xb7","\x18"),
	HX_HCSTRING("imagerotateypivot","\x1f","\x2c","\x13","\x7f"),
	HX_HCSTRING("imagexscale","\xad","\xb0","\x4d","\x87"),
	HX_HCSTRING("imageyscale","\x0c","\x0d","\xa9","\xed"),
	HX_HCSTRING("imagescalexpivot","\xd9","\x21","\x6e","\x5b"),
	HX_HCSTRING("imagescaleypivot","\x38","\x7e","\xc9","\xc1"),
	HX_HCSTRING("imagealphamult","\x93","\xb3","\xf9","\x23"),
	HX_HCSTRING("imagecolormult","\x18","\x64","\x6d","\x65"),
	HX_HCSTRING("tempxalign","\x61","\xed","\x3f","\x03"),
	HX_HCSTRING("tempyalign","\xc0","\x49","\x9b","\x69"),
	HX_HCSTRING("temprotate","\x6f","\x90","\xfb","\xb1"),
	HX_HCSTRING("tx","\x84","\x65","\x00","\x00"),
	HX_HCSTRING("ty","\x85","\x65","\x00","\x00"),
	HX_HCSTRING("tx2","\x2e","\x6e","\x58","\x00"),
	HX_HCSTRING("ty2","\x0d","\x6f","\x58","\x00"),
	HX_HCSTRING("haxegonimage","\x7b","\x02","\xf7","\xa9"),
	HX_HCSTRING("imageindex","\xd7","\xf1","\xb4","\x36"),
	HX_HCSTRING("images","\xb8","\x50","\x92","\xfe"),
	HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10"),
	HX_HCSTRING("tilesetindex","\x5e","\x3d","\xbc","\x37"),
	HX_HCSTRING("currenttileset","\x1b","\xce","\xd6","\x85"),
	HX_HCSTRING("gfxinit","\x09","\x6d","\x5a","\xe1"),
	HX_HCSTRING("perfectfit","\xe4","\x62","\x88","\x13"),
	HX_HCSTRING("dynamicwidth","\x27","\x8a","\xdf","\xed"),
	HX_HCSTRING("dynamicheight","\xa6","\xd0","\x08","\xec"),
	HX_HCSTRING("keeppixelratio","\x8a","\x91","\x1d","\x25"),
	::String(null())
};

void Gfx_obj::__register()
{
	hx::Object *dummy = new Gfx_obj;
	Gfx_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Gfx","\xcb","\xea","\x14","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Gfx_obj::__GetStatic;
	__mClass->mSetStaticField = &Gfx_obj::__SetStatic;
	__mClass->mMarkFunc = Gfx_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Gfx_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Gfx_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Gfx_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Gfx_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Gfx_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Gfx_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_55_boot)
HXDLIN(  55)		MAX_NUM_MESH = (int)16383;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_56_boot)
HXDLIN(  56)		LEFT = (int)-10000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_57_boot)
HXDLIN(  57)		RIGHT = (int)-20000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_58_boot)
HXDLIN(  58)		TOP = (int)-10000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_59_boot)
HXDLIN(  59)		BOTTOM = (int)-20000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_60_boot)
HXDLIN(  60)		CENTER = (int)-15000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1043_boot)
HXDLIN(1043)		clearcolor = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1063_boot)
HXDLIN(1063)		screenshotdirty = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1429_boot)
HXDLIN(1429)		meshbatchcount = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1430_boot)
HXDLIN(1430)		meshbatch = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1435_boot)
HXDLIN(1435)		tempquad =  ::starling::display::Quad_obj::__alloc( HX_CTX ,(int)1,(int)1,null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1436_boot)
HXDLIN(1436)		temppoly4 =  ::starling::display::Poly4_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)1,(int)0,(int)1,(int)1,(int)0,(int)1,null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1437_boot)
HXDLIN(1437)		templine =  ::starling::display::Line_obj::__alloc( HX_CTX ,(int)1,(int)1,(int)2,(int)2,(int)1,(int)16777215);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1439_boot)
HXDLIN(1439)		drawstate = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1440_boot)
HXDLIN(1440)		DRAWSTATE_NONE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1441_boot)
HXDLIN(1441)		DRAWSTATE_MESH = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1442_boot)
HXDLIN(1442)		DRAWSTATE_POLY4 = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1443_boot)
HXDLIN(1443)		DRAWSTATE_IMAGE = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1444_boot)
HXDLIN(1444)		DRAWSTATE_TILES = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1445_boot)
HXDLIN(1445)		DRAWSTATE_TEXT = (int)5;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1448_boot)
HXDLIN(1448)		trect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1449_boot)
HXDLIN(1449)		shapematrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1474_boot)
HXDLIN(1474)		imageindex =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1475_boot)
HXDLIN(1475)		images = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1477_boot)
HXDLIN(1477)		tiles = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ba5054a55673250e_1478_boot)
HXDLIN(1478)		tilesetindex =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1479_boot)
HXDLIN(1479)		currenttileset = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1481_boot)
HXDLIN(1481)		gfxinit = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1482_boot)
HXDLIN(1482)		perfectfit = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1483_boot)
HXDLIN(1483)		dynamicwidth = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1484_boot)
HXDLIN(1484)		dynamicheight = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba5054a55673250e_1485_boot)
HXDLIN(1485)		keeppixelratio = false;
            	}
}

} // end namespace haxegon
