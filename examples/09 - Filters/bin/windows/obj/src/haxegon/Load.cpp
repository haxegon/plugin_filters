// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxegon_Core
#include <haxegon/Core.h>
#endif
#ifndef INCLUDED_haxegon_Load
#include <haxegon/Load.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0f7c67d16a5a0eb6_11_new,"haxegon.Load","new",0x7f22d386,"haxegon.Load.new","haxegon/Load.hx",11,0x2082f0c9)
HX_LOCAL_STACK_FRAME(_hx_pos_0f7c67d16a5a0eb6_18_onAddedToStage,"haxegon.Load","onAddedToStage",0x1c88a4bc,"haxegon.Load.onAddedToStage","haxegon/Load.hx",18,0x2082f0c9)
HX_LOCAL_STACK_FRAME(_hx_pos_0f7c67d16a5a0eb6_23_start,"haxegon.Load","start",0x96fe0d08,"haxegon.Load.start","haxegon/Load.hx",23,0x2082f0c9)
namespace haxegon{

void Load_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0f7c67d16a5a0eb6_11_new)
HXLINE(  12)		super::__construct();
HXLINE(  14)		if (hx::IsNotNull( this->stage )) {
HXLINE(  14)			this->start();
            		}
            		else {
HXLINE(  15)			this->addEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null(),null(),null());
            		}
            	}

Dynamic Load_obj::__CreateEmpty() { return new Load_obj; }

void *Load_obj::_hx_vtable = 0;

Dynamic Load_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Load_obj > _hx_result = new Load_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Load_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x17120186) {
		if (inClassId<=(int)0x0ddfced7) {
			if (inClassId<=(int)0x06ec7656) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x06ec7656;
			} else {
				return inClassId==(int)0x0ddfced7;
			}
		} else {
			return inClassId==(int)0x17120186;
		}
	} else {
		if (inClassId<=(int)0x1b123bf8) {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Load_obj::onAddedToStage( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_0f7c67d16a5a0eb6_18_onAddedToStage)
HXLINE(  19)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->onAddedToStage_dyn(),null());
HXLINE(  20)		this->start();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Load_obj,onAddedToStage,(void))

void Load_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_0f7c67d16a5a0eb6_23_start)
HXLINE(  24)		this->starling =  ::starling::core::Starling_obj::__alloc( HX_CTX ,hx::ClassOf< ::haxegon::Core >(),this->stage,null(),null(),null(),null());
HXLINE(  25)		this->starling->start();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Load_obj,start,(void))


hx::ObjectPtr< Load_obj > Load_obj::__new() {
	hx::ObjectPtr< Load_obj > __this = new Load_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Load_obj > Load_obj::__alloc(hx::Ctx *_hx_ctx) {
	Load_obj *__this = (Load_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Load_obj), true, "haxegon.Load"));
	*(void **)__this = Load_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Load_obj::Load_obj()
{
}

void Load_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Load);
	HX_MARK_MEMBER_NAME(starling,"starling");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Load_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(starling,"starling");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Load_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"starling") ) { return hx::Val( starling ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onAddedToStage") ) { return hx::Val( onAddedToStage_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Load_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"starling") ) { starling=inValue.Cast<  ::starling::core::Starling >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Load_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("starling","\xc8","\x4c","\x62","\x3d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Load_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::core::Starling*/ ,(int)offsetof(Load_obj,starling),HX_HCSTRING("starling","\xc8","\x4c","\x62","\x3d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Load_obj_sStaticStorageInfo = 0;
#endif

static ::String Load_obj_sMemberFields[] = {
	HX_HCSTRING("starling","\xc8","\x4c","\x62","\x3d"),
	HX_HCSTRING("onAddedToStage","\x22","\x82","\x44","\x36"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	::String(null()) };

static void Load_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Load_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Load_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Load_obj::__mClass,"__mClass");
};

#endif

hx::Class Load_obj::__mClass;

void Load_obj::__register()
{
	hx::Object *dummy = new Load_obj;
	Load_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Load","\x94","\x58","\x8d","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Load_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Load_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Load_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Load_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Load_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Load_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
