// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxegon_filters_BloomEffect
#include <haxegon/filters/BloomEffect.h>
#endif
#ifndef INCLUDED_haxegon_filters_Bloomfilter
#include <haxegon/filters/Bloomfilter.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_filters_FragmentFilter
#include <starling/filters/FragmentFilter.h>
#endif
#ifndef INCLUDED_starling_rendering_Effect
#include <starling/rendering/Effect.h>
#endif
#ifndef INCLUDED_starling_rendering_FilterEffect
#include <starling/rendering/FilterEffect.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4d0a11778777aaed_37_new,"haxegon.filters.Bloomfilter","new",0xe57b37cc,"haxegon.filters.Bloomfilter.new","haxegon/filters/Bloomfilter.hx",37,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_40_get_red,"haxegon.filters.Bloomfilter","get_red",0xa0792f54,"haxegon.filters.Bloomfilter.get_red","haxegon/filters/Bloomfilter.hx",40,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_41_set_red,"haxegon.filters.Bloomfilter","set_red",0x937ac060,"haxegon.filters.Bloomfilter.set_red","haxegon/filters/Bloomfilter.hx",41,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_50_get_green,"haxegon.filters.Bloomfilter","get_green",0x47d32b86,"haxegon.filters.Bloomfilter.get_green","haxegon/filters/Bloomfilter.hx",50,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_51_set_green,"haxegon.filters.Bloomfilter","set_green",0x2b241792,"haxegon.filters.Bloomfilter.set_green","haxegon/filters/Bloomfilter.hx",51,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_60_get_blue,"haxegon.filters.Bloomfilter","get_blue",0xbf022f37,"haxegon.filters.Bloomfilter.get_blue","haxegon/filters/Bloomfilter.hx",60,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_61_set_blue,"haxegon.filters.Bloomfilter","set_blue",0x6d5f88ab,"haxegon.filters.Bloomfilter.set_blue","haxegon/filters/Bloomfilter.hx",61,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_70_get_blur,"haxegon.filters.Bloomfilter","get_blur",0xbf022f44,"haxegon.filters.Bloomfilter.get_blur","haxegon/filters/Bloomfilter.hx",70,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_71_set_blur,"haxegon.filters.Bloomfilter","set_blur",0x6d5f88b8,"haxegon.filters.Bloomfilter.set_blur","haxegon/filters/Bloomfilter.hx",71,0x12c42da6)
HX_LOCAL_STACK_FRAME(_hx_pos_4d0a11778777aaed_83_createEffect,"haxegon.filters.Bloomfilter","createEffect",0x5696e5c1,"haxegon.filters.Bloomfilter.createEffect","haxegon/filters/Bloomfilter.hx",83,0x12c42da6)
namespace haxegon{
namespace filters{

void Bloomfilter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_37_new)
HXLINE(  68)		this->_blur = ((Float)2);
HXLINE(  58)		this->_blue = ((Float)1);
HXLINE(  48)		this->_green = ((Float)1);
HXLINE(  38)		this->_red = ((Float)1);
HXLINE(  79)		super::__construct();
            	}

Dynamic Bloomfilter_obj::__CreateEmpty() { return new Bloomfilter_obj; }

void *Bloomfilter_obj::_hx_vtable = 0;

Dynamic Bloomfilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Bloomfilter_obj > _hx_result = new Bloomfilter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Bloomfilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25137bc0) {
		if (inClassId<=(int)0x0bce1d34) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0bce1d34;
		} else {
			return inClassId==(int)0x25137bc0;
		}
	} else {
		return inClassId==(int)0x685ebdbb;
	}
}

Float Bloomfilter_obj::get_red(){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_40_get_red)
HXDLIN(  40)		return this->_red;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bloomfilter_obj,get_red,return )

Float Bloomfilter_obj::set_red(Float _r){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_41_set_red)
HXLINE(  42)		this->_red = _r;
HXLINE(  43)		if (hx::IsNotNull( this->actualeffect )) {
HXLINE(  43)			hx::TCast<  ::haxegon::filters::BloomEffect >::cast(this->actualeffect)->red = this->_red;
            		}
HXLINE(  45)		return this->_red;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bloomfilter_obj,set_red,return )

Float Bloomfilter_obj::get_green(){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_50_get_green)
HXDLIN(  50)		return this->_green;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bloomfilter_obj,get_green,return )

Float Bloomfilter_obj::set_green(Float _g){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_51_set_green)
HXLINE(  52)		this->_green = _g;
HXLINE(  53)		if (hx::IsNotNull( this->actualeffect )) {
HXLINE(  53)			hx::TCast<  ::haxegon::filters::BloomEffect >::cast(this->actualeffect)->green = this->_green;
            		}
HXLINE(  55)		return this->_green;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bloomfilter_obj,set_green,return )

Float Bloomfilter_obj::get_blue(){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_60_get_blue)
HXDLIN(  60)		return this->_blue;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bloomfilter_obj,get_blue,return )

Float Bloomfilter_obj::set_blue(Float _b){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_61_set_blue)
HXLINE(  62)		this->_blue = _b;
HXLINE(  63)		if (hx::IsNotNull( this->actualeffect )) {
HXLINE(  63)			hx::TCast<  ::haxegon::filters::BloomEffect >::cast(this->actualeffect)->blue = this->_blue;
            		}
HXLINE(  65)		return this->_blue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bloomfilter_obj,set_blue,return )

Float Bloomfilter_obj::get_blur(){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_70_get_blur)
HXDLIN(  70)		return this->_blur;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bloomfilter_obj,get_blur,return )

Float Bloomfilter_obj::set_blur(Float _b){
            	HX_STACKFRAME(&_hx_pos_4d0a11778777aaed_71_set_blur)
HXLINE(  72)		this->_blur = _b;
HXLINE(  73)		if (hx::IsNotNull( this->actualeffect )) {
HXLINE(  73)			hx::TCast<  ::haxegon::filters::BloomEffect >::cast(this->actualeffect)->blur = this->_blur;
            		}
HXLINE(  75)		return this->_blur;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bloomfilter_obj,set_blur,return )

 ::starling::rendering::FilterEffect Bloomfilter_obj::createEffect(){
            	HX_GC_STACKFRAME(&_hx_pos_4d0a11778777aaed_83_createEffect)
HXLINE(  84)		Float _hx_tmp = this->get_blur();
HXDLIN(  84)		Float _hx_tmp1 = this->get_red();
HXDLIN(  84)		Float _hx_tmp2 = this->get_green();
HXDLIN(  84)		this->actualeffect =  ::haxegon::filters::BloomEffect_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->get_blue(),null());
HXLINE(  85)		return this->actualeffect;
            	}



hx::ObjectPtr< Bloomfilter_obj > Bloomfilter_obj::__new() {
	hx::ObjectPtr< Bloomfilter_obj > __this = new Bloomfilter_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Bloomfilter_obj > Bloomfilter_obj::__alloc(hx::Ctx *_hx_ctx) {
	Bloomfilter_obj *__this = (Bloomfilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Bloomfilter_obj), true, "haxegon.filters.Bloomfilter"));
	*(void **)__this = Bloomfilter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Bloomfilter_obj::Bloomfilter_obj()
{
}

void Bloomfilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Bloomfilter);
	HX_MARK_MEMBER_NAME(_red,"_red");
	HX_MARK_MEMBER_NAME(_green,"_green");
	HX_MARK_MEMBER_NAME(_blue,"_blue");
	HX_MARK_MEMBER_NAME(_blur,"_blur");
	HX_MARK_MEMBER_NAME(actualeffect,"actualeffect");
	 ::starling::filters::FragmentFilter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Bloomfilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_red,"_red");
	HX_VISIT_MEMBER_NAME(_green,"_green");
	HX_VISIT_MEMBER_NAME(_blue,"_blue");
	HX_VISIT_MEMBER_NAME(_blur,"_blur");
	HX_VISIT_MEMBER_NAME(actualeffect,"actualeffect");
	 ::starling::filters::FragmentFilter_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Bloomfilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"red") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_red() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_red") ) { return hx::Val( _red ); }
		if (HX_FIELD_EQ(inName,"blue") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blue() ); }
		if (HX_FIELD_EQ(inName,"blur") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_blur() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"green") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_green() ); }
		if (HX_FIELD_EQ(inName,"_blue") ) { return hx::Val( _blue ); }
		if (HX_FIELD_EQ(inName,"_blur") ) { return hx::Val( _blur ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_green") ) { return hx::Val( _green ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_red") ) { return hx::Val( get_red_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_red") ) { return hx::Val( set_red_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_blue") ) { return hx::Val( get_blue_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blue") ) { return hx::Val( set_blue_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blur") ) { return hx::Val( get_blur_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blur") ) { return hx::Val( set_blur_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_green") ) { return hx::Val( get_green_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_green") ) { return hx::Val( set_green_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createEffect") ) { return hx::Val( createEffect_dyn() ); }
		if (HX_FIELD_EQ(inName,"actualeffect") ) { return hx::Val( actualeffect ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Bloomfilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"red") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_red(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_red") ) { _red=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blue") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blue(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"blur") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blur(inValue.Cast< Float >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"green") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_green(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"_blue") ) { _blue=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_blur") ) { _blur=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_green") ) { _green=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"actualeffect") ) { actualeffect=inValue.Cast<  ::starling::rendering::FilterEffect >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bloomfilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_red","\x52","\x1e","\x22","\x3f"));
	outFields->push(HX_HCSTRING("red","\x51","\xd9","\x56","\x00"));
	outFields->push(HX_HCSTRING("_green","\x04","\x56","\xd4","\x95"));
	outFields->push(HX_HCSTRING("green","\xc3","\x0e","\xed","\x99"));
	outFields->push(HX_HCSTRING("_blue","\x79","\x5e","\x2a","\xf4"));
	outFields->push(HX_HCSTRING("blue","\x9a","\x42","\x19","\x41"));
	outFields->push(HX_HCSTRING("_blur","\x86","\x5e","\x2a","\xf4"));
	outFields->push(HX_HCSTRING("blur","\xa7","\x42","\x19","\x41"));
	outFields->push(HX_HCSTRING("actualeffect","\x9f","\x03","\x6e","\xe1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Bloomfilter_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Bloomfilter_obj,_red),HX_HCSTRING("_red","\x52","\x1e","\x22","\x3f")},
	{hx::fsFloat,(int)offsetof(Bloomfilter_obj,_green),HX_HCSTRING("_green","\x04","\x56","\xd4","\x95")},
	{hx::fsFloat,(int)offsetof(Bloomfilter_obj,_blue),HX_HCSTRING("_blue","\x79","\x5e","\x2a","\xf4")},
	{hx::fsFloat,(int)offsetof(Bloomfilter_obj,_blur),HX_HCSTRING("_blur","\x86","\x5e","\x2a","\xf4")},
	{hx::fsObject /*::starling::rendering::FilterEffect*/ ,(int)offsetof(Bloomfilter_obj,actualeffect),HX_HCSTRING("actualeffect","\x9f","\x03","\x6e","\xe1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Bloomfilter_obj_sStaticStorageInfo = 0;
#endif

static ::String Bloomfilter_obj_sMemberFields[] = {
	HX_HCSTRING("_red","\x52","\x1e","\x22","\x3f"),
	HX_HCSTRING("get_red","\xe8","\xa1","\xcb","\x26"),
	HX_HCSTRING("set_red","\xf4","\x32","\xcd","\x19"),
	HX_HCSTRING("_green","\x04","\x56","\xd4","\x95"),
	HX_HCSTRING("get_green","\x1a","\x6b","\x96","\xdd"),
	HX_HCSTRING("set_green","\x26","\x57","\xe7","\xc0"),
	HX_HCSTRING("_blue","\x79","\x5e","\x2a","\xf4"),
	HX_HCSTRING("get_blue","\x23","\xfe","\xd3","\xc0"),
	HX_HCSTRING("set_blue","\x97","\x57","\x31","\x6f"),
	HX_HCSTRING("_blur","\x86","\x5e","\x2a","\xf4"),
	HX_HCSTRING("get_blur","\x30","\xfe","\xd3","\xc0"),
	HX_HCSTRING("set_blur","\xa4","\x57","\x31","\x6f"),
	HX_HCSTRING("createEffect","\xad","\x9a","\xf8","\x82"),
	HX_HCSTRING("actualeffect","\x9f","\x03","\x6e","\xe1"),
	::String(null()) };

static void Bloomfilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Bloomfilter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Bloomfilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Bloomfilter_obj::__mClass,"__mClass");
};

#endif

hx::Class Bloomfilter_obj::__mClass;

void Bloomfilter_obj::__register()
{
	hx::Object *dummy = new Bloomfilter_obj;
	Bloomfilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.filters.Bloomfilter","\xda","\xa1","\x00","\xbe");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Bloomfilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Bloomfilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Bloomfilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Bloomfilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bloomfilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bloomfilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
} // end namespace filters
