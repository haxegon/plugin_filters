// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxegon_Filter
#include <haxegon/Filter.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_filters_Bloomfilter
#include <haxegon/filters/Bloomfilter.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_filters_FragmentFilter
#include <starling/filters/FragmentFilter.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b85a50ba15f3c968_9_reset,"haxegon.Filter","reset",0xa3757907,"haxegon.Filter.reset","haxegon/Filter.hx",9,0x137070b7)
HX_LOCAL_STACK_FRAME(_hx_pos_b85a50ba15f3c968_18_get_blur,"haxegon.Filter","get_blur",0xa45221f8,"haxegon.Filter.get_blur","haxegon/Filter.hx",18,0x137070b7)
HX_LOCAL_STACK_FRAME(_hx_pos_b85a50ba15f3c968_19_set_blur,"haxegon.Filter","set_blur",0x52af7b6c,"haxegon.Filter.set_blur","haxegon/Filter.hx",19,0x137070b7)
HX_LOCAL_STACK_FRAME(_hx_pos_b85a50ba15f3c968_29_get_bloom,"haxegon.Filter","get_bloom",0x23870752,"haxegon.Filter.get_bloom","haxegon/Filter.hx",29,0x137070b7)
HX_LOCAL_STACK_FRAME(_hx_pos_b85a50ba15f3c968_30_set_bloom,"haxegon.Filter","set_bloom",0x06d7f35e,"haxegon.Filter.set_bloom","haxegon/Filter.hx",30,0x137070b7)
HX_LOCAL_STACK_FRAME(_hx_pos_b85a50ba15f3c968_37_init,"haxegon.Filter","init",0xe3d9dad8,"haxegon.Filter.init","haxegon/Filter.hx",37,0x137070b7)
HX_LOCAL_STACK_FRAME(_hx_pos_b85a50ba15f3c968_47_updatefilters,"haxegon.Filter","updatefilters",0x3027060a,"haxegon.Filter.updatefilters","haxegon/Filter.hx",47,0x137070b7)
namespace haxegon{

void Filter_obj::__construct() { }

Dynamic Filter_obj::__CreateEmpty() { return new Filter_obj; }

void *Filter_obj::_hx_vtable = 0;

Dynamic Filter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Filter_obj > _hx_result = new Filter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Filter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x51ad57cc;
}

void Filter_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_b85a50ba15f3c968_9_reset)
HXLINE(  10)		if (hx::IsNotNull( ::haxegon::Gfx_obj::screen )) {
HXLINE(  10)			::haxegon::Gfx_obj::screen->set_filter(null());
            		}
HXLINE(  12)		::haxegon::Filter_obj::_blur = (int)0;
HXLINE(  13)		::haxegon::Filter_obj::_bloom = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Filter_obj,reset,(void))

Float Filter_obj::_blur;

Float Filter_obj::get_blur(){
            	HX_STACKFRAME(&_hx_pos_b85a50ba15f3c968_18_get_blur)
HXDLIN(  18)		return ::haxegon::Filter_obj::_blur;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Filter_obj,get_blur,return )

Float Filter_obj::set_blur(Float _b){
            	HX_STACKFRAME(&_hx_pos_b85a50ba15f3c968_19_set_blur)
HXLINE(  20)		::haxegon::Filter_obj::_blur = _b;
HXLINE(  21)		::haxegon::Filter_obj::updatefilters();
HXLINE(  23)		return ::haxegon::Filter_obj::_blur;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Filter_obj,set_blur,return )

Float Filter_obj::_bloom;

 ::haxegon::filters::Bloomfilter Filter_obj::bloomfilter;

Float Filter_obj::get_bloom(){
            	HX_STACKFRAME(&_hx_pos_b85a50ba15f3c968_29_get_bloom)
HXDLIN(  29)		return ::haxegon::Filter_obj::_bloom;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Filter_obj,get_bloom,return )

Float Filter_obj::set_bloom(Float _b){
            	HX_STACKFRAME(&_hx_pos_b85a50ba15f3c968_30_set_bloom)
HXLINE(  31)		::haxegon::Filter_obj::_bloom = _b;
HXLINE(  32)		::haxegon::Filter_obj::updatefilters();
HXLINE(  34)		return ::haxegon::Filter_obj::_bloom;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Filter_obj,set_bloom,return )

void Filter_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_b85a50ba15f3c968_37_init)
HXLINE(  38)		::haxegon::Filter_obj::_blur = (int)0;
HXLINE(  39)		::haxegon::Filter_obj::_bloom = (int)0;
HXLINE(  40)		::haxegon::Filter_obj::bloomfilter =  ::haxegon::filters::Bloomfilter_obj::__alloc( HX_CTX );
HXLINE(  42)		::haxegon::Filter_obj::reset();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Filter_obj,init,(void))

void Filter_obj::updatefilters(){
            	HX_STACKFRAME(&_hx_pos_b85a50ba15f3c968_47_updatefilters)
HXDLIN(  47)		if (hx::IsNotNull( ::haxegon::Gfx_obj::screen )) {
HXLINE(  48)			::haxegon::Gfx_obj::screen->set_filter(null());
HXLINE(  50)			if ((::haxegon::Filter_obj::_bloom > (int)0)) {
HXLINE(  51)				 ::haxegon::filters::Bloomfilter _hx_tmp = ::haxegon::Filter_obj::bloomfilter;
HXDLIN(  51)				_hx_tmp->set_red((((Float)::haxegon::Filter_obj::_bloom / (Float)(int)2) + ((Float)0.5)));
HXLINE(  52)				 ::haxegon::filters::Bloomfilter _hx_tmp1 = ::haxegon::Filter_obj::bloomfilter;
HXDLIN(  52)				_hx_tmp1->set_green((((Float)::haxegon::Filter_obj::_bloom / (Float)(int)2) + ((Float)0.5)));
HXLINE(  53)				 ::haxegon::filters::Bloomfilter _hx_tmp2 = ::haxegon::Filter_obj::bloomfilter;
HXDLIN(  53)				_hx_tmp2->set_blue((((Float)::haxegon::Filter_obj::_bloom / (Float)(int)2) + ((Float)0.5)));
HXLINE(  54)				 ::haxegon::filters::Bloomfilter _hx_tmp3 = ::haxegon::Filter_obj::bloomfilter;
HXDLIN(  54)				_hx_tmp3->set_blur((::Math_obj::min(((Float)2.5),::Math_obj::max(((::haxegon::Filter_obj::_bloom + ((Float)0.5)) * (int)2),(int)0)) + ::haxegon::Filter_obj::_blur));
HXLINE(  56)				::haxegon::Gfx_obj::screen->set_filter(::haxegon::Filter_obj::bloomfilter);
HXLINE(  57)				return;
            			}
HXLINE(  62)			if ((::haxegon::Filter_obj::_blur > (int)0)) {
HXLINE(  63)				::haxegon::Filter_obj::bloomfilter->set_red(((Float)0.5));
HXLINE(  64)				::haxegon::Filter_obj::bloomfilter->set_green(((Float)0.5));
HXLINE(  65)				::haxegon::Filter_obj::bloomfilter->set_blue(((Float)0.5));
HXLINE(  66)				::haxegon::Filter_obj::bloomfilter->set_blur(::haxegon::Filter_obj::_blur);
HXLINE(  68)				::haxegon::Gfx_obj::screen->set_filter(::haxegon::Filter_obj::bloomfilter);
HXLINE(  69)				return;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Filter_obj,updatefilters,(void))


Filter_obj::Filter_obj()
{
}

bool Filter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"blur") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_blur() ); return true; } }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_blur") ) { outValue = ( _blur ); return true; }
		if (HX_FIELD_EQ(inName,"bloom") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_bloom() ); return true; } }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_bloom") ) { outValue = ( _bloom ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_blur") ) { outValue = get_blur_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blur") ) { outValue = set_blur_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_bloom") ) { outValue = get_bloom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_bloom") ) { outValue = set_bloom_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bloomfilter") ) { outValue = ( bloomfilter ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updatefilters") ) { outValue = updatefilters_dyn(); return true; }
	}
	return false;
}

bool Filter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"blur") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_blur(ioValue.Cast< Float >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_blur") ) { _blur=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"bloom") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_bloom(ioValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_bloom") ) { _bloom=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bloomfilter") ) { bloomfilter=ioValue.Cast<  ::haxegon::filters::Bloomfilter >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Filter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Filter_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Filter_obj::_blur,HX_HCSTRING("_blur","\x86","\x5e","\x2a","\xf4")},
	{hx::fsFloat,(void *) &Filter_obj::_bloom,HX_HCSTRING("_bloom","\x04","\xc7","\xe3","\xb0")},
	{hx::fsObject /*::haxegon::filters::Bloomfilter*/ ,(void *) &Filter_obj::bloomfilter,HX_HCSTRING("bloomfilter","\xbb","\x53","\xf4","\xf1")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Filter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Filter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Filter_obj::_blur,"_blur");
	HX_MARK_MEMBER_NAME(Filter_obj::_bloom,"_bloom");
	HX_MARK_MEMBER_NAME(Filter_obj::bloomfilter,"bloomfilter");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Filter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Filter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Filter_obj::_blur,"_blur");
	HX_VISIT_MEMBER_NAME(Filter_obj::_bloom,"_bloom");
	HX_VISIT_MEMBER_NAME(Filter_obj::bloomfilter,"bloomfilter");
};

#endif

hx::Class Filter_obj::__mClass;

static ::String Filter_obj_sStaticFields[] = {
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("_blur","\x86","\x5e","\x2a","\xf4"),
	HX_HCSTRING("get_blur","\x30","\xfe","\xd3","\xc0"),
	HX_HCSTRING("set_blur","\xa4","\x57","\x31","\x6f"),
	HX_HCSTRING("_bloom","\x04","\xc7","\xe3","\xb0"),
	HX_HCSTRING("bloomfilter","\xbb","\x53","\xf4","\xf1"),
	HX_HCSTRING("get_bloom","\x1a","\xdc","\xa5","\xf8"),
	HX_HCSTRING("set_bloom","\x26","\xc8","\xf6","\xdb"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("updatefilters","\xd2","\xde","\x63","\x07"),
	::String(null())
};

void Filter_obj::__register()
{
	hx::Object *dummy = new Filter_obj;
	Filter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Filter","\xa6","\xd5","\xc9","\xc8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Filter_obj::__GetStatic;
	__mClass->mSetStaticField = &Filter_obj::__SetStatic;
	__mClass->mMarkFunc = Filter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Filter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Filter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Filter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Filter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Filter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
