// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxegon_Core
#include <haxegon/Core.h>
#endif
#ifndef INCLUDED_haxegon_Data
#include <haxegon/Data.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_Filter
#include <haxegon/Filter.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Input
#include <haxegon/Input.h>
#endif
#ifndef INCLUDED_haxegon_Mouse
#include <haxegon/Mouse.h>
#endif
#ifndef INCLUDED_haxegon_Random
#include <haxegon/Random.h>
#endif
#ifndef INCLUDED_haxegon_Scene
#include <haxegon/Scene.h>
#endif
#ifndef INCLUDED_haxegon_Sound
#include <haxegon/Sound.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_starling_core_Starling
#include <starling/core/Starling.h>
#endif
#ifndef INCLUDED_starling_core_StatsDisplay
#include <starling/core/StatsDisplay.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b750787f52566854_25_new,"haxegon.Core","new",0xdbd4873f,"haxegon.Core.new","haxegon/Core.hx",25,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_32_addedtostage,"haxegon.Core","addedtostage",0xd26d7fe4,"haxegon.Core.addedtostage","haxegon/Core.hx",32,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_41_loaded,"haxegon.Core","loaded",0x8d2ae686,"haxegon.Core.loaded","haxegon/Core.hx",41,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_69_continueloading,"haxegon.Core","continueloading",0xfeb8e254,"haxegon.Core.continueloading","haxegon/Core.hx",69,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_101_onEnterFrame,"haxegon.Core","onEnterFrame",0x012a9b35,"haxegon.Core.onEnterFrame","haxegon/Core.hx",101,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_167_doupdate,"haxegon.Core","doupdate",0x78499895,"haxegon.Core.doupdate","haxegon/Core.hx",167,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_202_dorender,"haxegon.Core","dorender",0xf66d7de2,"haxegon.Core.dorender","haxegon/Core.hx",202,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_38_delaycall,"haxegon.Core","delaycall",0x2f3615c0,"haxegon.Core.delaycall","haxegon/Core.hx",38,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_216_get_fps,"haxegon.Core","get_fps",0x1631a2df,"haxegon.Core.get_fps","haxegon/Core.hx",216,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_219_set_fps,"haxegon.Core","set_fps",0x093333eb,"haxegon.Core.set_fps","haxegon/Core.hx",219,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_225_extend_startframe,"haxegon.Core","extend_startframe",0x08e2352f,"haxegon.Core.extend_startframe","haxegon/Core.hx",225,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_230_execute_extendedstartframe,"haxegon.Core","execute_extendedstartframe",0x5f5f4a8f,"haxegon.Core.execute_extendedstartframe","haxegon/Core.hx",230,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_237_extend_afterupdatebeforerender,"haxegon.Core","extend_afterupdatebeforerender",0x36654a96,"haxegon.Core.extend_afterupdatebeforerender","haxegon/Core.hx",237,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_242_execute_extendedafterupdatebeforerender,"haxegon.Core","execute_extendedafterupdatebeforerender",0x0e9e5936,"haxegon.Core.execute_extendedafterupdatebeforerender","haxegon/Core.hx",242,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_249_extend_endframe,"haxegon.Core","extend_endframe",0x813dbe16,"haxegon.Core.extend_endframe","haxegon/Core.hx",249,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_254_execute_extendedendframe,"haxegon.Core","execute_extendedendframe",0x34f8bb76,"haxegon.Core.execute_extendedendframe","haxegon/Core.hx",254,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_272_get_time,"haxegon.Core","get_time",0x5e788857,"haxegon.Core.get_time","haxegon/Core.hx",272,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_275_set_time,"haxegon.Core","set_time",0x0cd5e1cb,"haxegon.Core.set_time","haxegon/Core.hx",275,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_284_get_showstats,"haxegon.Core","get_showstats",0x7e25e378,"haxegon.Core.get_showstats","haxegon/Core.hx",284,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_287_set_showstats,"haxegon.Core","set_showstats",0xc32bc584,"haxegon.Core.set_showstats","haxegon/Core.hx",287,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_302_get_window,"haxegon.Core","get_window",0x87a776ba,"haxegon.Core.get_window","haxegon/Core.hx",302,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_312_quit,"haxegon.Core","quit",0x80298c10,"haxegon.Core.quit","haxegon/Core.hx",312,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_7b66ece9d5da7785_47_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","C:\\coding\\haxe\\haxe\\std/haxe/macro/Compiler.hx",47,0x55ce074c)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_234_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",234,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_235_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",235,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_246_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",246,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_247_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",247,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_258_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",258,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_259_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",259,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_262_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",262,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_263_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",263,0x74bad730)
HX_LOCAL_STACK_FRAME(_hx_pos_b750787f52566854_264_boot,"haxegon.Core","boot",0x763ad073,"haxegon.Core.boot","haxegon/Core.hx",264,0x74bad730)
namespace haxegon{

void Core_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_25_new)
HXLINE(  26)		::haxegon::Core_obj::_fps = (::haxegon::Core_obj::TARGETFRAMERATE = ::Math_obj::round(::starling::core::Starling_obj::get_current()->get_nativeStage()->get_frameRate()));
HXLINE(  28)		super::__construct();
HXLINE(  29)		this->addEventListener(HX_("addedToStage",63,22,55,0c),this->addedtostage_dyn());
            	}

Dynamic Core_obj::__CreateEmpty() { return new Core_obj; }

void *Core_obj::_hx_vtable = 0;

Dynamic Core_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Core_obj > _hx_result = new Core_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Core_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x31a4bcfa) {
		if (inClassId<=(int)0x25137bc0) {
			if (inClassId<=(int)0x00f9998f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x00f9998f;
			} else {
				return inClassId==(int)0x25137bc0;
			}
		} else {
			return inClassId==(int)0x31a4bcfa;
		}
	} else {
		return inClassId==(int)0x478fd1bb || inClassId==(int)0x6dea180f;
	}
}

void Core_obj::addedtostage( ::starling::events::Event e){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_32_addedtostage)
HXLINE(  33)		this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->addedtostage_dyn());
HXLINE(  34)		this->loaded();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Core_obj,addedtostage,(void))

void Core_obj::loaded(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_41_loaded)
HXLINE(  48)		::haxegon::Random_obj::set_seed(::Std_obj::_hx_int((::Math_obj::random() * (int)233280)));
HXLINE(  49)		 ::starling::display::Stage _hx_tmp = this->get_stage();
HXDLIN(  49)		::haxegon::Input_obj::init(_hx_tmp,::starling::core::Starling_obj::get_current()->get_nativeStage());
HXLINE(  50)		 ::starling::display::Stage _hx_tmp1 = this->get_stage();
HXDLIN(  50)		::haxegon::Mouse_obj::init(_hx_tmp1,::starling::core::Starling_obj::get_current()->get_nativeStage());
HXLINE(  51)		::haxegon::Data_obj::initassets();
HXLINE(  52)		::haxegon::Debug_obj::init();
HXLINE(  53)		 ::starling::display::Stage _hx_tmp2 = this->get_stage();
HXDLIN(  53)		::haxegon::Gfx_obj::init(_hx_tmp2,::starling::core::Starling_obj::get_current()->get_nativeStage());
HXLINE(  54)		::haxegon::Filter_obj::init();
HXLINE(  55)		::haxegon::Text_obj::init();
HXLINE(  56)		::haxegon::Text_obj::defaultfont();
HXLINE(  57)		::haxegon::Sound_obj::init();
HXLINE(  61)		::haxegon::Gfx_obj::screenwidth = ::Std_obj::_hx_int(::Std_obj::parseInt(HX_("1280",19,96,89,20)));
HXLINE(  62)		::haxegon::Gfx_obj::screenheight = ::Std_obj::_hx_int(::Std_obj::parseInt(HX_("720",b5,e7,29,00)));
HXLINE(  63)		::haxegon::Gfx_obj::screenwidthmid = ::Std_obj::_hx_int(((Float)::haxegon::Gfx_obj::screenwidth / (Float)(int)2));
HXDLIN(  63)		::haxegon::Gfx_obj::screenheightmid = ::Std_obj::_hx_int(((Float)::haxegon::Gfx_obj::screenheight / (Float)(int)2));
HXLINE(  66)		::haxe::Timer_obj::delay(this->continueloading_dyn(),(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,loaded,(void))

void Core_obj::continueloading(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_69_continueloading)
HXLINE(  71)		::haxegon::Scene_obj::init();
HXLINE(  74)		if (!(::haxegon::Gfx_obj::gfxinit)) {
HXLINE(  75)			 ::Dynamic _hx_tmp = ::Std_obj::parseInt(HX_("1280",19,96,89,20));
HXDLIN(  75)			::haxegon::Gfx_obj::resizescreen(_hx_tmp,::Std_obj::parseInt(HX_("720",b5,e7,29,00)));
HXLINE(  76)			if (::haxegon::Gfx_obj::get_fullscreen()) {
HXLINE(  77)				::haxegon::Gfx_obj::set_fullscreen(true);
            			}
            			else {
HXLINE(  79)				::haxegon::Gfx_obj::set_fullscreen(false);
            			}
            		}
            		else {
HXLINE(  82)			if (::haxegon::Gfx_obj::get_fullscreen()) {
HXLINE(  83)				::haxegon::Gfx_obj::set_fullscreen(true);
            			}
            			else {
HXLINE(  85)				::haxegon::Gfx_obj::set_fullscreen(false);
            			}
            		}
HXLINE(  89)		::haxegon::Gfx_obj::endframe();
HXLINE(  91)		::haxegon::Filter_obj::updatefilters();
HXLINE(  94)		::haxegon::Core_obj::_rate3 = ::Math_obj::round(((Float)(int)3000 / (Float)::haxegon::Core_obj::TARGETFRAMERATE));
HXLINE(  95)		int _hx_tmp1 = ((int)3 * ::openfl::Lib_obj::getTimer());
HXDLIN(  95)		::haxegon::Core_obj::_target3 = (_hx_tmp1 + ::haxegon::Core_obj::_rate3);
HXLINE(  97)		::haxegon::Core_obj::starttime = ::openfl::Lib_obj::getTimer();
HXLINE(  98)		this->get_stage()->addEventListener(HX_("enterFrame",f5,03,50,02),this->onEnterFrame_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,continueloading,(void))

void Core_obj::onEnterFrame( ::starling::events::Event e){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_101_onEnterFrame)
HXLINE( 102)		if (!(::haxegon::Scene_obj::hasseperaterenderfunction)) {
HXLINE( 104)			::haxegon::Core_obj::execute_extendedstartframe();
HXLINE( 105)			this->doupdate((int)0,(int)1);
HXLINE( 106)			return;
            		}
HXLINE( 116)		int _time3 = ((int)3 * ::openfl::Lib_obj::getTimer());
HXLINE( 122)		int _hx_tmp = ::haxegon::Core_obj::_target3;
HXDLIN( 122)		if ((_time3 < (_hx_tmp - (((Float)0.5) * ::haxegon::Core_obj::_rate3)))) {
HXLINE( 123)			return;
            		}
HXLINE( 126)		::haxegon::Core_obj::execute_extendedstartframe();
HXLINE( 130)		int frameupdates = (_time3 - ::haxegon::Core_obj::_target3);
HXDLIN( 130)		int frameupdates1 = ::Math_obj::ceil(::Math_obj::max(((Float)1.0),((Float)(frameupdates + (((Float)0.5) * ::haxegon::Core_obj::_rate3)) / (Float)::haxegon::Core_obj::_rate3)));
HXLINE( 131)		if ((frameupdates1 > (int)4)) {
HXLINE( 132)			 ::Dynamic _hx_tmp1 = hx::ClassOf< ::haxegon::Core >();
HXDLIN( 132)			int _hx_tmp2 = ::haxegon::Core_obj::_rate3;
HXDLIN( 132)			::haxegon::Core_obj::_target3 = (::haxegon::Core_obj::_target3 + (_hx_tmp2 * (frameupdates1 - (int)4)));
HXLINE( 133)			frameupdates1 = (int)4;
            		}
HXLINE( 136)		if (!(::haxegon::Core_obj::frameskip)) {
HXLINE( 137)			frameupdates1 = (int)1;
            		}
HXLINE( 140)		if ((frameupdates1 == (int)1)) {
HXLINE( 146)			int _hx_tmp3 = (::haxegon::Core_obj::_target3 - _time3);
HXDLIN( 146)			if ((_hx_tmp3 > (((Float)0.1) * ::haxegon::Core_obj::_rate3))) {
HXLINE( 147)				 ::Dynamic _hx_tmp4 = hx::ClassOf< ::haxegon::Core >();
HXDLIN( 147)				::haxegon::Core_obj::_target3 = (::haxegon::Core_obj::_target3 - (int)1);
            			}
            			else {
HXLINE( 148)				int _hx_tmp5 = (::haxegon::Core_obj::_target3 - _time3);
HXDLIN( 148)				if ((_hx_tmp5 < (((Float)-0.1) * ::haxegon::Core_obj::_rate3))) {
HXLINE( 149)					 ::Dynamic _hx_tmp6 = hx::ClassOf< ::haxegon::Core >();
HXDLIN( 149)					::haxegon::Core_obj::_target3 = (::haxegon::Core_obj::_target3 + (int)1);
            				}
            			}
            		}
HXLINE( 154)		{
HXLINE( 154)			int _g1 = (int)0;
HXDLIN( 154)			int _g = frameupdates1;
HXDLIN( 154)			while((_g1 < _g)){
HXLINE( 154)				_g1 = (_g1 + (int)1);
HXDLIN( 154)				int upd = (_g1 - (int)1);
HXLINE( 155)				 ::Dynamic _hx_tmp7 = hx::ClassOf< ::haxegon::Core >();
HXDLIN( 155)				::haxegon::Core_obj::_target3 = (::haxegon::Core_obj::_target3 + ::haxegon::Core_obj::_rate3);
HXLINE( 158)				this->doupdate(upd,frameupdates1);
            			}
            		}
HXLINE( 162)		this->dorender();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Core_obj,onEnterFrame,(void))

void Core_obj::doupdate(int updateindex,int updatecount){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_167_doupdate)
HXLINE( 168)		int _hx_tmp = ::haxegon::Gfx_obj::getscreenx(::openfl::Lib_obj::get_current()->get_mouseX());
HXDLIN( 168)		int _hx_tmp1 = ::haxegon::Gfx_obj::getscreeny(::openfl::Lib_obj::get_current()->get_mouseY());
HXDLIN( 168)		::haxegon::Mouse_obj::update(_hx_tmp,_hx_tmp1,(updateindex == (int)0));
HXLINE( 169)		::haxegon::Input_obj::update();
HXLINE( 171)		if (!(::haxegon::Scene_obj::hasseperaterenderfunction)) {
HXLINE( 172)			::haxegon::Gfx_obj::startframe();
HXLINE( 174)			::haxegon::Debug_obj::update();
HXLINE( 175)			::haxegon::Scene_obj::update();
HXLINE( 176)			::haxegon::Debug_obj::render();
HXLINE( 178)			if (::haxegon::Core_obj::hasextended_afterupdatebeforerender) {
HXLINE( 179)				::haxegon::Core_obj::currentupdateindex = updateindex;
HXLINE( 180)				::haxegon::Core_obj::currentupdatecount = updatecount;
HXLINE( 181)				::haxegon::Core_obj::execute_extendedafterupdatebeforerender();
            			}
HXLINE( 184)			::haxegon::Gfx_obj::endframe();
HXLINE( 186)			::haxegon::Core_obj::execute_extendedendframe();
            		}
            		else {
HXLINE( 188)			::haxegon::Debug_obj::update();
HXLINE( 189)			::haxegon::Scene_obj::update();
HXLINE( 190)			::haxegon::Debug_obj::render();
HXLINE( 192)			if (::haxegon::Core_obj::hasextended_afterupdatebeforerender) {
HXLINE( 193)				::haxegon::Core_obj::currentupdateindex = updateindex;
HXLINE( 194)				::haxegon::Core_obj::currentupdatecount = updatecount;
HXLINE( 195)				::haxegon::Core_obj::execute_extendedafterupdatebeforerender();
            			}
            		}
HXLINE( 199)		::haxegon::Sound_obj::update();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Core_obj,doupdate,(void))

void Core_obj::dorender(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_202_dorender)
HXLINE( 203)		::haxegon::Gfx_obj::startframe();
HXLINE( 205)		::haxegon::Scene_obj::render();
HXLINE( 206)		::haxegon::Debug_obj::render();
HXLINE( 207)		::haxegon::Core_obj::execute_extendedendframe();
HXLINE( 209)		::haxegon::Gfx_obj::endframe();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Core_obj,dorender,(void))

::String Core_obj::WINDOW_WIDTH;

::String Core_obj::WINDOW_HEIGHT;

void Core_obj::delaycall( ::Dynamic f,Float time){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b750787f52566854_38_delaycall)
HXDLIN(  38)			f();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_b750787f52566854_38_delaycall)
HXDLIN(  38)		::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_0(f)),::Std_obj::_hx_int((time * (int)1000)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Core_obj,delaycall,(void))

int Core_obj::currentupdateindex;

int Core_obj::currentupdatecount;

int Core_obj::_fps;

int Core_obj::get_fps(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_216_get_fps)
HXDLIN( 216)		return ::haxegon::Core_obj::_fps;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Core_obj,get_fps,return )

int Core_obj::set_fps(int _newfps){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_219_set_fps)
HXLINE( 220)		::starling::core::Starling_obj::get_current()->get_nativeStage()->set_frameRate(_newfps);
HXLINE( 221)		::haxegon::Core_obj::TARGETFRAMERATE = _newfps;
HXLINE( 222)		return _newfps;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Core_obj,set_fps,return )

void Core_obj::extend_startframe( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_225_extend_startframe)
HXLINE( 226)		::haxegon::Core_obj::hasextended_startframe = true;
HXLINE( 227)		::haxegon::Core_obj::extended_startframe->push(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Core_obj,extend_startframe,(void))

void Core_obj::execute_extendedstartframe(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_230_execute_extendedstartframe)
HXDLIN( 230)		if (::haxegon::Core_obj::hasextended_startframe) {
HXLINE( 231)			int _g = (int)0;
HXDLIN( 231)			::cpp::VirtualArray _g1 = ::haxegon::Core_obj::extended_startframe;
HXDLIN( 231)			while((_g < _g1->get_length())){
HXLINE( 231)				 ::Dynamic f = _g1->__get(_g);
HXDLIN( 231)				_g = (_g + (int)1);
HXDLIN( 231)				f();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Core_obj,execute_extendedstartframe,(void))

::cpp::VirtualArray Core_obj::extended_startframe;

bool Core_obj::hasextended_startframe;

void Core_obj::extend_afterupdatebeforerender( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_237_extend_afterupdatebeforerender)
HXLINE( 238)		::haxegon::Core_obj::hasextended_afterupdatebeforerender = true;
HXLINE( 239)		::haxegon::Core_obj::extended_afterupdatebeforerender->push(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Core_obj,extend_afterupdatebeforerender,(void))

void Core_obj::execute_extendedafterupdatebeforerender(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_242_execute_extendedafterupdatebeforerender)
HXDLIN( 242)		if (::haxegon::Core_obj::hasextended_afterupdatebeforerender) {
HXLINE( 243)			int _g = (int)0;
HXDLIN( 243)			::cpp::VirtualArray _g1 = ::haxegon::Core_obj::extended_afterupdatebeforerender;
HXDLIN( 243)			while((_g < _g1->get_length())){
HXLINE( 243)				 ::Dynamic f = _g1->__get(_g);
HXDLIN( 243)				_g = (_g + (int)1);
HXDLIN( 243)				f();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Core_obj,execute_extendedafterupdatebeforerender,(void))

::cpp::VirtualArray Core_obj::extended_afterupdatebeforerender;

bool Core_obj::hasextended_afterupdatebeforerender;

void Core_obj::extend_endframe( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_249_extend_endframe)
HXLINE( 250)		::haxegon::Core_obj::hasextended_endframe = true;
HXLINE( 251)		::haxegon::Core_obj::extended_endframe->push(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Core_obj,extend_endframe,(void))

void Core_obj::execute_extendedendframe(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_254_execute_extendedendframe)
HXDLIN( 254)		if (::haxegon::Core_obj::hasextended_endframe) {
HXLINE( 255)			int _g = (int)0;
HXDLIN( 255)			::cpp::VirtualArray _g1 = ::haxegon::Core_obj::extended_endframe;
HXDLIN( 255)			while((_g < _g1->get_length())){
HXLINE( 255)				 ::Dynamic f = _g1->__get(_g);
HXDLIN( 255)				_g = (_g + (int)1);
HXDLIN( 255)				f();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Core_obj,execute_extendedendframe,(void))

::cpp::VirtualArray Core_obj::extended_endframe;

bool Core_obj::hasextended_endframe;

int Core_obj::TARGETFRAMERATE;

int Core_obj::MAXFRAMESKIP;

bool Core_obj::frameskip;

int Core_obj::_rate3;

int Core_obj::_target3;

int Core_obj::starttime;

Float Core_obj::get_time(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_272_get_time)
HXDLIN( 272)		int _hx_tmp = ::openfl::Lib_obj::getTimer();
HXDLIN( 272)		return ((Float)(_hx_tmp - ::haxegon::Core_obj::starttime) / (Float)(int)1000);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Core_obj,get_time,return )

Float Core_obj::set_time(Float t){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_275_set_time)
HXLINE( 276)		int _hx_tmp = ::openfl::Lib_obj::getTimer();
HXDLIN( 276)		::haxegon::Core_obj::starttime = ::Std_obj::_hx_int((_hx_tmp - (t * (int)1000)));
HXLINE( 277)		int _hx_tmp1 = ::openfl::Lib_obj::getTimer();
HXDLIN( 277)		return (_hx_tmp1 - ::haxegon::Core_obj::starttime);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Core_obj,set_time,return )

bool Core_obj::_showstats;

 ::starling::core::StatsDisplay Core_obj::statsdisplay;

bool Core_obj::get_showstats(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_284_get_showstats)
HXDLIN( 284)		return ::haxegon::Core_obj::_showstats;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Core_obj,get_showstats,return )

bool Core_obj::set_showstats(bool _b){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_287_set_showstats)
HXLINE( 288)		::starling::core::Starling_obj::get_current()->set_showStats(_b);
HXLINE( 289)		return _b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Core_obj,set_showstats,return )

 ::lime::ui::Window Core_obj::get_window(){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_302_get_window)
HXDLIN( 302)		return ::openfl::Lib_obj::get_application()->_hx___windows->__get((int)0).StaticCast<  ::lime::ui::Window >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Core_obj,get_window,return )

void Core_obj::quit( ::Dynamic code){
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_312_quit)
HXDLIN( 312)		if (hx::IsNull( code )) {
HXLINE( 313)			::Sys_obj::exit((int)0);
            		}
            		else {
HXLINE( 315)			::Sys_obj::exit(code);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Core_obj,quit,(void))


hx::ObjectPtr< Core_obj > Core_obj::__new() {
	hx::ObjectPtr< Core_obj > __this = new Core_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Core_obj > Core_obj::__alloc(hx::Ctx *_hx_ctx) {
	Core_obj *__this = (Core_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Core_obj), true, "haxegon.Core"));
	*(void **)__this = Core_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Core_obj::Core_obj()
{
}

hx::Val Core_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"loaded") ) { return hx::Val( loaded_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"doupdate") ) { return hx::Val( doupdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"dorender") ) { return hx::Val( dorender_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addedtostage") ) { return hx::Val( addedtostage_dyn() ); }
		if (HX_FIELD_EQ(inName,"onEnterFrame") ) { return hx::Val( onEnterFrame_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"continueloading") ) { return hx::Val( continueloading_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Core_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_fps() ); return true; } }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_fps") ) { outValue = ( _fps ); return true; }
		if (HX_FIELD_EQ(inName,"time") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_time() ); return true; } }
		if (HX_FIELD_EQ(inName,"quit") ) { outValue = quit_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_rate3") ) { outValue = ( _rate3 ); return true; }
		if (HX_FIELD_EQ(inName,"window") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_window() ); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_fps") ) { outValue = get_fps_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_fps") ) { outValue = set_fps_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_target3") ) { outValue = ( _target3 ); return true; }
		if (HX_FIELD_EQ(inName,"get_time") ) { outValue = get_time_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_time") ) { outValue = set_time_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"delaycall") ) { outValue = delaycall_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"frameskip") ) { outValue = ( frameskip ); return true; }
		if (HX_FIELD_EQ(inName,"starttime") ) { outValue = ( starttime ); return true; }
		if (HX_FIELD_EQ(inName,"showstats") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_showstats() ); return true; } }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_showstats") ) { outValue = ( _showstats ); return true; }
		if (HX_FIELD_EQ(inName,"get_window") ) { outValue = get_window_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"statsdisplay") ) { outValue = ( statsdisplay ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_showstats") ) { outValue = get_showstats_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_showstats") ) { outValue = set_showstats_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"extend_endframe") ) { outValue = extend_endframe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"TARGETFRAMERATE") ) { outValue = ( TARGETFRAMERATE ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"extend_startframe") ) { outValue = extend_startframe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extended_endframe") ) { outValue = ( extended_endframe ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentupdateindex") ) { outValue = ( currentupdateindex ); return true; }
		if (HX_FIELD_EQ(inName,"currentupdatecount") ) { outValue = ( currentupdatecount ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"extended_startframe") ) { outValue = ( extended_startframe ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"hasextended_endframe") ) { outValue = ( hasextended_endframe ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"hasextended_startframe") ) { outValue = ( hasextended_startframe ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"execute_extendedendframe") ) { outValue = execute_extendedendframe_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"execute_extendedstartframe") ) { outValue = execute_extendedstartframe_dyn(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"extend_afterupdatebeforerender") ) { outValue = extend_afterupdatebeforerender_dyn(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"extended_afterupdatebeforerender") ) { outValue = ( extended_afterupdatebeforerender ); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"hasextended_afterupdatebeforerender") ) { outValue = ( hasextended_afterupdatebeforerender ); return true; }
		break;
	case 39:
		if (HX_FIELD_EQ(inName,"execute_extendedafterupdatebeforerender") ) { outValue = execute_extendedafterupdatebeforerender_dyn(); return true; }
	}
	return false;
}

bool Core_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_fps(ioValue.Cast< int >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_fps") ) { _fps=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"time") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_time(ioValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_rate3") ) { _rate3=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_target3") ) { _target3=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameskip") ) { frameskip=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"starttime") ) { starttime=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"showstats") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_showstats(ioValue.Cast< bool >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_showstats") ) { _showstats=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"statsdisplay") ) { statsdisplay=ioValue.Cast<  ::starling::core::StatsDisplay >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"TARGETFRAMERATE") ) { TARGETFRAMERATE=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"extended_endframe") ) { extended_endframe=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentupdateindex") ) { currentupdateindex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"currentupdatecount") ) { currentupdatecount=ioValue.Cast< int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"extended_startframe") ) { extended_startframe=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"hasextended_endframe") ) { hasextended_endframe=ioValue.Cast< bool >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"hasextended_startframe") ) { hasextended_startframe=ioValue.Cast< bool >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"extended_afterupdatebeforerender") ) { extended_afterupdatebeforerender=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"hasextended_afterupdatebeforerender") ) { hasextended_afterupdatebeforerender=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Core_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Core_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Core_obj::WINDOW_WIDTH,HX_HCSTRING("WINDOW_WIDTH","\x17","\x09","\xe0","\xc2")},
	{hx::fsString,(void *) &Core_obj::WINDOW_HEIGHT,HX_HCSTRING("WINDOW_HEIGHT","\x96","\x63","\x77","\x77")},
	{hx::fsInt,(void *) &Core_obj::currentupdateindex,HX_HCSTRING("currentupdateindex","\xd0","\xe0","\xe8","\xa3")},
	{hx::fsInt,(void *) &Core_obj::currentupdatecount,HX_HCSTRING("currentupdatecount","\x8d","\x8a","\x37","\x30")},
	{hx::fsInt,(void *) &Core_obj::_fps,HX_HCSTRING("_fps","\xea","\x0c","\x19","\x3f")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Core_obj::extended_startframe,HX_HCSTRING("extended_startframe","\x91","\x91","\xfe","\x2e")},
	{hx::fsBool,(void *) &Core_obj::hasextended_startframe,HX_HCSTRING("hasextended_startframe","\x77","\x92","\xf4","\xbf")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Core_obj::extended_afterupdatebeforerender,HX_HCSTRING("extended_afterupdatebeforerender","\xf4","\x58","\x19","\x3f")},
	{hx::fsBool,(void *) &Core_obj::hasextended_afterupdatebeforerender,HX_HCSTRING("hasextended_afterupdatebeforerender","\x4e","\x40","\x1c","\xb4")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(void *) &Core_obj::extended_endframe,HX_HCSTRING("extended_endframe","\xf8","\xdd","\x68","\xae")},
	{hx::fsBool,(void *) &Core_obj::hasextended_endframe,HX_HCSTRING("hasextended_endframe","\x5e","\xb9","\x24","\x74")},
	{hx::fsInt,(void *) &Core_obj::TARGETFRAMERATE,HX_HCSTRING("TARGETFRAMERATE","\xfc","\xc3","\x58","\x02")},
	{hx::fsInt,(void *) &Core_obj::MAXFRAMESKIP,HX_HCSTRING("MAXFRAMESKIP","\x08","\x82","\xfb","\xe2")},
	{hx::fsBool,(void *) &Core_obj::frameskip,HX_HCSTRING("frameskip","\x2c","\xa9","\xfc","\x4e")},
	{hx::fsInt,(void *) &Core_obj::_rate3,HX_HCSTRING("_rate3","\x94","\x78","\x0b","\xe0")},
	{hx::fsInt,(void *) &Core_obj::_target3,HX_HCSTRING("_target3","\x43","\x4d","\x20","\xc2")},
	{hx::fsInt,(void *) &Core_obj::starttime,HX_HCSTRING("starttime","\x6f","\x19","\x17","\x1b")},
	{hx::fsBool,(void *) &Core_obj::_showstats,HX_HCSTRING("_showstats","\xc3","\xe7","\xe4","\x7a")},
	{hx::fsObject /*::starling::core::StatsDisplay*/ ,(void *) &Core_obj::statsdisplay,HX_HCSTRING("statsdisplay","\x03","\x46","\x55","\xcc")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Core_obj_sMemberFields[] = {
	HX_HCSTRING("addedtostage","\xa3","\x8a","\xd6","\xab"),
	HX_HCSTRING("loaded","\x05","\x48","\x6f","\x58"),
	HX_HCSTRING("continueloading","\xf5","\xd8","\x51","\x47"),
	HX_HCSTRING("onEnterFrame","\xf4","\xa5","\x93","\xda"),
	HX_HCSTRING("doupdate","\xd4","\x97","\x88","\xe6"),
	HX_HCSTRING("dorender","\x21","\x7d","\xac","\x64"),
	::String(null()) };

static void Core_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Core_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Core_obj::WINDOW_WIDTH,"WINDOW_WIDTH");
	HX_MARK_MEMBER_NAME(Core_obj::WINDOW_HEIGHT,"WINDOW_HEIGHT");
	HX_MARK_MEMBER_NAME(Core_obj::currentupdateindex,"currentupdateindex");
	HX_MARK_MEMBER_NAME(Core_obj::currentupdatecount,"currentupdatecount");
	HX_MARK_MEMBER_NAME(Core_obj::_fps,"_fps");
	HX_MARK_MEMBER_NAME(Core_obj::extended_startframe,"extended_startframe");
	HX_MARK_MEMBER_NAME(Core_obj::hasextended_startframe,"hasextended_startframe");
	HX_MARK_MEMBER_NAME(Core_obj::extended_afterupdatebeforerender,"extended_afterupdatebeforerender");
	HX_MARK_MEMBER_NAME(Core_obj::hasextended_afterupdatebeforerender,"hasextended_afterupdatebeforerender");
	HX_MARK_MEMBER_NAME(Core_obj::extended_endframe,"extended_endframe");
	HX_MARK_MEMBER_NAME(Core_obj::hasextended_endframe,"hasextended_endframe");
	HX_MARK_MEMBER_NAME(Core_obj::TARGETFRAMERATE,"TARGETFRAMERATE");
	HX_MARK_MEMBER_NAME(Core_obj::MAXFRAMESKIP,"MAXFRAMESKIP");
	HX_MARK_MEMBER_NAME(Core_obj::frameskip,"frameskip");
	HX_MARK_MEMBER_NAME(Core_obj::_rate3,"_rate3");
	HX_MARK_MEMBER_NAME(Core_obj::_target3,"_target3");
	HX_MARK_MEMBER_NAME(Core_obj::starttime,"starttime");
	HX_MARK_MEMBER_NAME(Core_obj::_showstats,"_showstats");
	HX_MARK_MEMBER_NAME(Core_obj::statsdisplay,"statsdisplay");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Core_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Core_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Core_obj::WINDOW_WIDTH,"WINDOW_WIDTH");
	HX_VISIT_MEMBER_NAME(Core_obj::WINDOW_HEIGHT,"WINDOW_HEIGHT");
	HX_VISIT_MEMBER_NAME(Core_obj::currentupdateindex,"currentupdateindex");
	HX_VISIT_MEMBER_NAME(Core_obj::currentupdatecount,"currentupdatecount");
	HX_VISIT_MEMBER_NAME(Core_obj::_fps,"_fps");
	HX_VISIT_MEMBER_NAME(Core_obj::extended_startframe,"extended_startframe");
	HX_VISIT_MEMBER_NAME(Core_obj::hasextended_startframe,"hasextended_startframe");
	HX_VISIT_MEMBER_NAME(Core_obj::extended_afterupdatebeforerender,"extended_afterupdatebeforerender");
	HX_VISIT_MEMBER_NAME(Core_obj::hasextended_afterupdatebeforerender,"hasextended_afterupdatebeforerender");
	HX_VISIT_MEMBER_NAME(Core_obj::extended_endframe,"extended_endframe");
	HX_VISIT_MEMBER_NAME(Core_obj::hasextended_endframe,"hasextended_endframe");
	HX_VISIT_MEMBER_NAME(Core_obj::TARGETFRAMERATE,"TARGETFRAMERATE");
	HX_VISIT_MEMBER_NAME(Core_obj::MAXFRAMESKIP,"MAXFRAMESKIP");
	HX_VISIT_MEMBER_NAME(Core_obj::frameskip,"frameskip");
	HX_VISIT_MEMBER_NAME(Core_obj::_rate3,"_rate3");
	HX_VISIT_MEMBER_NAME(Core_obj::_target3,"_target3");
	HX_VISIT_MEMBER_NAME(Core_obj::starttime,"starttime");
	HX_VISIT_MEMBER_NAME(Core_obj::_showstats,"_showstats");
	HX_VISIT_MEMBER_NAME(Core_obj::statsdisplay,"statsdisplay");
};

#endif

hx::Class Core_obj::__mClass;

static ::String Core_obj_sStaticFields[] = {
	HX_HCSTRING("WINDOW_WIDTH","\x17","\x09","\xe0","\xc2"),
	HX_HCSTRING("WINDOW_HEIGHT","\x96","\x63","\x77","\x77"),
	HX_HCSTRING("delaycall","\xa1","\x6d","\x16","\x38"),
	HX_HCSTRING("currentupdateindex","\xd0","\xe0","\xe8","\xa3"),
	HX_HCSTRING("currentupdatecount","\x8d","\x8a","\x37","\x30"),
	HX_HCSTRING("_fps","\xea","\x0c","\x19","\x3f"),
	HX_HCSTRING("get_fps","\x80","\x90","\xc2","\x26"),
	HX_HCSTRING("set_fps","\x8c","\x21","\xc4","\x19"),
	HX_HCSTRING("extend_startframe","\x10","\xd6","\x9e","\x62"),
	HX_HCSTRING("execute_extendedstartframe","\x8e","\x05","\x82","\x7a"),
	HX_HCSTRING("extended_startframe","\x91","\x91","\xfe","\x2e"),
	HX_HCSTRING("hasextended_startframe","\x77","\x92","\xf4","\xbf"),
	HX_HCSTRING("extend_afterupdatebeforerender","\x15","\xf1","\x9a","\xe5"),
	HX_HCSTRING("execute_extendedafterupdatebeforerender","\xd7","\x6a","\x75","\xff"),
	HX_HCSTRING("extended_afterupdatebeforerender","\xf4","\x58","\x19","\x3f"),
	HX_HCSTRING("hasextended_afterupdatebeforerender","\x4e","\x40","\x1c","\xb4"),
	HX_HCSTRING("extend_endframe","\xb7","\xb4","\xd6","\xc9"),
	HX_HCSTRING("execute_extendedendframe","\xb5","\x68","\x66","\x97"),
	HX_HCSTRING("extended_endframe","\xf8","\xdd","\x68","\xae"),
	HX_HCSTRING("hasextended_endframe","\x5e","\xb9","\x24","\x74"),
	HX_HCSTRING("TARGETFRAMERATE","\xfc","\xc3","\x58","\x02"),
	HX_HCSTRING("MAXFRAMESKIP","\x08","\x82","\xfb","\xe2"),
	HX_HCSTRING("frameskip","\x2c","\xa9","\xfc","\x4e"),
	HX_HCSTRING("_rate3","\x94","\x78","\x0b","\xe0"),
	HX_HCSTRING("_target3","\x43","\x4d","\x20","\xc2"),
	HX_HCSTRING("starttime","\x6f","\x19","\x17","\x1b"),
	HX_HCSTRING("get_time","\x96","\x87","\xb7","\xcc"),
	HX_HCSTRING("set_time","\x0a","\xe1","\x14","\x7b"),
	HX_HCSTRING("_showstats","\xc3","\xe7","\xe4","\x7a"),
	HX_HCSTRING("statsdisplay","\x03","\x46","\x55","\xcc"),
	HX_HCSTRING("get_showstats","\xd9","\x3f","\xa6","\xe0"),
	HX_HCSTRING("set_showstats","\xe5","\x21","\xac","\x25"),
	HX_HCSTRING("get_window","\xb9","\x03","\x14","\x43"),
	HX_HCSTRING("quit","\xcf","\x3f","\x0a","\x4b"),
	::String(null())
};

void Core_obj::__register()
{
	hx::Object *dummy = new Core_obj;
	Core_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Core","\xcd","\x7b","\x9a","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Core_obj::__GetStatic;
	__mClass->mSetStaticField = &Core_obj::__SetStatic;
	__mClass->mMarkFunc = Core_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Core_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Core_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Core_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Core_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Core_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Core_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Core_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7b66ece9d5da7785_47_boot)
HXDLIN(  47)		WINDOW_WIDTH = HX_("1280",19,96,89,20);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7b66ece9d5da7785_47_boot)
HXDLIN(  47)		WINDOW_HEIGHT = HX_("720",b5,e7,29,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_234_boot)
HXDLIN( 234)		extended_startframe = ::cpp::VirtualArray_obj::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_235_boot)
HXDLIN( 235)		hasextended_startframe = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_246_boot)
HXDLIN( 246)		extended_afterupdatebeforerender = ::cpp::VirtualArray_obj::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_247_boot)
HXDLIN( 247)		hasextended_afterupdatebeforerender = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_258_boot)
HXDLIN( 258)		extended_endframe = ::cpp::VirtualArray_obj::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_259_boot)
HXDLIN( 259)		hasextended_endframe = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_262_boot)
HXDLIN( 262)		TARGETFRAMERATE = (int)60;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_263_boot)
HXDLIN( 263)		MAXFRAMESKIP = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b750787f52566854_264_boot)
HXDLIN( 264)		frameskip = false;
            	}
}

} // end namespace haxegon
