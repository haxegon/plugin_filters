// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxegon_HaxegonImage
#include <haxegon/HaxegonImage.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_Image
#include <starling/display/Image.h>
#endif
#ifndef INCLUDED_starling_display_Mesh
#include <starling/display/Mesh.h>
#endif
#ifndef INCLUDED_starling_display_Quad
#include <starling/display/Quad.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_70658638dd4bb232_17_new,"haxegon.HaxegonImage","new",0xe6a8883b,"haxegon.HaxegonImage.new","haxegon/Gfx.hx",17,0xa6405f94)
HX_LOCAL_STACK_FRAME(_hx_pos_70658638dd4bb232_20_fetchsize,"haxegon.HaxegonImage","fetchsize",0x0039e816,"haxegon.HaxegonImage.fetchsize","haxegon/Gfx.hx",20,0xa6405f94)
namespace haxegon{

void HaxegonImage_obj::__construct(::String n){
            	HX_STACKFRAME(&_hx_pos_70658638dd4bb232_17_new)
HXDLIN(  17)		this->name = n;
            	}

Dynamic HaxegonImage_obj::__CreateEmpty() { return new HaxegonImage_obj; }

void *HaxegonImage_obj::_hx_vtable = 0;

Dynamic HaxegonImage_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HaxegonImage_obj > _hx_result = new HaxegonImage_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool HaxegonImage_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4819d737;
}

void HaxegonImage_obj::fetchsize(){
            	HX_STACKFRAME(&_hx_pos_70658638dd4bb232_20_fetchsize)
HXLINE(  21)		this->width = ::Std_obj::_hx_int(this->contents->get_width());
HXLINE(  22)		this->height = ::Std_obj::_hx_int(this->contents->get_height());
            	}


HX_DEFINE_DYNAMIC_FUNC0(HaxegonImage_obj,fetchsize,(void))


hx::ObjectPtr< HaxegonImage_obj > HaxegonImage_obj::__new(::String n) {
	hx::ObjectPtr< HaxegonImage_obj > __this = new HaxegonImage_obj();
	__this->__construct(n);
	return __this;
}

hx::ObjectPtr< HaxegonImage_obj > HaxegonImage_obj::__alloc(hx::Ctx *_hx_ctx,::String n) {
	HaxegonImage_obj *__this = (HaxegonImage_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HaxegonImage_obj), true, "haxegon.HaxegonImage"));
	*(void **)__this = HaxegonImage_obj::_hx_vtable;
	__this->__construct(n);
	return __this;
}

HaxegonImage_obj::HaxegonImage_obj()
{
}

void HaxegonImage_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HaxegonImage);
	HX_MARK_MEMBER_NAME(contents,"contents");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_END_CLASS();
}

void HaxegonImage_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(contents,"contents");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
}

hx::Val HaxegonImage_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contents") ) { return hx::Val( contents ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fetchsize") ) { return hx::Val( fetchsize_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HaxegonImage_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contents") ) { contents=inValue.Cast<  ::starling::display::Image >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HaxegonImage_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("contents","\x1a","\x05","\x24","\x2f"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HaxegonImage_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::starling::display::Image*/ ,(int)offsetof(HaxegonImage_obj,contents),HX_HCSTRING("contents","\x1a","\x05","\x24","\x2f")},
	{hx::fsString,(int)offsetof(HaxegonImage_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(HaxegonImage_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(HaxegonImage_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HaxegonImage_obj_sStaticStorageInfo = 0;
#endif

static ::String HaxegonImage_obj_sMemberFields[] = {
	HX_HCSTRING("fetchsize","\xfb","\x59","\x25","\x38"),
	HX_HCSTRING("contents","\x1a","\x05","\x24","\x2f"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	::String(null()) };

static void HaxegonImage_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HaxegonImage_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HaxegonImage_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HaxegonImage_obj::__mClass,"__mClass");
};

#endif

hx::Class HaxegonImage_obj::__mClass;

void HaxegonImage_obj::__register()
{
	hx::Object *dummy = new HaxegonImage_obj;
	HaxegonImage_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.HaxegonImage","\xc9","\x4e","\xa3","\xbd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HaxegonImage_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HaxegonImage_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HaxegonImage_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HaxegonImage_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HaxegonImage_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HaxegonImage_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxegon
