// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_Fontclass
#include <haxegon/Fontclass.h>
#endif
#ifndef INCLUDED_haxegon_Fontfile
#include <haxegon/Fontfile.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Input
#include <haxegon/Input.h>
#endif
#ifndef INCLUDED_haxegon_Key
#include <haxegon/Key.h>
#endif
#ifndef INCLUDED_haxegon_Text
#include <haxegon/Text.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_text_TextField
#include <starling/text/TextField.h>
#endif
#ifndef INCLUDED_starling_text_TextFormat
#include <starling/text/TextFormat.h>
#endif
#ifndef INCLUDED_starling_textures_RenderTexture
#include <starling/textures/RenderTexture.h>
#endif
#ifndef INCLUDED_starling_textures_SubTexture
#include <starling/textures/SubTexture.h>
#endif
#ifndef INCLUDED_starling_textures_Texture
#include <starling/textures/Texture.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_154_setstage,"haxegon.Text","setstage",0xeab4fb8f,"haxegon.Text.setstage","haxegon/Text.hx",154,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_157_init,"haxegon.Text","init",0x39c53d43,"haxegon.Text.init","haxegon/Text.hx",157,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_164_align,"haxegon.Text","align",0xb6494132,"haxegon.Text.align","haxegon/Text.hx",164,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_167_rotation,"haxegon.Text","rotation",0xf428d4f1,"haxegon.Text.rotation","haxegon/Text.hx",167,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_177_get_wordwrap,"haxegon.Text","get_wordwrap",0xc20f89d0,"haxegon.Text.get_wordwrap","haxegon/Text.hx",177,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_180_set_wordwrap,"haxegon.Text","set_wordwrap",0xd708ad44,"haxegon.Text.set_wordwrap","haxegon/Text.hx",180,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_192_currentwidth,"haxegon.Text","currentwidth",0x75351860,"haxegon.Text.currentwidth","haxegon/Text.hx",192,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_196_currentheight,"haxegon.Text","currentheight",0xcf8fb44d,"haxegon.Text.currentheight","haxegon/Text.hx",196,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_199_width,"haxegon.Text","width",0x5f1aa073,"haxegon.Text.width","haxegon/Text.hx",199,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_206_height,"haxegon.Text","height",0x8e813cda,"haxegon.Text.height","haxegon/Text.hx",206,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_218_alignx,"haxegon.Text","alignx",0xc9cfcb06,"haxegon.Text.alignx","haxegon/Text.hx",218,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_235_aligny,"haxegon.Text","aligny",0xc9cfcb07,"haxegon.Text.aligny","haxegon/Text.hx",235,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_252_aligntextx,"haxegon.Text","aligntextx",0x1efc74b9,"haxegon.Text.aligntextx","haxegon/Text.hx",252,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_269_aligntexty,"haxegon.Text","aligntexty",0x1efc74ba,"haxegon.Text.aligntexty","haxegon/Text.hx",269,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_286_display,"haxegon.Text","display",0xdda349ef,"haxegon.Text.display","haxegon/Text.hx",286,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_330_defaultfont,"haxegon.Text","defaultfont",0xf5cd253d,"haxegon.Text.defaultfont","haxegon/Text.hx",330,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_335_setfont,"haxegon.Text","setfont",0x40c4921e,"haxegon.Text.setfont","haxegon/Text.hx",335,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_354_changesize,"haxegon.Text","changesize",0x4701d4a4,"haxegon.Text.changesize","haxegon/Text.hx",354,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_383_resettextfields,"haxegon.Text","resettextfields",0xc054f222,"haxegon.Text.resettextfields","haxegon/Text.hx",383,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_388_addfont,"haxegon.Text","addfont",0xb77d941d,"haxegon.Text.addfont","haxegon/Text.hx",388,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_403_addtypeface,"haxegon.Text","addtypeface",0xe87901a5,"haxegon.Text.addtypeface","haxegon/Text.hx",403,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_411_get_font,"haxegon.Text","get_font",0xaf1db10b,"haxegon.Text.get_font","haxegon/Text.hx",411,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_414_set_font,"haxegon.Text","set_font",0x5d7b0a7f,"haxegon.Text.set_font","haxegon/Text.hx",414,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_428_get_size,"haxegon.Text","get_size",0xb7b0f3fd,"haxegon.Text.get_size","haxegon/Text.hx",428,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_431_set_size,"haxegon.Text","set_size",0x660e4d71,"haxegon.Text.set_size","haxegon/Text.hx",431,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_439_input,"haxegon.Text","input",0x52d5ae77,"haxegon.Text.input","haxegon/Text.hx",439,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_470_get_inputresult,"haxegon.Text","get_inputresult",0xf6399cab,"haxegon.Text.get_inputresult","haxegon/Text.hx",470,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_477_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",477,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_478_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",478,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_479_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",479,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_481_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",481,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_482_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",482,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_484_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",484,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_485_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",485,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_486_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",486,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_487_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",487,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_491_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",491,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_492_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",492,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_493_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",493,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_494_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",494,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_495_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",495,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_497_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",497,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_498_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",498,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_499_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",499,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_500_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",500,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_501_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",501,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_502_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",502,0xb667cca2)
HX_LOCAL_STACK_FRAME(_hx_pos_0259385d01945995_504_boot,"haxegon.Text","boot",0x35258665,"haxegon.Text.boot","haxegon/Text.hx",504,0xb667cca2)
namespace haxegon{

void Text_obj::__construct() { }

Dynamic Text_obj::__CreateEmpty() { return new Text_obj; }

void *Text_obj::_hx_vtable = 0;

Dynamic Text_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Text_obj > _hx_result = new Text_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Text_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x007a17c1;
}

void Text_obj::setstage( ::starling::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_154_setstage)
HXDLIN( 154)		::haxegon::Text_obj::gfxstage = stage;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,setstage,(void))

void Text_obj::init(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_157_init)
HXLINE( 158)		::haxegon::Text_obj::inputfocus = false;
HXLINE( 159)		::haxegon::Text_obj::wordwrapwidth = (int)0;
HXLINE( 160)		::haxegon::Text_obj::inputmaxlength = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,init,(void))

void Text_obj::align(int a){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_164_align)
HXDLIN( 164)		::haxegon::Text_obj::textalign = a;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,align,(void))

void Text_obj::rotation(Float a,hx::Null< int >  __o_xpivot,hx::Null< int >  __o_ypivot){
int xpivot = __o_xpivot.Default(-10000);
int ypivot = __o_ypivot.Default(-10000);
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_167_rotation)
HXLINE( 168)		::haxegon::Text_obj::textrotate = a;
HXLINE( 169)		::haxegon::Text_obj::textrotatexpivot = xpivot;
HXLINE( 170)		::haxegon::Text_obj::textrotateypivot = ypivot;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Text_obj,rotation,(void))

int Text_obj::get_wordwrap(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_177_get_wordwrap)
HXDLIN( 177)		return ::haxegon::Text_obj::wordwrapwidth;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_wordwrap,return )

int Text_obj::set_wordwrap(int textwidth){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_180_set_wordwrap)
HXLINE( 181)		if ((textwidth < (int)0)) {
HXLINE( 182)			::haxegon::Debug_obj::log(HX_("Error: Text.wordwrap must be a number greater than 0.",1e,fd,96,8b),hx::SourceInfo(HX_("Text.hx",11,08,fc,6b),182,HX_("haxegon.Text",1b,8b,cf,a0),HX_("set_wordwrap",11,c0,14,e0)));
HXLINE( 183)			::haxegon::Text_obj::wordwrapwidth = (int)0;
            		}
            		else {
HXLINE( 185)			::haxegon::Text_obj::wordwrapwidth = textwidth;
            		}
HXLINE( 188)		return ::haxegon::Text_obj::wordwrapwidth;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_wordwrap,return )

Float Text_obj::currentwidth(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_192_currentwidth)
HXDLIN( 192)		return ::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->get_width();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,currentwidth,return )

Float Text_obj::currentheight(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_196_currentheight)
HXDLIN( 196)		return ::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->get_height();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,currentheight,return )

Float Text_obj::width(::String text){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_199_width)
HXLINE( 200)		::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->updatebounds();
HXLINE( 202)		::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->tf->set_text(text);
HXLINE( 203)		return ::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->get_width();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,width,return )

Float Text_obj::height(::String text){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_206_height)
HXLINE( 207)		if (hx::IsNull( text )) {
HXLINE( 207)			text = HX_("?",3f,00,00,00);
            		}
HXLINE( 208)		::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->updatebounds();
HXLINE( 210)		::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->tf->set_text(text);
HXLINE( 211)		return ::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->get_height();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,height,return )

Float Text_obj::t1;

Float Text_obj::t2;

Float Text_obj::t3;

Float Text_obj::alignx(Float x){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_218_alignx)
HXLINE( 219)		if ((x <= (int)-5000)) {
HXLINE( 220)			::haxegon::Text_obj::t1 = (x - ::haxegon::Text_obj::CENTER);
HXLINE( 221)			::haxegon::Text_obj::t2 = (x - ::haxegon::Text_obj::LEFT);
HXLINE( 222)			::haxegon::Text_obj::t3 = (x - ::haxegon::Text_obj::RIGHT);
HXLINE( 223)			bool _hx_tmp;
HXDLIN( 223)			if ((::haxegon::Text_obj::t1 != (int)0)) {
HXLINE( 223)				Float _hx_tmp1 = ::Math_obj::abs(::haxegon::Text_obj::t1);
HXDLIN( 223)				if ((_hx_tmp1 < ::Math_obj::abs(::haxegon::Text_obj::t2))) {
HXLINE( 223)					Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Text_obj::t1);
HXDLIN( 223)					_hx_tmp = (_hx_tmp2 < ::Math_obj::abs(::haxegon::Text_obj::t3));
            				}
            				else {
HXLINE( 223)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 223)				_hx_tmp = true;
            			}
HXDLIN( 223)			if (_hx_tmp) {
HXLINE( 224)				Float _hx_tmp3 = ::haxegon::Text_obj::t1;
HXDLIN( 224)				int _hx_tmp4 = ::haxegon::Gfx_obj::screenwidthmid;
HXDLIN( 224)				return (_hx_tmp3 + ::Math_obj::floor((_hx_tmp4 - ((Float)::haxegon::Text_obj::currentwidth() / (Float)(int)2))));
            			}
            			else {
HXLINE( 225)				bool _hx_tmp5;
HXDLIN( 225)				if ((::haxegon::Text_obj::t2 != (int)0)) {
HXLINE( 225)					Float _hx_tmp6 = ::Math_obj::abs(::haxegon::Text_obj::t2);
HXDLIN( 225)					if ((_hx_tmp6 < ::Math_obj::abs(::haxegon::Text_obj::t1))) {
HXLINE( 225)						Float _hx_tmp7 = ::Math_obj::abs(::haxegon::Text_obj::t2);
HXDLIN( 225)						_hx_tmp5 = (_hx_tmp7 < ::Math_obj::abs(::haxegon::Text_obj::t3));
            					}
            					else {
HXLINE( 225)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 225)					_hx_tmp5 = true;
            				}
HXDLIN( 225)				if (_hx_tmp5) {
HXLINE( 226)					return ::haxegon::Text_obj::t2;
            				}
            				else {
HXLINE( 228)					Float _hx_tmp8 = ::haxegon::Text_obj::t3;
HXDLIN( 228)					int _hx_tmp9 = ::haxegon::Gfx_obj::screenwidth;
HXDLIN( 228)					return (_hx_tmp8 + ::Math_obj::floor((_hx_tmp9 - ::haxegon::Text_obj::currentwidth())));
            				}
            			}
            		}
HXLINE( 232)		return ::Math_obj::floor(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,alignx,return )

Float Text_obj::aligny(Float y){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_235_aligny)
HXLINE( 236)		if ((y <= (int)-5000)) {
HXLINE( 237)			::haxegon::Text_obj::t1 = (y - ::haxegon::Text_obj::CENTER);
HXLINE( 238)			::haxegon::Text_obj::t2 = (y - ::haxegon::Text_obj::TOP);
HXLINE( 239)			::haxegon::Text_obj::t3 = (y - ::haxegon::Text_obj::BOTTOM);
HXLINE( 240)			bool _hx_tmp;
HXDLIN( 240)			if ((::haxegon::Text_obj::t1 != (int)0)) {
HXLINE( 240)				Float _hx_tmp1 = ::Math_obj::abs(::haxegon::Text_obj::t1);
HXDLIN( 240)				if ((_hx_tmp1 < ::Math_obj::abs(::haxegon::Text_obj::t2))) {
HXLINE( 240)					Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Text_obj::t1);
HXDLIN( 240)					_hx_tmp = (_hx_tmp2 < ::Math_obj::abs(::haxegon::Text_obj::t3));
            				}
            				else {
HXLINE( 240)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 240)				_hx_tmp = true;
            			}
HXDLIN( 240)			if (_hx_tmp) {
HXLINE( 241)				Float _hx_tmp3 = ::haxegon::Text_obj::t1;
HXDLIN( 241)				int _hx_tmp4 = ::haxegon::Gfx_obj::screenheightmid;
HXDLIN( 241)				return (_hx_tmp3 + ::Math_obj::floor((_hx_tmp4 - ((Float)::haxegon::Text_obj::currentheight() / (Float)(int)2))));
            			}
            			else {
HXLINE( 242)				bool _hx_tmp5;
HXDLIN( 242)				if ((::haxegon::Text_obj::t2 != (int)0)) {
HXLINE( 242)					Float _hx_tmp6 = ::Math_obj::abs(::haxegon::Text_obj::t2);
HXDLIN( 242)					if ((_hx_tmp6 < ::Math_obj::abs(::haxegon::Text_obj::t1))) {
HXLINE( 242)						Float _hx_tmp7 = ::Math_obj::abs(::haxegon::Text_obj::t2);
HXDLIN( 242)						_hx_tmp5 = (_hx_tmp7 < ::Math_obj::abs(::haxegon::Text_obj::t3));
            					}
            					else {
HXLINE( 242)						_hx_tmp5 = false;
            					}
            				}
            				else {
HXLINE( 242)					_hx_tmp5 = true;
            				}
HXDLIN( 242)				if (_hx_tmp5) {
HXLINE( 243)					return ::haxegon::Text_obj::t2;
            				}
            				else {
HXLINE( 245)					Float _hx_tmp8 = ::haxegon::Text_obj::t3;
HXDLIN( 245)					int _hx_tmp9 = ::haxegon::Gfx_obj::screenheight;
HXDLIN( 245)					return (_hx_tmp8 + ::Math_obj::floor((_hx_tmp9 - ::haxegon::Text_obj::currentheight())));
            				}
            			}
            		}
HXLINE( 249)		return ::Math_obj::floor(y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,aligny,return )

Float Text_obj::aligntextx(::String t,Float x){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_252_aligntextx)
HXLINE( 253)		if ((x <= (int)-5000)) {
HXLINE( 254)			::haxegon::Text_obj::t1 = (x - ::haxegon::Text_obj::CENTER);
HXLINE( 255)			::haxegon::Text_obj::t2 = (x - ::haxegon::Text_obj::LEFT);
HXLINE( 256)			::haxegon::Text_obj::t3 = (x - ::haxegon::Text_obj::RIGHT);
HXLINE( 257)			bool _hx_tmp;
HXDLIN( 257)			if ((::haxegon::Text_obj::t1 != (int)0)) {
HXLINE( 257)				Float _hx_tmp1 = ::Math_obj::abs(::haxegon::Text_obj::t1);
HXDLIN( 257)				if ((_hx_tmp1 < ::Math_obj::abs(::haxegon::Text_obj::t2))) {
HXLINE( 257)					Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Text_obj::t1);
HXDLIN( 257)					_hx_tmp = (_hx_tmp2 < ::Math_obj::abs(::haxegon::Text_obj::t3));
            				}
            				else {
HXLINE( 257)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 257)				_hx_tmp = true;
            			}
HXDLIN( 257)			if (_hx_tmp) {
HXLINE( 258)				Float _hx_tmp3 = ::haxegon::Text_obj::t1;
HXDLIN( 258)				return (_hx_tmp3 + ::Math_obj::floor(((Float)::haxegon::Text_obj::width(t) / (Float)(int)2)));
            			}
            			else {
HXLINE( 259)				bool _hx_tmp4;
HXDLIN( 259)				if ((::haxegon::Text_obj::t2 != (int)0)) {
HXLINE( 259)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Text_obj::t2);
HXDLIN( 259)					if ((_hx_tmp5 < ::Math_obj::abs(::haxegon::Text_obj::t1))) {
HXLINE( 259)						Float _hx_tmp6 = ::Math_obj::abs(::haxegon::Text_obj::t2);
HXDLIN( 259)						_hx_tmp4 = (_hx_tmp6 < ::Math_obj::abs(::haxegon::Text_obj::t3));
            					}
            					else {
HXLINE( 259)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 259)					_hx_tmp4 = true;
            				}
HXDLIN( 259)				if (_hx_tmp4) {
HXLINE( 260)					return ::haxegon::Text_obj::t2;
            				}
            				else {
HXLINE( 262)					Float _hx_tmp7 = ::haxegon::Text_obj::t3;
HXDLIN( 262)					return (_hx_tmp7 + ::haxegon::Text_obj::width(t));
            				}
            			}
            		}
HXLINE( 266)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Text_obj,aligntextx,return )

Float Text_obj::aligntexty(::String t,Float y){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_269_aligntexty)
HXLINE( 270)		if ((y <= (int)-5000)) {
HXLINE( 271)			::haxegon::Text_obj::t1 = (y - ::haxegon::Text_obj::CENTER);
HXLINE( 272)			::haxegon::Text_obj::t2 = (y - ::haxegon::Text_obj::TOP);
HXLINE( 273)			::haxegon::Text_obj::t3 = (y - ::haxegon::Text_obj::BOTTOM);
HXLINE( 274)			bool _hx_tmp;
HXDLIN( 274)			if ((::haxegon::Text_obj::t1 != (int)0)) {
HXLINE( 274)				Float _hx_tmp1 = ::Math_obj::abs(::haxegon::Text_obj::t1);
HXDLIN( 274)				if ((_hx_tmp1 < ::Math_obj::abs(::haxegon::Text_obj::t2))) {
HXLINE( 274)					Float _hx_tmp2 = ::Math_obj::abs(::haxegon::Text_obj::t1);
HXDLIN( 274)					_hx_tmp = (_hx_tmp2 < ::Math_obj::abs(::haxegon::Text_obj::t3));
            				}
            				else {
HXLINE( 274)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 274)				_hx_tmp = true;
            			}
HXDLIN( 274)			if (_hx_tmp) {
HXLINE( 275)				Float _hx_tmp3 = ::haxegon::Text_obj::t1;
HXDLIN( 275)				return (_hx_tmp3 + ::Math_obj::floor(((Float)::haxegon::Text_obj::height(t) / (Float)(int)2)));
            			}
            			else {
HXLINE( 276)				bool _hx_tmp4;
HXDLIN( 276)				if ((::haxegon::Text_obj::t2 != (int)0)) {
HXLINE( 276)					Float _hx_tmp5 = ::Math_obj::abs(::haxegon::Text_obj::t2);
HXDLIN( 276)					if ((_hx_tmp5 < ::Math_obj::abs(::haxegon::Text_obj::t1))) {
HXLINE( 276)						Float _hx_tmp6 = ::Math_obj::abs(::haxegon::Text_obj::t2);
HXDLIN( 276)						_hx_tmp4 = (_hx_tmp6 < ::Math_obj::abs(::haxegon::Text_obj::t3));
            					}
            					else {
HXLINE( 276)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 276)					_hx_tmp4 = true;
            				}
HXDLIN( 276)				if (_hx_tmp4) {
HXLINE( 277)					return ::haxegon::Text_obj::t2;
            				}
            				else {
HXLINE( 279)					Float _hx_tmp7 = ::haxegon::Text_obj::t3;
HXDLIN( 279)					return (_hx_tmp7 + ::haxegon::Text_obj::height(t));
            				}
            			}
            		}
HXLINE( 283)		return y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Text_obj,aligntexty,return )

void Text_obj::display(Float x,Float y,::String text,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha){
int color = __o_color.Default(16777215);
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_286_display)
HXLINE( 287)		if ((text == HX_("",00,00,00,00))) {
HXLINE( 287)			return;
            		}
HXLINE( 288)		if ((::haxegon::Gfx_obj::drawstate != (int)5)) {
HXLINE( 288)			::haxegon::Gfx_obj::endmeshbatch();
            		}
HXLINE( 289)		{
HXLINE( 289)			::haxegon::Gfx_obj::meshbatchcount++;
HXDLIN( 289)			if ((::haxegon::Gfx_obj::meshbatchcount >= (int)16383)) {
HXLINE( 289)				::haxegon::Gfx_obj::endmeshbatch();
            			}
            		}
HXLINE( 290)		::haxegon::Gfx_obj::drawstate = (int)5;
HXLINE( 292)		if ((::haxegon::Text_obj::typeface->length == (int)0)) {
HXLINE( 293)			::haxegon::Text_obj::defaultfont();
            		}
HXLINE( 296)		::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->nexttextfield();
HXLINE( 297)		::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->tf->get_format()->set_color(color);
HXLINE( 298)		::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->tf->set_text(text);
HXLINE( 300)		::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->updatebounds();
HXLINE( 302)		x = ::haxegon::Text_obj::alignx(x);
HXDLIN( 302)		y = ::haxegon::Text_obj::aligny(y);
HXLINE( 303)		x = (x - ::haxegon::Text_obj::aligntextx(text,::haxegon::Text_obj::textalign));
HXLINE( 305)		::haxegon::Text_obj::fontmatrix->identity();
HXLINE( 307)		if ((::haxegon::Text_obj::textrotate != (int)0)) {
HXLINE( 308)			if ((::haxegon::Text_obj::textrotatexpivot != ((Float)0.0))) {
HXLINE( 308)				::haxegon::Text_obj::tempxpivot = ::haxegon::Text_obj::aligntextx(text,::haxegon::Text_obj::textrotatexpivot);
            			}
HXLINE( 309)			if ((::haxegon::Text_obj::textrotateypivot != ((Float)0.0))) {
HXLINE( 309)				::haxegon::Text_obj::tempypivot = ::haxegon::Text_obj::aligntexty(text,::haxegon::Text_obj::textrotateypivot);
            			}
HXLINE( 310)			::haxegon::Text_obj::fontmatrix->translate(-(::haxegon::Text_obj::tempxpivot),-(::haxegon::Text_obj::tempypivot));
HXLINE( 311)			 ::openfl::geom::Matrix _hx_tmp = ::haxegon::Text_obj::fontmatrix;
HXDLIN( 311)			_hx_tmp->rotate(((Float)(::haxegon::Text_obj::textrotate * ((Float)3.1415)) / (Float)(int)180));
HXLINE( 312)			::haxegon::Text_obj::fontmatrix->translate(::haxegon::Text_obj::tempxpivot,::haxegon::Text_obj::tempypivot);
            		}
HXLINE( 315)		::haxegon::Text_obj::fontmatrix->translate(x,y);
HXLINE( 316)		if ((::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->type == HX_("ttf",e6,6a,58,00))) {
HXLINE( 317)			::haxegon::Gfx_obj::drawto->draw(::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->tf,::haxegon::Text_obj::fontmatrix,alpha,null());
            		}
            		else {
HXLINE( 319)			if ((alpha != ((Float)1.0))) {
HXLINE( 320)				::haxegon::Gfx_obj::drawto->draw(::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->tf,::haxegon::Text_obj::fontmatrix,alpha,null());
            			}
            			else {
HXLINE( 325)				::haxegon::Gfx_obj::drawto->draw(::haxegon::Text_obj::typeface->__get(::haxegon::Text_obj::currentindex).StaticCast<  ::haxegon::Fontclass >()->tf,::haxegon::Text_obj::fontmatrix,alpha,null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Text_obj,display,(void))

void Text_obj::defaultfont(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_330_defaultfont)
HXLINE( 331)		::haxegon::Text_obj::addfont(null(),(int)1);
HXLINE( 332)		::haxegon::Text_obj::setfont(HX_("default",c1,d8,c3,9b),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,defaultfont,(void))

void Text_obj::setfont(::String fontname,hx::Null< Float >  __o_size){
Float size = __o_size.Default(1);
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_335_setfont)
HXLINE( 336)		if (!(::haxegon::Text_obj::fontfileindex->exists(fontname))) {
HXLINE( 337)			::haxegon::Text_obj::addfont(fontname,size);
            		}
HXLINE( 340)		if ((fontname != ::haxegon::Text_obj::currentfont)) {
HXLINE( 341)			::haxegon::Text_obj::currentfont = fontname;
HXLINE( 342)			::Dynamic this1 = ::haxegon::Text_obj::typefaceindex;
HXDLIN( 342)			::String key = (::haxegon::Text_obj::currentfont + HX_("_",5f,00,00,00));
HXDLIN( 342)			if (( ( ::haxe::ds::StringMap)(this1) )->exists((key + ::Std_obj::string(::haxegon::Text_obj::currentsize)))) {
HXLINE( 343)				::Dynamic this2 = ::haxegon::Text_obj::typefaceindex;
HXDLIN( 343)				::String key1 = (::haxegon::Text_obj::currentfont + HX_("_",5f,00,00,00));
HXDLIN( 343)				::haxegon::Text_obj::currentindex = ( (int)(( ( ::haxe::ds::StringMap)(this2) )->get((key1 + ::Std_obj::string(::haxegon::Text_obj::currentsize)))) );
            			}
            			else {
HXLINE( 345)				::haxegon::Text_obj::addtypeface(::haxegon::Text_obj::currentfont,::haxegon::Text_obj::currentsize);
HXLINE( 346)				::Dynamic this3 = ::haxegon::Text_obj::typefaceindex;
HXDLIN( 346)				::String key2 = (::haxegon::Text_obj::currentfont + HX_("_",5f,00,00,00));
HXDLIN( 346)				::haxegon::Text_obj::currentindex = ( (int)(( ( ::haxe::ds::StringMap)(this3) )->get((key2 + ::Std_obj::string(::haxegon::Text_obj::currentsize)))) );
            			}
            		}
HXLINE( 350)		::haxegon::Text_obj::changesize(size);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Text_obj,setfont,(void))

void Text_obj::changesize(Float t){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_354_changesize)
HXDLIN( 354)		if ((t != ::haxegon::Text_obj::currentsize)) {
HXLINE( 355)			if ((t == (int)-1)) {
HXLINE( 356)				t = (int)1;
HXLINE( 357)				if (::haxegon::Text_obj::fontfileindex->exists(::haxegon::Text_obj::currentfont)) {
HXLINE( 358)					::Array< ::Dynamic> _hx_tmp = ::haxegon::Text_obj::fontfile;
HXDLIN( 358)					if ((_hx_tmp->__get(( (int)(::haxegon::Text_obj::fontfileindex->get(::haxegon::Text_obj::currentfont)) )).StaticCast<  ::haxegon::Fontfile >()->type == HX_("ttf",e6,6a,58,00))) {
HXLINE( 359)						t = (int)24;
            					}
            				}
            				else {
HXLINE( 362)					::haxegon::Debug_obj::log(HX_("Error: changesize called on a font that hasn't been loaded yet",08,4d,a3,47),hx::SourceInfo(HX_("Text.hx",11,08,fc,6b),362,HX_("haxegon.Text",1b,8b,cf,a0),HX_("changesize",31,aa,c3,3b)));
            				}
            			}
HXLINE( 366)			::haxegon::Text_obj::fontlastsize->set(::haxegon::Text_obj::currentfont,t);
HXLINE( 367)			::haxegon::Text_obj::currentsize = t;
HXLINE( 368)			if ((::haxegon::Text_obj::currentfont != HX_("null",87,9e,0e,49))) {
HXLINE( 369)				::Dynamic this1 = ::haxegon::Text_obj::typefaceindex;
HXDLIN( 369)				::String key = (::haxegon::Text_obj::currentfont + HX_("_",5f,00,00,00));
HXDLIN( 369)				if (( ( ::haxe::ds::StringMap)(this1) )->exists((key + ::Std_obj::string(::haxegon::Text_obj::currentsize)))) {
HXLINE( 370)					::Dynamic this2 = ::haxegon::Text_obj::typefaceindex;
HXDLIN( 370)					::String key1 = (::haxegon::Text_obj::currentfont + HX_("_",5f,00,00,00));
HXDLIN( 370)					::haxegon::Text_obj::currentindex = ( (int)(( ( ::haxe::ds::StringMap)(this2) )->get((key1 + ::Std_obj::string(::haxegon::Text_obj::currentsize)))) );
            				}
            				else {
HXLINE( 372)					::haxegon::Text_obj::addtypeface(::haxegon::Text_obj::currentfont,::haxegon::Text_obj::currentsize);
HXLINE( 373)					::Dynamic this3 = ::haxegon::Text_obj::typefaceindex;
HXDLIN( 373)					::String key2 = (::haxegon::Text_obj::currentfont + HX_("_",5f,00,00,00));
HXDLIN( 373)					::haxegon::Text_obj::currentindex = ( (int)(( ( ::haxe::ds::StringMap)(this3) )->get((key2 + ::Std_obj::string(::haxegon::Text_obj::currentsize)))) );
            				}
            			}
            			else {
HXLINE( 376)				::haxegon::Text_obj::addfont(null(),t);
HXLINE( 377)				::haxegon::Text_obj::setfont(HX_("default",c1,d8,c3,9b),t);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,changesize,(void))

void Text_obj::resettextfields(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_383_resettextfields)
HXDLIN( 383)		int _g1 = (int)0;
HXDLIN( 383)		int _g = ::haxegon::Text_obj::typeface->length;
HXDLIN( 383)		while((_g1 < _g)){
HXDLIN( 383)			_g1 = (_g1 + (int)1);
HXDLIN( 383)			int i = (_g1 - (int)1);
HXLINE( 384)			::haxegon::Text_obj::typeface->__get(i).StaticCast<  ::haxegon::Fontclass >()->reset();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,resettextfields,(void))

void Text_obj::addfont(::String fontname,hx::Null< Float >  __o_defaultsize){
Float defaultsize = __o_defaultsize.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_0259385d01945995_388_addfont)
HXLINE( 389)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Text_obj::fontfile;
HXDLIN( 389)		_hx_tmp->push( ::haxegon::Fontfile_obj::__alloc( HX_CTX ,fontname));
HXLINE( 390)		if (hx::IsNull( fontname )) {
HXLINE( 390)			fontname = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 391)		::haxegon::Text_obj::fontfileindex->set(fontname,(::haxegon::Text_obj::fontfile->length - (int)1));
HXLINE( 393)		if ((defaultsize == (int)-1)) {
HXLINE( 394)			::Array< ::Dynamic> _hx_tmp1 = ::haxegon::Text_obj::fontfile;
HXDLIN( 394)			if ((_hx_tmp1->__get((::haxegon::Text_obj::fontfile->length - (int)1)).StaticCast<  ::haxegon::Fontfile >()->type == HX_("ttf",e6,6a,58,00))) {
HXLINE( 395)				defaultsize = (int)24;
            			}
            			else {
HXLINE( 397)				defaultsize = (int)1;
            			}
            		}
HXLINE( 400)		::haxegon::Text_obj::changesize(defaultsize);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Text_obj,addfont,(void))

void Text_obj::addtypeface(::String _name,Float _size){
            	HX_GC_STACKFRAME(&_hx_pos_0259385d01945995_403_addtypeface)
HXLINE( 404)		::Array< ::Dynamic> _hx_tmp = ::haxegon::Text_obj::typeface;
HXDLIN( 404)		_hx_tmp->push( ::haxegon::Fontclass_obj::__alloc( HX_CTX ,_name,_size));
HXLINE( 405)		{
HXLINE( 405)			::Dynamic this1 = ::haxegon::Text_obj::typefaceindex;
HXDLIN( 405)			::String key = ((_name + HX_("_",5f,00,00,00)) + ::Std_obj::string(_size));
HXDLIN( 405)			( ( ::haxe::ds::StringMap)(this1) )->set(key,(::haxegon::Text_obj::typeface->length - (int)1));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Text_obj,addtypeface,(void))

::String Text_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_411_get_font)
HXDLIN( 411)		return ::haxegon::Text_obj::currentfont;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_font,return )

::String Text_obj::set_font(::String fontname){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_414_set_font)
HXLINE( 415)		fontname = fontname.toLowerCase();
HXLINE( 416)		if ((fontname == HX_("",00,00,00,00))) {
HXLINE( 416)			fontname = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 417)		if ((fontname == ::haxegon::Text_obj::currentfont)) {
HXLINE( 417)			return ::haxegon::Text_obj::currentfont;
            		}
HXLINE( 419)		::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 421)		Float _hx_tmp;
HXDLIN( 421)		if (::haxegon::Text_obj::fontlastsize->exists(fontname)) {
HXLINE( 421)			_hx_tmp = ( (Float)(::haxegon::Text_obj::fontlastsize->get(fontname)) );
            		}
            		else {
HXLINE( 421)			_hx_tmp = (int)-1;
            		}
HXDLIN( 421)		::haxegon::Text_obj::setfont(fontname,_hx_tmp);
HXLINE( 422)		return ::haxegon::Text_obj::currentfont;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_font,return )

Float Text_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_428_get_size)
HXDLIN( 428)		return ::haxegon::Text_obj::currentsize;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_size,return )

Float Text_obj::set_size(Float fontsize){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_431_set_size)
HXLINE( 432)		if ((::haxegon::Text_obj::currentsize != fontsize)) {
HXLINE( 433)			::haxegon::Gfx_obj::endmeshbatch();
HXLINE( 434)			::haxegon::Text_obj::changesize(fontsize);
            		}
HXLINE( 436)		return ::haxegon::Text_obj::currentsize;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Text_obj,set_size,return )

bool Text_obj::input(Float x,Float y,hx::Null< int >  __o_col,hx::Null< Float >  __o_alpha){
int col = __o_col.Default(16777215);
Float alpha = __o_alpha.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_439_input)
HXLINE( 440)		if (!(::haxegon::Text_obj::inputfocus)) {
HXLINE( 441)			::haxegon::Text_obj::inputfocus = true;
HXLINE( 442)			::haxegon::Input_obj::keybuffer = HX_("",00,00,00,00);
            		}
HXLINE( 445)		if ((::haxegon::Text_obj::inputmaxlength > (int)0)) {
HXLINE( 446)			if ((::haxegon::Input_obj::keybuffer.length > ::haxegon::Text_obj::inputmaxlength)) {
HXLINE( 447)				::haxegon::Input_obj::keybuffer = ::haxegon::Input_obj::keybuffer.substr((int)0,::haxegon::Text_obj::inputmaxlength);
            			}
            		}
HXLINE( 451)		bool _hx_tmp;
HXDLIN( 451)		bool _hx_tmp1;
HXDLIN( 451)		if ((hx::Mod(::openfl::Lib_obj::getTimer(),(int)400) > (int)200)) {
HXLINE( 451)			_hx_tmp1 = (::haxegon::Text_obj::inputmaxlength == (int)0);
            		}
            		else {
HXLINE( 451)			_hx_tmp1 = false;
            		}
HXDLIN( 451)		if (_hx_tmp1) {
HXLINE( 451)			_hx_tmp = true;
            		}
            		else {
HXLINE( 451)			_hx_tmp = (::haxegon::Input_obj::keybuffer.length < ::haxegon::Text_obj::inputmaxlength);
            		}
HXDLIN( 451)		if (_hx_tmp) {
HXLINE( 452)			::haxegon::Text_obj::display(x,y,::haxegon::Input_obj::keybuffer,col,alpha);
HXLINE( 453)			int oldalign = ::haxegon::Text_obj::textalign;
HXLINE( 454)			::haxegon::Text_obj::align(::haxegon::Text_obj::LEFT);
HXLINE( 455)			Float underscoreoffset = ::haxegon::Text_obj::alignx(x);
HXDLIN( 455)			Float underscoreoffset1 = (underscoreoffset - ::haxegon::Text_obj::aligntextx(::haxegon::Input_obj::keybuffer,oldalign));
HXLINE( 456)			::haxegon::Text_obj::display((underscoreoffset1 + ::haxegon::Text_obj::width(::haxegon::Input_obj::keybuffer)),y,HX_("_",5f,00,00,00),col,alpha);
HXLINE( 457)			::haxegon::Text_obj::align(oldalign);
            		}
            		else {
HXLINE( 459)			::haxegon::Text_obj::display(x,y,::haxegon::Input_obj::keybuffer,col,alpha);
            		}
HXLINE( 462)		bool _hx_tmp2;
HXDLIN( 462)		if (::haxegon::Input_obj::justpressed(::haxegon::Key_obj::ENTER_dyn())) {
HXLINE( 462)			_hx_tmp2 = (::haxegon::Input_obj::keybuffer != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 462)			_hx_tmp2 = false;
            		}
HXDLIN( 462)		if (_hx_tmp2) {
HXLINE( 463)			return true;
            		}
HXLINE( 465)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Text_obj,input,return )

::String Text_obj::inputresult;

::String Text_obj::get_inputresult(){
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_470_get_inputresult)
HXLINE( 471)		::String returnval;
HXDLIN( 471)		if ((::haxegon::Text_obj::inputmaxlength == (int)0)) {
HXLINE( 471)			returnval = ::haxegon::Input_obj::keybuffer;
            		}
            		else {
HXLINE( 471)			returnval = ::haxegon::Input_obj::keybuffer.substr((int)0,::haxegon::Text_obj::inputmaxlength);
            		}
HXLINE( 472)		::haxegon::Input_obj::keybuffer = HX_("",00,00,00,00);
HXLINE( 473)		::haxegon::Text_obj::inputfocus = false;
HXLINE( 474)		return returnval;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Text_obj,get_inputresult,return )

::Array< ::Dynamic> Text_obj::fontfile;

 ::haxe::ds::StringMap Text_obj::fontfileindex;

 ::haxe::ds::StringMap Text_obj::fontlastsize;

::Array< ::Dynamic> Text_obj::typeface;

 ::haxe::ds::StringMap Text_obj::typefaceindex;

 ::openfl::geom::Matrix Text_obj::fontmatrix;

int Text_obj::currentindex;

::String Text_obj::currentfont;

Float Text_obj::currentsize;

 ::starling::display::Stage Text_obj::gfxstage;

int Text_obj::LEFT;

int Text_obj::RIGHT;

int Text_obj::TOP;

int Text_obj::BOTTOM;

int Text_obj::CENTER;

int Text_obj::textalign;

Float Text_obj::textrotate;

Float Text_obj::textrotatexpivot;

Float Text_obj::textrotateypivot;

Float Text_obj::tempxpivot;

Float Text_obj::tempypivot;

int Text_obj::wordwrapwidth;

bool Text_obj::inputfocus;

int Text_obj::inputmaxlength;


Text_obj::Text_obj()
{
}

bool Text_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t1") ) { outValue = ( t1 ); return true; }
		if (HX_FIELD_EQ(inName,"t2") ) { outValue = ( t2 ); return true; }
		if (HX_FIELD_EQ(inName,"t3") ) { outValue = ( t3 ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"TOP") ) { outValue = ( TOP ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_font() ); return true; } }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_size() ); return true; } }
		if (HX_FIELD_EQ(inName,"LEFT") ) { outValue = ( LEFT ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { outValue = align_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"width") ) { outValue = width_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"input") ) { outValue = input_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"RIGHT") ) { outValue = ( RIGHT ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { outValue = height_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"alignx") ) { outValue = alignx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aligny") ) { outValue = aligny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"BOTTOM") ) { outValue = ( BOTTOM ); return true; }
		if (HX_FIELD_EQ(inName,"CENTER") ) { outValue = ( CENTER ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { outValue = display_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setfont") ) { outValue = setfont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addfont") ) { outValue = addfont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setstage") ) { outValue = setstage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rotation") ) { outValue = rotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"wordwrap") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_wordwrap() ); return true; } }
		if (HX_FIELD_EQ(inName,"get_font") ) { outValue = get_font_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_font") ) { outValue = set_font_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_size") ) { outValue = get_size_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_size") ) { outValue = set_size_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fontfile") ) { outValue = ( fontfile ); return true; }
		if (HX_FIELD_EQ(inName,"typeface") ) { outValue = ( typeface ); return true; }
		if (HX_FIELD_EQ(inName,"gfxstage") ) { outValue = ( gfxstage ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textalign") ) { outValue = ( textalign ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"aligntextx") ) { outValue = aligntextx_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"aligntexty") ) { outValue = aligntexty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"changesize") ) { outValue = changesize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fontmatrix") ) { outValue = ( fontmatrix ); return true; }
		if (HX_FIELD_EQ(inName,"textrotate") ) { outValue = ( textrotate ); return true; }
		if (HX_FIELD_EQ(inName,"tempxpivot") ) { outValue = ( tempxpivot ); return true; }
		if (HX_FIELD_EQ(inName,"tempypivot") ) { outValue = ( tempypivot ); return true; }
		if (HX_FIELD_EQ(inName,"inputfocus") ) { outValue = ( inputfocus ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultfont") ) { outValue = defaultfont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addtypeface") ) { outValue = addtypeface_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inputresult") ) { outValue = ( inCallProp == hx::paccAlways ? get_inputresult() : inputresult ); return true; }
		if (HX_FIELD_EQ(inName,"currentfont") ) { outValue = ( currentfont ); return true; }
		if (HX_FIELD_EQ(inName,"currentsize") ) { outValue = ( currentsize ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_wordwrap") ) { outValue = get_wordwrap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_wordwrap") ) { outValue = set_wordwrap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"currentwidth") ) { outValue = currentwidth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fontlastsize") ) { outValue = ( fontlastsize ); return true; }
		if (HX_FIELD_EQ(inName,"currentindex") ) { outValue = ( currentindex ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentheight") ) { outValue = currentheight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fontfileindex") ) { outValue = ( fontfileindex ); return true; }
		if (HX_FIELD_EQ(inName,"typefaceindex") ) { outValue = ( typefaceindex ); return true; }
		if (HX_FIELD_EQ(inName,"wordwrapwidth") ) { outValue = ( wordwrapwidth ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inputmaxlength") ) { outValue = ( inputmaxlength ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"resettextfields") ) { outValue = resettextfields_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_inputresult") ) { outValue = get_inputresult_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textrotatexpivot") ) { outValue = ( textrotatexpivot ); return true; }
		if (HX_FIELD_EQ(inName,"textrotateypivot") ) { outValue = ( textrotateypivot ); return true; }
	}
	return false;
}

bool Text_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t1") ) { t1=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"t2") ) { t2=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"t3") ) { t3=ioValue.Cast< Float >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"TOP") ) { TOP=ioValue.Cast< int >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_font(ioValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_size(ioValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"LEFT") ) { LEFT=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"RIGHT") ) { RIGHT=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"BOTTOM") ) { BOTTOM=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"CENTER") ) { CENTER=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"wordwrap") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_wordwrap(ioValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"fontfile") ) { fontfile=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"typeface") ) { typeface=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"gfxstage") ) { gfxstage=ioValue.Cast<  ::starling::display::Stage >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textalign") ) { textalign=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fontmatrix") ) { fontmatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		if (HX_FIELD_EQ(inName,"textrotate") ) { textrotate=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"tempxpivot") ) { tempxpivot=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"tempypivot") ) { tempypivot=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"inputfocus") ) { inputfocus=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"inputresult") ) { inputresult=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"currentfont") ) { currentfont=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"currentsize") ) { currentsize=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fontlastsize") ) { fontlastsize=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"currentindex") ) { currentindex=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fontfileindex") ) { fontfileindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"typefaceindex") ) { typefaceindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"wordwrapwidth") ) { wordwrapwidth=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inputmaxlength") ) { inputmaxlength=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textrotatexpivot") ) { textrotatexpivot=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"textrotateypivot") ) { textrotateypivot=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Text_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Text_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Text_obj::t1,HX_HCSTRING("t1","\x3d","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Text_obj::t2,HX_HCSTRING("t2","\x3e","\x65","\x00","\x00")},
	{hx::fsFloat,(void *) &Text_obj::t3,HX_HCSTRING("t3","\x3f","\x65","\x00","\x00")},
	{hx::fsString,(void *) &Text_obj::inputresult,HX_HCSTRING("inputresult","\x67","\xd0","\x23","\xc9")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Text_obj::fontfile,HX_HCSTRING("fontfile","\xcb","\xbf","\x60","\xdb")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Text_obj::fontfileindex,HX_HCSTRING("fontfileindex","\x67","\xbb","\x11","\xfb")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Text_obj::fontlastsize,HX_HCSTRING("fontlastsize","\xe6","\xd2","\xdc","\x3c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Text_obj::typeface,HX_HCSTRING("typeface","\x57","\x8c","\xa7","\xc5")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Text_obj::typefaceindex,HX_HCSTRING("typefaceindex","\x5b","\xf3","\x9d","\xda")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Text_obj::fontmatrix,HX_HCSTRING("fontmatrix","\x50","\x59","\x87","\x3b")},
	{hx::fsInt,(void *) &Text_obj::currentindex,HX_HCSTRING("currentindex","\x39","\x10","\xf3","\x71")},
	{hx::fsString,(void *) &Text_obj::currentfont,HX_HCSTRING("currentfont","\x88","\x0a","\x79","\x91")},
	{hx::fsFloat,(void *) &Text_obj::currentsize,HX_HCSTRING("currentsize","\x7a","\x4d","\x0c","\x9a")},
	{hx::fsObject /*::starling::display::Stage*/ ,(void *) &Text_obj::gfxstage,HX_HCSTRING("gfxstage","\xa5","\xf2","\xb7","\x13")},
	{hx::fsInt,(void *) &Text_obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsInt,(void *) &Text_obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsInt,(void *) &Text_obj::TOP,HX_HCSTRING("TOP","\x75","\x02","\x40","\x00")},
	{hx::fsInt,(void *) &Text_obj::BOTTOM,HX_HCSTRING("BOTTOM","\xeb","\x92","\xfb","\x17")},
	{hx::fsInt,(void *) &Text_obj::CENTER,HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8")},
	{hx::fsInt,(void *) &Text_obj::textalign,HX_HCSTRING("textalign","\xf8","\x76","\x51","\x27")},
	{hx::fsFloat,(void *) &Text_obj::textrotate,HX_HCSTRING("textrotate","\xc8","\x52","\x7c","\xcd")},
	{hx::fsFloat,(void *) &Text_obj::textrotatexpivot,HX_HCSTRING("textrotatexpivot","\x12","\x30","\xc0","\x2c")},
	{hx::fsFloat,(void *) &Text_obj::textrotateypivot,HX_HCSTRING("textrotateypivot","\x71","\x8c","\x1b","\x93")},
	{hx::fsFloat,(void *) &Text_obj::tempxpivot,HX_HCSTRING("tempxpivot","\x5e","\xe1","\x50","\xa4")},
	{hx::fsFloat,(void *) &Text_obj::tempypivot,HX_HCSTRING("tempypivot","\xbd","\x3d","\xac","\x0a")},
	{hx::fsInt,(void *) &Text_obj::wordwrapwidth,HX_HCSTRING("wordwrapwidth","\xf2","\x34","\x49","\x49")},
	{hx::fsBool,(void *) &Text_obj::inputfocus,HX_HCSTRING("inputfocus","\x8e","\xb7","\x96","\xef")},
	{hx::fsInt,(void *) &Text_obj::inputmaxlength,HX_HCSTRING("inputmaxlength","\x40","\x9d","\xf0","\x36")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Text_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Text_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Text_obj::t1,"t1");
	HX_MARK_MEMBER_NAME(Text_obj::t2,"t2");
	HX_MARK_MEMBER_NAME(Text_obj::t3,"t3");
	HX_MARK_MEMBER_NAME(Text_obj::inputresult,"inputresult");
	HX_MARK_MEMBER_NAME(Text_obj::fontfile,"fontfile");
	HX_MARK_MEMBER_NAME(Text_obj::fontfileindex,"fontfileindex");
	HX_MARK_MEMBER_NAME(Text_obj::fontlastsize,"fontlastsize");
	HX_MARK_MEMBER_NAME(Text_obj::typeface,"typeface");
	HX_MARK_MEMBER_NAME(Text_obj::typefaceindex,"typefaceindex");
	HX_MARK_MEMBER_NAME(Text_obj::fontmatrix,"fontmatrix");
	HX_MARK_MEMBER_NAME(Text_obj::currentindex,"currentindex");
	HX_MARK_MEMBER_NAME(Text_obj::currentfont,"currentfont");
	HX_MARK_MEMBER_NAME(Text_obj::currentsize,"currentsize");
	HX_MARK_MEMBER_NAME(Text_obj::gfxstage,"gfxstage");
	HX_MARK_MEMBER_NAME(Text_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Text_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Text_obj::TOP,"TOP");
	HX_MARK_MEMBER_NAME(Text_obj::BOTTOM,"BOTTOM");
	HX_MARK_MEMBER_NAME(Text_obj::CENTER,"CENTER");
	HX_MARK_MEMBER_NAME(Text_obj::textalign,"textalign");
	HX_MARK_MEMBER_NAME(Text_obj::textrotate,"textrotate");
	HX_MARK_MEMBER_NAME(Text_obj::textrotatexpivot,"textrotatexpivot");
	HX_MARK_MEMBER_NAME(Text_obj::textrotateypivot,"textrotateypivot");
	HX_MARK_MEMBER_NAME(Text_obj::tempxpivot,"tempxpivot");
	HX_MARK_MEMBER_NAME(Text_obj::tempypivot,"tempypivot");
	HX_MARK_MEMBER_NAME(Text_obj::wordwrapwidth,"wordwrapwidth");
	HX_MARK_MEMBER_NAME(Text_obj::inputfocus,"inputfocus");
	HX_MARK_MEMBER_NAME(Text_obj::inputmaxlength,"inputmaxlength");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Text_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Text_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Text_obj::t1,"t1");
	HX_VISIT_MEMBER_NAME(Text_obj::t2,"t2");
	HX_VISIT_MEMBER_NAME(Text_obj::t3,"t3");
	HX_VISIT_MEMBER_NAME(Text_obj::inputresult,"inputresult");
	HX_VISIT_MEMBER_NAME(Text_obj::fontfile,"fontfile");
	HX_VISIT_MEMBER_NAME(Text_obj::fontfileindex,"fontfileindex");
	HX_VISIT_MEMBER_NAME(Text_obj::fontlastsize,"fontlastsize");
	HX_VISIT_MEMBER_NAME(Text_obj::typeface,"typeface");
	HX_VISIT_MEMBER_NAME(Text_obj::typefaceindex,"typefaceindex");
	HX_VISIT_MEMBER_NAME(Text_obj::fontmatrix,"fontmatrix");
	HX_VISIT_MEMBER_NAME(Text_obj::currentindex,"currentindex");
	HX_VISIT_MEMBER_NAME(Text_obj::currentfont,"currentfont");
	HX_VISIT_MEMBER_NAME(Text_obj::currentsize,"currentsize");
	HX_VISIT_MEMBER_NAME(Text_obj::gfxstage,"gfxstage");
	HX_VISIT_MEMBER_NAME(Text_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Text_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Text_obj::TOP,"TOP");
	HX_VISIT_MEMBER_NAME(Text_obj::BOTTOM,"BOTTOM");
	HX_VISIT_MEMBER_NAME(Text_obj::CENTER,"CENTER");
	HX_VISIT_MEMBER_NAME(Text_obj::textalign,"textalign");
	HX_VISIT_MEMBER_NAME(Text_obj::textrotate,"textrotate");
	HX_VISIT_MEMBER_NAME(Text_obj::textrotatexpivot,"textrotatexpivot");
	HX_VISIT_MEMBER_NAME(Text_obj::textrotateypivot,"textrotateypivot");
	HX_VISIT_MEMBER_NAME(Text_obj::tempxpivot,"tempxpivot");
	HX_VISIT_MEMBER_NAME(Text_obj::tempypivot,"tempypivot");
	HX_VISIT_MEMBER_NAME(Text_obj::wordwrapwidth,"wordwrapwidth");
	HX_VISIT_MEMBER_NAME(Text_obj::inputfocus,"inputfocus");
	HX_VISIT_MEMBER_NAME(Text_obj::inputmaxlength,"inputmaxlength");
};

#endif

hx::Class Text_obj::__mClass;

static ::String Text_obj_sStaticFields[] = {
	HX_HCSTRING("setstage","\xdc","\x63","\x12","\xff"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("align","\xc5","\x56","\x91","\x21"),
	HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"),
	HX_HCSTRING("get_wordwrap","\x9d","\x9c","\x1b","\xcb"),
	HX_HCSTRING("set_wordwrap","\x11","\xc0","\x14","\xe0"),
	HX_HCSTRING("currentwidth","\x2d","\x2b","\x41","\x7e"),
	HX_HCSTRING("currentheight","\xe0","\x14","\x14","\xb1"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("t1","\x3d","\x65","\x00","\x00"),
	HX_HCSTRING("t2","\x3e","\x65","\x00","\x00"),
	HX_HCSTRING("t3","\x3f","\x65","\x00","\x00"),
	HX_HCSTRING("alignx","\x13","\x96","\x9a","\x3d"),
	HX_HCSTRING("aligny","\x14","\x96","\x9a","\x3d"),
	HX_HCSTRING("aligntextx","\x46","\x4a","\xbe","\x13"),
	HX_HCSTRING("aligntexty","\x47","\x4a","\xbe","\x13"),
	HX_HCSTRING("display","\x42","\x2a","\x4a","\xbb"),
	HX_HCSTRING("defaultfont","\x10","\x2b","\xa6","\x2a"),
	HX_HCSTRING("setfont","\x71","\x72","\x6b","\x1e"),
	HX_HCSTRING("changesize","\x31","\xaa","\xc3","\x3b"),
	HX_HCSTRING("resettextfields","\x75","\xdd","\x20","\x54"),
	HX_HCSTRING("addfont","\x70","\x74","\x24","\x95"),
	HX_HCSTRING("addtypeface","\x78","\x07","\x52","\x1d"),
	HX_HCSTRING("get_font","\x58","\x19","\x7b","\xc3"),
	HX_HCSTRING("set_font","\xcc","\x72","\xd8","\x71"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("inputresult","\x67","\xd0","\x23","\xc9"),
	HX_HCSTRING("get_inputresult","\xfe","\x87","\x05","\x8a"),
	HX_HCSTRING("fontfile","\xcb","\xbf","\x60","\xdb"),
	HX_HCSTRING("fontfileindex","\x67","\xbb","\x11","\xfb"),
	HX_HCSTRING("fontlastsize","\xe6","\xd2","\xdc","\x3c"),
	HX_HCSTRING("typeface","\x57","\x8c","\xa7","\xc5"),
	HX_HCSTRING("typefaceindex","\x5b","\xf3","\x9d","\xda"),
	HX_HCSTRING("fontmatrix","\x50","\x59","\x87","\x3b"),
	HX_HCSTRING("currentindex","\x39","\x10","\xf3","\x71"),
	HX_HCSTRING("currentfont","\x88","\x0a","\x79","\x91"),
	HX_HCSTRING("currentsize","\x7a","\x4d","\x0c","\x9a"),
	HX_HCSTRING("gfxstage","\xa5","\xf2","\xb7","\x13"),
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("TOP","\x75","\x02","\x40","\x00"),
	HX_HCSTRING("BOTTOM","\xeb","\x92","\xfb","\x17"),
	HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8"),
	HX_HCSTRING("textalign","\xf8","\x76","\x51","\x27"),
	HX_HCSTRING("textrotate","\xc8","\x52","\x7c","\xcd"),
	HX_HCSTRING("textrotatexpivot","\x12","\x30","\xc0","\x2c"),
	HX_HCSTRING("textrotateypivot","\x71","\x8c","\x1b","\x93"),
	HX_HCSTRING("tempxpivot","\x5e","\xe1","\x50","\xa4"),
	HX_HCSTRING("tempypivot","\xbd","\x3d","\xac","\x0a"),
	HX_HCSTRING("wordwrapwidth","\xf2","\x34","\x49","\x49"),
	HX_HCSTRING("inputfocus","\x8e","\xb7","\x96","\xef"),
	HX_HCSTRING("inputmaxlength","\x40","\x9d","\xf0","\x36"),
	::String(null())
};

void Text_obj::__register()
{
	hx::Object *dummy = new Text_obj;
	Text_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Text","\x1b","\x8b","\xcf","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Text_obj::__GetStatic;
	__mClass->mSetStaticField = &Text_obj::__SetStatic;
	__mClass->mMarkFunc = Text_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Text_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Text_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Text_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Text_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Text_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Text_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_477_boot)
HXDLIN( 477)		fontfile = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_0259385d01945995_478_boot)
HXDLIN( 478)		fontfileindex =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_0259385d01945995_479_boot)
HXDLIN( 479)		fontlastsize =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_481_boot)
HXDLIN( 481)		typeface = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_0259385d01945995_482_boot)
HXDLIN( 482)		typefaceindex =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_0259385d01945995_484_boot)
HXDLIN( 484)		fontmatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_485_boot)
HXDLIN( 485)		currentindex = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_486_boot)
HXDLIN( 486)		currentfont = HX_("null",87,9e,0e,49);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_487_boot)
HXDLIN( 487)		currentsize = ((Float)-1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_491_boot)
HXDLIN( 491)		LEFT = (int)-10000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_492_boot)
HXDLIN( 492)		RIGHT = (int)-20000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_493_boot)
HXDLIN( 493)		TOP = (int)-10000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_494_boot)
HXDLIN( 494)		BOTTOM = (int)-20000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_495_boot)
HXDLIN( 495)		CENTER = (int)-15000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_497_boot)
HXDLIN( 497)		textalign = (int)-10000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_498_boot)
HXDLIN( 498)		textrotate = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_499_boot)
HXDLIN( 499)		textrotatexpivot = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_500_boot)
HXDLIN( 500)		textrotateypivot = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_501_boot)
HXDLIN( 501)		tempxpivot = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_502_boot)
HXDLIN( 502)		tempypivot = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0259385d01945995_504_boot)
HXDLIN( 504)		wordwrapwidth = (int)0;
            	}
}

} // end namespace haxegon
