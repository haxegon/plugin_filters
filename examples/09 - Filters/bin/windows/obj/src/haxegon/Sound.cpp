// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxegon_Data
#include <haxegon/Data.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_HaxegonChannel
#include <haxegon/HaxegonChannel.h>
#endif
#ifndef INCLUDED_haxegon_HaxegonSound
#include <haxegon/HaxegonSound.h>
#endif
#ifndef INCLUDED_haxegon_Music
#include <haxegon/Music.h>
#endif
#ifndef INCLUDED_haxegon_Sound
#include <haxegon/Sound.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_154_load,"haxegon.Sound","load",0xc82f3313,"haxegon.Sound.load","haxegon/Sound.hx",154,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_197_play,"haxegon.Sound","play",0xcad1c6e1,"haxegon.Sound.play","haxegon/Sound.hx",197,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_221_stop,"haxegon.Sound","stop",0xccd388ef,"haxegon.Sound.stop","haxegon/Sound.hx",221,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_236_get_mastervolume,"haxegon.Sound","get_mastervolume",0xf7b784f2,"haxegon.Sound.get_mastervolume","haxegon/Sound.hx",236,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_239_set_mastervolume,"haxegon.Sound","set_mastervolume",0x4df97266,"haxegon.Sound.set_mastervolume","haxegon/Sound.hx",239,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_249_length,"haxegon.Sound","length",0xdf490313,"haxegon.Sound.length","haxegon/Sound.hx",249,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_259_init,"haxegon.Sound","init",0xc632d3fd,"haxegon.Sound.init","haxegon/Sound.hx",259,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_272_update,"haxegon.Sound","update",0xc746f436,"haxegon.Sound.update","haxegon/Sound.hx",272,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_279_isplaying,"haxegon.Sound","isplaying",0x325b50b7,"haxegon.Sound.isplaying","haxegon/Sound.hx",279,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_231_boot,"haxegon.Sound","boot",0xc1931d1f,"haxegon.Sound.boot","haxegon/Sound.hx",231,0xc71b57be)
HX_LOCAL_STACK_FRAME(_hx_pos_03f7f1111a1b937c_234_boot,"haxegon.Sound","boot",0xc1931d1f,"haxegon.Sound.boot","haxegon/Sound.hx",234,0xc71b57be)
namespace haxegon{

void Sound_obj::__construct() { }

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

void *Sound_obj::_hx_vtable = 0;

Dynamic Sound_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Sound_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x46aebd0f;
}

bool Sound_obj::load(::String soundname,hx::Null< Float >  __o_defaultvolume){
Float defaultvolume = __o_defaultvolume.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_03f7f1111a1b937c_154_load)
HXLINE( 155)		soundname = soundname.toLowerCase();
HXLINE( 157)		if (!(::haxegon::Sound_obj::soundindex->exists(soundname))) {
HXLINE( 158)			 ::openfl::media::Sound soundasset = null();
HXLINE( 169)			if (::haxegon::Data_obj::assetexists(((HX_("data/sounds/",c6,86,2c,c9) + soundname) + HX_(".ogg",e1,64,bc,1e)))) {
HXLINE( 170)				soundasset = ::haxegon::Data_obj::getsoundasset(((HX_("data/sounds/",c6,86,2c,c9) + soundname) + HX_(".ogg",e1,64,bc,1e)));
            			}
            			else {
HXLINE( 171)				if (::haxegon::Data_obj::assetexists(((HX_("data/sounds/",c6,86,2c,c9) + soundname) + HX_(".wav",be,71,c2,1e)))) {
HXLINE( 172)					soundasset = ::haxegon::Data_obj::getsoundasset(((HX_("data/sounds/",c6,86,2c,c9) + soundname) + HX_(".wav",be,71,c2,1e)));
            				}
            				else {
HXLINE( 174)					::haxegon::Debug_obj::log(((((HX_("ERROR: In Sound.load(), cannot find \"data/sounds/",b7,29,aa,f9) + soundname) + HX_(".ogg\" or \"data/sounds/",0a,c1,3a,f2)) + soundname) + HX_(".wav\". (either .ogg or .wav files are required for native builds.)",21,05,ca,93)),hx::SourceInfo(HX_("Sound.hx",6f,1d,3b,f3),174,HX_("haxegon.Sound",a1,6e,fd,87),HX_("load",26,9a,b7,47)));
HXLINE( 175)					return false;
            				}
            			}
HXLINE( 188)			if (hx::IsNotNull( soundasset )) {
HXLINE( 189)				::Array< ::Dynamic> _hx_tmp = ::haxegon::Sound_obj::soundfile;
HXDLIN( 189)				_hx_tmp->push( ::haxegon::HaxegonSound_obj::__alloc( HX_CTX ,soundasset,defaultvolume));
HXLINE( 190)				::haxegon::Sound_obj::soundindex->set(soundname,(::haxegon::Sound_obj::soundfile->length - (int)1));
            			}
            		}
HXLINE( 194)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sound_obj,load,return )

void Sound_obj::play(::String soundname,hx::Null< Float >  __o_offsettime,hx::Null< Float >  __o_fadeintime,hx::Null< bool >  __o_loop,hx::Null< Float >  __o_panning){
Float offsettime = __o_offsettime.Default(0);
Float fadeintime = __o_fadeintime.Default(0);
bool loop = __o_loop.Default(false);
Float panning = __o_panning.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_03f7f1111a1b937c_197_play)
HXLINE( 198)		soundname = soundname.toLowerCase();
HXLINE( 199)		if (!(::haxegon::Sound_obj::soundindex->exists(soundname))) {
HXLINE( 200)			if (!(::haxegon::Sound_obj::load(soundname,null()))) {
HXLINE( 200)				return;
            			}
            		}
HXLINE( 203)		int freechannel = (int)-1;
HXLINE( 204)		{
HXLINE( 204)			int _g1 = (int)0;
HXDLIN( 204)			int _g = ::haxegon::Sound_obj::channel->length;
HXDLIN( 204)			while((_g1 < _g)){
HXLINE( 204)				_g1 = (_g1 + (int)1);
HXDLIN( 204)				int i = (_g1 - (int)1);
HXLINE( 205)				if (::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->free) {
HXLINE( 206)					freechannel = i;
HXLINE( 207)					goto _hx_goto_1;
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE( 211)		if ((freechannel == (int)-1)) {
HXLINE( 212)			 ::haxegon::HaxegonChannel h =  ::haxegon::HaxegonChannel_obj::__alloc( HX_CTX );
HXLINE( 213)			::Array< ::Dynamic> _hx_tmp = ::haxegon::Sound_obj::soundfile;
HXDLIN( 213)			h->setto(soundname,offsettime,fadeintime,loop,_hx_tmp->__get(( (int)(::haxegon::Sound_obj::soundindex->get(soundname)) )).StaticCast<  ::haxegon::HaxegonSound >()->defaultvolume,panning);
HXLINE( 214)			::haxegon::Sound_obj::channel->push(h);
            		}
            		else {
HXLINE( 216)			 ::haxegon::HaxegonChannel _hx_tmp1 = ::haxegon::Sound_obj::channel->__get(freechannel).StaticCast<  ::haxegon::HaxegonChannel >();
HXDLIN( 216)			::Array< ::Dynamic> _hx_tmp2 = ::haxegon::Sound_obj::soundfile;
HXDLIN( 216)			_hx_tmp1->setto(soundname,offsettime,fadeintime,loop,_hx_tmp2->__get(( (int)(::haxegon::Sound_obj::soundindex->get(soundname)) )).StaticCast<  ::haxegon::HaxegonSound >()->defaultvolume,panning);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Sound_obj,play,(void))

void Sound_obj::stop(::String __o_soundname,hx::Null< Float >  __o_fadeout){
::String soundname = __o_soundname.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
Float fadeout = __o_fadeout.Default(0);
            	HX_STACKFRAME(&_hx_pos_03f7f1111a1b937c_221_stop)
HXLINE( 222)		soundname = soundname.toLowerCase();
HXLINE( 224)		{
HXLINE( 224)			int _g1 = (int)0;
HXDLIN( 224)			int _g = ::haxegon::Sound_obj::channel->length;
HXDLIN( 224)			while((_g1 < _g)){
HXLINE( 224)				_g1 = (_g1 + (int)1);
HXDLIN( 224)				int i = (_g1 - (int)1);
HXLINE( 225)				bool _hx_tmp;
HXDLIN( 225)				if ((soundname != HX_("",00,00,00,00))) {
HXLINE( 225)					_hx_tmp = (::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->soundname == soundname);
            				}
            				else {
HXLINE( 225)					_hx_tmp = true;
            				}
HXDLIN( 225)				if (_hx_tmp) {
HXLINE( 226)					::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->stop(fadeout);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sound_obj,stop,(void))

::String Sound_obj::typingsound;

Float Sound_obj::_mastervolume;

Float Sound_obj::get_mastervolume(){
            	HX_STACKFRAME(&_hx_pos_03f7f1111a1b937c_236_get_mastervolume)
HXDLIN( 236)		return ::haxegon::Sound_obj::_mastervolume;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,get_mastervolume,return )

Float Sound_obj::set_mastervolume(Float vol){
            	HX_STACKFRAME(&_hx_pos_03f7f1111a1b937c_239_set_mastervolume)
HXLINE( 240)		::haxegon::Sound_obj::_mastervolume = vol;
HXLINE( 242)		{
HXLINE( 242)			int _g1 = (int)0;
HXDLIN( 242)			int _g = ::haxegon::Sound_obj::channel->length;
HXDLIN( 242)			while((_g1 < _g)){
HXLINE( 242)				_g1 = (_g1 + (int)1);
HXDLIN( 242)				int i = (_g1 - (int)1);
HXLINE( 243)				::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->changevolume(::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->volume);
            			}
            		}
HXLINE( 246)		return ::haxegon::Sound_obj::_mastervolume;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,set_mastervolume,return )

Float Sound_obj::length(::String soundname){
            	HX_STACKFRAME(&_hx_pos_03f7f1111a1b937c_249_length)
HXLINE( 250)		soundname = soundname.toLowerCase();
HXLINE( 252)		if (::haxegon::Sound_obj::soundindex->exists(soundname)) {
HXLINE( 253)			::Array< ::Dynamic> _hx_tmp = ::haxegon::Sound_obj::soundfile;
HXDLIN( 253)			return ((Float)_hx_tmp->__get(( (int)(::haxegon::Sound_obj::soundindex->get(soundname)) )).StaticCast<  ::haxegon::HaxegonSound >()->asset->get_length() / (Float)(int)1000);
            		}
            		else {
HXLINE( 255)			return (int)0;
            		}
HXLINE( 252)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,length,return )

void Sound_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_03f7f1111a1b937c_259_init)
HXLINE( 260)		::haxegon::Music_obj::crossfade = (int)0;
HXLINE( 261)		::haxegon::Music_obj::_currentsong = HX_("",00,00,00,00);
HXLINE( 263)		::haxegon::Sound_obj::typingsound = HX_("",00,00,00,00);
HXLINE( 264)		::haxegon::Sound_obj::_mastervolume = ((Float)1.0);
HXLINE( 266)		::haxegon::Sound_obj::soundfile = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 267)		::haxegon::Sound_obj::soundindex =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 268)		::haxegon::Sound_obj::channel = ::Array_obj< ::Dynamic>::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,init,(void))

void Sound_obj::update(){
            	HX_STACKFRAME(&_hx_pos_03f7f1111a1b937c_272_update)
HXDLIN( 272)		int _g1 = (int)0;
HXDLIN( 272)		int _g = ::haxegon::Sound_obj::channel->length;
HXDLIN( 272)		while((_g1 < _g)){
HXDLIN( 272)			_g1 = (_g1 + (int)1);
HXDLIN( 272)			int i = (_g1 - (int)1);
HXLINE( 273)			if ((::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->fading != (int)0)) {
HXLINE( 274)				::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->updatefade();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,update,(void))

bool Sound_obj::isplaying(::String soundname){
            	HX_STACKFRAME(&_hx_pos_03f7f1111a1b937c_279_isplaying)
HXLINE( 280)		{
HXLINE( 280)			int _g1 = (int)0;
HXDLIN( 280)			int _g = ::haxegon::Sound_obj::channel->length;
HXDLIN( 280)			while((_g1 < _g)){
HXLINE( 280)				_g1 = (_g1 + (int)1);
HXDLIN( 280)				int i = (_g1 - (int)1);
HXLINE( 281)				if (!(::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->free)) {
HXLINE( 282)					if ((::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->soundname == soundname)) {
HXLINE( 282)						return true;
            					}
            				}
            			}
            		}
HXLINE( 285)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,isplaying,return )

::Array< ::Dynamic> Sound_obj::soundfile;

::Array< ::Dynamic> Sound_obj::channel;

 ::haxe::ds::StringMap Sound_obj::soundindex;


Sound_obj::Sound_obj()
{
}

bool Sound_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"play") ) { outValue = play_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { outValue = length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"channel") ) { outValue = ( channel ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isplaying") ) { outValue = isplaying_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"soundfile") ) { outValue = ( soundfile ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"soundindex") ) { outValue = ( soundindex ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"typingsound") ) { outValue = ( typingsound ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mastervolume") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_mastervolume() ); return true; } }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_mastervolume") ) { outValue = ( _mastervolume ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_mastervolume") ) { outValue = get_mastervolume_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_mastervolume") ) { outValue = set_mastervolume_dyn(); return true; }
	}
	return false;
}

bool Sound_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"channel") ) { channel=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"soundfile") ) { soundfile=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"soundindex") ) { soundindex=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"typingsound") ) { typingsound=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mastervolume") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_mastervolume(ioValue.Cast< Float >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_mastervolume") ) { _mastervolume=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Sound_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Sound_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Sound_obj::typingsound,HX_HCSTRING("typingsound","\xf8","\xbe","\x11","\x95")},
	{hx::fsFloat,(void *) &Sound_obj::_mastervolume,HX_HCSTRING("_mastervolume","\xdb","\x62","\xd7","\x20")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Sound_obj::soundfile,HX_HCSTRING("soundfile","\xcb","\x6e","\xb0","\x63")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Sound_obj::channel,HX_HCSTRING("channel","\xc3","\x00","\xd2","\xcc")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Sound_obj::soundindex,HX_HCSTRING("soundindex","\xe3","\x3f","\x2c","\x94")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Sound_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sound_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Sound_obj::typingsound,"typingsound");
	HX_MARK_MEMBER_NAME(Sound_obj::_mastervolume,"_mastervolume");
	HX_MARK_MEMBER_NAME(Sound_obj::soundfile,"soundfile");
	HX_MARK_MEMBER_NAME(Sound_obj::channel,"channel");
	HX_MARK_MEMBER_NAME(Sound_obj::soundindex,"soundindex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sound_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sound_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Sound_obj::typingsound,"typingsound");
	HX_VISIT_MEMBER_NAME(Sound_obj::_mastervolume,"_mastervolume");
	HX_VISIT_MEMBER_NAME(Sound_obj::soundfile,"soundfile");
	HX_VISIT_MEMBER_NAME(Sound_obj::channel,"channel");
	HX_VISIT_MEMBER_NAME(Sound_obj::soundindex,"soundindex");
};

#endif

hx::Class Sound_obj::__mClass;

static ::String Sound_obj_sStaticFields[] = {
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("typingsound","\xf8","\xbe","\x11","\x95"),
	HX_HCSTRING("_mastervolume","\xdb","\x62","\xd7","\x20"),
	HX_HCSTRING("get_mastervolume","\x85","\xbc","\x07","\x43"),
	HX_HCSTRING("set_mastervolume","\xf9","\xa9","\x49","\x99"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("isplaying","\xc4","\x64","\xc5","\xc0"),
	HX_HCSTRING("soundfile","\xcb","\x6e","\xb0","\x63"),
	HX_HCSTRING("channel","\xc3","\x00","\xd2","\xcc"),
	HX_HCSTRING("soundindex","\xe3","\x3f","\x2c","\x94"),
	::String(null())
};

void Sound_obj::__register()
{
	hx::Object *dummy = new Sound_obj;
	Sound_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Sound","\xa1","\x6e","\xfd","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Sound_obj::__GetStatic;
	__mClass->mSetStaticField = &Sound_obj::__SetStatic;
	__mClass->mMarkFunc = Sound_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Sound_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Sound_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sound_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Sound_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_03f7f1111a1b937c_231_boot)
HXDLIN( 231)		typingsound = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_03f7f1111a1b937c_234_boot)
HXDLIN( 234)		_mastervolume = ((Float)1.0);
            	}
}

} // end namespace haxegon
