// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxegon_HaxegonChannel
#include <haxegon/HaxegonChannel.h>
#endif
#ifndef INCLUDED_haxegon_Music
#include <haxegon/Music.h>
#endif
#ifndef INCLUDED_haxegon_Sound
#include <haxegon/Sound.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e67e4440c09746e4_5_play,"haxegon.Music","play",0x920fdb4b,"haxegon.Music.play","haxegon/Music.hx",5,0xbb0c9da8)
HX_LOCAL_STACK_FRAME(_hx_pos_e67e4440c09746e4_22_stop,"haxegon.Music","stop",0x94119d59,"haxegon.Music.stop","haxegon/Music.hx",22,0xbb0c9da8)
HX_LOCAL_STACK_FRAME(_hx_pos_e67e4440c09746e4_29_get_currentposition,"haxegon.Music","get_currentposition",0x39b85982,"haxegon.Music.get_currentposition","haxegon/Music.hx",29,0xbb0c9da8)
HX_LOCAL_STACK_FRAME(_hx_pos_e67e4440c09746e4_42_set_currentposition,"haxegon.Music","set_currentposition",0x76554c8e,"haxegon.Music.set_currentposition","haxegon/Music.hx",42,0xbb0c9da8)
HX_LOCAL_STACK_FRAME(_hx_pos_e67e4440c09746e4_58_get_currentsong,"haxegon.Music","get_currentsong",0xaa803c2e,"haxegon.Music.get_currentsong","haxegon/Music.hx",58,0xbb0c9da8)
HX_LOCAL_STACK_FRAME(_hx_pos_e67e4440c09746e4_65_set_currentsong,"haxegon.Music","set_currentsong",0xa64bb93a,"haxegon.Music.set_currentsong","haxegon/Music.hx",65,0xbb0c9da8)
HX_LOCAL_STACK_FRAME(_hx_pos_e67e4440c09746e4_55_boot,"haxegon.Music","boot",0x88d13189,"haxegon.Music.boot","haxegon/Music.hx",55,0xbb0c9da8)
namespace haxegon{

void Music_obj::__construct() { }

Dynamic Music_obj::__CreateEmpty() { return new Music_obj; }

void *Music_obj::_hx_vtable = 0;

Dynamic Music_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Music_obj > _hx_result = new Music_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Music_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08876849;
}

void Music_obj::play(::String soundname,hx::Null< Float >  __o_offsettime,hx::Null< Float >  __o_fadeintime,hx::Null< bool >  __o_loop,hx::Null< Float >  __o_panning){
Float offsettime = __o_offsettime.Default(0);
Float fadeintime = __o_fadeintime.Default(0);
bool loop = __o_loop.Default(true);
Float panning = __o_panning.Default(0);
            	HX_STACKFRAME(&_hx_pos_e67e4440c09746e4_5_play)
HXLINE(   6)		soundname = soundname.toLowerCase();
HXLINE(   8)		if ((::haxegon::Music_obj::_currentsong == HX_("",00,00,00,00))) {
HXLINE(   9)			::haxegon::Sound_obj::play(soundname,offsettime,fadeintime,loop,panning);
HXLINE(  10)			::haxegon::Music_obj::_currentsong = soundname;
            		}
            		else {
HXLINE(  11)			if (::haxegon::Sound_obj::isplaying(::haxegon::Music_obj::_currentsong)) {
HXLINE(  12)				::haxegon::Sound_obj::stop(::haxegon::Music_obj::_currentsong,::haxegon::Music_obj::crossfade);
HXLINE(  13)				::haxegon::Sound_obj::play(soundname,offsettime,::Std_obj::_hx_int(::Math_obj::max(fadeintime,::haxegon::Music_obj::crossfade)),loop,panning);
HXLINE(  14)				::haxegon::Music_obj::_currentsong = soundname;
            			}
            			else {
HXLINE(  15)				if (!(::haxegon::Sound_obj::isplaying(soundname))) {
HXLINE(  16)					::haxegon::Sound_obj::play(soundname,offsettime,fadeintime,loop,panning);
HXLINE(  17)					::haxegon::Music_obj::_currentsong = soundname;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Music_obj,play,(void))

void Music_obj::stop(hx::Null< Float >  __o_fadeout){
Float fadeout = __o_fadeout.Default(0);
            	HX_STACKFRAME(&_hx_pos_e67e4440c09746e4_22_stop)
HXDLIN(  22)		if ((::haxegon::Music_obj::_currentsong != HX_("",00,00,00,00))) {
HXLINE(  23)			::haxegon::Sound_obj::stop(::haxegon::Music_obj::_currentsong,fadeout);
HXLINE(  24)			::haxegon::Music_obj::_currentsong = HX_("",00,00,00,00);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Music_obj,stop,(void))

Float Music_obj::currentposition;

Float Music_obj::get_currentposition(){
            	HX_STACKFRAME(&_hx_pos_e67e4440c09746e4_29_get_currentposition)
HXLINE(  30)		if ((::haxegon::Music_obj::_currentsong != HX_("",00,00,00,00))) {
HXLINE(  31)			if (::haxegon::Sound_obj::isplaying(::haxegon::Music_obj::_currentsong)) {
HXLINE(  32)				int _g1 = (int)0;
HXDLIN(  32)				int _g = ::haxegon::Sound_obj::channel->length;
HXDLIN(  32)				while((_g1 < _g)){
HXLINE(  32)					_g1 = (_g1 + (int)1);
HXDLIN(  32)					int i = (_g1 - (int)1);
HXLINE(  33)					if ((::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->soundname == ::haxegon::Music_obj::_currentsong)) {
HXLINE(  34)						return ::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->get_position();
            					}
            				}
            			}
            		}
HXLINE(  39)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,get_currentposition,return )

Float Music_obj::set_currentposition(Float newposition){
            	HX_STACKFRAME(&_hx_pos_e67e4440c09746e4_42_set_currentposition)
HXLINE(  43)		if ((::haxegon::Music_obj::_currentsong != HX_("",00,00,00,00))) {
HXLINE(  44)			if (::haxegon::Sound_obj::isplaying(::haxegon::Music_obj::_currentsong)) {
HXLINE(  45)				int _g1 = (int)0;
HXDLIN(  45)				int _g = ::haxegon::Sound_obj::channel->length;
HXDLIN(  45)				while((_g1 < _g)){
HXLINE(  45)					_g1 = (_g1 + (int)1);
HXDLIN(  45)					int i = (_g1 - (int)1);
HXLINE(  46)					if ((::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->soundname == ::haxegon::Music_obj::_currentsong)) {
HXLINE(  47)						::haxegon::Sound_obj::channel->__get(i).StaticCast<  ::haxegon::HaxegonChannel >()->set_position(newposition);
            					}
            				}
            			}
            		}
HXLINE(  52)		return newposition;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Music_obj,set_currentposition,return )

Float Music_obj::crossfade;

::String Music_obj::_currentsong;

::String Music_obj::get_currentsong(){
            	HX_STACKFRAME(&_hx_pos_e67e4440c09746e4_58_get_currentsong)
HXLINE(  59)		if (::haxegon::Sound_obj::isplaying(::haxegon::Music_obj::_currentsong)) {
HXLINE(  59)			return ::haxegon::Music_obj::_currentsong;
            		}
HXLINE(  61)		::haxegon::Music_obj::_currentsong = HX_("",00,00,00,00);
HXLINE(  62)		return ::haxegon::Music_obj::_currentsong;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Music_obj,get_currentsong,return )

::String Music_obj::set_currentsong(::String newsong){
            	HX_STACKFRAME(&_hx_pos_e67e4440c09746e4_65_set_currentsong)
HXLINE(  66)		::haxegon::Music_obj::play(newsong,null(),null(),null(),null());
HXLINE(  68)		return newsong;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Music_obj,set_currentsong,return )


Music_obj::Music_obj()
{
}

bool Music_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { outValue = play_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"crossfade") ) { outValue = ( crossfade ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentsong") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_currentsong() ); return true; } }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_currentsong") ) { outValue = ( _currentsong ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentposition") ) { outValue = ( inCallProp == hx::paccAlways ? get_currentposition() : currentposition ); return true; }
		if (HX_FIELD_EQ(inName,"get_currentsong") ) { outValue = get_currentsong_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_currentsong") ) { outValue = set_currentsong_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_currentposition") ) { outValue = get_currentposition_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_currentposition") ) { outValue = set_currentposition_dyn(); return true; }
	}
	return false;
}

bool Music_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"crossfade") ) { crossfade=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentsong") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_currentsong(ioValue.Cast< ::String >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_currentsong") ) { _currentsong=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"currentposition") ) { currentposition=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Music_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Music_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Music_obj::currentposition,HX_HCSTRING("currentposition","\xe2","\x9d","\x9a","\xc5")},
	{hx::fsFloat,(void *) &Music_obj::crossfade,HX_HCSTRING("crossfade","\xfc","\xd4","\x75","\x89")},
	{hx::fsString,(void *) &Music_obj::_currentsong,HX_HCSTRING("_currentsong","\x8f","\x7e","\x1a","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Music_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Music_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Music_obj::currentposition,"currentposition");
	HX_MARK_MEMBER_NAME(Music_obj::crossfade,"crossfade");
	HX_MARK_MEMBER_NAME(Music_obj::_currentsong,"_currentsong");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Music_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Music_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Music_obj::currentposition,"currentposition");
	HX_VISIT_MEMBER_NAME(Music_obj::crossfade,"crossfade");
	HX_VISIT_MEMBER_NAME(Music_obj::_currentsong,"_currentsong");
};

#endif

hx::Class Music_obj::__mClass;

static ::String Music_obj_sStaticFields[] = {
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("currentposition","\xe2","\x9d","\x9a","\xc5"),
	HX_HCSTRING("get_currentposition","\xf9","\x6c","\xa5","\x50"),
	HX_HCSTRING("set_currentposition","\x05","\x60","\x42","\x8d"),
	HX_HCSTRING("crossfade","\xfc","\xd4","\x75","\x89"),
	HX_HCSTRING("_currentsong","\x8f","\x7e","\x1a","\x00"),
	HX_HCSTRING("get_currentsong","\x25","\x88","\xf2","\x5a"),
	HX_HCSTRING("set_currentsong","\x31","\x05","\xbe","\x56"),
	::String(null())
};

void Music_obj::__register()
{
	hx::Object *dummy = new Music_obj;
	Music_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Music","\x77","\xb2","\x8b","\x17");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Music_obj::__GetStatic;
	__mClass->mSetStaticField = &Music_obj::__SetStatic;
	__mClass->mMarkFunc = Music_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Music_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Music_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Music_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Music_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Music_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Music_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e67e4440c09746e4_55_boot)
HXDLIN(  55)		crossfade = ((Float)0);
            	}
}

} // end namespace haxegon
