// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxegon_Core
#include <haxegon/Core.h>
#endif
#ifndef INCLUDED_haxegon_Geom
#include <haxegon/Geom.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif
#ifndef INCLUDED_haxegon_Mouse
#include <haxegon/Mouse.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_ui_Mouse
#include <lime/ui/Mouse.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObject
#include <starling/display/DisplayObject.h>
#endif
#ifndef INCLUDED_starling_display_DisplayObjectContainer
#include <starling/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_starling_display_Sprite
#include <starling/display/Sprite.h>
#endif
#ifndef INCLUDED_starling_display_Stage
#include <starling/display/Stage.h>
#endif
#ifndef INCLUDED_starling_events_Event
#include <starling/events/Event.h>
#endif
#ifndef INCLUDED_starling_events_EventDispatcher
#include <starling/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_starling_events_Touch
#include <starling/events/Touch.h>
#endif
#ifndef INCLUDED_starling_events_TouchEvent
#include <starling/events/TouchEvent.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_21_get_x,"haxegon.Mouse","get_x",0xbbea0998,"haxegon.Mouse.get_x","haxegon/Mouse.hx",21,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_24_set_x,"haxegon.Mouse","set_x",0xa4b8ffa4,"haxegon.Mouse.set_x","haxegon/Mouse.hx",24,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_38_get_y,"haxegon.Mouse","get_y",0xbbea0999,"haxegon.Mouse.get_y","haxegon/Mouse.hx",38,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_41_set_y,"haxegon.Mouse","set_y",0xa4b8ffa5,"haxegon.Mouse.set_y","haxegon/Mouse.hx",41,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_69_offscreen,"haxegon.Mouse","offscreen",0xd6fc48e4,"haxegon.Mouse.offscreen","haxegon/Mouse.hx",69,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_77_cursormoved,"haxegon.Mouse","cursormoved",0x7764f6a6,"haxegon.Mouse.cursormoved","haxegon/Mouse.hx",77,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_80_leftheld,"haxegon.Mouse","leftheld",0xfbdaf993,"haxegon.Mouse.leftheld","haxegon/Mouse.hx",80,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_81_leftclick,"haxegon.Mouse","leftclick",0x875cb7aa,"haxegon.Mouse.leftclick","haxegon/Mouse.hx",81,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_82_leftreleased,"haxegon.Mouse","leftreleased",0x6b07169b,"haxegon.Mouse.leftreleased","haxegon/Mouse.hx",82,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_83_leftforcerelease,"haxegon.Mouse","leftforcerelease",0x736e8c1a,"haxegon.Mouse.leftforcerelease","haxegon/Mouse.hx",83,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_84_leftheldpresstime,"haxegon.Mouse","leftheldpresstime",0x3b69591d,"haxegon.Mouse.leftheldpresstime","haxegon/Mouse.hx",84,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_86_rightheld,"haxegon.Mouse","rightheld",0x8244195a,"haxegon.Mouse.rightheld","haxegon/Mouse.hx",86,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_87_rightclick,"haxegon.Mouse","rightclick",0x9cef6603,"haxegon.Mouse.rightclick","haxegon/Mouse.hx",87,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_88_rightreleased,"haxegon.Mouse","rightreleased",0xdaa925e2,"haxegon.Mouse.rightreleased","haxegon/Mouse.hx",88,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_89_rightforcerelease,"haxegon.Mouse","rightforcerelease",0x40374ae1,"haxegon.Mouse.rightforcerelease","haxegon/Mouse.hx",89,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_90_rightheldpresstime,"haxegon.Mouse","rightheldpresstime",0x9e478876,"haxegon.Mouse.rightheldpresstime","haxegon/Mouse.hx",90,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_92_middleheld,"haxegon.Mouse","middleheld",0x7ad847a1,"haxegon.Mouse.middleheld","haxegon/Mouse.hx",92,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_93_middleclick,"haxegon.Mouse","middleclick",0x2603b5dc,"haxegon.Mouse.middleclick","haxegon/Mouse.hx",93,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_94_middlereleased,"haxegon.Mouse","middlereleased",0xfd5f83a9,"haxegon.Mouse.middlereleased","haxegon/Mouse.hx",94,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_95_middleforcerelease,"haxegon.Mouse","middleforcerelease",0xce9d9828,"haxegon.Mouse.middleforcerelease","haxegon/Mouse.hx",95,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_96_middleheldpresstime,"haxegon.Mouse","middleheldpresstime",0xa964d94f,"haxegon.Mouse.middleheldpresstime","haxegon/Mouse.hx",96,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_98_leftdelaypressed,"haxegon.Mouse","leftdelaypressed",0x1888165d,"haxegon.Mouse.leftdelaypressed","haxegon/Mouse.hx",98,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_109_rightdelaypressed,"haxegon.Mouse","rightdelaypressed",0xe550d524,"haxegon.Mouse.rightdelaypressed","haxegon/Mouse.hx",109,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_120_middledelaypressed,"haxegon.Mouse","middledelaypressed",0x73b7226b,"haxegon.Mouse.middledelaypressed","haxegon/Mouse.hx",120,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_131_init,"haxegon.Mouse","init",0x7abab2e7,"haxegon.Mouse.init","haxegon/Mouse.hx",131,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_168_unload,"haxegon.Mouse","unload",0x733afc96,"haxegon.Mouse.unload","haxegon/Mouse.hx",168,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_185_show,"haxegon.Mouse","show",0x81524cd4,"haxegon.Mouse.show","haxegon/Mouse.hx",185,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_189_hide,"haxegon.Mouse","hide",0x7a0dac99,"haxegon.Mouse.hide","haxegon/Mouse.hx",189,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_192_ontouch,"haxegon.Mouse","ontouch",0x02250ec9,"haxegon.Mouse.ontouch","haxegon/Mouse.hx",192,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_243_handleRightMouseDown,"haxegon.Mouse","handleRightMouseDown",0x8d2d2d4a,"haxegon.Mouse.handleRightMouseDown","haxegon/Mouse.hx",243,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_244_handleRightMouseUp,"haxegon.Mouse","handleRightMouseUp",0x65111143,"haxegon.Mouse.handleRightMouseUp","haxegon/Mouse.hx",244,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_247_handleMiddleMouseDown,"haxegon.Mouse","handleMiddleMouseDown",0xadeb5293,"haxegon.Mouse.handleMiddleMouseDown","haxegon/Mouse.hx",247,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_248_handleMiddleMouseUp,"haxegon.Mouse","handleMiddleMouseUp",0x32a2224c,"haxegon.Mouse.handleMiddleMouseUp","haxegon/Mouse.hx",248,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_251_handleMouseWheel,"haxegon.Mouse","handleMouseWheel",0xfdcd3055,"haxegon.Mouse.handleMouseWheel","haxegon/Mouse.hx",251,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_255_mouseOver,"haxegon.Mouse","mouseOver",0xb35906e2,"haxegon.Mouse.mouseOver","haxegon/Mouse.hx",255,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_258_mouseLeave,"haxegon.Mouse","mouseLeave",0x75199ba9,"haxegon.Mouse.mouseLeave","haxegon/Mouse.hx",258,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_263_update,"haxegon.Mouse","update",0x94b3e1a0,"haxegon.Mouse.update","haxegon/Mouse.hx",263,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_318_reset,"haxegon.Mouse","reset",0x1151ae18,"haxegon.Mouse.reset","haxegon/Mouse.hx",318,0x5196c828)
HX_LOCAL_STACK_FRAME(_hx_pos_75014b50be1fb498_66_boot,"haxegon.Mouse","boot",0x761afc09,"haxegon.Mouse.boot","haxegon/Mouse.hx",66,0x5196c828)
namespace haxegon{

void Mouse_obj::__construct() { }

Dynamic Mouse_obj::__CreateEmpty() { return new Mouse_obj; }

void *Mouse_obj::_hx_vtable = 0;

Dynamic Mouse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mouse_obj > _hx_result = new Mouse_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mouse_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0491adc9;
}

int Mouse_obj::_x;

int Mouse_obj::_y;

int Mouse_obj::previousx;

int Mouse_obj::previousy;

int Mouse_obj::deltax;

int Mouse_obj::deltay;

int Mouse_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_21_get_x)
HXDLIN(  21)		return ::haxegon::Mouse_obj::_x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,get_x,return )

int Mouse_obj::set_x(Float _newx){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_24_set_x)
HXLINE(  25)		::haxegon::Mouse_obj::_x = ::Std_obj::_hx_int(_newx);
HXLINE(  31)		int _hx_tmp = ::haxegon::Mouse_obj::_x;
HXDLIN(  31)		int _hx_tmp1 = ::haxegon::Mouse_obj::_y;
HXDLIN(  31)		::lime::ui::Mouse_obj::warp(_hx_tmp,_hx_tmp1,::haxegon::Core_obj::get_window());
HXLINE(  33)		return ::haxegon::Mouse_obj::_x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,set_x,return )

int Mouse_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_38_get_y)
HXDLIN(  38)		return ::haxegon::Mouse_obj::_y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,get_y,return )

int Mouse_obj::set_y(Float _newy){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_41_set_y)
HXLINE(  42)		::haxegon::Mouse_obj::_y = ::Std_obj::_hx_int(_newy);
HXLINE(  48)		int _hx_tmp = ::haxegon::Mouse_obj::_x;
HXDLIN(  48)		int _hx_tmp1 = ::haxegon::Mouse_obj::_y;
HXDLIN(  48)		::lime::ui::Mouse_obj::warp(_hx_tmp,_hx_tmp1,::haxegon::Core_obj::get_window());
HXLINE(  50)		return ::haxegon::Mouse_obj::_y;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,set_y,return )

 ::starling::display::Stage Mouse_obj::starstage;

 ::openfl::display::Stage Mouse_obj::flashstage;

int Mouse_obj::_current;

int Mouse_obj::_held;

int Mouse_obj::_last;

int Mouse_obj::_middlecurrent;

int Mouse_obj::_middlelast;

int Mouse_obj::_middleheld;

int Mouse_obj::_rightcurrent;

int Mouse_obj::_rightlast;

int Mouse_obj::_rightheld;

int Mouse_obj::mousewheel;

bool Mouse_obj::offscreen(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_69_offscreen)
HXDLIN(  69)		int _hx_tmp = ::haxegon::Mouse_obj::get_x();
HXDLIN(  69)		int _hx_tmp1 = ::haxegon::Mouse_obj::get_y();
HXDLIN(  69)		if (::haxegon::Geom_obj::inbox(_hx_tmp,_hx_tmp1,(int)0,(int)0,::haxegon::Gfx_obj::screenwidth,::haxegon::Gfx_obj::screenheight)) {
HXLINE(  70)			return ::haxegon::Mouse_obj::_mouseoffstage;
            		}
            		else {
HXLINE(  72)			return true;
            		}
HXLINE(  69)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,offscreen,return )

bool Mouse_obj::_mouseoffstage;

bool Mouse_obj::cursormoved(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_77_cursormoved)
HXDLIN(  77)		return ::haxegon::Mouse_obj::_cursormoved;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,cursormoved,return )

bool Mouse_obj::_cursormoved;

bool Mouse_obj::leftheld(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_80_leftheld)
HXDLIN(  80)		return (::haxegon::Mouse_obj::_current > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,leftheld,return )

bool Mouse_obj::leftclick(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_81_leftclick)
HXDLIN(  81)		return (::haxegon::Mouse_obj::_current == (int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,leftclick,return )

bool Mouse_obj::leftreleased(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_82_leftreleased)
HXDLIN(  82)		return (::haxegon::Mouse_obj::_current == (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,leftreleased,return )

void Mouse_obj::leftforcerelease(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_83_leftforcerelease)
HXDLIN(  83)		::haxegon::Mouse_obj::_current = (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,leftforcerelease,(void))

int Mouse_obj::leftheldpresstime(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_84_leftheldpresstime)
HXDLIN(  84)		return ::haxegon::Mouse_obj::_held;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,leftheldpresstime,return )

bool Mouse_obj::rightheld(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_86_rightheld)
HXDLIN(  86)		return (::haxegon::Mouse_obj::_rightcurrent > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,rightheld,return )

bool Mouse_obj::rightclick(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_87_rightclick)
HXDLIN(  87)		return (::haxegon::Mouse_obj::_rightcurrent == (int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,rightclick,return )

bool Mouse_obj::rightreleased(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_88_rightreleased)
HXDLIN(  88)		return (::haxegon::Mouse_obj::_rightcurrent == (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,rightreleased,return )

void Mouse_obj::rightforcerelease(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_89_rightforcerelease)
HXDLIN(  89)		::haxegon::Mouse_obj::_rightcurrent = (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,rightforcerelease,(void))

int Mouse_obj::rightheldpresstime(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_90_rightheldpresstime)
HXDLIN(  90)		return ::haxegon::Mouse_obj::_rightheld;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,rightheldpresstime,return )

bool Mouse_obj::middleheld(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_92_middleheld)
HXDLIN(  92)		return (::haxegon::Mouse_obj::_middlecurrent > (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,middleheld,return )

bool Mouse_obj::middleclick(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_93_middleclick)
HXDLIN(  93)		return (::haxegon::Mouse_obj::_middlecurrent == (int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,middleclick,return )

bool Mouse_obj::middlereleased(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_94_middlereleased)
HXDLIN(  94)		return (::haxegon::Mouse_obj::_middlecurrent == (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,middlereleased,return )

void Mouse_obj::middleforcerelease(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_95_middleforcerelease)
HXDLIN(  95)		::haxegon::Mouse_obj::_middlecurrent = (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,middleforcerelease,(void))

int Mouse_obj::middleheldpresstime(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_96_middleheldpresstime)
HXDLIN(  96)		return ::haxegon::Mouse_obj::_middleheld;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,middleheldpresstime,return )

bool Mouse_obj::leftdelaypressed(int delay){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_98_leftdelaypressed)
HXLINE(  99)		if ((::haxegon::Mouse_obj::_held >= (int)1)) {
HXLINE( 100)			if ((::haxegon::Mouse_obj::_held == (int)1)) {
HXLINE( 101)				return true;
            			}
            			else {
HXLINE( 102)				if ((hx::Mod(::haxegon::Mouse_obj::_held,delay) == (int)0)) {
HXLINE( 103)					return true;
            				}
            			}
            		}
HXLINE( 106)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,leftdelaypressed,return )

bool Mouse_obj::rightdelaypressed(int delay){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_109_rightdelaypressed)
HXLINE( 110)		if ((::haxegon::Mouse_obj::_rightheld >= (int)1)) {
HXLINE( 111)			if ((::haxegon::Mouse_obj::_rightheld == (int)1)) {
HXLINE( 112)				return true;
            			}
            			else {
HXLINE( 113)				if ((hx::Mod(::haxegon::Mouse_obj::_rightheld,delay) == (int)0)) {
HXLINE( 114)					return true;
            				}
            			}
            		}
HXLINE( 117)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,rightdelaypressed,return )

bool Mouse_obj::middledelaypressed(int delay){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_120_middledelaypressed)
HXLINE( 121)		if ((::haxegon::Mouse_obj::_middleheld >= (int)1)) {
HXLINE( 122)			if ((::haxegon::Mouse_obj::_middleheld == (int)1)) {
HXLINE( 123)				return true;
            			}
            			else {
HXLINE( 124)				if ((hx::Mod(::haxegon::Mouse_obj::_middleheld,delay) == (int)0)) {
HXLINE( 125)					return true;
            				}
            			}
            		}
HXLINE( 128)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,middledelaypressed,return )

void Mouse_obj::init( ::starling::display::Stage _starlingstage, ::openfl::display::Stage _flashstage){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_131_init)
HXLINE( 132)		::haxegon::Mouse_obj::_x = (int)0;
HXLINE( 133)		::haxegon::Mouse_obj::_y = (int)0;
HXLINE( 134)		::haxegon::Mouse_obj::previousx = (int)0;
HXLINE( 135)		::haxegon::Mouse_obj::previousy = (int)0;
HXLINE( 136)		::haxegon::Mouse_obj::_cursormoved = false;
HXLINE( 138)		::haxegon::Mouse_obj::_current = (int)0;
HXLINE( 139)		::haxegon::Mouse_obj::_held = (int)0;
HXLINE( 140)		::haxegon::Mouse_obj::_last = (int)0;
HXLINE( 142)		::haxegon::Mouse_obj::_rightcurrent = (int)0;
HXLINE( 143)		::haxegon::Mouse_obj::_rightheld = (int)0;
HXLINE( 144)		::haxegon::Mouse_obj::_rightlast = (int)0;
HXLINE( 146)		::haxegon::Mouse_obj::_middlecurrent = (int)0;
HXLINE( 147)		::haxegon::Mouse_obj::_middleheld = (int)0;
HXLINE( 148)		::haxegon::Mouse_obj::_middlelast = (int)0;
HXLINE( 150)		::haxegon::Mouse_obj::starstage = _starlingstage;
HXLINE( 151)		::haxegon::Mouse_obj::flashstage = _flashstage;
HXLINE( 153)		::haxegon::Mouse_obj::starstage->addEventListener(HX_("touch",bf,17,33,14),::haxegon::Mouse_obj::ontouch_dyn());
HXLINE( 155)		::haxegon::Mouse_obj::flashstage->addEventListener(HX_("rightMouseDown",ab,29,d7,cd),::haxegon::Mouse_obj::handleRightMouseDown_dyn(),null(),null(),null());
HXLINE( 156)		::haxegon::Mouse_obj::flashstage->addEventListener(HX_("rightMouseUp",64,83,21,ab),::haxegon::Mouse_obj::handleRightMouseUp_dyn(),null(),null(),null());
HXLINE( 160)		::haxegon::Mouse_obj::flashstage->addEventListener(HX_("middleMouseDown",12,2b,fe,01),::haxegon::Mouse_obj::handleMiddleMouseDown_dyn(),null(),null(),null());
HXLINE( 161)		::haxegon::Mouse_obj::flashstage->addEventListener(HX_("middleMouseUp",0b,8d,f5,3a),::haxegon::Mouse_obj::handleMiddleMouseUp_dyn(),null(),null(),null());
HXLINE( 163)		::haxegon::Mouse_obj::flashstage->addEventListener(HX_("mouseWheel",36,28,87,e7),::haxegon::Mouse_obj::handleMouseWheel_dyn(),null(),null(),null());
HXLINE( 164)		::haxegon::Mouse_obj::flashstage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),::haxegon::Mouse_obj::mouseOver_dyn(),null(),null(),null());
HXLINE( 165)		::haxegon::Mouse_obj::flashstage->addEventListener(HX_("mouseLeave",92,28,20,90),::haxegon::Mouse_obj::mouseLeave_dyn(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,init,(void))

void Mouse_obj::unload( ::starling::display::Stage _starlingstage, ::openfl::display::Stage _flashstage){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_168_unload)
HXLINE( 169)		_starlingstage->removeEventListener(HX_("touch",bf,17,33,14),::haxegon::Mouse_obj::ontouch_dyn());
HXLINE( 173)		_flashstage->removeEventListener(HX_("rightMouseDown",ab,29,d7,cd),::haxegon::Mouse_obj::handleRightMouseDown_dyn(),null());
HXLINE( 174)		_flashstage->removeEventListener(HX_("rightMouseUp",64,83,21,ab),::haxegon::Mouse_obj::handleRightMouseUp_dyn(),null());
HXLINE( 176)		_flashstage->removeEventListener(HX_("middleMouseDown",12,2b,fe,01),::haxegon::Mouse_obj::handleMiddleMouseDown_dyn(),null());
HXLINE( 177)		_flashstage->removeEventListener(HX_("middleMouseUp",0b,8d,f5,3a),::haxegon::Mouse_obj::handleMiddleMouseUp_dyn(),null());
HXLINE( 179)		_flashstage->removeEventListener(HX_("mouseWheel",36,28,87,e7),::haxegon::Mouse_obj::handleMouseWheel_dyn(),null());
HXLINE( 180)		_flashstage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),::haxegon::Mouse_obj::mouseOver_dyn(),null());
HXLINE( 181)		_flashstage->removeEventListener(HX_("mouseLeave",92,28,20,90),::haxegon::Mouse_obj::mouseLeave_dyn(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Mouse_obj,unload,(void))

void Mouse_obj::show(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_185_show)
HXDLIN( 185)		::openfl::ui::Mouse_obj::show();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,show,(void))

void Mouse_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_189_hide)
HXDLIN( 189)		::openfl::ui::Mouse_obj::hide();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,hide,(void))

void Mouse_obj::ontouch( ::starling::events::TouchEvent e){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_192_ontouch)
HXLINE( 193)		 ::starling::events::Touch touch = e->getTouch(::haxegon::Mouse_obj::starstage,null(),null());
HXLINE( 194)		::haxegon::Mouse_obj::_mouseoffstage = true;
HXLINE( 196)		if (hx::IsNotNull( touch )) {
HXLINE( 197)			if ((touch->get_phase() == HX_("hover",bc,e5,64,2b))) {
HXLINE( 198)				::haxegon::Mouse_obj::_mouseoffstage = false;
            			}
HXLINE( 201)			if ((touch->get_phase() == HX_("began",31,e3,55,b0))) {
HXLINE( 202)				::haxegon::Mouse_obj::_mouseoffstage = false;
HXLINE( 218)				if ((::haxegon::Mouse_obj::_current > (int)0)) {
HXLINE( 218)					::haxegon::Mouse_obj::_current = (int)1;
            				}
            				else {
HXLINE( 219)					::haxegon::Mouse_obj::_current = (int)2;
            				}
HXLINE( 221)				::haxegon::Mouse_obj::_held = (int)0;
            			}
            			else {
HXLINE( 223)				if ((touch->get_phase() == HX_("ended",fa,48,7a,70))) {
HXLINE( 230)					if ((::haxegon::Mouse_obj::_current > (int)0)) {
HXLINE( 230)						::haxegon::Mouse_obj::_current = (int)-1;
            					}
            					else {
HXLINE( 231)						::haxegon::Mouse_obj::_current = (int)0;
            					}
HXLINE( 233)					::haxegon::Mouse_obj::_held = (int)0;
HXLINE( 234)					::haxegon::Mouse_obj::_rightheld = (int)0;
            				}
            				else {
HXLINE( 235)					if ((touch->get_phase() == HX_("moved",33,cc,65,0c))) {
HXLINE( 236)						::haxegon::Mouse_obj::_mouseoffstage = false;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,ontouch,(void))

void Mouse_obj::handleRightMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_243_handleRightMouseDown)
HXDLIN( 243)		if ((::haxegon::Mouse_obj::_rightcurrent > (int)0)) {
HXDLIN( 243)			::haxegon::Mouse_obj::_rightcurrent = (int)1;
            		}
            		else {
HXDLIN( 243)			::haxegon::Mouse_obj::_rightcurrent = (int)2;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,handleRightMouseDown,(void))

void Mouse_obj::handleRightMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_244_handleRightMouseUp)
HXDLIN( 244)		if ((::haxegon::Mouse_obj::_rightcurrent > (int)0)) {
HXDLIN( 244)			::haxegon::Mouse_obj::_rightcurrent = (int)-1;
            		}
            		else {
HXDLIN( 244)			::haxegon::Mouse_obj::_rightcurrent = (int)0;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,handleRightMouseUp,(void))

void Mouse_obj::handleMiddleMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_247_handleMiddleMouseDown)
HXDLIN( 247)		if ((::haxegon::Mouse_obj::_middlecurrent > (int)0)) {
HXDLIN( 247)			::haxegon::Mouse_obj::_middlecurrent = (int)1;
            		}
            		else {
HXDLIN( 247)			::haxegon::Mouse_obj::_middlecurrent = (int)2;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,handleMiddleMouseDown,(void))

void Mouse_obj::handleMiddleMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_248_handleMiddleMouseUp)
HXDLIN( 248)		if ((::haxegon::Mouse_obj::_middlecurrent > (int)0)) {
HXDLIN( 248)			::haxegon::Mouse_obj::_middlecurrent = (int)-1;
HXDLIN( 248)			::haxegon::Mouse_obj::_middleheld = (int)0;
            		}
            		else {
HXDLIN( 248)			::haxegon::Mouse_obj::_middlecurrent = (int)0;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,handleMiddleMouseUp,(void))

void Mouse_obj::handleMouseWheel( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_251_handleMouseWheel)
HXDLIN( 251)		int _hx_tmp;
HXDLIN( 251)		if ((event->delta > (int)0)) {
HXDLIN( 251)			_hx_tmp = (int)2;
            		}
            		else {
HXDLIN( 251)			_hx_tmp = (int)-2;
            		}
HXDLIN( 251)		::haxegon::Mouse_obj::mousewheel = _hx_tmp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,handleMouseWheel,(void))

void Mouse_obj::mouseOver( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_255_mouseOver)
HXDLIN( 255)		::haxegon::Mouse_obj::_mouseoffstage = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,mouseOver,(void))

void Mouse_obj::mouseLeave( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_258_mouseLeave)
HXLINE( 259)		::haxegon::Mouse_obj::_mouseoffstage = true;
HXLINE( 260)		::haxegon::Mouse_obj::reset();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,mouseLeave,(void))

void Mouse_obj::update(int mx,int my,bool firstframe){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_263_update)
HXLINE( 264)		::haxegon::Mouse_obj::_x = mx;
HXLINE( 265)		::haxegon::Mouse_obj::_y = my;
HXLINE( 267)		bool _hx_tmp;
HXDLIN( 267)		int _hx_tmp1 = ::haxegon::Mouse_obj::get_x();
HXDLIN( 267)		if ((_hx_tmp1 == ::haxegon::Mouse_obj::previousx)) {
HXLINE( 267)			int _hx_tmp2 = ::haxegon::Mouse_obj::get_y();
HXDLIN( 267)			_hx_tmp = (_hx_tmp2 == ::haxegon::Mouse_obj::previousy);
            		}
            		else {
HXLINE( 267)			_hx_tmp = false;
            		}
HXDLIN( 267)		if (_hx_tmp) {
HXLINE( 268)			::haxegon::Mouse_obj::_cursormoved = false;
HXLINE( 269)			::haxegon::Mouse_obj::deltax = (int)0;
HXDLIN( 269)			::haxegon::Mouse_obj::deltay = (int)0;
            		}
            		else {
HXLINE( 271)			int _hx_tmp3 = ::haxegon::Mouse_obj::get_x();
HXDLIN( 271)			::haxegon::Mouse_obj::deltax = (_hx_tmp3 - ::haxegon::Mouse_obj::previousx);
HXDLIN( 271)			int _hx_tmp4 = ::haxegon::Mouse_obj::get_y();
HXDLIN( 271)			::haxegon::Mouse_obj::deltay = (_hx_tmp4 - ::haxegon::Mouse_obj::previousy);
HXLINE( 272)			::haxegon::Mouse_obj::previousx = ::haxegon::Mouse_obj::get_x();
HXDLIN( 272)			::haxegon::Mouse_obj::previousy = ::haxegon::Mouse_obj::get_y();
HXLINE( 273)			::haxegon::Mouse_obj::_cursormoved = true;
            		}
HXLINE( 276)		bool _hx_tmp5;
HXDLIN( 276)		if ((::haxegon::Mouse_obj::_last == (int)-1)) {
HXLINE( 276)			_hx_tmp5 = (::haxegon::Mouse_obj::_current == (int)-1);
            		}
            		else {
HXLINE( 276)			_hx_tmp5 = false;
            		}
HXDLIN( 276)		if (_hx_tmp5) {
HXLINE( 277)			::haxegon::Mouse_obj::_current = (int)0;
            		}
            		else {
HXLINE( 278)			bool _hx_tmp6;
HXDLIN( 278)			if ((::haxegon::Mouse_obj::_last == (int)2)) {
HXLINE( 278)				_hx_tmp6 = (::haxegon::Mouse_obj::_current == (int)2);
            			}
            			else {
HXLINE( 278)				_hx_tmp6 = false;
            			}
HXDLIN( 278)			if (_hx_tmp6) {
HXLINE( 279)				::haxegon::Mouse_obj::_current = (int)1;
            			}
            		}
HXLINE( 280)		::haxegon::Mouse_obj::_last = ::haxegon::Mouse_obj::_current;
HXLINE( 282)		if ((::haxegon::Mouse_obj::_current > (int)0)) {
HXLINE( 283)			++::haxegon::Mouse_obj::_held;
            		}
HXLINE( 286)		bool _hx_tmp7;
HXDLIN( 286)		if ((::haxegon::Mouse_obj::_rightlast == (int)-1)) {
HXLINE( 286)			_hx_tmp7 = (::haxegon::Mouse_obj::_rightcurrent == (int)-1);
            		}
            		else {
HXLINE( 286)			_hx_tmp7 = false;
            		}
HXDLIN( 286)		if (_hx_tmp7) {
HXLINE( 287)			::haxegon::Mouse_obj::_rightcurrent = (int)0;
            		}
            		else {
HXLINE( 288)			bool _hx_tmp8;
HXDLIN( 288)			if ((::haxegon::Mouse_obj::_rightlast == (int)2)) {
HXLINE( 288)				_hx_tmp8 = (::haxegon::Mouse_obj::_rightcurrent == (int)2);
            			}
            			else {
HXLINE( 288)				_hx_tmp8 = false;
            			}
HXDLIN( 288)			if (_hx_tmp8) {
HXLINE( 289)				::haxegon::Mouse_obj::_rightcurrent = (int)1;
            			}
            		}
HXLINE( 290)		::haxegon::Mouse_obj::_rightlast = ::haxegon::Mouse_obj::_rightcurrent;
HXLINE( 292)		if ((::haxegon::Mouse_obj::_rightcurrent > (int)0)) {
HXLINE( 293)			++::haxegon::Mouse_obj::_rightheld;
            		}
HXLINE( 296)		bool _hx_tmp9;
HXDLIN( 296)		if ((::haxegon::Mouse_obj::_middlelast == (int)-1)) {
HXLINE( 296)			_hx_tmp9 = (::haxegon::Mouse_obj::_middlecurrent == (int)-1);
            		}
            		else {
HXLINE( 296)			_hx_tmp9 = false;
            		}
HXDLIN( 296)		if (_hx_tmp9) {
HXLINE( 297)			::haxegon::Mouse_obj::_middlecurrent = (int)0;
            		}
            		else {
HXLINE( 298)			bool _hx_tmp10;
HXDLIN( 298)			if ((::haxegon::Mouse_obj::_middlelast == (int)2)) {
HXLINE( 298)				_hx_tmp10 = (::haxegon::Mouse_obj::_middlecurrent == (int)2);
            			}
            			else {
HXLINE( 298)				_hx_tmp10 = false;
            			}
HXDLIN( 298)			if (_hx_tmp10) {
HXLINE( 299)				::haxegon::Mouse_obj::_middlecurrent = (int)1;
            			}
            		}
HXLINE( 300)		::haxegon::Mouse_obj::_middlelast = ::haxegon::Mouse_obj::_middlecurrent;
HXLINE( 303)		if ((::haxegon::Mouse_obj::_middlecurrent > (int)0)) {
HXLINE( 304)			++::haxegon::Mouse_obj::_middleheld;
            		}
HXLINE( 307)		if (firstframe) {
HXLINE( 308)			if ((::haxegon::Mouse_obj::mousewheel == (int)-2)) {
HXLINE( 309)				::haxegon::Mouse_obj::mousewheel = (int)-1;
            			}
            			else {
HXLINE( 310)				if ((::haxegon::Mouse_obj::mousewheel == (int)2)) {
HXLINE( 311)					::haxegon::Mouse_obj::mousewheel = (int)1;
            				}
            				else {
HXLINE( 313)					::haxegon::Mouse_obj::mousewheel = (int)0;
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Mouse_obj,update,(void))

void Mouse_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_318_reset)
HXLINE( 319)		::haxegon::Mouse_obj::_current = (int)0;
HXLINE( 320)		::haxegon::Mouse_obj::_last = (int)0;
HXLINE( 321)		::haxegon::Mouse_obj::_held = (int)0;
HXLINE( 323)		::haxegon::Mouse_obj::_rightcurrent = (int)0;
HXLINE( 324)		::haxegon::Mouse_obj::_rightlast = (int)0;
HXLINE( 325)		::haxegon::Mouse_obj::_rightheld = (int)0;
HXLINE( 327)		::haxegon::Mouse_obj::_middlecurrent = (int)0;
HXLINE( 328)		::haxegon::Mouse_obj::_middlelast = (int)0;
HXLINE( 329)		::haxegon::Mouse_obj::_middleheld = (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,reset,(void))


Mouse_obj::Mouse_obj()
{
}

bool Mouse_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_x() ); return true; } }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) { outValue = ( get_y() ); return true; } }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { outValue = ( _x ); return true; }
		if (HX_FIELD_EQ(inName,"_y") ) { outValue = ( _y ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"show") ) { outValue = show_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hide") ) { outValue = hide_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_x") ) { outValue = get_x_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_x") ) { outValue = set_x_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_y") ) { outValue = get_y_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_y") ) { outValue = set_y_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_held") ) { outValue = ( _held ); return true; }
		if (HX_FIELD_EQ(inName,"_last") ) { outValue = ( _last ); return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"deltax") ) { outValue = ( deltax ); return true; }
		if (HX_FIELD_EQ(inName,"deltay") ) { outValue = ( deltay ); return true; }
		if (HX_FIELD_EQ(inName,"unload") ) { outValue = unload_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"update") ) { outValue = update_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ontouch") ) { outValue = ontouch_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_current") ) { outValue = ( _current ); return true; }
		if (HX_FIELD_EQ(inName,"leftheld") ) { outValue = leftheld_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"previousx") ) { outValue = ( previousx ); return true; }
		if (HX_FIELD_EQ(inName,"previousy") ) { outValue = ( previousy ); return true; }
		if (HX_FIELD_EQ(inName,"starstage") ) { outValue = ( starstage ); return true; }
		if (HX_FIELD_EQ(inName,"offscreen") ) { outValue = offscreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"leftclick") ) { outValue = leftclick_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rightheld") ) { outValue = rightheld_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseOver") ) { outValue = mouseOver_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"flashstage") ) { outValue = ( flashstage ); return true; }
		if (HX_FIELD_EQ(inName,"_rightlast") ) { outValue = ( _rightlast ); return true; }
		if (HX_FIELD_EQ(inName,"_rightheld") ) { outValue = ( _rightheld ); return true; }
		if (HX_FIELD_EQ(inName,"mousewheel") ) { outValue = ( mousewheel ); return true; }
		if (HX_FIELD_EQ(inName,"rightclick") ) { outValue = rightclick_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"middleheld") ) { outValue = middleheld_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mouseLeave") ) { outValue = mouseLeave_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_middlelast") ) { outValue = ( _middlelast ); return true; }
		if (HX_FIELD_EQ(inName,"_middleheld") ) { outValue = ( _middleheld ); return true; }
		if (HX_FIELD_EQ(inName,"cursormoved") ) { outValue = cursormoved_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"middleclick") ) { outValue = middleclick_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_cursormoved") ) { outValue = ( _cursormoved ); return true; }
		if (HX_FIELD_EQ(inName,"leftreleased") ) { outValue = leftreleased_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_rightcurrent") ) { outValue = ( _rightcurrent ); return true; }
		if (HX_FIELD_EQ(inName,"rightreleased") ) { outValue = rightreleased_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_middlecurrent") ) { outValue = ( _middlecurrent ); return true; }
		if (HX_FIELD_EQ(inName,"_mouseoffstage") ) { outValue = ( _mouseoffstage ); return true; }
		if (HX_FIELD_EQ(inName,"middlereleased") ) { outValue = middlereleased_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"leftforcerelease") ) { outValue = leftforcerelease_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"leftdelaypressed") ) { outValue = leftdelaypressed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"handleMouseWheel") ) { outValue = handleMouseWheel_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"leftheldpresstime") ) { outValue = leftheldpresstime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rightforcerelease") ) { outValue = rightforcerelease_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rightdelaypressed") ) { outValue = rightdelaypressed_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"rightheldpresstime") ) { outValue = rightheldpresstime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"middleforcerelease") ) { outValue = middleforcerelease_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"middledelaypressed") ) { outValue = middledelaypressed_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"handleRightMouseUp") ) { outValue = handleRightMouseUp_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"middleheldpresstime") ) { outValue = middleheldpresstime_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"handleMiddleMouseUp") ) { outValue = handleMiddleMouseUp_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"handleRightMouseDown") ) { outValue = handleRightMouseDown_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"handleMiddleMouseDown") ) { outValue = handleMiddleMouseDown_dyn(); return true; }
	}
	return false;
}

bool Mouse_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_x(ioValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways)  ioValue = ( set_y(ioValue.Cast< int >()) ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"_x") ) { _x=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_y") ) { _y=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_held") ) { _held=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_last") ) { _last=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"deltax") ) { deltax=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"deltay") ) { deltay=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_current") ) { _current=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"previousx") ) { previousx=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"previousy") ) { previousy=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"starstage") ) { starstage=ioValue.Cast<  ::starling::display::Stage >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"flashstage") ) { flashstage=ioValue.Cast<  ::openfl::display::Stage >(); return true; }
		if (HX_FIELD_EQ(inName,"_rightlast") ) { _rightlast=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_rightheld") ) { _rightheld=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"mousewheel") ) { mousewheel=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_middlelast") ) { _middlelast=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_middleheld") ) { _middleheld=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_cursormoved") ) { _cursormoved=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_rightcurrent") ) { _rightcurrent=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_middlecurrent") ) { _middlecurrent=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"_mouseoffstage") ) { _mouseoffstage=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Mouse_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Mouse_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Mouse_obj::_x,HX_HCSTRING("_x","\x39","\x53","\x00","\x00")},
	{hx::fsInt,(void *) &Mouse_obj::_y,HX_HCSTRING("_y","\x3a","\x53","\x00","\x00")},
	{hx::fsInt,(void *) &Mouse_obj::previousx,HX_HCSTRING("previousx","\x61","\xf4","\xf3","\x16")},
	{hx::fsInt,(void *) &Mouse_obj::previousy,HX_HCSTRING("previousy","\x62","\xf4","\xf3","\x16")},
	{hx::fsInt,(void *) &Mouse_obj::deltax,HX_HCSTRING("deltax","\x80","\x11","\xe4","\x6a")},
	{hx::fsInt,(void *) &Mouse_obj::deltay,HX_HCSTRING("deltay","\x81","\x11","\xe4","\x6a")},
	{hx::fsObject /*::starling::display::Stage*/ ,(void *) &Mouse_obj::starstage,HX_HCSTRING("starstage","\xac","\x6d","\xaa","\x87")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(void *) &Mouse_obj::flashstage,HX_HCSTRING("flashstage","\x0e","\x97","\xee","\x0e")},
	{hx::fsInt,(void *) &Mouse_obj::_current,HX_HCSTRING("_current","\xba","\xf5","\x9b","\x05")},
	{hx::fsInt,(void *) &Mouse_obj::_held,HX_HCSTRING("_held","\x94","\x4e","\x1c","\xf8")},
	{hx::fsInt,(void *) &Mouse_obj::_last,HX_HCSTRING("_last","\x35","\x26","\xbe","\xfa")},
	{hx::fsInt,(void *) &Mouse_obj::_middlecurrent,HX_HCSTRING("_middlecurrent","\xc5","\xfd","\x66","\xb7")},
	{hx::fsInt,(void *) &Mouse_obj::_middlelast,HX_HCSTRING("_middlelast","\x4a","\x79","\x0a","\x6b")},
	{hx::fsInt,(void *) &Mouse_obj::_middleheld,HX_HCSTRING("_middleheld","\xa9","\xa1","\x68","\x68")},
	{hx::fsInt,(void *) &Mouse_obj::_rightcurrent,HX_HCSTRING("_rightcurrent","\xbc","\x96","\xaf","\xcb")},
	{hx::fsInt,(void *) &Mouse_obj::_rightlast,HX_HCSTRING("_rightlast","\xf3","\xaf","\x3c","\x23")},
	{hx::fsInt,(void *) &Mouse_obj::_rightheld,HX_HCSTRING("_rightheld","\x52","\xd8","\x9a","\x20")},
	{hx::fsInt,(void *) &Mouse_obj::mousewheel,HX_HCSTRING("mousewheel","\x56","\xb8","\x59","\x54")},
	{hx::fsBool,(void *) &Mouse_obj::_mouseoffstage,HX_HCSTRING("_mouseoffstage","\x55","\x38","\x80","\x9e")},
	{hx::fsBool,(void *) &Mouse_obj::_cursormoved,HX_HCSTRING("_cursormoved","\x9e","\x63","\x23","\x68")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Mouse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mouse_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Mouse_obj::_x,"_x");
	HX_MARK_MEMBER_NAME(Mouse_obj::_y,"_y");
	HX_MARK_MEMBER_NAME(Mouse_obj::previousx,"previousx");
	HX_MARK_MEMBER_NAME(Mouse_obj::previousy,"previousy");
	HX_MARK_MEMBER_NAME(Mouse_obj::deltax,"deltax");
	HX_MARK_MEMBER_NAME(Mouse_obj::deltay,"deltay");
	HX_MARK_MEMBER_NAME(Mouse_obj::starstage,"starstage");
	HX_MARK_MEMBER_NAME(Mouse_obj::flashstage,"flashstage");
	HX_MARK_MEMBER_NAME(Mouse_obj::_current,"_current");
	HX_MARK_MEMBER_NAME(Mouse_obj::_held,"_held");
	HX_MARK_MEMBER_NAME(Mouse_obj::_last,"_last");
	HX_MARK_MEMBER_NAME(Mouse_obj::_middlecurrent,"_middlecurrent");
	HX_MARK_MEMBER_NAME(Mouse_obj::_middlelast,"_middlelast");
	HX_MARK_MEMBER_NAME(Mouse_obj::_middleheld,"_middleheld");
	HX_MARK_MEMBER_NAME(Mouse_obj::_rightcurrent,"_rightcurrent");
	HX_MARK_MEMBER_NAME(Mouse_obj::_rightlast,"_rightlast");
	HX_MARK_MEMBER_NAME(Mouse_obj::_rightheld,"_rightheld");
	HX_MARK_MEMBER_NAME(Mouse_obj::mousewheel,"mousewheel");
	HX_MARK_MEMBER_NAME(Mouse_obj::_mouseoffstage,"_mouseoffstage");
	HX_MARK_MEMBER_NAME(Mouse_obj::_cursormoved,"_cursormoved");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mouse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mouse_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_x,"_x");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_y,"_y");
	HX_VISIT_MEMBER_NAME(Mouse_obj::previousx,"previousx");
	HX_VISIT_MEMBER_NAME(Mouse_obj::previousy,"previousy");
	HX_VISIT_MEMBER_NAME(Mouse_obj::deltax,"deltax");
	HX_VISIT_MEMBER_NAME(Mouse_obj::deltay,"deltay");
	HX_VISIT_MEMBER_NAME(Mouse_obj::starstage,"starstage");
	HX_VISIT_MEMBER_NAME(Mouse_obj::flashstage,"flashstage");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_current,"_current");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_held,"_held");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_last,"_last");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_middlecurrent,"_middlecurrent");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_middlelast,"_middlelast");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_middleheld,"_middleheld");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_rightcurrent,"_rightcurrent");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_rightlast,"_rightlast");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_rightheld,"_rightheld");
	HX_VISIT_MEMBER_NAME(Mouse_obj::mousewheel,"mousewheel");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_mouseoffstage,"_mouseoffstage");
	HX_VISIT_MEMBER_NAME(Mouse_obj::_cursormoved,"_cursormoved");
};

#endif

hx::Class Mouse_obj::__mClass;

static ::String Mouse_obj_sStaticFields[] = {
	HX_HCSTRING("_x","\x39","\x53","\x00","\x00"),
	HX_HCSTRING("_y","\x3a","\x53","\x00","\x00"),
	HX_HCSTRING("previousx","\x61","\xf4","\xf3","\x16"),
	HX_HCSTRING("previousy","\x62","\xf4","\xf3","\x16"),
	HX_HCSTRING("deltax","\x80","\x11","\xe4","\x6a"),
	HX_HCSTRING("deltay","\x81","\x11","\xe4","\x6a"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("starstage","\xac","\x6d","\xaa","\x87"),
	HX_HCSTRING("flashstage","\x0e","\x97","\xee","\x0e"),
	HX_HCSTRING("_current","\xba","\xf5","\x9b","\x05"),
	HX_HCSTRING("_held","\x94","\x4e","\x1c","\xf8"),
	HX_HCSTRING("_last","\x35","\x26","\xbe","\xfa"),
	HX_HCSTRING("_middlecurrent","\xc5","\xfd","\x66","\xb7"),
	HX_HCSTRING("_middlelast","\x4a","\x79","\x0a","\x6b"),
	HX_HCSTRING("_middleheld","\xa9","\xa1","\x68","\x68"),
	HX_HCSTRING("_rightcurrent","\xbc","\x96","\xaf","\xcb"),
	HX_HCSTRING("_rightlast","\xf3","\xaf","\x3c","\x23"),
	HX_HCSTRING("_rightheld","\x52","\xd8","\x9a","\x20"),
	HX_HCSTRING("mousewheel","\x56","\xb8","\x59","\x54"),
	HX_HCSTRING("offscreen","\x1b","\x8c","\xb0","\x19"),
	HX_HCSTRING("_mouseoffstage","\x55","\x38","\x80","\x9e"),
	HX_HCSTRING("cursormoved","\x9d","\xb5","\x19","\x02"),
	HX_HCSTRING("_cursormoved","\x9e","\x63","\x23","\x68"),
	HX_HCSTRING("leftheld","\x3c","\x4a","\x2d","\x61"),
	HX_HCSTRING("leftclick","\xe1","\xfa","\x10","\xca"),
	HX_HCSTRING("leftreleased","\xc4","\x6f","\x79","\x3e"),
	HX_HCSTRING("leftforcerelease","\xc3","\x2d","\xef","\x2c"),
	HX_HCSTRING("leftheldpresstime","\x54","\x2b","\x76","\xd2"),
	HX_HCSTRING("rightheld","\x91","\x5c","\xf8","\xc4"),
	HX_HCSTRING("rightclick","\xec","\xf2","\xf5","\xb7"),
	HX_HCSTRING("rightreleased","\x99","\xd0","\x44","\x0b"),
	HX_HCSTRING("rightforcerelease","\x18","\x1d","\x44","\xd7"),
	HX_HCSTRING("rightheldpresstime","\x5f","\xa6","\x72","\x32"),
	HX_HCSTRING("middleheld","\x8a","\xd4","\xde","\x95"),
	HX_HCSTRING("middleclick","\xd3","\x74","\xb8","\xb0"),
	HX_HCSTRING("middlereleased","\x12","\x39","\xf9","\x54"),
	HX_HCSTRING("middleforcerelease","\x11","\xb6","\xc8","\x62"),
	HX_HCSTRING("middleheldpresstime","\x46","\xe7","\xf3","\xba"),
	HX_HCSTRING("leftdelaypressed","\x06","\xb8","\x08","\xd2"),
	HX_HCSTRING("rightdelaypressed","\x5b","\xa7","\x5d","\x7c"),
	HX_HCSTRING("middledelaypressed","\x54","\x40","\xe2","\x07"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("show","\xfd","\xd4","\x52","\x4c"),
	HX_HCSTRING("hide","\xc2","\x34","\x0e","\x45"),
	HX_HCSTRING("ontouch","\x40","\x46","\x43","\x17"),
	HX_HCSTRING("handleRightMouseDown","\x73","\x57","\xca","\xd8"),
	HX_HCSTRING("handleRightMouseUp","\x2c","\x2f","\x3c","\xf9"),
	HX_HCSTRING("handleMiddleMouseDown","\x4a","\x0c","\xd3","\x8b"),
	HX_HCSTRING("handleMiddleMouseUp","\x43","\x30","\x31","\x44"),
	HX_HCSTRING("handleMouseWheel","\xfe","\xd1","\x4d","\xb7"),
	HX_HCSTRING("mouseOver","\x19","\x4a","\x0d","\xf6"),
	HX_HCSTRING("mouseLeave","\x92","\x28","\x20","\x90"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	::String(null())
};

void Mouse_obj::__register()
{
	hx::Object *dummy = new Mouse_obj;
	Mouse_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Mouse","\xf7","\xf7","\x95","\x13");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mouse_obj::__GetStatic;
	__mClass->mSetStaticField = &Mouse_obj::__SetStatic;
	__mClass->mMarkFunc = Mouse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mouse_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Mouse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mouse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mouse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mouse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Mouse_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_75014b50be1fb498_66_boot)
HXDLIN(  66)		mousewheel = (int)0;
            	}
}

} // end namespace haxegon
