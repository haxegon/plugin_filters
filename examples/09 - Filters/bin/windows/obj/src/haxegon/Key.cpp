// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxegon_Key
#include <haxegon/Key.h>
#endif
namespace haxegon{

::haxegon::Key Key_obj::A;

::haxegon::Key Key_obj::ALT;

::haxegon::Key Key_obj::ANY;

::haxegon::Key Key_obj::B;

::haxegon::Key Key_obj::BACKSLASH;

::haxegon::Key Key_obj::BACKSPACE;

::haxegon::Key Key_obj::C;

::haxegon::Key Key_obj::CAPSLOCK;

::haxegon::Key Key_obj::COMMA;

::haxegon::Key Key_obj::CONTROL;

::haxegon::Key Key_obj::D;

::haxegon::Key Key_obj::DELETE;

::haxegon::Key Key_obj::DOWN;

::haxegon::Key Key_obj::E;

::haxegon::Key Key_obj::EIGHT;

::haxegon::Key Key_obj::END;

::haxegon::Key Key_obj::ENTER;

::haxegon::Key Key_obj::ESCAPE;

::haxegon::Key Key_obj::F;

::haxegon::Key Key_obj::F1;

::haxegon::Key Key_obj::F10;

::haxegon::Key Key_obj::F11;

::haxegon::Key Key_obj::F12;

::haxegon::Key Key_obj::F2;

::haxegon::Key Key_obj::F3;

::haxegon::Key Key_obj::F4;

::haxegon::Key Key_obj::F5;

::haxegon::Key Key_obj::F6;

::haxegon::Key Key_obj::F7;

::haxegon::Key Key_obj::F8;

::haxegon::Key Key_obj::F9;

::haxegon::Key Key_obj::FIVE;

::haxegon::Key Key_obj::FOUR;

::haxegon::Key Key_obj::G;

::haxegon::Key Key_obj::H;

::haxegon::Key Key_obj::HOME;

::haxegon::Key Key_obj::I;

::haxegon::Key Key_obj::J;

::haxegon::Key Key_obj::K;

::haxegon::Key Key_obj::L;

::haxegon::Key Key_obj::LBRACKET;

::haxegon::Key Key_obj::LEFT;

::haxegon::Key Key_obj::M;

::haxegon::Key Key_obj::MINUS;

::haxegon::Key Key_obj::N;

::haxegon::Key Key_obj::NINE;

::haxegon::Key Key_obj::O;

::haxegon::Key Key_obj::ONE;

::haxegon::Key Key_obj::P;

::haxegon::Key Key_obj::PAGEDOWN;

::haxegon::Key Key_obj::PAGEUP;

::haxegon::Key Key_obj::PERIOD;

::haxegon::Key Key_obj::PLUS;

::haxegon::Key Key_obj::Q;

::haxegon::Key Key_obj::QUOTE;

::haxegon::Key Key_obj::R;

::haxegon::Key Key_obj::RBRACKET;

::haxegon::Key Key_obj::RIGHT;

::haxegon::Key Key_obj::S;

::haxegon::Key Key_obj::SEMICOLON;

::haxegon::Key Key_obj::SEVEN;

::haxegon::Key Key_obj::SHIFT;

::haxegon::Key Key_obj::SIX;

::haxegon::Key Key_obj::SLASH;

::haxegon::Key Key_obj::SPACE;

::haxegon::Key Key_obj::T;

::haxegon::Key Key_obj::TAB;

::haxegon::Key Key_obj::THREE;

::haxegon::Key Key_obj::TWO;

::haxegon::Key Key_obj::U;

::haxegon::Key Key_obj::UP;

::haxegon::Key Key_obj::V;

::haxegon::Key Key_obj::W;

::haxegon::Key Key_obj::X;

::haxegon::Key Key_obj::Y;

::haxegon::Key Key_obj::Z;

::haxegon::Key Key_obj::ZERO;

bool Key_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("A",41,00,00,00)) { outValue = Key_obj::A; return true; }
	if (inName==HX_("ALT",09,95,31,00)) { outValue = Key_obj::ALT; return true; }
	if (inName==HX_("ANY",cc,96,31,00)) { outValue = Key_obj::ANY; return true; }
	if (inName==HX_("B",42,00,00,00)) { outValue = Key_obj::B; return true; }
	if (inName==HX_("BACKSLASH",96,28,9e,c3)) { outValue = Key_obj::BACKSLASH; return true; }
	if (inName==HX_("BACKSPACE",1f,f5,42,c6)) { outValue = Key_obj::BACKSPACE; return true; }
	if (inName==HX_("C",43,00,00,00)) { outValue = Key_obj::C; return true; }
	if (inName==HX_("CAPSLOCK",8c,6c,6e,80)) { outValue = Key_obj::CAPSLOCK; return true; }
	if (inName==HX_("COMMA",b5,69,4b,c8)) { outValue = Key_obj::COMMA; return true; }
	if (inName==HX_("CONTROL",3d,3f,55,99)) { outValue = Key_obj::CONTROL; return true; }
	if (inName==HX_("D",44,00,00,00)) { outValue = Key_obj::D; return true; }
	if (inName==HX_("DELETE",2b,6c,5b,1d)) { outValue = Key_obj::DELETE; return true; }
	if (inName==HX_("DOWN",62,c0,2e,2d)) { outValue = Key_obj::DOWN; return true; }
	if (inName==HX_("E",45,00,00,00)) { outValue = Key_obj::E; return true; }
	if (inName==HX_("EIGHT",2f,b9,1c,eb)) { outValue = Key_obj::EIGHT; return true; }
	if (inName==HX_("END",bb,9f,34,00)) { outValue = Key_obj::END; return true; }
	if (inName==HX_("ENTER",f8,a4,74,ee)) { outValue = Key_obj::ENTER; return true; }
	if (inName==HX_("ESCAPE",81,ef,5c,8d)) { outValue = Key_obj::ESCAPE; return true; }
	if (inName==HX_("F",46,00,00,00)) { outValue = Key_obj::F; return true; }
	if (inName==HX_("F1",2b,3d,00,00)) { outValue = Key_obj::F1; return true; }
	if (inName==HX_("F10",a5,48,35,00)) { outValue = Key_obj::F10; return true; }
	if (inName==HX_("F11",a6,48,35,00)) { outValue = Key_obj::F11; return true; }
	if (inName==HX_("F12",a7,48,35,00)) { outValue = Key_obj::F12; return true; }
	if (inName==HX_("F2",2c,3d,00,00)) { outValue = Key_obj::F2; return true; }
	if (inName==HX_("F3",2d,3d,00,00)) { outValue = Key_obj::F3; return true; }
	if (inName==HX_("F4",2e,3d,00,00)) { outValue = Key_obj::F4; return true; }
	if (inName==HX_("F5",2f,3d,00,00)) { outValue = Key_obj::F5; return true; }
	if (inName==HX_("F6",30,3d,00,00)) { outValue = Key_obj::F6; return true; }
	if (inName==HX_("F7",31,3d,00,00)) { outValue = Key_obj::F7; return true; }
	if (inName==HX_("F8",32,3d,00,00)) { outValue = Key_obj::F8; return true; }
	if (inName==HX_("F9",33,3d,00,00)) { outValue = Key_obj::F9; return true; }
	if (inName==HX_("FIVE",32,9f,7c,2e)) { outValue = Key_obj::FIVE; return true; }
	if (inName==HX_("FOUR",e6,2b,81,2e)) { outValue = Key_obj::FOUR; return true; }
	if (inName==HX_("G",47,00,00,00)) { outValue = Key_obj::G; return true; }
	if (inName==HX_("H",48,00,00,00)) { outValue = Key_obj::H; return true; }
	if (inName==HX_("HOME",1f,92,d3,2f)) { outValue = Key_obj::HOME; return true; }
	if (inName==HX_("I",49,00,00,00)) { outValue = Key_obj::I; return true; }
	if (inName==HX_("J",4a,00,00,00)) { outValue = Key_obj::J; return true; }
	if (inName==HX_("K",4b,00,00,00)) { outValue = Key_obj::K; return true; }
	if (inName==HX_("L",4c,00,00,00)) { outValue = Key_obj::L; return true; }
	if (inName==HX_("LBRACKET",3c,3b,54,16)) { outValue = Key_obj::LBRACKET; return true; }
	if (inName==HX_("LEFT",07,d0,70,32)) { outValue = Key_obj::LEFT; return true; }
	if (inName==HX_("M",4d,00,00,00)) { outValue = Key_obj::M; return true; }
	if (inName==HX_("MINUS",50,b8,56,86)) { outValue = Key_obj::MINUS; return true; }
	if (inName==HX_("N",4e,00,00,00)) { outValue = Key_obj::N; return true; }
	if (inName==HX_("NINE",32,4d,c6,33)) { outValue = Key_obj::NINE; return true; }
	if (inName==HX_("O",4f,00,00,00)) { outValue = Key_obj::O; return true; }
	if (inName==HX_("ONE",46,36,3c,00)) { outValue = Key_obj::ONE; return true; }
	if (inName==HX_("P",50,00,00,00)) { outValue = Key_obj::P; return true; }
	if (inName==HX_("PAGEDOWN",31,36,e2,b9)) { outValue = Key_obj::PAGEDOWN; return true; }
	if (inName==HX_("PAGEUP",6a,5e,bb,98)) { outValue = Key_obj::PAGEUP; return true; }
	if (inName==HX_("PERIOD",01,0d,9e,ed)) { outValue = Key_obj::PERIOD; return true; }
	if (inName==HX_("PLUS",5a,07,1b,35)) { outValue = Key_obj::PLUS; return true; }
	if (inName==HX_("Q",51,00,00,00)) { outValue = Key_obj::Q; return true; }
	if (inName==HX_("QUOTE",1c,5b,e0,db)) { outValue = Key_obj::QUOTE; return true; }
	if (inName==HX_("R",52,00,00,00)) { outValue = Key_obj::R; return true; }
	if (inName==HX_("RBRACKET",f6,e7,82,6d)) { outValue = Key_obj::RBRACKET; return true; }
	if (inName==HX_("RIGHT",bc,43,52,67)) { outValue = Key_obj::RIGHT; return true; }
	if (inName==HX_("S",53,00,00,00)) { outValue = Key_obj::S; return true; }
	if (inName==HX_("SEMICOLON",11,86,2a,49)) { outValue = Key_obj::SEMICOLON; return true; }
	if (inName==HX_("SEVEN",ed,5c,1f,f8)) { outValue = Key_obj::SEVEN; return true; }
	if (inName==HX_("SHIFT",62,24,11,fa)) { outValue = Key_obj::SHIFT; return true; }
	if (inName==HX_("SIX",02,3b,3f,00)) { outValue = Key_obj::SIX; return true; }
	if (inName==HX_("SLASH",1d,f8,af,fc)) { outValue = Key_obj::SLASH; return true; }
	if (inName==HX_("SPACE",a6,c4,54,ff)) { outValue = Key_obj::SPACE; return true; }
	if (inName==HX_("T",54,00,00,00)) { outValue = Key_obj::T; return true; }
	if (inName==HX_("TAB",35,f6,3f,00)) { outValue = Key_obj::TAB; return true; }
	if (inName==HX_("THREE",3e,8c,7e,8d)) { outValue = Key_obj::THREE; return true; }
	if (inName==HX_("TWO",6c,09,40,00)) { outValue = Key_obj::TWO; return true; }
	if (inName==HX_("U",55,00,00,00)) { outValue = Key_obj::U; return true; }
	if (inName==HX_("UP",5b,4a,00,00)) { outValue = Key_obj::UP; return true; }
	if (inName==HX_("V",56,00,00,00)) { outValue = Key_obj::V; return true; }
	if (inName==HX_("W",57,00,00,00)) { outValue = Key_obj::W; return true; }
	if (inName==HX_("X",58,00,00,00)) { outValue = Key_obj::X; return true; }
	if (inName==HX_("Y",59,00,00,00)) { outValue = Key_obj::Y; return true; }
	if (inName==HX_("Z",5a,00,00,00)) { outValue = Key_obj::Z; return true; }
	if (inName==HX_("ZERO",28,d7,b1,3b)) { outValue = Key_obj::ZERO; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Key_obj)

int Key_obj::__FindIndex(::String inName)
{
	if (inName==HX_("A",41,00,00,00)) return 1;
	if (inName==HX_("ALT",09,95,31,00)) return 66;
	if (inName==HX_("ANY",cc,96,31,00)) return 0;
	if (inName==HX_("B",42,00,00,00)) return 2;
	if (inName==HX_("BACKSLASH",96,28,9e,c3)) return 56;
	if (inName==HX_("BACKSPACE",1f,f5,42,c6)) return 53;
	if (inName==HX_("C",43,00,00,00)) return 3;
	if (inName==HX_("CAPSLOCK",8c,6c,6e,80)) return 57;
	if (inName==HX_("COMMA",b5,69,4b,c8)) return 62;
	if (inName==HX_("CONTROL",3d,3f,55,99)) return 65;
	if (inName==HX_("D",44,00,00,00)) return 4;
	if (inName==HX_("DELETE",2b,6c,5b,1d)) return 52;
	if (inName==HX_("DOWN",62,c0,2e,2d)) return 69;
	if (inName==HX_("E",45,00,00,00)) return 5;
	if (inName==HX_("EIGHT",2f,b9,1c,eb)) return 35;
	if (inName==HX_("END",bb,9f,34,00)) return 74;
	if (inName==HX_("ENTER",f8,a4,74,ee)) return 60;
	if (inName==HX_("ESCAPE",81,ef,5c,8d)) return 49;
	if (inName==HX_("F",46,00,00,00)) return 6;
	if (inName==HX_("F1",2b,3d,00,00)) return 37;
	if (inName==HX_("F10",a5,48,35,00)) return 46;
	if (inName==HX_("F11",a6,48,35,00)) return 47;
	if (inName==HX_("F12",a7,48,35,00)) return 48;
	if (inName==HX_("F2",2c,3d,00,00)) return 38;
	if (inName==HX_("F3",2d,3d,00,00)) return 39;
	if (inName==HX_("F4",2e,3d,00,00)) return 40;
	if (inName==HX_("F5",2f,3d,00,00)) return 41;
	if (inName==HX_("F6",30,3d,00,00)) return 42;
	if (inName==HX_("F7",31,3d,00,00)) return 43;
	if (inName==HX_("F8",32,3d,00,00)) return 44;
	if (inName==HX_("F9",33,3d,00,00)) return 45;
	if (inName==HX_("FIVE",32,9f,7c,2e)) return 32;
	if (inName==HX_("FOUR",e6,2b,81,2e)) return 31;
	if (inName==HX_("G",47,00,00,00)) return 7;
	if (inName==HX_("H",48,00,00,00)) return 8;
	if (inName==HX_("HOME",1f,92,d3,2f)) return 73;
	if (inName==HX_("I",49,00,00,00)) return 9;
	if (inName==HX_("J",4a,00,00,00)) return 10;
	if (inName==HX_("K",4b,00,00,00)) return 11;
	if (inName==HX_("L",4c,00,00,00)) return 12;
	if (inName==HX_("LBRACKET",3c,3b,54,16)) return 54;
	if (inName==HX_("LEFT",07,d0,70,32)) return 70;
	if (inName==HX_("M",4d,00,00,00)) return 13;
	if (inName==HX_("MINUS",50,b8,56,86)) return 50;
	if (inName==HX_("N",4e,00,00,00)) return 14;
	if (inName==HX_("NINE",32,4d,c6,33)) return 36;
	if (inName==HX_("O",4f,00,00,00)) return 15;
	if (inName==HX_("ONE",46,36,3c,00)) return 28;
	if (inName==HX_("P",50,00,00,00)) return 16;
	if (inName==HX_("PAGEDOWN",31,36,e2,b9)) return 76;
	if (inName==HX_("PAGEUP",6a,5e,bb,98)) return 75;
	if (inName==HX_("PERIOD",01,0d,9e,ed)) return 63;
	if (inName==HX_("PLUS",5a,07,1b,35)) return 51;
	if (inName==HX_("Q",51,00,00,00)) return 17;
	if (inName==HX_("QUOTE",1c,5b,e0,db)) return 59;
	if (inName==HX_("R",52,00,00,00)) return 18;
	if (inName==HX_("RBRACKET",f6,e7,82,6d)) return 55;
	if (inName==HX_("RIGHT",bc,43,52,67)) return 71;
	if (inName==HX_("S",53,00,00,00)) return 19;
	if (inName==HX_("SEMICOLON",11,86,2a,49)) return 58;
	if (inName==HX_("SEVEN",ed,5c,1f,f8)) return 34;
	if (inName==HX_("SHIFT",62,24,11,fa)) return 61;
	if (inName==HX_("SIX",02,3b,3f,00)) return 33;
	if (inName==HX_("SLASH",1d,f8,af,fc)) return 64;
	if (inName==HX_("SPACE",a6,c4,54,ff)) return 67;
	if (inName==HX_("T",54,00,00,00)) return 20;
	if (inName==HX_("TAB",35,f6,3f,00)) return 72;
	if (inName==HX_("THREE",3e,8c,7e,8d)) return 30;
	if (inName==HX_("TWO",6c,09,40,00)) return 29;
	if (inName==HX_("U",55,00,00,00)) return 21;
	if (inName==HX_("UP",5b,4a,00,00)) return 68;
	if (inName==HX_("V",56,00,00,00)) return 22;
	if (inName==HX_("W",57,00,00,00)) return 23;
	if (inName==HX_("X",58,00,00,00)) return 24;
	if (inName==HX_("Y",59,00,00,00)) return 25;
	if (inName==HX_("Z",5a,00,00,00)) return 26;
	if (inName==HX_("ZERO",28,d7,b1,3b)) return 27;
	return super::__FindIndex(inName);
}

int Key_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("A",41,00,00,00)) return 0;
	if (inName==HX_("ALT",09,95,31,00)) return 0;
	if (inName==HX_("ANY",cc,96,31,00)) return 0;
	if (inName==HX_("B",42,00,00,00)) return 0;
	if (inName==HX_("BACKSLASH",96,28,9e,c3)) return 0;
	if (inName==HX_("BACKSPACE",1f,f5,42,c6)) return 0;
	if (inName==HX_("C",43,00,00,00)) return 0;
	if (inName==HX_("CAPSLOCK",8c,6c,6e,80)) return 0;
	if (inName==HX_("COMMA",b5,69,4b,c8)) return 0;
	if (inName==HX_("CONTROL",3d,3f,55,99)) return 0;
	if (inName==HX_("D",44,00,00,00)) return 0;
	if (inName==HX_("DELETE",2b,6c,5b,1d)) return 0;
	if (inName==HX_("DOWN",62,c0,2e,2d)) return 0;
	if (inName==HX_("E",45,00,00,00)) return 0;
	if (inName==HX_("EIGHT",2f,b9,1c,eb)) return 0;
	if (inName==HX_("END",bb,9f,34,00)) return 0;
	if (inName==HX_("ENTER",f8,a4,74,ee)) return 0;
	if (inName==HX_("ESCAPE",81,ef,5c,8d)) return 0;
	if (inName==HX_("F",46,00,00,00)) return 0;
	if (inName==HX_("F1",2b,3d,00,00)) return 0;
	if (inName==HX_("F10",a5,48,35,00)) return 0;
	if (inName==HX_("F11",a6,48,35,00)) return 0;
	if (inName==HX_("F12",a7,48,35,00)) return 0;
	if (inName==HX_("F2",2c,3d,00,00)) return 0;
	if (inName==HX_("F3",2d,3d,00,00)) return 0;
	if (inName==HX_("F4",2e,3d,00,00)) return 0;
	if (inName==HX_("F5",2f,3d,00,00)) return 0;
	if (inName==HX_("F6",30,3d,00,00)) return 0;
	if (inName==HX_("F7",31,3d,00,00)) return 0;
	if (inName==HX_("F8",32,3d,00,00)) return 0;
	if (inName==HX_("F9",33,3d,00,00)) return 0;
	if (inName==HX_("FIVE",32,9f,7c,2e)) return 0;
	if (inName==HX_("FOUR",e6,2b,81,2e)) return 0;
	if (inName==HX_("G",47,00,00,00)) return 0;
	if (inName==HX_("H",48,00,00,00)) return 0;
	if (inName==HX_("HOME",1f,92,d3,2f)) return 0;
	if (inName==HX_("I",49,00,00,00)) return 0;
	if (inName==HX_("J",4a,00,00,00)) return 0;
	if (inName==HX_("K",4b,00,00,00)) return 0;
	if (inName==HX_("L",4c,00,00,00)) return 0;
	if (inName==HX_("LBRACKET",3c,3b,54,16)) return 0;
	if (inName==HX_("LEFT",07,d0,70,32)) return 0;
	if (inName==HX_("M",4d,00,00,00)) return 0;
	if (inName==HX_("MINUS",50,b8,56,86)) return 0;
	if (inName==HX_("N",4e,00,00,00)) return 0;
	if (inName==HX_("NINE",32,4d,c6,33)) return 0;
	if (inName==HX_("O",4f,00,00,00)) return 0;
	if (inName==HX_("ONE",46,36,3c,00)) return 0;
	if (inName==HX_("P",50,00,00,00)) return 0;
	if (inName==HX_("PAGEDOWN",31,36,e2,b9)) return 0;
	if (inName==HX_("PAGEUP",6a,5e,bb,98)) return 0;
	if (inName==HX_("PERIOD",01,0d,9e,ed)) return 0;
	if (inName==HX_("PLUS",5a,07,1b,35)) return 0;
	if (inName==HX_("Q",51,00,00,00)) return 0;
	if (inName==HX_("QUOTE",1c,5b,e0,db)) return 0;
	if (inName==HX_("R",52,00,00,00)) return 0;
	if (inName==HX_("RBRACKET",f6,e7,82,6d)) return 0;
	if (inName==HX_("RIGHT",bc,43,52,67)) return 0;
	if (inName==HX_("S",53,00,00,00)) return 0;
	if (inName==HX_("SEMICOLON",11,86,2a,49)) return 0;
	if (inName==HX_("SEVEN",ed,5c,1f,f8)) return 0;
	if (inName==HX_("SHIFT",62,24,11,fa)) return 0;
	if (inName==HX_("SIX",02,3b,3f,00)) return 0;
	if (inName==HX_("SLASH",1d,f8,af,fc)) return 0;
	if (inName==HX_("SPACE",a6,c4,54,ff)) return 0;
	if (inName==HX_("T",54,00,00,00)) return 0;
	if (inName==HX_("TAB",35,f6,3f,00)) return 0;
	if (inName==HX_("THREE",3e,8c,7e,8d)) return 0;
	if (inName==HX_("TWO",6c,09,40,00)) return 0;
	if (inName==HX_("U",55,00,00,00)) return 0;
	if (inName==HX_("UP",5b,4a,00,00)) return 0;
	if (inName==HX_("V",56,00,00,00)) return 0;
	if (inName==HX_("W",57,00,00,00)) return 0;
	if (inName==HX_("X",58,00,00,00)) return 0;
	if (inName==HX_("Y",59,00,00,00)) return 0;
	if (inName==HX_("Z",5a,00,00,00)) return 0;
	if (inName==HX_("ZERO",28,d7,b1,3b)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val Key_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("A",41,00,00,00)) return A;
	if (inName==HX_("ALT",09,95,31,00)) return ALT;
	if (inName==HX_("ANY",cc,96,31,00)) return ANY;
	if (inName==HX_("B",42,00,00,00)) return B;
	if (inName==HX_("BACKSLASH",96,28,9e,c3)) return BACKSLASH;
	if (inName==HX_("BACKSPACE",1f,f5,42,c6)) return BACKSPACE;
	if (inName==HX_("C",43,00,00,00)) return C;
	if (inName==HX_("CAPSLOCK",8c,6c,6e,80)) return CAPSLOCK;
	if (inName==HX_("COMMA",b5,69,4b,c8)) return COMMA;
	if (inName==HX_("CONTROL",3d,3f,55,99)) return CONTROL;
	if (inName==HX_("D",44,00,00,00)) return D;
	if (inName==HX_("DELETE",2b,6c,5b,1d)) return DELETE;
	if (inName==HX_("DOWN",62,c0,2e,2d)) return DOWN;
	if (inName==HX_("E",45,00,00,00)) return E;
	if (inName==HX_("EIGHT",2f,b9,1c,eb)) return EIGHT;
	if (inName==HX_("END",bb,9f,34,00)) return END;
	if (inName==HX_("ENTER",f8,a4,74,ee)) return ENTER;
	if (inName==HX_("ESCAPE",81,ef,5c,8d)) return ESCAPE;
	if (inName==HX_("F",46,00,00,00)) return F;
	if (inName==HX_("F1",2b,3d,00,00)) return F1;
	if (inName==HX_("F10",a5,48,35,00)) return F10;
	if (inName==HX_("F11",a6,48,35,00)) return F11;
	if (inName==HX_("F12",a7,48,35,00)) return F12;
	if (inName==HX_("F2",2c,3d,00,00)) return F2;
	if (inName==HX_("F3",2d,3d,00,00)) return F3;
	if (inName==HX_("F4",2e,3d,00,00)) return F4;
	if (inName==HX_("F5",2f,3d,00,00)) return F5;
	if (inName==HX_("F6",30,3d,00,00)) return F6;
	if (inName==HX_("F7",31,3d,00,00)) return F7;
	if (inName==HX_("F8",32,3d,00,00)) return F8;
	if (inName==HX_("F9",33,3d,00,00)) return F9;
	if (inName==HX_("FIVE",32,9f,7c,2e)) return FIVE;
	if (inName==HX_("FOUR",e6,2b,81,2e)) return FOUR;
	if (inName==HX_("G",47,00,00,00)) return G;
	if (inName==HX_("H",48,00,00,00)) return H;
	if (inName==HX_("HOME",1f,92,d3,2f)) return HOME;
	if (inName==HX_("I",49,00,00,00)) return I;
	if (inName==HX_("J",4a,00,00,00)) return J;
	if (inName==HX_("K",4b,00,00,00)) return K;
	if (inName==HX_("L",4c,00,00,00)) return L;
	if (inName==HX_("LBRACKET",3c,3b,54,16)) return LBRACKET;
	if (inName==HX_("LEFT",07,d0,70,32)) return LEFT;
	if (inName==HX_("M",4d,00,00,00)) return M;
	if (inName==HX_("MINUS",50,b8,56,86)) return MINUS;
	if (inName==HX_("N",4e,00,00,00)) return N;
	if (inName==HX_("NINE",32,4d,c6,33)) return NINE;
	if (inName==HX_("O",4f,00,00,00)) return O;
	if (inName==HX_("ONE",46,36,3c,00)) return ONE;
	if (inName==HX_("P",50,00,00,00)) return P;
	if (inName==HX_("PAGEDOWN",31,36,e2,b9)) return PAGEDOWN;
	if (inName==HX_("PAGEUP",6a,5e,bb,98)) return PAGEUP;
	if (inName==HX_("PERIOD",01,0d,9e,ed)) return PERIOD;
	if (inName==HX_("PLUS",5a,07,1b,35)) return PLUS;
	if (inName==HX_("Q",51,00,00,00)) return Q;
	if (inName==HX_("QUOTE",1c,5b,e0,db)) return QUOTE;
	if (inName==HX_("R",52,00,00,00)) return R;
	if (inName==HX_("RBRACKET",f6,e7,82,6d)) return RBRACKET;
	if (inName==HX_("RIGHT",bc,43,52,67)) return RIGHT;
	if (inName==HX_("S",53,00,00,00)) return S;
	if (inName==HX_("SEMICOLON",11,86,2a,49)) return SEMICOLON;
	if (inName==HX_("SEVEN",ed,5c,1f,f8)) return SEVEN;
	if (inName==HX_("SHIFT",62,24,11,fa)) return SHIFT;
	if (inName==HX_("SIX",02,3b,3f,00)) return SIX;
	if (inName==HX_("SLASH",1d,f8,af,fc)) return SLASH;
	if (inName==HX_("SPACE",a6,c4,54,ff)) return SPACE;
	if (inName==HX_("T",54,00,00,00)) return T;
	if (inName==HX_("TAB",35,f6,3f,00)) return TAB;
	if (inName==HX_("THREE",3e,8c,7e,8d)) return THREE;
	if (inName==HX_("TWO",6c,09,40,00)) return TWO;
	if (inName==HX_("U",55,00,00,00)) return U;
	if (inName==HX_("UP",5b,4a,00,00)) return UP;
	if (inName==HX_("V",56,00,00,00)) return V;
	if (inName==HX_("W",57,00,00,00)) return W;
	if (inName==HX_("X",58,00,00,00)) return X;
	if (inName==HX_("Y",59,00,00,00)) return Y;
	if (inName==HX_("Z",5a,00,00,00)) return Z;
	if (inName==HX_("ZERO",28,d7,b1,3b)) return ZERO;
	return super::__Field(inName,inCallProp);
}

static ::String Key_obj_sStaticFields[] = {
	HX_("ANY",cc,96,31,00),
	HX_("A",41,00,00,00),
	HX_("B",42,00,00,00),
	HX_("C",43,00,00,00),
	HX_("D",44,00,00,00),
	HX_("E",45,00,00,00),
	HX_("F",46,00,00,00),
	HX_("G",47,00,00,00),
	HX_("H",48,00,00,00),
	HX_("I",49,00,00,00),
	HX_("J",4a,00,00,00),
	HX_("K",4b,00,00,00),
	HX_("L",4c,00,00,00),
	HX_("M",4d,00,00,00),
	HX_("N",4e,00,00,00),
	HX_("O",4f,00,00,00),
	HX_("P",50,00,00,00),
	HX_("Q",51,00,00,00),
	HX_("R",52,00,00,00),
	HX_("S",53,00,00,00),
	HX_("T",54,00,00,00),
	HX_("U",55,00,00,00),
	HX_("V",56,00,00,00),
	HX_("W",57,00,00,00),
	HX_("X",58,00,00,00),
	HX_("Y",59,00,00,00),
	HX_("Z",5a,00,00,00),
	HX_("ZERO",28,d7,b1,3b),
	HX_("ONE",46,36,3c,00),
	HX_("TWO",6c,09,40,00),
	HX_("THREE",3e,8c,7e,8d),
	HX_("FOUR",e6,2b,81,2e),
	HX_("FIVE",32,9f,7c,2e),
	HX_("SIX",02,3b,3f,00),
	HX_("SEVEN",ed,5c,1f,f8),
	HX_("EIGHT",2f,b9,1c,eb),
	HX_("NINE",32,4d,c6,33),
	HX_("F1",2b,3d,00,00),
	HX_("F2",2c,3d,00,00),
	HX_("F3",2d,3d,00,00),
	HX_("F4",2e,3d,00,00),
	HX_("F5",2f,3d,00,00),
	HX_("F6",30,3d,00,00),
	HX_("F7",31,3d,00,00),
	HX_("F8",32,3d,00,00),
	HX_("F9",33,3d,00,00),
	HX_("F10",a5,48,35,00),
	HX_("F11",a6,48,35,00),
	HX_("F12",a7,48,35,00),
	HX_("ESCAPE",81,ef,5c,8d),
	HX_("MINUS",50,b8,56,86),
	HX_("PLUS",5a,07,1b,35),
	HX_("DELETE",2b,6c,5b,1d),
	HX_("BACKSPACE",1f,f5,42,c6),
	HX_("LBRACKET",3c,3b,54,16),
	HX_("RBRACKET",f6,e7,82,6d),
	HX_("BACKSLASH",96,28,9e,c3),
	HX_("CAPSLOCK",8c,6c,6e,80),
	HX_("SEMICOLON",11,86,2a,49),
	HX_("QUOTE",1c,5b,e0,db),
	HX_("ENTER",f8,a4,74,ee),
	HX_("SHIFT",62,24,11,fa),
	HX_("COMMA",b5,69,4b,c8),
	HX_("PERIOD",01,0d,9e,ed),
	HX_("SLASH",1d,f8,af,fc),
	HX_("CONTROL",3d,3f,55,99),
	HX_("ALT",09,95,31,00),
	HX_("SPACE",a6,c4,54,ff),
	HX_("UP",5b,4a,00,00),
	HX_("DOWN",62,c0,2e,2d),
	HX_("LEFT",07,d0,70,32),
	HX_("RIGHT",bc,43,52,67),
	HX_("TAB",35,f6,3f,00),
	HX_("HOME",1f,92,d3,2f),
	HX_("END",bb,9f,34,00),
	HX_("PAGEUP",6a,5e,bb,98),
	HX_("PAGEDOWN",31,36,e2,b9),
	::String(null())
};

static void Key_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Key_obj::A,"A");
	HX_MARK_MEMBER_NAME(Key_obj::ALT,"ALT");
	HX_MARK_MEMBER_NAME(Key_obj::ANY,"ANY");
	HX_MARK_MEMBER_NAME(Key_obj::B,"B");
	HX_MARK_MEMBER_NAME(Key_obj::BACKSLASH,"BACKSLASH");
	HX_MARK_MEMBER_NAME(Key_obj::BACKSPACE,"BACKSPACE");
	HX_MARK_MEMBER_NAME(Key_obj::C,"C");
	HX_MARK_MEMBER_NAME(Key_obj::CAPSLOCK,"CAPSLOCK");
	HX_MARK_MEMBER_NAME(Key_obj::COMMA,"COMMA");
	HX_MARK_MEMBER_NAME(Key_obj::CONTROL,"CONTROL");
	HX_MARK_MEMBER_NAME(Key_obj::D,"D");
	HX_MARK_MEMBER_NAME(Key_obj::DELETE,"DELETE");
	HX_MARK_MEMBER_NAME(Key_obj::DOWN,"DOWN");
	HX_MARK_MEMBER_NAME(Key_obj::E,"E");
	HX_MARK_MEMBER_NAME(Key_obj::EIGHT,"EIGHT");
	HX_MARK_MEMBER_NAME(Key_obj::END,"END");
	HX_MARK_MEMBER_NAME(Key_obj::ENTER,"ENTER");
	HX_MARK_MEMBER_NAME(Key_obj::ESCAPE,"ESCAPE");
	HX_MARK_MEMBER_NAME(Key_obj::F,"F");
	HX_MARK_MEMBER_NAME(Key_obj::F1,"F1");
	HX_MARK_MEMBER_NAME(Key_obj::F10,"F10");
	HX_MARK_MEMBER_NAME(Key_obj::F11,"F11");
	HX_MARK_MEMBER_NAME(Key_obj::F12,"F12");
	HX_MARK_MEMBER_NAME(Key_obj::F2,"F2");
	HX_MARK_MEMBER_NAME(Key_obj::F3,"F3");
	HX_MARK_MEMBER_NAME(Key_obj::F4,"F4");
	HX_MARK_MEMBER_NAME(Key_obj::F5,"F5");
	HX_MARK_MEMBER_NAME(Key_obj::F6,"F6");
	HX_MARK_MEMBER_NAME(Key_obj::F7,"F7");
	HX_MARK_MEMBER_NAME(Key_obj::F8,"F8");
	HX_MARK_MEMBER_NAME(Key_obj::F9,"F9");
	HX_MARK_MEMBER_NAME(Key_obj::FIVE,"FIVE");
	HX_MARK_MEMBER_NAME(Key_obj::FOUR,"FOUR");
	HX_MARK_MEMBER_NAME(Key_obj::G,"G");
	HX_MARK_MEMBER_NAME(Key_obj::H,"H");
	HX_MARK_MEMBER_NAME(Key_obj::HOME,"HOME");
	HX_MARK_MEMBER_NAME(Key_obj::I,"I");
	HX_MARK_MEMBER_NAME(Key_obj::J,"J");
	HX_MARK_MEMBER_NAME(Key_obj::K,"K");
	HX_MARK_MEMBER_NAME(Key_obj::L,"L");
	HX_MARK_MEMBER_NAME(Key_obj::LBRACKET,"LBRACKET");
	HX_MARK_MEMBER_NAME(Key_obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(Key_obj::M,"M");
	HX_MARK_MEMBER_NAME(Key_obj::MINUS,"MINUS");
	HX_MARK_MEMBER_NAME(Key_obj::N,"N");
	HX_MARK_MEMBER_NAME(Key_obj::NINE,"NINE");
	HX_MARK_MEMBER_NAME(Key_obj::O,"O");
	HX_MARK_MEMBER_NAME(Key_obj::ONE,"ONE");
	HX_MARK_MEMBER_NAME(Key_obj::P,"P");
	HX_MARK_MEMBER_NAME(Key_obj::PAGEDOWN,"PAGEDOWN");
	HX_MARK_MEMBER_NAME(Key_obj::PAGEUP,"PAGEUP");
	HX_MARK_MEMBER_NAME(Key_obj::PERIOD,"PERIOD");
	HX_MARK_MEMBER_NAME(Key_obj::PLUS,"PLUS");
	HX_MARK_MEMBER_NAME(Key_obj::Q,"Q");
	HX_MARK_MEMBER_NAME(Key_obj::QUOTE,"QUOTE");
	HX_MARK_MEMBER_NAME(Key_obj::R,"R");
	HX_MARK_MEMBER_NAME(Key_obj::RBRACKET,"RBRACKET");
	HX_MARK_MEMBER_NAME(Key_obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(Key_obj::S,"S");
	HX_MARK_MEMBER_NAME(Key_obj::SEMICOLON,"SEMICOLON");
	HX_MARK_MEMBER_NAME(Key_obj::SEVEN,"SEVEN");
	HX_MARK_MEMBER_NAME(Key_obj::SHIFT,"SHIFT");
	HX_MARK_MEMBER_NAME(Key_obj::SIX,"SIX");
	HX_MARK_MEMBER_NAME(Key_obj::SLASH,"SLASH");
	HX_MARK_MEMBER_NAME(Key_obj::SPACE,"SPACE");
	HX_MARK_MEMBER_NAME(Key_obj::T,"T");
	HX_MARK_MEMBER_NAME(Key_obj::TAB,"TAB");
	HX_MARK_MEMBER_NAME(Key_obj::THREE,"THREE");
	HX_MARK_MEMBER_NAME(Key_obj::TWO,"TWO");
	HX_MARK_MEMBER_NAME(Key_obj::U,"U");
	HX_MARK_MEMBER_NAME(Key_obj::UP,"UP");
	HX_MARK_MEMBER_NAME(Key_obj::V,"V");
	HX_MARK_MEMBER_NAME(Key_obj::W,"W");
	HX_MARK_MEMBER_NAME(Key_obj::X,"X");
	HX_MARK_MEMBER_NAME(Key_obj::Y,"Y");
	HX_MARK_MEMBER_NAME(Key_obj::Z,"Z");
	HX_MARK_MEMBER_NAME(Key_obj::ZERO,"ZERO");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Key_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Key_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Key_obj::A,"A");
	HX_VISIT_MEMBER_NAME(Key_obj::ALT,"ALT");
	HX_VISIT_MEMBER_NAME(Key_obj::ANY,"ANY");
	HX_VISIT_MEMBER_NAME(Key_obj::B,"B");
	HX_VISIT_MEMBER_NAME(Key_obj::BACKSLASH,"BACKSLASH");
	HX_VISIT_MEMBER_NAME(Key_obj::BACKSPACE,"BACKSPACE");
	HX_VISIT_MEMBER_NAME(Key_obj::C,"C");
	HX_VISIT_MEMBER_NAME(Key_obj::CAPSLOCK,"CAPSLOCK");
	HX_VISIT_MEMBER_NAME(Key_obj::COMMA,"COMMA");
	HX_VISIT_MEMBER_NAME(Key_obj::CONTROL,"CONTROL");
	HX_VISIT_MEMBER_NAME(Key_obj::D,"D");
	HX_VISIT_MEMBER_NAME(Key_obj::DELETE,"DELETE");
	HX_VISIT_MEMBER_NAME(Key_obj::DOWN,"DOWN");
	HX_VISIT_MEMBER_NAME(Key_obj::E,"E");
	HX_VISIT_MEMBER_NAME(Key_obj::EIGHT,"EIGHT");
	HX_VISIT_MEMBER_NAME(Key_obj::END,"END");
	HX_VISIT_MEMBER_NAME(Key_obj::ENTER,"ENTER");
	HX_VISIT_MEMBER_NAME(Key_obj::ESCAPE,"ESCAPE");
	HX_VISIT_MEMBER_NAME(Key_obj::F,"F");
	HX_VISIT_MEMBER_NAME(Key_obj::F1,"F1");
	HX_VISIT_MEMBER_NAME(Key_obj::F10,"F10");
	HX_VISIT_MEMBER_NAME(Key_obj::F11,"F11");
	HX_VISIT_MEMBER_NAME(Key_obj::F12,"F12");
	HX_VISIT_MEMBER_NAME(Key_obj::F2,"F2");
	HX_VISIT_MEMBER_NAME(Key_obj::F3,"F3");
	HX_VISIT_MEMBER_NAME(Key_obj::F4,"F4");
	HX_VISIT_MEMBER_NAME(Key_obj::F5,"F5");
	HX_VISIT_MEMBER_NAME(Key_obj::F6,"F6");
	HX_VISIT_MEMBER_NAME(Key_obj::F7,"F7");
	HX_VISIT_MEMBER_NAME(Key_obj::F8,"F8");
	HX_VISIT_MEMBER_NAME(Key_obj::F9,"F9");
	HX_VISIT_MEMBER_NAME(Key_obj::FIVE,"FIVE");
	HX_VISIT_MEMBER_NAME(Key_obj::FOUR,"FOUR");
	HX_VISIT_MEMBER_NAME(Key_obj::G,"G");
	HX_VISIT_MEMBER_NAME(Key_obj::H,"H");
	HX_VISIT_MEMBER_NAME(Key_obj::HOME,"HOME");
	HX_VISIT_MEMBER_NAME(Key_obj::I,"I");
	HX_VISIT_MEMBER_NAME(Key_obj::J,"J");
	HX_VISIT_MEMBER_NAME(Key_obj::K,"K");
	HX_VISIT_MEMBER_NAME(Key_obj::L,"L");
	HX_VISIT_MEMBER_NAME(Key_obj::LBRACKET,"LBRACKET");
	HX_VISIT_MEMBER_NAME(Key_obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(Key_obj::M,"M");
	HX_VISIT_MEMBER_NAME(Key_obj::MINUS,"MINUS");
	HX_VISIT_MEMBER_NAME(Key_obj::N,"N");
	HX_VISIT_MEMBER_NAME(Key_obj::NINE,"NINE");
	HX_VISIT_MEMBER_NAME(Key_obj::O,"O");
	HX_VISIT_MEMBER_NAME(Key_obj::ONE,"ONE");
	HX_VISIT_MEMBER_NAME(Key_obj::P,"P");
	HX_VISIT_MEMBER_NAME(Key_obj::PAGEDOWN,"PAGEDOWN");
	HX_VISIT_MEMBER_NAME(Key_obj::PAGEUP,"PAGEUP");
	HX_VISIT_MEMBER_NAME(Key_obj::PERIOD,"PERIOD");
	HX_VISIT_MEMBER_NAME(Key_obj::PLUS,"PLUS");
	HX_VISIT_MEMBER_NAME(Key_obj::Q,"Q");
	HX_VISIT_MEMBER_NAME(Key_obj::QUOTE,"QUOTE");
	HX_VISIT_MEMBER_NAME(Key_obj::R,"R");
	HX_VISIT_MEMBER_NAME(Key_obj::RBRACKET,"RBRACKET");
	HX_VISIT_MEMBER_NAME(Key_obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(Key_obj::S,"S");
	HX_VISIT_MEMBER_NAME(Key_obj::SEMICOLON,"SEMICOLON");
	HX_VISIT_MEMBER_NAME(Key_obj::SEVEN,"SEVEN");
	HX_VISIT_MEMBER_NAME(Key_obj::SHIFT,"SHIFT");
	HX_VISIT_MEMBER_NAME(Key_obj::SIX,"SIX");
	HX_VISIT_MEMBER_NAME(Key_obj::SLASH,"SLASH");
	HX_VISIT_MEMBER_NAME(Key_obj::SPACE,"SPACE");
	HX_VISIT_MEMBER_NAME(Key_obj::T,"T");
	HX_VISIT_MEMBER_NAME(Key_obj::TAB,"TAB");
	HX_VISIT_MEMBER_NAME(Key_obj::THREE,"THREE");
	HX_VISIT_MEMBER_NAME(Key_obj::TWO,"TWO");
	HX_VISIT_MEMBER_NAME(Key_obj::U,"U");
	HX_VISIT_MEMBER_NAME(Key_obj::UP,"UP");
	HX_VISIT_MEMBER_NAME(Key_obj::V,"V");
	HX_VISIT_MEMBER_NAME(Key_obj::W,"W");
	HX_VISIT_MEMBER_NAME(Key_obj::X,"X");
	HX_VISIT_MEMBER_NAME(Key_obj::Y,"Y");
	HX_VISIT_MEMBER_NAME(Key_obj::Z,"Z");
	HX_VISIT_MEMBER_NAME(Key_obj::ZERO,"ZERO");
};
#endif

hx::Class Key_obj::__mClass;

Dynamic __Create_Key_obj() { return new Key_obj; }

void Key_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("haxegon.Key","\xf1","\xf2","\x17","\x3a"), hx::TCanCast< Key_obj >,Key_obj_sStaticFields,0,
	&__Create_Key_obj, &__Create,
	&super::__SGetClass(), &CreateKey_obj, Key_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , Key_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Key_obj::__GetStatic;
}

void Key_obj::__boot()
{
A = hx::CreateEnum< Key_obj >(HX_HCSTRING("A","\x41","\x00","\x00","\x00"),1,0);
ALT = hx::CreateEnum< Key_obj >(HX_HCSTRING("ALT","\x09","\x95","\x31","\x00"),66,0);
ANY = hx::CreateEnum< Key_obj >(HX_HCSTRING("ANY","\xcc","\x96","\x31","\x00"),0,0);
B = hx::CreateEnum< Key_obj >(HX_HCSTRING("B","\x42","\x00","\x00","\x00"),2,0);
BACKSLASH = hx::CreateEnum< Key_obj >(HX_HCSTRING("BACKSLASH","\x96","\x28","\x9e","\xc3"),56,0);
BACKSPACE = hx::CreateEnum< Key_obj >(HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6"),53,0);
C = hx::CreateEnum< Key_obj >(HX_HCSTRING("C","\x43","\x00","\x00","\x00"),3,0);
CAPSLOCK = hx::CreateEnum< Key_obj >(HX_HCSTRING("CAPSLOCK","\x8c","\x6c","\x6e","\x80"),57,0);
COMMA = hx::CreateEnum< Key_obj >(HX_HCSTRING("COMMA","\xb5","\x69","\x4b","\xc8"),62,0);
CONTROL = hx::CreateEnum< Key_obj >(HX_HCSTRING("CONTROL","\x3d","\x3f","\x55","\x99"),65,0);
D = hx::CreateEnum< Key_obj >(HX_HCSTRING("D","\x44","\x00","\x00","\x00"),4,0);
DELETE = hx::CreateEnum< Key_obj >(HX_HCSTRING("DELETE","\x2b","\x6c","\x5b","\x1d"),52,0);
DOWN = hx::CreateEnum< Key_obj >(HX_HCSTRING("DOWN","\x62","\xc0","\x2e","\x2d"),69,0);
E = hx::CreateEnum< Key_obj >(HX_HCSTRING("E","\x45","\x00","\x00","\x00"),5,0);
EIGHT = hx::CreateEnum< Key_obj >(HX_HCSTRING("EIGHT","\x2f","\xb9","\x1c","\xeb"),35,0);
END = hx::CreateEnum< Key_obj >(HX_HCSTRING("END","\xbb","\x9f","\x34","\x00"),74,0);
ENTER = hx::CreateEnum< Key_obj >(HX_HCSTRING("ENTER","\xf8","\xa4","\x74","\xee"),60,0);
ESCAPE = hx::CreateEnum< Key_obj >(HX_HCSTRING("ESCAPE","\x81","\xef","\x5c","\x8d"),49,0);
F = hx::CreateEnum< Key_obj >(HX_HCSTRING("F","\x46","\x00","\x00","\x00"),6,0);
F1 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F1","\x2b","\x3d","\x00","\x00"),37,0);
F10 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F10","\xa5","\x48","\x35","\x00"),46,0);
F11 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F11","\xa6","\x48","\x35","\x00"),47,0);
F12 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F12","\xa7","\x48","\x35","\x00"),48,0);
F2 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F2","\x2c","\x3d","\x00","\x00"),38,0);
F3 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F3","\x2d","\x3d","\x00","\x00"),39,0);
F4 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F4","\x2e","\x3d","\x00","\x00"),40,0);
F5 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F5","\x2f","\x3d","\x00","\x00"),41,0);
F6 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F6","\x30","\x3d","\x00","\x00"),42,0);
F7 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F7","\x31","\x3d","\x00","\x00"),43,0);
F8 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F8","\x32","\x3d","\x00","\x00"),44,0);
F9 = hx::CreateEnum< Key_obj >(HX_HCSTRING("F9","\x33","\x3d","\x00","\x00"),45,0);
FIVE = hx::CreateEnum< Key_obj >(HX_HCSTRING("FIVE","\x32","\x9f","\x7c","\x2e"),32,0);
FOUR = hx::CreateEnum< Key_obj >(HX_HCSTRING("FOUR","\xe6","\x2b","\x81","\x2e"),31,0);
G = hx::CreateEnum< Key_obj >(HX_HCSTRING("G","\x47","\x00","\x00","\x00"),7,0);
H = hx::CreateEnum< Key_obj >(HX_HCSTRING("H","\x48","\x00","\x00","\x00"),8,0);
HOME = hx::CreateEnum< Key_obj >(HX_HCSTRING("HOME","\x1f","\x92","\xd3","\x2f"),73,0);
I = hx::CreateEnum< Key_obj >(HX_HCSTRING("I","\x49","\x00","\x00","\x00"),9,0);
J = hx::CreateEnum< Key_obj >(HX_HCSTRING("J","\x4a","\x00","\x00","\x00"),10,0);
K = hx::CreateEnum< Key_obj >(HX_HCSTRING("K","\x4b","\x00","\x00","\x00"),11,0);
L = hx::CreateEnum< Key_obj >(HX_HCSTRING("L","\x4c","\x00","\x00","\x00"),12,0);
LBRACKET = hx::CreateEnum< Key_obj >(HX_HCSTRING("LBRACKET","\x3c","\x3b","\x54","\x16"),54,0);
LEFT = hx::CreateEnum< Key_obj >(HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),70,0);
M = hx::CreateEnum< Key_obj >(HX_HCSTRING("M","\x4d","\x00","\x00","\x00"),13,0);
MINUS = hx::CreateEnum< Key_obj >(HX_HCSTRING("MINUS","\x50","\xb8","\x56","\x86"),50,0);
N = hx::CreateEnum< Key_obj >(HX_HCSTRING("N","\x4e","\x00","\x00","\x00"),14,0);
NINE = hx::CreateEnum< Key_obj >(HX_HCSTRING("NINE","\x32","\x4d","\xc6","\x33"),36,0);
O = hx::CreateEnum< Key_obj >(HX_HCSTRING("O","\x4f","\x00","\x00","\x00"),15,0);
ONE = hx::CreateEnum< Key_obj >(HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00"),28,0);
P = hx::CreateEnum< Key_obj >(HX_HCSTRING("P","\x50","\x00","\x00","\x00"),16,0);
PAGEDOWN = hx::CreateEnum< Key_obj >(HX_HCSTRING("PAGEDOWN","\x31","\x36","\xe2","\xb9"),76,0);
PAGEUP = hx::CreateEnum< Key_obj >(HX_HCSTRING("PAGEUP","\x6a","\x5e","\xbb","\x98"),75,0);
PERIOD = hx::CreateEnum< Key_obj >(HX_HCSTRING("PERIOD","\x01","\x0d","\x9e","\xed"),63,0);
PLUS = hx::CreateEnum< Key_obj >(HX_HCSTRING("PLUS","\x5a","\x07","\x1b","\x35"),51,0);
Q = hx::CreateEnum< Key_obj >(HX_HCSTRING("Q","\x51","\x00","\x00","\x00"),17,0);
QUOTE = hx::CreateEnum< Key_obj >(HX_HCSTRING("QUOTE","\x1c","\x5b","\xe0","\xdb"),59,0);
R = hx::CreateEnum< Key_obj >(HX_HCSTRING("R","\x52","\x00","\x00","\x00"),18,0);
RBRACKET = hx::CreateEnum< Key_obj >(HX_HCSTRING("RBRACKET","\xf6","\xe7","\x82","\x6d"),55,0);
RIGHT = hx::CreateEnum< Key_obj >(HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),71,0);
S = hx::CreateEnum< Key_obj >(HX_HCSTRING("S","\x53","\x00","\x00","\x00"),19,0);
SEMICOLON = hx::CreateEnum< Key_obj >(HX_HCSTRING("SEMICOLON","\x11","\x86","\x2a","\x49"),58,0);
SEVEN = hx::CreateEnum< Key_obj >(HX_HCSTRING("SEVEN","\xed","\x5c","\x1f","\xf8"),34,0);
SHIFT = hx::CreateEnum< Key_obj >(HX_HCSTRING("SHIFT","\x62","\x24","\x11","\xfa"),61,0);
SIX = hx::CreateEnum< Key_obj >(HX_HCSTRING("SIX","\x02","\x3b","\x3f","\x00"),33,0);
SLASH = hx::CreateEnum< Key_obj >(HX_HCSTRING("SLASH","\x1d","\xf8","\xaf","\xfc"),64,0);
SPACE = hx::CreateEnum< Key_obj >(HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff"),67,0);
T = hx::CreateEnum< Key_obj >(HX_HCSTRING("T","\x54","\x00","\x00","\x00"),20,0);
TAB = hx::CreateEnum< Key_obj >(HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00"),72,0);
THREE = hx::CreateEnum< Key_obj >(HX_HCSTRING("THREE","\x3e","\x8c","\x7e","\x8d"),30,0);
TWO = hx::CreateEnum< Key_obj >(HX_HCSTRING("TWO","\x6c","\x09","\x40","\x00"),29,0);
U = hx::CreateEnum< Key_obj >(HX_HCSTRING("U","\x55","\x00","\x00","\x00"),21,0);
UP = hx::CreateEnum< Key_obj >(HX_HCSTRING("UP","\x5b","\x4a","\x00","\x00"),68,0);
V = hx::CreateEnum< Key_obj >(HX_HCSTRING("V","\x56","\x00","\x00","\x00"),22,0);
W = hx::CreateEnum< Key_obj >(HX_HCSTRING("W","\x57","\x00","\x00","\x00"),23,0);
X = hx::CreateEnum< Key_obj >(HX_HCSTRING("X","\x58","\x00","\x00","\x00"),24,0);
Y = hx::CreateEnum< Key_obj >(HX_HCSTRING("Y","\x59","\x00","\x00","\x00"),25,0);
Z = hx::CreateEnum< Key_obj >(HX_HCSTRING("Z","\x5a","\x00","\x00","\x00"),26,0);
ZERO = hx::CreateEnum< Key_obj >(HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b"),27,0);
}


} // end namespace haxegon
