// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_haxegon_Data
#include <haxegon/Data.h>
#endif
#ifndef INCLUDED_haxegon_Debug
#include <haxegon/Debug.h>
#endif
#ifndef INCLUDED_haxegon_S
#include <haxegon/S.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_12_loadtext,"haxegon.Data","loadtext",0x125ce869,"haxegon.Data.loadtext","haxegon/Data.hx",12,0x29798f45)
static const ::String _hx_array_data_96391498_1[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_108_initassets,"haxegon.Data","initassets",0xd44bf7a9,"haxegon.Data.initassets","haxegon/Data.hx",108,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_114_assetexists,"haxegon.Data","assetexists",0xece4e6f6,"haxegon.Data.assetexists","haxegon/Data.hx",114,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_119_assetexists_infolder,"haxegon.Data","assetexists_infolder",0x9aedcdfc,"haxegon.Data.assetexists_infolder","haxegon/Data.hx",119,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_135_getsoundasset,"haxegon.Data","getsoundasset",0x23125081,"haxegon.Data.getsoundasset","haxegon/Data.hx",135,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_141_getgraphicsasset,"haxegon.Data","getgraphicsasset",0xe8070785,"haxegon.Data.getgraphicsasset","haxegon/Data.hx",141,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_147_getfontasset,"haxegon.Data","getfontasset",0x9095d401,"haxegon.Data.getfontasset","haxegon/Data.hx",147,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_153_gettextasset,"haxegon.Data","gettextasset",0x7da7c063,"haxegon.Data.gettextasset","haxegon/Data.hx",153,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_9_boot,"haxegon.Data","boot",0xe22777c8,"haxegon.Data.boot","haxegon/Data.hx",9,0x29798f45)
HX_LOCAL_STACK_FRAME(_hx_pos_0c832802bf20cfc6_10_boot,"haxegon.Data","boot",0xe22777c8,"haxegon.Data.boot","haxegon/Data.hx",10,0x29798f45)
namespace haxegon{

void Data_obj::__construct() { }

Dynamic Data_obj::__CreateEmpty() { return new Data_obj; }

void *Data_obj::_hx_vtable = 0;

Dynamic Data_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Data_obj > _hx_result = new Data_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Data_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0198325a;
}

int Data_obj::width;

int Data_obj::height;

::Array< ::String > Data_obj::loadtext(::String textfile){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_12_loadtext)
HXLINE(  13)		textfile = textfile.toLowerCase();
HXLINE(  14)		::String tempstring = HX_("",00,00,00,00);
HXLINE(  15)		if (::openfl::utils::Assets_obj::exists(((HX_("data/text/",fd,91,6c,8f) + textfile) + HX_(".txt",02,3f,c0,1e)),null())) {
HXLINE(  16)			tempstring = ::openfl::utils::Assets_obj::getText(((HX_("data/text/",fd,91,6c,8f) + textfile) + HX_(".txt",02,3f,c0,1e)));
            		}
            		else {
HXLINE(  18)			::haxegon::Debug_obj::log(((HX_("ERROR: In loadtext, cannot find \"data/text/",41,34,fd,7c) + textfile) + HX_(".txt\".",4e,a1,8f,7e)),hx::SourceInfo(HX_("Data.hx",b4,ca,0d,df),18,HX_("haxegon.Data",98,14,39,96),HX_("loadtext",d3,71,c0,d2)));
HXLINE(  19)			return ::Array_obj< ::String >::fromData( _hx_array_data_96391498_1,1);
            		}
HXLINE(  22)		tempstring = ::haxegon::S_obj::replacechar(tempstring,HX_("\r",0d,00,00,00),HX_("",00,00,00,00));
HXLINE(  24)		return tempstring.split(HX_("\n",0a,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,loadtext,return )

::Array< ::String > Data_obj::embeddedassets_original;

::Array< ::String > Data_obj::embeddedassets;

void Data_obj::initassets(){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_108_initassets)
HXLINE( 109)		::haxegon::Data_obj::embeddedassets_original = ::openfl::utils::Assets_obj::list(null());
HXLINE( 110)		::haxegon::Data_obj::embeddedassets = ::Array_obj< ::String >::__new(0);
HXLINE( 111)		{
HXLINE( 111)			int _g1 = (int)0;
HXDLIN( 111)			int _g = ::haxegon::Data_obj::embeddedassets_original->length;
HXDLIN( 111)			while((_g1 < _g)){
HXLINE( 111)				_g1 = (_g1 + (int)1);
HXDLIN( 111)				int i = (_g1 - (int)1);
HXDLIN( 111)				::Array< ::String > _hx_tmp = ::haxegon::Data_obj::embeddedassets;
HXDLIN( 111)				_hx_tmp->push(::haxegon::Data_obj::embeddedassets_original->__get(i).toLowerCase());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Data_obj,initassets,(void))

bool Data_obj::assetexists(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_114_assetexists)
HXLINE( 115)		filename = filename.toLowerCase();
HXLINE( 116)		return (::haxegon::Data_obj::embeddedassets->indexOf(filename,null()) >= (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,assetexists,return )

bool Data_obj::assetexists_infolder(::String folder,::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_119_assetexists_infolder)
HXLINE( 120)		filename = filename.toLowerCase();
HXLINE( 121)		folder = folder.toLowerCase();
HXLINE( 123)		int folderlength = folder.length;
HXLINE( 124)		int filenamelength = filename.length;
HXLINE( 125)		{
HXLINE( 125)			int _g1 = (int)0;
HXDLIN( 125)			int _g = ::haxegon::Data_obj::embeddedassets->length;
HXDLIN( 125)			while((_g1 < _g)){
HXLINE( 125)				_g1 = (_g1 + (int)1);
HXDLIN( 125)				int i = (_g1 - (int)1);
HXLINE( 126)				if ((::haxegon::Data_obj::embeddedassets->__get(i).substr((int)0,folderlength) == folder)) {
HXLINE( 127)					::String currentstring = ::haxegon::Data_obj::embeddedassets->__get(i);
HXDLIN( 127)					if ((currentstring.substr((currentstring.length - filenamelength),filenamelength) == filename)) {
HXLINE( 128)						return true;
            					}
            				}
            			}
            		}
HXLINE( 132)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,assetexists_infolder,return )

 ::openfl::media::Sound Data_obj::getsoundasset(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_135_getsoundasset)
HXLINE( 136)		filename = filename.toLowerCase();
HXLINE( 137)		::Array< ::String > realfilename = ::haxegon::Data_obj::embeddedassets_original;
HXDLIN( 137)		::String realfilename1 = realfilename->__get(::haxegon::Data_obj::embeddedassets->indexOf(filename,null()));
HXLINE( 138)		return ::openfl::utils::Assets_obj::getSound(realfilename1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,getsoundasset,return )

 ::openfl::display::BitmapData Data_obj::getgraphicsasset(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_141_getgraphicsasset)
HXLINE( 142)		filename = filename.toLowerCase();
HXLINE( 143)		::Array< ::String > realfilename = ::haxegon::Data_obj::embeddedassets_original;
HXDLIN( 143)		::String realfilename1 = realfilename->__get(::haxegon::Data_obj::embeddedassets->indexOf(filename,null()));
HXLINE( 144)		return ::openfl::utils::Assets_obj::getBitmapData(realfilename1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,getgraphicsasset,return )

 ::openfl::text::Font Data_obj::getfontasset(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_147_getfontasset)
HXLINE( 148)		filename = filename.toLowerCase();
HXLINE( 149)		::Array< ::String > realfilename = ::haxegon::Data_obj::embeddedassets_original;
HXDLIN( 149)		::String realfilename1 = realfilename->__get(::haxegon::Data_obj::embeddedassets->indexOf(filename,null()));
HXLINE( 150)		return ::openfl::utils::Assets_obj::getFont(realfilename1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,getfontasset,return )

::String Data_obj::gettextasset(::String filename){
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_153_gettextasset)
HXLINE( 154)		filename = filename.toLowerCase();
HXLINE( 155)		::Array< ::String > realfilename = ::haxegon::Data_obj::embeddedassets_original;
HXDLIN( 155)		::String realfilename1 = realfilename->__get(::haxegon::Data_obj::embeddedassets->indexOf(filename,null()));
HXLINE( 156)		return ::openfl::utils::Assets_obj::getText(realfilename1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,gettextasset,return )


Data_obj::Data_obj()
{
}

bool Data_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { outValue = ( width ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { outValue = ( height ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadtext") ) { outValue = loadtext_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initassets") ) { outValue = initassets_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"assetexists") ) { outValue = assetexists_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getfontasset") ) { outValue = getfontasset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gettextasset") ) { outValue = gettextasset_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getsoundasset") ) { outValue = getsoundasset_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"embeddedassets") ) { outValue = ( embeddedassets ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getgraphicsasset") ) { outValue = getgraphicsasset_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"assetexists_infolder") ) { outValue = assetexists_infolder_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"embeddedassets_original") ) { outValue = ( embeddedassets_original ); return true; }
	}
	return false;
}

bool Data_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"embeddedassets") ) { embeddedassets=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"embeddedassets_original") ) { embeddedassets_original=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Data_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Data_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Data_obj::width,HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(void *) &Data_obj::height,HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Data_obj::embeddedassets_original,HX_HCSTRING("embeddedassets_original","\x83","\x6c","\xc5","\xcf")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Data_obj::embeddedassets,HX_HCSTRING("embeddedassets","\x8d","\x25","\x10","\x23")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Data_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Data_obj::width,"width");
	HX_MARK_MEMBER_NAME(Data_obj::height,"height");
	HX_MARK_MEMBER_NAME(Data_obj::embeddedassets_original,"embeddedassets_original");
	HX_MARK_MEMBER_NAME(Data_obj::embeddedassets,"embeddedassets");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Data_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Data_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Data_obj::width,"width");
	HX_VISIT_MEMBER_NAME(Data_obj::height,"height");
	HX_VISIT_MEMBER_NAME(Data_obj::embeddedassets_original,"embeddedassets_original");
	HX_VISIT_MEMBER_NAME(Data_obj::embeddedassets,"embeddedassets");
};

#endif

hx::Class Data_obj::__mClass;

static ::String Data_obj_sStaticFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("loadtext","\xd3","\x71","\xc0","\xd2"),
	HX_HCSTRING("embeddedassets_original","\x83","\x6c","\xc5","\xcf"),
	HX_HCSTRING("embeddedassets","\x8d","\x25","\x10","\x23"),
	HX_HCSTRING("initassets","\x93","\x2f","\xb4","\x1b"),
	HX_HCSTRING("assetexists","\xcc","\x9b","\xad","\x20"),
	HX_HCSTRING("assetexists_infolder","\x66","\xce","\xae","\xc8"),
	HX_HCSTRING("getsoundasset","\xd7","\x66","\x12","\x62"),
	HX_HCSTRING("getgraphicsasset","\xef","\x0a","\x91","\xcc"),
	HX_HCSTRING("getfontasset","\x6b","\x5a","\x6b","\xac"),
	HX_HCSTRING("gettextasset","\xcd","\x46","\x7d","\x99"),
	::String(null())
};

void Data_obj::__register()
{
	hx::Object *dummy = new Data_obj;
	Data_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Data","\x98","\x14","\x39","\x96");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Data_obj::__GetStatic;
	__mClass->mSetStaticField = &Data_obj::__SetStatic;
	__mClass->mMarkFunc = Data_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Data_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Data_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Data_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Data_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Data_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Data_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_9_boot)
HXDLIN(   9)		width = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_0c832802bf20cfc6_10_boot)
HXDLIN(  10)		height = (int)0;
            	}
}

} // end namespace haxegon
