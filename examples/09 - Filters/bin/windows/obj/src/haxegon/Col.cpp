// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxegon_Col
#include <haxegon/Col.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_28_getred,"haxegon.Col","getred",0x3ecbfdd7,"haxegon.Col.getred","haxegon/Col.hx",28,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_32_getgreen,"haxegon.Col","getgreen",0x3b58e0c9,"haxegon.Col.getgreen","haxegon/Col.hx",32,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_36_getblue,"haxegon.Col","getblue",0xa9241354,"haxegon.Col.getblue","haxegon/Col.hx",36,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_40_shiftred,"haxegon.Col","shiftred",0x6e7f5c6b,"haxegon.Col.shiftred","haxegon/Col.hx",40,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_44_shiftgreen,"haxegon.Col","shiftgreen",0x45900c5d,"haxegon.Col.shiftgreen","haxegon/Col.hx",44,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_48_shiftblue,"haxegon.Col","shiftblue",0x36637640,"haxegon.Col.shiftblue","haxegon/Col.hx",48,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_51_shifthue,"haxegon.Col","shifthue",0x6e77d3d2,"haxegon.Col.shifthue","haxegon/Col.hx",51,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_59_multiplysaturation,"haxegon.Col","multiplysaturation",0x0e478852,"haxegon.Col.multiplysaturation","haxegon/Col.hx",59,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_63_multiplylightness,"haxegon.Col","multiplylightness",0x7cb18fed,"haxegon.Col.multiplylightness","haxegon/Col.hx",63,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_67_gethue,"haxegon.Col","gethue",0x3ec4753e,"haxegon.Col.gethue","haxegon/Col.hx",67,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_92_getsaturation,"haxegon.Col","getsaturation",0xa940ec0c,"haxegon.Col.getsaturation","haxegon/Col.hx",92,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_113_getlightness,"haxegon.Col","getlightness",0xa46b8173,"haxegon.Col.getlightness","haxegon/Col.hx",113,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_124_rgb,"haxegon.Col","rgb",0xa2f9c631,"haxegon.Col.rgb","haxegon/Col.hx",124,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_129_hsl,"haxegon.Col","hsl",0xa2f23a25,"haxegon.Col.hsl","haxegon/Col.hx",129,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_6_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",6,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_7_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",7,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_8_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",8,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_9_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",9,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_10_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",10,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_11_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",11,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_12_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",12,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_13_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",13,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_14_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",14,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_15_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",15,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_16_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",16,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_17_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",17,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_18_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",18,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_19_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",19,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_20_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",20,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_21_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",21,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_22_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",22,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_23_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",23,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_25_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",25,0x337f972d)
HX_LOCAL_STACK_FRAME(_hx_pos_532a15ee85aaaa02_160_boot,"haxegon.Col","boot",0xed06588e,"haxegon.Col.boot","haxegon/Col.hx",160,0x337f972d)
static const Float _hx_array_data_3a11e992_36[] = {
	0.0,0.0,0.0,
};
namespace haxegon{

void Col_obj::__construct() { }

Dynamic Col_obj::__CreateEmpty() { return new Col_obj; }

void *Col_obj::_hx_vtable = 0;

Dynamic Col_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Col_obj > _hx_result = new Col_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Col_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78552080;
}

int Col_obj::BLACK;

int Col_obj::GREY;

int Col_obj::GRAY;

int Col_obj::WHITE;

int Col_obj::RED;

int Col_obj::PINK;

int Col_obj::DARKBROWN;

int Col_obj::BROWN;

int Col_obj::ORANGE;

int Col_obj::YELLOW;

int Col_obj::DARKGREEN;

int Col_obj::GREEN;

int Col_obj::LIGHTGREEN;

int Col_obj::NIGHTBLUE;

int Col_obj::DARKBLUE;

int Col_obj::BLUE;

int Col_obj::LIGHTBLUE;

int Col_obj::MAGENTA;

int Col_obj::TRANSPARENT;

int Col_obj::getred(int c){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_28_getred)
HXDLIN(  28)		return ((int)((int)c >> (int)(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Col_obj,getred,return )

int Col_obj::getgreen(int c){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_32_getgreen)
HXDLIN(  32)		return ((int)((int)c >> (int)(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Col_obj,getgreen,return )

int Col_obj::getblue(int c){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_36_getblue)
HXDLIN(  36)		return ((int)c & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Col_obj,getblue,return )

int Col_obj::shiftred(int c,Float shift){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_40_shiftred)
HXDLIN(  40)		int _hx_tmp = ::Std_obj::_hx_int(::Math_obj::min((int)255,::Math_obj::max((((int)((int)c >> (int)(int)16) & (int)(int)255) + shift),(int)0)));
HXDLIN(  40)		return ::haxegon::Col_obj::rgb(_hx_tmp,((int)((int)c >> (int)(int)8) & (int)(int)255),((int)c & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Col_obj,shiftred,return )

int Col_obj::shiftgreen(int c,Float shift){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_44_shiftgreen)
HXDLIN(  44)		int _hx_tmp = ::Std_obj::_hx_int(::Math_obj::min((int)255,::Math_obj::max((((int)((int)c >> (int)(int)8) & (int)(int)255) + shift),(int)0)));
HXDLIN(  44)		return ::haxegon::Col_obj::rgb(((int)((int)c >> (int)(int)16) & (int)(int)255),_hx_tmp,((int)c & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Col_obj,shiftgreen,return )

int Col_obj::shiftblue(int c,Float shift){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_48_shiftblue)
HXDLIN(  48)		return ::haxegon::Col_obj::rgb(((int)((int)c >> (int)(int)16) & (int)(int)255),((int)((int)c >> (int)(int)8) & (int)(int)255),::Std_obj::_hx_int(::Math_obj::min((int)255,::Math_obj::max((((int)c & (int)(int)255) + shift),(int)0))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Col_obj,shiftblue,return )

int Col_obj::shifthue(int c,Float shift){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_51_shifthue)
HXLINE(  52)		if ((shift < (int)0)) {
HXLINE(  53)			while((shift < (int)0)){
HXLINE(  53)				shift = (shift + (int)360);
            			}
            		}
HXLINE(  55)		int _hx_tmp = ::haxegon::Col_obj::gethue(c);
HXDLIN(  55)		int _hx_tmp1 = hx::Mod((_hx_tmp + ::Std_obj::_hx_int(shift)),(int)360);
HXDLIN(  55)		Float _hx_tmp2 = ::haxegon::Col_obj::getsaturation(c);
HXDLIN(  55)		return ::haxegon::Col_obj::hsl(_hx_tmp1,_hx_tmp2,::haxegon::Col_obj::getlightness(c));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Col_obj,shifthue,return )

int Col_obj::multiplysaturation(int c,Float shift){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_59_multiplysaturation)
HXDLIN(  59)		int _hx_tmp = ::haxegon::Col_obj::gethue(c);
HXDLIN(  59)		Float _hx_tmp1 = ::Math_obj::min(((Float)1.0),::Math_obj::max((::haxegon::Col_obj::getsaturation(c) * shift),(int)0));
HXDLIN(  59)		return ::haxegon::Col_obj::hsl(_hx_tmp,_hx_tmp1,::haxegon::Col_obj::getlightness(c));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Col_obj,multiplysaturation,return )

int Col_obj::multiplylightness(int c,Float shift){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_63_multiplylightness)
HXDLIN(  63)		int _hx_tmp = ::haxegon::Col_obj::gethue(c);
HXDLIN(  63)		Float _hx_tmp1 = ::haxegon::Col_obj::getsaturation(c);
HXDLIN(  63)		return ::haxegon::Col_obj::hsl(_hx_tmp,_hx_tmp1,::Math_obj::min(((Float)1.0),::Math_obj::max((::haxegon::Col_obj::getlightness(c) * shift),(int)0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Col_obj,multiplylightness,return )

int Col_obj::gethue(int c){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_67_gethue)
HXLINE(  68)		Float r = ((Float)((int)((int)c >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
HXLINE(  69)		Float g = ((Float)((int)((int)c >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
HXLINE(  70)		Float b = ((Float)((int)c & (int)(int)255) / (Float)(int)255);
HXLINE(  71)		Float max = ::Math_obj::max(::Math_obj::max(r,g),b);
HXLINE(  72)		Float min = ::Math_obj::min(::Math_obj::min(r,g),b);
HXLINE(  74)		Float h = ((Float)(max + min) / (Float)(int)2);
HXLINE(  76)		if ((max != min)) {
HXLINE(  77)			Float d = (max - min);
HXLINE(  78)			if ((max == r)) {
HXLINE(  79)				int h1;
HXDLIN(  79)				if ((g < b)) {
HXLINE(  79)					h1 = (int)6;
            				}
            				else {
HXLINE(  79)					h1 = (int)0;
            				}
HXDLIN(  79)				h = (((Float)(g - b) / (Float)d) + h1);
            			}
            			else {
HXLINE(  80)				if ((max == g)) {
HXLINE(  81)					h = (((Float)(b - r) / (Float)d) + (int)2);
            				}
            				else {
HXLINE(  82)					if ((max == b)) {
HXLINE(  83)						h = (((Float)(r - g) / (Float)d) + (int)4);
            					}
            				}
            			}
HXLINE(  85)			h = ((Float)h / (Float)(int)6);
            		}
HXLINE(  88)		return ::Std_obj::_hx_int((h * (int)360));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Col_obj,gethue,return )

Float Col_obj::getsaturation(int c){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_92_getsaturation)
HXLINE(  93)		Float r = ((Float)((int)((int)c >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
HXLINE(  94)		Float g = ((Float)((int)((int)c >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
HXLINE(  95)		Float b = ((Float)((int)c & (int)(int)255) / (Float)(int)255);
HXLINE(  96)		Float max = ::Math_obj::max(::Math_obj::max(r,g),b);
HXLINE(  97)		Float min = ::Math_obj::min(::Math_obj::min(r,g),b);
HXLINE(  99)		Float s = ((Float)(max + min) / (Float)(int)2);
HXLINE( 100)		Float l = s;
HXLINE( 102)		if ((max == min)) {
HXLINE( 103)			s = (int)0;
            		}
            		else {
HXLINE( 105)			Float d = (max - min);
HXLINE( 106)			if ((l > ((Float)0.5))) {
HXLINE( 106)				s = ((Float)d / (Float)(((int)2 - max) - min));
            			}
            			else {
HXLINE( 106)				s = ((Float)d / (Float)(max + min));
            			}
            		}
HXLINE( 109)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Col_obj,getsaturation,return )

Float Col_obj::getlightness(int c){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_113_getlightness)
HXLINE( 114)		Float r = ((Float)((int)((int)c >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
HXLINE( 115)		Float g = ((Float)((int)((int)c >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
HXLINE( 116)		Float b = ((Float)((int)c & (int)(int)255) / (Float)(int)255);
HXLINE( 117)		Float max = ::Math_obj::max(::Math_obj::max(r,g),b);
HXLINE( 118)		Float min = ::Math_obj::min(::Math_obj::min(r,g),b);
HXLINE( 120)		return ((Float)(max + min) / (Float)(int)2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Col_obj,getlightness,return )

int Col_obj::rgb(int red,int green,int blue){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_124_rgb)
HXDLIN( 124)		return ((int)((int)blue | (int)((int)green << (int)(int)8)) | (int)((int)red << (int)(int)16));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Col_obj,rgb,return )

int Col_obj::hsl(Float hue,Float saturation,Float lightness){
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_129_hsl)
HXLINE( 130)		Float q;
HXDLIN( 130)		if ((lightness < ((Float)0.5))) {
HXLINE( 130)			q = (lightness * ((int)1 + saturation));
            		}
            		else {
HXLINE( 130)			q = ((lightness + saturation) - (lightness * saturation));
            		}
HXLINE( 136)		Float p = (((int)2 * lightness) - q);
HXLINE( 138)		Float hk = ((Float)hx::Mod(hue,(int)360) / (Float)(int)360);
HXLINE( 140)		::Array< Float > _hx_tmp = ::haxegon::Col_obj::hslval;
HXDLIN( 140)		_hx_tmp[(int)0] = (hk + ((Float)0.33333333333333331));
HXLINE( 141)		::haxegon::Col_obj::hslval[(int)1] = hk;
HXLINE( 142)		::Array< Float > _hx_tmp1 = ::haxegon::Col_obj::hslval;
HXDLIN( 142)		_hx_tmp1[(int)2] = (hk - ((Float)0.33333333333333331));
HXLINE( 143)		{
HXLINE( 143)			int _g = (int)0;
HXDLIN( 143)			while((_g < (int)3)){
HXLINE( 143)				_g = (_g + (int)1);
HXDLIN( 143)				int n = (_g - (int)1);
HXLINE( 144)				if ((::haxegon::Col_obj::hslval->__get(n) < (int)0)) {
HXLINE( 144)					::Array< Float > _hx_tmp2 = ::haxegon::Col_obj::hslval;
HXDLIN( 144)					int n1 = n;
HXDLIN( 144)					_hx_tmp2[n1] = (_hx_tmp2->__get(n1) + (int)1);
            				}
HXLINE( 145)				if ((::haxegon::Col_obj::hslval->__get(n) > (int)1)) {
HXLINE( 145)					::Array< Float > _hx_tmp3 = ::haxegon::Col_obj::hslval;
HXDLIN( 145)					int n2 = n;
HXDLIN( 145)					_hx_tmp3[n2] = (_hx_tmp3->__get(n2) - (int)1);
            				}
HXLINE( 146)				Float _hx_tmp4;
HXDLIN( 146)				if ((::haxegon::Col_obj::hslval->__get(n) < ((Float)0.16666666666666666))) {
HXLINE( 146)					_hx_tmp4 = (p + (((q - p) * (int)6) * ::haxegon::Col_obj::hslval->__get(n)));
            				}
            				else {
HXLINE( 148)					if ((::haxegon::Col_obj::hslval->__get(n) < ((Float)0.5))) {
HXLINE( 146)						_hx_tmp4 = q;
            					}
            					else {
HXLINE( 150)						if ((::haxegon::Col_obj::hslval->__get(n) < ((Float)0.66666666666666663))) {
HXLINE( 146)							_hx_tmp4 = (p + (((q - p) * (int)6) * (((Float)0.66666666666666663) - ::haxegon::Col_obj::hslval->__get(n))));
            						}
            						else {
HXLINE( 146)							_hx_tmp4 = p;
            						}
            					}
            				}
HXDLIN( 146)				::haxegon::Col_obj::hslval[n] = _hx_tmp4;
            			}
            		}
HXLINE( 157)		int _hx_tmp5 = ::Std_obj::_hx_int((::haxegon::Col_obj::hslval->__get((int)0) * (int)255));
HXDLIN( 157)		int _hx_tmp6 = ::Std_obj::_hx_int((::haxegon::Col_obj::hslval->__get((int)1) * (int)255));
HXDLIN( 157)		return ::haxegon::Col_obj::rgb(_hx_tmp5,_hx_tmp6,::Std_obj::_hx_int((::haxegon::Col_obj::hslval->__get((int)2) * (int)255)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Col_obj,hsl,return )

::Array< Float > Col_obj::hslval;


Col_obj::Col_obj()
{
}

bool Col_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"RED") ) { outValue = ( RED ); return true; }
		if (HX_FIELD_EQ(inName,"rgb") ) { outValue = rgb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hsl") ) { outValue = hsl_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"GREY") ) { outValue = ( GREY ); return true; }
		if (HX_FIELD_EQ(inName,"GRAY") ) { outValue = ( GRAY ); return true; }
		if (HX_FIELD_EQ(inName,"PINK") ) { outValue = ( PINK ); return true; }
		if (HX_FIELD_EQ(inName,"BLUE") ) { outValue = ( BLUE ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"BLACK") ) { outValue = ( BLACK ); return true; }
		if (HX_FIELD_EQ(inName,"WHITE") ) { outValue = ( WHITE ); return true; }
		if (HX_FIELD_EQ(inName,"BROWN") ) { outValue = ( BROWN ); return true; }
		if (HX_FIELD_EQ(inName,"GREEN") ) { outValue = ( GREEN ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ORANGE") ) { outValue = ( ORANGE ); return true; }
		if (HX_FIELD_EQ(inName,"YELLOW") ) { outValue = ( YELLOW ); return true; }
		if (HX_FIELD_EQ(inName,"getred") ) { outValue = getred_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gethue") ) { outValue = gethue_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hslval") ) { outValue = ( hslval ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"MAGENTA") ) { outValue = ( MAGENTA ); return true; }
		if (HX_FIELD_EQ(inName,"getblue") ) { outValue = getblue_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"DARKBLUE") ) { outValue = ( DARKBLUE ); return true; }
		if (HX_FIELD_EQ(inName,"getgreen") ) { outValue = getgreen_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shiftred") ) { outValue = shiftred_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shifthue") ) { outValue = shifthue_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"DARKBROWN") ) { outValue = ( DARKBROWN ); return true; }
		if (HX_FIELD_EQ(inName,"DARKGREEN") ) { outValue = ( DARKGREEN ); return true; }
		if (HX_FIELD_EQ(inName,"NIGHTBLUE") ) { outValue = ( NIGHTBLUE ); return true; }
		if (HX_FIELD_EQ(inName,"LIGHTBLUE") ) { outValue = ( LIGHTBLUE ); return true; }
		if (HX_FIELD_EQ(inName,"shiftblue") ) { outValue = shiftblue_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"LIGHTGREEN") ) { outValue = ( LIGHTGREEN ); return true; }
		if (HX_FIELD_EQ(inName,"shiftgreen") ) { outValue = shiftgreen_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TRANSPARENT") ) { outValue = ( TRANSPARENT ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getlightness") ) { outValue = getlightness_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getsaturation") ) { outValue = getsaturation_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"multiplylightness") ) { outValue = multiplylightness_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"multiplysaturation") ) { outValue = multiplysaturation_dyn(); return true; }
	}
	return false;
}

bool Col_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"RED") ) { RED=ioValue.Cast< int >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"GREY") ) { GREY=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"GRAY") ) { GRAY=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"PINK") ) { PINK=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"BLUE") ) { BLUE=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"BLACK") ) { BLACK=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"WHITE") ) { WHITE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"BROWN") ) { BROWN=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"GREEN") ) { GREEN=ioValue.Cast< int >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ORANGE") ) { ORANGE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"YELLOW") ) { YELLOW=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"hslval") ) { hslval=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"MAGENTA") ) { MAGENTA=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"DARKBLUE") ) { DARKBLUE=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"DARKBROWN") ) { DARKBROWN=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"DARKGREEN") ) { DARKGREEN=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"NIGHTBLUE") ) { NIGHTBLUE=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"LIGHTBLUE") ) { LIGHTBLUE=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"LIGHTGREEN") ) { LIGHTGREEN=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"TRANSPARENT") ) { TRANSPARENT=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Col_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Col_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Col_obj::BLACK,HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32")},
	{hx::fsInt,(void *) &Col_obj::GREY,HX_HCSTRING("GREY","\x5f","\x9b","\x2c","\x2f")},
	{hx::fsInt,(void *) &Col_obj::GRAY,HX_HCSTRING("GRAY","\xe3","\x97","\x2c","\x2f")},
	{hx::fsInt,(void *) &Col_obj::WHITE,HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47")},
	{hx::fsInt,(void *) &Col_obj::RED,HX_HCSTRING("RED","\x31","\x75","\x3e","\x00")},
	{hx::fsInt,(void *) &Col_obj::PINK,HX_HCSTRING("PINK","\x76","\xba","\x18","\x35")},
	{hx::fsInt,(void *) &Col_obj::DARKBROWN,HX_HCSTRING("DARKBROWN","\x20","\xfe","\x74","\x13")},
	{hx::fsInt,(void *) &Col_obj::BROWN,HX_HCSTRING("BROWN","\x56","\x06","\xe2","\x36")},
	{hx::fsInt,(void *) &Col_obj::ORANGE,HX_HCSTRING("ORANGE","\xee","\x5e","\x3f","\xf8")},
	{hx::fsInt,(void *) &Col_obj::YELLOW,HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82")},
	{hx::fsInt,(void *) &Col_obj::DARKGREEN,HX_HCSTRING("DARKGREEN","\x6d","\x3e","\x6e","\xf4")},
	{hx::fsInt,(void *) &Col_obj::GREEN,HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17")},
	{hx::fsInt,(void *) &Col_obj::LIGHTGREEN,HX_HCSTRING("LIGHTGREEN","\x2d","\x2a","\xcf","\x79")},
	{hx::fsInt,(void *) &Col_obj::NIGHTBLUE,HX_HCSTRING("NIGHTBLUE","\x52","\x38","\x99","\x70")},
	{hx::fsInt,(void *) &Col_obj::DARKBLUE,HX_HCSTRING("DARKBLUE","\x10","\x9a","\x84","\xe4")},
	{hx::fsInt,(void *) &Col_obj::BLUE,HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b")},
	{hx::fsInt,(void *) &Col_obj::LIGHTBLUE,HX_HCSTRING("LIGHTBLUE","\x50","\x66","\xb6","\xca")},
	{hx::fsInt,(void *) &Col_obj::MAGENTA,HX_HCSTRING("MAGENTA","\x09","\x8e","\x71","\x8e")},
	{hx::fsInt,(void *) &Col_obj::TRANSPARENT,HX_HCSTRING("TRANSPARENT","\x32","\x37","\xf6","\xf8")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &Col_obj::hslval,HX_HCSTRING("hslval","\x80","\x26","\xef","\x13")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Col_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Col_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Col_obj::BLACK,"BLACK");
	HX_MARK_MEMBER_NAME(Col_obj::GREY,"GREY");
	HX_MARK_MEMBER_NAME(Col_obj::GRAY,"GRAY");
	HX_MARK_MEMBER_NAME(Col_obj::WHITE,"WHITE");
	HX_MARK_MEMBER_NAME(Col_obj::RED,"RED");
	HX_MARK_MEMBER_NAME(Col_obj::PINK,"PINK");
	HX_MARK_MEMBER_NAME(Col_obj::DARKBROWN,"DARKBROWN");
	HX_MARK_MEMBER_NAME(Col_obj::BROWN,"BROWN");
	HX_MARK_MEMBER_NAME(Col_obj::ORANGE,"ORANGE");
	HX_MARK_MEMBER_NAME(Col_obj::YELLOW,"YELLOW");
	HX_MARK_MEMBER_NAME(Col_obj::DARKGREEN,"DARKGREEN");
	HX_MARK_MEMBER_NAME(Col_obj::GREEN,"GREEN");
	HX_MARK_MEMBER_NAME(Col_obj::LIGHTGREEN,"LIGHTGREEN");
	HX_MARK_MEMBER_NAME(Col_obj::NIGHTBLUE,"NIGHTBLUE");
	HX_MARK_MEMBER_NAME(Col_obj::DARKBLUE,"DARKBLUE");
	HX_MARK_MEMBER_NAME(Col_obj::BLUE,"BLUE");
	HX_MARK_MEMBER_NAME(Col_obj::LIGHTBLUE,"LIGHTBLUE");
	HX_MARK_MEMBER_NAME(Col_obj::MAGENTA,"MAGENTA");
	HX_MARK_MEMBER_NAME(Col_obj::TRANSPARENT,"TRANSPARENT");
	HX_MARK_MEMBER_NAME(Col_obj::hslval,"hslval");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Col_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Col_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Col_obj::BLACK,"BLACK");
	HX_VISIT_MEMBER_NAME(Col_obj::GREY,"GREY");
	HX_VISIT_MEMBER_NAME(Col_obj::GRAY,"GRAY");
	HX_VISIT_MEMBER_NAME(Col_obj::WHITE,"WHITE");
	HX_VISIT_MEMBER_NAME(Col_obj::RED,"RED");
	HX_VISIT_MEMBER_NAME(Col_obj::PINK,"PINK");
	HX_VISIT_MEMBER_NAME(Col_obj::DARKBROWN,"DARKBROWN");
	HX_VISIT_MEMBER_NAME(Col_obj::BROWN,"BROWN");
	HX_VISIT_MEMBER_NAME(Col_obj::ORANGE,"ORANGE");
	HX_VISIT_MEMBER_NAME(Col_obj::YELLOW,"YELLOW");
	HX_VISIT_MEMBER_NAME(Col_obj::DARKGREEN,"DARKGREEN");
	HX_VISIT_MEMBER_NAME(Col_obj::GREEN,"GREEN");
	HX_VISIT_MEMBER_NAME(Col_obj::LIGHTGREEN,"LIGHTGREEN");
	HX_VISIT_MEMBER_NAME(Col_obj::NIGHTBLUE,"NIGHTBLUE");
	HX_VISIT_MEMBER_NAME(Col_obj::DARKBLUE,"DARKBLUE");
	HX_VISIT_MEMBER_NAME(Col_obj::BLUE,"BLUE");
	HX_VISIT_MEMBER_NAME(Col_obj::LIGHTBLUE,"LIGHTBLUE");
	HX_VISIT_MEMBER_NAME(Col_obj::MAGENTA,"MAGENTA");
	HX_VISIT_MEMBER_NAME(Col_obj::TRANSPARENT,"TRANSPARENT");
	HX_VISIT_MEMBER_NAME(Col_obj::hslval,"hslval");
};

#endif

hx::Class Col_obj::__mClass;

static ::String Col_obj_sStaticFields[] = {
	HX_HCSTRING("BLACK","\x9f","\x0d","\xe0","\x32"),
	HX_HCSTRING("GREY","\x5f","\x9b","\x2c","\x2f"),
	HX_HCSTRING("GRAY","\xe3","\x97","\x2c","\x2f"),
	HX_HCSTRING("WHITE","\x89","\x82","\xab","\x47"),
	HX_HCSTRING("RED","\x31","\x75","\x3e","\x00"),
	HX_HCSTRING("PINK","\x76","\xba","\x18","\x35"),
	HX_HCSTRING("DARKBROWN","\x20","\xfe","\x74","\x13"),
	HX_HCSTRING("BROWN","\x56","\x06","\xe2","\x36"),
	HX_HCSTRING("ORANGE","\xee","\x5e","\x3f","\xf8"),
	HX_HCSTRING("YELLOW","\x74","\x4b","\xdf","\x82"),
	HX_HCSTRING("DARKGREEN","\x6d","\x3e","\x6e","\xf4"),
	HX_HCSTRING("GREEN","\xa3","\x46","\xdb","\x17"),
	HX_HCSTRING("LIGHTGREEN","\x2d","\x2a","\xcf","\x79"),
	HX_HCSTRING("NIGHTBLUE","\x52","\x38","\x99","\x70"),
	HX_HCSTRING("DARKBLUE","\x10","\x9a","\x84","\xe4"),
	HX_HCSTRING("BLUE","\x9a","\x0a","\xda","\x2b"),
	HX_HCSTRING("LIGHTBLUE","\x50","\x66","\xb6","\xca"),
	HX_HCSTRING("MAGENTA","\x09","\x8e","\x71","\x8e"),
	HX_HCSTRING("TRANSPARENT","\x32","\x37","\xf6","\xf8"),
	HX_HCSTRING("getred","\x7b","\x5a","\x3e","\xa3"),
	HX_HCSTRING("getgreen","\x6d","\xae","\x96","\x66"),
	HX_HCSTRING("getblue","\x30","\xc6","\xc2","\x28"),
	HX_HCSTRING("shiftred","\x0f","\x2a","\xbd","\x99"),
	HX_HCSTRING("shiftgreen","\x01","\x8b","\x17","\x16"),
	HX_HCSTRING("shiftblue","\x1c","\x98","\x39","\xe1"),
	HX_HCSTRING("shifthue","\x76","\xa1","\xb5","\x99"),
	HX_HCSTRING("multiplysaturation","\xf6","\x4a","\x24","\x32"),
	HX_HCSTRING("multiplylightness","\xc9","\xed","\x86","\x53"),
	HX_HCSTRING("gethue","\xe2","\xd1","\x36","\xa3"),
	HX_HCSTRING("getsaturation","\xe8","\x2b","\x63","\x5c"),
	HX_HCSTRING("getlightness","\x17","\xf1","\xca","\x44"),
	HX_HCSTRING("rgb","\x0d","\xdb","\x56","\x00"),
	HX_HCSTRING("hsl","\x01","\x4f","\x4f","\x00"),
	HX_HCSTRING("hslval","\x80","\x26","\xef","\x13"),
	::String(null())
};

void Col_obj::__register()
{
	hx::Object *dummy = new Col_obj;
	Col_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxegon.Col","\x92","\xe9","\x11","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Col_obj::__GetStatic;
	__mClass->mSetStaticField = &Col_obj::__SetStatic;
	__mClass->mMarkFunc = Col_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Col_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Col_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Col_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Col_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Col_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Col_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_6_boot)
HXDLIN(   6)		BLACK = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_7_boot)
HXDLIN(   7)		GREY = (int)10329501;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_8_boot)
HXDLIN(   8)		GRAY = (int)10329501;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_9_boot)
HXDLIN(   9)		WHITE = (int)16777215;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_10_boot)
HXDLIN(  10)		RED = (int)12461619;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_11_boot)
HXDLIN(  11)		PINK = (int)14708619;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_12_boot)
HXDLIN(  12)		DARKBROWN = (int)4799531;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_13_boot)
HXDLIN(  13)		BROWN = (int)10773538;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_14_boot)
HXDLIN(  14)		ORANGE = (int)15436081;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_15_boot)
HXDLIN(  15)		YELLOW = (int)16245355;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_16_boot)
HXDLIN(  16)		DARKGREEN = (int)3098702;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_17_boot)
HXDLIN(  17)		GREEN = (int)4491546;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_18_boot)
HXDLIN(  18)		LIGHTGREEN = (int)10735143;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_19_boot)
HXDLIN(  19)		NIGHTBLUE = (int)1779250;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_20_boot)
HXDLIN(  20)		DARKBLUE = (int)22404;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_21_boot)
HXDLIN(  21)		BLUE = (int)3252978;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_22_boot)
HXDLIN(  22)		LIGHTBLUE = (int)11721967;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_23_boot)
HXDLIN(  23)		MAGENTA = (int)16711935;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_25_boot)
HXDLIN(  25)		TRANSPARENT = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_532a15ee85aaaa02_160_boot)
HXDLIN( 160)		hslval = ::Array_obj< Float >::fromData( _hx_array_data_3a11e992_36,3);
            	}
}

} // end namespace haxegon
